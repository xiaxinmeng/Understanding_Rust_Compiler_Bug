{"sha": "dce604a8fe85c22beb53d99c609d88e3a0ca9320", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZTYwNGE4ZmU4NWMyMmJlYjUzZDk5YzYwOWQ4OGUzYTBjYTkzMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T13:34:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T13:34:12Z"}, "message": "Auto merge of #44295 - plietar:extern-types, r=arielb1\n\nImplement RFC 1861: Extern types\n\nA few notes :\n\n- Type parameters are not supported. This was an unresolved question from the RFC. It is not clear how useful this feature is, and how variance should be treated. This can be added in a future PR.\n\n- `size_of_val` / `align_of_val` can be called with extern types, and respectively return 0 and 1. This differs from the RFC, which specified that they should panic, but after discussion with @eddyb on IRC this seems like a better solution.\nIf/when a `DynSized` trait is added, this will be disallowed statically.\n\n- Auto traits are not implemented by default, since the contents of extern types is unknown. This means extern types are `!Sync`, `!Send` and `!Freeze`. This seems like the correct behaviour to me.\nManual `unsafe impl Sync for Foo` is still possible.\n\n- This PR allows extern type to be used as the tail of a struct, as described by the RFC :\n```rust\nextern {\n    type OpaqueTail;\n}\n\n#[repr(C)]\nstruct FfiStruct {\n    data: u8,\n    more_data: u32,\n    tail: OpaqueTail,\n}\n```\n\nHowever this is undesirable, as the alignment of `tail` is unknown (the current PR assumes an alignment of 1). Unfortunately we can't prevent it in the general case as the tail could be a type parameter :\n```rust\n#[repr(C)]\nstruct FfiStruct<T: ?Sized> {\n    data: u8,\n    more_data: u32,\n    tail: T,\n}\n```\n\nAdding a `DynSized` trait would solve this as well, by requiring tail fields to be bound by it.\n\n- Despite being unsized, pointers to extern types are thin and can be casted from/to integers. However it is not possible to write a `null<T>() -> *const T` function which works with extern types, as I've explained here : https://github.com/rust-lang/rust/issues/43467#issuecomment-321678621\n\n- Trait objects cannot be built from extern types. I intend to support it eventually, although how this interacts with `DynSized`/`size_of_val` is still unclear.\n\n- The definition of `c_void` is unmodified", "tree": {"sha": "a90645a189471c19ec8f875685c12e9ee9c6224e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a90645a189471c19ec8f875685c12e9ee9c6224e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce604a8fe85c22beb53d99c609d88e3a0ca9320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce604a8fe85c22beb53d99c609d88e3a0ca9320", "html_url": "https://github.com/rust-lang/rust/commit/dce604a8fe85c22beb53d99c609d88e3a0ca9320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce604a8fe85c22beb53d99c609d88e3a0ca9320/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7da9a5e178e28b2e387e6296aa1b0289acdf5781", "url": "https://api.github.com/repos/rust-lang/rust/commits/7da9a5e178e28b2e387e6296aa1b0289acdf5781", "html_url": "https://github.com/rust-lang/rust/commit/7da9a5e178e28b2e387e6296aa1b0289acdf5781"}, {"sha": "1e9e3191ab01ad16e8a839efeea5cac2999140af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9e3191ab01ad16e8a839efeea5cac2999140af", "html_url": "https://github.com/rust-lang/rust/commit/1e9e3191ab01ad16e8a839efeea5cac2999140af"}], "stats": {"total": 846, "additions": 732, "deletions": 114}, "files": [{"sha": "64bcdc7920a0151761fe37518a680d7ee39f2240", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -35,6 +35,7 @@ pub enum Def {\n     Variant(DefId),\n     Trait(DefId),\n     TyAlias(DefId),\n+    TyForeign(DefId),\n     AssociatedTy(DefId),\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n@@ -152,7 +153,7 @@ impl Def {\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n-            Def::GlobalAsm(id) => {\n+            Def::GlobalAsm(id) | Def::TyForeign(id) => {\n                 id\n             }\n \n@@ -186,6 +187,7 @@ impl Def {\n             Def::StructCtor(.., CtorKind::Fictive) => bug!(\"impossible struct constructor\"),\n             Def::Union(..) => \"union\",\n             Def::Trait(..) => \"trait\",\n+            Def::TyForeign(..) => \"foreign type\",\n             Def::Method(..) => \"method\",\n             Def::Const(..) => \"constant\",\n             Def::AssociatedConst(..) => \"associated constant\","}, {"sha": "ae25924ab420ce454e996d9b0f5582851f1b0ada", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -704,6 +704,7 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n             }\n         }\n         ForeignItemStatic(ref typ, _) => visitor.visit_ty(typ),\n+        ForeignItemType => (),\n     }\n \n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);"}, {"sha": "3834852cac5a9411132e48c02ab69571eb685be4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1722,6 +1722,9 @@ impl<'a> LoweringContext<'a> {\n                     ForeignItemKind::Static(ref t, m) => {\n                         hir::ForeignItemStatic(this.lower_ty(t), m)\n                     }\n+                    ForeignItemKind::Ty => {\n+                        hir::ForeignItemType\n+                    }\n                 },\n                 vis: this.lower_visibility(&i.vis, None),\n                 span: i.span,"}, {"sha": "ca5ffe830488d7ad5cb84873f5959eaa26bef00c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1912,13 +1912,16 @@ pub enum ForeignItem_ {\n     /// A foreign static item (`static ext: u8`), with optional mutability\n     /// (the boolean is true when mutable)\n     ForeignItemStatic(P<Ty>, bool),\n+    /// A foreign type\n+    ForeignItemType,\n }\n \n impl ForeignItem_ {\n     pub fn descriptive_variant(&self) -> &str {\n         match *self {\n             ForeignItemFn(..) => \"foreign function\",\n             ForeignItemStatic(..) => \"foreign static item\",\n+            ForeignItemType => \"foreign type\",\n         }\n     }\n }"}, {"sha": "24a0b5fcea9b84909603fed5f0ba4713a2cccfb5", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -478,6 +478,13 @@ impl<'a> State<'a> {\n                 self.end()?; // end the head-ibox\n                 self.end() // end the outer cbox\n             }\n+            hir::ForeignItemType => {\n+                self.head(&visibility_qualified(&item.vis, \"type\"))?;\n+                self.print_name(item.name)?;\n+                self.s.word(\";\")?;\n+                self.end()?; // end the head-ibox\n+                self.end() // end the outer cbox\n+            }\n         }\n     }\n "}, {"sha": "181b97aa7b54a98c175957612d2e8d58538fbeec", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -977,7 +977,8 @@ impl_stable_hash_for!(struct hir::ForeignItem {\n \n impl_stable_hash_for!(enum hir::ForeignItem_ {\n     ForeignItemFn(fn_decl, arg_names, generics),\n-    ForeignItemStatic(ty, is_mutbl)\n+    ForeignItemStatic(ty, is_mutbl),\n+    ForeignItemType\n });\n \n impl_stable_hash_for!(enum hir::Stmt_ {\n@@ -1086,6 +1087,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     PrimTy(prim_ty),\n     TyParam(def_id),\n     SelfTy(trait_def_id, impl_def_id),\n+    TyForeign(def_id),\n     Fn(def_id),\n     Const(def_id),\n     Static(def_id, is_mutbl),"}, {"sha": "48d3017f5976388c7080ad6b7b8cb3c56c5789dd", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -610,8 +610,7 @@ for ty::TypeVariants<'gcx>\n                 def_id.hash_stable(hcx, hasher);\n                 closure_substs.hash_stable(hcx, hasher);\n             }\n-            TyGenerator(def_id, closure_substs, interior)\n-             => {\n+            TyGenerator(def_id, closure_substs, interior) => {\n                 def_id.hash_stable(hcx, hasher);\n                 closure_substs.hash_stable(hcx, hasher);\n                 interior.hash_stable(hcx, hasher);\n@@ -630,6 +629,9 @@ for ty::TypeVariants<'gcx>\n             TyParam(param_ty) => {\n                 param_ty.hash_stable(hcx, hasher);\n             }\n+            TyForeign(def_id) => {\n+                def_id.hash_stable(hcx, hasher);\n+            }\n             TyInfer(..) => {\n                 bug!(\"ty::TypeVariants::hash_stable() - Unexpected variant {:?}.\", *self)\n             }"}, {"sha": "41e7dffe54dc106f6a7324ee198c37688da89660", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -312,6 +312,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::TyNever |\n             ty::TyTuple(..) |\n             ty::TyProjection(..) |\n+            ty::TyForeign(..) |\n             ty::TyParam(..) |\n             ty::TyAnon(..) => {\n                 t.super_fold_with(self)"}, {"sha": "ee0e580920e1f2ff958312be1cf651eae3aac125", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -365,6 +365,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ForeignItemStatic(..) => {\n                 intravisit::walk_foreign_item(self, item);\n             }\n+            hir::ForeignItemType => {\n+                intravisit::walk_foreign_item(self, item);\n+            }\n         }\n     }\n "}, {"sha": "10a32c26e741d2c68017f39b3e9c9d27803452f9", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -304,6 +304,10 @@ fn ty_is_local_constructor(ty: Ty, infer_is_local: InferIsLocal)-> bool {\n             def.did.is_local()\n         }\n \n+        ty::TyForeign(did) => {\n+            did.is_local()\n+        }\n+\n         ty::TyDynamic(ref tt, ..) => {\n             tt.principal().map_or(false, |p| p.def_id().is_local())\n         }"}, {"sha": "e2b23c12cf1f357bf2728532f3ce62102a9a6cc1", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -255,6 +255,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     AdtKind::Enum => Some(17),\n                 },\n                 ty::TyGenerator(..) => Some(18),\n+                ty::TyForeign(..) => Some(19),\n                 ty::TyInfer(..) | ty::TyError => None\n             }\n         }"}, {"sha": "6c573acf07d63270c72a761537391fedb4f4b227", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1705,6 +1705,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     // say nothing; a candidate may be added by\n                     // `assemble_candidates_from_object_ty`.\n                 }\n+                ty::TyForeign(..) => {\n+                    // Since the contents of foreign types is unknown,\n+                    // we don't add any `..` impl. Default traits could\n+                    // still be provided by a manual implementation for\n+                    // this trait and type.\n+                }\n                 ty::TyParam(..) |\n                 ty::TyProjection(..) => {\n                     // In these cases, we don't know what the actual\n@@ -2022,7 +2028,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(Vec::new()))\n             }\n \n-            ty::TyStr | ty::TySlice(_) | ty::TyDynamic(..) => Never,\n+            ty::TyStr | ty::TySlice(_) | ty::TyDynamic(..) | ty::TyForeign(..) => Never,\n \n             ty::TyTuple(tys, _) => {\n                 Where(ty::Binder(tys.last().into_iter().cloned().collect()))\n@@ -2066,7 +2072,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(Vec::new()))\n             }\n \n-            ty::TyDynamic(..) | ty::TyStr | ty::TySlice(..) | ty::TyGenerator(..) |\n+            ty::TyDynamic(..) | ty::TyStr | ty::TySlice(..) |\n+            ty::TyGenerator(..) | ty::TyForeign(..) |\n             ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl: hir::MutMutable }) => {\n                 Never\n             }\n@@ -2148,6 +2155,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             ty::TyDynamic(..) |\n             ty::TyParam(..) |\n+            ty::TyForeign(..) |\n             ty::TyProjection(..) |\n             ty::TyInfer(ty::TyVar(_)) |\n             ty::TyInfer(ty::FreshTy(_)) |"}, {"sha": "6ab81a41d680988dcd1aa261d655941977665dce", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1610,7 +1610,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     pub fn print_debug_stats(self) {\n         sty_debug_print!(\n             self,\n-            TyAdt, TyArray, TySlice, TyRawPtr, TyRef, TyFnDef, TyFnPtr, TyGenerator,\n+            TyAdt, TyArray, TySlice, TyRawPtr, TyRef, TyFnDef, TyFnPtr, TyGenerator, TyForeign,\n             TyDynamic, TyClosure, TyTuple, TyParam, TyInfer, TyProjection, TyAnon);\n \n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n@@ -1861,6 +1861,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TyAdt(def, substs))\n     }\n \n+    pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {\n+        self.mk_ty(TyForeign(def_id))\n+    }\n+\n     pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n         let adt_def = self.adt_def(def_id);"}, {"sha": "5cfa72c07126fb91b9b975ca97dfc667aca291e9", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -182,6 +182,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::TyTuple(ref tys, _) if tys.is_empty() => self.to_string(),\n \n             ty::TyAdt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n+            ty::TyForeign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)),\n             ty::TyArray(_, n) => {\n                 if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n                     format!(\"array of {} elements\", n)"}, {"sha": "138f6af77c6586352501ac3ac463b3f245523d16", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -49,6 +49,7 @@ pub enum SimplifiedTypeGen<D>\n     AnonSimplifiedType(D),\n     FunctionSimplifiedType(usize),\n     ParameterSimplifiedType,\n+    ForeignSimplifiedType(DefId),\n }\n \n /// Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\n@@ -113,6 +114,9 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyAnon(def_id, _) => {\n             Some(AnonSimplifiedType(def_id))\n         }\n+        ty::TyForeign(def_id) => {\n+            Some(ForeignSimplifiedType(def_id))\n+        }\n         ty::TyInfer(_) | ty::TyError => None,\n     }\n }\n@@ -140,6 +144,7 @@ impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n             AnonSimplifiedType(d) => AnonSimplifiedType(map(d)),\n             FunctionSimplifiedType(n) => FunctionSimplifiedType(n),\n             ParameterSimplifiedType => ParameterSimplifiedType,\n+            ForeignSimplifiedType(d) => ForeignSimplifiedType(d),\n         }\n     }\n }\n@@ -172,6 +177,7 @@ impl<'gcx, D> HashStable<StableHashingContext<'gcx>> for SimplifiedTypeGen<D>\n             GeneratorSimplifiedType(d) => d.hash_stable(hcx, hasher),\n             AnonSimplifiedType(d) => d.hash_stable(hcx, hasher),\n             FunctionSimplifiedType(n) => n.hash_stable(hcx, hasher),\n+            ForeignSimplifiedType(d) => d.hash_stable(hcx, hasher),\n         }\n     }\n }"}, {"sha": "63c646dbd2310977b13b60b7744ae501ecf80df8", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -63,7 +63,8 @@ impl FlagComputation {\n             &ty::TyFloat(_) |\n             &ty::TyUint(_) |\n             &ty::TyNever |\n-            &ty::TyStr => {\n+            &ty::TyStr |\n+            &ty::TyForeign(..) => {\n             }\n \n             // You might think that we could just return TyError for"}, {"sha": "98c55331f8a1094576a8eeccd3a277608ab20518", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -281,6 +281,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            ty::TyForeign(did) => self.push_item_path(buffer, did),\n+\n             ty::TyBool |\n             ty::TyChar |\n             ty::TyInt(_) |\n@@ -344,8 +346,9 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n                                       .next(),\n \n         ty::TyFnDef(def_id, _) |\n-        ty::TyClosure(def_id, _) => Some(def_id),\n-        ty::TyGenerator(def_id, _, _) => Some(def_id),\n+        ty::TyClosure(def_id, _) |\n+        ty::TyGenerator(def_id, _, _) |\n+        ty::TyForeign(def_id) => Some(def_id),\n \n         ty::TyBool |\n         ty::TyChar |"}, {"sha": "491fa2a240cce84324ee9b844ed3247d21ec9264", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1141,14 +1141,15 @@ impl<'a, 'tcx> Layout {\n                 Ok(Scalar { value: Pointer, non_zero: non_zero })\n             } else {\n                 let unsized_part = tcx.struct_tail(pointee);\n-                let meta = match unsized_part.sty {\n-                    ty::TySlice(_) | ty::TyStr => {\n-                        Int(dl.ptr_sized_integer())\n-                    }\n-                    ty::TyDynamic(..) => Pointer,\n-                    _ => return Err(LayoutError::Unknown(unsized_part))\n-                };\n-                Ok(FatPointer { metadata: meta, non_zero: non_zero })\n+                match unsized_part.sty {\n+                    ty::TySlice(_) | ty::TyStr => Ok(FatPointer {\n+                        metadata: Int(dl.ptr_sized_integer()),\n+                        non_zero: non_zero\n+                    }),\n+                    ty::TyDynamic(..) => Ok(FatPointer { metadata: Pointer, non_zero: non_zero }),\n+                    ty::TyForeign(..) => Ok(Scalar { value: Pointer, non_zero: non_zero }),\n+                    _ => Err(LayoutError::Unknown(unsized_part)),\n+                }\n             }\n         };\n \n@@ -1239,7 +1240,7 @@ impl<'a, 'tcx> Layout {\n                     non_zero: false\n                 }\n             }\n-            ty::TyDynamic(..) => {\n+            ty::TyDynamic(..) | ty::TyForeign(..) => {\n                 let mut unit = Struct::new(dl, &vec![], &ReprOptions::default(),\n                   StructKind::AlwaysSizedUnivariant, ty)?;\n                 unit.sized = false;\n@@ -2252,7 +2253,8 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n             ty::TyFnPtr(_) |\n             ty::TyNever |\n             ty::TyFnDef(..) |\n-            ty::TyDynamic(..) => {\n+            ty::TyDynamic(..) |\n+            ty::TyForeign(..) => {\n                 bug!(\"TyLayout::field_type({:?}): not applicable\", self)\n             }\n "}, {"sha": "b3f2886cdf9de51a338e9e6a93064435cc46f50b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1784,7 +1784,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 vec![]\n             }\n \n-            TyStr | TyDynamic(..) | TySlice(_) | TyError => {\n+            TyStr | TyDynamic(..) | TySlice(_) | TyForeign(..) | TyError => {\n                 // these are never sized - return the target type\n                 vec![ty]\n             }"}, {"sha": "707137649d771b01be64c9ee26d4daafcc74ee5f", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -142,6 +142,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::TyNever |           // ...\n             ty::TyAdt(..) |         // OutlivesNominalType\n             ty::TyAnon(..) |        // OutlivesNominalType (ish)\n+            ty::TyForeign(..) |     // OutlivesNominalType\n             ty::TyStr |             // OutlivesScalar (ish)\n             ty::TyArray(..) |       // ...\n             ty::TySlice(..) |       // ..."}, {"sha": "376cdc462e82fc4f91867294c0c800ec9c9a9e31", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -381,6 +381,12 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_adt(a_def, substs))\n         }\n \n+        (&ty::TyForeign(a_id), &ty::TyForeign(b_id))\n+            if a_id == b_id =>\n+        {\n+            Ok(tcx.mk_foreign(a_id))\n+        }\n+\n         (&ty::TyDynamic(ref a_obj, ref a_region), &ty::TyDynamic(ref b_obj, ref b_region)) => {\n             let region_bound = relation.with_cause(Cause::ExistentialRegionBound,\n                                                        |relation| {"}, {"sha": "5f1448cd1f18e750f0cf7fa5fe2359f0553c6cb2", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -676,7 +676,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAnon(did, substs) => ty::TyAnon(did, substs.fold_with(folder)),\n             ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyError | ty::TyInfer(_) |\n-            ty::TyParam(..) | ty::TyNever => return self\n+            ty::TyParam(..) | ty::TyNever | ty::TyForeign(..) => return self\n         };\n \n         if self.sty == sty {\n@@ -710,7 +710,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAnon(_, ref substs) => substs.visit_with(visitor),\n             ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyError | ty::TyInfer(_) |\n-            ty::TyParam(..) | ty::TyNever => false,\n+            ty::TyParam(..) | ty::TyNever | ty::TyForeign(..) => false,\n         }\n     }\n "}, {"sha": "d0ac7d0183a582da6385c9cc8c2b3490bd349714", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -104,6 +104,8 @@ pub enum TypeVariants<'tcx> {\n     /// definition and not a concrete use of it.\n     TyAdt(&'tcx AdtDef, &'tcx Substs<'tcx>),\n \n+    TyForeign(DefId),\n+\n     /// The pointee of a string slice. Written as `str`.\n     TyStr,\n \n@@ -1117,13 +1119,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_structural(&self) -> bool {\n-        match self.sty {\n-            TyAdt(..) | TyTuple(..) | TyArray(..) | TyClosure(..) => true,\n-            _ => self.is_slice() | self.is_trait(),\n-        }\n-    }\n-\n     #[inline]\n     pub fn is_simd(&self) -> bool {\n         match self.sty {\n@@ -1347,6 +1342,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         match self.sty {\n             TyDynamic(ref tt, ..) => tt.principal().map(|p| p.def_id()),\n             TyAdt(def, _) => Some(def.did),\n+            TyForeign(did) => Some(did),\n             TyClosure(id, _) => Some(id),\n             _ => None,\n         }\n@@ -1396,6 +1392,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyRawPtr(_) |\n             TyNever |\n             TyTuple(..) |\n+            TyForeign(..) |\n             TyParam(_) |\n             TyInfer(_) |\n             TyError => {"}, {"sha": "39842a543b54bf6b6fd781c478ac642bfa9f0a9f", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -553,7 +553,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         let result = match ty.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) |\n-            ty::TyFloat(_) | ty::TyStr | ty::TyNever |\n+            ty::TyFloat(_) | ty::TyStr | ty::TyNever | ty::TyForeign(..) |\n             ty::TyRawPtr(..) | ty::TyRef(..) | ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                 // these types never have a destructor\n                 Ok(ty::DtorckConstraint::empty())\n@@ -714,6 +714,7 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyAnon(def_id, _) |\n             TyFnDef(def_id, _) => self.def_id(def_id),\n             TyAdt(d, _) => self.def_id(d.did),\n+            TyForeign(def_id) => self.def_id(def_id),\n             TyFnPtr(f) => {\n                 self.hash(f.unsafety());\n                 self.hash(f.abi());\n@@ -1109,6 +1110,9 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar |\n         ty::TyRawPtr(_) | ty::TyRef(..) | ty::TyStr => false,\n \n+        // Foreign types can never have destructors\n+        ty::TyForeign(..) => false,\n+\n         // Issue #22536: We first query type_moves_by_default.  It sees a\n         // normalized version of the type, and therefore will definitely\n         // know whether the type implements Copy (and thus needs no"}, {"sha": "448ad4cf675c7658cba6a0c6f71549f2ecbbdaaf", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -82,7 +82,8 @@ pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> AccIntoIter<TypeWalkerArray<'tcx>> {\n fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-        ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyNever | ty::TyError => {\n+        ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyNever | ty::TyError |\n+        ty::TyForeign(..) => {\n         }\n         ty::TyArray(ty, len) => {\n             push_const(stack, len);"}, {"sha": "c631e2c4db51bc987059a639ac1ba5f67756c361", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -284,7 +284,8 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 ty::TyError |\n                 ty::TyStr |\n                 ty::TyNever |\n-                ty::TyParam(_) => {\n+                ty::TyParam(_) |\n+                ty::TyForeign(..) => {\n                     // WfScalar, WfParameter, etc\n                 }\n "}, {"sha": "acb929981fbf2ce209f0404d13b2034e2cac2c4a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -17,7 +17,7 @@ use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, TyAdt};\n use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n-use ty::{TyClosure, TyGenerator, TyProjection, TyAnon};\n+use ty::{TyClosure, TyGenerator, TyForeign, TyProjection, TyAnon};\n use ty::{TyDynamic, TyInt, TyUint, TyInfer};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use util::nodemap::FxHashSet;\n@@ -1012,6 +1012,7 @@ define_print! {\n                         Ok(())\n                     }\n                 }\n+                TyForeign(def_id) => parameterized(f, subst::Substs::empty(), def_id, &[]),\n                 TyProjection(ref data) => data.print(f, cx),\n                 TyAnon(def_id, substs) => {\n                     ty::tls::with(|tcx| {"}, {"sha": "8f08987505b945441110b8c6d9d7b52fe009ac5a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -621,6 +621,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 FfiSafe\n             }\n \n+            ty::TyForeign(..) => FfiSafe,\n+\n             ty::TyParam(..) |\n             ty::TyInfer(..) |\n             ty::TyError |\n@@ -723,6 +725,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n                         hir::ForeignItemStatic(ref ty, _) => {\n                             vis.check_foreign_static(ni.id, ty.span);\n                         }\n+                        hir::ForeignItemType => ()\n                     }\n                 }\n             }"}, {"sha": "909e01376b92c922dd1c547b42148cb9f9b71def", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -449,6 +449,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Enum(..) => Def::Enum(did),\n             EntryKind::MacroDef(_) => Def::Macro(did, MacroKind::Bang),\n             EntryKind::GlobalAsm => Def::GlobalAsm(did),\n+            EntryKind::ForeignType => Def::TyForeign(did),\n \n             EntryKind::ForeignMod |\n             EntryKind::Impl(_) |"}, {"sha": "abe2b6d0c1b1994c3875bff2f0a9ee9c2c9d9950", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1419,6 +1419,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             }\n             hir::ForeignItemStatic(_, true) => EntryKind::ForeignMutStatic,\n             hir::ForeignItemStatic(_, false) => EntryKind::ForeignImmStatic,\n+            hir::ForeignItemType => EntryKind::ForeignType,\n         };\n \n         Entry {"}, {"sha": "3c3162bcb5138560280bbb1ad5d9fd475fa866e3", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -292,6 +292,7 @@ pub enum EntryKind<'tcx> {\n     ForeignImmStatic,\n     ForeignMutStatic,\n     ForeignMod,\n+    ForeignType,\n     GlobalAsm,\n     Type,\n     Enum(ReprOptions),\n@@ -325,6 +326,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for EntryKind<'gcx> {\n             EntryKind::ForeignMutStatic |\n             EntryKind::ForeignMod       |\n             EntryKind::GlobalAsm        |\n+            EntryKind::ForeignType      |\n             EntryKind::Field |\n             EntryKind::Type => {\n                 // Nothing else to hash here."}, {"sha": "e44f3f3982491af01c9c983927c644b06a2cd163", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -288,7 +288,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     err.emit();\n                 });\n             }\n-            ForeignItemKind::Static(..) => {}\n+            ForeignItemKind::Static(..) | ForeignItemKind::Ty => {}\n         }\n \n         visit::walk_foreign_item(self, fi)"}, {"sha": "3beba03ee1401884cf2915b78c1b8a0d68fed7e4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -85,6 +85,7 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n     fn item_ty_level(&self, item_def_id: DefId) -> Option<AccessLevel> {\n         let ty_def_id = match self.tcx.type_of(item_def_id).sty {\n             ty::TyAdt(adt, _) => adt.did,\n+            ty::TyForeign(did) => did,\n             ty::TyDynamic(ref obj, ..) if obj.principal().is_some() =>\n                 obj.principal().unwrap().def_id(),\n             ty::TyProjection(ref proj) => proj.trait_ref(self.tcx).def_id,\n@@ -444,6 +445,7 @@ impl<'b, 'a, 'tcx> TypeVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'b\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         let ty_def_id = match ty.sty {\n             ty::TyAdt(adt, _) => Some(adt.did),\n+            ty::TyForeign(did) => Some(did),\n             ty::TyDynamic(ref obj, ..) => obj.principal().map(|p| p.def_id()),\n             ty::TyProjection(ref proj) => Some(proj.item_def_id),\n             ty::TyFnDef(def_id, ..) |\n@@ -800,7 +802,9 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n impl<'a, 'tcx> TypeVisitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         match ty.sty {\n-            ty::TyAdt(&ty::AdtDef { did: def_id, .. }, ..) | ty::TyFnDef(def_id, ..) => {\n+            ty::TyAdt(&ty::AdtDef { did: def_id, .. }, ..) |\n+            ty::TyFnDef(def_id, ..) |\n+            ty::TyForeign(def_id) => {\n                 if !self.item_is_accessible(def_id) {\n                     let msg = format!(\"type `{}` is private\", ty);\n                     self.tcx.sess.span_err(self.span, &msg);\n@@ -1329,6 +1333,7 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         let ty_def_id = match ty.sty {\n             ty::TyAdt(adt, _) => Some(adt.did),\n+            ty::TyForeign(did) => Some(did),\n             ty::TyDynamic(ref obj, ..) => obj.principal().map(|p| p.def_id()),\n             ty::TyProjection(ref proj) => {\n                 if self.required_visibility == ty::Visibility::Invisible {\n@@ -1349,8 +1354,13 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n         if let Some(def_id) = ty_def_id {\n             // Non-local means public (private items can't leave their crate, modulo bugs)\n             if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n-                let item = self.tcx.hir.expect_item(node_id);\n-                let vis = ty::Visibility::from_hir(&item.vis, node_id, self.tcx);\n+                let vis = match self.tcx.hir.find(node_id) {\n+                    Some(hir::map::NodeItem(item)) => &item.vis,\n+                    Some(hir::map::NodeForeignItem(item)) => &item.vis,\n+                    _ => bug!(\"expected item of foreign item\"),\n+                };\n+\n+                let vis = ty::Visibility::from_hir(vis, node_id, self.tcx);\n \n                 if !vis.is_at_least(self.min_visibility, self.tcx) {\n                     self.min_visibility = vis;"}, {"sha": "880b370c7f66b07c3ac9bc5f7d65ae6b7b2a14d6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -419,17 +419,20 @@ impl<'a> Resolver<'a> {\n \n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem, expansion: Mark) {\n-        let def = match item.node {\n+        let (def, ns) = match item.node {\n             ForeignItemKind::Fn(..) => {\n-                Def::Fn(self.definitions.local_def_id(item.id))\n+                (Def::Fn(self.definitions.local_def_id(item.id)), ValueNS)\n             }\n             ForeignItemKind::Static(_, m) => {\n-                Def::Static(self.definitions.local_def_id(item.id), m)\n+                (Def::Static(self.definitions.local_def_id(item.id), m), ValueNS)\n+            }\n+            ForeignItemKind::Ty => {\n+                (Def::TyForeign(self.definitions.local_def_id(item.id)), TypeNS)\n             }\n         };\n         let parent = self.current_module;\n         let vis = self.resolve_visibility(&item.vis);\n-        self.define(parent, item.ident, ValueNS, (def, vis, item.span, expansion));\n+        self.define(parent, item.ident, ns, (def, vis, item.span, expansion));\n     }\n \n     fn build_reduced_graph_for_block(&mut self, block: &Block, expansion: Mark) {\n@@ -462,7 +465,7 @@ impl<'a> Resolver<'a> {\n                                              span);\n                 self.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, expansion));\n             }\n-            Def::Variant(..) | Def::TyAlias(..) => {\n+            Def::Variant(..) | Def::TyAlias(..) | Def::TyForeign(..) => {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, expansion));\n             }\n             Def::Fn(..) | Def::Static(..) | Def::Const(..) | Def::VariantCtor(..) => {"}, {"sha": "83eeaf551c56c838d142442dc3e0e2fbe195da11", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -468,7 +468,8 @@ impl<'a> PathSource<'a> {\n             PathSource::Type => match def {\n                 Def::Struct(..) | Def::Union(..) | Def::Enum(..) |\n                 Def::Trait(..) | Def::TyAlias(..) | Def::AssociatedTy(..) |\n-                Def::PrimTy(..) | Def::TyParam(..) | Def::SelfTy(..) => true,\n+                Def::PrimTy(..) | Def::TyParam(..) | Def::SelfTy(..) |\n+                Def::TyForeign(..) => true,\n                 _ => false,\n             },\n             PathSource::Trait => match def {\n@@ -707,6 +708,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                 HasTypeParameters(generics, ItemRibKind)\n             }\n             ForeignItemKind::Static(..) => NoTypeParameters,\n+            ForeignItemKind::Ty => NoTypeParameters,\n         };\n         self.with_type_parameter_rib(type_parameters, |this| {\n             visit::walk_foreign_item(this, foreign_item);"}, {"sha": "4eac4398c1827c15da5c684296acae6be7dd34da", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -263,6 +263,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             HirDef::Union(..) |\n             HirDef::Enum(..) |\n             HirDef::TyAlias(..) |\n+            HirDef::TyForeign(..) |\n             HirDef::Trait(_) => {\n                 let span = self.span_from_span(sub_span.expect(\"No span found for type ref\"));\n                 self.dumper.dump_ref(Ref {\n@@ -1539,6 +1540,12 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n \n                 self.visit_ty(ty);\n             }\n+            ast::ForeignItemKind::Ty => {\n+                if let Some(var_data) = self.save_ctxt.get_extern_item_data(item) {\n+                    down_cast_data!(var_data, DefData, item.span);\n+                    self.dumper.dump_def(item.vis == ast::Visibility::Public, var_data);\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "cf2cad1b38c42c9280c04a3da78526acb130f9ba", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -173,6 +173,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n+            // FIXME(plietar): needs a new DefKind in rls-data\n+            ast::ForeignItemKind::Ty => None,\n         }\n     }\n \n@@ -642,6 +644,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::Union(def_id) |\n             HirDef::Enum(def_id) |\n             HirDef::TyAlias(def_id) |\n+            HirDef::TyForeign(def_id) |\n             HirDef::AssociatedTy(def_id) |\n             HirDef::Trait(def_id) |\n             HirDef::TyParam(def_id) => {"}, {"sha": "b0844d1b82404f0f53c493dfc803797de1c68818", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -808,6 +808,23 @@ impl Sig for ast::ForeignItem {\n \n                 Ok(extend_sig(ty_sig, text, defs, vec![]))\n             }\n+            ast::ForeignItemKind::Ty => {\n+                let mut text = \"type \".to_owned();\n+                let name = self.ident.to_string();\n+                let defs = vec![SigElement {\n+                    id: id_from_node_id(self.id, scx),\n+                    start: offset + text.len(),\n+                    end: offset + text.len() + name.len(),\n+                }];\n+                text.push_str(&name);\n+                text.push(';');\n+\n+                Ok(Signature {\n+                    text: text,\n+                    defs: defs,\n+                    refs: vec![],\n+                })\n+            }\n         }\n     }\n }"}, {"sha": "9df057c77a95d36c2909921fcfbbb237ecb2ce30", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -32,6 +32,7 @@ use rustc::session::Session;\n use rustc::ty::layout::{LayoutCx, LayoutError, LayoutTyper, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n+use rustc_trans_utils;\n \n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n@@ -301,6 +302,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         common::type_is_freeze(self.tcx, ty)\n     }\n \n+    pub fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {\n+        rustc_trans_utils::common::type_has_metadata(self.tcx, ty)\n+    }\n+\n     pub fn tcx(&self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.tcx\n     }"}, {"sha": "4f07af9071da358ed9cb0a443451fe0fc22eaa4f", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -543,6 +543,11 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         trait_pointer_metadata(cx, t, None, unique_type_id),\n             false)\n         }\n+        ty::TyForeign(..) => {\n+            MetadataCreationResult::new(\n+                        foreign_type_metadata(cx, t, unique_type_id),\n+            false)\n+        }\n         ty::TyRawPtr(ty::TypeAndMut{ty, ..}) |\n         ty::TyRef(_, ty::TypeAndMut{ty, ..}) => {\n             match ptr_metadata(ty) {\n@@ -752,6 +757,17 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     return ty_metadata;\n }\n \n+fn foreign_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n+                                   t: Ty<'tcx>,\n+                                   unique_type_id: UniqueTypeId) -> DIType {\n+    debug!(\"foreign_type_metadata: {:?}\", t);\n+\n+    let llvm_type = type_of::type_of(cx, t);\n+\n+    let name = compute_debuginfo_type_name(cx, t, false);\n+    create_struct_stub(cx, llvm_type, &name, unique_type_id, NO_SCOPE_METADATA)\n+}\n+\n fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                    pointer_type: Ty<'tcx>,\n                                    pointee_type_metadata: DIType)"}, {"sha": "85467f5bfbd2296e25b6a310e651c8c6198ad014", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -48,6 +48,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyInt(int_ty) => output.push_str(int_ty.ty_to_string()),\n         ty::TyUint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n         ty::TyFloat(float_ty) => output.push_str(float_ty.ty_to_string()),\n+        ty::TyForeign(def_id) => push_item_name(cx, def_id, qualified, output),\n         ty::TyAdt(def, substs) => {\n             push_item_name(cx, def.did, qualified, output);\n             push_type_params(cx, substs, output);"}, {"sha": "e80239175681e8bd80d3bbfbc0cc23768a77429b", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -139,13 +139,15 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         }\n         \"size_of_val\" => {\n             let tp_ty = substs.type_at(0);\n-            if !bcx.ccx.shared().type_is_sized(tp_ty) {\n+            if bcx.ccx.shared().type_is_sized(tp_ty) {\n+                let lltp_ty = type_of::type_of(ccx, tp_ty);\n+                C_usize(ccx, machine::llsize_of_alloc(ccx, lltp_ty))\n+            } else if bcx.ccx.shared().type_has_metadata(tp_ty) {\n                 let (llsize, _) =\n                     glue::size_and_align_of_dst(bcx, tp_ty, llargs[1]);\n                 llsize\n             } else {\n-                let lltp_ty = type_of::type_of(ccx, tp_ty);\n-                C_usize(ccx, machine::llsize_of_alloc(ccx, lltp_ty))\n+                C_usize(ccx, 0u64)\n             }\n         }\n         \"min_align_of\" => {\n@@ -154,12 +156,14 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         }\n         \"min_align_of_val\" => {\n             let tp_ty = substs.type_at(0);\n-            if !bcx.ccx.shared().type_is_sized(tp_ty) {\n+            if bcx.ccx.shared().type_is_sized(tp_ty) {\n+                C_usize(ccx, ccx.align_of(tp_ty) as u64)\n+            } else if bcx.ccx.shared().type_has_metadata(tp_ty) {\n                 let (_, llalign) =\n                     glue::size_and_align_of_dst(bcx, tp_ty, llargs[1]);\n                 llalign\n             } else {\n-                C_usize(ccx, ccx.align_of(tp_ty) as u64)\n+                C_usize(ccx, 1u64)\n             }\n         }\n         \"pref_align_of\" => {"}, {"sha": "cea7b9585d8e3081d91e2b88e674c47072ac988c", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -428,11 +428,11 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     .projection_ty(tcx, &projection.elem);\n                 let base = tr_base.to_const(span);\n                 let projected_ty = self.monomorphize(&projected_ty).to_ty(tcx);\n-                let is_sized = self.ccx.shared().type_is_sized(projected_ty);\n+                let has_metadata = self.ccx.shared().type_has_metadata(projected_ty);\n \n                 let (projected, llextra) = match projection.elem {\n                     mir::ProjectionElem::Deref => {\n-                        let (base, extra) = if is_sized {\n+                        let (base, extra) = if !has_metadata {\n                             (base.llval, ptr::null_mut())\n                         } else {\n                             base.get_fat_ptr()\n@@ -463,7 +463,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     mir::ProjectionElem::Field(ref field, _) => {\n                         let llprojected = adt::const_get_field(self.ccx, tr_base.ty, base.llval,\n                                                                field.index());\n-                        let llextra = if is_sized {\n+                        let llextra = if !has_metadata {\n                             ptr::null_mut()\n                         } else {\n                             tr_base.llextra"}, {"sha": "d939acaccd99c4611329d5a63a7d7f1f15f5d6b3", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -147,15 +147,16 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n         //   * Packed struct - There is no alignment padding\n         //   * Field is sized - pointer is properly aligned already\n         if st.offsets[ix] == layout::Size::from_bytes(0) || st.packed ||\n-            bcx.ccx.shared().type_is_sized(fty) {\n-                return (bcx.struct_gep(\n-                        ptr_val, adt::struct_llfields_index(st, ix)), alignment);\n-            }\n+            bcx.ccx.shared().type_is_sized(fty)\n+        {\n+            return (bcx.struct_gep(\n+                    ptr_val, adt::struct_llfields_index(st, ix)), alignment);\n+        }\n \n-        // If the type of the last field is [T] or str, then we don't need to do\n+        // If the type of the last field is [T], str or a foreign type, then we don't need to do\n         // any adjusments\n         match fty.sty {\n-            ty::TySlice(..) | ty::TyStr => {\n+            ty::TySlice(..) | ty::TyStr | ty::TyForeign(..) => {\n                 return (bcx.struct_gep(\n                         ptr_val, adt::struct_llfields_index(st, ix)), alignment);\n             }\n@@ -328,7 +329,9 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 let ((llprojected, align), llextra) = match projection.elem {\n                     mir::ProjectionElem::Deref => bug!(),\n                     mir::ProjectionElem::Field(ref field, _) => {\n-                        let llextra = if self.ccx.shared().type_is_sized(projected_ty.to_ty(tcx)) {\n+                        let has_metadata = self.ccx.shared()\n+                            .type_has_metadata(projected_ty.to_ty(tcx));\n+                        let llextra = if !has_metadata {\n                             ptr::null_mut()\n                         } else {\n                             tr_base.llextra\n@@ -415,3 +418,4 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         self.monomorphize(&lvalue_ty.to_ty(tcx))\n     }\n }\n+"}, {"sha": "777b86387e8bfcd650a714efa11d9026466f2ee3", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -364,7 +364,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n                 // Note: lvalues are indirect, so storing the `llval` into the\n                 // destination effectively creates a reference.\n-                let operand = if bcx.ccx.shared().type_is_sized(ty) {\n+                let operand = if !bcx.ccx.shared().type_has_metadata(ty) {\n                     OperandRef {\n                         val: OperandValue::Immediate(tr_lvalue.llval),\n                         ty: ref_ty,"}, {"sha": "fb68be293a79e13083fec93a3b29460cddf98b60", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -230,4 +230,3 @@ fn predefine_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     ccx.instances().borrow_mut().insert(instance, lldecl);\n }\n-"}, {"sha": "cac09a81361f09651edc8c4ff7aa09b88ba37adb", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -22,7 +22,7 @@ use syntax::ast;\n pub fn fat_ptr_base_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type {\n     match ty.sty {\n         ty::TyRef(_, ty::TypeAndMut { ty: t, .. }) |\n-        ty::TyRawPtr(ty::TypeAndMut { ty: t, .. }) if !ccx.shared().type_is_sized(t) => {\n+        ty::TyRawPtr(ty::TypeAndMut { ty: t, .. }) if ccx.shared().type_has_metadata(t) => {\n             in_memory_type_of(ccx, t).ptr_to()\n         }\n         ty::TyAdt(def, _) if def.is_box() => {\n@@ -62,7 +62,7 @@ pub fn immediate_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n /// is too large for it to be placed in SSA value (by our rules).\n /// For the raw type without far pointer indirection, see `in_memory_type_of`.\n pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type {\n-    let ty = if !cx.shared().type_is_sized(ty) {\n+    let ty = if cx.shared().type_has_metadata(ty) {\n         cx.tcx().mk_imm_ptr(ty)\n     } else {\n         ty\n@@ -106,7 +106,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n     }\n \n     let ptr_ty = |ty: Ty<'tcx>| {\n-        if !cx.shared().type_is_sized(ty) {\n+        if cx.shared().type_has_metadata(ty) {\n             if let ty::TyStr = ty.sty {\n                 // This means we get a nicer name in the output (str is always\n                 // unsized).\n@@ -158,7 +158,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       // fat pointers is of the right type (e.g. for array accesses), even\n       // when taking the address of an unsized field in a struct.\n       ty::TySlice(ty) => in_memory_type_of(cx, ty),\n-      ty::TyStr | ty::TyDynamic(..) => Type::i8(cx),\n+      ty::TyStr | ty::TyDynamic(..) | ty::TyForeign(..) => Type::i8(cx),\n \n       ty::TyFnDef(..) => Type::nil(cx),\n       ty::TyFnPtr(sig) => {"}, {"sha": "cf9b80e5ed404a140b5397dc2714bacf0cb49ea2", "filename": "src/librustc_trans_utils/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans_utils%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans_utils%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcollector.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -203,7 +203,7 @@ use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::mir::{self, Location};\n use rustc::mir::visit::Visitor as MirVisitor;\n \n-use common::{def_ty, instance_ty, type_is_sized};\n+use common::{def_ty, instance_ty, type_has_metadata};\n use monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n \n@@ -782,7 +782,7 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             target_ty: Ty<'tcx>)\n                                             -> (Ty<'tcx>, Ty<'tcx>) {\n     let ptr_vtable = |inner_source: Ty<'tcx>, inner_target: Ty<'tcx>| {\n-        if !type_is_sized(tcx, inner_source) {\n+        if type_has_metadata(tcx, inner_source) {\n             (inner_source, inner_target)\n         } else {\n             tcx.struct_lockstep_tails(inner_source, inner_target)"}, {"sha": "ec9c5b1119b74824748ab64efba8553a92e4877e", "filename": "src/librustc_trans_utils/common.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans_utils%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans_utils%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcommon.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -25,6 +25,19 @@ pub fn type_is_sized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> boo\n     ty.is_sized(tcx, ty::ParamEnv::empty(traits::Reveal::All), DUMMY_SP)\n }\n \n+pub fn type_has_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    if type_is_sized(tcx, ty) {\n+        return false;\n+    }\n+\n+    let tail = tcx.struct_tail(ty);\n+    match tail.sty {\n+        ty::TyForeign(..) => false,\n+        ty::TyStr | ty::TySlice(..) | ty::TyDynamic(..) => true,\n+        _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n+    }\n+}\n+\n pub fn requests_inline<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     instance: &ty::Instance<'tcx>"}, {"sha": "6a341a1e7d378dd2ea81e963495d9942fa8e9d00", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -48,7 +48,7 @@ use rustc::util::nodemap::NodeSet;\n \n use syntax::attr;\n \n-mod common;\n+pub mod common;\n pub mod link;\n pub mod collector;\n pub mod trans_item;"}, {"sha": "817ceefeb7fe917782b29b27c8f4ee619d628577", "filename": "src/librustc_trans_utils/trans_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans_utils%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_trans_utils%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_item.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -335,6 +335,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                         output);\n                 }\n             },\n+            ty::TyForeign(did) => self.push_def_path(did, output),\n             ty::TyFnDef(..) |\n             ty::TyFnPtr(_) => {\n                 let sig = t.fn_sig(self.tcx);"}, {"sha": "c7f7e62fd61ef0f627eb6bd49b30c3c6dd9bd583", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -928,7 +928,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let span = path.span;\n         match path.def {\n-            Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) | Def::Union(did) => {\n+            Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) |\n+            Def::Union(did) | Def::TyForeign(did) => {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_type_params(path.segments.split_last().unwrap().1);\n                 self.ast_path_to_ty(span, did, path.segments.last().unwrap())"}, {"sha": "7b35b466830999788218217c0a8b235609ecb9d8", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -13,7 +13,7 @@\n //! A cast `e as U` is valid if one of the following holds:\n //! * `e` has type `T` and `T` coerces to `U`; *coercion-cast*\n //! * `e` has type `*T`, `U` is `*U_0`, and either `U_0: Sized` or\n-//!    unsize_kind(`T`) = unsize_kind(`U_0`); *ptr-ptr-cast*\n+//!    pointer_kind(`T`) = pointer_kind(`U_0`); *ptr-ptr-cast*\n //! * `e` has type `*T` and `U` is a numeric type, while `T: Sized`; *ptr-addr-cast*\n //! * `e` is an integer and `U` is `*U_0`, while `U_0: Sized`; *addr-ptr-cast*\n //! * `e` has type `T` and `T` and `U` are any numeric types; *numeric-cast*\n@@ -26,7 +26,7 @@\n //! * `e` is a function pointer type and `U` is an integer; *fptr-addr-cast*\n //!\n //! where `&.T` and `*T` are references of either mutability,\n-//! and where unsize_kind(`T`) is the kind of the unsize info\n+//! and where pointer_kind(`T`) is the kind of the unsize info\n //! in `T` - the vtable for a trait definition (e.g. `fmt::Display` or\n //! `Iterator`, not `Iterator<Item=u8>`) or a length (or `()` if `T: Sized`).\n //!\n@@ -64,11 +64,16 @@ pub struct CastCheck<'tcx> {\n     span: Span,\n }\n \n-/// The kind of the unsize info (length or vtable) - we only allow casts between\n-/// fat pointers if their unsize-infos have the same kind.\n+/// The kind of pointer and associated metadata (thin, length or vtable) - we\n+/// only allow casts between fat pointers if their metadata have the same\n+/// kind.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-enum UnsizeKind<'tcx> {\n+enum PointerKind<'tcx> {\n+    /// No metadata attached, ie pointer to sized type or foreign type\n+    Thin,\n+    /// A trait object\n     Vtable(Option<DefId>),\n+    /// Slice\n     Length,\n     /// The unsize info of this projection\n     OfProjection(&'tcx ty::ProjectionTy<'tcx>),\n@@ -79,22 +84,28 @@ enum UnsizeKind<'tcx> {\n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Returns the kind of unsize information of t, or None\n     /// if t is sized or it is unknown.\n-    fn unsize_kind(&self, t: Ty<'tcx>) -> Option<UnsizeKind<'tcx>> {\n+    fn pointer_kind(&self, t: Ty<'tcx>, span: Span) -> PointerKind<'tcx> {\n+        if self.type_is_known_to_be_sized(t, span) {\n+            return PointerKind::Thin;\n+        }\n+\n         match t.sty {\n-            ty::TySlice(_) | ty::TyStr => Some(UnsizeKind::Length),\n+            ty::TySlice(_) | ty::TyStr => PointerKind::Length,\n             ty::TyDynamic(ref tty, ..) =>\n-                Some(UnsizeKind::Vtable(tty.principal().map(|p| p.def_id()))),\n+                PointerKind::Vtable(tty.principal().map(|p| p.def_id())),\n             ty::TyAdt(def, substs) if def.is_struct() => {\n                 // FIXME(arielb1): do some kind of normalization\n                 match def.struct_variant().fields.last() {\n-                    None => None,\n-                    Some(f) => self.unsize_kind(f.ty(self.tcx, substs)),\n+                    None => PointerKind::Thin,\n+                    Some(f) => self.pointer_kind(f.ty(self.tcx, substs), span),\n                 }\n             }\n+            // Pointers to foreign types are thin, despite being unsized\n+            ty::TyForeign(..) => PointerKind::Thin,\n             // We should really try to normalize here.\n-            ty::TyProjection(ref pi) => Some(UnsizeKind::OfProjection(pi)),\n-            ty::TyParam(ref p) => Some(UnsizeKind::OfParam(p)),\n-            _ => None,\n+            ty::TyProjection(ref pi) => PointerKind::OfProjection(pi),\n+            ty::TyParam(ref p) => PointerKind::OfParam(p),\n+            _ => panic!(),\n         }\n     }\n }\n@@ -446,30 +457,33 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n         debug!(\"check_ptr_ptr_cast m_expr={:?} m_cast={:?}\", m_expr, m_cast);\n         // ptr-ptr cast. vtables must match.\n \n-        // Cast to sized is OK\n-        if fcx.type_is_known_to_be_sized(m_cast.ty, self.span) {\n+        // Cast to thin pointer is OK\n+        let cast_kind = fcx.pointer_kind(m_cast.ty, self.span);\n+        if cast_kind == PointerKind::Thin {\n             return Ok(CastKind::PtrPtrCast);\n         }\n \n-        // sized -> unsized? report invalid cast (don't complain about vtable kinds)\n-        if fcx.type_is_known_to_be_sized(m_expr.ty, self.span) {\n+        // thin -> fat? report invalid cast (don't complain about vtable kinds)\n+        let expr_kind = fcx.pointer_kind(m_expr.ty, self.span);\n+        if expr_kind == PointerKind::Thin {\n             return Err(CastError::SizedUnsizedCast);\n         }\n \n         // vtable kinds must match\n-        match (fcx.unsize_kind(m_cast.ty), fcx.unsize_kind(m_expr.ty)) {\n-            (Some(a), Some(b)) if a == b => Ok(CastKind::PtrPtrCast),\n-            _ => Err(CastError::DifferingKinds),\n+        if cast_kind == expr_kind {\n+            Ok(CastKind::PtrPtrCast)\n+        } else {\n+            Err(CastError::DifferingKinds)\n         }\n     }\n \n     fn check_fptr_ptr_cast(&self,\n                            fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                            m_cast: &'tcx ty::TypeAndMut<'tcx>)\n                            -> Result<CastKind, CastError> {\n-        // fptr-ptr cast. must be to sized ptr\n+        // fptr-ptr cast. must be to thin ptr\n \n-        if fcx.type_is_known_to_be_sized(m_cast.ty, self.span) {\n+        if fcx.pointer_kind(m_cast.ty, self.span) == PointerKind::Thin {\n             Ok(CastKind::FnPtrPtrCast)\n         } else {\n             Err(CastError::IllegalCast)\n@@ -480,9 +494,9 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                            fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                            m_expr: &'tcx ty::TypeAndMut<'tcx>)\n                            -> Result<CastKind, CastError> {\n-        // ptr-addr cast. must be from sized ptr\n+        // ptr-addr cast. must be from thin ptr\n \n-        if fcx.type_is_known_to_be_sized(m_expr.ty, self.span) {\n+        if fcx.pointer_kind(m_expr.ty, self.span) == PointerKind::Thin {\n             Ok(CastKind::PtrAddrCast)\n         } else {\n             Err(CastError::NeedViaThinPtr)\n@@ -519,7 +533,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                            m_cast: &'tcx ty::TypeAndMut<'tcx>)\n                            -> Result<CastKind, CastError> {\n         // ptr-addr cast. pointer must be thin.\n-        if fcx.type_is_known_to_be_sized(m_cast.ty, self.span) {\n+        if fcx.pointer_kind(m_cast.ty, self.span) == PointerKind::Thin {\n             Ok(CastKind::AddrPtrCast)\n         } else {\n             Err(CastError::IllegalCast)"}, {"sha": "a24f420af80dcdfff8caefb0fd8821567b4f9639", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -414,6 +414,9 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             ty::TyAdt(def, _) => {\n                 self.assemble_inherent_impl_candidates_for_type(def.did);\n             }\n+            ty::TyForeign(did) => {\n+                self.assemble_inherent_impl_candidates_for_type(did);\n+            }\n             ty::TyParam(p) => {\n                 self.assemble_inherent_candidates_from_param(self_ty, p);\n             }"}, {"sha": "8613ec86b4a73febcfc23d5d1b5360c52bc093a4", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -451,6 +451,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         fn is_local(ty: Ty) -> bool {\n             match ty.sty {\n                 ty::TyAdt(def, _) => def.did.is_local(),\n+                ty::TyForeign(did) => did.is_local(),\n \n                 ty::TyDynamic(ref tr, ..) => tr.principal()\n                     .map_or(false, |p| p.def_id().is_local()),"}, {"sha": "c56a3b91ca37f7d720d9b37562ec20b1e748c09d", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -117,6 +117,9 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n             ty::TyAdt(def, _) => {\n                 self.check_def_id(item, def.did);\n             }\n+            ty::TyForeign(did) => {\n+                self.check_def_id(item, did);\n+            }\n             ty::TyDynamic(ref data, ..) if data.principal().is_some() => {\n                 self.check_def_id(item, data.principal().unwrap().def_id());\n             }"}, {"sha": "a5edc95b79b08621aad106eedf732f1db9c98de3", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -68,10 +68,10 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                 }\n \n                 // In addition to the above rules, we restrict impls of defaulted traits\n-                // so that they can only be implemented on structs/enums. To see why this\n-                // restriction exists, consider the following example (#22978). Imagine\n-                // that crate A defines a defaulted trait `Foo` and a fn that operates\n-                // on pairs of types:\n+                // so that they can only be implemented on nominal types, such as structs,\n+                // enums or foreign types. To see why this restriction exists, consider the\n+                // following example (#22978). Imagine that crate A defines a defaulted trait\n+                // `Foo` and a fn that operates on pairs of types:\n                 //\n                 // ```\n                 // // Crate A\n@@ -109,11 +109,12 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     let self_ty = trait_ref.self_ty();\n                     let opt_self_def_id = match self_ty.sty {\n                         ty::TyAdt(self_def, _) => Some(self_def.did),\n+                        ty::TyForeign(did) => Some(did),\n                         _ => None,\n                     };\n \n                     let msg = match opt_self_def_id {\n-                        // We only want to permit structs/enums, but not *all* structs/enums.\n+                        // We only want to permit nominal types, but not *all* nominal types.\n                         // They must be local to the current crate, so that people\n                         // can't do `unsafe impl Send for Rc<SomethingLocal>` or\n                         // `impl !Send for Box<SomethingLocalAndSend>`."}, {"sha": "75e864d07a6c276bb35608f6ec5d5321ab789653", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -916,7 +916,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         NodeForeignItem(item) => {\n             match item.node {\n                 ForeignItemStatic(..) => &no_generics,\n-                ForeignItemFn(_, _, ref generics) => generics\n+                ForeignItemFn(_, _, ref generics) => generics,\n+                ForeignItemType => &no_generics,\n             }\n         }\n \n@@ -1094,7 +1095,8 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     let substs = Substs::identity_for_item(tcx, def_id);\n                     tcx.mk_fn_def(def_id, substs)\n                 }\n-                ForeignItemStatic(ref t, _) => icx.to_ty(t)\n+                ForeignItemStatic(ref t, _) => icx.to_ty(t),\n+                ForeignItemType => tcx.mk_foreign(def_id),\n             }\n         }\n \n@@ -1363,7 +1365,8 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         NodeForeignItem(item) => {\n             match item.node {\n                 ForeignItemStatic(..) => &no_generics,\n-                ForeignItemFn(_, _, ref generics) => generics\n+                ForeignItemFn(_, _, ref generics) => generics,\n+                ForeignItemType => &no_generics,\n             }\n         }\n "}, {"sha": "ef6552c8e33f4517ef5a3422b6e0d7168d3ff85c", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -305,7 +305,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n         match ty.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-            ty::TyStr | ty::TyNever => {\n+            ty::TyStr | ty::TyNever | ty::TyForeign(..) => {\n                 // leaf type -- noop\n             }\n "}, {"sha": "f8fea643d5e145316f4358369ad4cbe4efd71f2f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -419,6 +419,8 @@ pub enum ItemEnum {\n     ForeignFunctionItem(Function),\n     /// `static`s from an extern block\n     ForeignStaticItem(Static),\n+    /// `type`s from an extern block\n+    ForeignTypeItem,\n     MacroItem(Macro),\n     PrimitiveItem(PrimitiveType),\n     AssociatedConstItem(Type, Option<String>),\n@@ -1646,6 +1648,7 @@ pub enum TypeKind {\n     Trait,\n     Variant,\n     Typedef,\n+    Foreign,\n }\n \n pub trait GetDefId {\n@@ -2027,6 +2030,17 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     is_generic: false,\n                 }\n             }\n+            ty::TyForeign(did) => {\n+                inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n+                let path = external_path(cx, &cx.tcx.item_name(did),\n+                                         None, false, vec![], Substs::empty());\n+                ResolvedPath {\n+                    path: path,\n+                    typarams: None,\n+                    did: did,\n+                    is_generic: false,\n+                }\n+            }\n             ty::TyDynamic(ref obj, ref reg) => {\n                 if let Some(principal) = obj.principal() {\n                     let did = principal.def_id();\n@@ -2840,6 +2854,9 @@ impl Clean<Item> for hir::ForeignItem {\n                     expr: \"\".to_string(),\n                 })\n             }\n+            hir::ForeignItemType => {\n+                ForeignTypeItem\n+            }\n         };\n         Item {\n             name: Some(self.name.clean(cx)),"}, {"sha": "c9c5f01f0aea14fff6e697acc30dac3c6db48977", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -41,6 +41,7 @@ pub enum ItemType {\n     Constant        = 17,\n     AssociatedConst = 18,\n     Union           = 19,\n+    ForeignType     = 20,\n }\n \n \n@@ -82,6 +83,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::AssociatedConstItem(..) => ItemType::AssociatedConst,\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n             clean::DefaultImplItem(..)     => ItemType::Impl,\n+            clean::ForeignTypeItem         => ItemType::ForeignType,\n             clean::StrippedItem(..)        => unreachable!(),\n         }\n     }\n@@ -100,6 +102,7 @@ impl From<clean::TypeKind> for ItemType {\n             clean::TypeKind::Const    => ItemType::Constant,\n             clean::TypeKind::Variant  => ItemType::Variant,\n             clean::TypeKind::Typedef  => ItemType::Typedef,\n+            clean::TypeKind::Foreign  => ItemType::ForeignType,\n         }\n     }\n }\n@@ -127,6 +130,7 @@ impl ItemType {\n             ItemType::AssociatedType  => \"associatedtype\",\n             ItemType::Constant        => \"constant\",\n             ItemType::AssociatedConst => \"associatedconstant\",\n+            ItemType::ForeignType     => \"foreigntype\",\n         }\n     }\n \n@@ -139,7 +143,8 @@ impl ItemType {\n             ItemType::Typedef |\n             ItemType::Trait |\n             ItemType::Primitive |\n-            ItemType::AssociatedType => NameSpace::Type,\n+            ItemType::AssociatedType |\n+            ItemType::ForeignType => NameSpace::Type,\n \n             ItemType::ExternCrate |\n             ItemType::Import |"}, {"sha": "ac2cb1665a77a0e2c7315a23ee10768de88c3d16", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -2044,6 +2044,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 ItemType::Primitive       => (\"primitives\", \"Primitive Types\"),\n                 ItemType::AssociatedType  => (\"associated-types\", \"Associated Types\"),\n                 ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n+                ItemType::ForeignType     => (\"foreign-types\", \"Foreign Types\"),\n             };\n             write!(w, \"<h2 id='{id}' class='section-header'>\\\n                        <a href=\\\"#{id}\\\">{name}</a></h2>\\n<table>\",\n@@ -3679,7 +3680,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n                    ItemType::Enum, ItemType::Constant, ItemType::Static, ItemType::Trait,\n                    ItemType::Function, ItemType::Typedef, ItemType::Union, ItemType::Impl,\n                    ItemType::TyMethod, ItemType::Method, ItemType::StructField, ItemType::Variant,\n-                   ItemType::AssociatedType, ItemType::AssociatedConst] {\n+                   ItemType::AssociatedType, ItemType::AssociatedConst, ItemType::ForeignType] {\n         if items.iter().any(|it| {\n             if let clean::DefaultImplItem(..) = it.inner {\n                 false\n@@ -3708,6 +3709,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n                 ItemType::Primitive       => (\"primitives\", \"Primitive Types\"),\n                 ItemType::AssociatedType  => (\"associated-types\", \"Associated Types\"),\n                 ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n+                ItemType::ForeignType     => (\"foreign-types\", \"Foreign Types\"),\n             };\n             sidebar.push_str(&format!(\"<li><a href=\\\"#{id}\\\">{name}</a></li>\",\n                                       id = short,"}, {"sha": "959543404d8d239242c656ee844668e447abf459", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -90,7 +90,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             clean::VariantItem(..) | clean::MethodItem(..) |\n             clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) |\n             clean::ConstantItem(..) | clean::UnionItem(..) |\n-            clean::AssociatedConstItem(..) => {\n+            clean::AssociatedConstItem(..) | clean::ForeignTypeItem => {\n                 if i.def_id.is_local() {\n                     if !self.access_levels.is_exported(i.def_id) {\n                         return None;"}, {"sha": "d3995d957928e1e558a079dd02c65f3f02935279", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -2007,13 +2007,16 @@ pub enum ForeignItemKind {\n     /// A foreign static item (`static ext: u8`), with optional mutability\n     /// (the boolean is true when mutable)\n     Static(P<Ty>, bool),\n+    /// A foreign type\n+    Ty,\n }\n \n impl ForeignItemKind {\n     pub fn descriptive_variant(&self) -> &str {\n         match *self {\n             ForeignItemKind::Fn(..) => \"foreign function\",\n-            ForeignItemKind::Static(..) => \"foreign static item\"\n+            ForeignItemKind::Static(..) => \"foreign static item\",\n+            ForeignItemKind::Ty => \"foreign type\",\n         }\n     }\n }"}, {"sha": "30451ec757a9f5c0f17109795110e9fb50de53f4", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -404,6 +404,9 @@ declare_features! (\n \n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n     (active, crate_visibility_modifier, \"1.23.0\", Some(45388)),\n+\n+    // extern types\n+    (active, extern_types, \"1.23.0\", Some(43467)),\n );\n \n declare_features! (\n@@ -1398,13 +1401,23 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &'a ast::ForeignItem) {\n-        let links_to_llvm = match attr::first_attr_value_str_by_name(&i.attrs, \"link_name\") {\n-            Some(val) => val.as_str().starts_with(\"llvm.\"),\n-            _ => false\n-        };\n-        if links_to_llvm {\n-            gate_feature_post!(&self, link_llvm_intrinsics, i.span,\n-                              \"linking to LLVM intrinsics is experimental\");\n+        match i.node {\n+            ast::ForeignItemKind::Fn(..) |\n+            ast::ForeignItemKind::Static(..) => {\n+                let link_name = attr::first_attr_value_str_by_name(&i.attrs, \"link_name\");\n+                let links_to_llvm = match link_name {\n+                    Some(val) => val.as_str().starts_with(\"llvm.\"),\n+                    _ => false\n+                };\n+                if links_to_llvm {\n+                    gate_feature_post!(&self, link_llvm_intrinsics, i.span,\n+                                       \"linking to LLVM intrinsics is experimental\");\n+                }\n+            }\n+            ast::ForeignItemKind::Ty => {\n+                    gate_feature_post!(&self, extern_types, i.span,\n+                                       \"extern types are experimental\");\n+            }\n         }\n \n         visit::walk_foreign_item(self, i)"}, {"sha": "fea49424dc8d2261c6dbba20f44bb4f78bcf6846", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1069,6 +1069,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> For\n             ForeignItemKind::Static(t, m) => {\n                 ForeignItemKind::Static(folder.fold_ty(t), m)\n             }\n+            ForeignItemKind::Ty => ForeignItemKind::Ty,\n         },\n         span: folder.new_span(ni.span)\n     }"}, {"sha": "a3a265450ab0e9c1949f253c3bcd055618311e23", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -5687,6 +5687,24 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// Parse a type from a foreign module\n+    fn parse_item_foreign_type(&mut self, vis: ast::Visibility, lo: Span, attrs: Vec<Attribute>)\n+                             -> PResult<'a, ForeignItem> {\n+        self.expect_keyword(keywords::Type)?;\n+\n+        let ident = self.parse_ident()?;\n+        let hi = self.span;\n+        self.expect(&token::Semi)?;\n+        Ok(ast::ForeignItem {\n+            ident: ident,\n+            attrs: attrs,\n+            node: ForeignItemKind::Ty,\n+            id: ast::DUMMY_NODE_ID,\n+            span: lo.to(hi),\n+            vis: vis\n+        })\n+    }\n+\n     /// Parse extern crate links\n     ///\n     /// # Examples\n@@ -6161,6 +6179,10 @@ impl<'a> Parser<'a> {\n         if self.check_keyword(keywords::Fn) {\n             return Ok(Some(self.parse_item_foreign_fn(visibility, lo, attrs)?));\n         }\n+        // FOREIGN TYPE ITEM\n+        if self.check_keyword(keywords::Type) {\n+            return Ok(Some(self.parse_item_foreign_type(visibility, lo, attrs)?));\n+        }\n \n         // FIXME #5668: this will occur for a macro invocation:\n         match self.parse_macro_use_or_failure(attrs, true, false, lo, visibility)? {"}, {"sha": "8a970fd409895af864a30681ba79f9be2e021230", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -1112,6 +1112,13 @@ impl<'a> State<'a> {\n                 self.end()?; // end the head-ibox\n                 self.end() // end the outer cbox\n             }\n+            ast::ForeignItemKind::Ty => {\n+                self.head(&visibility_qualified(&item.vis, \"type\"))?;\n+                self.print_ident(item.ident)?;\n+                self.s.word(\";\")?;\n+                self.end()?; // end the head-ibox\n+                self.end() // end the outer cbox\n+            }\n         }\n     }\n "}, {"sha": "96e47a6cc0ff64e0b0e5210c204c03b1e0ea7c6d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -477,6 +477,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, foreign_item: &'a\n             visitor.visit_generics(generics)\n         }\n         ForeignItemKind::Static(ref typ, _) => visitor.visit_ty(typ),\n+        ForeignItemKind::Ty => (),\n     }\n \n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);"}, {"sha": "8b434bbfc6d332dfeb7798d6dd882b5d54485d3e", "filename": "src/test/compile-fail/extern-types-distinct-types.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Fcompile-fail%2Fextern-types-distinct-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Fcompile-fail%2Fextern-types-distinct-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-types-distinct-types.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_types)]\n+\n+extern {\n+    type A;\n+    type B;\n+}\n+\n+fn foo(r: &A) -> &B {\n+    r //~ ERROR mismatched types\n+}\n+\n+fn main() { }"}, {"sha": "2f00cf812e47352a29689348cdab9548db4b1360", "filename": "src/test/compile-fail/extern-types-not-sync-send.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure extern types are !Sync and !Send.\n+\n+#![feature(extern_types)]\n+\n+extern {\n+    type A;\n+}\n+\n+fn assert_sync<T: ?Sized + Sync>() { }\n+fn assert_send<T: ?Sized + Send>() { }\n+\n+fn main() {\n+    assert_sync::<A>();\n+    //~^ ERROR the trait bound `A: std::marker::Sync` is not satisfied\n+\n+    assert_send::<A>();\n+    //~^ ERROR the trait bound `A: std::marker::Send` is not satisfied\n+}"}, {"sha": "faa27894806f8d81c7f049d90086403069e6dd97", "filename": "src/test/compile-fail/extern-types-unsized.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure extern types are !Sized.\n+\n+#![feature(extern_types)]\n+\n+extern {\n+    type A;\n+}\n+\n+struct Foo {\n+    x: u8,\n+    tail: A,\n+}\n+\n+struct Bar<T: ?Sized> {\n+    x: u8,\n+    tail: T,\n+}\n+\n+fn assert_sized<T>() { }\n+\n+fn main() {\n+    assert_sized::<A>();\n+    //~^ ERROR the trait bound `A: std::marker::Sized` is not satisfied\n+\n+    assert_sized::<Foo>();\n+    //~^ ERROR the trait bound `A: std::marker::Sized` is not satisfied\n+\n+    assert_sized::<Bar<A>>();\n+    //~^ ERROR the trait bound `A: std::marker::Sized` is not satisfied\n+\n+    assert_sized::<Bar<Bar<A>>>();\n+    //~^ ERROR the trait bound `A: std::marker::Sized` is not satisfied\n+}"}, {"sha": "1203b598df3c2e7800525ecf9dda1720ac6f215e", "filename": "src/test/compile-fail/feature-gate-extern_types.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Fcompile-fail%2Ffeature-gate-extern_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Fcompile-fail%2Ffeature-gate-extern_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-extern_types.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    type T; //~ ERROR extern types are experimental\n+}\n+\n+fn main() {}"}, {"sha": "8977e14c3ad1a8457a4741942056594612821f36", "filename": "src/test/run-make/extern-fn-with-extern-types/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2FMakefile?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all: $(call NATIVE_STATICLIB,ctest)\n+\t$(RUSTC) test.rs\n+\t$(call RUN,test) || exit 1"}, {"sha": "c3d6166fb1284d740c0a1801de35964cf7e57f8e", "filename": "src/test/run-make/extern-fn-with-extern-types/ctest.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2Fctest.c", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2Fctest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2Fctest.c?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,17 @@\n+// ignore-license\n+#include <stdio.h>\n+#include <stdint.h>\n+\n+typedef struct data {\n+    uint32_t magic;\n+} data;\n+\n+data* data_create(uint32_t magic) {\n+    static data d;\n+    d.magic = magic;\n+    return &d;\n+}\n+\n+uint32_t data_get(data* p) {\n+    return p->magic;\n+}"}, {"sha": "9d6c87885b16ecd291f0b71c391a8e5857fdfb68", "filename": "src/test/run-make/extern-fn-with-extern-types/test.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-extern-types%2Ftest.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_types)]\n+\n+#[link(name = \"ctest\", kind = \"static\")]\n+extern {\n+    type data;\n+\n+    fn data_create(magic: u32) -> *mut data;\n+    fn data_get(data: *mut data) -> u32;\n+}\n+\n+const MAGIC: u32 = 0xdeadbeef;\n+fn main() {\n+    unsafe {\n+        let data = data_create(MAGIC);\n+        assert_eq!(data_get(data), MAGIC);\n+    }\n+}"}, {"sha": "4e44af3690064b1734abc65b31e49430e0be5486", "filename": "src/test/run-pass/extern-types-inherent-impl.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-inherent-impl.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that inherent impls can be defined for extern types.\n+\n+#![feature(extern_types)]\n+\n+extern {\n+    type A;\n+}\n+\n+impl A {\n+    fn foo(&self) { }\n+}\n+\n+fn use_foo(x: &A) {\n+    x.foo();\n+}\n+\n+fn main() { }"}, {"sha": "c6530c3ea773af871afa70d1dd4cc642421907eb", "filename": "src/test/run-pass/extern-types-manual-sync-send.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-manual-sync-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-manual-sync-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-manual-sync-send.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that unsafe impl for Sync/Send can be provided for extern types.\n+\n+#![feature(extern_types)]\n+\n+extern {\n+    type A;\n+}\n+\n+unsafe impl Sync for A { }\n+unsafe impl Send for A { }\n+\n+fn assert_sync<T: ?Sized + Sync>() { }\n+fn assert_send<T: ?Sized + Send>() { }\n+\n+fn main() {\n+    assert_sync::<A>();\n+    assert_send::<A>();\n+}"}, {"sha": "628a570665a332df1ad9cdef6af9c787cac0627c", "filename": "src/test/run-pass/extern-types-pointer-cast.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that pointers to extern types can be casted from/to usize,\n+// despite being !Sized.\n+\n+#![feature(extern_types)]\n+\n+extern {\n+    type A;\n+}\n+\n+struct Foo {\n+    x: u8,\n+    tail: A,\n+}\n+\n+struct Bar<T: ?Sized> {\n+    x: u8,\n+    tail: T,\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+const MAGIC: usize = 0xdeadbeef;\n+#[cfg(target_pointer_width = \"64\")]\n+const MAGIC: usize = 0x12345678deadbeef;\n+\n+fn main() {\n+    assert_eq!((MAGIC as *const A) as usize, MAGIC);\n+    assert_eq!((MAGIC as *const Foo) as usize, MAGIC);\n+    assert_eq!((MAGIC as *const Bar<A>) as usize, MAGIC);\n+    assert_eq!((MAGIC as *const Bar<Bar<A>>) as usize, MAGIC);\n+}"}, {"sha": "0aabce99debe8a5901b004586ac299fd5bd67ca2", "filename": "src/test/run-pass/extern-types-size_of_val.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-size_of_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-size_of_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-size_of_val.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_types)]\n+\n+use std::mem::{size_of_val, align_of_val};\n+\n+extern {\n+    type A;\n+}\n+\n+fn main() {\n+    let x: &A = unsafe {\n+        &*(1usize as *const A)\n+    };\n+\n+    assert_eq!(size_of_val(x), 0);\n+    assert_eq!(align_of_val(x), 1);\n+}"}, {"sha": "c2444a58b5a1b1207138590a4df20b19e137206a", "filename": "src/test/run-pass/extern-types-thin-pointer.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-thin-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-thin-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-thin-pointer.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that pointers and references to extern types are thin, ie they have the same size and\n+// alignment as a pointer to ().\n+\n+#![feature(extern_types)]\n+\n+use std::mem::{align_of, size_of};\n+\n+extern {\n+    type A;\n+}\n+\n+struct Foo {\n+    x: u8,\n+    tail: A,\n+}\n+\n+struct Bar<T: ?Sized> {\n+    x: u8,\n+    tail: T,\n+}\n+\n+fn assert_thin<T: ?Sized>() {\n+    assert_eq!(size_of::<*const T>(), size_of::<*const ()>());\n+    assert_eq!(align_of::<*const T>(), align_of::<*const ()>());\n+\n+    assert_eq!(size_of::<*mut T>(), size_of::<*mut ()>());\n+    assert_eq!(align_of::<*mut T>(), align_of::<*mut ()>());\n+\n+    assert_eq!(size_of::<&T>(), size_of::<&()>());\n+    assert_eq!(align_of::<&T>(), align_of::<&()>());\n+\n+    assert_eq!(size_of::<&mut T>(), size_of::<&mut ()>());\n+    assert_eq!(align_of::<&mut T>(), align_of::<&mut ()>());\n+}\n+\n+fn main() {\n+    assert_thin::<A>();\n+    assert_thin::<Foo>();\n+    assert_thin::<Bar<A>>();\n+    assert_thin::<Bar<Bar<A>>>();\n+}"}, {"sha": "0f61c936deb617c3ca1bef3148b46ff7012f4e4e", "filename": "src/test/run-pass/extern-types-trait-impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce604a8fe85c22beb53d99c609d88e3a0ca9320/src%2Ftest%2Frun-pass%2Fextern-types-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-trait-impl.rs?ref=dce604a8fe85c22beb53d99c609d88e3a0ca9320", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that traits can be implemented for extern types.\n+\n+#![feature(extern_types)]\n+\n+extern {\n+    type A;\n+}\n+\n+trait Foo {\n+    fn foo(&self) { }\n+}\n+\n+impl Foo for A {\n+    fn foo(&self) { }\n+}\n+\n+fn assert_foo<T: ?Sized + Foo>() { }\n+\n+fn use_foo<T: ?Sized + Foo>(x: &Foo) {\n+    x.foo();\n+}\n+\n+fn main() {\n+    assert_foo::<A>();\n+}"}]}