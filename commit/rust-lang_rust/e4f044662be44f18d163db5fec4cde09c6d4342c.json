{"sha": "e4f044662be44f18d163db5fec4cde09c6d4342c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZjA0NDY2MmJlNDRmMThkMTYzZGI1ZmVjNGNkZTA5YzZkNDM0MmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-25T04:25:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-25T04:25:33Z"}, "message": "Auto merge of #27233 - tbu-:pr_wtf8, r=alexcrichton", "tree": {"sha": "95c1f0a406e56a7e57bd0dad244bc6cbaf3ad6bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c1f0a406e56a7e57bd0dad244bc6cbaf3ad6bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f044662be44f18d163db5fec4cde09c6d4342c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f044662be44f18d163db5fec4cde09c6d4342c", "html_url": "https://github.com/rust-lang/rust/commit/e4f044662be44f18d163db5fec4cde09c6d4342c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f044662be44f18d163db5fec4cde09c6d4342c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38e8a05b533956a3c8d976c9bb137c50f017113", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38e8a05b533956a3c8d976c9bb137c50f017113", "html_url": "https://github.com/rust-lang/rust/commit/d38e8a05b533956a3c8d976c9bb137c50f017113"}, {"sha": "c2fca7c95742cdd25198eae42d233d49db7026ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2fca7c95742cdd25198eae42d233d49db7026ea", "html_url": "https://github.com/rust-lang/rust/commit/c2fca7c95742cdd25198eae42d233d49db7026ea"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "c6d0e97a0cd0053903e5ed6e6ec18be31ce23488", "filename": "src/libcore/char.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e4f044662be44f18d163db5fec4cde09c6d4342c/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f044662be44f18d163db5fec4cde09c6d4342c/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=e4f044662be44f18d163db5fec4cde09c6d4342c", "patch": "@@ -84,10 +84,18 @@ pub fn from_u32(i: u32) -> Option<char> {\n     if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n         None\n     } else {\n-        Some(unsafe { transmute(i) })\n+        Some(unsafe { from_u32_unchecked(i) })\n     }\n }\n \n+/// Converts a `u32` to an `char`, not checking whether it is a valid unicode\n+/// codepoint.\n+#[inline]\n+#[unstable(feature = \"char_from_unchecked\", reason = \"recently added API\")]\n+pub unsafe fn from_u32_unchecked(i: u32) -> char {\n+    transmute(i)\n+}\n+\n /// Converts a number to the character representing it.\n ///\n /// # Return value\n@@ -115,12 +123,11 @@ pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n         panic!(\"from_digit: radix is too high (maximum 36)\");\n     }\n     if num < radix {\n-        unsafe {\n-            if num < 10 {\n-                Some(transmute('0' as u32 + num))\n-            } else {\n-                Some(transmute('a' as u32 + num - 10))\n-            }\n+        let num = num as u8;\n+        if num < 10 {\n+            Some((b'0' + num) as char)\n+        } else {\n+            Some((b'a' + num - 10) as char)\n         }\n     } else {\n         None\n@@ -318,16 +325,13 @@ impl Iterator for EscapeUnicode {\n                 Some('{')\n             }\n             EscapeUnicodeState::Value(offset) => {\n-                let v = match ((self.c as i32) >> (offset * 4)) & 0xf {\n-                    i @ 0 ... 9 => '0' as i32 + i,\n-                    i => 'a' as i32 + (i - 10)\n-                };\n+                let c = from_digit(((self.c as u32) >> (offset * 4)) & 0xf, 16).unwrap();\n                 if offset == 0 {\n                     self.state = EscapeUnicodeState::RightBrace;\n                 } else {\n                     self.state = EscapeUnicodeState::Value(offset - 1);\n                 }\n-                Some(unsafe { transmute(v) })\n+                Some(c)\n             }\n             EscapeUnicodeState::RightBrace => {\n                 self.state = EscapeUnicodeState::Done;"}, {"sha": "34b0ae18d4fe8624fe6b9fbc1e78176817e16075", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f044662be44f18d163db5fec4cde09c6d4342c/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f044662be44f18d163db5fec4cde09c6d4342c/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=e4f044662be44f18d163db5fec4cde09c6d4342c", "patch": "@@ -35,7 +35,7 @@ use core::iter::Iterator;\n use tables::{derived_property, property, general_category, conversions, charwidth};\n \n // stable reexports\n-pub use core::char::{MAX, from_u32, from_digit, EscapeUnicode, EscapeDefault};\n+pub use core::char::{MAX, from_u32, from_u32_unchecked, from_digit, EscapeUnicode, EscapeDefault};\n \n // unstable reexports\n #[allow(deprecated)]"}, {"sha": "440e3a26f6b33ab3b31efbd19498e4643ccf566b", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f044662be44f18d163db5fec4cde09c6d4342c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f044662be44f18d163db5fec4cde09c6d4342c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e4f044662be44f18d163db5fec4cde09c6d4342c", "patch": "@@ -210,6 +210,7 @@\n #![feature(borrow_state)]\n #![feature(box_raw)]\n #![feature(box_syntax)]\n+#![feature(char_from_unchecked)]\n #![feature(char_internals)]\n #![feature(clone_from_slice)]\n #![feature(collections)]"}, {"sha": "6f15d606724e570b05da13559d6ff03bf599ace3", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e4f044662be44f18d163db5fec4cde09c6d4342c/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f044662be44f18d163db5fec4cde09c6d4342c/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=e4f044662be44f18d163db5fec4cde09c6d4342c", "patch": "@@ -32,17 +32,18 @@ use core::str::next_code_point;\n \n use ascii::*;\n use borrow::Cow;\n+use char;\n use cmp;\n use fmt;\n use hash::{Hash, Hasher};\n use iter::FromIterator;\n use mem;\n use ops;\n+use rustc_unicode::str::{Utf16Item, utf16_items};\n use slice;\n use str;\n use string::String;\n use sys_common::AsInner;\n-use rustc_unicode::str::{Utf16Item, utf16_items};\n use vec::Vec;\n \n const UTF8_REPLACEMENT_CHARACTER: &'static [u8] = b\"\\xEF\\xBF\\xBD\";\n@@ -107,7 +108,7 @@ impl CodePoint {\n     pub fn to_char(&self) -> Option<char> {\n         match self.value {\n             0xD800 ... 0xDFFF => None,\n-            _ => Some(unsafe { mem::transmute(self.value) })\n+            _ => Some(unsafe { char::from_u32_unchecked(self.value) })\n         }\n     }\n \n@@ -213,18 +214,16 @@ impl Wtf8Buf {\n             // Attempt to not use an intermediate buffer by just pushing bytes\n             // directly onto this string.\n             let slice = slice::from_raw_parts_mut(\n-                self.bytes.as_mut_ptr().offset(cur_len as isize),\n-                4\n+                self.bytes.as_mut_ptr().offset(cur_len as isize), 4\n             );\n-            let used = encode_utf8_raw(code_point.value, mem::transmute(slice))\n-                .unwrap_or(0);\n+            let used = encode_utf8_raw(code_point.value, slice).unwrap();\n             self.bytes.set_len(cur_len + used);\n         }\n     }\n \n     #[inline]\n     pub fn as_slice(&self) -> &Wtf8 {\n-        unsafe { mem::transmute(&*self.bytes) }\n+        unsafe { Wtf8::from_bytes_unchecked(&self.bytes) }\n     }\n \n     /// Reserves capacity for at least `additional` more bytes to be inserted\n@@ -457,7 +456,16 @@ impl Wtf8 {\n     /// Since WTF-8 is a superset of UTF-8, this always succeeds.\n     #[inline]\n     pub fn from_str(value: &str) -> &Wtf8 {\n-        unsafe { mem::transmute(value.as_bytes()) }\n+        unsafe { Wtf8::from_bytes_unchecked(value.as_bytes()) }\n+    }\n+\n+    /// Creates a WTF-8 slice from a WTF-8 byte slice.\n+    ///\n+    /// Since the byte slice is not checked for valid WTF-8, this functions is\n+    /// marked unsafe.\n+    #[inline]\n+    unsafe fn from_bytes_unchecked(value: &[u8]) -> &Wtf8 {\n+        mem::transmute(value)\n     }\n \n     /// Returns the length, in WTF-8 bytes.\n@@ -682,7 +690,7 @@ fn decode_surrogate(second_byte: u8, third_byte: u8) -> u16 {\n #[inline]\n fn decode_surrogate_pair(lead: u16, trail: u16) -> char {\n     let code_point = 0x10000 + ((((lead - 0xD800) as u32) << 10) | (trail - 0xDC00) as u32);\n-    unsafe { mem::transmute(code_point) }\n+    unsafe { char::from_u32_unchecked(code_point) }\n }\n \n /// Copied from core::str::StrPrelude::is_char_boundary\n@@ -699,7 +707,7 @@ pub fn is_code_point_boundary(slice: &Wtf8, index: usize) -> bool {\n #[inline]\n pub unsafe fn slice_unchecked(s: &Wtf8, begin: usize, end: usize) -> &Wtf8 {\n     // memory layout of an &[u8] and &Wtf8 are the same\n-    mem::transmute(slice::from_raw_parts(\n+    Wtf8::from_bytes_unchecked(slice::from_raw_parts(\n         s.bytes.as_ptr().offset(begin as isize),\n         end - begin\n     ))\n@@ -821,7 +829,6 @@ mod tests {\n     use prelude::v1::*;\n     use borrow::Cow;\n     use super::*;\n-    use mem::transmute;\n \n     #[test]\n     fn code_point_from_u32() {\n@@ -962,7 +969,7 @@ mod tests {\n         string.push_wtf8(Wtf8::from_str(\" \ud83d\udca9\"));\n         assert_eq!(string.bytes, b\"a\\xC3\\xA9 \\xF0\\x9F\\x92\\xA9\");\n \n-        fn w(value: &[u8]) -> &Wtf8 { unsafe { transmute(value) } }\n+        fn w(v: &[u8]) -> &Wtf8 { unsafe { Wtf8::from_bytes_unchecked(v) } }\n \n         let mut string = Wtf8Buf::new();\n         string.push_wtf8(w(b\"\\xED\\xA0\\xBD\"));  // lead"}]}