{"sha": "3740da203b6e65f19b5075379c494616d60e5f80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NDBkYTIwM2I2ZTY1ZjE5YjUwNzUzNzljNDk0NjE2ZDYwZTVmODA=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T14:11:13Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T14:29:23Z"}, "message": "Fix bugs and improve documentation\n\nSome bugs and some documentation is unrelated to the Applicability change, but\nthese bugs were serious and the documentation was kind of required to\nunderstand what's going on.", "tree": {"sha": "2e568419fa0813ac68a1cc29168bae0ef2d6d25f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e568419fa0813ac68a1cc29168bae0ef2d6d25f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3740da203b6e65f19b5075379c494616d60e5f80", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE46kBTF5vnyuSPg0W6OiXpYcOQcIFAlv9VMMACgkQ6OiXpYcO\nQcLbmhAAiGROdigjaaAjG66oQhnSL5Pe0RHFSZfts8gAMKgNOtAsSYxeTUauRLKw\nHGhmMJuj+byTFlZ3fyvhtGsc1Z21RMDGSqHnsVSLQiyqqI6ndiC7jQw8KlVvZnyX\nNCr82yiit6NGzt2gsvosC11u9VBphfLYyb+OEms+/vytmSBoqQanRfzEOyr6qOC5\nVlkzFx5Zyv0/mPumcy4AAB5tI7l6zg2KPRfRP5avAlYS0d3Cy5m3te7m/F/SfxqX\n/goe94OstJe2wYyq9S4B1qLia/6S5FORGCft4uqURf0xzJTUnmv2eDcEG2jG1Is0\nKjMyAhnTKPVZrzHcMBUqQJN8mxsW9kmE39y88VTOjIbGREZkpKQ6dDDGztAHHbIV\nL+A7TXRLHBoqUivHhrDVCQv7MffHdMRR2yy1PbuUtG3RPbijhpP3XA4xVgv3Lnkm\n5JDzJQVz6DLrI5Qed90mQ3vyki5GISWDcmYJtyVOPpUqMD+gQ643wmPcK6eA8UJW\ng02vIN+KoEiLOJWNBsEVEtd6gWznSRSWG06VU7sskyppoupQsj+G2cqwCSCQ8qUT\nOULrR/Eha/DA1OuAAYTPvh/6q2XJIkjf8lgqpnKGT578xvqWwbe5/EUl+m6NZUuz\nBGq3O80/Z9rrLlqqZti8bqnGHXt0ksUTLOkpKtRiu4HJwoU+uXU=\n=OfqM\n-----END PGP SIGNATURE-----", "payload": "tree 2e568419fa0813ac68a1cc29168bae0ef2d6d25f\nparent 9096269610fcfc5cdc719dbe7d817de4cbb75201\nauthor flip1995 <hello@philkrones.com> 1543327873 +0100\ncommitter flip1995 <hello@philkrones.com> 1543328963 +0100\n\nFix bugs and improve documentation\n\nSome bugs and some documentation is unrelated to the Applicability change, but\nthese bugs were serious and the documentation was kind of required to\nunderstand what's going on.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3740da203b6e65f19b5075379c494616d60e5f80", "html_url": "https://github.com/rust-lang/rust/commit/3740da203b6e65f19b5075379c494616d60e5f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3740da203b6e65f19b5075379c494616d60e5f80/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9096269610fcfc5cdc719dbe7d817de4cbb75201", "url": "https://api.github.com/repos/rust-lang/rust/commits/9096269610fcfc5cdc719dbe7d817de4cbb75201", "html_url": "https://github.com/rust-lang/rust/commit/9096269610fcfc5cdc719dbe7d817de4cbb75201"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "cb75d9836830124b7d6e643a94fcbe9f56ea5f00", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=3740da203b6e65f19b5075379c494616d60e5f80", "patch": "@@ -12,10 +12,9 @@\n \n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n \n-use crate::utils::span_lint_and_sugg;\n+use crate::utils::span_help_and_lint;\n \n /// **What it does:** Checks for usage of if expressions with an `else if` branch,\n /// but without a final `else` branch.\n@@ -67,14 +66,12 @@ impl EarlyLintPass for ElseIfWithoutElse {\n \n         while let ExprKind::If(_, _, Some(ref els)) = item.node {\n             if let ExprKind::If(_, _, None) = els.node {\n-                span_lint_and_sugg(\n+                span_help_and_lint(\n                     cx,\n                     ELSE_IF_WITHOUT_ELSE,\n                     els.span,\n                     \"if expression with an `else if`, but without a final `else`\",\n                     \"add an `else` block here\",\n-                    String::new(),\n-                    Applicability::Unspecified,\n                 );\n             }\n "}, {"sha": "82c3274d43ba381347bd7757df21f377956ce476", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3740da203b6e65f19b5075379c494616d60e5f80", "patch": "@@ -2046,10 +2046,10 @@ fn lint_chars_next_cmp<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, info: &BinaryExprIn\n \n /// Checks for the `CHARS_LAST_CMP` lint.\n fn lint_chars_last_cmp<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    if lint_chars_cmp(cx, info, &[\"chars\", \"last\"], CHARS_NEXT_CMP, \"ends_with\") {\n+    if lint_chars_cmp(cx, info, &[\"chars\", \"last\"], CHARS_LAST_CMP, \"ends_with\") {\n         true\n     } else {\n-        lint_chars_cmp(cx, info, &[\"chars\", \"next_back\"], CHARS_NEXT_CMP, \"ends_with\")\n+        lint_chars_cmp(cx, info, &[\"chars\", \"next_back\"], CHARS_LAST_CMP, \"ends_with\")\n     }\n }\n "}, {"sha": "0c6935d867da43dba99771fe4447fad03bb3252f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3740da203b6e65f19b5075379c494616d60e5f80", "patch": "@@ -384,24 +384,25 @@ pub fn snippet<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str)\n     snippet_opt(cx, span).map_or_else(|| Cow::Borrowed(default), From::from)\n }\n \n+/// Same as `snippet`, but it adapts the applicability level by following rules:\n+///\n+/// - Applicability level `Unspecified` will never be changed.\n+/// - If the span is inside a macro, change the applicability level to `MaybeIncorrect`.\n+/// - If the default value is used and the applicability level is `MachineApplicable`, change it to\n+/// `HasPlaceholders`\n pub fn snippet_with_applicability<'a, 'b, T: LintContext<'b>>(\n     cx: &T,\n     span: Span,\n     default: &'a str,\n     applicability: &mut Applicability,\n ) -> Cow<'a, str> {\n+    if *applicability != Applicability::Unspecified && in_macro(span) {\n+        *applicability = Applicability::MaybeIncorrect;\n+    }\n     snippet_opt(cx, span).map_or_else(\n         || {\n-            // If the applicability is already `HasPlaceholders` or `MaybeIncorrect` don't change it.\n-            // Also `Unspecified` shouldn't be changed\n-            // Only if the applicability level is originally `MachineApplicable` and the default value\n-            // has to be used change it to `HasPlaceholders`\n             if *applicability == Applicability::MachineApplicable {\n-                if in_macro(span) {\n-                    *applicability = Applicability::MaybeIncorrect;\n-                } else {\n-                    *applicability = Applicability::HasPlaceholders;\n-                }\n+                *applicability = Applicability::HasPlaceholders;\n             }\n             Cow::Borrowed(default)\n         },\n@@ -435,6 +436,18 @@ pub fn snippet_block<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'\n     trim_multiline(snip, true)\n }\n \n+/// Same as `snippet_block`, but adapts the applicability level by the rules of\n+/// `snippet_with_applicabiliy`.\n+pub fn snippet_block_with_applicability<'a, 'b, T: LintContext<'b>>(\n+    cx: &T,\n+    span: Span,\n+    default: &'a str,\n+    applicability: &mut Applicability,\n+) -> Cow<'a, str> {\n+    let snip = snippet_with_applicability(cx, span, default, applicability);\n+    trim_multiline(snip, true)\n+}\n+\n /// Returns a new Span that covers the full last line of the given Span\n pub fn last_line_of_span<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Span {\n     let source_map_and_line = cx.sess().source_map().lookup_line(span.lo()).unwrap();"}, {"sha": "b4c9868bbd6b839c54100ae7a5704649919108a6", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=3740da203b6e65f19b5075379c494616d60e5f80", "patch": "@@ -24,7 +24,7 @@ use crate::syntax::parse::token;\n use crate::syntax::print::pprust::token_to_string;\n use crate::syntax::util::parser::AssocOp;\n use crate::syntax::ast;\n-use crate::utils::{higher, snippet, snippet_opt};\n+use crate::utils::{higher, in_macro, snippet, snippet_opt};\n use crate::syntax_pos::{BytePos, Pos};\n use crate::rustc_errors::Applicability;\n \n@@ -96,7 +96,21 @@ impl<'a> Sugg<'a> {\n         Self::hir_opt(cx, expr).unwrap_or_else(|| Sugg::NonParen(Cow::Borrowed(default)))\n     }\n \n-    pub fn hir_with_applicability(cx: &LateContext<'_, '_>, expr: &hir::Expr, default: &'a str, applicability: &mut Applicability) -> Self {\n+    /// Same as `hir`, but it adapts the applicability level by following rules:\n+    ///\n+    /// - Applicability level `Unspecified` will never be changed.\n+    /// - If the span is inside a macro, change the applicability level to `MaybeIncorrect`.\n+    /// - If the default value is used and the applicability level is `MachineApplicable`, change it to\n+    /// `HasPlaceholders`\n+    pub fn hir_with_applicability(\n+        cx: &LateContext<'_, '_>,\n+        expr: &hir::Expr,\n+        default: &'a str,\n+        applicability: &mut Applicability,\n+    ) -> Self {\n+        if *applicability != Applicability::Unspecified && in_macro(expr.span) {\n+            *applicability = Applicability::MaybeIncorrect;\n+        }\n         Self::hir_opt(cx, expr).unwrap_or_else(|| {\n             if *applicability == Applicability::MachineApplicable {\n                 *applicability = Applicability::HasPlaceholders;"}, {"sha": "76e07a2d3b3f5ff78703018e62fe29fd36ba6766", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740da203b6e65f19b5075379c494616d60e5f80/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=3740da203b6e65f19b5075379c494616d60e5f80", "patch": "@@ -258,6 +258,20 @@ impl EarlyLintPass for Pass {\n     }\n }\n \n+/// Checks the arguments of `print[ln]!` and `write[ln]!` calls. It will return a tuple of two\n+/// options. The first part of the tuple is format_str of the macros. The secund part of the tuple\n+/// is in the `write[ln]!` case the expression the format_str should be written to.\n+///\n+/// Example:\n+///\n+/// Calling this function on\n+/// ```rust,ignore\n+/// writeln!(buf, \"string to write: {}\", something)\n+/// ```\n+/// will return\n+/// ```rust,ignore\n+/// (Some(\"string to write: {}\"), Some(buf))\n+/// ```\n fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> (Option<String>, Option<Expr>) {\n     use crate::fmt_macros::*;\n     let tts = TokenStream::from(tts.clone());"}]}