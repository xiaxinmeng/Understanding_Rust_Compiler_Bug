{"sha": "f0edcc8a6f457cbb27ae4559719cc42a5610378e", "node_id": "C_kwDOAAsO6NoAKGYwZWRjYzhhNmY0NTdjYmIyN2FlNDU1OTcxOWNjNDJhNTYxMDM3OGU", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-04-07T02:07:21Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-04-07T03:01:40Z"}, "message": "Remove index from BrAnon", "tree": {"sha": "329e08012f88883bb8377b39b1042cd6c1956c8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/329e08012f88883bb8377b39b1042cd6c1956c8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0edcc8a6f457cbb27ae4559719cc42a5610378e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0edcc8a6f457cbb27ae4559719cc42a5610378e", "html_url": "https://github.com/rust-lang/rust/commit/f0edcc8a6f457cbb27ae4559719cc42a5610378e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0edcc8a6f457cbb27ae4559719cc42a5610378e/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4edf00f12527bdaa20879f0ace46a1d7f46eb6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4edf00f12527bdaa20879f0ace46a1d7f46eb6d", "html_url": "https://github.com/rust-lang/rust/commit/e4edf00f12527bdaa20879f0ace46a1d7f46eb6d"}], "stats": {"total": 156, "additions": 68, "deletions": 88}, "files": [{"sha": "1a5638069d2c13c8b806c5472a31521d4143d57d", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -1342,9 +1342,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     let region_ctxt_fn = || {\n                         let reg_info = match br.kind {\n-                            ty::BoundRegionKind::BrAnon(_, Some(span)) => {\n-                                BoundRegionInfo::Span(span)\n-                            }\n+                            ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n                             ty::BoundRegionKind::BrAnon(..) => {\n                                 BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n                             }"}, {"sha": "83429f2ddef360e0cb6b1cf48238694e15f5e842", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             .placeholder_region(self.type_checker.infcx, placeholder);\n \n         let reg_info = match placeholder.bound.kind {\n-            ty::BoundRegionKind::BrAnon(_, Some(span)) => BoundRegionInfo::Span(span),\n+            ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n             ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n             ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),"}, {"sha": "854974d1605a5818f54b8674f5eaacc17f9a555a", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -139,14 +139,14 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let name_str = intrinsic_name.as_str();\n \n     let bound_vars = tcx.mk_bound_variable_kinds(&[\n-        ty::BoundVariableKind::Region(ty::BrAnon(0, None)),\n+        ty::BoundVariableKind::Region(ty::BrAnon(None)),\n         ty::BoundVariableKind::Region(ty::BrEnv),\n     ]);\n     let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n             let region = tcx.mk_re_late_bound(\n                 ty::INNERMOST,\n-                ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) },\n+                ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) },\n             );\n             let env_region = tcx.mk_re_late_bound(\n                 ty::INNERMOST,\n@@ -387,8 +387,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 );\n                 let discriminant_def_id = assoc_items[0];\n \n-                let br =\n-                    ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) };\n+                let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) };\n                 (\n                     1,\n                     vec![tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0))],\n@@ -440,8 +439,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::nontemporal_store => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),\n \n             sym::raw_eq => {\n-                let br =\n-                    ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) };\n+                let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) };\n                 let param_ty = tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0));\n                 (1, vec![param_ty; 2], tcx.types.bool)\n             }"}, {"sha": "84ed8f3780e172e5395723296d2140868770b34c", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -240,7 +240,7 @@ pub fn resolve_interior<'a, 'tcx>(\n \n             let mut counter = 0;\n             let mut mk_bound_region = |span| {\n-                let kind = ty::BrAnon(counter, span);\n+                let kind = ty::BrAnon(span);\n                 let var = ty::BoundVar::from_u32(counter);\n                 counter += 1;\n                 ty::BoundRegion { var, kind }\n@@ -263,7 +263,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                     }\n                     ty::ReLateBound(_, ty::BoundRegion { kind, .. })\n                     | ty::ReFree(ty::FreeRegion { bound_region: kind, .. }) => match kind {\n-                        ty::BoundRegionKind::BrAnon(_, span) => mk_bound_region(span),\n+                        ty::BoundRegionKind::BrAnon(span) => mk_bound_region(span),\n                         ty::BoundRegionKind::BrNamed(def_id, _) => {\n                             mk_bound_region(Some(fcx.tcx.def_span(def_id)))\n                         }\n@@ -294,7 +294,7 @@ pub fn resolve_interior<'a, 'tcx>(\n             FnMutDelegate {\n                 regions: &mut |br| {\n                     let kind = match br.kind {\n-                        ty::BrAnon(_, span) => ty::BrAnon(counter, span),\n+                        ty::BrAnon(span) => ty::BrAnon(span),\n                         _ => br.kind,\n                     };\n                     let var = ty::BoundVar::from_usize(bound_vars.len());"}, {"sha": "30f6af74b83ef5b4f6e575588d698ac11c8ea62a", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -90,7 +90,7 @@ impl<'a> DescriptionCtx<'a> {\n                             };\n                             me.span = Some(sp);\n                         }\n-                        ty::BrAnon(_, span) => {\n+                        ty::BrAnon(span) => {\n                             me.kind = \"defined_here\";\n                             me.span = match span {\n                                 Some(_) => span,"}, {"sha": "e808911a38b12f40a54064ec88bb49decbf4c230", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -772,7 +772,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n-        let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32(), None) };\n+        let br = ty::BoundRegion { var, kind: ty::BrAnon(None) };\n         self.interner().mk_re_late_bound(self.binder_index, br)\n     }\n "}, {"sha": "86fca9797d029c73279811e648988f97bb7ca0bd", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -174,11 +174,11 @@ fn msg_span_from_named_region<'tcx>(\n             ..\n         }) => (format!(\"the lifetime `{name}` as defined here\"), Some(tcx.def_span(def_id))),\n         ty::RePlaceholder(ty::PlaceholderRegion {\n-            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(_, Some(span)), .. },\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(Some(span)), .. },\n             ..\n         }) => (format!(\"the anonymous lifetime defined here\"), Some(span)),\n         ty::RePlaceholder(ty::PlaceholderRegion {\n-            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(_, None), .. },\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(None), .. },\n             ..\n         }) => (format!(\"an anonymous lifetime\"), None),\n         _ => bug!(\"{:?}\", region),\n@@ -226,7 +226,7 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n                         };\n                         (text, sp)\n                     }\n-                    ty::BrAnon(_, span) => (\n+                    ty::BrAnon(span) => (\n                         \"the anonymous lifetime as defined here\".to_string(),\n                         match span {\n                             Some(span) => span,"}, {"sha": "8a78a1956c9972673863f66d2c980609fa8733c5", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_relation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -36,14 +36,14 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                     ty::BrNamed(def_id, symbol) => {\n                         (Some(self.tcx().def_span(def_id)), Some(symbol))\n                     }\n-                    ty::BrAnon(_, span) => (*span, None),\n+                    ty::BrAnon(span) => (*span, None),\n                     ty::BrEnv => (None, None),\n                 };\n                 let (sup_span, sup_symbol) = match sup_name {\n                     ty::BrNamed(def_id, symbol) => {\n                         (Some(self.tcx().def_span(def_id)), Some(symbol))\n                     }\n-                    ty::BrAnon(_, span) => (*span, None),\n+                    ty::BrAnon(span) => (*span, None),\n                     ty::BrEnv => (None, None),\n                 };\n                 let diag = match (sub_span, sup_span, sub_symbol, sup_symbol) {"}, {"sha": "f668c4e77beaeda2e6c1e1244b74dc7f76b6e2fc", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -411,7 +411,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                         CanonicalVarKind::Region(_) | CanonicalVarKind::PlaceholderRegion(_) => {\n                             let br = ty::BoundRegion {\n                                 var: ty::BoundVar::from_usize(i),\n-                                kind: ty::BrAnon(i as u32, None),\n+                                kind: ty::BrAnon(None),\n                             };\n                             tcx.mk_re_late_bound(ty::INNERMOST, br).into()\n                         }"}, {"sha": "cfdf1dcf5c02967f058b38f2494a3ca6f3e7fcab", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -411,10 +411,8 @@ impl<'tcx> ClosureOutlivesSubjectTy<'tcx> {\n     pub fn bind(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Self {\n         let inner = tcx.fold_regions(ty, |r, depth| match r.kind() {\n             ty::ReVar(vid) => {\n-                let br = ty::BoundRegion {\n-                    var: ty::BoundVar::new(vid.index()),\n-                    kind: ty::BrAnon(vid.as_u32(), None),\n-                };\n+                let br =\n+                    ty::BoundRegion { var: ty::BoundVar::new(vid.index()), kind: ty::BrAnon(None) };\n                 tcx.mk_re_late_bound(depth, br)\n             }\n             _ => bug!(\"unexpected region in ClosureOutlivesSubjectTy: {r:?}\"),"}, {"sha": "299b1bf1d96e4d962372d9b517d7d837fcef559a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -311,7 +311,7 @@ pub struct CommonLifetimes<'tcx> {\n     pub re_vars: Vec<Region<'tcx>>,\n \n     /// Pre-interned values of the form:\n-    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(v, None) })`\n+    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(None) })`\n     /// for small values of `i` and `v`.\n     pub re_late_bounds: Vec<Vec<Region<'tcx>>>,\n }\n@@ -386,10 +386,7 @@ impl<'tcx> CommonLifetimes<'tcx> {\n                     .map(|v| {\n                         mk(ty::ReLateBound(\n                             ty::DebruijnIndex::from(i),\n-                            ty::BoundRegion {\n-                                var: ty::BoundVar::from(v),\n-                                kind: ty::BrAnon(v, None),\n-                            },\n+                            ty::BoundRegion { var: ty::BoundVar::from(v), kind: ty::BrAnon(None) },\n                         ))\n                     })\n                     .collect()\n@@ -2075,10 +2072,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         bound_region: ty::BoundRegion,\n     ) -> Region<'tcx> {\n         // Use a pre-interned one when possible.\n-        if let ty::BoundRegion { var, kind: ty::BrAnon(v, None) } = bound_region\n-            && var.as_u32() == v\n+        if let ty::BoundRegion { var, kind: ty::BrAnon(None) } = bound_region\n             && let Some(inner) = self.lifetimes.re_late_bounds.get(debruijn.as_usize())\n-            && let Some(re) = inner.get(v as usize).copied()\n+            && let Some(re) = inner.get(var.as_usize()).copied()\n         {\n             re\n         } else {"}, {"sha": "b5c2bc6095297b697547b2d8ad963d928d6f0c3b", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -379,9 +379,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let kind = entry\n-                    .or_insert_with(|| {\n-                        ty::BoundVariableKind::Region(ty::BrAnon(index as u32, None))\n-                    })\n+                    .or_insert_with(|| ty::BoundVariableKind::Region(ty::BrAnon(None)))\n                     .expect_region();\n                 let br = ty::BoundRegion { var, kind };\n                 self.tcx.mk_re_late_bound(ty::INNERMOST, br)"}, {"sha": "5c604bb6db274297ee6fb3ebe37fabed88616662", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n impl fmt::Debug for ty::BoundRegionKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            ty::BrAnon(n, span) => write!(f, \"BrAnon({n:?}, {span:?})\"),\n+            ty::BrAnon(span) => write!(f, \"BrAnon({span:?})\"),\n             ty::BrNamed(did, name) => {\n                 if did.is_crate_root() {\n                     write!(f, \"BrNamed({})\", name)"}, {"sha": "7e526e631ce6f4307247fdee2bfe26c760b77721", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -60,7 +60,7 @@ pub struct FreeRegion {\n #[derive(HashStable)]\n pub enum BoundRegionKind {\n     /// An anonymous region parameter for a given fn (&T)\n-    BrAnon(u32, Option<Span>),\n+    BrAnon(Option<Span>),\n \n     /// Named region parameters for functions (a in &'a T)\n     ///"}, {"sha": "ee883285531df52f232ced3d6098a3406e53fa38", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::base_n;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n@@ -81,9 +81,9 @@ pub(super) fn mangle_typeid_for_trait_ref<'tcx>(\n struct BinderLevel {\n     /// The range of distances from the root of what's\n     /// being printed, to the lifetimes in a binder.\n-    /// Specifically, a `BrAnon(i)` lifetime has depth\n-    /// `lifetime_depths.start + i`, going away from the\n-    /// the root and towards its use site, as `i` increases.\n+    /// Specifically, a `BrAnon` lifetime has depth\n+    /// `lifetime_depths.start + index`, going away from the\n+    /// the root and towards its use site, as the var index increases.\n     /// This is used to flatten rustc's pairing of `BrAnon`\n     /// (intra-binder disambiguation) with a `DebruijnIndex`\n     /// (binder addressing), to \"true\" de Bruijn indices,\n@@ -208,24 +208,15 @@ impl<'tcx> SymbolMangler<'tcx> {\n     where\n         T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n-        // FIXME(non-lifetime-binders): What to do here?\n-        let regions = if value.has_late_bound_regions() {\n-            self.tcx.collect_referenced_late_bound_regions(value)\n-        } else {\n-            FxHashSet::default()\n-        };\n-\n         let mut lifetime_depths =\n             self.binders.last().map(|b| b.lifetime_depths.end).map_or(0..0, |i| i..i);\n \n-        let lifetimes = regions\n-            .into_iter()\n-            .map(|br| match br {\n-                ty::BrAnon(i, _) => i,\n-                _ => bug!(\"symbol_names: non-anonymized region `{:?}` in `{:?}`\", br, value),\n-            })\n-            .max()\n-            .map_or(0, |max| max + 1);\n+        // FIXME(non-lifetime-binders): What to do here?\n+        let lifetimes = value\n+            .bound_vars()\n+            .iter()\n+            .filter(|var| matches!(var, ty::BoundVariableKind::Region(..)))\n+            .count() as u32;\n \n         self.push_opt_integer_62(\"G\", lifetimes as u64);\n         lifetime_depths.end += lifetimes;\n@@ -338,9 +329,9 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n             // Late-bound lifetimes use indices starting at 1,\n             // see `BinderLevel` for more details.\n-            ty::ReLateBound(debruijn, ty::BoundRegion { kind: ty::BrAnon(i, _), .. }) => {\n+            ty::ReLateBound(debruijn, ty::BoundRegion { var, kind: ty::BrAnon(_) }) => {\n                 let binder = &self.binders[self.binders.len() - 1 - debruijn.index()];\n-                let depth = binder.lifetime_depths.start + i;\n+                let depth = binder.lifetime_depths.start + var.as_u32();\n \n                 1 + (self.binders.last().unwrap().lifetime_depths.end - 1 - depth)\n             }"}, {"sha": "60d96e28cd385d798d57609f19c535253ca3f61f", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -257,7 +257,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n             self.primitive_var_infos.push(CanonicalVarInfo { kind });\n             var\n         });\n-        let br = ty::BoundRegion { var, kind: BrAnon(var.as_u32(), None) };\n+        let br = ty::BoundRegion { var, kind: BrAnon(None) };\n         self.interner().mk_re_late_bound(self.binder_index, br)\n     }\n "}, {"sha": "d2d75d2aa4cc9a892cc6f118411fb12c9f1b395f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -3017,7 +3017,7 @@ fn bind_generator_hidden_types_above<'tcx>(\n                     if let ty::ReErased = r.kind() {\n                         let br = ty::BoundRegion {\n                             var: ty::BoundVar::from_u32(counter),\n-                            kind: ty::BrAnon(counter, None),\n+                            kind: ty::BrAnon(None),\n                         };\n                         counter += 1;\n                         r = tcx.mk_re_late_bound(current_depth, br);\n@@ -3033,7 +3033,7 @@ fn bind_generator_hidden_types_above<'tcx>(\n         debug_assert!(!hidden_types.has_erased_regions());\n     }\n     let bound_vars = tcx.mk_bound_variable_kinds_from_iter(bound_vars.iter().chain(\n-        (num_bound_variables..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n+        (num_bound_variables..counter).map(|_| ty::BoundVariableKind::Region(ty::BrAnon(None))),\n     ));\n     ty::Binder::bind_with_vars(hidden_types, bound_vars)\n }"}, {"sha": "9683e48478edcb576ede7d86c60cb9b35b8b9f21", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -730,7 +730,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n         ty::GenericParamDefKind::Lifetime => {\n             let br = ty::BoundRegion {\n                 var: ty::BoundVar::from_usize(substs.len()),\n-                kind: ty::BrAnon(substs.len() as u32, None),\n+                kind: ty::BrAnon(None),\n             };\n             tcx.mk_re_late_bound(ty::INNERMOST, br).into()\n         }"}, {"sha": "373082d8092a4068f5ada5c4c0757a962af74d0e", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -533,15 +533,15 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n                 ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(var.index),\n-                    kind: ty::BrAnon(var.index as u32, None),\n+                    kind: ty::BrAnon(None),\n                 },\n             ),\n             chalk_ir::LifetimeData::InferenceVar(_var) => unimplemented!(),\n             chalk_ir::LifetimeData::Placeholder(p) => tcx.mk_re_placeholder(ty::Placeholder {\n                 universe: ty::UniverseIndex::from_usize(p.ui.counter),\n                 bound: ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(p.idx),\n-                    kind: ty::BoundRegionKind::BrAnon(p.idx as u32, None),\n+                    kind: ty::BoundRegionKind::BrAnon(None),\n                 },\n             }),\n             chalk_ir::LifetimeData::Static => tcx.lifetimes.re_static,\n@@ -976,7 +976,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for BoundVarsCollector<'tcx> {\n                     }\n                 }\n \n-                ty::BoundRegionKind::BrAnon(var, _) => match self.parameters.entry(var) {\n+                ty::BoundRegionKind::BrAnon(_) => match self.parameters.entry(br.var.as_u32()) {\n                     Entry::Vacant(entry) => {\n                         entry.insert(chalk_ir::VariableKind::Lifetime);\n                     }\n@@ -1036,8 +1036,8 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n         match *r {\n             ty::ReLateBound(index, br) if index == self.binder_index => match br.kind {\n                 ty::BrNamed(def_id, _name) => match self.named_parameters.get(&def_id) {\n-                    Some(idx) => {\n-                        let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(*idx, None) };\n+                    Some(_) => {\n+                        let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(None) };\n                         return self.tcx.mk_re_late_bound(index, new_br);\n                     }\n                     None => panic!(\"Missing `BrNamed`.\"),\n@@ -1127,15 +1127,15 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                 Some(idx) => {\n                     let br = ty::BoundRegion {\n                         var: ty::BoundVar::from_u32(*idx),\n-                        kind: ty::BrAnon(*idx, None),\n+                        kind: ty::BrAnon(None),\n                     };\n                     self.tcx.mk_re_late_bound(self.binder_index, br)\n                 }\n                 None => {\n                     let idx = self.named_regions.len() as u32;\n                     let br = ty::BoundRegion {\n                         var: ty::BoundVar::from_u32(idx),\n-                        kind: ty::BrAnon(idx, None),\n+                        kind: ty::BrAnon(None),\n                     };\n                     self.named_regions.insert(_re.def_id, idx);\n                     self.tcx.mk_re_late_bound(self.binder_index, br)\n@@ -1213,8 +1213,9 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n     fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n-                if let ty::BoundRegionKind::BrAnon(anon, _) = p.bound.kind {\n-                    self.next_anon_region_placeholder = self.next_anon_region_placeholder.max(anon);\n+                if let ty::BoundRegionKind::BrAnon(_) = p.bound.kind {\n+                    self.next_anon_region_placeholder =\n+                        self.next_anon_region_placeholder.max(p.bound.var.as_u32());\n                 }\n                 // FIXME: This doesn't seem to handle BrNamed at all?\n             }"}, {"sha": "835f7f765600f5aee8f5db5a452a4399c59cc93f", "filename": "tests/ui/impl-trait/impl-fn-hrtb-bounds-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL | fn a() -> impl Fn(&u8) -> impl Debug {\n LL |     |x| x\n    |     --- ^\n    |     |\n-   |     hidden type `&u8` captures the anonymous lifetime #1 defined here\n+   |     hidden type `&u8` captures the anonymous lifetime as defined here\n \n error: aborting due to previous error\n "}, {"sha": "c0d95ddaa07961df133aebdebaa95a0d4954416b", "filename": "tests/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) i32)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) i32)),\n                (),\n            ]\n "}, {"sha": "61e2a1ea6f0193d0bb238354766d4f4ef8880774", "filename": "tests/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) i32)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) i32)),\n                (),\n            ]\n "}, {"sha": "5a7b12732df68dd37b9dc1cc0dfad2ea5b97b458", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#4r"}, {"sha": "db2ecc779ef9661db87cd5502f5e64246930f0df", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None)), Region(BrAnon(5, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(5, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "1d9dafbe55f6983f1e8a96cdba623181e9552a95", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |\n    = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n-               for<Region(BrAnon(0, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>)),\n+               for<Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n \n@@ -36,7 +36,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |\n    = note: defining type: case2::{closure#0} with closure substs [\n                i32,\n-               for<Region(BrAnon(0, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>)),\n+               for<Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: number of external vids: 2"}, {"sha": "85f7fe35c0aa82670d2b0024a89d81a36a96bbdf", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "7194843e203fb02a746986fdced3bc49a66d7b69", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None)), Region(BrAnon(5, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(5, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "71f8a1c67c679803d91a800fbc39fc3852faf6f0", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "e1cb97b1c7d909920027d9942658e9febfb4e7f6", "filename": "tests/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |         |_outlives1, _outlives2, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "b66e8391c0136fce1c80bad881518b233628f509", "filename": "tests/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "49641fd06fdb45b116a4acd071e79497d34dd2cd", "filename": "tests/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None)), Region(BrAnon(5, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(5, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "4e34ba5165958f91e3c2c64b5ace092ab5b9eb94", "filename": "tests/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) i32)) -> &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) i32,\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) i32)) -> &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) i32,\n                (),\n            ]\n "}, {"sha": "2c4a0597554a3d8573c7b16459998f392335d7c5", "filename": "tests/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0edcc8a6f457cbb27ae4559719cc42a5610378e/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=f0edcc8a6f457cbb27ae4559719cc42a5610378e", "patch": "@@ -6,7 +6,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) T)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) T)),\n                (),\n            ]\n    = note: number of external vids: 2\n@@ -28,7 +28,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) T)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) T)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}]}