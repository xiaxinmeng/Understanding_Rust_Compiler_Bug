{"sha": "ac435af73a0009daf22164ee2f081a7c98ca844c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNDM1YWY3M2EwMDA5ZGFmMjIxNjRlZTJmMDgxYTdjOThjYTg0NGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-11T23:55:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-16T02:00:19Z"}, "message": "Add at_exit function #4450", "tree": {"sha": "de3ee3f04207844cd85925d2fa2ad54fb96e031a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3ee3f04207844cd85925d2fa2ad54fb96e031a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac435af73a0009daf22164ee2f081a7c98ca844c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac435af73a0009daf22164ee2f081a7c98ca844c", "html_url": "https://github.com/rust-lang/rust/commit/ac435af73a0009daf22164ee2f081a7c98ca844c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac435af73a0009daf22164ee2f081a7c98ca844c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "090b247056a9dd2d4d4a32c631fe2f0ddd3e744d", "url": "https://api.github.com/repos/rust-lang/rust/commits/090b247056a9dd2d4d4a32c631fe2f0ddd3e744d", "html_url": "https://github.com/rust-lang/rust/commit/090b247056a9dd2d4d4a32c631fe2f0ddd3e744d"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "48489dab4880bd6f1222b74ad16cf8ba05d73306", "filename": "src/libcore/private.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=ac435af73a0009daf22164ee2f081a7c98ca844c", "patch": "@@ -28,6 +28,9 @@ use task;\n use task::{TaskBuilder, atomically};\n use uint;\n \n+#[path = \"private/at_exit.rs\"]\n+pub mod at_exit;\n+\n extern mod rustrt {\n     #[legacy_exports];\n     unsafe fn rust_task_weaken(ch: rust_port_id);"}, {"sha": "7ac252ea1021179848ebc3d159c1ed23dae82627", "filename": "src/libcore/private/at_exit.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Flibcore%2Fprivate%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Flibcore%2Fprivate%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fat_exit.rs?ref=ac435af73a0009daf22164ee2f081a7c98ca844c", "patch": "@@ -0,0 +1,86 @@\n+use sys;\n+use cast;\n+use ptr;\n+use task;\n+use uint;\n+use vec;\n+use rand;\n+use libc::{c_void, size_t};\n+\n+/**\n+Register a function to be run during runtime shutdown.\n+\n+After all non-weak tasks have exited, registered exit functions will\n+execute, in random order, on the primary scheduler. Each function runs\n+in its own unsupervised task.\n+*/\n+pub fn at_exit(f: ~fn()) unsafe {\n+    let runner: &fn(*ExitFunctions) = exit_runner;\n+    let runner_pair: sys::Closure = cast::transmute(runner);\n+    let runner_ptr = runner_pair.code;\n+    let runner_ptr = cast::transmute(runner_ptr);\n+    rustrt::rust_register_exit_function(runner_ptr, ~f);\n+}\n+\n+// NB: The double pointer indirection here is because ~fn() is a fat\n+// pointer and due to FFI problems I am more comfortable making the\n+// interface use a normal pointer\n+extern mod rustrt {\n+    fn rust_register_exit_function(runner: *c_void, f: ~~fn());\n+}\n+\n+struct ExitFunctions {\n+    // The number of exit functions\n+    count: size_t,\n+    // The buffer of exit functions\n+    start: *~~fn()\n+}\n+\n+fn exit_runner(exit_fns: *ExitFunctions) unsafe {\n+    let exit_fns = &*exit_fns;\n+    let count = (*exit_fns).count;\n+    let start = (*exit_fns).start;\n+\n+    // NB: from_buf memcpys from the source, which will\n+    // give us ownership of the array of functions\n+    let mut exit_fns_vec = vec::from_buf(start, count as uint);\n+    // Let's not make any promises about execution order\n+    rand::Rng().shuffle_mut(exit_fns_vec);\n+\n+    debug!(\"running %u exit functions\", exit_fns_vec.len());\n+\n+    while exit_fns_vec.is_not_empty() {\n+        match exit_fns_vec.pop() {\n+            ~f => {\n+                task::task().supervised().spawn(f);\n+            }\n+        }\n+    }\n+}\n+\n+#[abi = \"rust-intrinsic\"]\n+pub extern mod rusti {\n+    fn move_val_init<T>(dst: &mut T, -src: T);\n+    fn init<T>() -> T;\n+}\n+\n+#[test]\n+fn test_at_exit() {\n+    let i = 10;\n+    do at_exit {\n+        debug!(\"at_exit1\");\n+        assert i == 10;\n+    }\n+}\n+\n+#[test]\n+fn test_at_exit_many() {\n+    let i = 10;\n+    for uint::range(20, 100) |j| {\n+        do at_exit {\n+            debug!(\"at_exit2\");\n+            assert i == 10;\n+            assert j > i;\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "a37aea13e40619e7da8a19454985e11a0ae9153b", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=ac435af73a0009daf22164ee2f081a7c98ca844c", "patch": "@@ -1026,6 +1026,11 @@ rust_raw_thread_join_delete(raw_thread *thread) {\n     delete thread;\n }\n \n+extern \"C\" void\n+rust_register_exit_function(spawn_fn runner, fn_env_pair *f) {\n+    rust_task *task = rust_get_current_task();\n+    task->kernel->register_exit_function(runner, f);\n+}\n \n //\n // Local Variables:"}, {"sha": "3042b006a92cf5dea671ebc167e052119a00d116", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=ac435af73a0009daf22164ee2f081a7c98ca844c", "patch": "@@ -36,6 +36,8 @@ rust_kernel::rust_kernel(rust_env *env) :\n     non_weak_tasks(0),\n     global_loop_chan(0),\n     global_env_chan(0),\n+    at_exit_runner(NULL),\n+    at_exit_started(false),\n     env(env)\n \n {\n@@ -427,6 +429,7 @@ rust_kernel::begin_shutdown() {\n         }\n     }\n \n+    run_exit_functions();\n     allow_scheduler_exit();\n     end_weak_tasks();\n }\n@@ -446,6 +449,47 @@ rust_kernel::send_to_port(rust_port_id chan, void *sptr) {\n     }\n }\n \n+void\n+rust_kernel::register_exit_function(spawn_fn runner, fn_env_pair *f) {\n+    scoped_lock with(at_exit_lock);\n+\n+    assert(!at_exit_started && \"registering at_exit function after exit\");\n+\n+    if (at_exit_runner) {\n+        assert(runner == at_exit_runner\n+               && \"there can be only one at_exit_runner\");\n+    }\n+\n+    at_exit_runner = runner;\n+    at_exit_fns.push_back(f);\n+}\n+\n+void\n+rust_kernel::run_exit_functions() {\n+    rust_task *task;\n+\n+    {\n+        scoped_lock with(at_exit_lock);\n+\n+        assert(!at_exit_started && \"running exit functions twice?\");\n+\n+        at_exit_started = true;\n+\n+        if (at_exit_runner == NULL) {\n+            return;\n+        }\n+\n+        rust_scheduler *sched = get_scheduler_by_id(main_sched_id());\n+        assert(sched);\n+        task = sched->create_task(NULL, \"at_exit\");\n+\n+        final_exit_fns.count = at_exit_fns.size();\n+        final_exit_fns.start = at_exit_fns.data();\n+    }\n+\n+    task->start(at_exit_runner, NULL, &final_exit_fns);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "b1548e92cdb364bfa5b845722ed96111fcfc3ec6", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=ac435af73a0009daf22164ee2f081a7c98ca844c", "patch": "@@ -50,6 +50,7 @@\n #include \"memory_region.h\"\n #include \"rust_log.h\"\n #include \"rust_sched_reaper.h\"\n+#include \"rust_type.h\"\n #include \"util/hash_map.h\"\n \n class rust_scheduler;\n@@ -66,6 +67,13 @@ typedef intptr_t rust_port_id;\n \n typedef std::map<rust_sched_id, rust_scheduler*> sched_map;\n \n+// This is defined as a struct only because we need a single pointer to pass\n+// to the Rust function that runs the at_exit functions\n+struct exit_functions {\n+    size_t count;\n+    fn_env_pair **start;\n+};\n+\n class rust_kernel {\n     memory_region _region;\n     rust_log _log;\n@@ -126,6 +134,14 @@ class rust_kernel {\n     // Used to serialize access to getenv/setenv\n     uintptr_t global_env_chan;\n \n+    lock_and_signal at_exit_lock;\n+    spawn_fn at_exit_runner;\n+    bool at_exit_started;\n+    std::vector<fn_env_pair*> at_exit_fns;\n+    exit_functions final_exit_fns;\n+\n+    void run_exit_functions();\n+\n public:\n     struct rust_env *env;\n \n@@ -175,6 +191,8 @@ class rust_kernel {\n \n     uintptr_t* get_global_loop() { return &global_loop_chan; }\n     uintptr_t* get_global_env_chan() { return &global_env_chan; }\n+\n+    void register_exit_function(spawn_fn runner, fn_env_pair *f);\n };\n \n template <typename T> struct kernel_owned {"}, {"sha": "719505079e65f6836dc44ab4bd721b94295dcc6c", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/ac435af73a0009daf22164ee2f081a7c98ca844c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=ac435af73a0009daf22164ee2f081a7c98ca844c", "patch": "@@ -210,3 +210,4 @@ linenoiseHistorySave\n linenoiseHistoryLoad\n rust_raw_thread_start\n rust_raw_thread_join_delete\n+rust_register_exit_function"}]}