{"sha": "13477c77bf07b1c9a8ddcbd4613e173312c33d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNDc3Yzc3YmYwN2IxYzlhOGRkY2JkNDYxM2UxNzMzMTJjMzNkNTk=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-11-24T00:09:51Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-12-02T00:22:04Z"}, "message": "Implement native library kind and name overrides from the command line.", "tree": {"sha": "7514660a165a6124d95ac2f4cb4e91908481dacf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7514660a165a6124d95ac2f4cb4e91908481dacf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13477c77bf07b1c9a8ddcbd4613e173312c33d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13477c77bf07b1c9a8ddcbd4613e173312c33d59", "html_url": "https://github.com/rust-lang/rust/commit/13477c77bf07b1c9a8ddcbd4613e173312c33d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13477c77bf07b1c9a8ddcbd4613e173312c33d59/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4508e8a847c57b2eb8c7bf7e318c49b7cd327cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4508e8a847c57b2eb8c7bf7e318c49b7cd327cb7", "html_url": "https://github.com/rust-lang/rust/commit/4508e8a847c57b2eb8c7bf7e318c49b7cd327cb7"}], "stats": {"total": 149, "additions": 119, "deletions": 30}, "files": [{"sha": "48bc390ddcaa879b013570c84011761b4da30bc6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=13477c77bf07b1c9a8ddcbd4613e173312c33d59", "patch": "@@ -262,7 +262,7 @@ top_level_options!(\n         //            much sense: The search path can stay the same while the\n         //            things discovered there might have changed on disk.\n         search_paths: SearchPaths [TRACKED],\n-        libs: Vec<(String, cstore::NativeLibraryKind)> [TRACKED],\n+        libs: Vec<(String, Option<String>, cstore::NativeLibraryKind)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [TRACKED],\n \n         target_triple: String [TRACKED],\n@@ -1439,6 +1439,8 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     }\n \n     let libs = matches.opt_strs(\"l\").into_iter().map(|s| {\n+        // Parse string of the form \"[KIND=]lib[:new_name]\",\n+        // where KIND is one of \"dylib\", \"framework\", \"static\".\n         let mut parts = s.splitn(2, '=');\n         let kind = parts.next().unwrap();\n         let (name, kind) = match (parts.next(), kind) {\n@@ -1452,7 +1454,10 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n                                                  s));\n             }\n         };\n-        (name.to_string(), kind)\n+        let mut name_parts = name.splitn(2, ':');\n+        let name = name_parts.next().unwrap();\n+        let new_name = name_parts.next();\n+        (name.to_string(), new_name.map(|n| n.to_string()), kind)\n     }).collect();\n \n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n@@ -1716,8 +1721,8 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(CrateType);\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n-    impl_dep_tracking_hash_for_sortable_vec_of!((String, cstore::NativeLibraryKind));\n-\n+    impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>,\n+                                                 cstore::NativeLibraryKind));\n     impl DepTrackingHash for SearchPaths {\n         fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n             let mut elems: Vec<_> = self\n@@ -1740,6 +1745,21 @@ mod dep_tracking {\n         }\n     }\n \n+    impl<T1, T2, T3> DepTrackingHash for (T1, T2, T3)\n+        where T1: DepTrackingHash,\n+              T2: DepTrackingHash,\n+              T3: DepTrackingHash\n+    {\n+        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n+            Hash::hash(&0, hasher);\n+            DepTrackingHash::hash(&self.0, hasher, error_format);\n+            Hash::hash(&1, hasher);\n+            DepTrackingHash::hash(&self.1, hasher, error_format);\n+            Hash::hash(&2, hasher);\n+            DepTrackingHash::hash(&self.2, hasher, error_format);\n+        }\n+    }\n+\n     // This is a stable hash because BTreeMap is a sorted container\n     pub fn stable_hash(sub_hashes: BTreeMap<&'static str, &DepTrackingHash>,\n                        hasher: &mut DefaultHasher,\n@@ -2143,29 +2163,37 @@ mod tests {\n         let mut v1 = super::basic_options();\n         let mut v2 = super::basic_options();\n         let mut v3 = super::basic_options();\n+        let mut v4 = super::basic_options();\n \n         // Reference\n-        v1.libs = vec![(String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"b\"), cstore::NativeFramework),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v1.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), None, cstore::NativeFramework),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n         // Change label\n-        v2.libs = vec![(String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"X\"), cstore::NativeFramework),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v2.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"X\"), None, cstore::NativeFramework),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n         // Change kind\n-        v3.libs = vec![(String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"b\"), cstore::NativeStatic),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v3.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), None, cstore::NativeStatic),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n+\n+        // Change new-name\n+        v4.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), Some(String::from(\"X\")), cstore::NativeFramework),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n         assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() != v3.dep_tracking_hash());\n+        assert!(v1.dep_tracking_hash() != v4.dep_tracking_hash());\n \n         // Check clone\n         assert_eq!(v1.dep_tracking_hash(), v1.clone().dep_tracking_hash());\n         assert_eq!(v2.dep_tracking_hash(), v2.clone().dep_tracking_hash());\n         assert_eq!(v3.dep_tracking_hash(), v3.clone().dep_tracking_hash());\n+        assert_eq!(v4.dep_tracking_hash(), v4.clone().dep_tracking_hash());\n     }\n \n     #[test]\n@@ -2175,17 +2203,17 @@ mod tests {\n         let mut v3 = super::basic_options();\n \n         // Reference\n-        v1.libs = vec![(String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"b\"), cstore::NativeFramework),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v1.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), None, cstore::NativeFramework),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n-        v2.libs = vec![(String::from(\"b\"), cstore::NativeFramework),\n-                       (String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v2.libs = vec![(String::from(\"b\"), None, cstore::NativeFramework),\n+                       (String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n-        v3.libs = vec![(String::from(\"c\"), cstore::NativeUnknown),\n-                       (String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"b\"), cstore::NativeFramework)];\n+        v3.libs = vec![(String::from(\"c\"), None, cstore::NativeUnknown),\n+                       (String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), None, cstore::NativeFramework)];\n \n         assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());"}, {"sha": "ccbe90ebe7c9265536286bb93df6e7b8e462b14d", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=13477c77bf07b1c9a8ddcbd4613e173312c33d59", "patch": "@@ -966,14 +966,20 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n             dump_crates(&self.cstore);\n         }\n \n-        for &(ref name, kind) in &self.sess.opts.libs {\n-            let lib = NativeLibrary {\n-                name: Symbol::intern(name),\n-                kind: kind,\n-                cfg: None,\n-                foreign_items: Vec::new(),\n-            };\n-            register_native_lib(self.sess, self.cstore, None, lib);\n+        // Process libs passed on the command line\n+        for &(ref name, ref new_name, kind) in &self.sess.opts.libs {\n+            // First, try to update existing lib(s) added via #[link(...)]\n+            let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n+            if !self.cstore.update_used_library(name, new_name, kind) {\n+                // Add if not found\n+                let lib = NativeLibrary {\n+                    name: Symbol::intern(name),\n+                    kind: kind,\n+                    cfg: None,\n+                    foreign_items: Vec::new(),\n+                };\n+                register_native_lib(self.sess, self.cstore, None, lib);\n+             }\n         }\n         self.register_statically_included_foreign_items();\n         self.register_dllimport_foreign_items();"}, {"sha": "e00278d28db50afd58cb19d2c5cd441680218f37", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=13477c77bf07b1c9a8ddcbd4613e173312c33d59", "patch": "@@ -232,6 +232,23 @@ impl CStore {\n         self.used_libraries.borrow_mut().push(lib);\n     }\n \n+    // Update kind and, optionally, the name of all native libaries (there may be more than one)\n+    // with the specified name.\n+    pub fn update_used_library(&self, name: &str, new_name: Option<&str>,\n+                               new_kind: NativeLibraryKind) -> bool {\n+        let mut found = false;\n+        for item in self.used_libraries.borrow_mut().iter_mut() {\n+            if item.name == name {\n+                item.kind = new_kind;\n+                if let Some(new_name) = new_name {\n+                    item.name = Symbol::intern(new_name);\n+                }\n+                found = true;\n+            }\n+        }\n+        found\n+    }\n+\n     pub fn get_used_libraries(&self) -> &RefCell<Vec<NativeLibrary>> {\n         &self.used_libraries\n     }"}, {"sha": "7438ba21bfc4a064a7303e047ef553ef72fd28e4", "filename": "src/test/run-pass/rfc1717/auxiliary/clibrary.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Ftest%2Frun-pass%2Frfc1717%2Fauxiliary%2Fclibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Ftest%2Frun-pass%2Frfc1717%2Fauxiliary%2Fclibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1717%2Fauxiliary%2Fclibrary.rs?ref=13477c77bf07b1c9a8ddcbd4613e173312c33d59", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![crate_type = \"staticlib\"]\n+\n+#[no_mangle]\n+pub extern \"C\" fn foo(x:i32) -> i32 { x }"}, {"sha": "d6ef96c5add0134939bfe01ab2ce1f5e7c7020c8", "filename": "src/test/run-pass/rfc1717/library-override.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Ftest%2Frun-pass%2Frfc1717%2Flibrary-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Ftest%2Frun-pass%2Frfc1717%2Flibrary-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1717%2Flibrary-override.rs?ref=13477c77bf07b1c9a8ddcbd4613e173312c33d59", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:clibrary.rs\n+// compile-flags: -lstatic=wronglibrary:clibrary\n+\n+#[link(name = \"wronglibrary\", kind = \"dylib\")]\n+extern \"C\" {\n+    pub fn foo(x:i32) -> i32;\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(42);\n+    }\n+}"}]}