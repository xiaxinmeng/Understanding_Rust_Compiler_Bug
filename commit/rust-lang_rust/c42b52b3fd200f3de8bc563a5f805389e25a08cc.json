{"sha": "c42b52b3fd200f3de8bc563a5f805389e25a08cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MmI1MmIzZmQyMDBmM2RlOGJjNTYzYTVmODA1Mzg5ZTI1YTA4Y2M=", "commit": {"author": {"name": "Rick Waldron", "email": "waldron.rick@gmail.com", "date": "2012-01-23T04:14:46Z"}, "committer": {"name": "Rick Waldron", "email": "waldron.rick@gmail.com", "date": "2012-01-23T04:14:46Z"}, "message": "Corrects order of identifier and type in arguments list in 7.3.3 Constraints example. Fixes #1613", "tree": {"sha": "3a138791b2f79c758a72d47f193e1569482fbc88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a138791b2f79c758a72d47f193e1569482fbc88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42b52b3fd200f3de8bc563a5f805389e25a08cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42b52b3fd200f3de8bc563a5f805389e25a08cc", "html_url": "https://github.com/rust-lang/rust/commit/c42b52b3fd200f3de8bc563a5f805389e25a08cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42b52b3fd200f3de8bc563a5f805389e25a08cc/comments", "author": {"login": "rwaldron", "id": 27985, "node_id": "MDQ6VXNlcjI3OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/27985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwaldron", "html_url": "https://github.com/rwaldron", "followers_url": "https://api.github.com/users/rwaldron/followers", "following_url": "https://api.github.com/users/rwaldron/following{/other_user}", "gists_url": "https://api.github.com/users/rwaldron/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwaldron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwaldron/subscriptions", "organizations_url": "https://api.github.com/users/rwaldron/orgs", "repos_url": "https://api.github.com/users/rwaldron/repos", "events_url": "https://api.github.com/users/rwaldron/events{/privacy}", "received_events_url": "https://api.github.com/users/rwaldron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rwaldron", "id": 27985, "node_id": "MDQ6VXNlcjI3OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/27985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwaldron", "html_url": "https://github.com/rwaldron", "followers_url": "https://api.github.com/users/rwaldron/followers", "following_url": "https://api.github.com/users/rwaldron/following{/other_user}", "gists_url": "https://api.github.com/users/rwaldron/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwaldron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwaldron/subscriptions", "organizations_url": "https://api.github.com/users/rwaldron/orgs", "repos_url": "https://api.github.com/users/rwaldron/repos", "events_url": "https://api.github.com/users/rwaldron/events{/privacy}", "received_events_url": "https://api.github.com/users/rwaldron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a88c0847c227db089d9b1d3c4c1134721a92d955", "url": "https://api.github.com/repos/rust-lang/rust/commits/a88c0847c227db089d9b1d3c4c1134721a92d955", "html_url": "https://github.com/rust-lang/rust/commit/a88c0847c227db089d9b1d3c4c1134721a92d955"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "d93670a5638c1683210aabdb10935e2c1c66deef", "filename": "doc/rust.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c42b52b3fd200f3de8bc563a5f805389e25a08cc/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/c42b52b3fd200f3de8bc563a5f805389e25a08cc/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=c42b52b3fd200f3de8bc563a5f805389e25a08cc", "patch": "@@ -190,7 +190,7 @@ with any other legal whitespace element, such as a single space character.\n ## Tokens\n \n ~~~~~~~~ {.ebnf .gram}\n-simple_token : keyword | reserved | unop | binop ; \n+simple_token : keyword | reserved | unop | binop ;\n token : simple_token | ident | literal | symbol | whitespace token ;\n ~~~~~~~~\n \n@@ -511,7 +511,7 @@ from the source file name, with the `.rs` extension removed.\n ## Crate files\n \n ~~~~~~~~ {.ebnf .gram}\n-crate : attribute [ ';' | attribute* directive ] \n+crate : attribute [ ';' | attribute* directive ]\n       | directive ;\n directive : view_item | dir_directive | source_directive ;\n ~~~~~~~~\n@@ -730,7 +730,7 @@ independently declared with [`use` declarations](#use-declarations).\n \n Imports support a number of \"convenience\" notations:\n \n-  * Importing as a different name than the imported name, using the \n+  * Importing as a different name than the imported name, using the\n     syntax `import x = p::q::r;`.\n   * Importing a list of paths differing only in final element, using\n     the glob-like brace syntax `import a::b::{c,d,e,f};`\n@@ -1153,7 +1153,7 @@ An _implementation item_ provides an implementation of an\n \n ~~~~\n type circle = {radius: float, center: point};\n-    \n+\n impl circle_shape of shape for circle {\n     fn draw(s: surface) { do_draw_circle(s, self); }\n     fn bounding_box() -> bounding_box {\n@@ -1313,7 +1313,7 @@ declaring a function-local item.\n \n ~~~~~~~~{.ebnf .gram}\n let_decl : \"let\" pat [':' type ] ? [ init ] ? ';' ;\n-init : [ '=' | '<-' ] expr ; \n+init : [ '=' | '<-' ] expr ;\n ~~~~~~~~\n \n \n@@ -1941,7 +1941,7 @@ for e: foo in v {\n ~~~~~~~~{.ebnf .gram}\n if_expr : \"if\" expr '{' block '}'\n           [ \"else\" else_tail ] ? ;\n-          \n+\n else_tail : \"else\" [ if_expr\n                    | '{' block '} ] ;\n ~~~~~~~~\n@@ -2331,11 +2331,11 @@ introduced inline in source code using the `macro` extension, may be used. The\n current built-in syntax extensions are:\n \n \n-* `fmt` expands into code to produce a formatted string, similar to \n+* `fmt` expands into code to produce a formatted string, similar to\n       `printf` from C.\n * `env` expands into a string literal containing the value of that\n       environment variable at compile-time.\n-* `concat_idents` expands into an identifier which is the \n+* `concat_idents` expands into an identifier which is the\n       concatenation of its arguments.\n * `ident_to_str` expands into a string literal containing the name of\n       its argument (which must be a literal).\n@@ -2750,7 +2750,7 @@ A _constraint_ is a predicate applied to specific slots.\n For example, consider the following code:\n \n ~~~~~~~~\n-pure fn is_less_than(int a, int b) -> bool {\n+pure fn is_less_than(a: int, b: int) -> bool {\n      ret a < b;\n }\n "}]}