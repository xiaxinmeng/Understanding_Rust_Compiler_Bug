{"sha": "c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTlkN2FjYWY3NGE1N2FkMzdjZGQ4ODNjMmYxMzhlYTU5ZWZjMjg=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-31T20:48:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-31T20:48:28Z"}, "message": "Rollup merge of #40935 - donniebishop:str_boilerplate_docs, r=steveklabnik\n\nModify str Structs descriptions\n\nReferences #29375. Modified descriptions of multiple structs to be more in line with structs found under [`std::iter`](https://doc.rust-lang.org/std/iter/#structs), such as [`Chain`](https://doc.rust-lang.org/std/iter/struct.Chain.html) and [`Enumerate`](https://doc.rust-lang.org/std/iter/struct.Enumerate.html)", "tree": {"sha": "592ca07f98458756a8649ed9b0ac074339d45c60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592ca07f98458756a8649ed9b0ac074339d45c60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "html_url": "https://github.com/rust-lang/rust/commit/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5082fe801d8704a9c33a706daf63d1abfdfca90", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5082fe801d8704a9c33a706daf63d1abfdfca90", "html_url": "https://github.com/rust-lang/rust/commit/c5082fe801d8704a9c33a706daf63d1abfdfca90"}, {"sha": "3b396217b5b52cf87769263bf0b842c56471b54f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b396217b5b52cf87769263bf0b842c56471b54f", "html_url": "https://github.com/rust-lang/rust/commit/3b396217b5b52cf87769263bf0b842c56471b54f"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "c37a4fa6b5572757681971170e2984577d7d3385", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "patch": "@@ -133,9 +133,15 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n     }\n }\n \n-/// External iterator for a string's UTF-16 code units.\n+/// An iterator of [`u16`] over the string encoded as UTF-16.\n ///\n-/// For use with the `std::iter` module.\n+/// [`u16`]: ../../std/primitive.u16.html\n+///\n+/// This struct is created by the [`encode_utf16`] method on [`str`].\n+/// See its documentation for more.\n+///\n+/// [`encode_utf16`]: ../../std/primitive.str.html#method.encode_utf16\n+/// [`str`]: ../../std/primitive.str.html\n #[derive(Clone)]\n #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n pub struct EncodeUtf16<'a> {"}, {"sha": "f75a1f7ab6e0f07fa720b8abf8a81f8bfb0f9515", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "patch": "@@ -369,11 +369,15 @@ impl fmt::Display for Utf8Error {\n Section: Iterators\n */\n \n-/// Iterator for the char (representing *Unicode Scalar Values*) of a string.\n+/// An iterator over the [`char`]s of a string slice.\n ///\n-/// Created with the method [`chars`].\n+/// [`char`]: ../../std/primitive.char.html\n+///\n+/// This struct is created by the [`chars`] method on [`str`].\n+/// See its documentation for more.\n ///\n /// [`chars`]: ../../std/primitive.str.html#method.chars\n+/// [`str`]: ../../std/primitive.str.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chars<'a> {\n@@ -553,7 +557,15 @@ impl<'a> Chars<'a> {\n     }\n }\n \n-/// Iterator for a string's characters and their byte offsets.\n+/// An iterator over the [`char`]s of a string slice, and their positions.\n+///\n+/// [`char`]: ../../std/primitive.char.html\n+///\n+/// This struct is created by the [`char_indices`] method on [`str`].\n+/// See its documentation for more.\n+///\n+/// [`char_indices`]: ../../std/primitive.str.html#method.char_indices\n+/// [`str`]: ../../std/primitive.str.html\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CharIndices<'a> {\n@@ -625,12 +637,13 @@ impl<'a> CharIndices<'a> {\n     }\n }\n \n-/// External iterator for a string's bytes.\n-/// Use with the `std::iter` module.\n+/// An iterator over the bytes of a string slice.\n ///\n-/// Created with the method [`bytes`].\n+/// This struct is created by the [`bytes`] method on [`str`].\n+/// See its documentation for more.\n ///\n /// [`bytes`]: ../../std/primitive.str.html#method.bytes\n+/// [`str`]: ../../std/primitive.str.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Bytes<'a>(Cloned<slice::Iter<'a, u8>>);\n@@ -1161,9 +1174,13 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n-/// Created with the method [`lines`].\n+/// An iterator over the lines of a string, as string slices.\n+///\n+/// This struct is created with the [`lines`] method on [`str`].\n+/// See its documentation for more.\n ///\n /// [`lines`]: ../../std/primitive.str.html#method.lines\n+/// [`str`]: ../../std/primitive.str.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Lines<'a>(Map<SplitTerminator<'a, char>, LinesAnyMap>);"}, {"sha": "770b67acd49efef51e16942aaaf36ce13e505b10", "filename": "src/libstd_unicode/u_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28/src%2Flibstd_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28/src%2Flibstd_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fu_str.rs?ref=c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "patch": "@@ -19,6 +19,12 @@ use core::str::Split;\n \n /// An iterator over the non-whitespace substrings of a string,\n /// separated by any amount of whitespace.\n+///\n+/// This struct is created by the [`split_whitespace`] method on [`str`].\n+/// See its documentation for more.\n+///\n+/// [`split_whitespace`]: ../../std/primitive.str.html#method.split_whitespace\n+/// [`str`]: ../../std/primitive.str.html\n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n pub struct SplitWhitespace<'a> {\n     inner: Filter<Split<'a, fn(char) -> bool>, fn(&&str) -> bool>,"}]}