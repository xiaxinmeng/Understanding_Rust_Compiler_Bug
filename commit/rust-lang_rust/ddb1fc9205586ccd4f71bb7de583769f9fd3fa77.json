{"sha": "ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYjFmYzkyMDU1ODZjY2Q0ZjcxYmI3ZGU1ODM3NjlmOWZkM2ZhNzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-02T10:50:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-02T10:50:21Z"}, "message": "store scalars where appropriate", "tree": {"sha": "a644085e768ee00a83cf193eaa383ee9c79d86de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a644085e768ee00a83cf193eaa383ee9c79d86de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "html_url": "https://github.com/rust-lang/rust/commit/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0b398cb6fbfe6b2c0c029fac08f64a7e96d322", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0b398cb6fbfe6b2c0c029fac08f64a7e96d322", "html_url": "https://github.com/rust-lang/rust/commit/1e0b398cb6fbfe6b2c0c029fac08f64a7e96d322"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "b87d735ce525d56ddcebfdf3a2c7177fb8a5bc09", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "patch": "@@ -105,7 +105,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     {\n         let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into());\n         ecx.write_scalar(argc, argc_place.into())?;\n-        ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n+        ecx.machine.argc = Some(argc_place.ptr);\n     }\n \n     // Third argument (`argv`): created from `config.args`.\n@@ -149,14 +149,14 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     {\n         let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into());\n         ecx.write_scalar(argv, argv_place.into())?;\n-        ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n+        ecx.machine.argv = Some(argv_place.ptr);\n     }\n     // Store command line as UTF-16 for Windows `GetCommandLineW`.\n     {\n         let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n         let cmd_type = tcx.mk_array(tcx.types.u16, cmd_utf16.len() as u64);\n         let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Env.into());\n-        ecx.machine.cmd_line = Some(cmd_place.ptr.to_ptr()?);\n+        ecx.machine.cmd_line = Some(cmd_place.ptr);\n         // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n         let char_size = Size::from_bytes(2);\n         for (idx, &c) in cmd_utf16.iter().enumerate() {"}, {"sha": "c76cc2e568f4f35465a014534b444c41344c8cad", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "patch": "@@ -86,9 +86,9 @@ pub struct Evaluator<'tcx> {\n     /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n     /// These are *pointers* to argc/argv because macOS.\n     /// We also need the full command line as one string because of Windows.\n-    pub(crate) argc: Option<Pointer<Tag>>,\n-    pub(crate) argv: Option<Pointer<Tag>>,\n-    pub(crate) cmd_line: Option<Pointer<Tag>>,\n+    pub(crate) argc: Option<Scalar<Tag>>,\n+    pub(crate) argv: Option<Scalar<Tag>>,\n+    pub(crate) cmd_line: Option<Scalar<Tag>>,\n \n     /// Last OS error location in memory. It is a 32-bit integer.\n     pub(crate) last_error: Option<MPlaceTy<'tcx, Tag>>,"}, {"sha": "74ce477b8e357e4ba75f6b5d55831ca55563df84", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "patch": "@@ -765,10 +765,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: register the destructor.\n             }\n             \"_NSGetArgc\" => {\n-                this.write_scalar(Scalar::Ptr(this.machine.argc.unwrap()), dest)?;\n+                this.write_scalar(this.machine.argc.expect(\"machine must be initialized\"), dest)?;\n             }\n             \"_NSGetArgv\" => {\n-                this.write_scalar(Scalar::Ptr(this.machine.argv.unwrap()), dest)?;\n+                this.write_scalar(this.machine.argv.expect(\"machine must be initialized\"), dest)?;\n             }\n             \"SecRandomCopyBytes\" => {\n                 let len = this.read_scalar(args[1])?.to_usize(this)?;\n@@ -927,7 +927,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"GetCommandLineW\" => {\n-                this.write_scalar(Scalar::Ptr(this.machine.cmd_line.unwrap()), dest)?;\n+                this.write_scalar(this.machine.cmd_line.expect(\"machine must be initialized\"), dest)?;\n             }\n             // The actual name of 'RtlGenRandom'\n             \"SystemFunction036\" => {"}]}