{"sha": "11429b2d1373c4a0c26ce681983cfa9aa925daaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDI5YjJkMTM3M2M0YTBjMjZjZTY4MTk4M2NmYTlhYTkyNWRhYWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-22T18:31:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-22T18:31:33Z"}, "message": "Rollup merge of #59321 - varkor:unify-E0109-E0110-E0111, r=davidtwco\n\nUnify E0109, E0110 and E0111\n\nError messages should no longer be restricted to specific generic kinds.", "tree": {"sha": "17fee21038e23c4da5fcfc7036d3bcfe43e655bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17fee21038e23c4da5fcfc7036d3bcfe43e655bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11429b2d1373c4a0c26ce681983cfa9aa925daaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJclSoFCRBK7hj4Ov3rIwAAdHIIAKq96eN/czS6F9ha0y4QEDDb\n93BPUqvLNhQ4t24EVfpTigG6jVsHG/sqa1rpLbmo3gY7334JVxD0AfJqUskH99g5\numgyUYF0z+rj7ATdsFXpHHOmXK/EZdbgHpEfJMnx8PULV4n9AdgZxaKlDtkhi6I5\nlz+FfuYe2c0qMBSTnYM2MA8P4dSUWb+hOpvhcCHjX0zHfQHrWz1lkiDf4c2ha567\nqtnwV3wbkU+I4rSdZgdLBJ8TCWh1ltgBDrML6z8+wVPbOmgopG6zlfVwsIDAfa7/\ndPo6SRZ0R8b6cvKPX1U5VSZZwsftg6JTzxHhSoEtRiHNMvkmCVuNQ/PYuwmrGIY=\n=Nmge\n-----END PGP SIGNATURE-----\n", "payload": "tree 17fee21038e23c4da5fcfc7036d3bcfe43e655bf\nparent f1f34707aeeca9c4a849f3753a9589d734f576e6\nparent aff175b328d8d35969e5a76aa0fff4d6c4a5d262\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553279493 +0100\ncommitter GitHub <noreply@github.com> 1553279493 +0100\n\nRollup merge of #59321 - varkor:unify-E0109-E0110-E0111, r=davidtwco\n\nUnify E0109, E0110 and E0111\n\nError messages should no longer be restricted to specific generic kinds.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11429b2d1373c4a0c26ce681983cfa9aa925daaf", "html_url": "https://github.com/rust-lang/rust/commit/11429b2d1373c4a0c26ce681983cfa9aa925daaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11429b2d1373c4a0c26ce681983cfa9aa925daaf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f34707aeeca9c4a849f3753a9589d734f576e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f34707aeeca9c4a849f3753a9589d734f576e6", "html_url": "https://github.com/rust-lang/rust/commit/f1f34707aeeca9c4a849f3753a9589d734f576e6"}, {"sha": "aff175b328d8d35969e5a76aa0fff4d6c4a5d262", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff175b328d8d35969e5a76aa0fff4d6c4a5d262", "html_url": "https://github.com/rust-lang/rust/commit/aff175b328d8d35969e5a76aa0fff4d6c4a5d262"}], "stats": {"total": 429, "additions": 206, "deletions": 223}, "files": [{"sha": "c65f3443fbb546b0bd9659bfcf40ba4c98ed466e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1486,37 +1486,34 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             segment.with_generic_args(|generic_args| {\n                 let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n                 for arg in &generic_args.args {\n-                    let (mut span_err, span, kind) = match arg {\n-                        // FIXME(varkor): unify E0109, E0110 and E0111.\n+                    let (span, kind) = match arg {\n                         hir::GenericArg::Lifetime(lt) => {\n                             if err_for_lt { continue }\n                             err_for_lt = true;\n                             has_err = true;\n-                            (struct_span_err!(self.tcx().sess, lt.span, E0110,\n-                                              \"lifetime arguments are not allowed on this entity\"),\n-                             lt.span,\n-                             \"lifetime\")\n+                            (lt.span, \"lifetime\")\n                         }\n                         hir::GenericArg::Type(ty) => {\n                             if err_for_ty { continue }\n                             err_for_ty = true;\n                             has_err = true;\n-                            (struct_span_err!(self.tcx().sess, ty.span, E0109,\n-                                              \"type arguments are not allowed on this entity\"),\n-                             ty.span,\n-                             \"type\")\n+                            (ty.span, \"type\")\n                         }\n                         hir::GenericArg::Const(ct) => {\n                             if err_for_ct { continue }\n                             err_for_ct = true;\n-                            (struct_span_err!(self.tcx().sess, ct.span, E0111,\n-                                              \"const parameters are not allowed on this type\"),\n-                             ct.span,\n-                             \"const\")\n+                            (ct.span, \"const\")\n                         }\n                     };\n-                    span_err.span_label(span, format!(\"{} argument not allowed\", kind))\n-                            .emit();\n+                    let mut err = struct_span_err!(\n+                        self.tcx().sess,\n+                        span,\n+                        E0109,\n+                        \"{} arguments are not allowed for this type\",\n+                        kind,\n+                    );\n+                    err.span_label(span, format!(\"{} argument not allowed\", kind));\n+                    err.emit();\n                     if err_for_lt && err_for_ty && err_for_ct {\n                         break;\n                     }"}, {"sha": "cde37fb23c320c54666e7979b1ad2e935e020324", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1290,45 +1290,34 @@ fn main() {\n \"##,\n \n E0109: r##\"\n-You tried to give a type parameter to a type which doesn't need it. Erroneous\n-code example:\n+You tried to provide a generic argument to a type which doesn't need it.\n+Erroneous code example:\n \n ```compile_fail,E0109\n-type X = u32<i32>; // error: type arguments are not allowed on this entity\n+type X = u32<i32>; // error: type arguments are not allowed for this type\n+type Y = bool<'static>; // error: lifetime parameters are not allowed on\n+                        //        this type\n ```\n \n-Please check that you used the correct type and recheck its definition. Perhaps\n-it doesn't need the type parameter.\n+Check that you used the correct argument and that the definition is correct.\n \n Example:\n \n ```\n-type X = u32; // this compiles\n+type X = u32; // ok!\n+type Y = bool; // ok!\n ```\n \n-Note that type parameters for enum-variant constructors go after the variant,\n-not after the enum (`Option::None::<u32>`, not `Option::<u32>::None`).\n+Note that generic arguments for enum variant constructors go after the variant,\n+not after the enum. For example, you would write `Option::None::<u32>`,\n+rather than `Option::<u32>::None`.\n \"##,\n \n E0110: r##\"\n-You tried to give a lifetime parameter to a type which doesn't need it.\n-Erroneous code example:\n-\n-```compile_fail,E0110\n-type X = u32<'static>; // error: lifetime parameters are not allowed on\n-                       //        this type\n-```\n-\n-Please check that the correct type was used and recheck its definition; perhaps\n-it doesn't need the lifetime parameter. Example:\n-\n-```\n-type X = u32; // ok!\n-```\n-\"##,\n+#### Note: this error code is no longer emitted by the compiler.\n \n-E0111: r##\"\n-You tried to give a const parameter to a type which doesn't need it.\n+You tried to provide a lifetime to a type which doesn't need it.\n+See `E0109` for more details.\n \"##,\n \n E0116: r##\""}, {"sha": "dd1f5f334df1d0ee5b778241b81a61e6119437f3", "filename": "src/test/ui/enum-variant-generic-args.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -9,27 +9,27 @@ impl<T> Enum<T> {\n         Self::TSVariant(());\n         //~^ ERROR mismatched types [E0308]\n         Self::TSVariant::<()>(());\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n         Self::<()>::TSVariant(());\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^ ERROR mismatched types [E0308]\n         Self::<()>::TSVariant::<()>(());\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n-        //~^^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^^ ERROR type arguments are not allowed for this type [E0109]\n     }\n \n     fn s_variant() {\n         Self::SVariant { v: () };\n         //~^ ERROR mismatched types [E0308]\n         Self::SVariant::<()> { v: () };\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^ ERROR mismatched types [E0308]\n         Self::<()>::SVariant { v: () };\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^ ERROR mismatched types [E0308]\n         Self::<()>::SVariant::<()> { v: () };\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n-        //~^^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^^ ERROR mismatched types [E0308]\n     }\n }\n@@ -38,36 +38,36 @@ fn main() {\n     // Tuple struct variant\n \n     Enum::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     Alias::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     Alias::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     AliasFixed::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::TSVariant(());\n     //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n     AliasFixed::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n \n     // Struct variant\n \n     Enum::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     Alias::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     Alias::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     AliasFixed::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::SVariant { v: () };\n     //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n     AliasFixed::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n }"}, {"sha": "09b9a4eed6be88a0f40bf6d18cb6207de6f90897", "filename": "src/test/ui/enum-variant-generic-args.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -7,13 +7,13 @@ LL |         Self::TSVariant(());\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:11:27\n    |\n LL |         Self::TSVariant::<()>(());\n    |                           ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:13:16\n    |\n LL |         Self::<()>::TSVariant(());\n@@ -28,13 +28,13 @@ LL |         Self::<()>::TSVariant(());\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:16:16\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n    |                ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:16:33\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n@@ -49,7 +49,7 @@ LL |         Self::SVariant { v: () };\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:24:26\n    |\n LL |         Self::SVariant::<()> { v: () };\n@@ -64,7 +64,7 @@ LL |         Self::SVariant::<()> { v: () };\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:27:16\n    |\n LL |         Self::<()>::SVariant { v: () };\n@@ -79,13 +79,13 @@ LL |         Self::<()>::SVariant { v: () };\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:30:16\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:30:32\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n@@ -100,25 +100,25 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:40:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n    |                             ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:43:24\n    |\n LL |     Alias::TSVariant::<()>(());\n    |                        ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:45:30\n    |\n LL |     Alias::<()>::TSVariant::<()>(());\n    |                              ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:48:29\n    |\n LL |     AliasFixed::TSVariant::<()>(());\n@@ -136,31 +136,31 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                  ^^ unexpected type argument\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:52:35\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                                   ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:58:28\n    |\n LL |     Enum::<()>::SVariant::<()> { v: () };\n    |                            ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:61:23\n    |\n LL |     Alias::SVariant::<()> { v: () };\n    |                       ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:63:29\n    |\n LL |     Alias::<()>::SVariant::<()> { v: () };\n    |                             ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:66:28\n    |\n LL |     AliasFixed::SVariant::<()> { v: () };\n@@ -178,7 +178,7 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |                  ^^ unexpected type argument\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:70:34\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };"}, {"sha": "577e286fcc6cefec77937fe163e54353331b121a", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/E0109.rs:1:14\n    |\n LL | type X = u32<i32>;"}, {"sha": "314c7f5af6036514746313faacb65c07d03807d5", "filename": "src/test/ui/error-codes/E0110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,3 +1,3 @@\n-type X = u32<'static>; //~ ERROR E0110\n+type X = u32<'static>; //~ ERROR E0109\n \n fn main() {}"}, {"sha": "b0221318087384aa7d9f856489f6dc93fc6a3274", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,9 +1,9 @@\n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/E0110.rs:1:14\n    |\n LL | type X = u32<'static>;\n    |              ^^^^^^^ lifetime argument not allowed\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0110`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "28e8a722804813c00159db59a68ef5fe4ab9bb4b", "filename": "src/test/ui/issues/issue-22706.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,3 +1,3 @@\n fn is_copy<T: ::std::marker<i32>::Copy>() {}\n-//~^ ERROR type arguments are not allowed on this entity [E0109]\n+//~^ ERROR type arguments are not allowed for this type [E0109]\n fn main() {}"}, {"sha": "c5929397f6501e57e300e65c5ce64aa914941289", "filename": "src/test/ui/issues/issue-22706.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/issue-22706.rs:1:29\n    |\n LL | fn is_copy<T: ::std::marker<i32>::Copy>() {}"}, {"sha": "cd4459ae0ff425525bfc8e8697613ba05573fef3", "filename": "src/test/ui/mod-subitem-as-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -6,5 +6,5 @@ mod Mod {\n fn main() {\n     Mod::FakeVariant::<i32>(0);\n     Mod::<i32>::FakeVariant(0);\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n }"}, {"sha": "72eca588208bb1f68ce3b4b8129319449f2e48c8", "filename": "src/test/ui/mod-subitem-as-enum-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/mod-subitem-as-enum-variant.rs:8:11\n    |\n LL |     Mod::<i32>::FakeVariant(0);"}, {"sha": "e5beaca6abb8c8b54a15da99754d2fb71948709f", "filename": "src/test/ui/prim-with-args.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprim-with-args.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,27 +1,27 @@\n fn main() {\n \n-let x: isize<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: i8<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: i16<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: i32<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: i64<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: usize<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: u8<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: u16<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: u32<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: u64<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: char<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: isize<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: i8<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: i16<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: i32<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: i64<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: usize<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: u8<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: u16<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: u32<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: u64<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: char<isize>; //~ ERROR type arguments are not allowed for this type\n \n-let x: isize<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: i8<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: i16<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: i32<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: i64<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: usize<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: u8<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: u16<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: u32<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: u64<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: char<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: isize<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: i8<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: i16<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: i32<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: i64<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: usize<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: u8<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: u16<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: u32<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: u64<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: char<'static>; //~ ERROR lifetime arguments are not allowed for this type\n \n }"}, {"sha": "4bde981e7f2d4fe0c6b20700efd364c913790ddd", "filename": "src/test/ui/prim-with-args.stderr", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprim-with-args.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,136 +1,135 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:3:14\n    |\n LL | let x: isize<isize>;\n    |              ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:4:11\n    |\n LL | let x: i8<isize>;\n    |           ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:5:12\n    |\n LL | let x: i16<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:6:12\n    |\n LL | let x: i32<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:7:12\n    |\n LL | let x: i64<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:8:14\n    |\n LL | let x: usize<isize>;\n    |              ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:9:11\n    |\n LL | let x: u8<isize>;\n    |           ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:10:12\n    |\n LL | let x: u16<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:11:12\n    |\n LL | let x: u32<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:12:12\n    |\n LL | let x: u64<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:13:13\n    |\n LL | let x: char<isize>;\n    |             ^^^^^ type argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:15:14\n    |\n LL | let x: isize<'static>;\n    |              ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:16:11\n    |\n LL | let x: i8<'static>;\n    |           ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:17:12\n    |\n LL | let x: i16<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:18:12\n    |\n LL | let x: i32<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:19:12\n    |\n LL | let x: i64<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:20:14\n    |\n LL | let x: usize<'static>;\n    |              ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:21:11\n    |\n LL | let x: u8<'static>;\n    |           ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:22:12\n    |\n LL | let x: u16<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:23:12\n    |\n LL | let x: u32<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:24:12\n    |\n LL | let x: u64<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:25:13\n    |\n LL | let x: char<'static>;\n    |             ^^^^^^^ lifetime argument not allowed\n \n error: aborting due to 22 previous errors\n \n-Some errors occurred: E0109, E0110.\n-For more information about an error, try `rustc --explain E0109`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "ebdd749046239ab89ecc6e7787097088a69d36cc", "filename": "src/test/ui/qualified/qualified-path-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -16,7 +16,7 @@ impl S {\n }\n \n type A = <S as Tr>::A::f<u8>;\n-//~^ ERROR type arguments are not allowed on this entity\n+//~^ ERROR type arguments are not allowed for this type\n //~| ERROR ambiguous associated type\n \n fn main() {}"}, {"sha": "2d14d6c5aa8988c42240adf852ba029ebd6247cc", "filename": "src/test/ui/qualified/qualified-path-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/qualified-path-params-2.rs:18:26\n    |\n LL | type A = <S as Tr>::A::f<u8>;"}, {"sha": "ede6a3b2b3938cc4c27120ec70c486cd9589dd31", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -2,7 +2,7 @@\n //~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n // A Collection trait and collection families. Based on\n@@ -15,14 +15,14 @@ trait Collection<T> {\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> =\n         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     fn empty() -> Self;\n \n     fn add(&mut self, value: T);\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n trait CollectionFamily {\n@@ -48,13 +48,13 @@ impl<T> Collection<T> for Vec<T> {\n     }\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         self.iter()\n     }\n }\n \n fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n-//~^ ERROR type arguments are not allowed on this entity [E0109]\n+//~^ ERROR type arguments are not allowed for this type [E0109]\n where\n     C: Collection<i32>,\n {\n@@ -66,7 +66,7 @@ where\n }\n \n fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-//~^ ERROR type arguments are not allowed on this entity [E0109]\n+//~^ ERROR type arguments are not allowed for this type [E0109]\n where\n     C: Collection<i32>,\n {"}, {"sha": "d0fe5035bca461c07346070053dd57b005a272ba", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -4,37 +4,36 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/collections.rs:56:90\n    |\n LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n    |                                                                                          ^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/collections.rs:68:69\n    |\n LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n    |                                                                     ^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/collections.rs:17:71\n    |\n LL |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n    |                                                                       ^ type argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/collections.rs:24:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n    |                                                  ^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/collections.rs:50:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n    |                                                  ^^^^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0109, E0110.\n-For more information about an error, try `rustc --explain E0109`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "3a459a4551c8df815153c716b3a2d1dfd429e97f", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -3,7 +3,7 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n trait Foo {\n@@ -15,15 +15,15 @@ trait Baz {\n \n     // This weird type tests that we can use universal function call syntax to access the Item on\n     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n impl<T> Baz for T where T: Foo {\n     type Quux<'a> = T;\n \n     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n fn main() {}"}, {"sha": "b2dd523c8f59773dc5c5edc72292d22722921711", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -4,24 +4,24 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/construct_with_other_type.rs:17:46\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n    |                                              ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/construct_with_other_type.rs:17:63\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n    |                                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/construct_with_other_type.rs:25:40\n    |\n LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n    |                                        ^^ lifetime argument not allowed\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0110`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "150899a034b86c4d440d9726e057a0a03f9080e2", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -3,20 +3,20 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n trait Iterable {\n     type Item<'a>;\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         + Deref<Target = Self::Item<'b>>;\n     //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n \n     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n     //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n fn main() {}"}, {"sha": "d65edc6f7e2473c6fddec8ea8217140a4297bc0e", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -16,25 +16,25 @@ error[E0261]: use of undeclared lifetime name `'undeclared`\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n    |                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:13:37\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:17:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0110, E0261.\n-For more information about an error, try `rustc --explain E0110`.\n+Some errors occurred: E0109, E0261.\n+For more information about an error, try `rustc --explain E0109`."}, {"sha": "29953b9db1a3130d02a1141f1fe25d7e8324932d", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -3,16 +3,16 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n trait Iterable {\n     type Item<'a>;\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n // Impl for struct type\n@@ -21,7 +21,7 @@ impl<T> Iterable for Vec<T> {\n     type Iter<'a> = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         self.iter()\n     }\n }\n@@ -32,18 +32,18 @@ impl<T> Iterable for [T] {\n     type Iter<'a> = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         self.iter()\n     }\n }\n \n fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n     it.iter()\n }\n \n fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n     it.iter().next()\n }\n "}, {"sha": "6d5d0cc382840755048b83fc56463f1b6b057ea2", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -4,42 +4,42 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:11:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n    |                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:40:53\n    |\n LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n    |                                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:45:60\n    |\n LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n    |                                                            ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:14:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n    |                                         ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:23:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                                         ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:34:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                                         ^^ lifetime argument not allowed\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0110`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "aa3f4b186da83d998a8babba6b497a5fe74b2bcb", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -2,7 +2,7 @@\n //~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n // FIXME(#44265): Update expected errors once E110 is resolved, now does not get past `trait Foo`.\n@@ -15,13 +15,13 @@ trait Foo {\n     type E<'a, T>;\n     // Test parameters in default values\n     type FOk<T> = Self::E<'static, T>;\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n     type FErr1 = Self::E<'static, 'static>; // Error\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n struct Fooy;"}, {"sha": "817d911184d0a4bc982f6caf3cfbdb1e0d5b6c63", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -4,37 +4,36 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:17:27\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n    |                           ^^^^^^^ lifetime argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:17:36\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n    |                                    ^ type argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:20:26\n    |\n LL |     type FErr1 = Self::E<'static, 'static>; // Error\n    |                          ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:22:29\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n    |                             ^^^^^^^ lifetime argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:22:38\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n    |                                      ^ type argument not allowed\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0109, E0110.\n-For more information about an error, try `rustc --explain E0109`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "edeeaba756549bd23ec739e60bb86a36161fd55b", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -10,15 +10,15 @@ use std::ops::Deref;\n trait PointerFamily {\n     type Pointer<T>: Deref<Target = T>;\n     fn new<T>(value: T) -> Self::Pointer<T>;\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n }\n \n struct ArcFamily;\n \n impl PointerFamily for ArcFamily {\n     type Pointer<T> = Arc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n         Arc::new(value)\n     }\n }\n@@ -28,14 +28,14 @@ struct RcFamily;\n impl PointerFamily for RcFamily {\n     type Pointer<T> = Rc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n         Rc::new(value)\n     }\n }\n \n struct Foo<P: PointerFamily> {\n     bar: P::Pointer<String>,\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n }\n \n fn main() {}"}, {"sha": "0966f8f9422aa4f8acbe42fbe16cbc57f7250d16", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -4,25 +4,25 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:37:21\n    |\n LL |     bar: P::Pointer<String>,\n    |                     ^^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:12:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T>;\n    |                                          ^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:20:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n    |                                          ^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:30:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T> {"}, {"sha": "4e177fb41d732bd057892a7dae90e83f1b450300", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -10,21 +10,21 @@ trait StreamingIterator {\n     type Item<'a>;\n     // Applying the lifetime parameter `'a` to `Self::Item` inside the trait.\n     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n struct Foo<T: StreamingIterator> {\n     // Applying a concrete lifetime to the constructor outside the trait.\n     bar: <T as StreamingIterator>::Item<'static>,\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n // Users can bound parameters by the type constructed by that trait's associated type constructor\n // of a trait using HRTB. Both type equality bounds and trait bounds of this kind are valid:\n //FIXME(sunjay): This next line should parse and be valid\n //fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(iter: T) { /* ... */ }\n fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-//~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+//~^ ERROR lifetime arguments are not allowed for this type [E0109]\n \n // Full example of enumerate iterator\n \n@@ -36,9 +36,9 @@ struct StreamEnumerate<I> {\n \n impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n     type Item<'a> = (usize, I::Item<'a>);\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-        //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+        //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         match self.iter.next() {\n             None => None,\n             Some(val) => {"}, {"sha": "5fc1e3dddbe7413ea6d3e5658d6fc0a276571c30", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -4,36 +4,36 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:18:41\n    |\n LL |     bar: <T as StreamingIterator>::Item<'static>,\n    |                                         ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:26:64\n    |\n LL | fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n    |                                                                ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:12:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n    |                                                ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:38:37\n    |\n LL |     type Item<'a> = (usize, I::Item<'a>);\n    |                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:40:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n    |                                                ^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0110`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "15b37facc502df85561ca6c4f4bda4ef5c117b0b", "filename": "src/test/ui/structs/struct-path-associated-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -13,7 +13,7 @@ fn f<T: Tr>() {\n     //~^ ERROR expected struct, variant or union type, found associated type\n     let z = T::A::<u8> {};\n     //~^ ERROR expected struct, variant or union type, found associated type\n-    //~| ERROR type arguments are not allowed on this entity\n+    //~| ERROR type arguments are not allowed for this type\n     match S {\n         T::A {} => {}\n         //~^ ERROR expected struct, variant or union type, found associated type\n@@ -22,7 +22,7 @@ fn f<T: Tr>() {\n \n fn g<T: Tr<A = S>>() {\n     let s = T::A {}; // OK\n-    let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+    let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed for this type\n     match S {\n         T::A {} => {} // OK\n     }\n@@ -31,7 +31,7 @@ fn g<T: Tr<A = S>>() {\n fn main() {\n     let s = S::A {}; //~ ERROR ambiguous associated type\n     let z = S::A::<u8> {}; //~ ERROR ambiguous associated type\n-    //~^ ERROR type arguments are not allowed on this entity\n+    //~^ ERROR type arguments are not allowed for this type\n     match S {\n         S::A {} => {} //~ ERROR ambiguous associated type\n     }"}, {"sha": "f054bd3d297761e1c3cf8f3eb4aa731584d48e76", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -4,7 +4,7 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |     let s = T::A {};\n    |             ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-associated-type.rs:14:20\n    |\n LL |     let z = T::A::<u8> {};\n@@ -22,7 +22,7 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |         T::A {} => {}\n    |         ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-associated-type.rs:25:20\n    |\n LL |     let z = T::A::<u8> {};\n@@ -34,7 +34,7 @@ error[E0223]: ambiguous associated type\n LL |     let s = S::A {};\n    |             ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-associated-type.rs:33:20\n    |\n LL |     let z = S::A::<u8> {};"}, {"sha": "77880bfca4074650b5d53951dda363ee564adc59", "filename": "src/test/ui/structs/struct-path-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -6,7 +6,7 @@ trait Tr {\n         //~^ ERROR expected struct, variant or union type, found Self\n         let z = Self::<u8> {};\n         //~^ ERROR expected struct, variant or union type, found Self\n-        //~| ERROR type arguments are not allowed on this entity\n+        //~| ERROR type arguments are not allowed for this type\n         match s {\n             Self { .. } => {}\n             //~^ ERROR expected struct, variant or union type, found Self\n@@ -17,7 +17,7 @@ trait Tr {\n impl Tr for S {\n     fn f() {\n         let s = Self {}; // OK\n-        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed for this type\n         match s {\n             Self { .. } => {} // OK\n         }\n@@ -27,7 +27,7 @@ impl Tr for S {\n impl S {\n     fn g() {\n         let s = Self {}; // OK\n-        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed for this type\n         match s {\n             Self { .. } => {} // OK\n         }"}, {"sha": "d9e84acdb3cdae036d0d2e1df7623fdf989cfef9", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -4,7 +4,7 @@ error[E0071]: expected struct, variant or union type, found Self\n LL |         let s = Self {};\n    |                 ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-self.rs:7:24\n    |\n LL |         let z = Self::<u8> {};\n@@ -22,13 +22,13 @@ error[E0071]: expected struct, variant or union type, found Self\n LL |             Self { .. } => {}\n    |             ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-self.rs:20:24\n    |\n LL |         let z = Self::<u8> {};\n    |                        ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-self.rs:30:24\n    |\n LL |         let z = Self::<u8> {};"}, {"sha": "c5974e55692232da734abd7244782a89eb7538a6", "filename": "src/test/ui/type-alias-enum-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let _ = Option::None::<u8>; // OK (Lint in future!)\n     let _ = Alias::<u8>::None; // OK\n     let _ = Alias::None::<u8>; // Error\n-    //~^ type arguments are not allowed on this entity\n+    //~^ type arguments are not allowed for this type\n }"}, {"sha": "55f250fa7ee5233ea68603fb53df92e060a0bb27", "filename": "src/test/ui/type-alias-enum-variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11429b2d1373c4a0c26ce681983cfa9aa925daaf/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr?ref=11429b2d1373c4a0c26ce681983cfa9aa925daaf", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/type-alias-enum-variants.rs:9:27\n    |\n LL |     let _ = Alias::None::<u8>; // Error"}]}