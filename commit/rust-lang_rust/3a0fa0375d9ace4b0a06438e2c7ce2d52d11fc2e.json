{"sha": "3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e", "node_id": "C_kwDOAAsO6NoAKDNhMGZhMDM3NWQ5YWNlNGIwYTA2NDM4ZTJjN2NlMmQ1MmQxMWZjMmU", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-12-07T01:44:02Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-12-16T15:31:46Z"}, "message": "Fix SB problems in slice sorting\n\nMost of these problems originate in use of get_unchecked_mut.\n\nWhen calling ptr::copy_nonoverlapping, using get_unchecked_mut for both\narguments causes the borrow created to make the second pointer to invalid the\nfirst.\n\nThe pairs of identical MaybeUninit::slice_as_mut_ptr calls similarly\ninvalidate each other.\n\nThere was also a similar borrow invalidation problem with the use of\nslice::get_unchecked_mut to derive the pointer for the CopyOnDrop.", "tree": {"sha": "9c28d2626d50714f621ff1f16373d8d8949423d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c28d2626d50714f621ff1f16373d8d8949423d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e", "html_url": "https://github.com/rust-lang/rust/commit/3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8402169aaa12e7bbb9630796a8caec90a3055ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8402169aaa12e7bbb9630796a8caec90a3055ca", "html_url": "https://github.com/rust-lang/rust/commit/f8402169aaa12e7bbb9630796a8caec90a3055ca"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "b5e6083c663518e43eac88ec9c81fd5a9877a0a3", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=3a0fa0375d9ace4b0a06438e2c7ce2d52d11fc2e", "patch": "@@ -33,8 +33,8 @@ where\n     F: FnMut(&T, &T) -> bool,\n {\n     let len = v.len();\n-    // SAFETY: The unsafe operations below involves indexing without a bound check (`get_unchecked` and `get_unchecked_mut`)\n-    // and copying memory (`ptr::copy_nonoverlapping`).\n+    // SAFETY: The unsafe operations below involves indexing without a bounds check (by offsetting a\n+    // pointer) and copying memory (`ptr::copy_nonoverlapping`).\n     //\n     // a. Indexing:\n     //  1. We checked the size of the array to >=2.\n@@ -55,17 +55,18 @@ where\n             // operation panics, `hole` will get dropped and automatically write the element back\n             // into the slice.\n             let mut tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(0)));\n-            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.get_unchecked_mut(1) };\n-            ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);\n+            let v = v.as_mut_ptr();\n+            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.add(1) };\n+            ptr::copy_nonoverlapping(v.add(1), v.add(0), 1);\n \n             for i in 2..len {\n-                if !is_less(v.get_unchecked(i), &*tmp) {\n+                if !is_less(&*v.add(i), &*tmp) {\n                     break;\n                 }\n \n                 // Move `i`-th element one place to the left, thus shifting the hole to the right.\n-                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i - 1), 1);\n-                hole.dest = v.get_unchecked_mut(i);\n+                ptr::copy_nonoverlapping(v.add(i), v.add(i - 1), 1);\n+                hole.dest = v.add(i);\n             }\n             // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.\n         }\n@@ -78,8 +79,8 @@ where\n     F: FnMut(&T, &T) -> bool,\n {\n     let len = v.len();\n-    // SAFETY: The unsafe operations below involves indexing without a bound check (`get_unchecked` and `get_unchecked_mut`)\n-    // and copying memory (`ptr::copy_nonoverlapping`).\n+    // SAFETY: The unsafe operations below involves indexing without a bound check (by offsetting a\n+    // pointer) and copying memory (`ptr::copy_nonoverlapping`).\n     //\n     // a. Indexing:\n     //  1. We checked the size of the array to >= 2.\n@@ -100,17 +101,18 @@ where\n             // operation panics, `hole` will get dropped and automatically write the element back\n             // into the slice.\n             let mut tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(len - 1)));\n-            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.get_unchecked_mut(len - 2) };\n-            ptr::copy_nonoverlapping(v.get_unchecked(len - 2), v.get_unchecked_mut(len - 1), 1);\n+            let v = v.as_mut_ptr();\n+            let mut hole = CopyOnDrop { src: &mut *tmp, dest: v.add(len - 2) };\n+            ptr::copy_nonoverlapping(v.add(len - 2), v.add(len - 1), 1);\n \n             for i in (0..len - 2).rev() {\n-                if !is_less(&*tmp, v.get_unchecked(i)) {\n+                if !is_less(&*tmp, &*v.add(i)) {\n                     break;\n                 }\n \n                 // Move `i`-th element one place to the right, thus shifting the hole to the left.\n-                ptr::copy_nonoverlapping(v.get_unchecked(i), v.get_unchecked_mut(i + 1), 1);\n-                hole.dest = v.get_unchecked_mut(i);\n+                ptr::copy_nonoverlapping(v.add(i), v.add(i + 1), 1);\n+                hole.dest = v.add(i);\n             }\n             // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.\n         }\n@@ -302,7 +304,7 @@ where\n         if start_l == end_l {\n             // Trace `block_l` elements from the left side.\n             start_l = MaybeUninit::slice_as_mut_ptr(&mut offsets_l);\n-            end_l = MaybeUninit::slice_as_mut_ptr(&mut offsets_l);\n+            end_l = start_l;\n             let mut elem = l;\n \n             for i in 0..block_l {\n@@ -328,7 +330,7 @@ where\n         if start_r == end_r {\n             // Trace `block_r` elements from the right side.\n             start_r = MaybeUninit::slice_as_mut_ptr(&mut offsets_r);\n-            end_r = MaybeUninit::slice_as_mut_ptr(&mut offsets_r);\n+            end_r = start_r;\n             let mut elem = r;\n \n             for i in 0..block_r {\n@@ -579,7 +581,8 @@ where\n \n             // Swap the found pair of out-of-order elements.\n             r -= 1;\n-            ptr::swap(v.get_unchecked_mut(l), v.get_unchecked_mut(r));\n+            let ptr = v.as_mut_ptr();\n+            ptr::swap(ptr.add(l), ptr.add(r));\n             l += 1;\n         }\n     }"}]}