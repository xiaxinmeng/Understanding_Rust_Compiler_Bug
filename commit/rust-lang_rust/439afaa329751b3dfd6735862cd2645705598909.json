{"sha": "439afaa329751b3dfd6735862cd2645705598909", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOWFmYWEzMjk3NTFiM2RmZDY3MzU4NjJjZDI2NDU3MDU1OTg5MDk=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-31T17:27:51Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-31T18:52:16Z"}, "message": "Change remaining \"iface\" occurrences to \"trait\"; deprecate \"iface\"", "tree": {"sha": "4a3c51b47d6ee3c2e057677efdcf29c60e0d9d95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a3c51b47d6ee3c2e057677efdcf29c60e0d9d95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439afaa329751b3dfd6735862cd2645705598909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439afaa329751b3dfd6735862cd2645705598909", "html_url": "https://github.com/rust-lang/rust/commit/439afaa329751b3dfd6735862cd2645705598909", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439afaa329751b3dfd6735862cd2645705598909/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f49c46ae0b07aae8ae558d5a5e71ed85aeff23", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f49c46ae0b07aae8ae558d5a5e71ed85aeff23", "html_url": "https://github.com/rust-lang/rust/commit/c2f49c46ae0b07aae8ae558d5a5e71ed85aeff23"}], "stats": {"total": 382, "additions": 194, "deletions": 188}, "files": [{"sha": "dbb4ecdbaef13539031c3a2a76553cdd27621d1a", "filename": "src/fuzzer/cycles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ffuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ffuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fcycles.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -36,7 +36,7 @@ type pointy = {\n     mut n : ~[mut maybe_pointy],\n     mut o : {x : int, y : maybe_pointy}\n };\n-// To add: objects; ifaces; anything type-parameterized?\n+// To add: objects; traits; anything type-parameterized?\n \n fn empty_pointy() -> @pointy {\n     ret @{"}, {"sha": "d2efba51131b050286c94299e2e38c9418c178e7", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -525,7 +525,7 @@ fn test_to_str_inf() {\n }\n \n #[test]\n-fn test_ifaces() {\n+fn test_traits() {\n     fn test<U:num::num>(ten: U) {\n         assert (ten.to_int() == 10);\n "}, {"sha": "7dfafd499a4b147d917c4aa81c09e3c403ee1cd2", "filename": "src/libcore/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -158,7 +158,7 @@ fn test_from_fn() {\n }\n \n #[test]\n-fn test_iface_get() {\n+fn test_interface_get() {\n     let f = from_value(~\"fail\");\n     assert f.get() == ~\"fail\";\n }\n@@ -170,7 +170,7 @@ fn test_with() {\n }\n \n #[test]\n-fn test_iface_with() {\n+fn test_interface_with() {\n     let f = from_value(~\"kale\");\n     assert f.with(|v| v) == ~\"kale\";\n }"}, {"sha": "71b5660c672c9266afaf9cad205f7fe95987a3fd", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -79,7 +79,7 @@ pure fn hash_bytes_keyed(buf: &[const u8], k0: u64, k1: u64) -> u64 {\n }\n \n \n-iface streaming {\n+trait streaming {\n     fn input(~[u8]);\n     fn input_str(~str);\n     fn result() -> ~[u8];"}, {"sha": "b58e00d2e9c61d8bff67badb295914377c80000b", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -230,7 +230,7 @@ fn test_to_str() {\n }\n \n #[test]\n-fn test_ifaces() {\n+fn test_interfaces() {\n     fn test<U:num::num>(ten: U) {\n         assert (ten.to_int() == 10);\n "}, {"sha": "510be3f89b9e1c6b05c87a3f1bc1a62e63537f6b", "filename": "src/libcore/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -27,8 +27,8 @@ extern mod rustrt {\n enum seek_style { seek_set, seek_end, seek_cur, }\n \n \n-// The raw underlying reader iface. All readers must implement this.\n-iface reader {\n+// The raw underlying reader trait. All readers must implement this.\n+trait reader {\n     // FIXME (#2004): Seekable really should be orthogonal.\n \n     // FIXME (#2982): This should probably return an error.\n@@ -250,7 +250,7 @@ fn FILE_reader(f: *libc::FILE, cleanup: bool) -> reader {\n     }\n }\n \n-// FIXME (#2004): this should either be an iface-less impl, a set of\n+// FIXME (#2004): this should either be an trait-less impl, a set of\n // top-level functions that take a reader, or a set of default methods on\n // reader (which can then be called reader)\n \n@@ -335,7 +335,7 @@ enum writer_type { screen, file }\n \n // FIXME (#2004): Seekable really should be orthogonal.\n // FIXME (#2004): eventually u64\n-iface writer {\n+trait writer {\n     fn write(v: &[const u8]);\n     fn seek(int, seek_style);\n     fn tell() -> uint;\n@@ -781,7 +781,7 @@ mod fsync {\n     }\n \n     // Type of objects that may want to fsync\n-    iface t { fn fsync(l: level) -> int; }\n+    trait t { fn fsync(l: level) -> int; }\n \n     // Call o.fsync after executing blk\n     fn obj_sync(&&o: t, opt_level: option<level>, blk: fn(&&res<t>)) {"}, {"sha": "092f69cd47ad5cf4bc0235749b61de2821ab6b70", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface base_iter<A> {\n+trait base_iter<A> {\n     fn each(blk: fn(A) -> bool);\n     fn size_hint() -> option<uint>;\n }\n@@ -13,10 +13,10 @@ trait extended_iter<A> {\n     fn position(f: fn(A) -> bool) -> option<uint>;\n }\n \n-iface times {\n+trait times {\n     fn times(it: fn() -> bool);\n }\n-iface timesi{\n+trait timesi{\n     fn timesi(it: fn(uint) -> bool);\n }\n "}, {"sha": "e8a36f38842f4f3ff5f79059e5b20cb1c22db48f", "filename": "src/libcore/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -2,7 +2,7 @@\n \n trait num {\n     // FIXME: Cross-crate overloading doesn't work yet. (#2615)\n-    // FIXME: Interface inheritance. (#2616)\n+    // FIXME: Trait composition. (#2616)\n     pure fn add(&&other: self) -> self;\n     pure fn sub(&&other: self) -> self;\n     pure fn mul(&&other: self) -> self;\n@@ -12,6 +12,6 @@ trait num {\n \n     pure fn to_int() -> int;\n     pure fn from_int(n: int) -> self;    // FIXME (#2376) Static functions.\n-    // n.b. #2376 is for classes, not ifaces, but it could be generalized...\n+    // n.b. #2376 is for classes, not traits, but it could be generalized...\n }\n "}, {"sha": "cda205a98b54200bc1e27834795deee11d57a48f", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -15,7 +15,7 @@ extern mod rustrt {\n }\n \n /// A random number generator\n-iface rng {\n+trait rng {\n     /// Return the next random integer\n     fn next() -> u32;\n }"}, {"sha": "09dbf2c37c3d0f75f4672bfb06e8f4a867c7a854", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -19,7 +19,7 @@ extern mod rustrt {\n }\n \n /// A value representing a child process\n-iface program {\n+trait program {\n     /// Returns the process id of the program\n     fn get_id() -> pid_t;\n "}, {"sha": "6b356819340bb3d221953830b37163d80da2e1be", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -955,7 +955,7 @@ fn spawn_raw(opts: task_opts, +f: fn~()) {\n  */\n type local_data_key<T: owned> = fn@(+@T);\n \n-iface local_data { }\n+trait local_data { }\n impl<T: owned> of local_data for @T { }\n \n // We use dvec because it's the best data structure in core. If TLS is used"}, {"sha": "3e463653a43c8bef062a7bdf04d09dccb75bc2d5", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface to_bytes {\n+trait to_bytes {\n     fn to_bytes() -> ~[u8];\n }\n "}, {"sha": "76b0694d3d80da0d223a7519803f68e300a54745", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface to_str { fn to_str() -> ~str; }\n+trait to_str { fn to_str() -> ~str; }\n \n impl of to_str for int {\n     fn to_str() -> ~str { int::str(self) }"}, {"sha": "7a8946d02a6992103ef060a63b454f9dff830d31", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n import io::{reader, reader_util};\n \n-iface to_base64 {\n+trait to_base64 {\n     fn to_base64() -> ~str;\n }\n \n@@ -58,7 +58,7 @@ impl of to_base64 for ~str {\n     }\n }\n \n-iface from_base64 {\n+trait from_base64 {\n     fn from_base64() -> ~[u8];\n }\n "}, {"sha": "408a8ca20c2d6ffc2b8adf1650a1a8f70b83496f", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -3,7 +3,7 @@\n import option::{some, none};\n import dvec::{dvec, extensions};\n \n-iface t<T> {\n+trait t<T> {\n     fn size() -> uint;\n     fn add_front(T);\n     fn add_back(T);"}, {"sha": "6a08bb5d9e124f132c586423636affadd87f0768", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -510,7 +510,7 @@ fn eq(value0: json, value1: json) -> bool {\n     }\n }\n \n-iface to_json { fn to_json() -> json; }\n+trait to_json { fn to_json() -> json; }\n \n impl of to_json for json {\n     fn to_json() -> json { self }"}, {"sha": "846a2bfc700583660f60aab2449948ae6a2267c9", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -24,7 +24,7 @@ type set<K> = hashmap<K, ()>;\n \n type hashmap<K, V> = chained::t<K, V>;\n \n-iface map<K, V: copy> {\n+trait map<K, V: copy> {\n     /// Return the number of elements in the map\n     fn size() -> uint;\n "}, {"sha": "8bf35c8ee168f30e89078a9f7aa0a160b122a4e7", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -54,7 +54,7 @@ class tcp_socket {\n  * A buffered wrapper for `net::tcp::tcp_socket`\n  *\n  * It is created with a call to `net::tcp::socket_buf()` and has impls that\n- * satisfy both the `io::reader` and `io::writer` ifaces.\n+ * satisfy both the `io::reader` and `io::writer` traits.\n  */\n class tcp_socket_buf {\n   let data: @tcp_buffered_socket_data;\n@@ -764,7 +764,7 @@ impl tcp_socket for tcp_socket {\n     }\n }\n \n-/// Implementation of `io::reader` iface for a buffered `net::tcp::tcp_socket`\n+/// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`\n impl tcp_socket_buf of io::reader for @tcp_socket_buf {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n         // Loop until our buffer has enough data in it for us to read from.\n@@ -817,7 +817,7 @@ impl tcp_socket_buf of io::reader for @tcp_socket_buf {\n     }\n }\n \n-/// Implementation of `io::reader` iface for a buffered `net::tcp::tcp_socket`\n+/// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`\n impl tcp_socket_buf of io::writer for @tcp_socket_buf {\n     fn write(data: &[const u8]) unsafe {\n         let socket_data_ptr =\n@@ -1083,11 +1083,11 @@ enum tcp_read_result {\n     tcp_read_err(tcp_err_data)\n }\n \n-iface to_tcp_err_iface {\n+trait to_tcp_err {\n     fn to_tcp_err() -> tcp_err_data;\n }\n \n-impl of to_tcp_err_iface for uv::ll::uv_err_data {\n+impl of to_tcp_err for uv::ll::uv_err_data {\n     fn to_tcp_err() -> tcp_err_data {\n         { err_name: self.err_name, err_msg: self.err_msg }\n     }"}, {"sha": "5be0ac26d2325c19b891248035094960ccd15a4d", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -6,7 +6,7 @@ use core;\n Core serialization interfaces.\n */\n \n-iface serializer {\n+trait serializer {\n     // Primitive types:\n     fn emit_nil();\n     fn emit_uint(v: uint);\n@@ -39,7 +39,7 @@ iface serializer {\n     fn emit_tup_elt(idx: uint, f: fn());\n }\n \n-iface deserializer {\n+trait deserializer {\n     // Primitive types:\n     fn read_nil() -> ();\n "}, {"sha": "eef757f4516d766fb9c2b9663b9e912ff213ac87", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -20,7 +20,7 @@\n export sha1;\n \n /// The SHA-1 interface\n-iface sha1 {\n+trait sha1 {\n     /// Provide message input as bytes\n     fn input(~[u8]);\n     /// Provide message input as string"}, {"sha": "d9292afc96ab318d5abd869ac35f58967d453b5d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -13,7 +13,7 @@ type emitter = fn@(cmsp: option<(codemap::codemap, span)>,\n                    msg: ~str, lvl: level);\n \n \n-iface span_handler {\n+trait span_handler {\n     fn span_fatal(sp: span, msg: ~str) -> !;\n     fn span_err(sp: span, msg: ~str);\n     fn span_warn(sp: span, msg: ~str);\n@@ -23,7 +23,7 @@ iface span_handler {\n     fn handler() -> handler;\n }\n \n-iface handler {\n+trait handler {\n     fn fatal(msg: ~str) -> !;\n     fn err(msg: ~str);\n     fn bump_err_count();"}, {"sha": "a51bc8a994cad55fc6d3b44568a5c1f5baa25c01", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -114,7 +114,7 @@ fn syntax_expander_table() -> hashmap<~str, syntax_extension> {\n // One of these is made during expansion and incrementally updated as we go;\n // when a macro expansion occurs, the resulting nodes have the backtrace()\n // -> expn_info of their expansion context stored into their span.\n-iface ext_ctxt {\n+trait ext_ctxt {\n     fn codemap() -> codemap;\n     fn parse_sess() -> parse::parse_sess;\n     fn cfg() -> ast::crate_cfg;"}, {"sha": "00fd5d41f93634f0d31c9ac3248b05a83cee301e", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -383,7 +383,7 @@ impl compile of gen_init for protocol {\n     }\n }\n \n-iface to_source {\n+trait to_source {\n     // Takes a thing and generates a string containing rust code for it.\n     fn to_source() -> ~str;\n }"}, {"sha": "9dcb4da14fa1d9945a4b52d37ca4fe2f28398e68", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -22,7 +22,7 @@ enum fragment {\n     from_ty(@ast::ty)\n }\n \n-iface qq_helper {\n+trait qq_helper {\n     fn span() -> span;\n     fn visit(aq_ctxt, vt<aq_ctxt>);\n     fn extract_mac() -> option<ast::mac_>;"}, {"sha": "dd051564cf4a797dbbe33159e2ee4c965ef586e6", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -18,7 +18,7 @@ export fold_ty_params;\n export fold_fn_decl;\n export extensions;\n \n-iface ast_fold {\n+trait ast_fold {\n     fn fold_crate(crate) -> crate;\n     fn fold_crate_directive(&&@crate_directive) -> @crate_directive;\n     fn fold_view_item(&&@view_item) -> @view_item;"}, {"sha": "5a343f370f37e51943b053ca89184088dcb3fd9a", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -9,7 +9,7 @@ export tt_reader,  new_tt_reader;\n export nextch, is_eof, bump, get_str_from, new_low_level_string_reader;\n export string_reader_as_reader, tt_reader_as_reader;\n \n-iface reader {\n+trait reader {\n     fn is_eof() -> bool;\n     fn next_token() -> {tok: token::token, sp: span};\n     fn fatal(~str) -> !;"}, {"sha": "17370628db9ee6d825cad5676b2c8536512a8b3d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -2702,6 +2702,7 @@ class parser {\n         } else if self.eat_keyword(~\"enum\") {\n             self.parse_item_enum(vis)\n         } else if self.eat_keyword(~\"iface\") {\n+            self.warn(~\"`iface` is deprecated; use `trait`\");\n             self.parse_item_trait()\n         } else if self.eat_keyword(~\"trait\") {\n             self.parse_item_trait()"}, {"sha": "a169c4e72562830de55d7eed8bf3997e23003f33", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -588,7 +588,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n         bclose(s, item.span);\n       }\n       ast::item_trait(tps, methods) {\n-        head(s, ~\"iface\");\n+        head(s, ~\"trait\");\n         word(s.s, *item.ident);\n         print_type_params(s, tps);\n         word(s.s, ~\" \");"}, {"sha": "4886b903d737ed97a0152f1bec9d6dea29ff588e", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -19,7 +19,7 @@ fn mk<T: const copy>(hasher: hashfn<T>, eqer: eqfn<T>) -> interner<T> {\n }\n \n /* when traits can extend traits, we should extend index<uint,T> to get [] */\n-iface interner<T: const copy> {\n+trait interner<T: const copy> {\n     fn intern(T) -> uint;\n     pure fn get(uint) -> T;\n     fn len() -> uint;"}, {"sha": "ce4dc55cd7073e6c60a7203703cfbd155e62fae5", "filename": "src/rt/rust_box_annihilator.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frt%2Frust_box_annihilator.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frt%2Frust_box_annihilator.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.cpp?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -120,7 +120,7 @@ class annihilator : public shape::data<annihilator,shape::ptr> {\n         return;\n     }\n \n-    void walk_iface2() {\n+    void walk_trait2() {\n         walk_box2();\n     }\n "}, {"sha": "0106b468c907b44d9fd7b68d4881245791df4a71", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -140,7 +140,7 @@ class irc : public shape::data<irc,shape::ptr> {\n         }\n     }\n \n-    void walk_iface2() {\n+    void walk_trait2() {\n         walk_box2();\n     }\n \n@@ -400,7 +400,7 @@ class mark : public shape::data<mark,shape::ptr> {\n         }\n     }\n \n-    void walk_iface2() {\n+    void walk_trait2() {\n         walk_box2();\n     }\n "}, {"sha": "ae5780811642242e89c13d4e11ad0d0a316b8336", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -290,7 +290,7 @@ class cmp : public data<cmp,ptr_pair> {\n         data<cmp,ptr_pair>::walk_rptr_contents1();\n     }\n \n-    void walk_iface2() {\n+    void walk_trait2() {\n         data<cmp,ptr_pair>::walk_box_contents1();\n     }\n "}, {"sha": "fffbfad1d8124fbdf10ece33226ca5785f895501", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -544,7 +544,7 @@ class print : public ctxt<print> {\n           default: abort();\n         }\n     }\n-    void walk_iface1() { DPRINT(\"iface\"); }\n+    void walk_trait1() { DPRINT(\"trait\"); }\n \n     void walk_tydesc1(char kind) {\n         switch(kind) {\n@@ -598,7 +598,7 @@ class size_of : public ctxt<size_of> {\n                             { sa.set(sizeof(void *)*2, sizeof(void *)); }\n     void walk_box1()        { sa.set(sizeof(void *),   sizeof(void *)); }\n     void walk_fn1(char)     { sa.set(sizeof(void *)*2, sizeof(void *)); }\n-    void walk_iface1()      { sa.set(sizeof(void *),   sizeof(void *)); }\n+    void walk_trait1()      { sa.set(sizeof(void *),   sizeof(void *)); }\n     void walk_tydesc1(char) { sa.set(sizeof(void *),   sizeof(void *)); }\n     void walk_closure1();\n \n@@ -851,7 +851,7 @@ class data : public ctxt< data<T,U> > {\n     void walk_uniq_contents1();\n     void walk_rptr_contents1();\n     void walk_fn_contents1();\n-    void walk_iface_contents1();\n+    void walk_trait_contents1();\n     void walk_variant1(tag_info &tinfo, tag_variant_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_vec_data_range(ptr dp);\n@@ -927,10 +927,10 @@ class data : public ctxt< data<T,U> > {\n         dp = next_dp;\n     }\n \n-    void walk_iface1() {\n+    void walk_trait1() {\n         ALIGN_TO(rust_alignof<void *>());\n         U next_dp = dp + sizeof(void *);\n-        static_cast<T *>(this)->walk_iface2();\n+        static_cast<T *>(this)->walk_trait2();\n         dp = next_dp;\n     }\n \n@@ -1137,7 +1137,7 @@ void\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_iface_contents1() {\n+data<T,U>::walk_trait_contents1() {\n     walk_box_contents1();\n }\n \n@@ -1234,10 +1234,10 @@ class log : public data<log,ptr> {\n         data<log,ptr>::walk_fn_contents1();\n     }\n \n-    void walk_iface2() {\n-        out << prefix << \"iface(\";\n+    void walk_trait2() {\n+        out << prefix << \"trait(\";\n         prefix = \"\";\n-        data<log,ptr>::walk_iface_contents1();\n+        data<log,ptr>::walk_trait_contents1();\n         out << prefix << \")\";\n     }\n "}, {"sha": "1fc320a8311cd2cfa903c29ca5b7604534fe3941", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -19,7 +19,7 @@ mod intrinsic {\n         // Remaining fields not listed\n     };\n \n-    iface ty_visitor {\n+    trait ty_visitor {\n         fn visit_bot() -> bool;\n         fn visit_nil() -> bool;\n         fn visit_bool() -> bool;"}, {"sha": "6bd002c356eb5a57ca5c84165604fa9fa8a2681a", "filename": "src/rustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ffilesearch.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -23,7 +23,7 @@ fn pick_file(file: path, path: path) -> option<path> {\n     else { option::none }\n }\n \n-iface filesearch {\n+trait filesearch {\n     fn sysroot() -> path;\n     fn lib_search_paths() -> ~[path];\n     fn get_target_lib_path() -> path;"}, {"sha": "5ec3c3882aca56f96dfa82684bca85ecf71b9305", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -77,7 +77,7 @@ enum extended_decode_ctxt {\n     extended_decode_ctxt_(@extended_decode_ctxt_)\n }\n \n-iface tr {\n+trait tr {\n     fn tr(xcx: extended_decode_ctxt) -> self;\n }\n \n@@ -910,7 +910,7 @@ fn decode_item_ast(par_doc: ebml::doc) -> @ast::item {\n }\n \n #[cfg(test)]\n-iface fake_ext_ctxt {\n+trait fake_ext_ctxt {\n     fn cfg() -> ast::crate_cfg;\n     fn parse_sess() -> parse::parse_sess;\n }"}, {"sha": "c94326d668a73668839887d108329f6159e60150", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -429,7 +429,7 @@ fn root_map() -> root_map {\n // ___________________________________________________________________________\n // Misc\n \n-iface ast_node {\n+trait ast_node {\n     fn id() -> ast::node_id;\n     fn span() -> span;\n }"}, {"sha": "13019f19a8a0a866ec2035d5af9507add58024b0", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -3059,7 +3059,7 @@ class Resolver {\n                 self_type_rib.bindings.insert(self.self_atom,\n                                               dl_def(def_self(item.id)));\n \n-                // Create a new rib for the interface-wide type parameters.\n+                // Create a new rib for the trait-wide type parameters.\n                 do self.with_type_parameter_rib\n                         (HasTypeParameters(&type_parameters, item.id, 0u,\n                                            NormalRibKind)) {\n@@ -3106,12 +3106,12 @@ class Resolver {\n                 (*self.type_ribs).pop();\n             }\n \n-            item_class(ty_params, interfaces, class_members,\n+            item_class(ty_params, traits, class_members,\n                        optional_constructor, optional_destructor) {\n \n                 self.resolve_class(item.id,\n                                    @copy ty_params,\n-                                   interfaces,\n+                                   traits,\n                                    class_members,\n                                    optional_constructor,\n                                    optional_destructor,\n@@ -3330,8 +3330,8 @@ class Resolver {\n                     bound_copy | bound_send | bound_const | bound_owned {\n                         // Nothing to do.\n                     }\n-                    bound_trait(interface_type) {\n-                        self.resolve_type(interface_type, visitor);\n+                    bound_trait(trait_type) {\n+                        self.resolve_type(trait_type, visitor);\n                     }\n                 }\n             }\n@@ -3340,7 +3340,7 @@ class Resolver {\n \n     fn resolve_class(id: node_id,\n                      type_parameters: @~[ty_param],\n-                     interfaces: ~[@trait_ref],\n+                     traits: ~[@trait_ref],\n                      class_members: ~[@class_member],\n                      optional_constructor: option<class_ctor>,\n                      optional_destructor: option<class_dtor>,\n@@ -3359,22 +3359,22 @@ class Resolver {\n             // Resolve the type parameters.\n             self.resolve_type_parameters(*type_parameters, visitor);\n \n-            // Resolve implemented interfaces.\n-            for interfaces.each |interface| {\n-                alt self.resolve_path(interface.path, TypeNS, true, visitor) {\n+            // Resolve implemented traits.\n+            for traits.each |trt| {\n+                alt self.resolve_path(trt.path, TypeNS, true, visitor) {\n                     none {\n-                        self.session.span_err(interface.path.span,\n+                        self.session.span_err(trt.path.span,\n                                               ~\"attempt to implement a \\\n                                                nonexistent trait\");\n                     }\n                     some(def) {\n-                        // Write a mapping from the interface ID to the\n-                        // definition of the interface into the definition\n+                        // Write a mapping from the trait ID to the\n+                        // definition of the trait into the definition\n                         // map.\n \n                         debug!{\"(resolving class) found trait def: %?\", def};\n \n-                        self.record_def(interface.ref_id, def);\n+                        self.record_def(trt.ref_id, def);\n \n                         // XXX: This is wrong but is needed for tests to\n                         // pass.\n@@ -3475,7 +3475,7 @@ class Resolver {\n             // Resolve the type parameters.\n             self.resolve_type_parameters(type_parameters, visitor);\n \n-            // Resolve the interface reference, if necessary.\n+            // Resolve the trait reference, if necessary.\n             let original_trait_refs = self.current_trait_refs;\n             if trait_references.len() >= 1 {\n                 let mut new_trait_refs = @dvec();"}, {"sha": "f2903232400289fc48ccca855dc0b0156da0a589", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -392,8 +392,8 @@ type opt_region = option<region>;\n /// appear within a region-parameterized type is `self`.\n ///\n /// `self_ty` is the type to which `self` should be remapped, if any.  The\n-/// `self` type is rather funny in that it can only appear on interfaces and\n-/// is always substituted away to the implementing type for an interface.\n+/// `self` type is rather funny in that it can only appear on traits and\n+/// is always substituted away to the implementing type for a trait.\n type substs = {\n     self_r: opt_region,\n     self_ty: option<ty::t>,\n@@ -477,7 +477,7 @@ enum tv_vid = uint;\n enum tvi_vid = uint;\n enum region_vid = uint;\n \n-iface vid {\n+trait vid {\n     fn to_uint() -> uint;\n     fn to_str() -> ~str;\n }\n@@ -2633,7 +2633,7 @@ fn trait_methods(cx: ctxt, id: ast::def_id) -> @~[method] {\n       some(ms) { ret ms; }\n       _ {}\n     }\n-    // Local interfaces are supposed to have been added explicitly.\n+    // Local traits are supposed to have been added explicitly.\n     assert id.crate != ast::local_crate;\n     let result = csearch::get_trait_methods(cx, id);\n     cx.trait_method_cache.insert(id, result);"}, {"sha": "bf7069f87e25fa5db397e5d8ca3194e950a336f8", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -142,7 +142,7 @@ enum vtable_origin {\n      */\n     vtable_param(uint, uint),\n     /*\n-      Dynamic vtable, comes from something known to have an interface\n+      Dynamic vtable, comes from something known to have a trait\n       type. def_id refers to the trait item, tys are the substs\n      */\n     vtable_trait(ast::def_id, ~[ty::t]),"}, {"sha": "1dd8cde5084be64bf02b1ea65ee90bed4ec59720", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -13,7 +13,7 @@\n  * used as the `ast_conv`, `get_item_ty()` just looks up the item type in\n  * `tcx.tcache`.\n  *\n- * The `region_scope` interface controls how region references are\n+ * The `region_scope` trait controls how region references are\n  * handled.  It has two methods which are used to resolve anonymous\n  * region references (e.g., `&T`) and named region references (e.g.,\n  * `&a.T`).  There are numerous region scopes that can be used, but most\n@@ -46,7 +46,7 @@ import check::fn_ctxt;\n import rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n import rscope::{in_binding_rscope, region_scope, type_rscope};\n \n-iface ast_conv {\n+trait ast_conv {\n     fn tcx() -> ty::ctxt;\n     fn ccx() -> @crate_ctxt;\n     fn get_item_ty(id: ast::def_id) -> ty::ty_param_bounds_and_ty;"}, {"sha": "ac18b8ccad6c3b84a792432f8585848785f14ddf", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -85,7 +85,7 @@ class lookup {\n         }\n \n         loop {\n-            // First, see whether this is an interface-bounded parameter.\n+            // First, see whether this is a bounded parameter.\n             alt ty::get(self.self_ty).struct {\n               ty::ty_param(p) {\n                 self.add_candidates_from_param(p.idx, p.def_id);"}, {"sha": "6baa89e063891fbf5a9931a828d7f12c14f2cedd", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -189,7 +189,7 @@ fn lookup_vtable(fcx: @fn_ctxt, sp: span, ty: ty::t, trait_ty: ty::t,\n     }\n \n     tcx.sess.span_fatal(\n-        sp, ~\"failed to find an implementation of interface \" +\n+        sp, ~\"failed to find an implementation of trait \" +\n         ty_to_str(tcx, trait_ty) + ~\" for \" +\n         ty_to_str(tcx, ty));\n }\n@@ -291,7 +291,7 @@ fn resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, v: visit::vt<@fn_ctxt>) {\n     visit::visit_expr(ex, fcx, v);\n }\n \n-// Detect points where an interface-bounded type parameter is\n+// Detect points where a trait-bounded type parameter is\n // instantiated, resolve the impls for the parameters.\n fn resolve_in_block(fcx: @fn_ctxt, bl: ast::blk) {\n     visit::visit_block(bl, fcx, visit::mk_vt(@{"}, {"sha": "22063051dce0eeb9867c678ca6c1b9b398824fff", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -587,7 +587,7 @@ fn ty_param_bounds(ccx: @crate_ctxt,\n                   _ {\n                     ccx.tcx.sess.span_err(\n                         t.span, ~\"type parameter bounds must be \\\n-                                 interface types\");\n+                                  trait types\");\n                     ~[]\n                   }\n                 }"}, {"sha": "68420c32de4010b37fe1475df872165942803e10", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -476,7 +476,7 @@ impl methods<T:copy> of cres_helpers<T> for cres<T> {\n     }\n }\n \n-iface to_str {\n+trait to_str {\n     fn to_str(cx: infer_ctxt) -> ~str;\n }\n \n@@ -533,7 +533,7 @@ impl<V:copy vid, T:copy to_str> of to_str for var_value<V,T> {\n     }\n }\n \n-iface st {\n+trait st {\n     fn sub(infcx: infer_ctxt, b: self) -> ures;\n     fn lub(infcx: infer_ctxt, b: self) -> cres<self>;\n     fn glb(infcx: infer_ctxt, b: self) -> cres<self>;\n@@ -1506,7 +1506,7 @@ impl assignment for infer_ctxt {\n // Type combining\n //\n // There are three type combiners: sub, lub, and glb.  Each implements\n-// the interface `combine` and contains methods for combining two\n+// the trait `combine` and contains methods for combining two\n // instances of various things and yielding a new instance.  These\n // combiner methods always yield a `result<T>`---failure is propagated\n // upward using `chain()` methods.\n@@ -1520,9 +1520,9 @@ impl assignment for infer_ctxt {\n // to the `super` routine or to do other things.\n //\n // In reality, the sub operation is rather different from lub/glb, but\n-// they are combined into one interface to avoid duplication (they\n-// used to be separate but there were many bugs because there were two\n-// copies of most routines).\n+// they are combined into one trait to avoid duplication (they used to\n+// be separate but there were many bugs because there were two copies\n+// of most routines).\n //\n // The differences are:\n //\n@@ -1548,7 +1548,7 @@ impl assignment for infer_ctxt {\n \n type cres<T> = result<T,ty::type_err>;\n \n-iface combine {\n+trait combine {\n     fn infcx() -> infer_ctxt;\n     fn tag() -> ~str;\n \n@@ -2457,7 +2457,7 @@ impl of combine for glb {\n // This is common code used by both LUB and GLB to compute the LUB/GLB\n // for pairs of variables or for variables and values.\n \n-iface lattice_ops {\n+trait lattice_ops {\n     fn bnd<T:copy>(b: bounds<T>) -> option<T>;\n     fn with_bnd<T:copy>(b: bounds<T>, t: T) -> bounds<T>;\n     fn ty_bot(t: ty::t) -> cres<ty::t>;"}, {"sha": "d76f62e17a962de3b10b71d46320ffd7f2b48617", "filename": "src/rustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n import result::result;\n \n-iface region_scope {\n+trait region_scope {\n     fn anon_region() -> result<ty::region, ~str>;\n     fn named_region(id: ast::ident) -> result<ty::region, ~str>;\n }"}, {"sha": "a5c41d23574e19132fa52c5a367454f257d7070b", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -242,14 +242,14 @@ fn merge_method_attrs(\n \n #[test]\n fn should_extract_trait_docs() {\n-    let doc = test::mk_doc(~\"#[doc = \\\"whatever\\\"] iface i { fn a(); }\");\n+    let doc = test::mk_doc(~\"#[doc = \\\"whatever\\\"] trait i { fn a(); }\");\n     assert doc.cratemod().traits()[0].desc() == some(~\"whatever\");\n }\n \n #[test]\n fn should_extract_trait_method_docs() {\n     let doc = test::mk_doc(\n-        ~\"iface i {\\\n+        ~\"trait i {\\\n          #[doc = \\\"desc\\\"]\\\n          fn f(a: bool) -> bool;\\\n          }\");"}, {"sha": "0a46d7e7195357e3892b60731f6544e30904e281", "filename": "src/rustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdemo.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -133,7 +133,7 @@ class bored {\n  * neighboring hillside churchyard of St. John's, whose hidden expanse of\n  * Eighteenth Century gravestones had for him a peculiar fascination.\n  */\n-iface the_shunned_house {\n+trait the_shunned_house {\n     /**\n      * Now the irony is this. In this walk, so many times repeated, the\n      * world's greatest master of the terrible and the bizarre was"}, {"sha": "c047530fec2061e2204ce38c8bb599b101921ad1", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -70,7 +70,7 @@ fn should_promote_desc() {\n \n #[test]\n fn should_promote_trait_method_desc() {\n-    let doc = test::mk_doc(~\"iface i { #[doc = \\\"desc\\\"] fn a(); }\");\n+    let doc = test::mk_doc(~\"trait i { #[doc = \\\"desc\\\"] fn a(); }\");\n     assert doc.cratemod().traits()[0].methods[0].brief == some(~\"desc\");\n }\n "}, {"sha": "52a2faf5bb779c3340b1946568aa362a318c7aba", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -315,7 +315,7 @@ impl util of page_utils for ~[page] {\n     }\n }\n \n-iface item {\n+trait item {\n     fn item() -> itemdoc;\n }\n "}, {"sha": "a880c510b8991dc4aa915c06d432e38459c290c3", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -666,28 +666,28 @@ fn write_method(ctxt: ctxt, doc: doc::methoddoc) {\n \n #[test]\n fn should_write_trait_header() {\n-    let markdown = test::render(~\"iface i { fn a(); }\");\n+    let markdown = test::render(~\"trait i { fn a(); }\");\n     assert str::contains(markdown, ~\"## Interface `i`\");\n }\n \n #[test]\n fn should_write_trait_desc() {\n     let markdown = test::render(\n-        ~\"#[doc = \\\"desc\\\"] iface i { fn a(); }\");\n+        ~\"#[doc = \\\"desc\\\"] trait i { fn a(); }\");\n     assert str::contains(markdown, ~\"desc\");\n }\n \n #[test]\n fn should_write_trait_method_header() {\n     let markdown = test::render(\n-        ~\"iface i { fn a(); }\");\n+        ~\"trait i { fn a(); }\");\n     assert str::contains(markdown, ~\"### Method `a`\");\n }\n \n #[test]\n fn should_write_trait_method_signature() {\n     let markdown = test::render(\n-        ~\"iface i { fn a(); }\");\n+        ~\"trait i { fn a(); }\");\n     assert str::contains(markdown, ~\"\\n    fn a()\");\n }\n "}, {"sha": "1ca660a34883aaf31eac947b4d979ca2a4edcbf4", "filename": "src/rustdoc/sectionalize_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsectionalize_pass.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -206,7 +206,7 @@ fn should_eliminate_desc_if_it_is_just_whitespace() {\n #[test]\n fn should_sectionalize_trait_methods() {\n     let doc = test::mk_doc(\n-        ~\"iface i {\n+        ~\"trait i {\n          #[doc = \\\"\\\n          # Header\\n\\\n          Body\\\"]\\"}, {"sha": "74a6000db66eb155e092885b96dbb72fd693757e", "filename": "src/rustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_type_pass.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -31,7 +31,7 @@ fn test() {\n          const iconst: int = 0; \\\n          fn ifn() { } \\\n          enum ienum { ivar } \\\n-         iface iiface { fn a(); } \\\n+         trait itrait { fn a(); } \\\n          impl iimpl for int { fn a() { } } \\\n          type itype = int;\";\n     do astsrv::from_str(source) |srv| {\n@@ -40,7 +40,7 @@ fn test() {\n         assert doc.cratemod().items[0].name() == ~\"iconst\";\n         assert doc.cratemod().items[1].name() == ~\"itype\";\n         assert doc.cratemod().items[2].name() == ~\"ienum\";\n-        assert doc.cratemod().items[3].name() == ~\"iiface\";\n+        assert doc.cratemod().items[3].name() == ~\"itrait\";\n         assert doc.cratemod().items[4].name() == ~\"iimpl\";\n         assert doc.cratemod().items[5].name() == ~\"ifn\";\n         assert doc.cratemod().items[6].name() == ~\"imod\";"}, {"sha": "adf5029989e881e96ddac175856ff34ad5d41101", "filename": "src/rustdoc/text_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftext_pass.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -117,28 +117,28 @@ fn should_execute_op_on_variant_desc() {\n #[test]\n fn should_execute_op_on_trait_brief() {\n     let doc = test::mk_doc(\n-        ~\"#[doc = \\\" a \\\"] iface i { fn a(); }\");\n+        ~\"#[doc = \\\" a \\\"] trait i { fn a(); }\");\n     assert doc.cratemod().traits()[0].brief() == some(~\"a\");\n }\n \n #[test]\n fn should_execute_op_on_trait_desc() {\n     let doc = test::mk_doc(\n-        ~\"#[doc = \\\" a \\\"] iface i { fn a(); }\");\n+        ~\"#[doc = \\\" a \\\"] trait i { fn a(); }\");\n     assert doc.cratemod().traits()[0].desc() == some(~\"a\");\n }\n \n #[test]\n fn should_execute_op_on_trait_method_brief() {\n     let doc = test::mk_doc(\n-        ~\"iface i { #[doc = \\\" a \\\"] fn a(); }\");\n+        ~\"trait i { #[doc = \\\" a \\\"] fn a(); }\");\n     assert doc.cratemod().traits()[0].methods[0].brief == some(~\"a\");\n }\n \n #[test]\n fn should_execute_op_on_trait_method_desc() {\n     let doc = test::mk_doc(\n-        ~\"iface i { #[doc = \\\" a \\\"] fn a(); }\");\n+        ~\"trait i { #[doc = \\\" a \\\"] fn a(); }\");\n     assert doc.cratemod().traits()[0].methods[0].desc == some(~\"a\");\n }\n \n@@ -207,7 +207,7 @@ fn should_execute_on_item_section_bodies() {\n #[test]\n fn should_execute_on_trait_method_section_headers() {\n     let doc = test::mk_doc(\n-        ~\"iface i {\n+        ~\"trait i {\n          #[doc = \\\"\\\n          # Header    \\n\\\n          Body\\\"]\\\n@@ -219,7 +219,7 @@ fn should_execute_on_trait_method_section_headers() {\n #[test]\n fn should_execute_on_trait_method_section_bodies() {\n     let doc = test::mk_doc(\n-        ~\"iface i {\n+        ~\"trait i {\n          #[doc = \\\"\\\n          # Header\\n\\\n          Body     \\\"]\\"}, {"sha": "865a4361aac3fb57d2608041f2e7fa6c09baf393", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -218,7 +218,7 @@ fn get_method_sig(\n \n #[test]\n fn should_add_trait_method_sigs() {\n-    let doc = test::mk_doc(~\"iface i { fn a<T>() -> int; }\");\n+    let doc = test::mk_doc(~\"trait i { fn a<T>() -> int; }\");\n     assert doc.cratemod().traits()[0].methods[0].sig\n         == some(~\"fn a<T>() -> int\");\n }"}, {"sha": "94535f0a2c0e8ba250d8805cde3a96a21ed592d3", "filename": "src/test/auxiliary/cci_class_iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fauxiliary%2Fcci_class_iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fauxiliary%2Fcci_class_iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_iface.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n mod animals {\n \n-iface noisy {\n+trait noisy {\n   fn speak();\n }\n "}, {"sha": "6749998c6123890fddc7f1a3e15a63dc3602f6fe", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,7 +1,7 @@\n #[link(name = \"a\", vers = \"0.0\")];\n #[crate_type = \"lib\"];\n \n-iface i<T> { }\n+trait i<T> { }\n \n fn f<T>() -> i<T> {\n     impl <T> of i<T> for () { }"}, {"sha": "54ae3cba785c8062062a449d16a50cc905760eb8", "filename": "src/test/auxiliary/issue_2242_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,7 +1,7 @@\n #[link(name = \"a\", vers = \"0.1\")];\n #[crate_type = \"lib\"];\n \n-iface to_str {\n+trait to_str {\n     fn to_str() -> str;\n }\n "}, {"sha": "21399eab7294d5caf48fe1523bde8f2a3a6c0899", "filename": "src/test/compile-fail/ambig_impl_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,5 +1,5 @@\n-iface A { fn foo(); }\n-iface B { fn foo(); }\n+trait A { fn foo(); }\n+trait B { fn foo(); }\n \n fn foo<T: A B>(t: T) {\n     t.foo(); //~ ERROR multiple applicable methods in scope"}, {"sha": "fb35b788779907f705f71cb6852064b67c52ecfa", "filename": "src/test/compile-fail/class-cast-to-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-iface.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: attempted access of field `eat` on type `noisy`\n-iface noisy {\n+trait noisy {\n   fn speak();\n }\n "}, {"sha": "b49fa62577d75fc25aa8910158e4280a3e41042e", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:missing method `eat`\n-iface animal {\n+trait animal {\n   fn eat();\n }\n "}, {"sha": "f6642ec1b62296a269bbfd21e7e31dda8097c1b3", "filename": "src/test/compile-fail/iface-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-cast.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface foo<T> { }\n+trait foo<T> { }\n \n fn bar(x: foo<uint>) -> foo<int> {\n     ret (x as foo::<int>);"}, {"sha": "0ac42fe52eb5776dc68165c16d9f7ffc01df9f1e", "filename": "src/test/compile-fail/iface-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface foo {\n+trait foo {\n     fn bar(x: uint) -> self;\n }\n impl of foo for int {"}, {"sha": "a2ae5a4284951e5cfebb8b0cf395dda9f956803c", "filename": "src/test/compile-fail/iface-keyword.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-keyword.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -0,0 +1,5 @@\n+iface foo { } //~ WARN `iface` is deprecated; use `trait`\n+\n+fn main() { \n+    x //~ ERROR unresolved name: x\n+}\n\\ No newline at end of file"}, {"sha": "b53f1972b725bfffd8811648bb6f586be899e539", "filename": "src/test/compile-fail/iface-test-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface bar { fn dup() -> self; fn blah<X>(); }\n+trait bar { fn dup() -> self; fn blah<X>(); }\n impl of bar for int { fn dup() -> int { self } fn blah<X>() {} }\n impl of bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n "}, {"sha": "3084c0f4e57730e398f372f1a4a5a3732980423e", "filename": "src/test/compile-fail/iface-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fiface-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-test.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface foo { fn foo(); }\n+trait foo { fn foo(); }\n \n impl of int for uint { fn foo() {} } //~ ERROR trait\n "}, {"sha": "7d019461b48af6bb9706971ad49eca0241b69011", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: overly deep expansion\n // issue 2258\n \n-iface to_opt {\n+trait to_opt {\n     fn to_option() -> option<self>;\n }\n "}, {"sha": "8ae1cdbe18ac1fee0dac3fa0fc170e94614fa549", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n enum chan { }\n \n-iface channel<T> {\n+trait channel<T> {\n     fn send(v: T);\n }\n "}, {"sha": "145cce00839a45979b75c8edda3ae62b375399ac", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n use std;\n \n-iface siphash {\n+trait siphash {\n     fn result() -> u64;\n     fn reset();\n }"}, {"sha": "89fe96b73021225c2e7716f2fca557334cc71e0c", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n use std;\n \n-iface siphash {\n+trait siphash {\n     fn reset();\n }\n "}, {"sha": "00d5f8e990121208e706774a47691f68d7059f5b", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,11 +1,11 @@\n-iface repeat<A> { fn get() -> A; }\n+trait repeat<A> { fn get() -> A; }\n \n impl<A:copy> of repeat<A> for @A {\n     fn get() -> A { *self }\n }\n \n fn repeater<A:copy>(v: @A) -> repeat<A> {\n-    // Note: owned kind is not necessary as A appears in the iface type\n+    // Note: owned kind is not necessary as A appears in the trait type\n     v as repeat::<A> // No\n }\n "}, {"sha": "888e75a4f32b06afccd07d13a51b0407c0abf213", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,7 +1,7 @@\n-// A dummy iface/impl that work close over any type.  The iface will\n+// A dummy trait/impl that work close over any type.  The trait will\n // be parameterized by a region due to the &self/int constraint.\n \n-iface foo {\n+trait foo {\n     fn foo(i: &self/int) -> int;\n }\n "}, {"sha": "35009847c73b4386b1b12c899700f9553e55be14", "filename": "src/test/compile-fail/kindck-owned-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface foo { fn foo(); }\n+trait foo { fn foo(); }\n \n fn to_foo<T: copy foo>(t: T) -> foo {\n     t as foo //~ ERROR value may contain borrowed pointers; use `owned` bound"}, {"sha": "0a506367341a399af6a3f491bbe97a7fd7d5ff2d", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -3,7 +3,7 @@ import std::map;\n import std::map::hashmap;\n import std::map::map;\n \n-// Test that iface types printed in error msgs include the type arguments.\n+// Test that trait types printed in error msgs include the type arguments.\n \n fn main() {\n     let x: map<~str,~str> = map::str_hash::<~str>() as map::<~str,~str>;"}, {"sha": "a1211e1b09fdf9242e69149e8fe05fd3339a1bf1", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -15,7 +15,7 @@ fn new_parse_sess() -> parse::parse_sess {\n   fail;\n }\n \n-iface fake_ext_ctxt {\n+trait fake_ext_ctxt {\n     fn session() -> fake_session;\n }\n "}, {"sha": "6469e04622969bf8951b4fa78a6e2d30f72db149", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -15,7 +15,7 @@ fn new_parse_sess() -> parser::parse_sess {\n   fail;\n }\n \n-iface fake_ext_ctxt {\n+trait fake_ext_ctxt {\n     fn session() -> fake_session;\n }\n "}, {"sha": "e62b702e53f2a75e54bb2311b4f3222ea604293a", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -3,15 +3,15 @@\n // checked.\n \n enum an_enum = &int;\n-iface an_iface { fn foo() -> &self/int; }\n+trait a_trait { fn foo() -> &self/int; }\n class a_class { let x:&self/int; new(x:&self/int) { self.x = x; } }\n \n fn a_fn1(e: an_enum/&a) -> an_enum/&b {\n     ret e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`\n }\n \n-fn a_fn2(e: an_iface/&a) -> an_iface/&b {\n-    ret e; //~ ERROR mismatched types: expected `an_iface/&b` but found `an_iface/&a`\n+fn a_fn2(e: a_trait/&a) -> a_trait/&b {\n+    ret e; //~ ERROR mismatched types: expected `a_trait/&b` but found `a_trait/&a`\n }\n \n fn a_fn3(e: a_class/&a) -> a_class/&b {"}, {"sha": "ef5f3463e8e5fad783e10b83204dac192e587fb1", "filename": "src/test/compile-fail/regions-escape-via-iface-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-iface-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-iface-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-iface-or-not.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface deref {\n+trait deref {\n     fn get() -> int;\n }\n "}, {"sha": "71081ac37fb48efe7428bc1f4721fddf7ec0b4ae", "filename": "src/test/compile-fail/regions-iface-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n type ctxt = { v: uint };\n \n-iface get_ctxt {\n+trait get_ctxt {\n     // Here the `&` is bound in the method definition:\n     fn get_ctxt() -> &ctxt;\n }"}, {"sha": "c034f8a753afa99e6c4a6ce832f192f5b952927b", "filename": "src/test/compile-fail/regions-iface-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n type ctxt = { v: uint };\n \n-iface get_ctxt {\n+trait get_ctxt {\n     fn get_ctxt() -> &self/ctxt;\n }\n "}, {"sha": "78e77d66def65cca28ac8e14dcdaddfe7ae9e991", "filename": "src/test/compile-fail/regions-iface-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface get_ctxt {\n+trait get_ctxt {\n     fn get_ctxt() -> &self/uint;\n }\n "}, {"sha": "ea62d72cd66b669cc93cdf0fb1daa1cc91728cd2", "filename": "src/test/compile-fail/regions-infer-paramd-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,7 +1,7 @@\n // Here: foo is parameterized because it contains a method that\n // refers to self.\n \n-iface foo {\n+trait foo {\n     fn self_int() -> &self/int;\n \n     fn any_int() -> &int;\n@@ -21,7 +21,7 @@ impl methods of set_foo_foo for with_foo {\n \n // Bar is not region parameterized.\n \n-iface bar {\n+trait bar {\n     fn any_int() -> &int;\n }\n "}, {"sha": "25dd29300e52dc8133b5f7952f4ebccc16f62766", "filename": "src/test/compile-fail/selftype-astparam.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface add {\n+trait add {\n     fn plus(++x: self) -> self;\n }\n "}, {"sha": "09fc12fda1ef44b6704c8d6e7423c606cca5872b", "filename": "src/test/compile-fail/selftype-ifacetype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface add {\n+trait add {\n     fn plus(x: self) -> self;\n }\n "}, {"sha": "4d9eadf65ed9638727430064b2851823d7509820", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n use std;\n fn main() {\n-iface seq { }\n+trait seq { }\n \n impl <T> of seq<T> for ~[T] { //~ ERROR wrong number of type arguments\n     /* ... */"}, {"sha": "82fbd5f116339da07cbf55bf43101c70f4fdbf75", "filename": "src/test/compile-fail/tps-invariant-iface.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-iface.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface box_iface<T> {\n+trait box_trait<T> {\n     fn get() -> T;\n     fn set(t: T);\n }\n@@ -7,12 +7,12 @@ enum box_impl<T> = {\n     mut f: T\n };\n \n-impl<T:copy> of box_iface<T> for box_impl<T> {\n+impl<T:copy> of box_trait<T> for box_impl<T> {\n     fn get() -> T { ret self.f; }\n     fn set(t: T) { self.f = t; }\n }\n \n-fn set_box_iface<T>(b: box_iface<@const T>, v: @const T) {\n+fn set_box_trait<T>(b: box_trait<@const T>, v: @const T) {\n     b.set(v);\n }\n \n@@ -22,7 +22,7 @@ fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n \n fn main() {\n     let b = box_impl::<@int>({mut f: @3});\n-    set_box_iface(b as box_iface::<@int>, @mut 5);\n+    set_box_trait(b as box_trait::<@int>, @mut 5);\n     //~^ ERROR values differ in mutability\n     set_box_impl(b, @mut 5);\n     //~^ ERROR values differ in mutability"}, {"sha": "f56cc13273b9808a8c0e20ef5fb2c94e2975406c", "filename": "src/test/run-fail/unwind-box-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-fail%2Funwind-box-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-fail%2Funwind-box-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-iface.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -4,7 +4,7 @@ fn failfn() {\n     fail;\n }\n \n-iface i {\n+trait i {\n     fn foo();\n }\n "}, {"sha": "5a19fb9646447bc428dad6d1acf5ad09c5b33cf0", "filename": "src/test/run-pass-fulldeps/issue-1926.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -21,7 +21,7 @@ fn new_parse_sess() -> parser::parse_sess {\n     ret sess;\n }\n \n-iface fake_ext_ctxt {\n+trait fake_ext_ctxt {\n     fn session() -> fake_session;\n     fn cfg() -> ast::crate_cfg;\n     fn parse_sess() -> parser::parse_sess;"}, {"sha": "bdf1cb63f998bf5682a57c85ebda4e03da8e50e7", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -11,7 +11,7 @@ import syntax::codemap;\n import syntax::parse;\n import syntax::print::*;\n \n-iface fake_ext_ctxt {\n+trait fake_ext_ctxt {\n     fn cfg() -> ast::crate_cfg;\n     fn parse_sess() -> parse::parse_sess;\n }"}, {"sha": "f555f61f5b87058dca48eec428412d33f7104d6e", "filename": "src/test/run-pass/assignability-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fassignability-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fassignability-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-iface.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -2,7 +2,7 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n-iface iterable<A> {\n+trait iterable<A> {\n     fn iterate(blk: fn(A) -> bool);\n }\n "}, {"sha": "d28c60dd291e1f6800a50e0b9636b257a1ac110c", "filename": "src/test/run-pass/class-cast-to-iface-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface noisy {\n+trait noisy {\n   fn speak() -> int;\n }\n "}, {"sha": "0fba6a7b74b313db42ab9cd5d684ce40443d586a", "filename": "src/test/run-pass/class-cast-to-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface noisy {\n+trait noisy {\n   fn speak();\n }\n "}, {"sha": "2a5bcc98f065c9818ccc74cfe66db416c50cac68", "filename": "src/test/run-pass/class-impl-very-parameterized-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -6,7 +6,7 @@ enum cat_type { tuxedo, tabby, tortoiseshell }\n // Very silly -- this just returns the value of the name field\n // for any int value that's less than the meows field\n \n-// ok: T should be in scope when resolving the iface ref for map\n+// ok: T should be in scope when resolving the trait ref for map\n class cat<T: copy> : map<int, T> {\n   priv {\n     // Yes, you can have negative meows"}, {"sha": "73a2e685af1041341f48c0348309620bad934518", "filename": "src/test/run-pass/class-implement-ifaces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface noisy {\n+trait noisy {\n   fn speak();\n }\n "}, {"sha": "968dfb07bf9e3e0778bf4640c5751a146e316705", "filename": "src/test/run-pass/class-implements-multiple-ifaces.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -8,15 +8,15 @@ import dvec::{dvec, extensions};\n enum furniture { chair, couch, bed }\n enum body_part { finger, toe, nose, ear }\n \n-iface noisy {\n+trait noisy {\n   fn speak() -> int;\n }\n \n-iface scratchy {\n+trait scratchy {\n   fn scratch() -> option<furniture>;\n }\n \n-iface bitey {\n+trait bitey {\n   fn bite() -> body_part;\n }\n "}, {"sha": "919c53d32b2bfa886a0d7e564f56f2988b75269a", "filename": "src/test/run-pass/iface-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fiface-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fiface-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-cast.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-// Test cyclic detector when using iface instances.\n+// Test cyclic detector when using trait instances.\n \n enum Tree = TreeR;\n type TreeR = @{\n@@ -7,7 +7,7 @@ type TreeR = @{\n     val: to_str\n };\n \n-iface to_str {\n+trait to_str {\n     fn to_str() -> ~str;\n }\n "}, {"sha": "d6b1aa4ee1fa595d11e967cceb8c03786d57a378", "filename": "src/test/run-pass/iface-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-generic.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface to_str {\n+trait to_str {\n     fn to_str() -> ~str;\n }\n impl of to_str for int {\n@@ -11,7 +11,7 @@ impl of to_str for () {\n     fn to_str() -> ~str { ~\"()\" }\n }\n \n-iface map<T> {\n+trait map<T> {\n     fn map<U>(f: fn(T) -> U) -> ~[U];\n }\n impl <T> of map<T> for ~[T] {"}, {"sha": "29d17cc7c7d1bfb14e814e9445580a99dbd6f7a2", "filename": "src/test/run-pass/iface-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fiface-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fiface-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-to-str.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface to_str {\n+trait to_str {\n     fn to_str() -> ~str;\n }\n "}, {"sha": "67f90d6e3d66b13dcaa08fb5e607e0947684fd67", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,8 +1,8 @@\n-// This test had to do with an outdated version of the iterable iface.\n+// This test had to do with an outdated version of the iterable trait.\n // However, the condition it was testing seemed complex enough to\n // warrant still having a test, so I inlined the old definitions.\n \n-iface iterable<A> {\n+trait iterable<A> {\n     fn iter(blk: fn(A));\n }\n "}, {"sha": "559edf37956de591aadef067ba0278587eea48bb", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface clam<A: copy> {\n+trait clam<A: copy> {\n   fn chowder(y: A);\n }\n class foo<A: copy> : clam<A> {"}, {"sha": "328b6b3b4c3f2fd139d9c4cf82c5a852faac2540", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface clam<A: copy> { }\n+trait clam<A: copy> { }\n class foo<A: copy> {\n   let x: A;\n   new(b: A) { self.x = b; }"}, {"sha": "267fd08d123110ed4f29cc12dfbd49028fbc46a2", "filename": "src/test/run-pass/issue-2311.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,5 +1,5 @@\n-iface clam<A> { }\n-iface foo<A> {\n+trait clam<A> { }\n+trait foo<A> {\n    fn bar<B,C:clam<A>>(c: C) -> B;\n }\n "}, {"sha": "d466265cf7af5f769304b0c8128899de22beea53", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface hax { } \n+trait hax { } \n impl <A> of hax for A { } \n \n fn perform_hax<T: owned>(x: @T) -> hax {"}, {"sha": "7a5479ac3fa343fd45c32c9e77c97c31d890576c", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,4 +1,4 @@\n-iface hax { } \n+trait hax { } \n impl <A> of hax for A { } \n \n fn perform_hax<T: owned>(x: @T) -> hax {"}, {"sha": "e69714e5aa76672f7bfbc2d4d045feae4c581bc0", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,11 +1,11 @@\n-iface repeat<A> { fn get() -> A; }\n+trait repeat<A> { fn get() -> A; }\n \n impl<A:copy> of repeat<A> for @A {\n     fn get() -> A { *self }\n }\n \n fn repeater<A:copy>(v: @A) -> repeat<A> {\n-    // Note: owned kind is not necessary as A appears in the iface type\n+    // Note: owned kind is not necessary as A appears in the trait type\n     v as repeat::<A> // No\n }\n "}, {"sha": "b48d3887379387be127fde7b1a7953c64bba6e50", "filename": "src/test/run-pass/method-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,7 +1,7 @@\n // pp-exact - Make sure we print all the attributes\n \n #[frobable]\n-iface frobable {\n+trait frobable {\n     #[frob_attr]\n     fn frob();\n     #[defrob_attr]"}, {"sha": "bc782d44416e82dd8a3afdd2a832dc47abc79347", "filename": "src/test/run-pass/monomorphize-iface-in-fn-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fmonomorphize-iface-in-fn-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fmonomorphize-iface-in-fn-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-iface-in-fn-at.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -6,7 +6,7 @@ fn mk_nil<C:ty_ops>(cx: C) -> uint {\n     cx.mk()\n }\n \n-iface ty_ops {\n+trait ty_ops {\n     fn mk() -> uint;\n }\n "}, {"sha": "2e38cc4b34837a4ece1013fa58d82410bf9a4971", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -11,8 +11,8 @@ type unboxed_vec_repr = {\n \n #[doc = \"High-level interfaces to `intrinsic::visit_ty` reflection system.\"]\n \n-/// Iface for visitor that wishes to reflect on data.\n-iface movable_ptr {\n+/// Trait for visitor that wishes to reflect on data.\n+trait movable_ptr {\n     fn move_ptr(adjustment: fn(*c_void) -> *c_void);\n }\n "}, {"sha": "1d264b706eda3a37a914ba22b123d5870733bed4", "filename": "src/test/run-pass/regions-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fregions-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fregions-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-iface.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,6 +1,6 @@\n type ctxt = { v: uint };\n \n-iface get_ctxt {\n+trait get_ctxt {\n     fn get_ctxt() -> &self/ctxt;\n }\n "}, {"sha": "8b1ea84ba0d4580ab408e42f8d8b49aa8fcdfe47", "filename": "src/test/run-pass/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -8,7 +8,7 @@ trait Eq {\n     fn eq(a: self) -> bool;\n \n     fn neq(a: self) -> bool {\n-        !self.neq(a)\n+        !self.eq(a)\n     }\n }\n \n@@ -34,12 +34,12 @@ trait Ord < Eq {\n \n // pronounced \"impl of Ord for int\" -- not sold on this yet\n impl int: Ord {\n-    fn lt(a: self) -> bool {\n+    fn lt(a: int) -> bool {\n         self < a\n     }\n \n     // is this the place to put this?\n-    fn eq(a: self) -> bool {\n+    fn eq(a: int) -> bool {\n         self == a\n     }\n }"}, {"sha": "6687c61ce45288e5857b38e8ce9a023c527fea77", "filename": "src/test/run-pass/use-iface-before-def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fuse-iface-before-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439afaa329751b3dfd6735862cd2645705598909/src%2Ftest%2Frun-pass%2Fuse-iface-before-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-iface-before-def.rs?ref=439afaa329751b3dfd6735862cd2645705598909", "patch": "@@ -1,5 +1,5 @@\n // Issue #1761\n \n impl of foo for int { fn foo() -> int { 10 } }\n-iface foo { fn foo() -> int; }\n+trait foo { fn foo() -> int; }\n fn main() {}\n\\ No newline at end of file"}]}