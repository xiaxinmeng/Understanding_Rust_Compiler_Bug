{"sha": "a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzY2Q1ZWIxYmQ1M2E5MTliZmM3NmRhMDZlMDVlMGQzMmM0MTBlNWI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-06-09T20:26:21Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-06-09T20:26:21Z"}, "message": "Exise 'owned pointer' from the codebase\n\nStill some references left to this old term, I've updated them to say boxes.\n\nRelated to #25851", "tree": {"sha": "0beafc2cf488d86e9e74fc0c2d5a207302becee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0beafc2cf488d86e9e74fc0c2d5a207302becee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "html_url": "https://github.com/rust-lang/rust/commit/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0f2af27f18b6c81fe6a2faab0ba96e0da3bba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0f2af27f18b6c81fe6a2faab0ba96e0da3bba5", "html_url": "https://github.com/rust-lang/rust/commit/7b0f2af27f18b6c81fe6a2faab0ba96e0da3bba5"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "5541a5f34c41c6f8f3dc1c9c1e8f340c3408c75f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -22,9 +22,9 @@\n //!\n //! ## Boxed values\n //!\n-//! The [`Box`](boxed/index.html) type is the core owned pointer type in Rust.\n-//! There can only be one owner of a `Box`, and the owner can decide to mutate\n-//! the contents, which live on the heap.\n+//! The [`Box`](boxed/index.html) type is a smart pointer type. There can\n+//! only be one owner of a `Box`, and the owner can decide to mutate the\n+//! contents, which live on the heap.\n //!\n //! This type can be sent among threads efficiently as the size of a `Box` value\n //! is the same as that of a pointer. Tree-like data structures are often built"}, {"sha": "c6978808f6d43c9f03b0f3141806b9bd4eade972", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -13,10 +13,10 @@\n //\n // - For each *mutable* static item, it checks that its **type**:\n //     - doesn't have a destructor\n-//     - doesn't own an owned pointer\n+//     - doesn't own a box\n //\n // - For each *immutable* static item, it checks that its **value**:\n-//       - doesn't own owned, managed pointers\n+//       - doesn't own a box\n //       - doesn't contain a struct literal or a call to an enum variant / struct constructor where\n //           - the type of the struct/enum has a dtor\n //"}, {"sha": "6a638f3d427f83b947ebff3ae2f4df6e0421dd4e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -1410,7 +1410,7 @@ pub enum AliasableReason {\n \n impl<'tcx> cmt_<'tcx> {\n     pub fn guarantor(&self) -> cmt<'tcx> {\n-        //! Returns `self` after stripping away any owned pointer derefs or\n+        //! Returns `self` after stripping away any derefs or\n         //! interior content. The return value is basically the `cmt` which\n         //! determines how long the value in `self` remains live.\n "}, {"sha": "5cfbd59d3336881ecc0e6d450ae8198e338c3af4", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -170,7 +170,7 @@ overwrite (or freeze) `(*x).f`, and thus invalidate the reference\n that was created. In general it holds that when a path is\n lent, restrictions are issued for all the owning prefixes of that\n path. In this case, the path `*x` owns the path `(*x).f` and,\n-because `x` is an owned pointer, the path `x` owns the path `*x`.\n+because `x` has ownership, the path `x` owns the path `*x`.\n Therefore, borrowing `(*x).f` yields restrictions on both\n `*x` and `x`.\n \n@@ -286,7 +286,7 @@ MUTABILITY(X, imm)                  // M-Var-Imm\n \n ### Checking mutability of owned content\n \n-Fields and owned pointers inherit their mutability from\n+Fields and boxes inherit their mutability from\n their base expressions, so both of their rules basically\n delegate the check to the base expression `LV`:\n \n@@ -387,7 +387,7 @@ LIFETIME(X, LT, MQ)                 // L-Local\n \n ### Checking lifetime for owned content\n \n-The lifetime of a field or owned pointer is the same as the lifetime\n+The lifetime of a field or box is the same as the lifetime\n of its owner:\n \n ```text\n@@ -466,10 +466,10 @@ origin of inherited mutability.\n \n Because the mutability of owned referents is inherited, restricting an\n owned referent is similar to restricting a field, in that it implies\n-restrictions on the pointer. However, owned pointers have an important\n+restrictions on the pointer. However, boxes have an important\n twist: if the owner `LV` is mutated, that causes the owned referent\n `*LV` to be freed! So whenever an owned referent `*LV` is borrowed, we\n-must prevent the owned pointer `LV` from being mutated, which means\n+must prevent the box `LV` from being mutated, which means\n that we always add `MUTATE` and `CLAIM` to the restriction set imposed\n on `LV`:\n \n@@ -648,7 +648,7 @@ fn main() {\n ```\n \n Clause (2) propagates the restrictions on the referent to the pointer\n-itself. This is the same as with an owned pointer, though the\n+itself. This is the same as with an box, though the\n reasoning is mildly different. The basic goal in all cases is to\n prevent the user from establishing another route to the same data. To\n see what I mean, let's examine various cases of what can go wrong and"}, {"sha": "b806f185205f94a300c3de44f786ab775cce82b7", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                     mc::Unique => {\n                         // R-Deref-Send-Pointer\n                         //\n-                        // When we borrow the interior of an owned pointer, we\n+                        // When we borrow the interior of a box, we\n                         // cannot permit the base to be mutated, because that\n                         // would cause the unique pointer to be freed.\n                         //"}, {"sha": "fbb6502b5b901ba618d13fb17b851f6303b300bc", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -76,7 +76,7 @@\n //! the borrow itself (L2).  What do I mean by \"guaranteed\" by a\n //! borrowed pointer? I mean any data that is reached by first\n //! dereferencing a borrowed pointer and then either traversing\n-//! interior offsets or owned pointers.  We say that the guarantor\n+//! interior offsets or boxes.  We say that the guarantor\n //! of such data it the region of the borrowed pointer that was\n //! traversed.  This is essentially the same as the ownership\n //! relation, except that a borrowed pointer never owns its"}, {"sha": "8261862c5fc518545718f7605f423e4e113a4670", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Creating a stack closure which references an owned pointer and then\n-// transferring ownership of the owned box before invoking the stack\n+// Creating a stack closure which references an box and then\n+// transferring ownership of the box before invoking the stack\n // closure results in a crash.\n \n #![feature(box_syntax)]"}, {"sha": "997c940c9547e9ffd24877c98b8cb35c25099342", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -37,7 +37,7 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<&'static mut isize>(); //~ ERROR `core::marker::Copy` is not implemented\n     assert_copy::<&'a mut isize>();  //~ ERROR `core::marker::Copy` is not implemented\n \n-    // owned pointers are not ok\n+    // boxes are not ok\n     assert_copy::<Box<isize>>();   //~ ERROR `core::marker::Copy` is not implemented\n     assert_copy::<String>();   //~ ERROR `core::marker::Copy` is not implemented\n     assert_copy::<Vec<isize> >(); //~ ERROR `core::marker::Copy` is not implemented"}, {"sha": "6b0faa2207b25f942583936b2a8fb99e11abe7fe", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=a3cd5eb1bd53a919bfc76da06e05e0d32c410e5b", "patch": "@@ -10,7 +10,7 @@\n //\n \n pub trait Clone2 {\n-    /// Returns a copy of the value. The contents of owned pointers\n+    /// Returns a copy of the value. The contents of boxes\n     /// are copied to maintain uniqueness, while the contents of\n     /// managed pointers are not copied.\n     fn clone(&self) -> Self;"}]}