{"sha": "d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YzE2MmFlZmQ4YmNiMjhhMDBiZTVkZmYwMTliZjM0NWU0Y2NiYmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-21T09:52:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-21T09:52:20Z"}, "message": "Rollup merge of #63721 - Mark-Simulacrum:decouple-error-index, r=matthewjasper\n\nDo not emit JSON dumps of diagnostic codes\n\nThis decouples the error index generator from libsyntax for the most part (though it still depends on librustdoc for the markdown parsing and generation).\n\nFixes #34588", "tree": {"sha": "653946e99c5091be7adc163bae3d0a794a416a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653946e99c5091be7adc163bae3d0a794a416a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXRRUCRBK7hj4Ov3rIwAAdHIIAJcmoCD3mgKHWSt58SBjsYfg\nw2m2e7jhiw9k290Ve7aXbk3af/PEFOIHtO7cqSQ+QCvo9ijdkN4kIj3/J0qKYxqv\nEq2x0QQ5dpvkDmzJRIeD8GVHqx45FsGmF6Hq9rkDUFISXtJ72msqbRxxObj/u4TP\nsriCmrK4tQBCHYUPBRrRu1Vd0uexxlsD53W3afOAMxclBlF5+VfpicJjuGYbLwKN\nZk7bc4ZhqjL7C/kwN4M91RADNtK/PARzUTpxfOm2esyyeEyOoh5t0IglPTdABpbC\nqTBEQild8SEjfD7JCjKuEBAwgEJJuJvvEDT3iSjgausbuxhmvbb10OtZ1B5lel0=\n=Yckr\n-----END PGP SIGNATURE-----\n", "payload": "tree 653946e99c5091be7adc163bae3d0a794a416a1b\nparent bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008\nparent 72e2cfd93438ef0109cbaca9f961efa5ac6d4f84\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566381140 +0200\ncommitter GitHub <noreply@github.com> 1566381140 +0200\n\nRollup merge of #63721 - Mark-Simulacrum:decouple-error-index, r=matthewjasper\n\nDo not emit JSON dumps of diagnostic codes\n\nThis decouples the error index generator from libsyntax for the most part (though it still depends on librustdoc for the markdown parsing and generation).\n\nFixes #34588\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "html_url": "https://github.com/rust-lang/rust/commit/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "html_url": "https://github.com/rust-lang/rust/commit/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008"}, {"sha": "72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "html_url": "https://github.com/rust-lang/rust/commit/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84"}], "stats": {"total": 252, "additions": 93, "deletions": 159}, "files": [{"sha": "b40f1679aaeae943c1332b2c603eb6aef4068a80", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "patch": "@@ -946,6 +946,7 @@ name = \"error_index_generator\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustdoc\",\n+ \"walkdir\",\n ]\n \n [[package]]"}, {"sha": "4f96c12fc1dddb3b2bf856bc503412a2fca26c6e", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "patch": "@@ -825,8 +825,7 @@ impl Step for ErrorIndex {\n         index.arg(crate::channel::CFG_RELEASE_NUM);\n \n         // FIXME: shouldn't have to pass this env var\n-        index.env(\"CFG_BUILD\", &builder.config.build)\n-             .env(\"RUSTC_ERROR_METADATA_DST\", builder.extended_error_dir());\n+        index.env(\"CFG_BUILD\", &builder.config.build);\n \n         builder.run(&mut index);\n     }"}, {"sha": "87bd5cbacfffaccaf59c342fae379a2b91a58b55", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "patch": "@@ -1535,8 +1535,7 @@ impl Step for ErrorIndex {\n         );\n         tool.arg(\"markdown\")\n             .arg(&output)\n-            .env(\"CFG_BUILD\", &builder.config.build)\n-            .env(\"RUSTC_ERROR_METADATA_DST\", builder.extended_error_dir());\n+            .env(\"CFG_BUILD\", &builder.config.build);\n \n         builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n         let _time = util::timeit(&builder);"}, {"sha": "53f37bb10bdc0ecfb61bb228826c27c66fea896d", "filename": "src/libsyntax/diagnostics/metadata.rs", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,93 +0,0 @@\n-//! This module contains utilities for outputting metadata for diagnostic errors.\n-//!\n-//! Each set of errors is mapped to a metadata file by a name, which is\n-//! currently always a crate name.\n-\n-use std::collections::BTreeMap;\n-use std::env;\n-use std::fs::{remove_file, create_dir_all, File};\n-use std::io::Write;\n-use std::path::PathBuf;\n-use std::error::Error;\n-use rustc_serialize::json::as_json;\n-\n-use syntax_pos::{Span, FileName};\n-\n-use crate::ext::base::ExtCtxt;\n-use crate::diagnostics::plugin::{ErrorMap, ErrorInfo};\n-\n-/// JSON encodable/decodable version of `ErrorInfo`.\n-#[derive(PartialEq, RustcDecodable, RustcEncodable)]\n-pub struct ErrorMetadata {\n-    pub description: Option<String>,\n-    pub use_site: Option<ErrorLocation>\n-}\n-\n-/// Mapping from error codes to metadata that can be (de)serialized.\n-pub type ErrorMetadataMap = BTreeMap<String, ErrorMetadata>;\n-\n-/// JSON encodable error location type with filename and line number.\n-#[derive(PartialEq, RustcDecodable, RustcEncodable)]\n-pub struct ErrorLocation {\n-    pub filename: FileName,\n-    pub line: usize\n-}\n-\n-impl ErrorLocation {\n-    /// Creates an error location from a span.\n-    pub fn from_span(ecx: &ExtCtxt<'_>, sp: Span) -> ErrorLocation {\n-        let loc = ecx.source_map().lookup_char_pos(sp.lo());\n-        ErrorLocation {\n-            filename: loc.file.name.clone(),\n-            line: loc.line\n-        }\n-    }\n-}\n-\n-/// Gets the directory where metadata for a given `prefix` should be stored.\n-///\n-/// See `output_metadata`.\n-pub fn get_metadata_dir(prefix: &str) -> PathBuf {\n-    env::var_os(\"RUSTC_ERROR_METADATA_DST\")\n-        .map(PathBuf::from)\n-        .expect(\"env var `RUSTC_ERROR_METADATA_DST` isn't set\")\n-        .join(prefix)\n-}\n-\n-/// Map `name` to a path in the given directory: <directory>/<name>.json\n-fn get_metadata_path(directory: PathBuf, name: &str) -> PathBuf {\n-    directory.join(format!(\"{}.json\", name))\n-}\n-\n-/// Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.\n-///\n-/// For our current purposes the prefix is the target architecture and the name is a crate name.\n-/// If an error occurs steps will be taken to ensure that no file is created.\n-pub fn output_metadata(ecx: &ExtCtxt<'_>, prefix: &str, name: &str, err_map: &ErrorMap)\n-    -> Result<(), Box<dyn Error>>\n-{\n-    // Create the directory to place the file in.\n-    let metadata_dir = get_metadata_dir(prefix);\n-    create_dir_all(&metadata_dir)?;\n-\n-    // Open the metadata file.\n-    let metadata_path = get_metadata_path(metadata_dir, name);\n-    let mut metadata_file = File::create(&metadata_path)?;\n-\n-    // Construct a serializable map.\n-    let json_map = err_map.iter().map(|(k, &ErrorInfo { description, use_site })| {\n-        let key = k.as_str().to_string();\n-        let value = ErrorMetadata {\n-            description: description.map(|n| n.as_str().to_string()),\n-            use_site: use_site.map(|sp| ErrorLocation::from_span(ecx, sp))\n-        };\n-        (key, value)\n-    }).collect::<ErrorMetadataMap>();\n-\n-    // Write the data to the file, deleting it if the write fails.\n-    let result = write!(&mut metadata_file, \"{}\", as_json(&json_map));\n-    if result.is_err() {\n-        remove_file(&metadata_path)?;\n-    }\n-    Ok(result?)\n-}"}, {"sha": "e9a55af52e8780001625dbd79a97fd9632edbe62", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "patch": "@@ -1,5 +1,4 @@\n use std::collections::BTreeMap;\n-use std::env;\n \n use crate::ast::{self, Ident, Name};\n use crate::source_map;\n@@ -12,8 +11,6 @@ use crate::tokenstream::{TokenTree};\n use smallvec::smallvec;\n use syntax_pos::Span;\n \n-use crate::diagnostics::metadata::output_metadata;\n-\n pub use errors::*;\n \n // Maximum width of any line in an extended error description (inclusive).\n@@ -127,36 +124,13 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                           token_tree: &[TokenTree])\n                                           -> Box<dyn MacResult+'cx> {\n     assert_eq!(token_tree.len(), 3);\n-    let (crate_name, ident) = match (&token_tree[0], &token_tree[2]) {\n-        (\n-            // Crate name.\n-            &TokenTree::Token(Token { kind: token::Ident(crate_name, _), .. }),\n-            // DIAGNOSTICS ident.\n-            &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n-        ) => (crate_name, Ident::new(name, span)),\n+    let ident = match &token_tree[2] {\n+        // DIAGNOSTICS ident.\n+        &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n+        => Ident::new(name, span),\n         _ => unreachable!()\n     };\n \n-    // Output error metadata to `tmp/extended-errors/<target arch>/<crate name>.json`\n-    if let Ok(target_triple) = env::var(\"CFG_COMPILER_HOST_TRIPLE\") {\n-        ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-            if let Err(e) = output_metadata(ecx,\n-                                            &target_triple,\n-                                            &crate_name.as_str(),\n-                                            diagnostics) {\n-                ecx.span_bug(span, &format!(\n-                    \"error writing metadata for triple `{}` and crate `{}`, error: {}, \\\n-                     cause: {:?}\",\n-                    target_triple, crate_name, e.description(), e.source()\n-                ));\n-            }\n-        });\n-    } else {\n-        ecx.span_err(span, &format!(\n-            \"failed to write metadata for crate `{}` because $CFG_COMPILER_HOST_TRIPLE is not set\",\n-            crate_name));\n-    }\n-\n     // Construct the output expression.\n     let (count, expr) =\n         ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {"}, {"sha": "1741932c1b80e30f86abfe47d345b37678f24068", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "patch": "@@ -124,7 +124,6 @@ pub mod diagnostics {\n     #[macro_use]\n     pub mod macros;\n     pub mod plugin;\n-    pub mod metadata;\n }\n \n // N.B., this module needs to be declared first so diagnostics are"}, {"sha": "992af261b8352f1495f91e8f3d3d01515df40440", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "patch": "@@ -3,10 +3,14 @@ authors = [\"The Rust Project Developers\"]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n edition = \"2018\"\n+build = \"build.rs\"\n \n [dependencies]\n rustdoc = { path = \"../../librustdoc\" }\n \n+[build-dependencies]\n+walkdir = \"2\"\n+\n [[bin]]\n name = \"error_index_generator\"\n path = \"main.rs\""}, {"sha": "2ac7351fce469a0d599aa5ff1b357fe1cdf0a995", "filename": "src/tools/error_index_generator/build.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbuild.rs?ref=d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "patch": "@@ -0,0 +1,64 @@\n+use walkdir::WalkDir;\n+use std::path::PathBuf;\n+use std::{env, fs};\n+\n+fn main() {\n+    // The src directory (we are in src/tools/error_index_generator)\n+    // Note that we could skip one of the .. but this ensures we at least loosely find the right\n+    // directory.\n+    let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n+    let dest = out_dir.join(\"error_codes.rs\");\n+    let mut idx = 0;\n+    for entry in WalkDir::new(\"../../../src\") {\n+        let entry = entry.unwrap();\n+        if entry.file_name() == \"error_codes.rs\" {\n+            println!(\"cargo:rerun-if-changed={}\", entry.path().to_str().unwrap());\n+            let file = fs::read_to_string(entry.path()).unwrap()\n+                .replace(\"use syntax::{register_diagnostics, register_long_diagnostics};\", \"\")\n+                .replace(\"use syntax::register_diagnostics;\", \"\")\n+                .replace(\"use syntax::register_long_diagnostics;\", \"\");\n+            let contents = format!(\"(|| {{\\n{}\\n}})();\", file);\n+\n+            fs::write(&out_dir.join(&format!(\"error_{}.rs\", idx)), &contents).unwrap();\n+\n+            idx += 1;\n+        }\n+    }\n+\n+    let mut all = String::new();\n+    all.push_str(\"fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\\n\");\n+    all.push_str(\"let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\\n\");\n+    all.push_str(r#\"\n+macro_rules! register_diagnostics {\n+    ($($code:tt),*) => {{\n+        long_codes.extend([$(\n+            stringify!($code),\n+        )*].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());\n+    }};\n+    ($($code:tt),*,) => {{\n+        long_codes.extend([$(\n+            stringify!($code),\n+        )*].iter().cloned().map(|s| (s, None)));\n+    }}\n+}\n+\n+macro_rules! register_long_diagnostics {\n+    ($($code:tt: $description:tt),*) => {\n+        {long_codes.extend([$(\n+            (stringify!($code), Some(stringify!($description))),\n+        )*].iter());}\n+    };\n+    ($($code:tt: $description:tt),*,) => {\n+        {long_codes.extend([$(\n+            (stringify!($code), Some(stringify!($description))),\n+        )*].iter());}\n+    }\n+}\"#);\n+    for idx in 0..idx {\n+        all.push_str(&format!(r#\"include!(concat!(env!(\"OUT_DIR\"), \"/error_{}.rs\"));\"#, idx));\n+    }\n+    all.push_str(\"\\nlong_codes\\n\");\n+    all.push_str(\"}\\n\");\n+\n+    fs::write(&dest, all).unwrap();\n+}"}, {"sha": "c4826a0c31d6cb457500c33b9f4f7a9b28df36d4", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c162aefd8bcb28a00be5dff019bf345e4ccbbe/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=d7c162aefd8bcb28a00be5dff019bf345e4ccbbe", "patch": "@@ -2,22 +2,26 @@\n \n extern crate env_logger;\n extern crate syntax;\n-extern crate serialize as rustc_serialize;\n \n use std::collections::BTreeMap;\n use std::env;\n use std::error::Error;\n-use std::fs::{self, read_dir, File};\n+use std::fs::File;\n use std::io::Write;\n use std::path::Path;\n use std::path::PathBuf;\n use std::cell::RefCell;\n \n use syntax::edition::DEFAULT_EDITION;\n-use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n use rustdoc::html::markdown::{Markdown, IdMap, ErrorCodes, Playground};\n-use rustc_serialize::json;\n+\n+pub struct ErrorMetadata {\n+    pub description: Option<String>,\n+}\n+\n+/// Mapping from error codes to metadata that can be (de)serialized.\n+pub type ErrorMetadataMap = BTreeMap<String, ErrorMetadata>;\n \n enum OutputFormat {\n     HTML(HTMLFormatter),\n@@ -80,11 +84,7 @@ impl Formatter for HTMLFormatter {\n             Some(_) => \"error-described\",\n             None => \"error-undescribed\",\n         };\n-        let use_desc = match info.use_site {\n-            Some(_) => \"error-used\",\n-            None => \"error-unused\",\n-        };\n-        write!(output, \"<div class=\\\"{} {}\\\">\", desc_desc, use_desc)?;\n+        write!(output, \"<div class=\\\"{}\\\">\", desc_desc)?;\n \n         // Error title (with self-link).\n         write!(output,\n@@ -199,25 +199,6 @@ impl Formatter for MarkdownFormatter {\n     }\n }\n \n-/// Loads all the metadata files from `metadata_dir` into an in-memory map.\n-fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<dyn Error>> {\n-    let mut all_errors = BTreeMap::new();\n-\n-    for entry in read_dir(metadata_dir)? {\n-        let path = entry?.path();\n-\n-        let metadata_str = fs::read_to_string(&path)?;\n-\n-        let some_errors: ErrorMetadataMap = json::decode(&metadata_str)?;\n-\n-        for (err_code, info) in some_errors {\n-            all_errors.insert(err_code, info);\n-        }\n-    }\n-\n-    Ok(all_errors)\n-}\n-\n /// Output an HTML page for the errors in `err_map` to `output_path`.\n fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Path,\n                                    formatter: T) -> Result<(), Box<dyn Error>> {\n@@ -234,9 +215,13 @@ fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Pat\n }\n \n fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Error>> {\n-    let build_arch = env::var(\"CFG_BUILD\")?;\n-    let metadata_dir = get_metadata_dir(&build_arch);\n-    let err_map = load_all_errors(&metadata_dir)?;\n+    let long_codes = register_all();\n+    let mut err_map = BTreeMap::new();\n+    for (code, desc) in long_codes {\n+        err_map.insert(code.to_string(), ErrorMetadata {\n+            description: desc.map(String::from),\n+        });\n+    }\n     match format {\n         OutputFormat::Unknown(s)  => panic!(\"Unknown output format: {}\", s),\n         OutputFormat::HTML(h)     => render_error_page(&err_map, dst, h)?,\n@@ -272,3 +257,5 @@ fn main() {\n         panic!(\"{}\", e.description());\n     }\n }\n+\n+include!(concat!(env!(\"OUT_DIR\"), \"/error_codes.rs\"));"}]}