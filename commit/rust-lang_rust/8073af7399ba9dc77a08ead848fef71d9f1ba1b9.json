{"sha": "8073af7399ba9dc77a08ead848fef71d9f1ba1b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNzNhZjczOTliYTlkYzc3YTA4ZWFkODQ4ZmVmNzFkOWYxYmExYjk=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-29T04:22:58Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-29T04:22:58Z"}, "message": "Tests need not be public", "tree": {"sha": "633b05499369121ec9011bd8390678ecd2591369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/633b05499369121ec9011bd8390678ecd2591369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8073af7399ba9dc77a08ead848fef71d9f1ba1b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8073af7399ba9dc77a08ead848fef71d9f1ba1b9", "html_url": "https://github.com/rust-lang/rust/commit/8073af7399ba9dc77a08ead848fef71d9f1ba1b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8073af7399ba9dc77a08ead848fef71d9f1ba1b9/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5abe76359d67283dbfd8067a475d3d2c249312", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5abe76359d67283dbfd8067a475d3d2c249312", "html_url": "https://github.com/rust-lang/rust/commit/cd5abe76359d67283dbfd8067a475d3d2c249312"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "9a682d8bd1157d4e534f7b3f17278f0c6cf15b2b", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8073af7399ba9dc77a08ead848fef71d9f1ba1b9/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8073af7399ba9dc77a08ead848fef71d9f1ba1b9/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=8073af7399ba9dc77a08ead848fef71d9f1ba1b9", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn op1() -> Result<isize, &'static str> { Ok(666) }\n-pub fn op2() -> Result<isize, &'static str> { Err(\"sadface\") }\n+fn op1() -> Result<isize, &'static str> { Ok(666) }\n+fn op2() -> Result<isize, &'static str> { Err(\"sadface\") }\n \n #[test]\n-pub fn test_and() {\n+fn test_and() {\n     assert_eq!(op1().and(Ok(667)).unwrap(), 667);\n     assert_eq!(op1().and(Err::<i32, &'static str>(\"bad\")).unwrap_err(),\n                \"bad\");\n@@ -23,7 +23,7 @@ pub fn test_and() {\n }\n \n #[test]\n-pub fn test_and_then() {\n+fn test_and_then() {\n     assert_eq!(op1().and_then(|i| Ok::<isize, &'static str>(i + 1)).unwrap(), 667);\n     assert_eq!(op1().and_then(|_| Err::<isize, &'static str>(\"bad\")).unwrap_err(),\n                \"bad\");\n@@ -35,7 +35,7 @@ pub fn test_and_then() {\n }\n \n #[test]\n-pub fn test_or() {\n+fn test_or() {\n     assert_eq!(op1().or(Ok::<_, &'static str>(667)).unwrap(), 666);\n     assert_eq!(op1().or(Err(\"bad\")).unwrap(), 666);\n \n@@ -44,7 +44,7 @@ pub fn test_or() {\n }\n \n #[test]\n-pub fn test_or_else() {\n+fn test_or_else() {\n     assert_eq!(op1().or_else(|_| Ok::<isize, &'static str>(667)).unwrap(), 666);\n     assert_eq!(op1().or_else(|e| Err::<isize, &'static str>(e)).unwrap(), 666);\n \n@@ -54,13 +54,13 @@ pub fn test_or_else() {\n }\n \n #[test]\n-pub fn test_impl_map() {\n+fn test_impl_map() {\n     assert!(Ok::<isize, isize>(1).map(|x| x + 1) == Ok(2));\n     assert!(Err::<isize, isize>(1).map(|x| x + 1) == Err(1));\n }\n \n #[test]\n-pub fn test_impl_map_err() {\n+fn test_impl_map_err() {\n     assert!(Ok::<isize, isize>(1).map_err(|x| x + 1) == Ok(1));\n     assert!(Err::<isize, isize>(1).map_err(|x| x + 1) == Err(2));\n }\n@@ -89,7 +89,7 @@ fn test_collect() {\n */\n \n #[test]\n-pub fn test_fmt_default() {\n+fn test_fmt_default() {\n     let ok: Result<isize, &'static str> = Ok(100);\n     let err: Result<isize, &'static str> = Err(\"Err\");\n \n@@ -100,7 +100,7 @@ pub fn test_fmt_default() {\n }\n \n #[test]\n-pub fn test_unwrap_or() {\n+fn test_unwrap_or() {\n     let ok: Result<isize, &'static str> = Ok(100);\n     let ok_err: Result<isize, &'static str> = Err(\"Err\");\n \n@@ -109,7 +109,7 @@ pub fn test_unwrap_or() {\n }\n \n #[test]\n-pub fn test_unwrap_or_else() {\n+fn test_unwrap_or_else() {\n     fn handler(msg: &'static str) -> isize {\n         if msg == \"I got this.\" {\n             50"}]}