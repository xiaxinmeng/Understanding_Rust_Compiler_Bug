{"sha": "4df2654f828b1346dab75166ddca7222666b5939", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZjI2NTRmODI4YjEzNDZkYWI3NTE2NmRkY2E3MjIyNjY2YjU5Mzk=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-25T22:04:50Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-26T01:01:37Z"}, "message": "Make it possible to make built-in tt syntax extensions", "tree": {"sha": "584c11a146e698538b8b6da99eb980404c8bd90e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/584c11a146e698538b8b6da99eb980404c8bd90e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4df2654f828b1346dab75166ddca7222666b5939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4df2654f828b1346dab75166ddca7222666b5939", "html_url": "https://github.com/rust-lang/rust/commit/4df2654f828b1346dab75166ddca7222666b5939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4df2654f828b1346dab75166ddca7222666b5939/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f104954a67ad736244ce212467290c836394fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f104954a67ad736244ce212467290c836394fad", "html_url": "https://github.com/rust-lang/rust/commit/4f104954a67ad736244ce212467290c836394fad"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "6c93dbcd7ef390a2df92212f17099d3df2ab8f91", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4df2654f828b1346dab75166ddca7222666b5939/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2654f828b1346dab75166ddca7222666b5939/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4df2654f828b1346dab75166ddca7222666b5939", "patch": "@@ -6,19 +6,23 @@ import std::map::str_hash;\n \n type syntax_expander_ =\n     fn@(ext_ctxt, span, ast::mac_arg, ast::mac_body) -> @ast::expr;\n-type syntax_expander = {\n-    expander: syntax_expander_,\n-    span: option<span>};\n+type syntax_expander = {expander: syntax_expander_, span: option<span>};\n+\n type macro_def = {ident: ast::ident, ext: syntax_extension};\n type macro_definer =\n     fn@(ext_ctxt, span, ast::mac_arg, ast::mac_body) -> macro_def;\n type item_decorator =\n     fn@(ext_ctxt, span, ast::meta_item, [@ast::item]) -> [@ast::item];\n \n+type syntax_expander_tt = {expander: syntax_expander_tt_, span: option<span>};\n+type syntax_expander_tt_ = fn@(ext_ctxt, span, ast::token_tree) -> @ast::expr;\n+\n enum syntax_extension {\n     normal(syntax_expander),\n     macro_defining(macro_definer),\n     item_decorator(item_decorator),\n+\n+    normal_tt(syntax_expander_tt)\n }\n \n // A temporary hard-coded map of methods for expanding syntax extension"}, {"sha": "d7bb7835822b9f590dcbd5a4a71435e30c42cd51", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4df2654f828b1346dab75166ddca7222666b5939/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2654f828b1346dab75166ddca7222666b5939/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4df2654f828b1346dab75166ddca7222666b5939", "patch": "@@ -47,6 +47,39 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                     exts.insert(*named_extension.ident, named_extension.ext);\n                     (ast::expr_rec([], none), s)\n                   }\n+                  some(normal_tt(_)) {\n+                    cx.span_fatal(pth.span,\n+                                  #fmt[\"this tt-style macro should be \\\n+                                        invoked '%s!{...}'\", *extname])\n+                  }\n+                }\n+              }\n+              mac_invoc_tt(pth, tt) {\n+                assert (vec::len(pth.idents) > 0u);\n+                let extname = pth.idents[0];\n+                alt exts.find(*extname) {\n+                  none {\n+                    cx.span_fatal(pth.span,\n+                                  #fmt[\"macro undefined: '%s'\", *extname])\n+                  }\n+                  some(normal_tt({expander: exp, span: exp_sp})) {\n+                    let expanded = exp(cx, pth.span, tt);\n+\n+                    cx.bt_push(expanded_from({call_site: s,\n+                                callie: {name: *extname, span: exp_sp}}));\n+                    //keep going, outside-in\n+                    let fully_expanded = fld.fold_expr(expanded).node;\n+                    cx.bt_pop();\n+\n+                    (fully_expanded, s)\n+\n+                  }\n+                  _ {\n+                    cx.span_fatal(pth.span,\n+                                  #fmt[\"'%s' is not a tt-style macro\",\n+                                       *extname])\n+                  }\n+\n                 }\n               }\n               _ { cx.span_bug(mac.span, \"naked syntactic bit\") }\n@@ -75,7 +108,8 @@ fn expand_mod_items(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n               ast::meta_list(n, _) { n }\n             };\n             alt exts.find(*mname) {\n-              none | some(normal(_)) | some(macro_defining(_)) {\n+              none | some(normal(_)) | some(macro_defining(_))\n+              | some(normal_tt(_)) {\n                 items\n               }\n "}, {"sha": "13b68b2ce70f7975ba66f01d48663c9b2b8f5ac6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4df2654f828b1346dab75166ddca7222666b5939/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2654f828b1346dab75166ddca7222666b5939/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4df2654f828b1346dab75166ddca7222666b5939", "patch": "@@ -883,8 +883,17 @@ class parser {\n             is_ident(self.token) && !self.is_keyword(\"true\") &&\n             !self.is_keyword(\"false\") {\n             let pth = self.parse_path_with_tps(true);\n-            hi = pth.span.hi;\n-            ex = expr_path(pth);\n+\n+            /* `!`, as an operator, is prefix, so we know this isn't that */\n+            if self.token == token::NOT {\n+                self.bump();\n+                let m_body = self.parse_token_tree();\n+                let hi = self.span.hi;\n+                ret pexpr(self.mk_mac_expr(lo, hi, mac_invoc_tt(pth,m_body)));\n+            } else {\n+                hi = pth.span.hi;\n+                ex = expr_path(pth);\n+            }\n         } else {\n             let lit = self.parse_lit();\n             hi = lit.span.hi;"}]}