{"sha": "9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMmFhYjA1Y2NhZDllZTlhZDE2MzdmNTdkZWYzYTgyZWMyZWJjNjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-15T20:23:12Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-15T20:23:12Z"}, "message": "Merge pull request #767 from mcarton/fix-ice\n\nFix #765 & #763 & #768", "tree": {"sha": "de3f9a3ddf8d30376c1426bb58692e770f2a1d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3f9a3ddf8d30376c1426bb58692e770f2a1d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "html_url": "https://github.com/rust-lang/rust/commit/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "893d6e8bf2ef5c8cde1946a223471cfa061370ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/893d6e8bf2ef5c8cde1946a223471cfa061370ee", "html_url": "https://github.com/rust-lang/rust/commit/893d6e8bf2ef5c8cde1946a223471cfa061370ee"}, {"sha": "bd5af32cb1589a9c8b00f0be2a0e2c24dfdbfc6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5af32cb1589a9c8b00f0be2a0e2c24dfdbfc6d", "html_url": "https://github.com/rust-lang/rust/commit/bd5af32cb1589a9c8b00f0be2a0e2c24dfdbfc6d"}], "stats": {"total": 113, "additions": 80, "deletions": 33}, "files": [{"sha": "ece66ae20a239713d0064e72706b8ddaca6a1628", "filename": "src/array_indexing.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/src%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/src%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farray_indexing.rs?ref=9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "patch": "@@ -83,7 +83,7 @@ impl LateLintPass for ArrayIndexing {\n                         eval_const_expr_partial(cx.tcx, end, ExprTypeChecked, None)).map(|v| v.ok());\n \n                     if let Some((start, end)) = to_const_range(start, end, range.limits, size) {\n-                        if start >= size || end >= size {\n+                        if start > size || end > size {\n                             utils::span_lint(cx,\n                                              OUT_OF_BOUNDS_INDEXING,\n                                              e.span,\n@@ -109,14 +109,11 @@ impl LateLintPass for ArrayIndexing {\n     }\n }\n \n-/// Returns an option containing a tuple with the start and end (exclusive) of the range\n-///\n-/// Note: we assume the start and the end of the range are unsigned, since array slicing\n-/// works only on usize\n+/// Returns an option containing a tuple with the start and end (exclusive) of the range.\n fn to_const_range(start: Option<Option<ConstVal>>,\n-                    end: Option<Option<ConstVal>>,\n-                    limits: RangeLimits,\n-                    array_size: ConstInt)\n+                  end: Option<Option<ConstVal>>,\n+                  limits: RangeLimits,\n+                  array_size: ConstInt)\n                     -> Option<(ConstInt, ConstInt)> {\n     let start = match start {\n         Some(Some(ConstVal::Integral(x))) => x,\n@@ -127,13 +124,13 @@ fn to_const_range(start: Option<Option<ConstVal>>,\n     let end = match end {\n         Some(Some(ConstVal::Integral(x))) => {\n             if limits == RangeLimits::Closed {\n-                x\n+                (x + ConstInt::Infer(1)).expect(\"such a big array is not realistic\")\n             } else {\n-                (x - ConstInt::Infer(1)).expect(\"x > 0\")\n+                x\n             }\n         }\n         Some(_) => return None,\n-        None => (array_size - ConstInt::Infer(1)).expect(\"array_size > 0\"),\n+        None => array_size\n     };\n \n     Some((start, end))"}, {"sha": "8b9bf9f1f1976ea0f46674e7f50ba3d764035b0e", "filename": "src/panic.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/src%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/src%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpanic.rs?ref=9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::ast::LitKind;\n-use utils::{span_lint, in_external_macro, match_path, BEGIN_UNWIND};\n+use utils::{span_lint, is_direct_expn_of, match_path, BEGIN_UNWIND};\n \n /// **What it does:** This lint checks for missing parameters in `panic!`.\n ///\n@@ -28,24 +28,20 @@ impl LintPass for PanicPass {\n impl LateLintPass for PanicPass {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if_let_chain! {[\n-            in_external_macro(cx, expr.span),\n             let ExprBlock(ref block) = expr.node,\n             let Some(ref ex) = block.expr,\n             let ExprCall(ref fun, ref params) = ex.node,\n             params.len() == 2,\n             let ExprPath(None, ref path) = fun.node,\n             match_path(path, &BEGIN_UNWIND),\n             let ExprLit(ref lit) = params[0].node,\n+            is_direct_expn_of(cx, params[0].span, \"panic\").is_some(),\n             let LitKind::Str(ref string, _) = lit.node,\n             let Some(par) = string.find('{'),\n-            string[par..].contains('}'),\n-            let Some(sp) = cx.sess().codemap()\n-                             .with_expn_info(expr.span.expn_id,\n-                                             |info| info.map(|i| i.call_site))\n+            string[par..].contains('}')\n         ], {\n-\n-            span_lint(cx, PANIC_PARAMS, sp,\n-                      \"You probably are missing some parameter in your `panic!` call\");\n+            span_lint(cx, PANIC_PARAMS, params[0].span,\n+                      \"you probably are missing some parameter in your format string\");\n         }}\n     }\n }"}, {"sha": "aa9cdcce50cbd1afdcb534e886812a76ee2a9b18", "filename": "src/strings.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "patch": "@@ -8,7 +8,7 @@ use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n use utils::STRING_PATH;\n use utils::SpanlessEq;\n-use utils::{match_type, span_lint, walk_ptrs_ty, get_parent_expr};\n+use utils::{match_type, span_lint, span_lint_and_then, walk_ptrs_ty, get_parent_expr};\n \n /// **What it does:** This lint matches code of the form `x = x + y` (without `let`!).\n ///\n@@ -140,12 +140,19 @@ impl LateLintPass for StringLitAsBytes {\n             if name.node.as_str() == \"as_bytes\" {\n                 if let ExprLit(ref lit) = args[0].node {\n                     if let LitKind::Str(ref lit_content, _) = lit.node {\n-                        if lit_content.chars().all(|c| c.is_ascii()) && !in_macro(cx, e.span) {\n-                            let msg = format!(\"calling `as_bytes()` on a string literal. \\\n-                                               Consider using a byte string literal instead: \\\n-                                               `b{}`\",\n-                                              snippet(cx, args[0].span, r#\"\"foo\"\"#));\n-                            span_lint(cx, STRING_LIT_AS_BYTES, e.span, &msg);\n+                        if lit_content.chars().all(|c| c.is_ascii()) && !in_macro(cx, args[0].span) {\n+                            span_lint_and_then(cx,\n+                                               STRING_LIT_AS_BYTES,\n+                                               e.span,\n+                                               \"calling `as_bytes()` on a string literal\",\n+                                               |db| {\n+                                                   let sugg = format!(\"b{}\",\n+                                                                      snippet(cx, args[0].span, r#\"\"foo\"\"#));\n+                                                   db.span_suggestion(e.span,\n+                                                                      \"consider using a byte string literal instead\",\n+                                                                      sugg);\n+                                               });\n+\n                         }\n                     }\n                 }"}, {"sha": "3fb52318b6f8ba1ff3b53ad68b092f0e11e54f1e", "filename": "src/utils/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "patch": "@@ -604,6 +604,7 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n }\n \n /// Return the pre-expansion span if is this comes from an expansion of the macro `name`.\n+/// See also `is_direct_expn_of`.\n pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span> {\n     loop {\n         let span_name_span = cx.tcx\n@@ -619,6 +620,25 @@ pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span>\n     }\n }\n \n+/// Return the pre-expansion span if is this directly comes from an expansion of the macro `name`.\n+/// The difference with `is_expn_of` is that in\n+/// ```rust,ignore\n+/// foo!(bar!(42));\n+/// ```\n+/// `42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only `bar!` by\n+/// `is_direct_expn_of`.\n+pub fn is_direct_expn_of(cx: &LateContext, span: Span, name: &str) -> Option<Span> {\n+    let span_name_span = cx.tcx\n+                           .sess\n+                           .codemap()\n+                           .with_expn_info(span.expn_id, |expn| expn.map(|ei| (ei.callee.name(), ei.call_site)));\n+\n+    match span_name_span {\n+        Some((mac_name, new_span)) if mac_name.as_str() == name => Some(new_span),\n+        _ => None,\n+    }\n+}\n+\n /// Returns index of character after first CamelCase component of `s`\n pub fn camel_case_until(s: &str) -> usize {\n     let mut iter = s.char_indices();"}, {"sha": "35fadf8c1e4add72b5dc751f12004cc5a925c1af", "filename": "tests/compile-fail/array_indexing.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "patch": "@@ -16,6 +16,8 @@ fn main() {\n     &x[0...4]; //~ERROR: range is out of bounds\n     &x[..];\n     &x[1..];\n+    &x[4..];\n+    &x[5..]; //~ERROR: range is out of bounds\n     &x[..4];\n     &x[..5]; //~ERROR: range is out of bounds\n \n@@ -24,4 +26,16 @@ fn main() {\n     &y[1..2]; //~ERROR: slicing may panic\n     &y[..];\n     &y[0...4]; //~ERROR: slicing may panic\n+\n+    let empty: [i8; 0] = [];\n+    empty[0]; //~ERROR: const index is out of bounds\n+    &empty[1..5]; //~ERROR: range is out of bounds\n+    &empty[0...4]; //~ERROR: range is out of bounds\n+    &empty[..];\n+    &empty[0..];\n+    &empty[0..0];\n+    &empty[0...0]; //~ERROR: range is out of bounds\n+    &empty[..0];\n+    &empty[1..]; //~ERROR: range is out of bounds\n+    &empty[..4]; //~ERROR: range is out of bounds\n }"}, {"sha": "7e535d69b698ad504120b9c13468d93f28bedc34", "filename": "tests/compile-fail/panic.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/tests%2Fcompile-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/tests%2Fcompile-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic.rs?ref=9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "patch": "@@ -1,26 +1,32 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[deny(panic_params)]\n+#![deny(panic_params)]\n \n fn missing() {\n     if true {\n-        panic!(\"{}\"); //~ERROR: You probably are missing some parameter\n+        panic!(\"{}\"); //~ERROR: you probably are missing some parameter\n+    } else if false {\n+        panic!(\"{:?}\"); //~ERROR: you probably are missing some parameter\n     } else {\n-        panic!(\"{:?}\"); //~ERROR: You probably are missing some parameter\n+        assert!(true, \"here be missing values: {}\"); //~ERROR you probably are missing some parameter\n     }\n }\n \n fn ok_single() {\n     panic!(\"foo bar\");\n }\n \n+fn ok_inner() {\n+    // Test for #768\n+    assert!(\"foo bar\".contains(&format!(\"foo {}\", \"bar\")));\n+}\n+\n fn ok_multiple() {\n     panic!(\"{}\", \"This is {ok}\");\n }\n \n fn ok_bracket() {\n-    // the match is just here because of #759, it serves no other purpose for the lint\n     match 42 {\n         1337 => panic!(\"{so is this\"),\n         666 => panic!(\"so is this}\"),\n@@ -33,4 +39,5 @@ fn main() {\n     ok_single();\n     ok_multiple();\n     ok_bracket();\n+    ok_inner();\n }"}, {"sha": "656349ba621848c1845413c59d25f1898921c5df", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "patch": "@@ -47,9 +47,15 @@ fn both() {\n #[allow(dead_code, unused_variables)]\n #[deny(string_lit_as_bytes)]\n fn str_lit_as_bytes() {\n-    let bs = \"hello there\".as_bytes(); //~ERROR calling `as_bytes()`\n+    let bs = \"hello there\".as_bytes();\n+    //~^ERROR calling `as_bytes()`\n+    //~|HELP byte string literal\n+    //~|SUGGESTION b\"hello there\"\n+\n     // no warning, because this cannot be written as a byte string literal:\n     let ubs = \"\u2603\".as_bytes();\n+\n+    let strify = stringify!(foobar).as_bytes();\n }\n \n fn main() {"}, {"sha": "cf3421a8228e90a990add8c7a99d77f02ce733ec", "filename": "util/update_wiki.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/util%2Fupdate_wiki.py", "raw_url": "https://github.com/rust-lang/rust/raw/9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64/util%2Fupdate_wiki.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_wiki.py?ref=9e2aab05ccad9ee9ad1637f57def3a82ec2ebc64", "patch": "@@ -23,7 +23,7 @@ def parse_path(p=\"src\"):\n \n def parse_conf(p):\n     c = {}\n-    with open(p + '/conf.rs') as f:\n+    with open(p + '/utils/conf.rs') as f:\n         f = f.read()\n \n         m = re.search(conf_re, f)"}]}