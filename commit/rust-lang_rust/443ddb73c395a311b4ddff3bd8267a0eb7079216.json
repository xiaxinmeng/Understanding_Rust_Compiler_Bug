{"sha": "443ddb73c395a311b4ddff3bd8267a0eb7079216", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0M2RkYjczYzM5NWEzMTFiNGRkZmYzYmQ4MjY3YTBlYjcwNzkyMTY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-04T18:29:53Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-04T18:29:53Z"}, "message": "Do impl collection per module, not per crate", "tree": {"sha": "416d588a0bda45399c54297482189c58ce4681ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/416d588a0bda45399c54297482189c58ce4681ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/443ddb73c395a311b4ddff3bd8267a0eb7079216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/443ddb73c395a311b4ddff3bd8267a0eb7079216", "html_url": "https://github.com/rust-lang/rust/commit/443ddb73c395a311b4ddff3bd8267a0eb7079216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/443ddb73c395a311b4ddff3bd8267a0eb7079216/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "334ca0d9a790d14414301daa896848bf9a880982", "url": "https://api.github.com/repos/rust-lang/rust/commits/334ca0d9a790d14414301daa896848bf9a880982", "html_url": "https://github.com/rust-lang/rust/commit/334ca0d9a790d14414301daa896848bf9a880982"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "a045bbb12ef3ae9fea9f765930f99ae27e3670df", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/443ddb73c395a311b4ddff3bd8267a0eb7079216/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ddb73c395a311b4ddff3bd8267a0eb7079216/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=443ddb73c395a311b4ddff3bd8267a0eb7079216", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{SyntaxNode, SourceFileNode};\n use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase, Cancelable};\n \n use crate::{\n-    Crate, DefLoc, DefId, MacroCallLoc, MacroCallId, Name, HirFileId,\n+    DefLoc, DefId, MacroCallLoc, MacroCallId, Name, HirFileId,\n     SourceFileItems, SourceItemId,\n     query_definitions,\n     FnScopes,\n@@ -13,7 +13,7 @@ use crate::{\n     nameres::{ItemMap, InputModuleItems}},\n     ty::{InferenceResult, Ty},\n     adt::{StructData, EnumData},\n-    impl_block::CrateImplBlocks,\n+    impl_block::ModuleImplBlocks,\n };\n \n salsa::query_group! {\n@@ -89,9 +89,9 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn crate::module::imp::module_tree;\n     }\n \n-    fn impls_in_crate(krate: Crate) -> Cancelable<Arc<CrateImplBlocks>> {\n+    fn impls_in_module(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<ModuleImplBlocks>> {\n         type ImplsInCrateQuery;\n-        use fn crate::impl_block::impls_in_crate;\n+        use fn crate::impl_block::impls_in_module;\n     }\n }\n "}, {"sha": "4d6378e0286353d3c817b985edb27642ea44bd0f", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/443ddb73c395a311b4ddff3bd8267a0eb7079216/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ddb73c395a311b4ddff3bd8267a0eb7079216/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=443ddb73c395a311b4ddff3bd8267a0eb7079216", "patch": "@@ -185,8 +185,9 @@ impl DefId {\n \n     /// Returns the containing impl block, if this is an impl item.\n     pub fn impl_block(self, db: &impl HirDatabase) -> Cancelable<Option<ImplBlock>> {\n-        let crate_impls = db.impls_in_crate(ctry!(self.krate(db)?))?;\n-        Ok(ImplBlock::containing(crate_impls, self))\n+        let loc = self.loc(db);\n+        let module_impls = db.impls_in_module(loc.source_root_id, loc.module_id)?;\n+        Ok(ImplBlock::containing(module_impls, self))\n     }\n }\n "}, {"sha": "01afa84c4964f74be15e513414c3cda543fde873", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/443ddb73c395a311b4ddff3bd8267a0eb7079216/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ddb73c395a311b4ddff3bd8267a0eb7079216/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=443ddb73c395a311b4ddff3bd8267a0eb7079216", "patch": "@@ -3,36 +3,36 @@ use rustc_hash::FxHashMap;\n \n use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_syntax::ast::{self, AstNode};\n-use ra_db::{LocationIntener, Cancelable};\n+use ra_db::{LocationIntener, Cancelable, SourceRootId};\n \n use crate::{\n-    Crate, DefId, DefLoc, DefKind, SourceItemId, SourceFileItems,\n+    DefId, DefLoc, DefKind, SourceItemId, SourceFileItems,\n     Module, Function,\n     db::HirDatabase,\n     type_ref::TypeRef,\n-    module::{ModuleSourceNode},\n+    module::{ModuleSourceNode, ModuleId},\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImplBlock {\n-    crate_impl_blocks: Arc<CrateImplBlocks>,\n+    module_impl_blocks: Arc<ModuleImplBlocks>,\n     impl_id: ImplId,\n }\n \n impl ImplBlock {\n     pub(crate) fn containing(\n-        crate_impl_blocks: Arc<CrateImplBlocks>,\n+        module_impl_blocks: Arc<ModuleImplBlocks>,\n         def_id: DefId,\n     ) -> Option<ImplBlock> {\n-        let impl_id = *crate_impl_blocks.impls_by_def.get(&def_id)?;\n+        let impl_id = *module_impl_blocks.impls_by_def.get(&def_id)?;\n         Some(ImplBlock {\n-            crate_impl_blocks,\n+            module_impl_blocks,\n             impl_id,\n         })\n     }\n \n     fn impl_data(&self) -> &ImplData {\n-        &self.crate_impl_blocks.impls[self.impl_id]\n+        &self.module_impl_blocks.impls[self.impl_id]\n     }\n \n     pub fn target_trait(&self) -> Option<&TypeRef> {\n@@ -126,17 +126,22 @@ impl ImplItem {\n pub struct ImplId(pub RawId);\n impl_arena_id!(ImplId);\n \n-/// We have to collect all impl blocks in a crate, to later be able to find\n-/// impls for specific types.\n+/// Collection of impl blocks is a two-step process: First we collect the blocks\n+/// per-module; then we build an index of all impl blocks in the crate. This\n+/// way, we avoid having to do this process for the whole crate whenever someone\n+/// types in any file; as long as the impl blocks in the file don't change, we\n+/// don't need to do the second step again.\n+///\n+/// (The second step does not yet exist currently.)\n #[derive(Debug, PartialEq, Eq)]\n-pub struct CrateImplBlocks {\n+pub struct ModuleImplBlocks {\n     impls: Arena<ImplId, ImplData>,\n     impls_by_def: FxHashMap<DefId, ImplId>,\n }\n \n-impl CrateImplBlocks {\n+impl ModuleImplBlocks {\n     fn new() -> Self {\n-        CrateImplBlocks {\n+        ModuleImplBlocks {\n             impls: Arena::default(),\n             impls_by_def: FxHashMap::default(),\n         }\n@@ -159,24 +164,17 @@ impl CrateImplBlocks {\n             }\n         }\n \n-        for (_, child) in module.children() {\n-            self.collect(db, child)?;\n-        }\n-\n         Ok(())\n     }\n }\n \n-pub(crate) fn impls_in_crate(\n+pub(crate) fn impls_in_module(\n     db: &impl HirDatabase,\n-    krate: Crate,\n-) -> Cancelable<Arc<CrateImplBlocks>> {\n-    let mut result = CrateImplBlocks::new();\n-    let root_module = if let Some(root) = krate.root_module(db)? {\n-        root\n-    } else {\n-        return Ok(Arc::new(result));\n-    };\n-    result.collect(db, root_module)?;\n+    source_root_id: SourceRootId,\n+    module_id: ModuleId,\n+) -> Cancelable<Arc<ModuleImplBlocks>> {\n+    let mut result = ModuleImplBlocks::new();\n+    let module = Module::new(db, source_root_id, module_id)?;\n+    result.collect(db, module)?;\n     Ok(Arc::new(result))\n }"}]}