{"sha": "a3aeec4f75dd0049f6632e26df5aa174b55e730f", "node_id": "C_kwDOAAsO6NoAKGEzYWVlYzRmNzVkZDAwNDlmNjYzMmUyNmRmNWFhMTc0YjU1ZTczMGY", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-20T02:46:13Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-20T02:46:13Z"}, "message": "config instead of new lint and don't panic", "tree": {"sha": "d59278f1d4456ee32bfbf9a89a96c4dc8104a59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59278f1d4456ee32bfbf9a89a96c4dc8104a59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3aeec4f75dd0049f6632e26df5aa174b55e730f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3aeec4f75dd0049f6632e26df5aa174b55e730f", "html_url": "https://github.com/rust-lang/rust/commit/a3aeec4f75dd0049f6632e26df5aa174b55e730f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3aeec4f75dd0049f6632e26df5aa174b55e730f/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa1efa8b104c71721d8317ae59819f6abf2d0ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1efa8b104c71721d8317ae59819f6abf2d0ac8", "html_url": "https://github.com/rust-lang/rust/commit/fa1efa8b104c71721d8317ae59819f6abf2d0ac8"}], "stats": {"total": 566, "additions": 468, "deletions": 98}, "files": [{"sha": "559b560dde4ba3fbd14e5a43d89bb37e0e3b8ccb", "filename": "CHANGELOG.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -4884,7 +4884,6 @@ Released 2018-09-13\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n [`semicolon_inside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block\n [`semicolon_outside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block\n-[`semicolon_outside_block_if_singleline`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block_if_singleline\n [`separated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "f24dab627809546fc455fa820c89bf69e8f5f1d3", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -546,7 +546,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::self_named_constructors::SELF_NAMED_CONSTRUCTORS_INFO,\n     crate::semicolon_block::SEMICOLON_INSIDE_BLOCK_INFO,\n     crate::semicolon_block::SEMICOLON_OUTSIDE_BLOCK_INFO,\n-    crate::semicolon_block::SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE_INFO,\n     crate::semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED_INFO,\n     crate::serde_api::SERDE_API_MISUSE_INFO,\n     crate::shadow::SHADOW_REUSE_INFO,"}, {"sha": "cb223ce9d16af12d50f8d68500c80b18e4ab0f45", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -932,7 +932,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n-    store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n+    let semicolon_inside_block_if_multiline = conf.semicolon_inside_block_if_multiline;\n+    let semicolon_outside_block_if_singleline = conf.semicolon_outside_block_if_singleline;\n+    store.register_late_pass(move |_| {\n+        Box::new(semicolon_block::SemicolonBlock::new(\n+            semicolon_inside_block_if_multiline,\n+            semicolon_outside_block_if_singleline,\n+        ))\n+    });\n     store.register_late_pass(|_| Box::new(fn_null_check::FnNullCheck));\n     store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n     store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));"}, {"sha": "6be4303371220955d76d843446af97aad9079b59", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 40, "deletions": 87, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -64,49 +64,22 @@ declare_clippy_lint! {\n     restriction,\n     \"add a semicolon outside the block\"\n }\n-declare_clippy_lint! {\n-    /// ### What it does\n-    ///\n-    /// Suggests moving the semicolon from a block's final expression outside of\n-    /// the block if it's singleline, and inside the block if it's multiline.\n-    ///\n-    /// ### Why is this bad?\n-    ///\n-    /// Some may prefer if the semicolon is outside of a block if it is only one\n-    /// expression, as this allows rustfmt to make it singleline (and may just be\n-    /// more readable). In the case that it isn't, it should be inside.\n-    /// Take a look at both `semicolon_inside_block` and `semicolon_outside_block`\n-    /// for alternatives.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust\n-    /// # fn f(_: u32) {}\n-    /// # let x = 0;\n-    /// unsafe { f(x); }\n-    ///\n-    /// unsafe {\n-    ///     let x = 1;\n-    ///     f(x)\n-    /// };\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// # fn f(_: u32) {}\n-    /// # let x = 0;\n-    /// unsafe { f(x) };\n-    ///\n-    /// unsafe {\n-    ///     let x = 1;\n-    ///     f(x);\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.68.0\"]\n-    pub SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n-    restriction,\n-    \"add a semicolon inside the block if it's singleline, otherwise outside\"\n+impl_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+\n+#[derive(Copy, Clone)]\n+pub struct SemicolonBlock {\n+    semicolon_inside_block_if_multiline: bool,\n+    semicolon_outside_block_if_singleline: bool,\n+}\n+\n+impl SemicolonBlock {\n+    pub fn new(semicolon_inside_block_if_multiline: bool, semicolon_outside_block_if_singleline: bool) -> Self {\n+        Self {\n+            semicolon_inside_block_if_multiline,\n+            semicolon_outside_block_if_singleline,\n+        }\n+    }\n }\n-declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE]);\n \n impl LateLintPass<'_> for SemicolonBlock {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n@@ -125,24 +98,34 @@ impl LateLintPass<'_> for SemicolonBlock {\n                     span,\n                     ..\n                 } = stmt else { return };\n-                semicolon_outside_block(cx, block, expr, span);\n+                semicolon_outside_block(self, cx, block, expr, span);\n             },\n             StmtKind::Semi(Expr {\n                 kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n                 ..\n             }) if !block.span.from_expansion() => {\n-                semicolon_inside_block(cx, block, tail, stmt.span);\n+                semicolon_inside_block(self, cx, block, tail, stmt.span);\n             },\n             _ => (),\n         }\n     }\n }\n \n-fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n+fn semicolon_inside_block(\n+    conf: &mut SemicolonBlock,\n+    cx: &LateContext<'_>,\n+    block: &Block<'_>,\n+    tail: &Expr<'_>,\n+    semi_span: Span,\n+) {\n     let insert_span = tail.span.source_callsite().shrink_to_hi();\n     let remove_span = semi_span.with_lo(block.span.hi());\n \n-    semicolon_outside_block_if_singleline(cx, block, remove_span, insert_span, true, \"inside\");\n+    if conf.semicolon_inside_block_if_multiline {\n+        if get_line(cx, remove_span) == get_line(cx, insert_span) {\n+            return;\n+        }\n+    }\n \n     span_lint_and_then(\n         cx,\n@@ -160,13 +143,17 @@ fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'\n     );\n }\n \n-fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_expr: &Expr<'_>, semi_span: Span) {\n+fn semicolon_outside_block(conf: &mut SemicolonBlock, cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_expr: &Expr<'_>, semi_span: Span) {\n     let insert_span = block.span.with_lo(block.span.hi());\n     // account for macro calls\n     let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n     let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n \n-    semicolon_outside_block_if_singleline(cx, block, remove_span, insert_span, false, \"outside\");\n+    if conf.semicolon_outside_block_if_singleline {\n+        if get_line(cx, remove_span) != get_line(cx, insert_span) {\n+            return;\n+        }\n+    }\n \n     span_lint_and_then(\n         cx,\n@@ -184,44 +171,10 @@ fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_ex\n     );\n }\n \n-fn semicolon_outside_block_if_singleline(\n-    cx: &LateContext<'_>,\n-    block: &Block<'_>,\n-    remove_span: Span,\n-    insert_span: Span,\n-    inequality: bool,\n-    ty: &str,\n-) {\n-    let (remove_line, insert_line) = (get_line(cx, remove_span), get_line(cx, insert_span));\n-\n-    let eq = if inequality {\n-        remove_line != insert_line\n-    } else {\n-        remove_line == insert_line\n-    };\n-\n-    if eq {\n-        span_lint_and_then(\n-            cx,\n-            SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n-            block.span,\n-            &format!(\"consider moving the `;` {ty} the block for consistent formatting\"),\n-            |diag| {\n-                multispan_sugg_with_applicability(\n-                    diag,\n-                    \"put the `;` here\",\n-                    Applicability::MachineApplicable,\n-                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n-                );\n-            },\n-        );\n+fn get_line(cx: &LateContext<'_>, span: Span) -> Option<usize> {\n+    if let Ok(line) = cx.sess().source_map().lookup_line(span.lo()) {\n+        return Some(line.line);\n     }\n-}\n \n-fn get_line(cx: &LateContext<'_>, span: Span) -> usize {\n-    cx.sess()\n-        .source_map()\n-        .lookup_line(span.lo())\n-        .expect(\"failed to get span's line\")\n-        .line\n+    None\n }"}, {"sha": "26123549b94c6a04266cc15579de3a9454c4d2bc", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -463,6 +463,14 @@ define_Conf! {\n     ///\n     /// The maximum byte size a `Future` can have, before it triggers the `clippy::large_futures` lint\n     (future_size_threshold: u64 = 16 * 1024),\n+    /// Lint: SEMICOLON_INSIDE_BLOCK.\n+    /// \n+    /// Whether to lint only if it's multiline.\n+    (semicolon_inside_block_if_multiline: bool = false),\n+    /// Lint: SEMICOLON_OUTSIDE_BLOCK.\n+    /// \n+    /// Whether to lint only if it's singleline.\n+    (semicolon_outside_block_if_singleline: bool = false),\n }\n \n /// Search for the configuration file."}, {"sha": "981b661bc78621141b3f62384d47ff79b9aa5a4c", "filename": "tests/ui-toml/semicolon_block/both.fixed", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -6,7 +6,8 @@\n     clippy::no_effect,\n     clippy::single_element_loop\n )]\n-#![warn(clippy::semicolon_outside_block_if_singleline)]\n+#![warn(clippy::semicolon_inside_block)]\n+#![warn(clippy::semicolon_outside_block)]\n \n macro_rules! m {\n     (()) => {", "previous_filename": "tests/ui/semicolon_outside_block_if_singleline.fixed"}, {"sha": "d4dcd6e7240e723261d71442699c2a7f021dbbe0", "filename": "tests/ui-toml/semicolon_block/both.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -0,0 +1,86 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "2f58842eab01b1933d10f8a0530058c4e3bfba56", "filename": "tests/ui-toml/semicolon_block/both.stderr", "status": "renamed", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -1,18 +1,18 @@\n error: consider moving the `;` outside the block for consistent formatting\n-  --> $DIR/semicolon_outside_block_if_singleline.rs:42:5\n+  --> $DIR/both.rs:43:5\n    |\n LL |     { unit_fn_block(); }\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::semicolon-outside-block-if-singleline` implied by `-D warnings`\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n help: put the `;` here\n    |\n LL -     { unit_fn_block(); }\n LL +     { unit_fn_block() };\n    |\n \n error: consider moving the `;` outside the block for consistent formatting\n-  --> $DIR/semicolon_outside_block_if_singleline.rs:43:5\n+  --> $DIR/both.rs:44:5\n    |\n LL |     unsafe { unit_fn_block(); }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -24,22 +24,23 @@ LL +     unsafe { unit_fn_block() };\n    |\n \n error: consider moving the `;` inside the block for consistent formatting\n-  --> $DIR/semicolon_outside_block_if_singleline.rs:48:5\n+  --> $DIR/both.rs:49:5\n    |\n LL | /     {\n LL | |         unit_fn_block();\n LL | |         unit_fn_block()\n LL | |     };\n-   | |_____^\n+   | |______^\n    |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n help: put the `;` here\n    |\n LL ~         unit_fn_block();\n LL ~     }\n    |\n \n error: consider moving the `;` outside the block for consistent formatting\n-  --> $DIR/semicolon_outside_block_if_singleline.rs:62:5\n+  --> $DIR/both.rs:63:5\n    |\n LL |     { m!(()); }\n    |     ^^^^^^^^^^^", "previous_filename": "tests/ui/semicolon_outside_block_if_singleline.stderr"}, {"sha": "cc3bc8cae14be08792d026c4cca6f728eef29ca0", "filename": "tests/ui-toml/semicolon_block/clippy.toml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -0,0 +1,2 @@\n+semicolon-inside-block-if-multiline = true\n+semicolon-outside-block-if-singleline = true"}, {"sha": "6a08bc905b1127292251da39670601ebf9f8b3ae", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "f40848f702e1cbabd76a1a55c26fde7425a90f6b", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -6,7 +6,7 @@\n     clippy::no_effect,\n     clippy::single_element_loop\n )]\n-#![warn(clippy::semicolon_outside_block_if_singleline)]\n+#![warn(clippy::semicolon_inside_block)]\n \n macro_rules! m {\n     (()) => {", "previous_filename": "tests/ui/semicolon_outside_block_if_singleline.rs"}, {"sha": "2569dc4b4e4530f1ab37a7fc21284d761f6c1b7d", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -0,0 +1,18 @@\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:48:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block();\n+LL ~     }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "e2d653dc3c35cbfe362a04216585ff9927d28bea", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "7ce46431fac9ace2c0c4221bb32348a7c866f1b7", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "6dd3577dd09f06812829e50f1a07cba32b4a356a", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -0,0 +1,39 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:42:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:43:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:62:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()); }\n+LL +     { m!(()) };\n+   |\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c49c9087946da87cb6cc8a820b0f5b2d055d0535", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3aeec4f75dd0049f6632e26df5aa174b55e730f/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=a3aeec4f75dd0049f6632e26df5aa174b55e730f", "patch": "@@ -37,6 +37,8 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            missing-docs-in-crate-items\n            msrv\n            pass-by-value-size-limit\n+           semicolon-inside-block-if-multiline\n+           semicolon-outside-block-if-singleline\n            single-char-binding-names-threshold\n            standard-macro-braces\n            suppress-restriction-lint-in-const"}]}