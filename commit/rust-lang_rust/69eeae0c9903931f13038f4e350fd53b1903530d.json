{"sha": "69eeae0c9903931f13038f4e350fd53b1903530d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZWVhZTBjOTkwMzkzMWYxMzAzOGY0ZTM1MGZkNTNiMTkwMzUzMGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T19:37:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T19:52:51Z"}, "message": "polish join", "tree": {"sha": "1797b4d897e4f65a1aa12baa43329a50a35611a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1797b4d897e4f65a1aa12baa43329a50a35611a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69eeae0c9903931f13038f4e350fd53b1903530d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69eeae0c9903931f13038f4e350fd53b1903530d", "html_url": "https://github.com/rust-lang/rust/commit/69eeae0c9903931f13038f4e350fd53b1903530d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69eeae0c9903931f13038f4e350fd53b1903530d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6effddb18c8c7e0d500e7c17482642f1c3ebcfc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6effddb18c8c7e0d500e7c17482642f1c3ebcfc8", "html_url": "https://github.com/rust-lang/rust/commit/6effddb18c8c7e0d500e7c17482642f1c3ebcfc8"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "b04da1abe55004d9fe40fc8ee7e30bbeab1a529c", "filename": "crates/libeditor/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69eeae0c9903931f13038f4e350fd53b1903530d/crates%2Flibeditor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/69eeae0c9903931f13038f4e350fd53b1903530d/crates%2Flibeditor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2FCargo.toml?ref=69eeae0c9903931f13038f4e350fd53b1903530d", "patch": "@@ -7,6 +7,7 @@ publish = false\n [dependencies]\n itertools = \"0.7.8\"\n superslice = \"0.1.0\"\n+join_to_string = \"0.1.1\"\n \n libsyntax2 = { path = \"../libsyntax2\" }\n "}, {"sha": "cef3a12f98b48a98785376726e3c9481fb3bfd51", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69eeae0c9903931f13038f4e350fd53b1903530d/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69eeae0c9903931f13038f4e350fd53b1903530d/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=69eeae0c9903931f13038f4e350fd53b1903530d", "patch": "@@ -2,6 +2,8 @@ use std::{\n     fmt::{self, Write},\n };\n \n+use join_to_string::join;\n+\n use libsyntax2::{\n     File, TextUnit,\n     ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner},"}, {"sha": "4895f6fa997c80863ac5358b591c3f50cd95ff8a", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69eeae0c9903931f13038f4e350fd53b1903530d/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69eeae0c9903931f13038f4e350fd53b1903530d/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=69eeae0c9903931f13038f4e350fd53b1903530d", "patch": "@@ -1,6 +1,7 @@\n extern crate libsyntax2;\n extern crate superslice;\n extern crate itertools;\n+extern crate join_to_string;\n #[cfg(test)]\n #[macro_use]\n extern crate test_utils as _test_utils;"}, {"sha": "5008b8d497f1691d59fd1bbbca04e44b51ce494d", "filename": "crates/libeditor/src/typing.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/69eeae0c9903931f13038f4e350fd53b1903530d/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69eeae0c9903931f13038f4e350fd53b1903530d/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Ftyping.rs?ref=69eeae0c9903931f13038f4e350fd53b1903530d", "patch": "@@ -1,7 +1,7 @@\n use std::mem;\n \n use libsyntax2::{\n-    TextUnit, TextRange, SyntaxNodeRef, File, AstNode,\n+    TextUnit, TextRange, SyntaxNodeRef, File, AstNode, SyntaxKind,\n     ast,\n     algo::{\n         walk::preorder,\n@@ -48,6 +48,7 @@ pub fn join_lines(file: &File, range: TextRange) -> ActionResult {\n             remove_newline(&mut edit, node, text.as_str(), off);\n         }\n     }\n+    eprintln!(\"{:?}\", edit);\n \n     ActionResult {\n         edit: edit.finish(),\n@@ -93,8 +94,10 @@ fn remove_newline(\n         match (node.prev_sibling(), node.next_sibling()) {\n             (Some(prev), Some(next)) => {\n                 let range = TextRange::from_to(prev.range().start(), node.range().end());\n-                if prev.kind() == COMMA && (next.kind() == R_PAREN || next.kind() == R_BRACK) {\n+                if is_trailing_comma(prev.kind(), next.kind()) {\n                     edit.delete(range);\n+                } else if no_space_required(prev.kind(), next.kind()) {\n+                    edit.delete(node.range());\n                 } else if prev.kind() == COMMA && next.kind() == R_CURLY {\n                     edit.replace(range, \" \".to_string());\n                 } else {\n@@ -121,6 +124,20 @@ fn remove_newline(\n     );\n }\n \n+fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n+    match (left, right) {\n+       (COMMA, R_PAREN) | (COMMA, R_BRACK) => true,\n+       _ => false\n+    }\n+}\n+\n+fn no_space_required(left: SyntaxKind, right: SyntaxKind) -> bool {\n+    match (left, right) {\n+       (_, DOT) => true,\n+        _ => false\n+    }\n+}\n+\n fn join_single_expr_block(\n     edit: &mut EditBuilder,\n     node: SyntaxNodeRef,\n@@ -252,6 +269,15 @@ struct Foo <|>{\n     \", r\"\n struct Foo { f: u32 }\n     \");\n+        do_check(r\"\n+fn foo() {\n+    join(<|>type_params.type_params()\n+            .filter_map(|it| it.name())\n+            .map(|it| it.text())<|>)\n+}\", r\"\n+fn foo() {\n+    join(type_params.type_params().filter_map(|it| it.name()).map(|it| it.text()))\n+}\")\n     }\n \n     #[test]"}]}