{"sha": "826fb78bebc757acf138e86bd755e1d81c1d08bc", "node_id": "C_kwDOAAsO6NoAKDgyNmZiNzhiZWJjNzU3YWNmMTM4ZTg2YmQ3NTVlMWQ4MWMxZDA4YmM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-10T02:40:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-15T22:41:28Z"}, "message": "Use `token::Lit` in `ast::ExprKind::Lit`.\n\nInstead of `ast::Lit`.\n\nLiteral lowering now happens at two different times. Expression literals\nare lowered when HIR is crated. Attribute literals are lowered during\nparsing.\n\nThis commit changes the language very slightly. Some programs that used\nto not compile now will compile. This is because some invalid literals\nthat are removed by `cfg` or attribute macros will no longer trigger\nerrors. See this comment for more details:\nhttps://github.com/rust-lang/rust/pull/102944#issuecomment-1277476773", "tree": {"sha": "ddc36f6bf471f91916a1fffa5ac70fd7b7bc5671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc36f6bf471f91916a1fffa5ac70fd7b7bc5671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/826fb78bebc757acf138e86bd755e1d81c1d08bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/826fb78bebc757acf138e86bd755e1d81c1d08bc", "html_url": "https://github.com/rust-lang/rust/commit/826fb78bebc757acf138e86bd755e1d81c1d08bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/826fb78bebc757acf138e86bd755e1d81c1d08bc/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660e53512f1c25f03f6cf34fb620a7c0ed11d120", "url": "https://api.github.com/repos/rust-lang/rust/commits/660e53512f1c25f03f6cf34fb620a7c0ed11d120", "html_url": "https://github.com/rust-lang/rust/commit/660e53512f1c25f03f6cf34fb620a7c0ed11d120"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "ccc2fd0d5f5899881167285d76554aabdffb2f65", "filename": "src/attr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/826fb78bebc757acf138e86bd755e1d81c1d08bc/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826fb78bebc757acf138e86bd755e1d81c1d08bc/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=826fb78bebc757acf138e86bd755e1d81c1d08bc", "patch": "@@ -260,7 +260,9 @@ impl Rewrite for ast::NestedMetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self {\n             ast::NestedMetaItem::MetaItem(ref meta_item) => meta_item.rewrite(context, shape),\n-            ast::NestedMetaItem::Literal(ref l) => rewrite_literal(context, l, shape),\n+            ast::NestedMetaItem::Literal(ref l) => {\n+                rewrite_literal(context, l.token_lit, l.span, shape)\n+            }\n         }\n     }\n }\n@@ -318,7 +320,7 @@ impl Rewrite for ast::MetaItem {\n                 // we might be better off ignoring the fact that the attribute\n                 // is longer than the max width and continue on formatting.\n                 // See #2479 for example.\n-                let value = rewrite_literal(context, literal, lit_shape)\n+                let value = rewrite_literal(context, literal.token_lit, literal.span, lit_shape)\n                     .unwrap_or_else(|| context.snippet(literal.span).to_owned());\n                 format!(\"{} = {}\", path, value)\n             }"}, {"sha": "b4f1a178dbf44d4a03d0ba82cf00007733ccad6f", "filename": "src/expr.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/826fb78bebc757acf138e86bd755e1d81c1d08bc/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826fb78bebc757acf138e86bd755e1d81c1d08bc/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=826fb78bebc757acf138e86bd755e1d81c1d08bc", "patch": "@@ -3,7 +3,7 @@ use std::cmp::min;\n \n use itertools::Itertools;\n use rustc_ast::token::{Delimiter, LitKind};\n-use rustc_ast::{ast, ptr};\n+use rustc_ast::{ast, ptr, token};\n use rustc_span::{BytePos, Span};\n \n use crate::chains::rewrite_chain;\n@@ -75,12 +75,12 @@ pub(crate) fn format_expr(\n             choose_separator_tactic(context, expr.span),\n             None,\n         ),\n-        ast::ExprKind::Lit(ref l) => {\n-            if let Some(expr_rw) = rewrite_literal(context, l, shape) {\n+        ast::ExprKind::Lit(token_lit) => {\n+            if let Some(expr_rw) = rewrite_literal(context, token_lit, expr.span, shape) {\n                 Some(expr_rw)\n             } else {\n-                if let LitKind::StrRaw(_) = l.token_lit.kind {\n-                    Some(context.snippet(l.span).trim().into())\n+                if let LitKind::StrRaw(_) = token_lit.kind {\n+                    Some(context.snippet(expr.span).trim().into())\n                 } else {\n                     None\n                 }\n@@ -274,9 +274,9 @@ pub(crate) fn format_expr(\n \n             fn needs_space_before_range(context: &RewriteContext<'_>, lhs: &ast::Expr) -> bool {\n                 match lhs.kind {\n-                    ast::ExprKind::Lit(ref lit) => match lit.kind {\n-                        ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) => {\n-                            context.snippet(lit.span).ends_with('.')\n+                    ast::ExprKind::Lit(token_lit) => match token_lit.kind {\n+                        token::LitKind::Float if token_lit.suffix.is_none() => {\n+                            context.snippet(lhs.span).ends_with('.')\n                         }\n                         _ => false,\n                     },\n@@ -1185,14 +1185,15 @@ pub(crate) fn is_unsafe_block(block: &ast::Block) -> bool {\n \n pub(crate) fn rewrite_literal(\n     context: &RewriteContext<'_>,\n-    l: &ast::Lit,\n+    token_lit: token::Lit,\n+    span: Span,\n     shape: Shape,\n ) -> Option<String> {\n-    match l.kind {\n-        ast::LitKind::Str(_, ast::StrStyle::Cooked) => rewrite_string_lit(context, l.span, shape),\n-        ast::LitKind::Int(..) => rewrite_int_lit(context, l, shape),\n+    match token_lit.kind {\n+        token::LitKind::Str => rewrite_string_lit(context, span, shape),\n+        token::LitKind::Integer => rewrite_int_lit(context, token_lit, span, shape),\n         _ => wrap_str(\n-            context.snippet(l.span).to_owned(),\n+            context.snippet(span).to_owned(),\n             context.config.max_width(),\n             shape,\n         ),\n@@ -1225,9 +1226,13 @@ fn rewrite_string_lit(context: &RewriteContext<'_>, span: Span, shape: Shape) ->\n     )\n }\n \n-fn rewrite_int_lit(context: &RewriteContext<'_>, lit: &ast::Lit, shape: Shape) -> Option<String> {\n-    let span = lit.span;\n-    let symbol = lit.token_lit.symbol.as_str();\n+fn rewrite_int_lit(\n+    context: &RewriteContext<'_>,\n+    token_lit: token::Lit,\n+    span: Span,\n+    shape: Shape,\n+) -> Option<String> {\n+    let symbol = token_lit.symbol.as_str();\n \n     if let Some(symbol_stripped) = symbol.strip_prefix(\"0x\") {\n         let hex_lit = match context.config.hex_literal_case() {\n@@ -1240,9 +1245,7 @@ fn rewrite_int_lit(context: &RewriteContext<'_>, lit: &ast::Lit, shape: Shape) -\n                 format!(\n                     \"0x{}{}\",\n                     hex_lit,\n-                    lit.token_lit\n-                        .suffix\n-                        .map_or(String::new(), |s| s.to_string())\n+                    token_lit.suffix.map_or(String::new(), |s| s.to_string())\n                 ),\n                 context.config.max_width(),\n                 shape,"}]}