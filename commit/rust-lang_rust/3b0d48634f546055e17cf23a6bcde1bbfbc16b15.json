{"sha": "3b0d48634f546055e17cf23a6bcde1bbfbc16b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMGQ0ODYzNGY1NDYwNTVlMTdjZjIzYTZiY2RlMWJiZmJjMTZiMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-12T20:16:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-12T20:16:21Z"}, "message": "auto merge of #10427 : alexcrichton/rust/no-xray, r=brson\n\nJust a few triage issues that I ran into.", "tree": {"sha": "277098c595ba15c5e5fd6c5c53b4e71f7649658b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/277098c595ba15c5e5fd6c5c53b4e71f7649658b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b0d48634f546055e17cf23a6bcde1bbfbc16b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0d48634f546055e17cf23a6bcde1bbfbc16b15", "html_url": "https://github.com/rust-lang/rust/commit/3b0d48634f546055e17cf23a6bcde1bbfbc16b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a67bd4c0b3a8497f561144485ad757842a0078", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a67bd4c0b3a8497f561144485ad757842a0078", "html_url": "https://github.com/rust-lang/rust/commit/f1a67bd4c0b3a8497f561144485ad757842a0078"}, {"sha": "5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdbcc4020a440e18a3c570ffad5d2bb089c08db", "html_url": "https://github.com/rust-lang/rust/commit/5fdbcc4020a440e18a3c570ffad5d2bb089c08db"}], "stats": {"total": 135, "additions": 59, "deletions": 76}, "files": [{"sha": "8a320f88649a0729048f14d115831297d0d4132d", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=3b0d48634f546055e17cf23a6bcde1bbfbc16b15", "patch": "@@ -8,68 +8,68 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use middle::ty;\n \n-use syntax::ast::*;\n-use syntax::visit;\n+use syntax::ast;\n+use syntax::codemap::Span;\n use syntax::visit::Visitor;\n+use syntax::visit;\n \n-#[deriving(Clone)]\n-pub struct Context {\n-    in_loop: bool,\n-    can_ret: bool\n+#[deriving(Clone, Eq)]\n+enum Context {\n+    Normal, Loop, Closure\n }\n \n struct CheckLoopVisitor {\n     tcx: ty::ctxt,\n }\n \n-pub fn check_crate(tcx: ty::ctxt, crate: &Crate) {\n-    visit::walk_crate(&mut CheckLoopVisitor { tcx: tcx },\n-                      crate,\n-                      Context { in_loop: false, can_ret: true });\n+pub fn check_crate(tcx: ty::ctxt, crate: &ast::Crate) {\n+    visit::walk_crate(&mut CheckLoopVisitor { tcx: tcx }, crate, Normal)\n }\n \n impl Visitor<Context> for CheckLoopVisitor {\n-    fn visit_item(&mut self, i:@item, _cx:Context) {\n-        visit::walk_item(self, i, Context {\n-                                    in_loop: false,\n-                                    can_ret: true\n-                                  });\n+    fn visit_item(&mut self, i: @ast::item, _cx: Context) {\n+        visit::walk_item(self, i, Normal);\n     }\n \n-    fn visit_expr(&mut self, e:@Expr, cx:Context) {\n-\n-            match e.node {\n-              ExprWhile(e, ref b) => {\n+    fn visit_expr(&mut self, e: @ast::Expr, cx:Context) {\n+        match e.node {\n+            ast::ExprWhile(e, ref b) => {\n                 self.visit_expr(e, cx);\n-                self.visit_block(b, Context { in_loop: true,.. cx });\n-              }\n-              ExprLoop(ref b, _) => {\n-                self.visit_block(b, Context { in_loop: true,.. cx });\n-              }\n-              ExprFnBlock(_, ref b) | ExprProc(_, ref b) => {\n-                self.visit_block(b, Context { in_loop: false, can_ret: false });\n-              }\n-              ExprBreak(_) => {\n-                if !cx.in_loop {\n-                    self.tcx.sess.span_err(e.span, \"`break` outside of loop\");\n-                }\n-              }\n-              ExprAgain(_) => {\n-                if !cx.in_loop {\n-                    self.tcx.sess.span_err(e.span, \"`loop` outside of loop\");\n-                }\n-              }\n-              ExprRet(oe) => {\n-                if !cx.can_ret {\n-                    self.tcx.sess.span_err(e.span, \"`return` in block function\");\n+                self.visit_block(b, Loop);\n+            }\n+            ast::ExprLoop(ref b, _) => {\n+                self.visit_block(b, Loop);\n+            }\n+            ast::ExprFnBlock(_, ref b) | ast::ExprProc(_, ref b) => {\n+                self.visit_block(b, Closure);\n+            }\n+            ast::ExprBreak(_) => self.require_loop(\"break\", cx, e.span),\n+            ast::ExprAgain(_) => self.require_loop(\"continue\", cx, e.span),\n+            ast::ExprRet(oe) => {\n+                if cx == Closure {\n+                    self.tcx.sess.span_err(e.span, \"`return` in a closure\");\n                 }\n                 visit::walk_expr_opt(self, oe, cx);\n-              }\n-              _ => visit::walk_expr(self, e, cx)\n             }\n+            _ => visit::walk_expr(self, e, cx)\n+        }\n+    }\n+}\n \n+impl CheckLoopVisitor {\n+    fn require_loop(&self, name: &str, cx: Context, span: Span) {\n+        match cx {\n+            Loop => {}\n+            Closure => {\n+                self.tcx.sess.span_err(span, format!(\"`{}` inside of a closure\",\n+                                                     name));\n+            }\n+            Normal => {\n+                self.tcx.sess.span_err(span, format!(\"`{}` outside of loop\",\n+                                                     name));\n+            }\n+        }\n     }\n }"}, {"sha": "4861fa19f7e8f58f5dd8fb4c8e312c362403e215", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3b0d48634f546055e17cf23a6bcde1bbfbc16b15", "patch": "@@ -25,7 +25,6 @@ use syntax::ast::*;\n use syntax::ast;\n use syntax::ast_util::{def_id_of_def, local_def, mtwt_resolve};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n-use syntax::attr;\n use syntax::parse::token;\n use syntax::parse::token::{ident_interner, interner_get};\n use syntax::parse::token::special_idents;\n@@ -254,19 +253,6 @@ enum MethodSort {\n     Provided(NodeId)\n }\n \n-// The X-ray flag indicates that a context has the X-ray privilege, which\n-// allows it to reference private names. Currently, this is used for the test\n-// runner.\n-//\n-// FIXME #4947: The X-ray flag is kind of questionable in the first\n-// place. It might be better to introduce an expr_xray_path instead.\n-\n-#[deriving(Eq)]\n-enum XrayFlag {\n-    NoXray,     //< Private items cannot be accessed.\n-    Xray        //< Private items can be accessed.\n-}\n-\n enum UseLexicalScopeFlag {\n     DontUseLexicalScope,\n     UseLexicalScope\n@@ -831,7 +817,6 @@ fn Resolver(session: Session,\n         type_ribs: @mut ~[],\n         label_ribs: @mut ~[],\n \n-        xray_context: NoXray,\n         current_trait_refs: None,\n \n         self_ident: special_idents::self_,\n@@ -883,10 +868,6 @@ struct Resolver {\n     // The current set of local scopes, for labels.\n     label_ribs: @mut ~[@Rib],\n \n-    // Whether the current context is an X-ray context. An X-ray context is\n-    // allowed to access private names of any module.\n-    xray_context: XrayFlag,\n-\n     // The trait that the current context can refer to.\n     current_trait_refs: Option<~[DefId]>,\n \n@@ -3545,13 +3526,6 @@ impl Resolver {\n         debug!(\"(resolving item) resolving {}\",\n                self.session.str_of(item.ident));\n \n-        // Items with the !resolve_unexported attribute are X-ray contexts.\n-        // This is used to allow the test runner to run unexported tests.\n-        let orig_xray_flag = self.xray_context;\n-        if attr::contains_name(item.attrs, \"!resolve_unexported\") {\n-            self.xray_context = Xray;\n-        }\n-\n         match item.node {\n \n             // enum item: resolve all the variants' discrs,\n@@ -3715,8 +3689,6 @@ impl Resolver {\n             fail!(\"item macros unimplemented\")\n           }\n         }\n-\n-        self.xray_context = orig_xray_flag;\n     }\n \n     fn with_type_parameter_rib(&mut self,"}, {"sha": "06281a5e2884b1de0855ca2cd64f492865ff0da7", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=3b0d48634f546055e17cf23a6bcde1bbfbc16b15", "patch": "@@ -8,15 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:`break` outside of loop\n-\n struct Foo {\n     t: ~str\n }\n \n+fn cond() -> bool { true }\n+\n+fn foo(_: ||) {}\n+\n fn main() {\n-    let pth = break;\n+    let pth = break; //~ ERROR: `break` outside of loop\n+    if cond() { continue } //~ ERROR: `continue` outside of loop\n \n-    let rs: Foo = Foo{t: pth};\n+    while cond() {\n+        if cond() { break }\n+        if cond() { continue }\n+        do foo {\n+            if cond() { break } //~ ERROR: `break` inside of a closure\n+            if cond() { continue } //~ ERROR: `continue` inside of a closure\n+        }\n+    }\n \n+    let rs: Foo = Foo{t: pth};\n }"}, {"sha": "f231810cbf1172a18235449a53ca92bea1d15217", "filename": "src/test/compile-fail/return-in-block-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/src%2Ftest%2Fcompile-fail%2Freturn-in-block-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0d48634f546055e17cf23a6bcde1bbfbc16b15/src%2Ftest%2Fcompile-fail%2Freturn-in-block-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freturn-in-block-function.rs?ref=3b0d48634f546055e17cf23a6bcde1bbfbc16b15", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     let _x = || {\n-        return //~ ERROR: `return` in block function\n+        return //~ ERROR: `return` in a closure\n     };\n }"}]}