{"sha": "98d21f9fc5f5dfb4391452b506d4a27ac1d452a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDIxZjlmYzVmNWRmYjQzOTE0NTJiNTA2ZDRhMjdhYzFkNDUyYTQ=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-19T00:04:33Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-19T00:04:33Z"}, "message": "Make compatible with `unused_variables` lint", "tree": {"sha": "7772e937cdadab674355f53247aff26fc30a8526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7772e937cdadab674355f53247aff26fc30a8526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4", "html_url": "https://github.com/rust-lang/rust/commit/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8d78a70b3acbf255a7dfb9472361691e1e0f6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d78a70b3acbf255a7dfb9472361691e1e0f6cf", "html_url": "https://github.com/rust-lang/rust/commit/c8d78a70b3acbf255a7dfb9472361691e1e0f6cf"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "44d044a4384c2c482cfce6440282003e2dc03474", "filename": "src/misc.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=98d21f9fc5f5dfb4391452b506d4a27ac1d452a4", "patch": "@@ -10,7 +10,8 @@ use rustc::middle::const_eval::ConstVal::Float;\n use rustc::middle::const_eval::eval_const_expr_partial;\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n \n-use utils::{get_item_name, match_path, snippet, span_lint, walk_ptrs_ty, is_integer_literal};\n+use utils::{get_item_name, match_path, snippet, get_parent_expr, span_lint, walk_ptrs_ty,\n+            is_integer_literal};\n use utils::span_help_and_lint;\n \n /// **What it does:** This lint checks for function arguments and let bindings denoted as `ref`. It is `Warn` by default.\n@@ -323,16 +324,7 @@ impl LateLintPass for PatternPass {\n /// **Why is this bad?** A single leading underscore is usually used to indicate that a binding\n /// will not be used. Using such a binding breaks this expectation.\n ///\n-/// **Known problems:** This lint's idea of a \"used\" variable is not quite the same as in the\n-/// built-in `unused_variables` lint. For example, in the following code\n-/// ```\n-/// fn foo(y: u32) -> u32) {\n-///     let _x = 1;\n-///     _x +=1;\n-///     y\n-/// }\n-/// ```\n-/// _x will trigger both the `unused_variables` lint and the `used_underscore_binding` lint.\n+/// **Known problems:** None\n ///\n /// **Example**:\n /// ```\n@@ -362,6 +354,7 @@ impl LateLintPass for UsedUnderscoreBinding {\n                 ident.name.as_str().chars().next() == Some('_') //starts with '_'\n                 && ident.name.as_str().chars().skip(1).next() != Some('_') //doesn't start with \"__\"\n                 && ident.name != ident.unhygienic_name //not in macro\n+                && is_used(cx, expr)\n             },\n             ExprField(_, spanned) => {\n                 let name = spanned.node.as_str();\n@@ -372,8 +365,21 @@ impl LateLintPass for UsedUnderscoreBinding {\n         };\n         if needs_lint {\n             cx.span_lint(USED_UNDERSCORE_BINDING, expr.span,\n-                         \"used binding which is prefixed with an underscore. A leading underscore\\\n+                         \"used binding which is prefixed with an underscore. A leading underscore \\\n                           signals that a binding will not be used.\");\n         }\n     }\n }\n+\n+fn is_used(cx: &LateContext, expr: &Expr) -> bool {\n+    if let Some(ref parent) = get_parent_expr(cx, expr) {\n+        match parent.node {\n+            ExprAssign(_, ref rhs) => **rhs == *expr,\n+            ExprAssignOp(_, _, ref rhs) => **rhs == *expr,\n+            _ => is_used(cx, &parent)\n+        }\n+    }\n+    else {\n+        true\n+    }\n+}"}, {"sha": "f1c1adf6cc890088a0e4500c72a637188b0596c2", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=98d21f9fc5f5dfb4391452b506d4a27ac1d452a4", "patch": "@@ -16,8 +16,7 @@ impl Unrelated {\n \n #[deny(needless_range_loop, explicit_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop)]\n #[deny(unused_collect)]\n-#[allow(linkedlist,shadow_unrelated,unnecessary_mut_passed, cyclomatic_complexity,\n-        used_underscore_binding)]\n+#[allow(linkedlist,shadow_unrelated,unnecessary_mut_passed, cyclomatic_complexity)]\n fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n     let vec2 = vec![1, 2, 3, 4];\n@@ -180,8 +179,8 @@ fn main() {\n     if false { _index = 0 };\n     for _v in &vec { _index += 1 }\n \n-    let mut _index = 0;\n-    { let mut _x = &mut _index; }\n+    let mut index = 0;\n+    { let mut _x = &mut index; }\n     for _v in &vec { _index += 1 }\n \n     let mut index = 0;"}, {"sha": "e787124dce7a3a4afedca1dfc0ae5da1cb587ed2", "filename": "tests/compile-fail/used_underscore_binding.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4/tests%2Fcompile-fail%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d21f9fc5f5dfb4391452b506d4a27ac1d452a4/tests%2Fcompile-fail%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fused_underscore_binding.rs?ref=98d21f9fc5f5dfb4391452b506d4a27ac1d452a4", "patch": "@@ -3,28 +3,37 @@\n #![deny(clippy)]\n \n /// Test that we lint if we use a binding with a single leading underscore\n-fn prefix_underscore(_x: u32) -> u32 {\n-    _x + 1 //~ ERROR used binding which is prefixed with an underscore\n+fn prefix_underscore(_foo: u32) -> u32 {\n+    _foo + 1 //~ ERROR used binding which is prefixed with an underscore\n }\n \n /// Test that we lint even if the use is within a macro expansion\n-fn in_macro(_x: u32) {\n-    println!(\"{}\", _x); //~ ERROR used binding which is prefixed with an underscore\n+fn in_macro(_foo: u32) {\n+    println!(\"{}\", _foo); //~ ERROR used binding which is prefixed with an underscore\n }\n \n /// Test that we do not lint if the underscore is not a prefix\n fn non_prefix_underscore(some_foo: u32) -> u32 {\n     some_foo + 1\n }\n \n-/// Test that we do not lint if we do not use the binding\n-fn unused_underscore(_foo: u32) -> u32 {\n+/// Test that we do not lint if we do not use the binding (simple case)\n+fn unused_underscore_simple(_foo: u32) -> u32 {\n+    1\n+}\n+\n+#[deny(unused_variables)]\n+/// Test that we do not lint if we do not use the binding (complex case). This checks for\n+/// compatibility with the built-in `unused_variables` lint.\n+fn unused_underscore_complex(mut _foo: u32) -> u32 {\n+    _foo += 1;\n+    _foo = 2;\n     1\n }\n \n ///Test that we do not lint for multiple underscores\n-fn multiple_underscores(__x: u32) -> u32 {\n-    __x + 1\n+fn multiple_underscores(__foo: u32) -> u32 {\n+    __foo + 1\n }\n \n // Non-variable bindings with preceding underscore\n@@ -54,8 +63,8 @@ fn main() {\n     in_macro(foo);\n     // possible false positives\n     let _ = non_prefix_underscore(foo);\n-    let _ = unused_underscore(foo);\n+    let _ = unused_underscore_simple(foo);\n+    let _ = unused_underscore_complex(foo);\n     let _ = multiple_underscores(foo);\n     non_variables();\n }\n-"}]}