{"sha": "d5262a945246a624113faaadbbdae4ec5013c862", "node_id": "C_kwDOAAsO6NoAKGQ1MjYyYTk0NTI0NmE2MjQxMTNmYWFhZGJiZGFlNGVjNTAxM2M4NjI", "commit": {"author": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-08-22T06:28:50Z"}, "committer": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-08-26T14:10:11Z"}, "message": "translations(rustc_session): migrate 80% of the file parse.rs\n\nThis commit migrates around 80% of the parse file to use SsessionDiagnostic\nWe still have to migrate struct_err and struct_warn.", "tree": {"sha": "5a822b5196246bfdbc3dbb9a7574ace5730946d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a822b5196246bfdbc3dbb9a7574ace5730946d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5262a945246a624113faaadbbdae4ec5013c862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5262a945246a624113faaadbbdae4ec5013c862", "html_url": "https://github.com/rust-lang/rust/commit/d5262a945246a624113faaadbbdae4ec5013c862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5262a945246a624113faaadbbdae4ec5013c862/comments", "author": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "706452eba74026c51e8d0fa30aee2497c69eafc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/706452eba74026c51e8d0fa30aee2497c69eafc0", "html_url": "https://github.com/rust-lang/rust/commit/706452eba74026c51e8d0fa30aee2497c69eafc0"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "e94a7b2c1c8e96fb42126d347179187c49fe8ed4", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=d5262a945246a624113faaadbbdae4ec5013c862", "patch": "@@ -1,5 +1,13 @@\n-incorrect_cgu_reuse_type = \n+session_incorrect_cgu_reuse_type =\n     CGU-reuse for `{$cgu_user_name}` is `{$actual_reuse}` but should be `{$at_least}``${expected_reuse}`\n \n-cgu_not_recorded = \n-    CGU-reuse for `{$cgu_user_name}` is (mangled: `{$cgu_name}`) was not recorded`\n\\ No newline at end of file\n+session_cgu_not_recorded =\n+    CGU-reuse for `{$cgu_user_name}` is (mangled: `{$cgu_name}`) was not recorded`\n+\n+session_feature_gate_error = {$explain}\n+\n+session_feature_diagnostic_for_issue =\n+    see issue #{$n} <https://github.com/rust-lang/rust/issues/{$n}> for more information\n+\n+session_feature_diagnostic_help =\n+    add `#![feature({$feature})]` to the crate attributes to enable"}, {"sha": "0b75a89c4d8a17fdd215081ad93aa833bdf35c37", "filename": "compiler/rustc_session/src/cgu_reuse_tracker.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs?ref=d5262a945246a624113faaadbbdae4ec5013c862", "patch": "@@ -3,7 +3,6 @@\n //! output.\n \n use crate::errors::IncorrectCguReuseType;\n-// use crate::errors::{CguNotRecorded, IncorrectCguReuseType};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_span::{Span, Symbol};\n@@ -129,11 +128,14 @@ impl CguReuseTracker {\n                         };\n                     }\n                 } else {\n+                    //FIXME: Remove this once PR #100694 that implements `[fatal(..)]` is merged\n                     let msg = format!(\n                         \"CGU-reuse for `{cgu_user_name}` (mangled: `{cgu_name}`) was \\\n                                        not recorded\"\n                     );\n                     diag.span_fatal(error_span.0, &msg)\n+\n+                    //FIXME: Uncomment this once PR #100694 that implements `[fatal(..)]` is merged\n                     // CguNotRecorded { cgu_user_name, cgu_name };\n                 }\n             }"}, {"sha": "54e5fe82f5c4d93f92978f51e9ee2938d656c9fc", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=d5262a945246a624113faaadbbdae4ec5013c862", "patch": "@@ -1,10 +1,13 @@\n+use std::num::NonZeroU32;\n+\n use crate as rustc_session;\n use crate::cgu_reuse_tracker::CguReuse;\n+use rustc_errors::MultiSpan;\n use rustc_macros::SessionDiagnostic;\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n-#[error(session::incorrect_cgu_reuse_type)]\n+#[diag(session::incorrect_cgu_reuse_type)]\n pub struct IncorrectCguReuseType<'a> {\n     #[primary_span]\n     pub span: Span,\n@@ -14,9 +17,30 @@ pub struct IncorrectCguReuseType<'a> {\n     pub at_least: &'a str,\n }\n \n+//FIXME: Uncomment this once PR #100694 that implements `[fatal(..)]` is merged\n // #[derive(SessionDiagnostic)]\n // #[fatal(session::cgu_not_recorded)]\n // pub struct CguNotRecorded<'a> {\n //     pub cgu_user_name: &'a str,\n //     pub cgu_name: &'a str,\n // }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::feature_gate_error, code = \"E0658\")]\n+pub struct FeatureGateError<'a> {\n+    #[primary_span]\n+    pub span: MultiSpan,\n+    pub explain: &'a str,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[note(session::feature_diagnostic_for_issue)]\n+pub struct FeatureDiagnosticForIssue {\n+    pub n: NonZeroU32,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[help(session::feature_diagnostic_help)]\n+pub struct FeatureDiagnosticHelp {\n+    pub feature: Symbol,\n+}"}, {"sha": "3f098078173f4817d8a58bbd756ec272b6b1d459", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=d5262a945246a624113faaadbbdae4ec5013c862", "patch": "@@ -8,8 +8,6 @@\n #![feature(map_many_mut)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n-#![deny(rustc::untranslatable_diagnostic)]\n-#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "ebec754dcffb841b063ed5ea0b4415bee8822345", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5262a945246a624113faaadbbdae4ec5013c862/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=d5262a945246a624113faaadbbdae4ec5013c862", "patch": "@@ -2,6 +2,7 @@\n //! It also serves as an input to the parser itself.\n \n use crate::config::CheckCfg;\n+use crate::errors::{FeatureDiagnosticForIssue, FeatureDiagnosticHelp, FeatureGateError};\n use crate::lint::{\n     builtin::UNSTABLE_SYNTAX_PRE_EXPANSION, BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId,\n };\n@@ -11,7 +12,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n-    error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n+    fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n     DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n@@ -112,7 +113,7 @@ pub fn feature_err_issue<'a>(\n             .map(|err| err.cancel());\n     }\n \n-    let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n+    let mut err = sess.create_err(FeatureGateError { span, explain });\n     add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n     err\n }\n@@ -130,6 +131,8 @@ pub fn feature_warn<'a>(sess: &'a ParseSess, feature: Symbol, span: Span, explai\n ///\n /// This variant allows you to control whether it is a library or language feature.\n /// Almost always, you want to use this for a language feature. If so, prefer `feature_warn`.\n+#[allow(rustc::diagnostic_outside_of_impl)]\n+#[allow(rustc::untranslatable_diagnostic)]\n pub fn feature_warn_issue<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n@@ -172,14 +175,12 @@ pub fn add_feature_diagnostics_for_issue<'a>(\n     issue: GateIssue,\n ) {\n     if let Some(n) = find_feature_issue(feature, issue) {\n-        err.note(&format!(\n-            \"see issue #{n} <https://github.com/rust-lang/rust/issues/{n}> for more information\"\n-        ));\n+        err.subdiagnostic(FeatureDiagnosticForIssue { n });\n     }\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n     if sess.unstable_features.is_nightly_build() {\n-        err.help(&format!(\"add `#![feature({feature})]` to the crate attributes to enable\"));\n+        err.subdiagnostic(FeatureDiagnosticHelp { feature });\n     }\n }\n \n@@ -372,6 +373,8 @@ impl ParseSess {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -380,16 +383,22 @@ impl ParseSess {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.span_diagnostic.struct_warn(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.span_diagnostic.struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_diagnostic<G: EmissionGuarantee>(\n         &self,\n         msg: impl Into<DiagnosticMessage>,"}]}