{"sha": "26e4de9557e5924d001652138ec0f8f40dc40372", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTRkZTk1NTdlNTkyNGQwMDE2NTIxMzhlYzBmOGY0MGRjNDAzNzI=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2020-10-08T22:49:27Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2020-10-09T19:37:50Z"}, "message": "allow refs in our constant handling", "tree": {"sha": "cd62da8c7094711a070aedadadaabb0f325bcb44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd62da8c7094711a070aedadadaabb0f325bcb44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e4de9557e5924d001652138ec0f8f40dc40372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e4de9557e5924d001652138ec0f8f40dc40372", "html_url": "https://github.com/rust-lang/rust/commit/26e4de9557e5924d001652138ec0f8f40dc40372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e4de9557e5924d001652138ec0f8f40dc40372/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265e4841b7d8ee26ed0d642075f3c90496ba610a", "url": "https://api.github.com/repos/rust-lang/rust/commits/265e4841b7d8ee26ed0d642075f3c90496ba610a", "html_url": "https://github.com/rust-lang/rust/commit/265e4841b7d8ee26ed0d642075f3c90496ba610a"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "c5e33b288a9c787a8f3aab6ce1950084f912ac1d", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26e4de9557e5924d001652138ec0f8f40dc40372/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e4de9557e5924d001652138ec0f8f40dc40372/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=26e4de9557e5924d001652138ec0f8f40dc40372", "patch": "@@ -40,6 +40,8 @@ pub enum Constant {\n     Tuple(Vec<Constant>),\n     /// A raw pointer.\n     RawPtr(u128),\n+    /// A reference\n+    Ref(Box<Constant>),\n     /// A literal with syntax error.\n     Err(Symbol),\n }\n@@ -66,6 +68,7 @@ impl PartialEq for Constant {\n             (&Self::Bool(l), &Self::Bool(r)) => l == r,\n             (&Self::Vec(ref l), &Self::Vec(ref r)) | (&Self::Tuple(ref l), &Self::Tuple(ref r)) => l == r,\n             (&Self::Repeat(ref lv, ref ls), &Self::Repeat(ref rv, ref rs)) => ls == rs && lv == rv,\n+            (&Self::Ref(ref lb), &Self::Ref(ref rb)) => *lb == *rb,\n             // TODO: are there inter-type equalities?\n             _ => false,\n         }\n@@ -110,6 +113,9 @@ impl Hash for Constant {\n             Self::RawPtr(u) => {\n                 u.hash(state);\n             },\n+            Self::Ref(ref r) => {\n+                r.hash(state);\n+            },\n             Self::Err(ref s) => {\n                 s.hash(state);\n             },\n@@ -144,6 +150,7 @@ impl Constant {\n                     x => x,\n                 }\n             },\n+            (&Self::Ref(ref lb), &Self::Ref(ref rb)) => Self::partial_cmp(tcx, cmp_type, lb, rb),\n             // TODO: are there any useful inter-type orderings?\n             _ => None,\n         }\n@@ -239,7 +246,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n             ExprKind::Unary(op, ref operand) => self.expr(operand).and_then(|o| match op {\n                 UnOp::UnNot => self.constant_not(&o, self.typeck_results.expr_ty(e)),\n                 UnOp::UnNeg => self.constant_negate(&o, self.typeck_results.expr_ty(e)),\n-                UnOp::UnDeref => Some(o),\n+                UnOp::UnDeref => Some(if let Constant::Ref(r) = o { *r } else { o }),\n             }),\n             ExprKind::Binary(op, ref left, ref right) => self.binop(op, left, right),\n             ExprKind::Call(ref callee, ref args) => {\n@@ -269,6 +276,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 }\n             },\n             ExprKind::Index(ref arr, ref index) => self.index(arr, index),\n+            ExprKind::AddrOf(_, _, ref inner) => self.expr(inner).map(|r| Constant::Ref(Box::new(r))),\n             // TODO: add other expressions.\n             _ => None,\n         }"}, {"sha": "586784b73e697dc564fdccbfc79ab43b6cc51977", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26e4de9557e5924d001652138ec0f8f40dc40372/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e4de9557e5924d001652138ec0f8f40dc40372/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=26e4de9557e5924d001652138ec0f8f40dc40372", "patch": "@@ -2,6 +2,7 @@\n #![allow(\n     unused,\n     clippy::no_effect,\n+    clippy::op_ref,\n     clippy::unnecessary_operation,\n     clippy::cast_lossless,\n     clippy::many_single_char_names\n@@ -116,4 +117,8 @@ fn main() {\n     1.23f64.signum() != x64.signum();\n     1.23f64.signum() != -(x64.signum());\n     1.23f64.signum() != 3.21f64.signum();\n+\n+    // the comparison should also look through references\n+    &0.0 == &ZERO;\n+    &&&&0.0 == &&&&ZERO;\n }"}, {"sha": "bb4051c466201f9720a5ba2863cfb0be945f918b", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26e4de9557e5924d001652138ec0f8f40dc40372/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26e4de9557e5924d001652138ec0f8f40dc40372/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=26e4de9557e5924d001652138ec0f8f40dc40372", "patch": "@@ -1,5 +1,5 @@\n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:65:5\n+  --> $DIR/float_cmp.rs:66:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(ONE as f64 - 2.0).abs() > error_margin`\n@@ -8,39 +8,39 @@ LL |     ONE as f64 != 2.0;\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:70:5\n+  --> $DIR/float_cmp.rs:71:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some margin of error: `(x - 1.0).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:73:5\n+  --> $DIR/float_cmp.rs:74:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(twice(x) - twice(ONE as f64)).abs() > error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:93:5\n+  --> $DIR/float_cmp.rs:94:5\n    |\n LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` arrays\n-  --> $DIR/float_cmp.rs:98:5\n+  --> $DIR/float_cmp.rs:99:5\n    |\n LL |     a1 == a2;\n    |     ^^^^^^^^\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:99:5\n+  --> $DIR/float_cmp.rs:100:5\n    |\n LL |     a1[0] == a2[0];\n    |     ^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(a1[0] - a2[0]).abs() < error_margin`"}]}