{"sha": "46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzUwZDA0MDlhOWMzYmE1MjE0YWEyMGNjYjBjOWJkYmYwOWVhN2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-10T00:28:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-13T12:19:27Z"}, "message": "Merge VariantData and VariantData_", "tree": {"sha": "5f5e60e0b82806a723a1194c5747fe7a33db6cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f5e60e0b82806a723a1194c5747fe7a33db6cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "html_url": "https://github.com/rust-lang/rust/commit/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5225cbe92d962dfed922b434a21f8474f303da2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5225cbe92d962dfed922b434a21f8474f303da2", "html_url": "https://github.com/rust-lang/rust/commit/a5225cbe92d962dfed922b434a21f8474f303da2"}], "stats": {"total": 302, "additions": 141, "deletions": 161}, "files": [{"sha": "fc7531d3f61bae924d5091dbd6ec080c59cd7cf6", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -134,7 +134,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             ItemEnum(ref enum_definition, _) => {\n                 for v in &enum_definition.variants {\n                     let variant_def_index =\n-                        self.insert_def(v.node.data.id,\n+                        self.insert_def(v.node.data.id(),\n                                         NodeVariant(&**v),\n                                         DefPathData::EnumVariant(v.node.name));\n \n@@ -151,7 +151,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             ItemStruct(ref struct_def, _) => {\n                 // If this is a tuple-like struct, register the constructor.\n                 if !struct_def.is_struct() {\n-                    self.insert_def(struct_def.id,\n+                    self.insert_def(struct_def.id(),\n                                     NodeStructCtor(&**struct_def),\n                                     DefPathData::StructCtor);\n                 }"}, {"sha": "8e2c2e6a0bfbd2d0ce8fc09f787ee967edf3bd91", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -382,7 +382,7 @@ fn each_auxiliary_node_id<F>(item: &hir::Item, callback: F) -> bool where\n         hir::ItemStruct(ref struct_def, _) => {\n             // If this is a newtype struct, return the constructor.\n             if struct_def.is_tuple() {\n-                continue_ = callback(struct_def.id);\n+                continue_ = callback(struct_def.id());\n             }\n         }\n         _ => {}\n@@ -1019,7 +1019,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_attributes(rbml_w, &item.attrs);\n         encode_repr_attrs(rbml_w, ecx, &item.attrs);\n         for v in &enum_definition.variants {\n-            encode_variant_id(rbml_w, ecx.tcx.map.local_def_id(v.node.data.id));\n+            encode_variant_id(rbml_w, ecx.tcx.map.local_def_id(v.node.data.id()));\n         }\n         encode_inlined_item(ecx, rbml_w, InlinedItemRef::Item(item));\n         encode_path(rbml_w, path);\n@@ -1069,7 +1069,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_inherent_implementations(ecx, rbml_w, def_id);\n \n         if !struct_def.is_struct() {\n-            let ctor_did = ecx.tcx.map.local_def_id(struct_def.id);\n+            let ctor_did = ecx.tcx.map.local_def_id(struct_def.id());\n             rbml_w.wr_tagged_u64(tag_items_data_item_struct_ctor,\n                                  def_to_u64(ctor_did));\n         }\n@@ -1082,7 +1082,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n         // If this is a tuple-like struct, encode the type of the constructor.\n         if !struct_def.is_struct() {\n-            encode_info_for_struct_ctor(ecx, rbml_w, item.name, struct_def.id, index, item.id);\n+            encode_info_for_struct_ctor(ecx, rbml_w, item.name, struct_def.id(), index, item.id);\n         }\n       }\n       hir::ItemDefaultImpl(unsafety, _) => {"}, {"sha": "e81445f19ede661ff85aadda7ee947415bf41ce7", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -1315,17 +1315,17 @@ fn copy_item_types(dcx: &DecodeContext, ii: &InlinedItem, orig_did: DefId) {\n                     def.variants.iter().zip(orig_def.variants.iter())\n                 {\n                     debug!(\"astencode: copying variant {:?} => {:?}\",\n-                           orig_variant.did, i_variant.node.data.id);\n-                    copy_item_type(dcx, i_variant.node.data.id, orig_variant.did);\n+                           orig_variant.did, i_variant.node.data.id());\n+                    copy_item_type(dcx, i_variant.node.data.id(), orig_variant.did);\n                 }\n             }\n             hir::ItemStruct(ref def, _) => {\n                 if !def.is_struct() {\n                     let ctor_did = dcx.tcx.lookup_adt_def(orig_did)\n                         .struct_variant().did;\n                     debug!(\"astencode: copying ctor {:?} => {:?}\", ctor_did,\n-                           def.id);\n-                    copy_item_type(dcx, def.id, ctor_did);\n+                           def.id());\n+                    copy_item_type(dcx, def.id(), ctor_did);\n                 }\n             }\n             _ => {}"}, {"sha": "fd73fe45180becc792314c348b6c0f0d6300d293", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n         let mut discriminant_map = self.discriminant_map.borrow_mut();\n         match enum_definition.variants.first() {\n             None => { return; }\n-            Some(variant) if discriminant_map.contains_key(&variant.node.data.id) => {\n+            Some(variant) if discriminant_map.contains_key(&variant.node.data.id()) => {\n                 return;\n             }\n             _ => {}\n@@ -177,7 +177,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n         // Go through all the variants.\n         let mut variant_stack: Vec<ast::NodeId> = Vec::new();\n         for variant in enum_definition.variants.iter().rev() {\n-            variant_stack.push(variant.node.data.id);\n+            variant_stack.push(variant.node.data.id());\n             // When we find an expression, every variant currently on the stack\n             // is affected by that expression.\n             if let Some(ref expr) = variant.node.disr_expr {\n@@ -208,7 +208,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n \n     fn visit_variant(&mut self, variant: &'ast hir::Variant,\n                      _: &'ast hir::Generics, _: ast::NodeId) {\n-        let variant_id = variant.node.data.id;\n+        let variant_id = variant.node.data.id();\n         let maybe_expr;\n         if let Some(get_expr) = self.discriminant_map.borrow().get(&variant_id) {\n             // This is necessary because we need to let the `discriminant_map`"}, {"sha": "3c68fb62e244519fad1b19848740bbe94304447d", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -63,7 +63,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n     fn variant_expr<'a>(variants: &'a [P<hir::Variant>], id: ast::NodeId)\n                         -> Option<&'a Expr> {\n         for variant in variants {\n-            if variant.node.data.id == id {\n+            if variant.node.data.id() == id {\n                 return variant.node.disr_expr.as_ref().map(|e| &**e);\n             }\n         }"}, {"sha": "7b11419d92562c4e0300a05d87d15c49fc6c5243", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -339,7 +339,8 @@ impl<'v> Visitor<'v> for LifeSeeder {\n         }\n         match item.node {\n             hir::ItemEnum(ref enum_def, _) if allow_dead_code => {\n-                self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.data.id));\n+                self.worklist.extend(enum_def.variants.iter()\n+                                                      .map(|variant| variant.node.data.id()));\n             }\n             hir::ItemTrait(_, _, _, ref trait_items) => {\n                 for trait_item in trait_items {\n@@ -427,7 +428,7 @@ fn find_live(tcx: &ty::ctxt,\n fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> {\n     match item.node {\n         hir::ItemStruct(ref struct_def, _) if !struct_def.is_struct() => {\n-            Some(struct_def.id)\n+            Some(struct_def.id())\n         }\n         _ => None\n     }\n@@ -466,7 +467,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n \n     fn should_warn_about_variant(&mut self, variant: &hir::Variant_) -> bool {\n-        !self.symbol_is_live(variant.data.id, None)\n+        !self.symbol_is_live(variant.data.id(), None)\n             && !has_allow_dead_code_or_lang_attr(&variant.attrs)\n     }\n \n@@ -542,7 +543,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n                 hir::ItemEnum(ref enum_def, _) => {\n                     for variant in &enum_def.variants {\n                         if self.should_warn_about_variant(&variant.node) {\n-                            self.warn_dead_code(variant.node.data.id, variant.span,\n+                            self.warn_dead_code(variant.node.data.id(), variant.span,\n                                                 variant.node.name, \"variant\");\n                         }\n                     }"}, {"sha": "af295c3e584b04310fe160b6657d298fd3eba0bd", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n \n         if let hir::ItemStruct(ref sd, _) = i.node {\n             if !sd.is_struct() {\n-                self.annotate(sd.id, true, &i.attrs, i.span, |_| {}, true)\n+                self.annotate(sd.id(), true, &i.attrs, i.span, |_| {}, true)\n             }\n         }\n     }\n@@ -208,7 +208,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self, var: &Variant, g: &'v Generics, item_id: NodeId) {\n-        self.annotate(var.node.data.id, true, &var.node.attrs, var.span,\n+        self.annotate(var.node.data.id(), true, &var.node.attrs, var.span,\n                       |v| visit::walk_variant(v, var, g, item_id), true)\n     }\n "}, {"sha": "dafca7188d5adc7b7b7d88f77b0a43c228b76b2d", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -694,18 +694,15 @@ pub fn noop_fold_where_predicate<T: Folder>(pred: WherePredicate, fld: &mut T) -\n }\n \n pub fn noop_fold_struct_def<T: Folder>(struct_def: P<VariantData>, fld: &mut T) -> P<VariantData> {\n-    struct_def.map(|VariantData { data_, id }| {\n-        VariantData {\n-            data_: match data_ {\n-                VariantData_::Struct(fields) => {\n-                    VariantData_::Struct(fields.move_map(|f| fld.fold_struct_field(f)))\n-                }\n-                VariantData_::Tuple(fields) => {\n-                    VariantData_::Tuple(fields.move_map(|f| fld.fold_struct_field(f)))\n-                }\n-                VariantData_::Unit => VariantData_::Unit\n-            },\n-            id: fld.new_id(id),\n+    struct_def.map(|vdata| {\n+        match vdata {\n+            VariantData::Struct(fields, id) => {\n+                VariantData::Struct(fields.move_map(|f| fld.fold_struct_field(f)), fld.new_id(id))\n+            }\n+            VariantData::Tuple(fields, id) => {\n+                VariantData::Tuple(fields.move_map(|f| fld.fold_struct_field(f)), fld.new_id(id))\n+            }\n+            VariantData::Unit(id) => VariantData::Unit(fld.new_id(id))\n         }\n     })\n }"}, {"sha": "a64e1e147fe8014c8c042e963fd6bab187a0e9ae", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -1162,18 +1162,10 @@ impl StructFieldKind {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum VariantData_ {\n-    Struct(Vec<StructField>),\n-    Tuple(Vec<StructField>),\n-    Unit,\n-}\n-\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct VariantData {\n-    pub data_: VariantData_,\n-    /// ID of the constructor. This is only used for tuple- or enum-like\n-    /// structs.\n-    pub id: NodeId,\n+pub enum VariantData {\n+    Struct(Vec<StructField>, NodeId),\n+    Tuple(Vec<StructField>, NodeId),\n+    Unit(NodeId),\n }\n \n pub type FieldIter<'a> = iter::FlatMap<option::IntoIter<&'a Vec<StructField>>,\n@@ -1183,19 +1175,24 @@ pub type FieldIter<'a> = iter::FlatMap<option::IntoIter<&'a Vec<StructField>>,\n impl VariantData {\n     pub fn fields(&self) -> FieldIter {\n         fn vec_iter<T>(v: &Vec<T>) -> slice::Iter<T> { v.iter() }\n-        match self.data_ {\n-            VariantData_::Struct(ref fields) | VariantData_::Tuple(ref fields) => Some(fields),\n+        match *self {\n+            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => Some(fields),\n             _ => None,\n         }.into_iter().flat_map(vec_iter)\n     }\n+    pub fn id(&self) -> NodeId {\n+        match *self {\n+            VariantData::Struct(_, id) | VariantData::Tuple(_, id) | VariantData::Unit(id) => id\n+        }\n+    }\n     pub fn is_struct(&self) -> bool {\n-        if let VariantData_::Struct(..) = self.data_ { true } else { false }\n+        if let VariantData::Struct(..) = *self { true } else { false }\n     }\n     pub fn is_tuple(&self) -> bool {\n-        if let VariantData_::Tuple(..) = self.data_ { true } else { false }\n+        if let VariantData::Tuple(..) = *self { true } else { false }\n     }\n     pub fn is_unit(&self) -> bool {\n-        if let VariantData_::Unit = self.data_ { true } else { false }\n+        if let VariantData::Unit(..) = *self { true } else { false }\n     }\n }\n "}, {"sha": "890896eb1c5aafbeb84d3c38097a0217a4c60c92", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -499,19 +499,16 @@ pub fn lower_where_predicate(_lctx: &LoweringContext,\n }\n \n pub fn lower_struct_def(_lctx: &LoweringContext, sd: &VariantData) -> P<hir::VariantData> {\n-    P(hir::VariantData {\n-        id: sd.id,\n-        data_: match sd.data_ {\n-            VariantData_::Struct(ref fields) => {\n-                hir::VariantData_::Struct(fields.iter()\n-                                                .map(|f| lower_struct_field(_lctx, f)).collect())\n-            }\n-            VariantData_::Tuple(ref fields) => {\n-                hir::VariantData_::Tuple(fields.iter()\n-                                               .map(|f| lower_struct_field(_lctx, f)).collect())\n-            }\n-            VariantData_::Unit => hir::VariantData_::Unit\n+    P(match *sd {\n+        VariantData::Struct(ref fields, id) => {\n+            hir::VariantData::Struct(fields.iter()\n+                                           .map(|f| lower_struct_field(_lctx, f)).collect(), id)\n+        }\n+        VariantData::Tuple(ref fields, id) => {\n+            hir::VariantData::Tuple(fields.iter()\n+                                          .map(|f| lower_struct_field(_lctx, f)).collect(), id)\n         }\n+        VariantData::Unit(id) => hir::VariantData::Unit(id)\n     })\n }\n "}, {"sha": "5d8973ead47db27a1ddea1bc4a8128d9c7834b01", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n                         _: &hir::Generics,\n                         _: NodeId,\n                         _: Span) {\n-        self.operation.visit_id(struct_def.id);\n+        self.operation.visit_id(struct_def.id());\n         visit::walk_struct_def(self, struct_def);\n     }\n "}, {"sha": "f5a58656080db785f1fd276c677905637093d826", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -527,7 +527,8 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext, v: &hir::Variant, _: &hir::Generics) {\n-        self.check_missing_docs_attrs(cx, Some(v.node.data.id), &v.node.attrs, v.span, \"a variant\");\n+        self.check_missing_docs_attrs(cx, Some(v.node.data.id()),\n+                                      &v.node.attrs, v.span, \"a variant\");\n         assert!(!self.in_variant);\n         self.in_variant = true;\n     }"}, {"sha": "608558ac2bdb9e6a7005192246d590cf2d4aa147", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -82,7 +82,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n                     // The parent is considered the enclosing enum because the\n                     // enum will dictate the privacy visibility of this variant\n                     // instead.\n-                    self.parents.insert(variant.node.data.id, item.id);\n+                    self.parents.insert(variant.node.data.id(), item.id);\n                 }\n             }\n \n@@ -133,7 +133,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n         // Struct constructors are parented to their struct definitions because\n         // they essentially are the struct definitions.\n         if !s.is_struct() {\n-            self.parents.insert(s.id, item_id);\n+            self.parents.insert(s.id(), item_id);\n         }\n \n         // While we have the id of the struct definition, go ahead and parent\n@@ -233,8 +233,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // public all variants are public unless they're explicitly priv\n             hir::ItemEnum(ref def, _) if public_first => {\n                 for variant in &def.variants {\n-                    self.exported_items.insert(variant.node.data.id);\n-                    self.public_items.insert(variant.node.data.id);\n+                    self.exported_items.insert(variant.node.data.id());\n+                    self.public_items.insert(variant.node.data.id());\n                 }\n             }\n \n@@ -320,7 +320,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // Struct constructors are public if the struct is all public.\n             hir::ItemStruct(ref def, _) if public_first => {\n                 if !def.is_struct() {\n-                    self.exported_items.insert(def.id);\n+                    self.exported_items.insert(def.id());\n                 }\n                 // fields can be public or private, so lets check\n                 for field in def.fields() {\n@@ -1431,7 +1431,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics, item_id: ast::NodeId) {\n-        if self.exported_items.contains(&v.node.data.id) {\n+        if self.exported_items.contains(&v.node.data.id()) {\n             self.in_variant = true;\n             visit::walk_variant(self, v, g, item_id);\n             self.in_variant = false;"}, {"sha": "c051f8c263723916ede63359efcb5a17f644b067", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 let (forbid, ctor_id) = if struct_def.is_struct() {\n                     (ForbidDuplicateTypesAndModules, None)\n                 } else {\n-                    (ForbidDuplicateTypesAndValues, Some(struct_def.id))\n+                    (ForbidDuplicateTypesAndValues, Some(struct_def.id()))\n                 };\n \n                 let name_bindings = self.add_child(name, parent, forbid, sp);\n@@ -590,7 +590,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         let name = variant.node.name;\n         let is_exported = if variant.node.data.is_struct() {\n             // Not adding fields for variants as they are not accessed with a self receiver\n-            let variant_def_id = self.ast_map.local_def_id(variant.node.data.id);\n+            let variant_def_id = self.ast_map.local_def_id(variant.node.data.id());\n             self.structs.insert(variant_def_id, Vec::new());\n             true\n         } else {\n@@ -603,10 +603,12 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         // variants are always treated as importable to allow them to be glob\n         // used\n         child.define_value(DefVariant(item_id,\n-                                      self.ast_map.local_def_id(variant.node.data.id), is_exported),\n+                                      self.ast_map.local_def_id(variant.node.data.id()),\n+                                      is_exported),\n                            variant.span, DefModifiers::PUBLIC | DefModifiers::IMPORTABLE);\n         child.define_type(DefVariant(item_id,\n-                                     self.ast_map.local_def_id(variant.node.data.id), is_exported),\n+                                     self.ast_map.local_def_id(variant.node.data.id()),\n+                                     is_exported),\n                           variant.span, DefModifiers::PUBLIC | DefModifiers::IMPORTABLE);\n     }\n "}, {"sha": "146fa857fc8504e05648767b1424a03d1ae486b4", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -467,7 +467,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         self.fmt.struct_str(item.span,\n                             sub_span,\n                             item.id,\n-                            def.id,\n+                            def.id(),\n                             &qualname,\n                             self.cur_scope,\n                             &val);\n@@ -503,15 +503,15 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n             self.fmt.struct_variant_str(variant.span,\n                                         self.span.span_for_first_ident(variant.span),\n-                                        variant.node.data.id,\n-                                        variant.node.data.id,\n+                                        variant.node.data.id(),\n+                                        variant.node.data.id(),\n                                         &qualname,\n                                         &enum_data.qualname,\n                                         &val,\n                                         enum_data.id);\n \n             for field in variant.node.data.fields() {\n-                self.process_struct_field_def(field, variant.node.data.id);\n+                self.process_struct_field_def(field, variant.node.data.id());\n                 self.visit_ty(&*field.node.ty);\n             }\n         }"}, {"sha": "9fa1aaf76f819dc5fcd1d31c42c954a9ff874e69", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -2458,7 +2458,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                 ccx.sess().bug(\"attempt to register a constructor of \\\n                                   a non-tuple-like struct\")\n             } else {\n-                struct_def.id\n+                struct_def.id()\n             };\n             let parent = ccx.tcx().map.get_parent(id);\n             let struct_item = ccx.tcx().map.expect_item(parent);"}, {"sha": "14e1ca7675f790f9981089818017478ff4a362eb", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -110,17 +110,17 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n                     let ty_vs = &ccx.tcx().lookup_adt_def(parent_id).variants;\n                     assert_eq!(ast_vs.len(), ty_vs.len());\n                     for (ast_v, ty_v) in ast_vs.iter().zip(ty_vs.iter()) {\n-                        if ty_v.did == fn_id { my_id = ast_v.node.data.id; }\n-                        ccx.external().borrow_mut().insert(ty_v.did, Some(ast_v.node.data.id));\n+                        if ty_v.did == fn_id { my_id = ast_v.node.data.id(); }\n+                        ccx.external().borrow_mut().insert(ty_v.did, Some(ast_v.node.data.id()));\n                     }\n                 }\n                 hir::ItemStruct(ref struct_def, _) => {\n                     if struct_def.is_struct() {\n                         ccx.sess().bug(\"instantiate_inline: called on a \\\n                                                                  non-tuple struct\")\n                     } else {\n-                        ccx.external().borrow_mut().insert(fn_id, Some(struct_def.id));\n-                        my_id = struct_def.id;\n+                        ccx.external().borrow_mut().insert(fn_id, Some(struct_def.id()));\n+                        my_id = struct_def.id();\n                     }\n                 }\n                 _ => ccx.sess().bug(\"instantiate_inline: item has a \\"}, {"sha": "f84f0feb9603020e139ed75e6b6e3299b2b63884", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -250,7 +250,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 panic!(\"ast-mapped struct didn't have a ctor id\")\n             }\n             base::trans_tuple_struct(ccx,\n-                                     struct_def.id,\n+                                     struct_def.id(),\n                                      psubsts,\n                                      d);\n             d"}, {"sha": "194710a46fbceb388f30665b12aabe1c351f46ea", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -1015,7 +1015,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             }\n \n             if !struct_def.is_struct() {\n-                convert_variant_ctor(tcx, struct_def.id, variant, scheme, predicates);\n+                convert_variant_ctor(tcx, struct_def.id(), variant, scheme, predicates);\n             }\n         },\n         hir::ItemTy(_, ref generics) => {\n@@ -1075,7 +1075,7 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         // an item.\n         convert_variant_ctor(\n             ccx.tcx,\n-            variant.node.data.id,\n+            variant.node.data.id(),\n             ty_variant,\n             scheme.clone(),\n             predicates.clone()\n@@ -1126,7 +1126,7 @@ fn convert_struct_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n     let did = tcx.map.local_def_id(it.id);\n     let ctor_id = if !def.is_struct() {\n-        tcx.map.local_def_id(def.id)\n+        tcx.map.local_def_id(def.id())\n     } else {\n         did\n     };\n@@ -1209,7 +1209,7 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                   disr: ty::Disr)\n                                   -> ty::VariantDefData<'tcx, 'tcx>\n     {\n-        let did = tcx.map.local_def_id(v.node.data.id);\n+        let did = tcx.map.local_def_id(v.node.data.id());\n         let name = v.node.name;\n         convert_struct_variant(tcx, did, name, disr, &v.node.data)\n     }"}, {"sha": "e4420d0dd92fa0ce11cf0994497aa3f6a2d9481c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -1853,7 +1853,7 @@ impl Clean<Item> for doctree::Variant {\n             source: self.whence.clean(cx),\n             visibility: None,\n             stability: self.stab.clean(cx),\n-            def_id: cx.map.local_def_id(self.def.id),\n+            def_id: cx.map.local_def_id(self.def.id()),\n             inner: VariantItem(Variant {\n                 kind: struct_def_to_variant_kind(&self.def, cx),\n             }),"}, {"sha": "1487c1668aac74a64211bb90074c8c02e6867885", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             variants: def.variants.iter().map(|v| Variant {\n                 name: v.node.name,\n                 attrs: v.node.attrs.clone(),\n-                stab: self.stability(v.node.data.id),\n+                stab: self.stability(v.node.data.id()),\n                 def: v.node.data.clone(),\n                 whence: v.span,\n             }).collect(),"}, {"sha": "7c82813775e2116fb79cd12e9d7e5de0de1376b1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -1742,18 +1742,10 @@ impl StructFieldKind {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum VariantData_ {\n-    Struct(Vec<StructField>),\n-    Tuple(Vec<StructField>),\n-    Unit,\n-}\n-\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct VariantData {\n-    pub data_: VariantData_,\n-    /// ID of the constructor. This is only used for tuple- or enum-like\n-    /// structs.\n-    pub id: NodeId,\n+pub enum VariantData {\n+    Struct(Vec<StructField>, NodeId),\n+    Tuple(Vec<StructField>, NodeId),\n+    Unit(NodeId),\n }\n \n pub type FieldIter<'a> = iter::FlatMap<option::IntoIter<&'a Vec<StructField>>,\n@@ -1763,19 +1755,24 @@ pub type FieldIter<'a> = iter::FlatMap<option::IntoIter<&'a Vec<StructField>>,\n impl VariantData {\n     pub fn fields(&self) -> FieldIter {\n         fn vec_iter<T>(v: &Vec<T>) -> slice::Iter<T> { v.iter() }\n-        match self.data_ {\n-            VariantData_::Struct(ref fields) | VariantData_::Tuple(ref fields) => Some(fields),\n+        match *self {\n+            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => Some(fields),\n             _ => None,\n         }.into_iter().flat_map(vec_iter)\n     }\n+    pub fn id(&self) -> NodeId {\n+        match *self {\n+            VariantData::Struct(_, id) | VariantData::Tuple(_, id) | VariantData::Unit(id) => id\n+        }\n+    }\n     pub fn is_struct(&self) -> bool {\n-        if let VariantData_::Struct(..) = self.data_ { true } else { false }\n+        if let VariantData::Struct(..) = *self { true } else { false }\n     }\n     pub fn is_tuple(&self) -> bool {\n-        if let VariantData_::Tuple(..) = self.data_ { true } else { false }\n+        if let VariantData::Tuple(..) = *self { true } else { false }\n     }\n     pub fn is_unit(&self) -> bool {\n-        if let VariantData_::Unit = self.data_ { true } else { false }\n+        if let VariantData::Unit(..) = *self { true } else { false }\n     }\n }\n "}, {"sha": "8c3360512d512f632880670a7929f42bfabae4b4", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -458,7 +458,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n                         _: &ast::Generics,\n                         _: NodeId,\n                         _: Span) {\n-        self.operation.visit_id(struct_def.id);\n+        self.operation.visit_id(struct_def.id());\n         visit::walk_struct_def(self, struct_def);\n     }\n "}, {"sha": "0ca110c5b1ed2cf1a490e7f3f9f782b91a8a5c53", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -167,22 +167,19 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n fn fold_struct<F>(cx: &mut Context<F>, def: P<ast::VariantData>) -> P<ast::VariantData> where\n     F: FnMut(&[ast::Attribute]) -> bool\n {\n-    def.map(|ast::VariantData { data_, id }| {\n-        ast::VariantData {\n-            data_: match data_ {\n-                ast::VariantData_::Struct(fields) => {\n-                    ast::VariantData_::Struct(fields.into_iter().filter(|m| {\n-                        (cx.in_cfg)(&m.node.attrs)\n-                    }).collect())\n-                }\n-                ast::VariantData_::Tuple(fields) => {\n-                    ast::VariantData_::Tuple(fields.into_iter().filter(|m| {\n-                        (cx.in_cfg)(&m.node.attrs)\n-                    }).collect())\n-                }\n-                ast::VariantData_::Unit => ast::VariantData_::Unit\n-            },\n-            id: id,\n+    def.map(|vdata| {\n+        match vdata {\n+            ast::VariantData::Struct(fields, id) => {\n+                ast::VariantData::Struct(fields.into_iter().filter(|m| {\n+                    (cx.in_cfg)(&m.node.attrs)\n+                }).collect(), id)\n+            }\n+            ast::VariantData::Tuple(fields, id) => {\n+                ast::VariantData::Tuple(fields.into_iter().filter(|m| {\n+                    (cx.in_cfg)(&m.node.attrs)\n+                }).collect(), id)\n+            }\n+            ast::VariantData::Unit(id) => ast::VariantData::Unit(id)\n         }\n     })\n }"}, {"sha": "9b06fbd0a0b858ef73b6615bbed3849be0b7ee4f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -1002,18 +1002,17 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             }}\n         }).collect();\n \n-        let data_ = if fields.is_empty() {\n-            ast::VariantData_::Unit\n+        let vdata = if fields.is_empty() {\n+            ast::VariantData::Unit(ast::DUMMY_NODE_ID)\n         } else {\n-            ast::VariantData_::Tuple(fields)\n+            ast::VariantData::Tuple(fields, ast::DUMMY_NODE_ID)\n         };\n \n         respan(span,\n                ast::Variant_ {\n                    name: name,\n                    attrs: Vec::new(),\n-                   data: P(ast::VariantData { data_: data_,\n-                                           id: ast::DUMMY_NODE_ID}),\n+                   data: P(vdata),\n                    disr_expr: None,\n                })\n     }"}, {"sha": "219a4649339dd753d9093a4dee2060f52c3febc3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -815,17 +815,18 @@ pub fn noop_fold_where_predicate<T: Folder>(\n }\n \n pub fn noop_fold_struct_def<T: Folder>(struct_def: P<VariantData>, fld: &mut T) -> P<VariantData> {\n-    struct_def.map(|VariantData { data_, id }| VariantData {\n-        data_: match data_ {\n-            ast::VariantData_::Struct(fields) => {\n-                ast::VariantData_::Struct(fields.move_map(|f| fld.fold_struct_field(f)))\n+    struct_def.map(|vdata| {\n+        match vdata {\n+            ast::VariantData::Struct(fields, id) => {\n+                ast::VariantData::Struct(fields.move_map(|f| fld.fold_struct_field(f)),\n+                                         fld.new_id(id))\n             }\n-            ast::VariantData_::Tuple(fields) => {\n-                ast::VariantData_::Tuple(fields.move_map(|f| fld.fold_struct_field(f)))\n+            ast::VariantData::Tuple(fields, id) => {\n+                ast::VariantData::Tuple(fields.move_map(|f| fld.fold_struct_field(f)),\n+                                        fld.new_id(id))\n             }\n-            ast::VariantData_::Unit => ast::VariantData_::Unit\n-        },\n-        id: fld.new_id(id),\n+            ast::VariantData::Unit(id) => ast::VariantData::Unit(fld.new_id(id))\n+        }\n     })\n }\n "}, {"sha": "934e4472bdc84827083127447febb2ce696f1e4a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -45,7 +45,7 @@ use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild, PatWildMulti};\n use ast::PatWildSingle;\n use ast::{PolyTraitRef, QSelf};\n use ast::{Return, BiShl, BiShr, Stmt, StmtDecl};\n-use ast::{StmtExpr, StmtSemi, StmtMac, VariantData, StructField, VariantData_};\n+use ast::{StmtExpr, StmtSemi, StmtMac, VariantData, StructField};\n use ast::{BiSub, StrStyle};\n use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n@@ -4640,36 +4640,34 @@ impl<'a> Parser<'a> {\n         // Otherwise if we look ahead and see a paren we parse a tuple-style\n         // struct.\n \n-        let data_ = if self.token.is_keyword(keywords::Where) {\n+        let vdata = if self.token.is_keyword(keywords::Where) {\n             generics.where_clause = try!(self.parse_where_clause());\n             if try!(self.eat(&token::Semi)) {\n                 // If we see a: `struct Foo<T> where T: Copy;` style decl.\n-                VariantData_::Unit\n+                VariantData::Unit(ast::DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                VariantData_::Struct(try!(self.parse_record_struct_body()))\n+                VariantData::Struct(try!(self.parse_record_struct_body()), ast::DUMMY_NODE_ID)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if try!(self.eat(&token::Semi) ){\n-            VariantData_::Unit\n+            VariantData::Unit(ast::DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData_::Struct(try!(self.parse_record_struct_body()))\n+            VariantData::Struct(try!(self.parse_record_struct_body()), ast::DUMMY_NODE_ID)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n-            VariantData_::Tuple(try!(self.parse_tuple_struct_body(&mut generics)))\n+            VariantData::Tuple(try!(self.parse_tuple_struct_body(&mut generics)),\n+                               ast::DUMMY_NODE_ID)\n         } else {\n             let token_str = self.this_token_to_string();\n             return Err(self.fatal(&format!(\"expected `where`, `{{`, `(`, or `;` after struct \\\n                                             name, found `{}`\", token_str)))\n         };\n \n         Ok((class_name,\n-         ItemStruct(P(ast::VariantData {\n-             data_: data_,\n-             id: ast::DUMMY_NODE_ID,\n-         }), generics),\n-         None))\n+            ItemStruct(P(vdata), generics),\n+            None))\n     }\n \n     pub fn parse_record_struct_body(&mut self) -> PResult<Vec<StructField>> {\n@@ -5107,10 +5105,7 @@ impl<'a> Parser<'a> {\n         }\n         try!(self.bump());\n \n-        Ok(P(VariantData {\n-            data_: VariantData_::Struct(fields),\n-            id: ast::DUMMY_NODE_ID,\n-        }))\n+        Ok(P(VariantData::Struct(fields, ast::DUMMY_NODE_ID)))\n     }\n \n     /// Parse the part of an \"enum\" decl following the '{'\n@@ -5146,16 +5141,13 @@ impl<'a> Parser<'a> {\n                         id: ast::DUMMY_NODE_ID,\n                     }});\n                 }\n-                struct_def = P(VariantData { data_: ast::VariantData_::Tuple(fields),\n-                                           id: ast::DUMMY_NODE_ID});\n+                struct_def = P(ast::VariantData::Tuple(fields, ast::DUMMY_NODE_ID));\n             } else if try!(self.eat(&token::Eq) ){\n                 disr_expr = Some(try!(self.parse_expr_nopanic()));\n                 any_disr = disr_expr.as_ref().map(|expr| expr.span);\n-                struct_def = P(VariantData { data_: ast::VariantData_::Unit,\n-                                           id: ast::DUMMY_NODE_ID});\n+                struct_def = P(ast::VariantData::Unit(ast::DUMMY_NODE_ID));\n             } else {\n-                struct_def = P(VariantData { data_: ast::VariantData_::Unit,\n-                                           id: ast::DUMMY_NODE_ID});\n+                struct_def = P(ast::VariantData::Unit(ast::DUMMY_NODE_ID));\n             }\n \n             let vr = ast::Variant_ {"}, {"sha": "e5a9ce216a92ab5ff1ebe8f76c7d9ab76a7c03dd", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=46750d0409a9c3ba5214aa20ccb0c9bdbf09ea7e", "patch": "@@ -3131,8 +3131,7 @@ mod tests {\n             name: ident,\n             attrs: Vec::new(),\n             // making this up as I go.... ?\n-            data: P(ast::VariantData { data_: ast::VariantData_::Unit,\n-                                    id: ast::DUMMY_NODE_ID}),\n+            data: P(ast::VariantData::Unit(ast::DUMMY_NODE_ID)),\n             disr_expr: None,\n         });\n "}]}