{"sha": "9e53db274b146e3cba5ebaaa3588f6a26fe3aba1", "node_id": "C_kwDOAAsO6NoAKDllNTNkYjI3NGIxNDZlM2NiYTVlYmFhYTM1ODhmNmEyNmZlM2FiYTE", "commit": {"author": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-11T19:52:14Z"}, "committer": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-11T19:52:14Z"}, "message": "refactor: use hir to test if a value is returned", "tree": {"sha": "43d6259972c279b91bc69ac001278dbffbc93ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43d6259972c279b91bc69ac001278dbffbc93ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e53db274b146e3cba5ebaaa3588f6a26fe3aba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e53db274b146e3cba5ebaaa3588f6a26fe3aba1", "html_url": "https://github.com/rust-lang/rust/commit/9e53db274b146e3cba5ebaaa3588f6a26fe3aba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e53db274b146e3cba5ebaaa3588f6a26fe3aba1/comments", "author": null, "committer": null, "parents": [{"sha": "80a68685db6914d05cda7c7ae05a87721c4d467d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a68685db6914d05cda7c7ae05a87721c4d467d", "html_url": "https://github.com/rust-lang/rust/commit/80a68685db6914d05cda7c7ae05a87721c4d467d"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "36b3321f91d33dfc8bf4ce7a49de52706a058cd0", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e53db274b146e3cba5ebaaa3588f6a26fe3aba1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e53db274b146e3cba5ebaaa3588f6a26fe3aba1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=9e53db274b146e3cba5ebaaa3588f6a26fe3aba1", "patch": "@@ -159,7 +159,7 @@ fn safety_builder(ast_func: &ast::Fn) -> Option<Vec<String>> {\n fn gen_ex_template(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n     let (mut lines, ex_helper) = gen_ex_start_helper(ast_func, ctx)?;\n     // Call the function, check result\n-    if returns_a_value(ast_func) {\n+    if returns_a_value(ast_func, ctx) {\n         if count_parameters(&ex_helper.param_list) < 3 {\n             lines.push(format!(\"assert_eq!({}, );\", ex_helper.function_call));\n         } else {\n@@ -183,7 +183,7 @@ fn gen_ex_template(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String\n /// `None` if the function has a `self` parameter but is not in an `impl`.\n fn gen_panic_ex_template(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n     let (mut lines, ex_helper) = gen_ex_start_helper(ast_func, ctx)?;\n-    match returns_a_value(ast_func) {\n+    match returns_a_value(ast_func, ctx) {\n         true => lines.push(format!(\"let _ = {}; // panics\", ex_helper.function_call)),\n         false => lines.push(format!(\"{}; // panics\", ex_helper.function_call)),\n     }\n@@ -424,11 +424,12 @@ fn return_type(ast_func: &ast::Fn) -> Option<ast::Type> {\n }\n \n /// Helper function to determine if the function returns some data\n-fn returns_a_value(ast_func: &ast::Fn) -> bool {\n-    match return_type(ast_func) {\n-        Some(ret_type) => ![\"()\", \"!\"].contains(&ret_type.to_string().as_str()),\n-        None => false,\n-    }\n+fn returns_a_value(ast_func: &ast::Fn, ctx: &AssistContext) -> bool {\n+    ctx.sema\n+        .to_def(ast_func)\n+        .map(|hir_func| hir_func.ret_type(ctx.db()))\n+        .map(|ret_ty| !ret_ty.is_unit() && !ret_ty.is_never())\n+        .unwrap_or(false)\n }\n \n #[cfg(test)]"}]}