{"sha": "c158b7b7d03039027774b2aabcdb066c371b5d36", "node_id": "C_kwDOAAsO6NoAKGMxNThiN2I3ZDAzMDM5MDI3Nzc0YjJhYWJjZGIwNjZjMzcxYjVkMzY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-09-22T18:50:51Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-09-22T18:50:51Z"}, "message": "Derive Eq/PartialEq instead of manually implementing it", "tree": {"sha": "efa985c6ab448cc63d812dca61998e4677851a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efa985c6ab448cc63d812dca61998e4677851a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c158b7b7d03039027774b2aabcdb066c371b5d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c158b7b7d03039027774b2aabcdb066c371b5d36", "html_url": "https://github.com/rust-lang/rust/commit/c158b7b7d03039027774b2aabcdb066c371b5d36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c158b7b7d03039027774b2aabcdb066c371b5d36/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d7cdcf2badf4d8d2d89dadb65a32a2eba01aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d7cdcf2badf4d8d2d89dadb65a32a2eba01aff", "html_url": "https://github.com/rust-lang/rust/commit/e2d7cdcf2badf4d8d2d89dadb65a32a2eba01aff"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "bdebf8baabe489c2ba834e11b7ca874c3eac4871", "filename": "library/core/src/ptr/alignment.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c158b7b7d03039027774b2aabcdb066c371b5d36/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c158b7b7d03039027774b2aabcdb066c371b5d36/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs?ref=c158b7b7d03039027774b2aabcdb066c371b5d36", "patch": "@@ -9,15 +9,34 @@ use crate::{cmp, fmt, hash, mem, num};\n /// Note that particularly large alignments, while representable in this type,\n /// are likely not to be supported by actual allocators and linkers.\n #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[repr(transparent)]\n pub struct Alignment(AlignmentEnum);\n \n // Alignment is `repr(usize)`, but via extra steps.\n const _: () = assert!(mem::size_of::<Alignment>() == mem::size_of::<usize>());\n const _: () = assert!(mem::align_of::<Alignment>() == mem::align_of::<usize>());\n \n+fn _alignment_can_be_structurally_matched(a: Alignment) -> bool {\n+    matches!(a, Alignment::MIN)\n+}\n+\n impl Alignment {\n+    /// The smallest possible alignment, 1.\n+    ///\n+    /// All addresses are always aligned at least this much.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_alignment_type)]\n+    /// use std::ptr::Alignment;\n+    ///\n+    /// assert_eq!(Alignment::MIN.as_usize(), 1);\n+    /// ```\n+    #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+    pub const MIN: Self = Self(AlignmentEnum::_Align1Shl0);\n+\n     /// Returns the alignment for a type.\n     ///\n     /// This provides the same numerical value as [`mem::align_of`],\n@@ -127,17 +146,6 @@ impl TryFrom<usize> for Alignment {\n     }\n }\n \n-#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n-impl cmp::Eq for Alignment {}\n-\n-#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n-impl cmp::PartialEq for Alignment {\n-    #[inline]\n-    fn eq(&self, other: &Self) -> bool {\n-        self.as_nonzero() == other.as_nonzero()\n-    }\n-}\n-\n #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n impl cmp::Ord for Alignment {\n     #[inline]\n@@ -169,7 +177,7 @@ type AlignmentEnum = AlignmentEnum32;\n #[cfg(target_pointer_width = \"64\")]\n type AlignmentEnum = AlignmentEnum64;\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[repr(u16)]\n enum AlignmentEnum16 {\n     _Align1Shl0 = 1 << 0,\n@@ -190,7 +198,7 @@ enum AlignmentEnum16 {\n     _Align1Shl15 = 1 << 15,\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[repr(u32)]\n enum AlignmentEnum32 {\n     _Align1Shl0 = 1 << 0,\n@@ -227,7 +235,7 @@ enum AlignmentEnum32 {\n     _Align1Shl31 = 1 << 31,\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[repr(u64)]\n enum AlignmentEnum64 {\n     _Align1Shl0 = 1 << 0,"}]}