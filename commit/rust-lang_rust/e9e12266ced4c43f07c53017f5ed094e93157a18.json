{"sha": "e9e12266ced4c43f07c53017f5ed094e93157a18", "node_id": "C_kwDOAAsO6NoAKGU5ZTEyMjY2Y2VkNGM0M2YwN2M1MzAxN2Y1ZWQwOTRlOTMxNTdhMTg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-12T18:35:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-14T20:26:01Z"}, "message": "Do not fetch HIR for reachable.", "tree": {"sha": "b6493d127ed10bcd1f70a7e0bd47836ea90dedf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6493d127ed10bcd1f70a7e0bd47836ea90dedf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e12266ced4c43f07c53017f5ed094e93157a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e12266ced4c43f07c53017f5ed094e93157a18", "html_url": "https://github.com/rust-lang/rust/commit/e9e12266ced4c43f07c53017f5ed094e93157a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e12266ced4c43f07c53017f5ed094e93157a18/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a51e73ac9a1616300e3db93e094baa4b86b895f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a51e73ac9a1616300e3db93e094baa4b86b895f", "html_url": "https://github.com/rust-lang/rust/commit/2a51e73ac9a1616300e3db93e094baa4b86b895f"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "051100c56f81311b6fc47f5a2600b12c2dde2461", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e9e12266ced4c43f07c53017f5ed094e93157a18/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e12266ced4c43f07c53017f5ed094e93157a18/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=e9e12266ced4c43f07c53017f5ed094e93157a18", "patch": "@@ -325,26 +325,23 @@ fn check_item<'tcx>(\n     }\n \n     // We need only trait impls here, not inherent impls, and only non-exported ones\n-    let item = tcx.hir().item(id);\n-    if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), ref items, .. }) =\n-        item.kind\n-    {\n-        if !effective_visibilities.is_reachable(item.owner_id.def_id) {\n-            worklist.extend(items.iter().map(|ii_ref| ii_ref.id.owner_id.def_id));\n+    if effective_visibilities.is_reachable(id.owner_id.def_id) {\n+        return;\n+    }\n \n-            let Res::Def(DefKind::Trait, trait_def_id) = trait_ref.path.res else {\n-                unreachable!();\n-            };\n+    let items = tcx.associated_item_def_ids(id.owner_id);\n+    worklist.extend(items.iter().map(|ii_ref| ii_ref.expect_local()));\n \n-            if !trait_def_id.is_local() {\n-                return;\n-            }\n+    let Some(trait_def_id) = tcx.trait_id_of_impl(id.owner_id.to_def_id()) else {\n+        unreachable!();\n+    };\n \n-            worklist.extend(\n-                tcx.provided_trait_methods(trait_def_id).map(|assoc| assoc.def_id.expect_local()),\n-            );\n-        }\n+    if !trait_def_id.is_local() {\n+        return;\n     }\n+\n+    worklist\n+        .extend(tcx.provided_trait_methods(trait_def_id).map(|assoc| assoc.def_id.expect_local()));\n }\n \n fn has_custom_linkage(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {"}]}