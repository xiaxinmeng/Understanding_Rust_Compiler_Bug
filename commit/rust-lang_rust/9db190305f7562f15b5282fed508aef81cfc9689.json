{"sha": "9db190305f7562f15b5282fed508aef81cfc9689", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYjE5MDMwNWY3NTYyZjE1YjUyODJmZWQ1MDhhZWY4MWNmYzk2ODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-16T19:58:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-16T19:58:31Z"}, "message": "auto merge of #7823 : pnkfelix/rust/issue7821-document-lint-attributes, r=graydon\n\nr? anyone\r\n\r\nFix #7821.", "tree": {"sha": "429545aa58b5d388a19b4592cd46b6a58f8d6b8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/429545aa58b5d388a19b4592cd46b6a58f8d6b8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9db190305f7562f15b5282fed508aef81cfc9689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9db190305f7562f15b5282fed508aef81cfc9689", "html_url": "https://github.com/rust-lang/rust/commit/9db190305f7562f15b5282fed508aef81cfc9689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9db190305f7562f15b5282fed508aef81cfc9689/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad212ecee47e8f9126c9fa4ea1679435136e854e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad212ecee47e8f9126c9fa4ea1679435136e854e", "html_url": "https://github.com/rust-lang/rust/commit/ad212ecee47e8f9126c9fa4ea1679435136e854e"}, {"sha": "8515abe0d92fb4f0a554e60da41e7ea12deb734e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8515abe0d92fb4f0a554e60da41e7ea12deb734e", "html_url": "https://github.com/rust-lang/rust/commit/8515abe0d92fb4f0a554e60da41e7ea12deb734e"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "9948ec79fc6cd8e2264115ddd8f4595293d905ee", "filename": "doc/rust.md", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/9db190305f7562f15b5282fed508aef81cfc9689/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9db190305f7562f15b5282fed508aef81cfc9689/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=9db190305f7562f15b5282fed508aef81cfc9689", "patch": "@@ -1417,14 +1417,83 @@ names are effectively reserved. Some significant attributes include:\n * The `lang` attribute, for custom definitions of traits and functions that are known to the Rust compiler (see [Language items](#language-items)).\n * The `link` attribute, for describing linkage metadata for a crate.\n * The `test` attribute, for marking functions as unit tests.\n-* The `allow`, `warn`, `forbid`, and `deny` attributes, for controlling lint checks. Lint checks supported\n-by the compiler can be found via `rustc -W help`.\n+* The `allow`, `warn`, `forbid`, and `deny` attributes, for\n+  controlling lint checks (see [Lint check attributes](#lint-check-attributes)).\n * The `deriving` attribute, for automatically generating\n   implementations of certain traits.\n * The `static_assert` attribute, for asserting that a static bool is true at compiletime\n \n Other attributes may be added or removed during development of the language.\n \n+### Lint check attributes\n+\n+A lint check names a potentially undesirable coding pattern, such as\n+unreachable code or omitted documentation, for the static entity to\n+which the attribute applies.\n+\n+For any lint check `C`:\n+\n+ * `warn(C)` warns about violations of `C` but continues compilation,\n+ * `deny(C)` signals an error after encountering a violation of `C`,\n+ * `allow(C)` overrides the check for `C` so that violations will go\n+    unreported,\n+ * `forbid(C)` is the same as `deny(C)`, but also forbids uses of\n+   `allow(C)` within the entity.\n+\n+The lint checks supported by the compiler can be found via `rustc -W help`,\n+along with their default settings.\n+\n+~~~{.xfail-test}\n+mod m1 {\n+    // Missing documentation is ignored here\n+    #[allow(missing_doc)]\n+    pub fn undocumented_one() -> int { 1 }\n+\n+    // Missing documentation signals a warning here\n+    #[warn(missing_doc)]\n+    pub fn undocumented_too() -> int { 2 }\n+\n+    // Missing documentation signals an error here\n+    #[deny(missing_doc)]\n+    pub fn undocumented_end() -> int { 3 }\n+}\n+~~~\n+\n+This example shows how one can use `allow` and `warn` to toggle\n+a particular check on and off.\n+\n+~~~\n+#[warn(missing_doc)]\n+mod m2{\n+    #[allow(missing_doc)]\n+    mod nested {\n+        // Missing documentation is ignored here\n+        pub fn undocumented_one() -> int { 1 }\n+\n+        // Missing documentation signals a warning here,\n+        // despite the allow above.\n+        #[warn(missing_doc)]\n+        pub fn undocumented_two() -> int { 2 }\n+    }\n+\n+    // Missing documentation signals a warning here\n+    pub fn undocumented_too() -> int { 3 }\n+}\n+~~~\n+\n+This example shows how one can use `forbid` to disallow uses\n+of `allow` for that lint check.\n+\n+~~~{.xfail-test}\n+#[forbid(missing_doc)]\n+mod m3 {\n+    // Attempting to toggle warning signals an error here\n+    #[allow(missing_doc)]\n+    /// Returns 2.\n+    pub fn undocumented_too() -> int { 2 }\n+}\n+~~~\n+\n ### Language items\n \n Some primitive Rust operations are defined in Rust code,"}]}