{"sha": "f54072bb815e2bbaec40eed18c7618904a184470", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NDA3MmJiODE1ZTJiYmFlYzQwZWVkMThjNzYxODkwNGExODQ0NzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T02:49:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T02:49:00Z"}, "message": "Auto merge of #76830 - Artoria2e5:tune, r=nagisa\n\nPass tune-cpu to LLVM\n\nI think this is how it should work...\n\nSee https://internals.rust-lang.org/t/expose-tune-cpu-from-llvm/13088 for the background. Or the documentation diff.", "tree": {"sha": "c8ef9069de929a2e7c2fd3a93363890bf5739cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8ef9069de929a2e7c2fd3a93363890bf5739cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f54072bb815e2bbaec40eed18c7618904a184470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f54072bb815e2bbaec40eed18c7618904a184470", "html_url": "https://github.com/rust-lang/rust/commit/f54072bb815e2bbaec40eed18c7618904a184470", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f54072bb815e2bbaec40eed18c7618904a184470/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb4514c099fde6e3102373602bea9e6dacd4f88", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb4514c099fde6e3102373602bea9e6dacd4f88", "html_url": "https://github.com/rust-lang/rust/commit/afb4514c099fde6e3102373602bea9e6dacd4f88"}, {"sha": "a35a93f09cc111a53d00efc567ad678583dd5ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a35a93f09cc111a53d00efc567ad678583dd5ac7", "html_url": "https://github.com/rust-lang/rust/commit/a35a93f09cc111a53d00efc567ad678583dd5ac7"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "8d131fa294b3027fc3551cbaead7eb4d14abf195", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -194,6 +194,18 @@ pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     );\n }\n \n+pub fn apply_tune_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n+    if let Some(tune) = llvm_util::tune_cpu(cx.tcx.sess) {\n+        let tune_cpu = SmallCStr::new(tune);\n+        llvm::AddFunctionAttrStringValue(\n+            llfn,\n+            llvm::AttributePlace::Function,\n+            const_cstr!(\"tune-cpu\"),\n+            tune_cpu.as_c_str(),\n+        );\n+    }\n+}\n+\n /// Sets the `NonLazyBind` LLVM attribute on a given function,\n /// assuming the codegen options allow skipping the PLT.\n pub fn non_lazy_bind(sess: &Session, llfn: &'ll Value) {\n@@ -303,6 +315,9 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     // Without this, ThinLTO won't inline Rust functions into Clang generated\n     // functions (because Clang annotates functions this way too).\n     apply_target_cpu_attr(cx, llfn);\n+    // tune-cpu is only conveyed through the attribute for our purpose.\n+    // The target doesn't care; the subtarget reads our attribute.\n+    apply_tune_cpu_attr(cx, llfn);\n \n     let features = llvm_target_features(cx.tcx.sess)\n         .map(|s| s.to_string())"}, {"sha": "d3c71ff501b4222340b8e352ac5ebfb5805f1b71", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -417,7 +417,8 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn apply_target_cpu_attr(&self, llfn: &'ll Value) {\n-        attributes::apply_target_cpu_attr(self, llfn)\n+        attributes::apply_target_cpu_attr(self, llfn);\n+        attributes::apply_tune_cpu_attr(self, llfn);\n     }\n \n     fn create_used_variable(&self) {"}, {"sha": "b5f83118d0c0b496af13e68beb5b9d2579899377", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -116,6 +116,9 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str {\n         llvm_util::target_cpu(sess)\n     }\n+    fn tune_cpu<'b>(&self, sess: &'b Session) -> Option<&'b str> {\n+        llvm_util::tune_cpu(sess)\n+    }\n }\n \n impl WriteBackendMethods for LlvmCodegenBackend {"}, {"sha": "a4605f463095213b7c01cc78245a6b35c0acc054", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -202,11 +202,7 @@ pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     }\n }\n \n-pub fn target_cpu(sess: &Session) -> &str {\n-    let name = match sess.opts.cg.target_cpu {\n-        Some(ref s) => &**s,\n-        None => &*sess.target.target.options.cpu,\n-    };\n+fn handle_native(name: &str) -> &str {\n     if name != \"native\" {\n         return name;\n     }\n@@ -217,3 +213,19 @@ pub fn target_cpu(sess: &Session) -> &str {\n         str::from_utf8(slice::from_raw_parts(ptr as *const u8, len)).unwrap()\n     }\n }\n+\n+pub fn target_cpu(sess: &Session) -> &str {\n+    let name = match sess.opts.cg.target_cpu {\n+        Some(ref s) => &**s,\n+        None => &*sess.target.target.options.cpu,\n+    };\n+\n+    handle_native(name)\n+}\n+\n+pub fn tune_cpu(sess: &Session) -> Option<&str> {\n+    match sess.opts.debugging_opts.tune_cpu {\n+        Some(ref s) => Some(handle_native(&**s)),\n+        None => None,\n+    }\n+}"}, {"sha": "1f26280b7ccaf39b6aba7c25fb586b9733dc7d2e", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -124,4 +124,5 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         opt_level: config::OptLevel,\n     ) -> Arc<dyn Fn() -> Result<Self::TargetMachine, String> + Send + Sync>;\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str;\n+    fn tune_cpu<'b>(&self, sess: &'b Session) -> Option<&'b str>;\n }"}, {"sha": "6553d0ecfdb5f973a91a9663a0e73244ee5c346d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -585,6 +585,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(symbol_mangling_version, SymbolManglingVersion::V0);\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));\n+    tracked!(tune_cpu, Some(String::from(\"abc\")));\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(treat_err_as_bug, Some(1));\n     tracked!(unleash_the_miri_inside_of_you, true);"}, {"sha": "627adcceb3f4a2e6277916308296d782910fca7e", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -1078,6 +1078,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"show extended diagnostic help (default: no)\"),\n     terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"set the current terminal width\"),\n+    tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"select processor to schedule for (`rustc --print target-cpus` for details)\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n     // We default to 1 here since we want to behave like"}, {"sha": "f6493e49c3c3edde9f4c170bb1509f21003f1088", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -497,8 +497,10 @@ point instructions in software. It takes one of the following values:\n This instructs `rustc` to generate code specifically for a particular processor.\n \n You can run `rustc --print target-cpus` to see the valid options to pass\n-here. Additionally, `native` can be passed to use the processor of the host\n-machine. Each target has a default base CPU.\n+here. Each target has a default base CPU. Special values include:\n+\n+* `native` can be passed to use the processor of the host machine. \n+* `generic` refers to an LLVM target with minimal features but modern tuning.\n \n ## target-feature\n \n@@ -530,6 +532,20 @@ This also supports the feature `+crt-static` and `-crt-static` to control\n Each target and [`target-cpu`](#target-cpu) has a default set of enabled\n features.\n \n+## tune-cpu\n+\n+This instructs `rustc` to schedule code specifically for a particular\n+processor. This does not affect the compatibility (instruction sets or ABI),\n+but should make your code slightly more efficient on the selected CPU.\n+\n+The valid options are the same as those for [`target-cpu`](#target-cpu).\n+The default is `None`, which LLVM translates as the `target-cpu`.\n+\n+This is an unstable option. Use `-Z tune-cpu=machine` to specify a value.\n+\n+Due to limitations in LLVM (12.0.0-git9218f92), this option is currently\n+effective only for x86 targets.\n+\n [option-emit]: ../command-line-arguments.md#option-emit\n [option-o-optimize]: ../command-line-arguments.md#option-o-optimize\n [profile-guided optimization]: ../profile-guided-optimization.md"}, {"sha": "9121799cdbff5161ed291958ccc757a0cd00b8c2", "filename": "src/test/codegen/tune-cpu-on-functions.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f54072bb815e2bbaec40eed18c7618904a184470/src%2Ftest%2Fcodegen%2Ftune-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54072bb815e2bbaec40eed18c7618904a184470/src%2Ftest%2Fcodegen%2Ftune-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftune-cpu-on-functions.rs?ref=f54072bb815e2bbaec40eed18c7618904a184470", "patch": "@@ -0,0 +1,21 @@\n+// This test makes sure that functions get annotated with the proper\n+// \"tune-cpu\" attribute in LLVM.\n+\n+// no-prefer-dynamic\n+// ignore-tidy-linelength\n+// compile-flags: -C no-prepopulate-passes -C panic=abort -C linker-plugin-lto -Cpasses=name-anon-globals -Z tune-cpu=generic\n+\n+#![crate_type = \"staticlib\"]\n+\n+// CHECK-LABEL: define {{.*}} @exported() {{.*}} #0\n+#[no_mangle]\n+pub extern fn exported() {\n+    not_exported();\n+}\n+\n+// CHECK-LABEL: ; tune_cpu_on_functions::not_exported\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NEXT: define {{.*}}() {{.*}} #0\n+fn not_exported() {}\n+\n+// CHECK: attributes #0 = {{.*}} \"tune-cpu\"=\"{{.*}}\""}]}