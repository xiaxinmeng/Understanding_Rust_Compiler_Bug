{"sha": "d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZTIzYWViMGUzMDU2YTRkYTVjOGFhYzg2YzEwYWUwMzUzYThjMmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T03:04:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:35Z"}, "message": "librustc: De-`@mut` `MoveData`", "tree": {"sha": "a54657186771aadf850e35dc489d9df66e1970da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a54657186771aadf850e35dc489d9df66e1970da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "html_url": "https://github.com/rust-lang/rust/commit/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b06a9593fe1d1ec8d1f54efcdc57689907df942", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b06a9593fe1d1ec8d1f54efcdc57689907df942", "html_url": "https://github.com/rust-lang/rust/commit/1b06a9593fe1d1ec8d1f54efcdc57689907df942"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "907a8e8fdd97584c441a1011ec81ba3611d80063", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "patch": "@@ -23,7 +23,7 @@ use syntax::codemap::Span;\n use util::ppaux::{UserString};\n \n pub fn gather_decl(bccx: &BorrowckCtxt,\n-                   move_data: &mut MoveData,\n+                   move_data: &MoveData,\n                    decl_id: ast::NodeId,\n                    _decl_span: Span,\n                    var_id: ast::NodeId) {\n@@ -32,23 +32,23 @@ pub fn gather_decl(bccx: &BorrowckCtxt,\n }\n \n pub fn gather_move_from_expr(bccx: &BorrowckCtxt,\n-                             move_data: &mut MoveData,\n+                             move_data: &MoveData,\n                              move_expr: @ast::Expr,\n                              cmt: mc::cmt) {\n     gather_move_from_expr_or_pat(bccx, move_data, move_expr.id,\n                                  MoveExpr(move_expr), cmt);\n }\n \n pub fn gather_move_from_pat(bccx: &BorrowckCtxt,\n-                            move_data: &mut MoveData,\n+                            move_data: &MoveData,\n                             move_pat: @ast::Pat,\n                             cmt: mc::cmt) {\n     gather_move_from_expr_or_pat(bccx, move_data, move_pat.id,\n                                  MovePat(move_pat), cmt);\n }\n \n fn gather_move_from_expr_or_pat(bccx: &BorrowckCtxt,\n-                                move_data: &mut MoveData,\n+                                move_data: &MoveData,\n                                 move_id: ast::NodeId,\n                                 move_kind: MoveKind,\n                                 cmt: mc::cmt) {\n@@ -67,7 +67,7 @@ fn gather_move_from_expr_or_pat(bccx: &BorrowckCtxt,\n }\n \n pub fn gather_captures(bccx: &BorrowckCtxt,\n-                       move_data: &mut MoveData,\n+                       move_data: &MoveData,\n                        closure_expr: @ast::Expr) {\n     let capture_map = bccx.capture_map.borrow();\n     let captured_vars = capture_map.get().get(&closure_expr.id);\n@@ -85,7 +85,7 @@ pub fn gather_captures(bccx: &BorrowckCtxt,\n }\n \n pub fn gather_assignment(bccx: &BorrowckCtxt,\n-                         move_data: &mut MoveData,\n+                         move_data: &MoveData,\n                          assignment_id: ast::NodeId,\n                          assignment_span: Span,\n                          assignee_loan_path: @LoanPath,"}, {"sha": "7cf07b38d30bcd4d86dbae25ea791a612ffa6e0d", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "patch": "@@ -67,7 +67,7 @@ mod gather_moves;\n struct GatherLoanCtxt<'a> {\n     bccx: &'a BorrowckCtxt,\n     id_range: id_range,\n-    move_data: @mut move_data::MoveData,\n+    move_data: @move_data::MoveData,\n     all_loans: @mut ~[Loan],\n     item_ub: ast::NodeId,\n     repeating_ids: ~[ast::NodeId]\n@@ -103,14 +103,14 @@ impl<'a> visit::Visitor<()> for GatherLoanCtxt<'a> {\n pub fn gather_loans(bccx: &BorrowckCtxt,\n                     decl: &ast::fn_decl,\n                     body: ast::P<ast::Block>)\n-                    -> (id_range, @mut ~[Loan], @mut move_data::MoveData) {\n+                    -> (id_range, @mut ~[Loan], @move_data::MoveData) {\n     let mut glcx = GatherLoanCtxt {\n         bccx: bccx,\n         id_range: id_range::max(),\n         all_loans: @mut ~[],\n         item_ub: body.id,\n         repeating_ids: ~[body.id],\n-        move_data: @mut MoveData::new()\n+        move_data: @MoveData::new()\n     };\n     glcx.gather_fn_arg_patterns(decl, body);\n "}, {"sha": "a23b74a2fade1e09081abd61f7c0aeccbdd20209", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=d1e23aeb0e3056a4da5c8aac86c10ae0353a8c2d", "patch": "@@ -53,11 +53,12 @@ pub struct MoveData {\n }\n \n pub struct FlowedMoveData {\n-    move_data: @mut MoveData,\n-    //         ^~~~~~~~~~~~~\n-    // It makes me sad to use @mut here, except that due to\n-    // the visitor design, this is what gather_loans\n-    // must produce.\n+    move_data: @MoveData,\n+    //         ^~~~~~~~~\n+    // It makes me sad to use @ here, except that due to\n+    // the old visitor design, this is what gather_loans\n+    // used to have to produce, and this code hasn't been\n+    // updated.\n \n     dfcx_moves: MoveDataFlow,\n \n@@ -199,14 +200,14 @@ impl MoveData {\n         paths.get()[*index].next_sibling\n     }\n \n-    fn set_path_first_move(&mut self,\n+    fn set_path_first_move(&self,\n                            index: MovePathIndex,\n                            first_move: MoveIndex) {\n         let mut paths = self.paths.borrow_mut();\n         paths.get()[*index].first_move = first_move\n     }\n \n-    fn set_path_first_child(&mut self,\n+    fn set_path_first_child(&self,\n                             index: MovePathIndex,\n                             first_child: MovePathIndex) {\n         let mut paths = self.paths.borrow_mut();\n@@ -225,7 +226,7 @@ impl MoveData {\n         self.path_parent(index) == InvalidMovePathIndex\n     }\n \n-    pub fn move_path(&mut self,\n+    pub fn move_path(&self,\n                      tcx: ty::ctxt,\n                      lp: @LoanPath) -> MovePathIndex {\n         /*!\n@@ -344,7 +345,7 @@ impl MoveData {\n \n     }\n \n-    pub fn add_move(&mut self,\n+    pub fn add_move(&self,\n                     tcx: ty::ctxt,\n                     lp: @LoanPath,\n                     id: ast::NodeId,\n@@ -379,7 +380,7 @@ impl MoveData {\n         }\n     }\n \n-    pub fn add_assignment(&mut self,\n+    pub fn add_assignment(&self,\n                           tcx: ty::ctxt,\n                           lp: @LoanPath,\n                           assign_id: ast::NodeId,\n@@ -556,13 +557,12 @@ impl MoveData {\n }\n \n impl FlowedMoveData {\n-    pub fn new(move_data: @mut MoveData,\n+    pub fn new(move_data: @MoveData,\n                tcx: ty::ctxt,\n                method_map: typeck::method_map,\n                id_range: ast_util::id_range,\n                body: &ast::Block)\n-               -> FlowedMoveData\n-    {\n+               -> FlowedMoveData {\n         let mut dfcx_moves = {\n             let moves = move_data.moves.borrow();\n             DataFlowContext::new(tcx,"}]}