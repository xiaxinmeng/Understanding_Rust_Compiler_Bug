{"sha": "ffbc40ff0607026f20618ba648d92426fea17962", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYmM0MGZmMDYwNzAyNmYyMDYxOGJhNjQ4ZDkyNDI2ZmVhMTc5NjI=", "commit": {"author": {"name": "Weihang Lo", "email": "me@weihanglo.tw", "date": "2021-07-10T13:24:13Z"}, "committer": {"name": "Weihang Lo", "email": "me@weihanglo.tw", "date": "2021-07-11T02:50:41Z"}, "message": "rustdoc: show count of item contents when hidden", "tree": {"sha": "3415e0574f73e98e964a1546b541d811b2f17634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3415e0574f73e98e964a1546b541d811b2f17634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffbc40ff0607026f20618ba648d92426fea17962", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEfYTqB0fBJAwqFtKm19vxiYJegucFAmDqXIMACgkQ19vxiYJe\ngue0ag//UcRBT789EoC++SaldXYgO5CHoEVtCvw3b6AdZkCbsTFLjJU0VKeIommI\nwQwHAE16nCtU9qN7ZQBjfRhzPNSdDrLdw2XpWSGB48hzdN79Cw5t6kofRIdYBGEP\nHaYYFSwnglaeF4/tw0tCs1A44eX1iIT397RADgDCAUNtV55Olk3b7eup1/RDrrW1\nEAKQMeZr4upULSr0CG2V/17NLbKLWeFWxet3Bdvs8iLv8tDYryjwtBkF7qO+9EKx\nhEXvotbKxlO+NSs65te6u9Av83XAj6pGO7e5N38iGWqg2HfuvdhJP6Fv38SZkpwI\nC/aDwH9VF3iBdlNBiVla7BHhsJOZJifBYPNYB2FuP7UXHX3/uEgQ8SU+N6v/80R3\nipWgTxUFrdQac0lBucbHEQW88yDe14YBWqMgq0VE8E+1BCpmv5g7oTbt4iivP5eI\ntkRJHClUq6FAF1NDWbr1fi9mYWjUxLx9vTMSLqLGwrU12qly8FIb1M3Gldl+Xp0r\np5q6ykZx7FU9acnk1nV2d5Oz+TJY4UIoif8nfkzUoANlvVEUWJu7h+LoSc4aqP2H\nLh6ki8D1+KcXm8TqNYiBegeUBSCYouT4s+cnHX4U082A8kDdKUSYxQEgVZce7PAZ\nIlTw4Gu7RrwJ2PrQMby9HLoZKDNO7MORL1i30EDhXFI+3Kw8xyk=\n=Ey5W\n-----END PGP SIGNATURE-----", "payload": "tree 3415e0574f73e98e964a1546b541d811b2f17634\nparent a84d1b21aea9863f0fc5f436b4982d145dade646\nauthor Weihang Lo <me@weihanglo.tw> 1625923453 +0800\ncommitter Weihang Lo <me@weihanglo.tw> 1625971841 +0800\n\nrustdoc: show count of item contents when hidden\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffbc40ff0607026f20618ba648d92426fea17962", "html_url": "https://github.com/rust-lang/rust/commit/ffbc40ff0607026f20618ba648d92426fea17962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffbc40ff0607026f20618ba648d92426fea17962/comments", "author": {"login": "weihanglo", "id": 14314532, "node_id": "MDQ6VXNlcjE0MzE0NTMy", "avatar_url": "https://avatars.githubusercontent.com/u/14314532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weihanglo", "html_url": "https://github.com/weihanglo", "followers_url": "https://api.github.com/users/weihanglo/followers", "following_url": "https://api.github.com/users/weihanglo/following{/other_user}", "gists_url": "https://api.github.com/users/weihanglo/gists{/gist_id}", "starred_url": "https://api.github.com/users/weihanglo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weihanglo/subscriptions", "organizations_url": "https://api.github.com/users/weihanglo/orgs", "repos_url": "https://api.github.com/users/weihanglo/repos", "events_url": "https://api.github.com/users/weihanglo/events{/privacy}", "received_events_url": "https://api.github.com/users/weihanglo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weihanglo", "id": 14314532, "node_id": "MDQ6VXNlcjE0MzE0NTMy", "avatar_url": "https://avatars.githubusercontent.com/u/14314532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weihanglo", "html_url": "https://github.com/weihanglo", "followers_url": "https://api.github.com/users/weihanglo/followers", "following_url": "https://api.github.com/users/weihanglo/following{/other_user}", "gists_url": "https://api.github.com/users/weihanglo/gists{/gist_id}", "starred_url": "https://api.github.com/users/weihanglo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weihanglo/subscriptions", "organizations_url": "https://api.github.com/users/weihanglo/orgs", "repos_url": "https://api.github.com/users/weihanglo/repos", "events_url": "https://api.github.com/users/weihanglo/events{/privacy}", "received_events_url": "https://api.github.com/users/weihanglo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84d1b21aea9863f0fc5f436b4982d145dade646", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84d1b21aea9863f0fc5f436b4982d145dade646", "html_url": "https://github.com/rust-lang/rust/commit/a84d1b21aea9863f0fc5f436b4982d145dade646"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "6a74c4ec306ccbcbda82a0981362802137e02a60", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ffbc40ff0607026f20618ba648d92426fea17962/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbc40ff0607026f20618ba648d92426fea17962/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=ffbc40ff0607026f20618ba648d92426fea17962", "patch": "@@ -1,6 +1,7 @@\n use clean::AttributesExt;\n \n use std::cmp::Ordering;\n+use std::fmt;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n@@ -155,7 +156,7 @@ fn should_hide_fields(n_fields: usize) -> bool {\n     n_fields > 12\n }\n \n-fn toggle_open(w: &mut Buffer, text: &str) {\n+fn toggle_open(w: &mut Buffer, text: impl fmt::Display) {\n     write!(\n         w,\n         \"<details class=\\\"rustdoc-toggle type-contents-toggle\\\">\\\n@@ -481,6 +482,9 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     let consts = t.items.iter().filter(|m| m.is_associated_const()).collect::<Vec<_>>();\n     let required = t.items.iter().filter(|m| m.is_ty_method()).collect::<Vec<_>>();\n     let provided = t.items.iter().filter(|m| m.is_method()).collect::<Vec<_>>();\n+    let count_types = types.len();\n+    let count_consts = consts.len();\n+    let count_methods = required.len() + provided.len();\n \n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n@@ -511,9 +515,12 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             let mut toggle = false;\n \n             // If there are too many associated types, hide _everything_\n-            if should_hide_fields(types.len()) {\n+            if should_hide_fields(count_types) {\n                 toggle = true;\n-                toggle_open(w, \"associated items\");\n+                toggle_open(\n+                    w,\n+                    format_args!(\"{} associated items\", count_types + count_consts + count_methods),\n+                );\n             }\n             for t in &types {\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n@@ -523,9 +530,18 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             // We also do this if the types + consts is large because otherwise we could\n             // render a bunch of types and _then_ a bunch of consts just because both were\n             // _just_ under the limit\n-            if !toggle && should_hide_fields(types.len() + consts.len()) {\n+            if !toggle && should_hide_fields(count_types + count_consts) {\n                 toggle = true;\n-                toggle_open(w, \"associated constants and methods\");\n+                toggle_open(\n+                    w,\n+                    format_args!(\n+                        \"{} associated constant{} and {} method{}\",\n+                        count_consts,\n+                        pluralize(count_consts),\n+                        count_methods,\n+                        pluralize(count_methods),\n+                    ),\n+                );\n             }\n             if !types.is_empty() && !consts.is_empty() {\n                 w.write_str(\"\\n\");\n@@ -534,9 +550,9 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n                 w.write_str(\";\\n\");\n             }\n-            if !toggle && should_hide_fields(required.len() + provided.len()) {\n+            if !toggle && should_hide_fields(count_methods) {\n                 toggle = true;\n-                toggle_open(w, \"methods\");\n+                toggle_open(w, format_args!(\"{} methods\", count_methods));\n             }\n             if !consts.is_empty() && !required.is_empty() {\n                 w.write_str(\"\\n\");\n@@ -924,9 +940,10 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\" {}\");\n         } else {\n             w.write_str(\" {\\n\");\n-            let toggle = should_hide_fields(e.variants.len());\n+            let count_variants = e.variants.len();\n+            let toggle = should_hide_fields(count_variants);\n             if toggle {\n-                toggle_open(w, \"variants\");\n+                toggle_open(w, format_args!(\"{} variants\", count_variants));\n             }\n             for v in &e.variants {\n                 w.write_str(\"    \");\n@@ -1003,7 +1020,8 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n \n             use crate::clean::Variant;\n             if let clean::VariantItem(Variant::Struct(ref s)) = *variant.kind {\n-                toggle_open(w, \"fields\");\n+                let count_fields = s.fields.len();\n+                toggle_open(w, format_args!(\"{} field{}\", count_fields, pluralize(count_fields)));\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,\n@@ -1376,7 +1394,7 @@ fn render_union(\n         fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n     let toggle = should_hide_fields(count_fields);\n     if toggle {\n-        toggle_open(w, \"fields\");\n+        toggle_open(w, format_args!(\"{} fields\", count_fields));\n     }\n \n     for field in fields {\n@@ -1432,7 +1450,7 @@ fn render_struct(\n             let has_visible_fields = count_fields > 0;\n             let toggle = should_hide_fields(count_fields);\n             if toggle {\n-                toggle_open(w, \"fields\");\n+                toggle_open(w, format_args!(\"{} fields\", count_fields));\n             }\n             for field in fields {\n                 if let clean::StructFieldItem(ref ty) = *field.kind {\n@@ -1609,3 +1627,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n \n     writeln!(w, \"</div>\");\n }\n+\n+fn pluralize(count: usize) -> &'static str {\n+    if count > 1 { \"s\" } else { \"\" }\n+}"}]}