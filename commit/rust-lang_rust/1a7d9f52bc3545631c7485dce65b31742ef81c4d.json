{"sha": "1a7d9f52bc3545631c7485dce65b31742ef81c4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhN2Q5ZjUyYmMzNTQ1NjMxYzc0ODVkY2U2NWIzMTc0MmVmODFjNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-13T10:31:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-13T10:31:57Z"}, "message": "Auto merge of #75322 - JulianKnodt:revisions, r=lcnr\n\nAdd a bunch of const-generic revisions for `min_const_generics`\n\nThis adds a bunch of revisions to `const-generic` tests which is part of #75279, but doesn't cover everything.\n\nr? @lcnr", "tree": {"sha": "e1706dabd89a3746942f8687d7122263c83f5704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1706dabd89a3746942f8687d7122263c83f5704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7d9f52bc3545631c7485dce65b31742ef81c4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7d9f52bc3545631c7485dce65b31742ef81c4d", "html_url": "https://github.com/rust-lang/rust/commit/1a7d9f52bc3545631c7485dce65b31742ef81c4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7d9f52bc3545631c7485dce65b31742ef81c4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fbed1739c384faabf00cd8a62abedbf506e949b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fbed1739c384faabf00cd8a62abedbf506e949b", "html_url": "https://github.com/rust-lang/rust/commit/3fbed1739c384faabf00cd8a62abedbf506e949b"}, {"sha": "5c0b416dde31268958b0544f1938af89574bcf55", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0b416dde31268958b0544f1938af89574bcf55", "html_url": "https://github.com/rust-lang/rust/commit/5c0b416dde31268958b0544f1938af89574bcf55"}], "stats": {"total": 2178, "additions": 1325, "deletions": 853}, "files": [{"sha": "facc0bcf5130cbec26a14771efe01117b0b36315", "filename": "src/test/ui/const-generics/apit-with-const-param.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // check-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Trait {}\n "}, {"sha": "4389e4738eadc8b734accb3719a8d92443b81c0b", "filename": "src/test/ui/const-generics/apit-with-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/apit-with-const-param.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "cf4487b5829c1f4af7bf46635b11d4670ed20d07", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.full.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/array-size-in-generic-struct-param.rs:9:38\n+   |\n+LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n+   |                                      ^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/array-size-in-generic-struct-param.rs:20:10\n+   |\n+LL |     arr: [u8; CFG.arr_size],\n+   |          ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "61d23475c6f79b72cb44111651249c7f5c039745", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/array-size-in-generic-struct-param.rs:9:48\n+   |\n+LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n+   |                                                ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/array-size-in-generic-struct-param.rs:20:15\n+   |\n+LL |     arr: [u8; CFG.arr_size],\n+   |               ^^^ non-trivial anonymous constants must not depend on the parameter `CFG`\n+   |\n+   = help: it is currently only allowed to use either `CFG` or `{ CFG }` as generic constants\n+\n+error: using `Config` as const generic parameters is forbidden\n+  --> $DIR/array-size-in-generic-struct-param.rs:18:21\n+   |\n+LL | struct B<const CFG: Config> {\n+   |                     ^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "aa1a3b9cf28889dd13c7971671978c196831fe31", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,17 +1,25 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Tests that array sizes that depend on const-params are checked using `ConstEvaluatable`.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n-//~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n \n #[derive(PartialEq, Eq)]\n struct Config {\n     arr_size: usize,\n }\n \n struct B<const CFG: Config> {\n-    arr: [u8; CFG.arr_size], //~ ERROR constant expression depends on a generic parameter\n+    //[min]~^ ERROR using `Config` as const generic parameters is forbidden\n+    arr: [u8; CFG.arr_size],\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "ad67a87265bd3f0e66959bf691864ee8625610e1", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,27 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/array-size-in-generic-struct-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:5:38\n-   |\n-LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n-   |                                      ^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:14:10\n-   |\n-LL |     arr: [u8; CFG.arr_size],\n-   |          ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "d13ae12c03bc2fbd599499c241e9aad7628a87bf", "filename": "src/test/ui/const-generics/broken-mir-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait Foo {\n     fn foo(&self);"}, {"sha": "a5532bde1f5e9cb02008e5071e184db32e2e2568", "filename": "src/test/ui/const-generics/broken-mir-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/broken-mir-1.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "2f9afe0b46433c821dadd52b0d7d59deb90209ba", "filename": "src/test/ui/const-generics/broken-mir-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::fmt::Debug;\n "}, {"sha": "c36ef8450976c9aa55f888b5864a98ac438b4e12", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/broken-mir-2.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "053139787edf975a82216b0a7b25e098808436d1", "filename": "src/test/ui/const-generics/cannot-infer-const-args.full.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/cannot-infer-const-args.rs:12:5\n+   |\n+LL |     foo();\n+   |     ^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "053139787edf975a82216b0a7b25e098808436d1", "filename": "src/test/ui/const-generics/cannot-infer-const-args.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/cannot-infer-const-args.rs:12:5\n+   |\n+LL |     foo();\n+   |     ^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "2d74b4788bf4b61c4eab058198a1f4930bfcc891", "filename": "src/test/ui/const-generics/cannot-infer-const-args.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const X: usize>() -> usize {\n     0"}, {"sha": "b29d27e524751dd06023dfec1f09b9de2c7ecb7d", "filename": "src/test/ui/const-generics/cannot-infer-const-args.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,20 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/cannot-infer-const-args.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-const-args.rs:9:5\n-   |\n-LL |     foo();\n-   |     ^^^\n-   |\n-   = note: unable to infer the value of a const parameter\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "a3c295f73c7eadc2ec6c20fe5ea254778935446f", "filename": "src/test/ui/const-generics/coerce_unsized_array.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,6 +1,9 @@\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const N: usize>(v: &[u8; N]) -> &[u8] {\n     v"}, {"sha": "7771bf336016a466c36aad7dad9ea18c6adb4212", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,8 +1,10 @@\n // Test that a concrete const type i.e. A<2>, can be used as an argument type in a function\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize>; // ok\n "}, {"sha": "c8f3a8beaf83f825a58a35bd65b371d7bd02adf5", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/concrete-const-as-fn-arg.rs:4:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "edb403ce8fd667cb6367cc0195a8ec8ac875e7b2", "filename": "src/test/ui/const-generics/concrete-const-impl-method.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,9 +1,11 @@\n // Test that a method/associated non-method within an impl block of a concrete const type i.e. A<2>,\n // is callable.\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct A<const N: u32>;\n "}, {"sha": "5edb4f4f6cdad2f409dc86403a4a04727830feed", "filename": "src/test/ui/const-generics/concrete-const-impl-method.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/concrete-const-impl-method.rs:5:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "77b68052fc0bb226ec323407e109a7fb164628e4", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,10 @@\n+// Checks that `impl Trait<{anon_const}> for Type` evaluates successfully.\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait IsZeroTrait<const IS_ZERO: bool>{}\n "}, {"sha": "9ac33454128b52b8176a1a9515272dfe408631ab", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/condition-in-trait-const-arg.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "5c438efd82a0c1a46e62f1ad7eb4a5c7ce70f4c5", "filename": "src/test/ui/const-generics/const-arg-in-fn.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn const_u32_identity<const X: u32>() -> u32 {\n     X"}, {"sha": "bb66849c7fe6c6b53e14f0b710163246fd8aeb3d", "filename": "src/test/ui/const-generics/const-arg-in-fn.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-arg-in-fn.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "dc34621b90500f16365402a274cc6cf04a09e924", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full\n+// FIXME(#75323) Omitted min revision for now due to ICE.\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n #![allow(dead_code)]\n \n fn test<const N: usize>() {}"}, {"sha": "53a7550090d44e7b8fcc147ec31c226203e1374b", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-argument-non-static-lifetime.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "496af9c6e02e06f997d76c3a005f4d621a81b4d5", "filename": "src/test/ui/const-generics/const-expression-parameter.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `,` or `>`, found `+`\n+  --> $DIR/const-expression-parameter.rs:16:22\n+   |\n+LL |     i32_identity::<1 + 2>();\n+   |                      ^ expected one of `,` or `>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "496af9c6e02e06f997d76c3a005f4d621a81b4d5", "filename": "src/test/ui/const-generics/const-expression-parameter.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `,` or `>`, found `+`\n+  --> $DIR/const-expression-parameter.rs:16:22\n+   |\n+LL |     i32_identity::<1 + 2>();\n+   |                      ^ expected one of `,` or `>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7a1eaf9f939084263d240594c7d72f8ab9e44c92", "filename": "src/test/ui/const-generics/const-expression-parameter.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn i32_identity<const X: i32>() -> i32 {\n     5"}, {"sha": "e421c22be01a87026d2abd1b0bc5ac64acb18ca9", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,17 +0,0 @@\n-error: expected one of `,` or `>`, found `+`\n-  --> $DIR/const-expression-parameter.rs:13:22\n-   |\n-LL |     i32_identity::<1 + 2>();\n-   |                      ^ expected one of `,` or `>`\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-expression-parameter.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "add1290b1d9758a6fcb0235d686c4d1d04ab008e", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,6 +1,10 @@\n+// Checks that `const fn` with const params can be used.\n // run-pass\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n const fn const_u32_identity<const X: u32>() -> u32 {\n     X"}, {"sha": "109b50028480b4bc43ee14df2fe80357a0b532bc", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-fn-with-const-param.rs:2:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "34edd0b4a8e870f86a8a3c55f89df476b38214d0", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<T, const N: usize>([T; N]);\n "}, {"sha": "47448bbd19d6d268ef1d04da7b417f057805535f", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-generic-array-wrapper.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "a954c0263521695593882ff40c83ae28a8c6d611", "filename": "src/test/ui/const-generics/const-generic-type_name.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(Debug)]\n struct S<const N: usize>;"}, {"sha": "f161739c9c8a6f0dddab681dbd995bee151747aa", "filename": "src/test/ui/const-generics/const-generic-type_name.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-generic-type_name.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "3982f7a7f125cc32feff0ba09995c20c3f00548f", "filename": "src/test/ui/const-generics/const-param-after-const-literal-arg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // check-pass\n+// revisions: full min\n \n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const A: usize, const B: usize>;\n "}, {"sha": "aa29d61d917b67bc5cc6cb28a816d2d43df4859d", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.full.stderr", "status": "renamed", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,42 +1,33 @@\n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:9:19\n+  --> $DIR/const-param-elided-lifetime.rs:11:19\n    |\n LL | struct A<const N: &u8>;\n    |                   ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:13:15\n+  --> $DIR/const-param-elided-lifetime.rs:16:15\n    |\n LL | impl<const N: &u8> A<N> {\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:14:21\n+  --> $DIR/const-param-elided-lifetime.rs:19:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:18:15\n+  --> $DIR/const-param-elided-lifetime.rs:24:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:21:17\n+  --> $DIR/const-param-elided-lifetime.rs:28:17\n    |\n LL | fn bar<const N: &u8>() {}\n    |                 ^ explicit lifetime name needed here\n \n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-elided-lifetime.rs:6:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to 5 previous errors; 1 warning emitted\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0637`.", "previous_filename": "src/test/ui/const-generics/const-param-elided-lifetime.stderr"}, {"sha": "bdd1da96c756536ed9a8670835db29b1a43103fb", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,78 @@\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:11:19\n+   |\n+LL | struct A<const N: &u8>;\n+   |                   ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:16:15\n+   |\n+LL | impl<const N: &u8> A<N> {\n+   |               ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:19:21\n+   |\n+LL |     fn foo<const M: &u8>(&self) {}\n+   |                     ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:24:15\n+   |\n+LL | impl<const N: &u8> B for A<N> {}\n+   |               ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:28:17\n+   |\n+LL | fn bar<const N: &u8>() {}\n+   |                 ^ explicit lifetime name needed here\n+\n+error: using `&'static u8` as const generic parameters is forbidden\n+  --> $DIR/const-param-elided-lifetime.rs:11:19\n+   |\n+LL | struct A<const N: &u8>;\n+   |                   ^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static u8` as const generic parameters is forbidden\n+  --> $DIR/const-param-elided-lifetime.rs:16:15\n+   |\n+LL | impl<const N: &u8> A<N> {\n+   |               ^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static u8` as const generic parameters is forbidden\n+  --> $DIR/const-param-elided-lifetime.rs:24:15\n+   |\n+LL | impl<const N: &u8> B for A<N> {}\n+   |               ^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static u8` as const generic parameters is forbidden\n+  --> $DIR/const-param-elided-lifetime.rs:28:17\n+   |\n+LL | fn bar<const N: &u8>() {}\n+   |                 ^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static u8` as const generic parameters is forbidden\n+  --> $DIR/const-param-elided-lifetime.rs:19:21\n+   |\n+LL |     fn foo<const M: &u8>(&self) {}\n+   |                     ^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "814b71d4b741f8e5fcf8359223c70773d51d8956", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -2,23 +2,31 @@\n // behaviour of trait bounds where `fn foo<T: Ord<&u8>>() {}` is illegal. Though we could change\n // elided lifetimes within the type of a const generic parameters to be 'static, like elided\n // lifetimes within const/static items.\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: &u8>;\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n+//[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n trait B {}\n \n-impl<const N: &u8> A<N> { //~ ERROR `&` without an explicit lifetime name cannot be used here\n+impl<const N: &u8> A<N> {\n+//~^ ERROR `&` without an explicit lifetime name cannot be used here\n+//[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n     fn foo<const M: &u8>(&self) {}\n     //~^ ERROR `&` without an explicit lifetime name cannot be used here\n+    //[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n }\n \n impl<const N: &u8> B for A<N> {}\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n+//[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n \n fn bar<const N: &u8>() {}\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n+//[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n \n fn main() {}"}, {"sha": "5a126f5c3c696718de3d358021719f6d14881bd9", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.full.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,13 @@\n+error[E0401]: can't use generic parameters from outer function\n+  --> $DIR/const-param-from-outer-fn.rs:9:9\n+   |\n+LL | fn foo<const X: u32>() {\n+   |              - const parameter from outer function\n+LL |     fn bar() -> u32 {\n+   |        --- try adding a local generic parameter in this method instead\n+LL |         X\n+   |         ^ use of generic parameter from outer function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0401`."}, {"sha": "5a126f5c3c696718de3d358021719f6d14881bd9", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.min.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,13 @@\n+error[E0401]: can't use generic parameters from outer function\n+  --> $DIR/const-param-from-outer-fn.rs:9:9\n+   |\n+LL | fn foo<const X: u32>() {\n+   |              - const parameter from outer function\n+LL |     fn bar() -> u32 {\n+   |        --- try adding a local generic parameter in this method instead\n+LL |         X\n+   |         ^ use of generic parameter from outer function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0401`."}, {"sha": "e1376c6e108b8fc776091d3f6c11e560f08c41d7", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const X: u32>() {\n     fn bar() -> u32 {"}, {"sha": "30bd1d7291456e74c4a8bdbce767440edc278051", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,22 +0,0 @@\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/const-param-from-outer-fn.rs:6:9\n-   |\n-LL | fn foo<const X: u32>() {\n-   |              - const parameter from outer function\n-LL |     fn bar() -> u32 {\n-   |        --- try adding a local generic parameter in this method instead\n-LL |         X\n-   |         ^ use of generic parameter from outer function\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-from-outer-fn.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0401`."}, {"sha": "9d31162c1c6f4ec6672fc09fc7280c55a451ad06", "filename": "src/test/ui/const-generics/const-param-in-trait.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,8 +1,12 @@\n+// Check that const parameters are permitted in traits.\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n-trait Trait<const T: ()> {}\n+\n+trait Trait<const T: u8> {}\n \n fn main() {}"}, {"sha": "a2e367b25ade05c1c90b53cba9253305d371e86e", "filename": "src/test/ui/const-generics/const-param-in-trait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-in-trait.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f7ad579dbca0bc83cc09fd28fdb0cf9fbfb7670e", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.full.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,15 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:12:52\n+   |\n+LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+   |                                                    ^ the type must not depend on the parameter `N`\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:16:40\n+   |\n+LL | pub struct SelfDependent<const N: [u8; N]>;\n+   |                                        ^ the type must not depend on the parameter `N`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "103f4c36faef32d6b8e0d1558a6b8b699ad5a043", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,33 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:12:52\n+   |\n+LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+   |                                                    ^ the type must not depend on the parameter `N`\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:16:40\n+   |\n+LL | pub struct SelfDependent<const N: [u8; N]>;\n+   |                                        ^ the type must not depend on the parameter `N`\n+\n+error: using `[u8; _]` as const generic parameters is forbidden\n+  --> $DIR/const-param-type-depends-on-const-param.rs:12:47\n+   |\n+LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+   |                                               ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `[u8; _]` as const generic parameters is forbidden\n+  --> $DIR/const-param-type-depends-on-const-param.rs:16:35\n+   |\n+LL | pub struct SelfDependent<const N: [u8; N]>;\n+   |                                   ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "d21a7cec117ee43cd4f7175a9a3f5678db3b340d", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // Currently, const parameters cannot depend on other generic parameters,\n // as our current implementation can't really support this.\n@@ -8,8 +11,10 @@\n \n pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n+//[min]~^^ ERROR using `[u8; _]` as const generic parameters is forbidden\n \n pub struct SelfDependent<const N: [u8; N]>;\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n+//[min]~^^ ERROR using `[u8; _]` as const generic parameters is forbidden\n \n fn main() {}"}, {"sha": "f6606aea726adc776b7706c977e3ab292bf6fbcc", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,24 +0,0 @@\n-error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:9:52\n-   |\n-LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n-   |                                                    ^ the type must not depend on the parameter `N`\n-\n-error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:12:40\n-   |\n-LL | pub struct SelfDependent<const N: [u8; N]>;\n-   |                                        ^ the type must not depend on the parameter `N`\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-type-depends-on-const-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0770`."}, {"sha": "ba99c87722cd6945449f4558bfa8eba0d19bdbbc", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.full.stderr", "status": "renamed", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,27 +1,18 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+  --> $DIR/const-param-type-depends-on-type-param.rs:12:34\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                                  ^ the type must not depend on the parameter `T`\n \n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0392]: parameter `T` is never used\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:22\n+  --> $DIR/const-param-type-depends-on-type-param.rs:12:22\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0392, E0770.\n For more information about an error, try `rustc --explain E0392`.", "previous_filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr"}, {"sha": "ba99c87722cd6945449f4558bfa8eba0d19bdbbc", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,18 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-type-param.rs:12:34\n+   |\n+LL | pub struct Dependent<T, const X: T>([(); X]);\n+   |                                  ^ the type must not depend on the parameter `T`\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/const-param-type-depends-on-type-param.rs:12:22\n+   |\n+LL | pub struct Dependent<T, const X: T>([(); X]);\n+   |                      ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0392, E0770.\n+For more information about an error, try `rustc --explain E0392`."}, {"sha": "93ae111751236431243c4f7353fed704368d6676", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // Currently, const parameters cannot depend on other generic parameters,\n // as our current implementation can't really support this."}, {"sha": "0f4f007f9d249911979f35f1723ab38de60b2df5", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.full.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,14 @@\n+error: const parameter `x` should have an upper case name\n+  --> $DIR/const-parameter-uppercase-lint.rs:9:15\n+   |\n+LL | fn noop<const x: u32>() {\n+   |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-parameter-uppercase-lint.rs:7:9\n+   |\n+LL | #![deny(non_upper_case_globals)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0f4f007f9d249911979f35f1723ab38de60b2df5", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.min.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,14 @@\n+error: const parameter `x` should have an upper case name\n+  --> $DIR/const-parameter-uppercase-lint.rs:9:15\n+   |\n+LL | fn noop<const x: u32>() {\n+   |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-parameter-uppercase-lint.rs:7:9\n+   |\n+LL | #![deny(non_upper_case_globals)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b9bd6666af39d06bde3500d52675776e553bbf16", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #![deny(non_upper_case_globals)]\n "}, {"sha": "b7febed7bdd22e477fd62c12057ad619c5be2a55", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-parameter-uppercase-lint.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: const parameter `x` should have an upper case name\n-  --> $DIR/const-parameter-uppercase-lint.rs:6:15\n-   |\n-LL | fn noop<const x: u32>() {\n-   |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/const-parameter-uppercase-lint.rs:4:9\n-   |\n-LL | #![deny(non_upper_case_globals)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "cd34cfc0478c7b255d95b221eff644558fbeb6c0", "filename": "src/test/ui/const-generics/const-types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,10 @@\n+// Check that arrays can be used with generic const and type.\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "4628c9003188450a82497ffa4b4b0828047be84d", "filename": "src/test/ui/const-generics/const-types.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-types.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "13fd87f1e3e574a565606e9ff5be2022d96c69fd", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,10 @@\n+// Check that deriving debug on struct with const is permitted.\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(Debug)]\n struct X<const N: usize> {"}, {"sha": "8f7ab822554a2abefc6a545b225378cb127861e2", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/derive-debug-array-wrapper.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "4463ed7fcdd270cb4aa6c953de8a9427cf34cfe4", "filename": "src/test/ui/const-generics/different_byref.full.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/different_byref.rs:13:9\n+   |\n+LL |     x = Const::<{ [4] }> {};\n+   |         ^^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n+   |\n+   = note: expected type `[3_usize]`\n+              found type `[4_usize]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "770491179abb53f1663dfd3b3db849e12c55606b", "filename": "src/test/ui/const-generics/different_byref.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,11 @@\n+error: using `[usize; 1]` as const generic parameters is forbidden\n+  --> $DIR/different_byref.rs:8:23\n+   |\n+LL | struct Const<const V: [usize; 1]> {}\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ec85ed775d4f5debdc24da912e4ac961f36c10c9", "filename": "src/test/ui/const-generics/different_byref.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,11 +1,15 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Check that different const types are different.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const V: [usize; 1]> {}\n+//[min]~^ using `[usize; 1]` as const generic parameters is forbidden\n \n fn main() {\n     let mut x = Const::<{ [3] }> {};\n     x = Const::<{ [4] }> {};\n-    //~^ ERROR mismatched types\n-\n+    //[full]~^ ERROR mismatched types\n }"}, {"sha": "a3f331ee81155a4ae540b84171e3dad5bf9beff4", "filename": "src/test/ui/const-generics/different_byref.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/different_byref.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0308]: mismatched types\n-  --> $DIR/different_byref.rs:8:9\n-   |\n-LL |     x = Const::<{ [4] }> {};\n-   |         ^^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n-   |\n-   = note: expected type `[3_usize]`\n-              found type `[4_usize]`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "b6729c852abc320c4a386865f8e19ed660d6999f", "filename": "src/test/ui/const-generics/different_byref_simple.full.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/different_byref_simple.rs:12:9\n+   |\n+LL |     u = ConstUsize::<4> {};\n+   |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n+   |\n+   = note: expected struct `ConstUsize<3_usize>`\n+              found struct `ConstUsize<4_usize>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b6729c852abc320c4a386865f8e19ed660d6999f", "filename": "src/test/ui/const-generics/different_byref_simple.min.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/different_byref_simple.rs:12:9\n+   |\n+LL |     u = ConstUsize::<4> {};\n+   |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n+   |\n+   = note: expected struct `ConstUsize<3_usize>`\n+              found struct `ConstUsize<4_usize>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "93289f933317ccca2cefe56cebdd621843db8205", "filename": "src/test/ui/const-generics/different_byref_simple.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,14 @@\n+// Check that different const types are different.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct ConstUsize<const V: usize> {}\n+\n+fn main() {\n+    let mut u = ConstUsize::<3> {};\n+    u = ConstUsize::<4> {};\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "f1bd8def9ff161cf89c88289aaf01f5315ab2bba", "filename": "src/test/ui/const-generics/fn-const-param-call.full.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,14 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-call.rs:12:25\n+   |\n+LL | struct Wrapper<const F: fn() -> u32>;\n+   |                         ^^^^^^^^^^^\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-call.rs:14:15\n+   |\n+LL | impl<const F: fn() -> u32> Wrapper<F> {\n+   |               ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "83acd04e4640bd0dba75ec9e3fc9983d9e5b7fac", "filename": "src/test/ui/const-generics/fn-const-param-call.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,20 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-call.rs:12:25\n+   |\n+LL | struct Wrapper<const F: fn() -> u32>;\n+   |                         ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-call.rs:14:15\n+   |\n+LL | impl<const F: fn() -> u32> Wrapper<F> {\n+   |               ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bba6c1f7a16f42be62249cb86e4bf5b7582235fe", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,9 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Check that functions cannot be used as const parameters.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn function() -> u32 {\n     17"}, {"sha": "b5811243caa8a31b1b3bd97804b832c0ef9c4326", "filename": "src/test/ui/const-generics/fn-const-param-call.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fn-const-param-call.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-call.rs:8:25\n-   |\n-LL | struct Wrapper<const F: fn() -> u32>;\n-   |                         ^^^^^^^^^^^\n-\n-error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-call.rs:10:15\n-   |\n-LL | impl<const F: fn() -> u32> Wrapper<F> {\n-   |               ^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "4bdc9b89af607d25e63f90cbbb4292a034dd1c39", "filename": "src/test/ui/const-generics/fn-const-param-infer.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,8 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-infer.rs:7:25\n+   |\n+LL | struct Checked<const F: fn(usize) -> bool>;\n+   |                         ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "27d1101cbcb055ef890344470753f8fdf55bccbd", "filename": "src/test/ui/const-generics/fn-const-param-infer.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,11 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-infer.rs:7:25\n+   |\n+LL | struct Checked<const F: fn(usize) -> bool>;\n+   |                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3ed75e7b00dd7608a16f771e365537effc938ec2", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Checked<const F: fn(usize) -> bool>;\n //~^ ERROR: using function pointers as const generic parameters"}, {"sha": "7aaa41eb7d7b157f462a9af0a4f450b8cd1c7d47", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fn-const-param-infer.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-infer.rs:4:25\n-   |\n-LL | struct Checked<const F: fn(usize) -> bool>;\n-   |                         ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "950684aaa8dc1959e9ab09f7a0b3e5db967b0312", "filename": "src/test/ui/const-generics/fn-taking-const-generic-array.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::fmt::Display;\n "}, {"sha": "52fd0a8fec03b94c97fd4c79f12c57d3d0565db2", "filename": "src/test/ui/const-generics/fn-taking-const-generic-array.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fn-taking-const-generic-array.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "adcaa75996327c48f99ad482d2024fe9de263b76", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.full.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,9 @@\n+error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/forbid-non-structural_match-types.rs:15:19\n+   |\n+LL | struct D<const X: C>;\n+   |                   ^ `C` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "25aa354022304436dbe557260718fb548dae8e41", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,27 @@\n+error: using `A` as const generic parameters is forbidden\n+  --> $DIR/forbid-non-structural_match-types.rs:10:19\n+   |\n+LL | struct B<const X: A>; // ok\n+   |                   ^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `C` as const generic parameters is forbidden\n+  --> $DIR/forbid-non-structural_match-types.rs:15:19\n+   |\n+LL | struct D<const X: C>;\n+   |                   ^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/forbid-non-structural_match-types.rs:15:19\n+   |\n+LL | struct D<const X: C>;\n+   |                   ^ `C` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "86540db2d03a0a1538de360c3232dc84fbf6dcd8", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,13 +1,18 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(PartialEq, Eq)]\n struct A;\n \n struct B<const X: A>; // ok\n+//[min]~^ ERROR using `A` as const generic parameters is forbidden\n \n struct C;\n \n struct D<const X: C>; //~ ERROR `C` must be annotated with `#[derive(PartialEq, Eq)]`\n+//[min]~^ ERROR using `C` as const generic parameters is forbidden\n \n fn main() {}"}, {"sha": "600be64b1e1b8f3dac0a5b04abbd464ef52f6cdb", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,18 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/forbid-non-structural_match-types.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:11:19\n-   |\n-LL | struct D<const X: C>;\n-   |                   ^ `C` doesn't derive both `PartialEq` and `Eq`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0741`."}, {"sha": "0ac51e8c9e61b460c9ae18fcac3326c38f945f84", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.full.stderr", "status": "renamed", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,28 +1,19 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/foreign-item-const-parameter.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0044]: foreign items may not have const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:5:5\n+  --> $DIR/foreign-item-const-parameter.rs:8:5\n    |\n LL |     fn foo<const X: usize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n    |\n    = help: replace the const parameters with concrete consts\n \n error[E0044]: foreign items may not have type or const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:7:5\n+  --> $DIR/foreign-item-const-parameter.rs:10:5\n    |\n LL |     fn bar<T, const X: usize>(_: T);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters\n    |\n    = help: replace the type or const parameters with concrete types or consts\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0044`.", "previous_filename": "src/test/ui/const-generics/foreign-item-const-parameter.stderr"}, {"sha": "0ac51e8c9e61b460c9ae18fcac3326c38f945f84", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,19 @@\n+error[E0044]: foreign items may not have const parameters\n+  --> $DIR/foreign-item-const-parameter.rs:8:5\n+   |\n+LL |     fn foo<const X: usize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n+   |\n+   = help: replace the const parameters with concrete consts\n+\n+error[E0044]: foreign items may not have type or const parameters\n+  --> $DIR/foreign-item-const-parameter.rs:10:5\n+   |\n+LL |     fn bar<T, const X: usize>(_: T);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters\n+   |\n+   = help: replace the type or const parameters with concrete types or consts\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0044`."}, {"sha": "44b6d0332c3f9026bb7ff65c8f382124bab60a58", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n extern \"C\" {\n     fn foo<const X: usize>(); //~ ERROR foreign items may not have const parameters"}, {"sha": "05cabc46baa3479edf32bc6a73ea96b60c5933d6", "filename": "src/test/ui/const-generics/impl-const-generic-struct.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct S<const X: u32>;\n "}, {"sha": "9d68df07ce6772f7e957325fb6722252bbb32ed0", "filename": "src/test/ui/const-generics/impl-const-generic-struct.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-const-generic-struct.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "6b902e2d6585eae96317eccae04cf7c0629e2615", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.full.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,15 @@\n+error[E0107]: wrong number of const arguments: expected 2, found 1\n+  --> $DIR/incorrect-number-of-const-args.rs:12:5\n+   |\n+LL |     foo::<0>();\n+   |     ^^^^^^^^ expected 2 const arguments\n+\n+error[E0107]: wrong number of const arguments: expected 2, found 3\n+  --> $DIR/incorrect-number-of-const-args.rs:13:17\n+   |\n+LL |     foo::<0, 0, 0>();\n+   |                 ^ unexpected const argument\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "6b902e2d6585eae96317eccae04cf7c0629e2615", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.min.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,15 @@\n+error[E0107]: wrong number of const arguments: expected 2, found 1\n+  --> $DIR/incorrect-number-of-const-args.rs:12:5\n+   |\n+LL |     foo::<0>();\n+   |     ^^^^^^^^ expected 2 const arguments\n+\n+error[E0107]: wrong number of const arguments: expected 2, found 3\n+  --> $DIR/incorrect-number-of-const-args.rs:13:17\n+   |\n+LL |     foo::<0, 0, 0>();\n+   |                 ^ unexpected const argument\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "f7bdf761f7d1289882195317d995103aa437e415", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const X: usize, const Y: usize>() -> usize {\n     0"}, {"sha": "51064d7f90fb2fa9968212bb8daa74bc819482d3", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/incorrect-number-of-const-args.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0107]: wrong number of const arguments: expected 2, found 1\n-  --> $DIR/incorrect-number-of-const-args.rs:9:5\n-   |\n-LL |     foo::<0>();\n-   |     ^^^^^^^^ expected 2 const arguments\n-\n-error[E0107]: wrong number of const arguments: expected 2, found 3\n-  --> $DIR/incorrect-number-of-const-args.rs:10:17\n-   |\n-LL |     foo::<0, 0, 0>();\n-   |                 ^ unexpected const argument\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0107`."}, {"sha": "609fdb35cf18d0b9b2e1338fe823768373a917d1", "filename": "src/test/ui/const-generics/infer_arg_from_pat.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,8 +1,11 @@\n // run-pass\n //\n // see issue #70529\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize> {\n     arr: [u8; N],"}, {"sha": "f52e5e49a3bde78d18a235cace61ede8d3b89c76", "filename": "src/test/ui/const-generics/infer_arg_from_pat.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/infer_arg_from_pat.rs:4:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "cbf48e3d24997aab5cb1964b8a27b03dd87e4bb6", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,8 +1,11 @@\n // check-pass\n //\n // see issue #70529\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn as_chunks<const N: usize>() -> [u8; N] {\n     loop {}"}, {"sha": "dfadfbb16637ac24336698208167d7990b20eb25", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/infer_arr_len_from_pat.rs:4:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "bdbf338295cccaa94e58d27004b37c41c1ceb94a", "filename": "src/test/ui/const-generics/integer-literal-generic-arg-in-where-clause.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // check-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn takes_closure_of_array_3<F>(f: F) where F: Fn([i32; 3]) {\n     f([1, 2, 3]);\n@@ -15,4 +17,7 @@ fn returns_closure_of_array_3() -> impl Fn([i32; 3]) {\n     |_| {}\n }\n \n-fn main() {}\n+fn main() {\n+    takes_closure_of_array_3(returns_closure_of_array_3());\n+    takes_closure_of_array_3_apit(returns_closure_of_array_3());\n+}"}, {"sha": "aadd10e5ccab361cfbf4b050b0555520af2d601c", "filename": "src/test/ui/const-generics/integer-literal-generic-arg-in-where-clause.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/integer-literal-generic-arg-in-where-clause.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "8855f187e970324f605b2cf77cf1977eeb80a73b", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.full.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-61522-array-len-succ.rs:7:40\n+   |\n+LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n+   |                                        ^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-61522-array-len-succ.rs:12:24\n+   |\n+LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n+   |                        ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a1b1a095041b317ff09ff3bc268bc2150bc786f6", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-61522-array-len-succ.rs:7:45\n+   |\n+LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n+   |                                             ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n+   |\n+   = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-61522-array-len-succ.rs:12:30\n+   |\n+LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n+   |                              ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n+   |\n+   = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "81443b90d6156648725e22b693b25473cac642b3", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,12 +1,17 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n-//~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters must not be used\n \n impl<const COUNT: usize> MyArray<COUNT> {\n     fn inner(&self) -> &[u8; COUNT + 1] {\n-        //~^ ERROR constant expression depends on a generic parameter\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n+        //[min]~^^ ERROR generic parameters must not be used\n         &self.0\n     }\n }"}, {"sha": "a1fbd5f2025bf35e93670c7dd718221f8b5eb1b0", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,27 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61522-array-len-succ.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61522-array-len-succ.rs:4:40\n-   |\n-LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n-   |                                        ^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61522-array-len-succ.rs:8:24\n-   |\n-LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n-   |                        ^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "3ff17ddb3bcf3bd820848ed7cf9d360a580b5c1f", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,11 @@\n+error: using `&'static str` as const generic parameters is forbidden\n+  --> $DIR/issue-66596-impl-trait-for-str-const-arg.rs:9:25\n+   |\n+LL | trait Trait<const NAME: &'static str> {\n+   |                         ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d458a366fb3737fcf80c43ab88766324cc1b2db6", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,9 +1,13 @@\n-// check-pass\n+//[full] check-pass\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n \n trait Trait<const NAME: &'static str> {\n+//[min]~^ ERROR using `&'static str` as const generic parameters is forbidden\n     type Assoc;\n }\n "}, {"sha": "720420d9cd684e06fdf6b45f27402bef4bf54a88", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-66596-impl-trait-for-str-const-arg.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "eab63d3a6e6ab0563b3d513c5e256966c51bdef8", "filename": "src/test/ui/const-generics/issue-68104-print-stack-overflow.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,8 +1,10 @@\n // aux-build:impl-const.rs\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n extern crate impl_const;\n "}, {"sha": "9cfa57006d5c670adb6f2751caa1e25a0c78b85c", "filename": "src/test/ui/const-generics/issue-70180-1-stalled_on.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,6 +1,9 @@\n // build-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub fn works() {\n     let array/*: [_; _]*/ = default_array();"}, {"sha": "bbde404966ccf04361a3c338e0a2cbfdffd120c1", "filename": "src/test/ui/const-generics/issue-70180-2-stalled_on.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,6 +1,9 @@\n // build-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn works() {\n     let array/*: [u8; _]*/ = default_byte_array();"}, {"sha": "d4c962452d182dae3164eb2a43b85ff954ab34ab", "filename": "src/test/ui/const-generics/issue-71986.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-71986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-71986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-71986.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,6 +1,9 @@\n // check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait Foo<const B: bool> {}\n pub fn bar<T: Foo<{ true }>>() {}"}, {"sha": "cf24cbe7e82bae335920d968727f3f53fcbcf15a", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,10 @@\n // run-pass\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n \n use std::ops::AddAssign;\n "}, {"sha": "acbc2df1d740f05d23457fb9a3dc0b559aa20232", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/mut-ref-const-param-array.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "012b8fe587b3040d2530c31e1574d2596e7f4375", "filename": "src/test/ui/const-generics/nested-type.full.stderr", "status": "renamed", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,154 +1,154 @@\n error[E0391]: cycle detected when computing type of `Foo`\n-  --> $DIR/nested-type.rs:4:1\n+  --> $DIR/nested-type.rs:7:1\n    |\n LL | struct Foo<const N: [u8; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires computing type of `Foo::N`...\n-  --> $DIR/nested-type.rs:4:18\n+  --> $DIR/nested-type.rs:7:18\n    |\n LL | struct Foo<const N: [u8; {\n    |                  ^\n note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n+  --> $DIR/nested-type.rs:7:26\n    |\n LL |   struct Foo<const N: [u8; {\n    |  __________________________^\n LL | |\n LL | |\n-LL | |     struct Foo<const N: usize>;\n+LL | |\n ...  |\n LL | |     Foo::<17>::value()\n LL | | }]>;\n    | |_^\n note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n+  --> $DIR/nested-type.rs:7:26\n    |\n LL |   struct Foo<const N: [u8; {\n    |  __________________________^\n LL | |\n LL | |\n-LL | |     struct Foo<const N: usize>;\n+LL | |\n ...  |\n LL | |     Foo::<17>::value()\n LL | | }]>;\n    | |_^\n note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n+  --> $DIR/nested-type.rs:7:26\n    |\n LL |   struct Foo<const N: [u8; {\n    |  __________________________^\n LL | |\n LL | |\n-LL | |     struct Foo<const N: usize>;\n+LL | |\n ...  |\n LL | |     Foo::<17>::value()\n LL | | }]>;\n    | |_^\n note: ...which requires type-checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n+  --> $DIR/nested-type.rs:7:26\n    |\n LL |   struct Foo<const N: [u8; {\n    |  __________________________^\n LL | |\n LL | |\n-LL | |     struct Foo<const N: usize>;\n+LL | |\n ...  |\n LL | |     Foo::<17>::value()\n LL | | }]>;\n    | |_^\n note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n-  --> $DIR/nested-type.rs:7:5\n+  --> $DIR/nested-type.rs:11:5\n    |\n LL |     struct Foo<const N: usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing the variances for items in this crate...\n    = note: ...which again requires computing type of `Foo`, completing the cycle\n note: cycle used when collecting item types in top-level module\n-  --> $DIR/nested-type.rs:1:1\n+  --> $DIR/nested-type.rs:3:1\n    |\n-LL | / #![feature(const_generics)]\n-LL | | #![allow(incomplete_features)]\n+LL | / #![cfg_attr(full, feature(const_generics))]\n+LL | | #![cfg_attr(full, allow(incomplete_features))]\n+LL | | #![cfg_attr(min, feature(min_const_generics))]\n LL | |\n-LL | | struct Foo<const N: [u8; {\n ...  |\n LL | |\n LL | | fn main() {}\n    | |____________^\n \n error[E0391]: cycle detected when computing type of `Foo`\n-  --> $DIR/nested-type.rs:4:1\n+  --> $DIR/nested-type.rs:7:1\n    |\n LL | struct Foo<const N: [u8; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires computing type of `Foo::N`...\n-  --> $DIR/nested-type.rs:4:18\n+  --> $DIR/nested-type.rs:7:18\n    |\n LL | struct Foo<const N: [u8; {\n    |                  ^\n note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n+  --> $DIR/nested-type.rs:7:26\n    |\n LL |   struct Foo<const N: [u8; {\n    |  __________________________^\n LL | |\n LL | |\n-LL | |     struct Foo<const N: usize>;\n+LL | |\n ...  |\n LL | |     Foo::<17>::value()\n LL | | }]>;\n    | |_^\n note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n+  --> $DIR/nested-type.rs:7:26\n    |\n LL |   struct Foo<const N: [u8; {\n    |  __________________________^\n LL | |\n LL | |\n-LL | |     struct Foo<const N: usize>;\n+LL | |\n ...  |\n LL | |     Foo::<17>::value()\n LL | | }]>;\n    | |_^\n note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n+  --> $DIR/nested-type.rs:7:26\n    |\n LL |   struct Foo<const N: [u8; {\n    |  __________________________^\n LL | |\n LL | |\n-LL | |     struct Foo<const N: usize>;\n+LL | |\n ...  |\n LL | |     Foo::<17>::value()\n LL | | }]>;\n    | |_^\n note: ...which requires type-checking `Foo::{{constant}}#0`...\n-  --> $DIR/nested-type.rs:4:26\n+  --> $DIR/nested-type.rs:7:26\n    |\n LL |   struct Foo<const N: [u8; {\n    |  __________________________^\n LL | |\n LL | |\n-LL | |     struct Foo<const N: usize>;\n+LL | |\n ...  |\n LL | |     Foo::<17>::value()\n LL | | }]>;\n    | |_^\n note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n-  --> $DIR/nested-type.rs:7:5\n+  --> $DIR/nested-type.rs:11:5\n    |\n LL |     struct Foo<const N: usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing the variances for items in this crate...\n    = note: ...which again requires computing type of `Foo`, completing the cycle\n note: cycle used when collecting item types in top-level module\n-  --> $DIR/nested-type.rs:1:1\n+  --> $DIR/nested-type.rs:3:1\n    |\n-LL | / #![feature(const_generics)]\n-LL | | #![allow(incomplete_features)]\n+LL | / #![cfg_attr(full, feature(const_generics))]\n+LL | | #![cfg_attr(full, allow(incomplete_features))]\n+LL | | #![cfg_attr(min, feature(min_const_generics))]\n LL | |\n-LL | | struct Foo<const N: [u8; {\n ...  |\n LL | |\n LL | | fn main() {}", "previous_filename": "src/test/ui/const-generics/nested-type.stderr"}, {"sha": "ebe818785ac7ce48515e4bf6ff7f40915f8feda2", "filename": "src/test/ui/const-generics/nested-type.min.stderr", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,175 @@\n+error: using `[u8; _]` as const generic parameters is forbidden\n+  --> $DIR/nested-type.rs:7:21\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  _____________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |__^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error[E0391]: cycle detected when computing type of `Foo`\n+  --> $DIR/nested-type.rs:7:1\n+   |\n+LL | struct Foo<const N: [u8; {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `Foo::N`...\n+  --> $DIR/nested-type.rs:7:18\n+   |\n+LL | struct Foo<const N: [u8; {\n+   |                  ^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:7:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:7:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:7:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires type-checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:7:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n+  --> $DIR/nested-type.rs:11:5\n+   |\n+LL |     struct Foo<const N: usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing the variances for items in this crate...\n+   = note: ...which again requires computing type of `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/nested-type.rs:3:1\n+   |\n+LL | / #![cfg_attr(full, feature(const_generics))]\n+LL | | #![cfg_attr(full, allow(incomplete_features))]\n+LL | | #![cfg_attr(min, feature(min_const_generics))]\n+LL | |\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error[E0391]: cycle detected when computing type of `Foo`\n+  --> $DIR/nested-type.rs:7:1\n+   |\n+LL | struct Foo<const N: [u8; {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `Foo::N`...\n+  --> $DIR/nested-type.rs:7:18\n+   |\n+LL | struct Foo<const N: [u8; {\n+   |                  ^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:7:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:7:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:7:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires type-checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:7:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n+  --> $DIR/nested-type.rs:11:5\n+   |\n+LL |     struct Foo<const N: usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing the variances for items in this crate...\n+   = note: ...which again requires computing type of `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/nested-type.rs:3:1\n+   |\n+LL | / #![cfg_attr(full, feature(const_generics))]\n+LL | | #![cfg_attr(full, allow(incomplete_features))]\n+LL | | #![cfg_attr(min, feature(min_const_generics))]\n+LL | |\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "98a5a0dd3d8fdf3b8e6ecb3c1428f244a7115ea8", "filename": "src/test/ui/const-generics/nested-type.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,9 +1,13 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const N: [u8; {\n //~^ ERROR cycle detected\n //~| ERROR cycle detected\n+//[min]~| ERROR using `[u8; _]` as const generic\n     struct Foo<const N: usize>;\n \n     impl<const N: usize> Foo<N> {"}, {"sha": "3dccfd73dcccb66ce94fe4a55dd18ffaa3061433", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.full.stderr", "status": "renamed", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,31 +1,22 @@\n error: type parameters with a default must be trailing\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:12\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error: constant values inside of type parameter defaults must not depend on generic parameters\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:3:44\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ the anonymous constant must not depend on the parameter `T`\n \n error: constant values inside of type parameter defaults must not depend on generic parameters\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:21\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:21\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |                     ^ the anonymous constant must not depend on the parameter `N`\n \n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n ", "previous_filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.stderr"}, {"sha": "461822a96083b187a6fb2d7cd4abfbfeb2e277c2", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,24 @@\n+error: type parameters with a default must be trailing\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:12\n+   |\n+LL | struct Bar<T = [u8; N], const N: usize>(T);\n+   |            ^\n+   |\n+   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:44\n+   |\n+LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = help: it is currently only allowed to use either `T` or `{ T }` as generic constants\n+\n+error: constant values inside of type parameter defaults must not depend on generic parameters\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:21\n+   |\n+LL | struct Bar<T = [u8; N], const N: usize>(T);\n+   |                     ^ the anonymous constant must not depend on the parameter `N`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "e52773c78dbd3b4a66bb879dde364c4a054772c3", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,12 @@\n-#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-//~^ ERROR constant values inside of type parameter defaults\n+//[full]~^ ERROR constant values inside of type parameter defaults\n+//[min]~^^ ERROR generic parameters must not be used inside of non trivial\n \n // FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "ffaab51f766d8d8b264c03f9096935041fc9a7cc", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.full.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,14 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:10:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:12:15\n+   |\n+LL | impl<const P: *const u32> Const<P> {\n+   |               ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "dc4bb8b0f042a3870d7b79429c9b81d29b688698", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,20 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:10:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:12:15\n+   |\n+LL | impl<const P: *const u32> Const<P> {\n+   |               ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "20cc62ebc17cd408a4c48430cccbf1ed4ff047b0", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,9 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Checks that pointers must not be used as the type of const params.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n const A: u32 = 3;\n "}, {"sha": "1ce8bb9c05423a1a421c0da34280e3b032e638a9", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/raw-ptr-const-param-deref.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/raw-ptr-const-param-deref.rs:6:23\n-   |\n-LL | struct Const<const P: *const u32>;\n-   |                       ^^^^^^^^^^\n-\n-error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/raw-ptr-const-param-deref.rs:8:15\n-   |\n-LL | impl<const P: *const u32> Const<P> {\n-   |               ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "d317aa0f585cf9c616ae74b02b5f952ee24a5faa", "filename": "src/test/ui/const-generics/raw-ptr-const-param.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,8 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param.rs:7:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f387974a21aca244c54cea61cb9731069401782e", "filename": "src/test/ui/const-generics/raw-ptr-const-param.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,11 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param.rs:7:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "36e593aa210223d8a85eb1a9f35298c5f5ee117e", "filename": "src/test/ui/const-generics/raw-ptr-const-param.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const P: *const u32>; //~ ERROR: using raw pointers as const generic parameters\n "}, {"sha": "6e64f8a327fd508241b479fe5f4859eb0a12f1b8", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/raw-ptr-const-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/raw-ptr-const-param.rs:4:23\n-   |\n-LL | struct Const<const P: *const u32>;\n-   |                       ^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "d06da2ef0630a103210489cef75f82ec344dce56", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.full.stderr", "status": "renamed", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/slice-const-param-mismatch.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/slice-const-param-mismatch.rs:9:35\n+  --> $DIR/slice-const-param-mismatch.rs:15:35\n    |\n LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n    |            --------------------   ^^^^^^^^^^^^^^^^^^^^^^ expected `\"Hello\"`, found `\"World\"`\n@@ -19,7 +10,7 @@ LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n               found struct `ConstString<\"World\">`\n \n error[E0308]: mismatched types\n-  --> $DIR/slice-const-param-mismatch.rs:11:33\n+  --> $DIR/slice-const-param-mismatch.rs:17:33\n    |\n LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n    |            -------------------   ^^^^^^^^^^^^^^^^^^^^^ expected `\"\u2107\u31c8\u21a6\"`, found `\"\u2107\u31c8\u21a5\"`\n@@ -30,7 +21,7 @@ LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n               found struct `ConstString<\"\u2107\u31c8\u21a5\">`\n \n error[E0308]: mismatched types\n-  --> $DIR/slice-const-param-mismatch.rs:13:33\n+  --> $DIR/slice-const-param-mismatch.rs:19:33\n    |\n LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n    |            ------------------   ^^^^^^^^^^^^^^^^^^^^ expected `b\"AAA\"`, found `b\"BBB\"`\n@@ -40,6 +31,6 @@ LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n    = note: expected struct `ConstBytes<b\"AAA\">`\n               found struct `ConstBytes<b\"BBB\">`\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`.", "previous_filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr"}, {"sha": "e86f885b9bbadab5e5cfeeada2ddfc45368b2fee", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,20 @@\n+error: using `&'static str` as const generic parameters is forbidden\n+  --> $DIR/slice-const-param-mismatch.rs:8:29\n+   |\n+LL | struct ConstString<const T: &'static str>;\n+   |                             ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static [u8]` as const generic parameters is forbidden\n+  --> $DIR/slice-const-param-mismatch.rs:10:28\n+   |\n+LL | struct ConstBytes<const T: &'static [u8]>;\n+   |                            ^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0f8ae9bac4a3ce24898c8f761c26f4fa2e865080", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,14 +1,20 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n \n struct ConstString<const T: &'static str>;\n+//[min]~^ ERROR\n struct ConstBytes<const T: &'static [u8]>;\n+//[min]~^ ERROR\n \n pub fn main() {\n     let _: ConstString<\"Hello\"> = ConstString::<\"Hello\">;\n-    let _: ConstString<\"Hello\"> = ConstString::<\"World\">; //~ ERROR mismatched types\n+    let _: ConstString<\"Hello\"> = ConstString::<\"World\">; //[full]~ ERROR mismatched types\n     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a6\">;\n-    let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">; //~ ERROR mismatched types\n+    let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">; //[full]~ ERROR mismatched types\n     let _: ConstBytes<b\"AAA\"> = ConstBytes::<{&[0x41, 0x41, 0x41]}>;\n-    let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">; //~ ERROR mismatched types\n+    let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">; //[full]~ ERROR mismatched types\n }"}, {"sha": "e2ffc67c3579cd10f736d1a94caa06e57b54eb93", "filename": "src/test/ui/const-generics/slice-const-param.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,20 @@\n+error: using `&'static str` as const generic parameters is forbidden\n+  --> $DIR/slice-const-param.rs:8:40\n+   |\n+LL | pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n+   |                                        ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static [u8]` as const generic parameters is forbidden\n+  --> $DIR/slice-const-param.rs:13:41\n+   |\n+LL | pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n+   |                                         ^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1b6d2f6216c44d27afdfa498eade3cea06c5bb43", "filename": "src/test/ui/const-generics/slice-const-param.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,13 +1,17 @@\n-// run-pass\n+//[full] run-pass\n+// revisions: min full\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n+    //[min]~^ ERROR using `&'static str` as const\n     STRING\n }\n \n pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n+    //[min]~^ ERROR using `&'static [u8]` as const\n     BYTES\n }\n "}, {"sha": "524bd41a669b44df1c66e8348005735c88d0eca3", "filename": "src/test/ui/const-generics/slice-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/slice-const-param.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e73a297c878f88f4e6ada939f54292ac7a43739b", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.full.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,9 @@\n+error[E0573]: expected type, found const parameter `C`\n+  --> $DIR/struct-with-invalid-const-param.rs:8:23\n+   |\n+LL | struct S<const C: u8>(C);\n+   |                       ^ not a type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0573`."}, {"sha": "e73a297c878f88f4e6ada939f54292ac7a43739b", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.min.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,9 @@\n+error[E0573]: expected type, found const parameter `C`\n+  --> $DIR/struct-with-invalid-const-param.rs:8:23\n+   |\n+LL | struct S<const C: u8>(C);\n+   |                       ^ not a type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0573`."}, {"sha": "f0122ace3aec3a5c97e71a69d918c5a79b299746", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,9 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Checks that a const param cannot be stored in a struct.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct S<const C: u8>(C); //~ ERROR expected type, found const parameter\n "}, {"sha": "b66d79845f971581f821b702ea1e88a8790c1bcf", "filename": "src/test/ui/const-generics/trait-const-args.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ftrait-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ftrait-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftrait-const-args.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,6 +1,9 @@\n // check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const N: usize>;\n trait Foo<const N: usize> {}"}, {"sha": "e041e9709d0ec56204caad2ebd7505736f22b63a", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem::MaybeUninit;\n "}, {"sha": "6077fe5b1ed39edf74ed4c653e4907d8faa5d29e", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/transparent-maybeunit-array-wrapper.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f424fd03341fec6945058f72f9aa72c277ab21ce", "filename": "src/test/ui/const-generics/type_of_anon_const.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait T<const A: usize> {\n     fn l<const N: bool>() -> usize;"}, {"sha": "8afed0d39866a9cfe81893fc751deadea71ba931", "filename": "src/test/ui/const-generics/type_of_anon_const.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type_of_anon_const.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "2c5af9e65f827a8b57b2348da2e69a35b6417a4c", "filename": "src/test/ui/const-generics/uninferred-consts.full.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/uninferred-consts.rs:14:5\n+   |\n+LL |     Foo.foo();\n+   |     ^^^^^^^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "2c5af9e65f827a8b57b2348da2e69a35b6417a4c", "filename": "src/test/ui/const-generics/uninferred-consts.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/uninferred-consts.rs:14:5\n+   |\n+LL |     Foo.foo();\n+   |     ^^^^^^^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "ec5b3ffe5440bca973d7657e38d86ceed9562c71", "filename": "src/test/ui/const-generics/uninferred-consts.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,9 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Test that we emit an error if we cannot properly infer a constant.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // taken from https://github.com/rust-lang/rust/issues/70507#issuecomment-615268893\n struct Foo;"}, {"sha": "a3620084a428939ee0eb4ff5a6468980709ddb6e", "filename": "src/test/ui/const-generics/uninferred-consts.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,20 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/uninferred-consts.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/uninferred-consts.rs:10:5\n-   |\n-LL |     Foo.foo();\n-   |     ^^^^^^^^^\n-   |\n-   = note: unable to infer the value of a const parameter\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "94f3165eaec3106d5776e2948aea8f1c52edd971", "filename": "src/test/ui/const-generics/unknown_adt.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `UnknownStruct` in this scope\n-  --> $DIR/unknown_adt.rs:5:12\n+  --> $DIR/unknown_adt.rs:8:12\n    |\n LL |     let _: UnknownStruct<7>;\n    |            ^^^^^^^^^^^^^ not found in this scope", "previous_filename": "src/test/ui/const-generics/unknown_adt.stderr"}, {"sha": "94f3165eaec3106d5776e2948aea8f1c52edd971", "filename": "src/test/ui/const-generics/unknown_adt.min.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `UnknownStruct` in this scope\n+  --> $DIR/unknown_adt.rs:8:12\n+   |\n+LL |     let _: UnknownStruct<7>;\n+   |            ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "c6131402aeb6cb60dc73c775db65f644d6573f4a", "filename": "src/test/ui/const-generics/unknown_adt.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn main() {\n     let _: UnknownStruct<7>;"}, {"sha": "3c305167b4b64d12bbc5525b2cab68b7eeaf1f6c", "filename": "src/test/ui/const-generics/unused-const-param.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,7 +1,9 @@\n // check-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize>; // ok\n "}, {"sha": "be015a689ae14883038ddc23088d2c52083da3af", "filename": "src/test/ui/const-generics/unused-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/unused-const-param.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "1b075ade16a06cf3b560b5011bb6695eb27f1b1c", "filename": "src/test/ui/const-generics/unused_braces.full.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// run-rustfix\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+#![warn(unused_braces)]\n+\n+\n+struct A<const N: usize>;\n+\n+fn main() {\n+    let _: A<7>; // ok\n+    let _: A<7>; //~ WARN unnecessary braces\n+    let _: A<{ 3 + 5 }>; // ok\n+}"}, {"sha": "1752779a60a3a7e23a00d41046a88af094b75aa9", "filename": "src/test/ui/const-generics/unused_braces.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,11 +1,11 @@\n warning: unnecessary braces around const expression\n-  --> $DIR/unused_braces.rs:13:14\n+  --> $DIR/unused_braces.rs:15:14\n    |\n LL |     let _: A<{ 7 }>;\n    |              ^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces.rs:5:9\n+  --> $DIR/unused_braces.rs:8:9\n    |\n LL | #![warn(unused_braces)]\n    |         ^^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/unused_braces.stderr"}, {"sha": "1b075ade16a06cf3b560b5011bb6695eb27f1b1c", "filename": "src/test/ui/const-generics/unused_braces.min.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// run-rustfix\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+#![warn(unused_braces)]\n+\n+\n+struct A<const N: usize>;\n+\n+fn main() {\n+    let _: A<7>; // ok\n+    let _: A<7>; //~ WARN unnecessary braces\n+    let _: A<{ 3 + 5 }>; // ok\n+}"}, {"sha": "1752779a60a3a7e23a00d41046a88af094b75aa9", "filename": "src/test/ui/const-generics/unused_braces.min.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,14 @@\n+warning: unnecessary braces around const expression\n+  --> $DIR/unused_braces.rs:15:14\n+   |\n+LL |     let _: A<{ 7 }>;\n+   |              ^^^^^ help: remove these braces\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused_braces.rs:8:9\n+   |\n+LL | #![warn(unused_braces)]\n+   |         ^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "31c4caf7ab8509037adfcc07f7e6fbb8f6413b54", "filename": "src/test/ui/const-generics/unused_braces.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,10 +1,12 @@\n // check-pass\n // run-rustfix\n+// revisions: full min\n \n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![warn(unused_braces)]\n \n-#![feature(const_generics)]\n \n struct A<const N: usize>;\n "}, {"sha": "4af48fa1590907a37ee96c93833d965719e467f5", "filename": "src/test/ui/const-generics/wf-misc.full.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.full.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/wf-misc.rs:9:12\n+   |\n+LL |     let _: [u8; N + 1];\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/wf-misc.rs:17:12\n+   |\n+LL |     let _: Const::<{N + 1}>;\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f2acb8fc06e93812976e6dd91f7679eb394224ea", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/wf-misc.rs:9:17\n+   |\n+LL |     let _: [u8; N + 1];\n+   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/wf-misc.rs:17:21\n+   |\n+LL |     let _: Const::<{N + 1}>;\n+   |                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e6f7a9963e8f11735cf5cc69e59af15f340de7bc", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d9f52bc3545631c7485dce65b31742ef81c4d/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=1a7d9f52bc3545631c7485dce65b31742ef81c4d", "patch": "@@ -1,16 +1,22 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Tests miscellaneous well-formedness examples.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub fn arr_len<const N: usize>() {\n     let _: [u8; N + 1];\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n }\n \n struct Const<const N: usize>;\n \n pub fn func_call<const N: usize>() {\n     let _: Const::<{N + 1}>;\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n }\n \n fn main() {}"}, {"sha": "03f2bf3f526994e57fcb58ec6b51f6ff730b0f92", "filename": "src/test/ui/const-generics/wf-misc.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fbed1739c384faabf00cd8a62abedbf506e949b/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr?ref=3fbed1739c384faabf00cd8a62abedbf506e949b", "patch": "@@ -1,27 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/wf-misc.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/wf-misc.rs:5:12\n-   |\n-LL |     let _: [u8; N + 1];\n-   |            ^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/wf-misc.rs:12:12\n-   |\n-LL |     let _: Const::<{N + 1}>;\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}]}