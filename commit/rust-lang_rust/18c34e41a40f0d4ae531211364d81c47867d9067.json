{"sha": "18c34e41a40f0d4ae531211364d81c47867d9067", "node_id": "C_kwDOAAsO6NoAKDE4YzM0ZTQxYTQwZjBkNGFlNTMxMjExMzY0ZDgxYzQ3ODY3ZDkwNjc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-18T14:37:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-24T11:18:21Z"}, "message": "Introduce Bx::switch_to_block", "tree": {"sha": "a9a197985fdb56051d7a57014eafdb6b200806b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a197985fdb56051d7a57014eafdb6b200806b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c34e41a40f0d4ae531211364d81c47867d9067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c34e41a40f0d4ae531211364d81c47867d9067", "html_url": "https://github.com/rust-lang/rust/commit/18c34e41a40f0d4ae531211364d81c47867d9067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c34e41a40f0d4ae531211364d81c47867d9067/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88", "url": "https://api.github.com/repos/rust-lang/rust/commits/56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88", "html_url": "https://github.com/rust-lang/rust/commit/56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "b430dc329cb9aacc7f79bd1a4a9f4bca4259b1eb", "filename": "src/builder.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/18c34e41a40f0d4ae531211364d81c47867d9067/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c34e41a40f0d4ae531211364d81c47867d9067/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=18c34e41a40f0d4ae531211364d81c47867d9067", "patch": "@@ -404,6 +404,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         func.new_block(name)\n     }\n \n+    fn switch_to_block(&mut self, block: Self::BasicBlock) {\n+        *self.cx.current_block.borrow_mut() = Some(block);\n+        self.block = Some(block);\n+    }\n+\n     fn ret_void(&mut self) {\n         self.llbb().end_with_void_return(None)\n     }\n@@ -886,19 +891,20 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n         self.br(header_bb);\n \n-        let mut header_bx = Builder::build(self.cx, header_bb);\n-        let keep_going = header_bx.icmp(IntPredicate::IntNE, current_val, end);\n-        header_bx.cond_br(keep_going, body_bb, next_bb);\n+        self.switch_to_block(header_bb);\n+        let keep_going = self.icmp(IntPredicate::IntNE, current_val, end);\n+        self.cond_br(keep_going, body_bb, next_bb);\n \n-        let mut body_bx = Builder::build(self.cx, body_bb);\n+        self.switch_to_block(body_bb);\n         let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n-        cg_elem.val.store(&mut body_bx, PlaceRef::new_sized_aligned(current_val, cg_elem.layout, align));\n+        cg_elem.val.store(&mut self, PlaceRef::new_sized_aligned(current_val, cg_elem.layout, align));\n \n-        let next = body_bx.inbounds_gep(self.backend_type(cg_elem.layout), current.to_rvalue(), &[self.const_usize(1)]);\n-        body_bx.llbb().add_assignment(None, current, next);\n-        body_bx.br(header_bb);\n+        let next = self.inbounds_gep(self.backend_type(cg_elem.layout), current.to_rvalue(), &[self.const_usize(1)]);\n+        self.llbb().add_assignment(None, current, next);\n+        self.br(header_bb);\n \n-        Builder::build(self.cx, next_bb)\n+        self.switch_to_block(next_bb);\n+        self\n     }\n \n     fn range_metadata(&mut self, _load: RValue<'gcc>, _range: WrappingRange) {"}]}