{"sha": "7e9c4d58f189d4ac3c390a6ea345f2578dd5f661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOWM0ZDU4ZjE4OWQ0YWMzYzM5MGE2ZWEzNDVmMjU3OGRkNWY2NjE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-11T17:12:10Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-12T18:20:31Z"}, "message": "Search more efficiently for int/float impls", "tree": {"sha": "737fafc82905fdda3b52d682ff2ab04bc59b93fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/737fafc82905fdda3b52d682ff2ab04bc59b93fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661", "html_url": "https://github.com/rust-lang/rust/commit/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00bda1cafb1086b9669000aed5703f9e6324fbd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/00bda1cafb1086b9669000aed5703f9e6324fbd7", "html_url": "https://github.com/rust-lang/rust/commit/00bda1cafb1086b9669000aed5703f9e6324fbd7"}], "stats": {"total": 136, "additions": 118, "deletions": 18}, "files": [{"sha": "fb4b30a131fc1ddf2ad599c4bbccff0376e4b7ad", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7e9c4d58f189d4ac3c390a6ea345f2578dd5f661", "patch": "@@ -6,8 +6,10 @@ use std::{iter, sync::Arc};\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, type_ref::Mutability, AssocContainerId, AssocItemId, FunctionId,\n-    HasModule, ImplId, Lookup, TraitId,\n+    builtin_type::{IntBitness, Signedness},\n+    lang_item::LangItemTarget,\n+    type_ref::Mutability,\n+    AssocContainerId, AssocItemId, FunctionId, HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n@@ -16,9 +18,12 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use super::Substs;\n use crate::{\n-    autoderef, db::HirDatabase, primitive::FloatBitness, utils::all_super_traits, ApplicationTy,\n-    Canonical, DebruijnIndex, InEnvironment, TraitEnvironment, TraitRef, Ty, TyKind, TypeCtor,\n-    TypeWalk,\n+    autoderef,\n+    db::HirDatabase,\n+    primitive::{FloatBitness, FloatTy, IntTy},\n+    utils::all_super_traits,\n+    ApplicationTy, Canonical, DebruijnIndex, InEnvironment, TraitEnvironment, TraitRef, Ty, TyKind,\n+    TypeCtor, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -39,6 +44,62 @@ impl TyFingerprint {\n     }\n }\n \n+pub(crate) const ALL_INT_FPS: [TyFingerprint; 12] = [\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Unsigned,\n+        bitness: IntBitness::X8,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Unsigned,\n+        bitness: IntBitness::X16,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Unsigned,\n+        bitness: IntBitness::X32,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Unsigned,\n+        bitness: IntBitness::X64,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Unsigned,\n+        bitness: IntBitness::X128,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Unsigned,\n+        bitness: IntBitness::Xsize,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Signed,\n+        bitness: IntBitness::X8,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Signed,\n+        bitness: IntBitness::X16,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Signed,\n+        bitness: IntBitness::X32,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Signed,\n+        bitness: IntBitness::X64,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Signed,\n+        bitness: IntBitness::X128,\n+    })),\n+    TyFingerprint::Apply(TypeCtor::Int(IntTy {\n+        signedness: Signedness::Signed,\n+        bitness: IntBitness::Xsize,\n+    })),\n+];\n+\n+pub(crate) const ALL_FLOAT_FPS: [TyFingerprint; 2] = [\n+    TyFingerprint::Apply(TypeCtor::Float(FloatTy { bitness: FloatBitness::X32 })),\n+    TyFingerprint::Apply(TypeCtor::Float(FloatTy { bitness: FloatBitness::X64 })),\n+];\n+\n /// Trait impls defined or available in some crate.\n #[derive(Debug, Eq, PartialEq)]\n pub struct TraitImpls {"}, {"sha": "511ed8fe328e2323bff2fd23d1a1c9c4c18e9de2", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=7e9c4d58f189d4ac3c390a6ea345f2578dd5f661", "patch": "@@ -3042,7 +3042,7 @@ fn foo() {\n }\n \n #[test]\n-fn variable_kinds() {\n+fn variable_kinds_1() {\n     check_types(\n         r#\"\n trait Trait<T> { fn get(self, t: T) -> T; }\n@@ -3058,3 +3058,20 @@ fn test() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn variable_kinds_2() {\n+    check_types(\n+        r#\"\n+trait Trait { fn get(self) -> Self; }\n+impl Trait for u128 {}\n+impl Trait for f32 {}\n+fn test() {\n+    1.get();\n+  //^^^^^^^ u128\n+    (1.).get();\n+  //^^^^^^^^^^ f32\n+}\n+        \"#,\n+    );\n+}"}, {"sha": "c448aea656645c563175aecd7fbec4ad969dcfed", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9c4d58f189d4ac3c390a6ea345f2578dd5f661/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=7e9c4d58f189d4ac3c390a6ea345f2578dd5f661", "patch": "@@ -14,7 +14,10 @@ use ra_db::{salsa::InternKey, CrateId};\n \n use super::{builtin, AssocTyValue, ChalkContext, Impl};\n use crate::{\n-    db::HirDatabase, display::HirDisplay, method_resolution::TyFingerprint, utils::generics,\n+    db::HirDatabase,\n+    display::HirDisplay,\n+    method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n+    utils::generics,\n     CallableDef, DebruijnIndex, GenericPredicate, Substs, Ty, TypeCtor,\n };\n use mapping::{convert_where_clauses, generic_predicate_to_inline_bound, make_binders};\n@@ -66,16 +69,31 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         &self,\n         trait_id: TraitId,\n         parameters: &[GenericArg<Interner>],\n-        _binders: &CanonicalVarKinds<Interner>,\n+        binders: &CanonicalVarKinds<Interner>,\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n \n-        // FIXME use binders to look for int/float impls when necessary\n-\n         let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref(&Interner).clone());\n \n+        fn binder_kind(ty: &Ty, binders: &CanonicalVarKinds<Interner>) -> Option<chalk_ir::TyKind> {\n+            if let Ty::Bound(bv) = ty {\n+                let binders = binders.as_slice(&Interner);\n+                if bv.debruijn == DebruijnIndex::INNERMOST {\n+                    if let chalk_ir::VariableKind::Ty(tk) = binders[bv.index].kind {\n+                        return Some(tk);\n+                    }\n+                }\n+            }\n+            None\n+        }\n+\n         let self_ty_fp = TyFingerprint::for_impl(&ty);\n+        let fps: &[TyFingerprint] = match binder_kind(&ty, binders) {\n+            Some(chalk_ir::TyKind::Integer) => &ALL_INT_FPS,\n+            Some(chalk_ir::TyKind::Float) => &ALL_FLOAT_FPS,\n+            _ => self_ty_fp.as_ref().map(std::slice::from_ref).unwrap_or(&[]),\n+        };\n \n         // Note: Since we're using impls_for_trait, only impls where the trait\n         // can be resolved should ever reach Chalk. `impl_datum` relies on that\n@@ -86,17 +104,21 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n \n         let id_to_chalk = |id: hir_def::ImplId| Impl::ImplDef(id).to_chalk(self.db);\n \n-        let mut result: Vec<_> = match self_ty_fp {\n-            Some(fp) => impl_maps\n+        let mut result: Vec<_> = if fps.is_empty() {\n+            debug!(\"Unrestricted search for {:?} impls...\", trait_);\n+            impl_maps\n+                .iter()\n+                .flat_map(|crate_impl_defs| crate_impl_defs.for_trait(trait_).map(id_to_chalk))\n+                .collect()\n+        } else {\n+            impl_maps\n                 .iter()\n                 .flat_map(|crate_impl_defs| {\n-                    crate_impl_defs.for_trait_and_self_ty(trait_, fp).map(id_to_chalk)\n+                    fps.iter().flat_map(move |fp| {\n+                        crate_impl_defs.for_trait_and_self_ty(trait_, *fp).map(id_to_chalk)\n+                    })\n                 })\n-                .collect(),\n-            None => impl_maps\n-                .iter()\n-                .flat_map(|crate_impl_defs| crate_impl_defs.for_trait(trait_).map(id_to_chalk))\n-                .collect(),\n+                .collect()\n         };\n \n         let arg: Option<Ty> ="}]}