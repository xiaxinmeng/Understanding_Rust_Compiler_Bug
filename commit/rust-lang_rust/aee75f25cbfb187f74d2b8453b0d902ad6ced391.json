{"sha": "aee75f25cbfb187f74d2b8453b0d902ad6ced391", "node_id": "C_kwDOAAsO6NoAKGFlZTc1ZjI1Y2JmYjE4N2Y3NGQyYjg0NTNiMGQ5MDJhZDZjZWQzOTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-19T15:32:20Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-19T16:15:28Z"}, "message": "Assert goal is fully normalized during assemble", "tree": {"sha": "edae5555d96adae873c704bac1ec2cced72c7f2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edae5555d96adae873c704bac1ec2cced72c7f2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee75f25cbfb187f74d2b8453b0d902ad6ced391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee75f25cbfb187f74d2b8453b0d902ad6ced391", "html_url": "https://github.com/rust-lang/rust/commit/aee75f25cbfb187f74d2b8453b0d902ad6ced391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee75f25cbfb187f74d2b8453b0d902ad6ced391/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9c8e294d2b6fc7c83641476f4986a7bf5e84817", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c8e294d2b6fc7c83641476f4986a7bf5e84817", "html_url": "https://github.com/rust-lang/rust/commit/c9c8e294d2b6fc7c83641476f4986a7bf5e84817"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "45bce34b1edd83686c42d16d43a3b7834455001f", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aee75f25cbfb187f74d2b8453b0d902ad6ced391/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee75f25cbfb187f74d2b8453b0d902ad6ced391/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=aee75f25cbfb187f74d2b8453b0d902ad6ced391", "patch": "@@ -79,7 +79,7 @@ pub(super) enum CandidateSource {\n     AliasBound(usize),\n }\n \n-pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy {\n+pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n     fn self_ty(self) -> Ty<'tcx>;\n \n     fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self;\n@@ -124,6 +124,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         &mut self,\n         goal: Goal<'tcx, G>,\n     ) -> Vec<Candidate<'tcx>> {\n+        debug_assert_eq!(goal, self.infcx.resolve_vars_if_possible(goal));\n+\n         // HACK: `_: Trait` is ambiguous, because it may be satisfied via a builtin rule,\n         // object bound, alias bound, etc. We are unable to determine this until we can at\n         // least structually resolve the type one layer.\n@@ -179,6 +181,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 Ok((_, certainty)) => certainty,\n                 Err(NoSolution) => return,\n             };\n+            let normalized_ty = self.infcx.resolve_vars_if_possible(normalized_ty);\n \n             // NOTE: Alternatively we could call `evaluate_goal` here and only have a `Normalized` candidate.\n             // This doesn't work as long as we use `CandidateSource` in winnowing."}]}