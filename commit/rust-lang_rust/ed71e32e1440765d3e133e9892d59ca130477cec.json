{"sha": "ed71e32e1440765d3e133e9892d59ca130477cec", "node_id": "C_kwDOAAsO6NoAKGVkNzFlMzJlMTQ0MDc2NWQzZTEzM2U5ODkyZDU5Y2ExMzA0NzdjZWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T14:56:12Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-15T15:51:43Z"}, "message": "Always pass alignment and handle checking lazily", "tree": {"sha": "f47f7bf6842a3ed3117b9f862ecf99cab96328ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f47f7bf6842a3ed3117b9f862ecf99cab96328ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed71e32e1440765d3e133e9892d59ca130477cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed71e32e1440765d3e133e9892d59ca130477cec", "html_url": "https://github.com/rust-lang/rust/commit/ed71e32e1440765d3e133e9892d59ca130477cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed71e32e1440765d3e133e9892d59ca130477cec/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57582843186eb02b373a9eb98f7fd2b84961875", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57582843186eb02b373a9eb98f7fd2b84961875", "html_url": "https://github.com/rust-lang/rust/commit/a57582843186eb02b373a9eb98f7fd2b84961875"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "b8feb7feda398dd297d55c9875bd9f5a59752e24", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed71e32e1440765d3e133e9892d59ca130477cec/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed71e32e1440765d3e133e9892d59ca130477cec/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=ed71e32e1440765d3e133e9892d59ca130477cec", "patch": "@@ -349,11 +349,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n     ) -> InterpResult<'tcx, Option<(AllocId, Size, M::ProvenanceExtra)>> {\n-        let align = M::enforce_alignment(&self).then_some(align);\n         self.check_and_deref_ptr(\n             ptr,\n             size,\n             align,\n+            M::enforce_alignment(self),\n             CheckInAllocMsg::MemoryAccessTest,\n             |alloc_id, offset, prov| {\n                 let (size, align) = self.get_live_alloc_size_and_align(alloc_id)?;\n@@ -373,10 +373,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         align: Align,\n         msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx> {\n-        self.check_and_deref_ptr(ptr, size, Some(align), msg, |alloc_id, _, _| {\n-            let (size, align) = self.get_live_alloc_size_and_align(alloc_id)?;\n-            Ok((size, align, ()))\n-        })?;\n+        self.check_and_deref_ptr(\n+            ptr,\n+            size,\n+            align,\n+            /* force_alignment_check */ true,\n+            msg,\n+            |alloc_id, _, _| {\n+                let (size, align) = self.get_live_alloc_size_and_align(alloc_id)?;\n+                Ok((size, align, ()))\n+            },\n+        )?;\n         Ok(())\n     }\n \n@@ -388,7 +395,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         ptr: Pointer<Option<M::Provenance>>,\n         size: Size,\n-        align: Option<Align>,\n+        align: Align,\n+        force_alignment_check: bool,\n         msg: CheckInAllocMsg,\n         alloc_size: impl FnOnce(\n             AllocId,\n@@ -417,7 +425,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     throw_ub!(DanglingIntPointer(addr, msg));\n                 }\n                 // Must be aligned.\n-                if let Some(align) = align {\n+                if force_alignment_check {\n                     check_offset_align(addr, align)?;\n                 }\n                 None\n@@ -441,7 +449,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n-                if let Some(align) = align {\n+                if force_alignment_check {\n                     if M::use_addr_for_alignment_check(self) {\n                         // `use_addr_for_alignment_check` can only be true if `OFFSET_IS_ADDR` is true.\n                         check_offset_align(ptr.addr().bytes(), align)?;\n@@ -560,11 +568,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n     ) -> InterpResult<'tcx, Option<AllocRef<'a, 'tcx, M::Provenance, M::AllocExtra>>> {\n-        let align = M::enforce_alignment(self).then_some(align);\n         let ptr_and_alloc = self.check_and_deref_ptr(\n             ptr,\n             size,\n             align,\n+            M::enforce_alignment(self),\n             CheckInAllocMsg::MemoryAccessTest,\n             |alloc_id, offset, prov| {\n                 let alloc = self.get_alloc_raw(alloc_id)?;"}]}