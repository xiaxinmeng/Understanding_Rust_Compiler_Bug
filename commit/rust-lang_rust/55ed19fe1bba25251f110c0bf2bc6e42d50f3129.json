{"sha": "55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZWQxOWZlMWJiYTI1MjUxZjExMGMwYmYyYmM2ZTQyZDUwZjMxMjk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-31T18:48:13Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T09:15:35Z"}, "message": "rustc: make LocalDefId's index field public like DefId's is.", "tree": {"sha": "cbac40c11d90ce3206708bf7313221039aa5d5d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbac40c11d90ce3206708bf7313221039aa5d5d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "html_url": "https://github.com/rust-lang/rust/commit/55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1762fdad12cd2577da0f3b0794c875648adde59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1762fdad12cd2577da0f3b0794c875648adde59", "html_url": "https://github.com/rust-lang/rust/commit/e1762fdad12cd2577da0f3b0794c875648adde59"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "636044069e4d6630f3ee71071720fb24b8210d6a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "patch": "@@ -263,7 +263,7 @@ impl<'hir> Map<'hir> {\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n-        self.tcx.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n+        self.tcx.definitions.def_index_to_hir_id(def_id.local_def_index)\n     }\n \n     pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {"}, {"sha": "9f5197f3db68720c3adc8898011eb34db93ee34d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "patch": "@@ -735,7 +735,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n                 let var_owner_def_id =\n                     DefId { krate: local_id_root.krate, index: var_path.hir_id.owner };\n                 let closure_def_id =\n-                    DefId { krate: local_id_root.krate, index: closure_expr_id.to_def_id().index };\n+                    DefId { krate: local_id_root.krate, index: closure_expr_id.local_def_index };\n                 (\n                     hcx.def_path_hash(var_owner_def_id),\n                     var_path.hir_id.local_id,"}, {"sha": "c96807b528b6225be539c02492973638e01778c7", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "patch": "@@ -24,7 +24,7 @@ impl HirId {\n     }\n \n     pub fn owner_local_def_id(self) -> LocalDefId {\n-        LocalDefId::from_def_id(DefId::local(self.owner))\n+        LocalDefId { local_def_index: self.owner }\n     }\n }\n "}, {"sha": "413e747e03392dc2c5852a62dde498f03fb4b7c3", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ed19fe1bba25251f110c0bf2bc6e42d50f3129/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "patch": "@@ -211,18 +211,20 @@ rustc_data_structures::define_id_collections!(DefIdMap, DefIdSet, DefId);\n /// and a DefId from a different crate would signify a bug somewhere. This\n /// is when LocalDefId comes in handy.\n #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct LocalDefId(DefIndex);\n+pub struct LocalDefId {\n+    pub local_def_index: DefIndex,\n+}\n \n impl LocalDefId {\n     #[inline]\n     pub fn from_def_id(def_id: DefId) -> LocalDefId {\n         assert!(def_id.is_local());\n-        LocalDefId(def_id.index)\n+        LocalDefId { local_def_index: def_id.index }\n     }\n \n     #[inline]\n     pub fn to_def_id(self) -> DefId {\n-        DefId { krate: LOCAL_CRATE, index: self.0 }\n+        DefId { krate: LOCAL_CRATE, index: self.local_def_index }\n     }\n }\n "}]}