{"sha": "5028fd8ab9bda648840bb48e03e618f027cc8c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMjhmZDhhYjliZGE2NDg4NDBiYjQ4ZTAzZTYxOGYwMjdjYzhjODU=", "commit": {"author": {"name": "Robert Bamler", "email": "robamler@users.noreply.github.com", "date": "2019-11-20T03:57:03Z"}, "committer": {"name": "Robert Bamler", "email": "robert.bamler@gmail.com", "date": "2019-11-22T07:16:44Z"}, "message": "Document pitfall with `impl PartialEq<B> for A`\n\nFixes #66476 by turning the violating example into an explicit\ncounterexample.", "tree": {"sha": "b6ff1ab958c2c6582edf1ee4348a4bd50ae0e5e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ff1ab958c2c6582edf1ee4348a4bd50ae0e5e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5028fd8ab9bda648840bb48e03e618f027cc8c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5028fd8ab9bda648840bb48e03e618f027cc8c85", "html_url": "https://github.com/rust-lang/rust/commit/5028fd8ab9bda648840bb48e03e618f027cc8c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5028fd8ab9bda648840bb48e03e618f027cc8c85/comments", "author": {"login": "robamler", "id": 1719283, "node_id": "MDQ6VXNlcjE3MTkyODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1719283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robamler", "html_url": "https://github.com/robamler", "followers_url": "https://api.github.com/users/robamler/followers", "following_url": "https://api.github.com/users/robamler/following{/other_user}", "gists_url": "https://api.github.com/users/robamler/gists{/gist_id}", "starred_url": "https://api.github.com/users/robamler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robamler/subscriptions", "organizations_url": "https://api.github.com/users/robamler/orgs", "repos_url": "https://api.github.com/users/robamler/repos", "events_url": "https://api.github.com/users/robamler/events{/privacy}", "received_events_url": "https://api.github.com/users/robamler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robamler", "id": 1719283, "node_id": "MDQ6VXNlcjE3MTkyODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1719283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robamler", "html_url": "https://github.com/robamler", "followers_url": "https://api.github.com/users/robamler/followers", "following_url": "https://api.github.com/users/robamler/following{/other_user}", "gists_url": "https://api.github.com/users/robamler/gists{/gist_id}", "starred_url": "https://api.github.com/users/robamler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robamler/subscriptions", "organizations_url": "https://api.github.com/users/robamler/orgs", "repos_url": "https://api.github.com/users/robamler/repos", "events_url": "https://api.github.com/users/robamler/events{/privacy}", "received_events_url": "https://api.github.com/users/robamler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8", "html_url": "https://github.com/rust-lang/rust/commit/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "1fb3e89a42f9aff30d259abaafacc0562df17a41", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5028fd8ab9bda648840bb48e03e618f027cc8c85/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5028fd8ab9bda648840bb48e03e618f027cc8c85/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5028fd8ab9bda648840bb48e03e618f027cc8c85", "patch": "@@ -135,17 +135,23 @@ use self::Ordering::*;\n /// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n /// we allow `BookFormat`s to be compared with `Book`s.\n ///\n-/// You can also combine these implementations to let the `==` operator work with\n-/// two different types:\n-///\n-/// ```\n+/// A comparison like the one above, which ignores some fields of the struct,\n+/// can be dangerous. It can easily lead to an unintended violation of the\n+/// requirements for a partial equivalence relation. For example, if we kept\n+/// the above implementation of `PartialEq<Book>` for `BookFormat` and added an\n+/// implementation of `PartialEq<Book>` for `Book` (either via a `#[derive]` or\n+/// via the manual implementation from the first example) then the result would\n+/// violate transitivity:\n+///\n+/// ```should_panic\n /// #[derive(PartialEq)]\n /// enum BookFormat {\n ///     Paperback,\n ///     Hardback,\n ///     Ebook,\n /// }\n ///\n+/// #[derive(PartialEq)]\n /// struct Book {\n ///     isbn: i32,\n ///     format: BookFormat,\n@@ -163,18 +169,16 @@ use self::Ordering::*;\n ///     }\n /// }\n ///\n-/// impl PartialEq for Book {\n-///     fn eq(&self, other: &Book) -> bool {\n-///         self.isbn == other.isbn\n-///     }\n-/// }\n+/// fn main() {\n+///     let b1 = Book { isbn: 1, format: BookFormat::Paperback };\n+///     let b2 = Book { isbn: 2, format: BookFormat::Paperback };\n ///\n-/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n-/// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n+///     assert!(b1 == BookFormat::Paperback);\n+///     assert!(BookFormat::Paperback == b2);\n ///\n-/// assert!(b1 == BookFormat::Paperback);\n-/// assert!(BookFormat::Ebook != b1);\n-/// assert!(b1 == b2);\n+///     // The following should hold by transitivity but doesn't.\n+///     assert!(b1 == b2); // <-- PANICS\n+/// }\n /// ```\n ///\n /// # Examples"}]}