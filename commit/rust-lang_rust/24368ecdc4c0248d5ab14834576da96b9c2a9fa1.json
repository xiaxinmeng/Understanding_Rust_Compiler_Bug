{"sha": "24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "node_id": "C_kwDOAAsO6NoAKDI0MzY4ZWNkYzRjMDI0OGQ1YWIxNDgzNDU3NmRhOTZiOWMyYTlmYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T23:27:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T23:27:53Z"}, "message": "Auto merge of #105849 - matthiaskrgr:rollup-ya4s1n2, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #104854 (Symlink `build/host` -> `build/$HOST_TRIPLE`)\n - #105458 (Allow blocking `Command::output`)\n - #105559 (bootstrap: Allow installing `llvm-tools`)\n - #105789 (rustdoc: clean up margin CSS for scraped examples)\n - #105792 (docs: add long error explanation for error E0320)\n - #105814 (Support call and drop terminators in custom mir)\n - #105829 (Speed up tidy)\n - #105836 (std::fmt: Use args directly in example code)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d9098ad8ff8368e0096cee39bfff794fdbbeb397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9098ad8ff8368e0096cee39bfff794fdbbeb397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "html_url": "https://github.com/rust-lang/rust/commit/24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc", "html_url": "https://github.com/rust-lang/rust/commit/0468a00ae3fd6ef1a6a0f9eaf637d7aa9e604acc"}, {"sha": "8fc1a72e563582aa4f132f73b30cf049055a03c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc1a72e563582aa4f132f73b30cf049055a03c2", "html_url": "https://github.com/rust-lang/rust/commit/8fc1a72e563582aa4f132f73b30cf049055a03c2"}], "stats": {"total": 531, "additions": 476, "deletions": 55}, "files": [{"sha": "67c512e98d68d6902e654b8a113f124b1ad657b2", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -163,6 +163,7 @@ E0311: include_str!(\"./error_codes/E0311.md\"),\n E0312: include_str!(\"./error_codes/E0312.md\"),\n E0316: include_str!(\"./error_codes/E0316.md\"),\n E0317: include_str!(\"./error_codes/E0317.md\"),\n+E0320: include_str!(\"./error_codes/E0320.md\"),\n E0321: include_str!(\"./error_codes/E0321.md\"),\n E0322: include_str!(\"./error_codes/E0322.md\"),\n E0323: include_str!(\"./error_codes/E0323.md\"),\n@@ -575,7 +576,6 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0314, // closure outlives stack frame\n //  E0315, // cannot invoke closure outside of its lifetime\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n-    E0320, // recursive overflow during dropck\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition"}, {"sha": "e6e1b7c19a566fe8a512ff2e4bdaf88db9fb7671", "filename": "compiler/rustc_error_codes/src/error_codes/E0320.md", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0320.md", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0320.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0320.md?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -0,0 +1,27 @@\n+Recursion limit reached while creating drop-check rules.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0320\n+enum A<T> {\n+    B,\n+    C(T, Box<A<(T, T)>>)\n+}\n+\n+fn foo<T>() {\n+    A::<T>::B; // error: overflow while adding drop-check rules for A<T>\n+}\n+```\n+\n+The Rust compiler must be able to reason about how a type is [`Drop`]ped, and\n+by extension the types of its fields, to be able to generate the glue to\n+properly drop a value. The code example above shows a type where this inference\n+is impossible because it is recursive. Note that this is *not* the same as\n+[E0072](E0072.html), where a type has an infinite size; the type here has a\n+finite size but any attempt to `Drop` it would recurse infinitely. For more\n+information, read [the `Drop` docs](../std/ops/trait.Drop.html).\n+\n+It is not possible to define a type with recursive drop-check rules. All such\n+recursion must be removed.\n+\n+[`Drop`]: ../std/ops/trait.Drop.html"}, {"sha": "ecc3e4de8d1da46f035b96b4b0174d127c9e6b68", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -42,6 +42,29 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             @call(\"mir_goto\", args) => {\n                 Ok(TerminatorKind::Goto { target: self.parse_block(args[0])? } )\n             },\n+            @call(\"mir_unreachable\", _args) => {\n+                Ok(TerminatorKind::Unreachable)\n+            },\n+            @call(\"mir_drop\", args) => {\n+                Ok(TerminatorKind::Drop {\n+                    place: self.parse_place(args[0])?,\n+                    target: self.parse_block(args[1])?,\n+                    unwind: None,\n+                })\n+            },\n+            @call(\"mir_drop_and_replace\", args) => {\n+                Ok(TerminatorKind::DropAndReplace {\n+                    place: self.parse_place(args[0])?,\n+                    value: self.parse_operand(args[1])?,\n+                    target: self.parse_block(args[2])?,\n+                    unwind: None,\n+                })\n+            },\n+            @call(\"mir_call\", args) => {\n+                let destination = self.parse_place(args[0])?;\n+                let target = self.parse_block(args[1])?;\n+                self.parse_call(args[2], destination, target)\n+            },\n             ExprKind::Match { scrutinee, arms } => {\n                 let discr = self.parse_operand(*scrutinee)?;\n                 self.parse_match(arms, expr.span).map(|t| TerminatorKind::SwitchInt { discr, targets: t })\n@@ -86,6 +109,32 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n         Ok(SwitchTargets::new(values.into_iter().zip(targets), otherwise))\n     }\n \n+    fn parse_call(\n+        &self,\n+        expr_id: ExprId,\n+        destination: Place<'tcx>,\n+        target: BasicBlock,\n+    ) -> PResult<TerminatorKind<'tcx>> {\n+        parse_by_kind!(self, expr_id, _, \"function call\",\n+            ExprKind::Call { fun, args, from_hir_call, fn_span, .. } => {\n+                let fun = self.parse_operand(*fun)?;\n+                let args = args\n+                    .iter()\n+                    .map(|arg| self.parse_operand(*arg))\n+                    .collect::<PResult<Vec<_>>>()?;\n+                Ok(TerminatorKind::Call {\n+                    func: fun,\n+                    args,\n+                    destination,\n+                    target: Some(target),\n+                    cleanup: None,\n+                    from_hir_call: *from_hir_call,\n+                    fn_span: *fn_span,\n+                })\n+            },\n+        )\n+    }\n+\n     fn parse_rvalue(&self, expr_id: ExprId) -> PResult<Rvalue<'tcx>> {\n         parse_by_kind!(self, expr_id, _, \"rvalue\",\n             @call(\"mir_discriminant\", args) => self.parse_place(args[0]).map(Rvalue::Discriminant),"}, {"sha": "eadb35cb96d422cfcdc84250b820b7cef65ea54c", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -419,7 +419,7 @@\n //!         // documentation for details, and the function `pad` can be used\n //!         // to pad strings.\n //!         let decimals = f.precision().unwrap_or(3);\n-//!         let string = format!(\"{:.*}\", decimals, magnitude);\n+//!         let string = format!(\"{magnitude:.decimals$}\");\n //!         f.pad_integral(true, \"\", &string)\n //!     }\n //! }\n@@ -518,7 +518,7 @@\n //! write!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));\n //!\n //! fn my_fmt_fn(args: fmt::Arguments) {\n-//!     write!(&mut io::stdout(), \"{}\", args);\n+//!     write!(&mut io::stdout(), \"{args}\");\n //! }\n //! my_fmt_fn(format_args!(\", or a {} too\", \"function\"));\n //! ```"}, {"sha": "e08a15571fcbed0f74ccc42144202c8addfac029", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -44,7 +44,8 @@\n //! if you want your MIR to be modified by the full MIR pipeline, or `#![custom_mir(dialect =\n //! \"runtime\", phase = \"optimized\")] if you don't.\n //!\n-//! [dialect docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.MirPhase.html\n+//! [dialect docs]:\n+//!     https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.MirPhase.html\n //!\n //! The input to the [`mir!`] macro is:\n //!\n@@ -99,6 +100,30 @@\n //!         Return()\n //!     })\n //! }\n+//!\n+//! #[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+//! fn push_and_pop<T>(v: &mut Vec<T>, value: T) {\n+//!     mir!(\n+//!         let unused;\n+//!         let popped;\n+//!\n+//!         {\n+//!             Call(unused, pop, Vec::push(v, value))\n+//!         }\n+//!\n+//!         pop = {\n+//!             Call(popped, drop, Vec::pop(v))\n+//!         }\n+//!\n+//!         drop = {\n+//!             Drop(popped, ret)\n+//!         }\n+//!\n+//!         ret = {\n+//!             Return()\n+//!         }\n+//!     )\n+//! }\n //! ```\n //!\n //! We can also set off compilation failures that happen in sufficiently late stages of the\n@@ -195,10 +220,16 @@\n //!\n //! #### Terminators\n //!\n-//!  - [`Goto`] and [`Return`] have associated functions.\n+//! Custom MIR does not currently support cleanup blocks or non-trivial unwind paths. As such, there\n+//! are no resume and abort terminators, and terminators that might unwind do not have any way to\n+//! indicate the unwind block.\n+//!\n+//!  - [`Goto`], [`Return`], [`Unreachable`], [`Drop`](Drop()), and [`DropAndReplace`] have associated functions.\n //!  - `match some_int_operand` becomes a `SwitchInt`. Each arm should be `literal => basic_block`\n //!     - The exception is the last arm, which must be `_ => basic_block` and corresponds to the\n //!       otherwise branch.\n+//!  - [`Call`] has an associated function as well. The third argument of this function is a normal\n+//!    function call expresion, for example `my_other_function(a, 5)`.\n //!\n \n #![unstable(\n@@ -223,6 +254,10 @@ macro_rules! define {\n \n define!(\"mir_return\", fn Return() -> BasicBlock);\n define!(\"mir_goto\", fn Goto(destination: BasicBlock) -> BasicBlock);\n+define!(\"mir_unreachable\", fn Unreachable() -> BasicBlock);\n+define!(\"mir_drop\", fn Drop<T>(place: T, goto: BasicBlock));\n+define!(\"mir_drop_and_replace\", fn DropAndReplace<T>(place: T, value: T, goto: BasicBlock));\n+define!(\"mir_call\", fn Call<T>(place: T, goto: BasicBlock, call: T));\n define!(\"mir_retag\", fn Retag<T>(place: T));\n define!(\"mir_retag_raw\", fn RetagRaw<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);"}, {"sha": "17aff342c1599455b2160b43b456bdb8f752246e", "filename": "library/std/src/process.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -362,6 +362,10 @@ impl Read for ChildStdout {\n     fn is_read_vectored(&self) -> bool {\n         self.inner.is_read_vectored()\n     }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n }\n \n impl AsInner<AnonPipe> for ChildStdout {\n@@ -907,10 +911,8 @@ impl Command {\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn output(&mut self) -> io::Result<Output> {\n-        self.inner\n-            .spawn(imp::Stdio::MakePipe, false)\n-            .map(Child::from_inner)\n-            .and_then(|p| p.wait_with_output())\n+        let (status, stdout, stderr) = self.inner.output()?;\n+        Ok(Output { status: ExitStatus(status), stdout, stderr })\n     }\n \n     /// Executes a command as a child process, waiting for it to finish and"}, {"sha": "a744d0ab6404334e2b43512a5b81b9283a687a84", "filename": "library/std/src/sys/unix/pipe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -58,6 +58,10 @@ impl AnonPipe {\n         self.0.is_read_vectored()\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0.read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "4c99d758c93a3156e1ccfafe6252443c4f4468b5", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -35,6 +35,11 @@ impl Command {\n         Ok((Process { handle: Handle::new(process_handle) }, ours))\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     pub fn exec(&mut self, default: Stdio) -> io::Error {\n         if self.saw_nul() {\n             return io::const_io_error!("}, {"sha": "39d1c8b1d8ebc75d0da500c882e4683bd167ba40", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -133,6 +133,11 @@ impl Command {\n         }\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     // Attempts to fork the process. If successful, returns Ok((0, -1))\n     // in the child, and Ok((child_pid, -1)) in the parent.\n     #[cfg(not(target_os = \"linux\"))]"}, {"sha": "f28ca58d02038ade1af035abc4f7abc627455b0d", "filename": "library/std/src/sys/unix/process/process_unsupported.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -20,6 +20,10 @@ impl Command {\n         unsupported()\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        unsupported()\n+    }\n+\n     pub fn exec(&mut self, _default: Stdio) -> io::Error {\n         unsupported_err()\n     }"}, {"sha": "f549d37c301165fad9019ca014f5770398cdcf5c", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -108,6 +108,11 @@ impl Command {\n         }\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     pub fn exec(&mut self, default: Stdio) -> io::Error {\n         let ret = Command::spawn(self, default, false);\n         match ret {"}, {"sha": "0bba673b458cb690011d413db588dffb9bde88c1", "filename": "library/std/src/sys/unsupported/pipe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -15,6 +15,10 @@ impl AnonPipe {\n         self.0\n     }\n \n+    pub fn read_to_end(&self, _buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         self.0\n     }"}, {"sha": "a494f2d6b4c1529314c3a2a4b91184d9d6fa1697", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -75,6 +75,10 @@ impl Command {\n     ) -> io::Result<(Process, StdioPipes)> {\n         unsupported()\n     }\n+\n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        unsupported()\n+    }\n }\n \n impl From<AnonPipe> for Stdio {"}, {"sha": "7b25edaa556f082e211cf0f90ad07ba67181d29f", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -1,7 +1,7 @@\n use crate::os::windows::prelude::*;\n \n use crate::ffi::OsStr;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, IoSlice, IoSliceMut, Read};\n use crate::mem;\n use crate::path::Path;\n use crate::ptr;\n@@ -261,6 +261,10 @@ impl AnonPipe {\n         self.inner.is_read_vectored()\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.handle().read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         unsafe {\n             let len = crate::cmp::min(buf.len(), c::DWORD::MAX as usize) as c::DWORD;"}, {"sha": "10bc949e1f45faf7c167e66e6b5c61a4c2aae980", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -351,6 +351,11 @@ impl Command {\n             ))\n         }\n     }\n+\n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n }\n \n impl fmt::Debug for Command {"}, {"sha": "ae11412067b549a719ec243442bd2beb7606c270", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -4,7 +4,9 @@\n use crate::collections::BTreeMap;\n use crate::env;\n use crate::ffi::{OsStr, OsString};\n-use crate::sys::process::EnvKey;\n+use crate::io;\n+use crate::sys::pipe::read2;\n+use crate::sys::process::{EnvKey, ExitStatus, Process, StdioPipes};\n \n // Stores a set of changes to an environment\n #[derive(Clone, Debug)]\n@@ -117,3 +119,30 @@ impl<'a> ExactSizeIterator for CommandEnvs<'a> {\n         self.iter.is_empty()\n     }\n }\n+\n+pub fn wait_with_output(\n+    mut process: Process,\n+    mut pipes: StdioPipes,\n+) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+    drop(pipes.stdin.take());\n+\n+    let (mut stdout, mut stderr) = (Vec::new(), Vec::new());\n+    match (pipes.stdout.take(), pipes.stderr.take()) {\n+        (None, None) => {}\n+        (Some(out), None) => {\n+            let res = out.read_to_end(&mut stdout);\n+            res.unwrap();\n+        }\n+        (None, Some(err)) => {\n+            let res = err.read_to_end(&mut stderr);\n+            res.unwrap();\n+        }\n+        (Some(out), Some(err)) => {\n+            let res = read2(out, &mut stdout, err, &mut stderr);\n+            res.unwrap();\n+        }\n+    }\n+\n+    let status = process.wait()?;\n+    Ok((status, stdout, stderr))\n+}"}, {"sha": "3f551dc119b5d5ef6730dd343abca2c739555754", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -744,6 +744,7 @@ impl<'a> Builder<'a> {\n                 install::RustDemangler,\n                 install::Clippy,\n                 install::Miri,\n+                install::LlvmTools,\n                 install::Analysis,\n                 install::Src,\n                 install::Rustc"}, {"sha": "b2f6afead798088e12ae27425b354540ea6c302b", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -8,7 +8,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::sync::mpsc::SyncSender;\n \n-fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl FnMut() {\n+fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl FnMut(bool) -> bool {\n     let mut cmd = Command::new(&rustfmt);\n     // avoid the submodule config paths from coming into play,\n     // we only allow a single global config for the workspace for now\n@@ -23,7 +23,13 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n     let cmd_debug = format!(\"{:?}\", cmd);\n     let mut cmd = cmd.spawn().expect(\"running rustfmt\");\n     // poor man's async: return a closure that'll wait for rustfmt's completion\n-    move || {\n+    move |block: bool| -> bool {\n+        if !block {\n+            match cmd.try_wait() {\n+                Ok(Some(_)) => {}\n+                _ => return false,\n+            }\n+        }\n         let status = cmd.wait().unwrap();\n         if !status.success() {\n             eprintln!(\n@@ -34,6 +40,7 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n             );\n             crate::detail_exit(1);\n         }\n+        true\n     }\n }\n \n@@ -146,15 +153,23 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n             let child = rustfmt(&src, &rustfmt_path, paths.as_slice(), check);\n             children.push_back(child);\n \n+            // poll completion before waiting\n+            for i in (0..children.len()).rev() {\n+                if children[i](false) {\n+                    children.swap_remove_back(i);\n+                    break;\n+                }\n+            }\n+\n             if children.len() >= max_processes {\n                 // await oldest child\n-                children.pop_front().unwrap()();\n+                children.pop_front().unwrap()(true);\n             }\n         }\n \n         // await remaining children\n         for mut child in children {\n-            child();\n+            child(true);\n         }\n     });\n "}, {"sha": "c53d0d7e4cb7c03964ec1f2364c6a7a2600cadfa", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -205,6 +205,12 @@ install!((self, builder, _config),\n             .expect(\"missing miri\");\n         install_sh(builder, \"miri\", self.compiler.stage, Some(self.target), &tarball);\n     };\n+    LlvmTools, alias = \"llvm-tools\", Self::should_build(_config), only_hosts: true, {\n+        let tarball = builder\n+            .ensure(dist::LlvmTools { target: self.target })\n+            .expect(\"missing llvm-tools\");\n+        install_sh(builder, \"llvm-tools\", self.compiler.stage, Some(self.target), &tarball);\n+    };\n     Rustfmt, alias = \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if let Some(tarball) = builder.ensure(dist::Rustfmt {\n             compiler: self.compiler,"}, {"sha": "f0c9a948727f0f2c15316636bc46bd96f5e61597", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -108,6 +108,7 @@ use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs::{self, File};\n use std::io;\n+use std::io::ErrorKind;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n@@ -119,7 +120,9 @@ use once_cell::sync::OnceCell;\n \n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n-use crate::util::{exe, libdir, mtime, output, run, run_suppressed, try_run_suppressed, CiEnv};\n+use crate::util::{\n+    exe, libdir, mtime, output, run, run_suppressed, symlink_dir, try_run_suppressed, CiEnv,\n+};\n \n mod bolt;\n mod builder;\n@@ -586,6 +589,20 @@ impl Build {\n             metadata::build(&mut build);\n         }\n \n+        // Make a symbolic link so we can use a consistent directory in the documentation.\n+        let build_triple = build.out.join(&build.build.triple);\n+        let host = build.out.join(\"host\");\n+        if let Err(e) = symlink_dir(&build.config, &build_triple, &host) {\n+            if e.kind() != ErrorKind::AlreadyExists {\n+                panic!(\n+                    \"symlink_dir({} => {}) failed with {}\",\n+                    host.display(),\n+                    build_triple.display(),\n+                    e\n+                );\n+            }\n+        }\n+\n         build\n     }\n "}, {"sha": "022ed606cc3b8b96718361ef59effac37de2fe56", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -2003,7 +2003,6 @@ in storage.js\n \n .more-examples-toggle .hide-more {\n \tmargin-left: 25px;\n-\tmargin-bottom: 5px;\n \tcursor: pointer;\n }\n \n@@ -2031,16 +2030,12 @@ in storage.js\n \theight: 100%;\n }\n \n-.more-scraped-examples .scraped-example {\n-\tmargin-bottom: 20px;\n-}\n-\n-.more-scraped-examples .scraped-example:last-child {\n-\tmargin-bottom: 0;\n+.more-scraped-examples .scraped-example, .example-links {\n+\tmargin-top: 20px;\n }\n \n-.example-links a {\n-\tmargin-top: 20px;\n+.more-scraped-examples .scraped-example:first-child {\n+\tmargin-top: 5px;\n }\n \n .example-links ul {"}, {"sha": "a1a27226b4e9210b1559c349c8c7527bb15e9946", "filename": "src/test/mir-opt/building/custom/terminators.assert_nonzero.built.after.mir", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -0,0 +1,17 @@\n+// MIR for `assert_nonzero` after built\n+\n+fn assert_nonzero(_1: i32) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:27: +0:27\n+\n+    bb0: {\n+        switchInt(_1) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/terminators.rs:+3:13: +6:14\n+    }\n+\n+    bb1: {\n+        unreachable;                     // scope 0 at $DIR/terminators.rs:+10:13: +10:26\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+14:13: +14:21\n+    }\n+}"}, {"sha": "1b2345a965ed020a4e4750743139fe1751362ede", "filename": "src/test/mir-opt/building/custom/terminators.direct_call.built.after.mir", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -0,0 +1,16 @@\n+// MIR for `direct_call` after built\n+\n+fn direct_call(_1: i32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/terminators.rs:+0:27: +0:30\n+\n+    bb0: {\n+        _0 = ident::<i32>(_1) -> bb1;    // scope 0 at $DIR/terminators.rs:+3:13: +3:42\n+                                         // mir::Constant\n+                                         // + span: $DIR/terminators.rs:15:33: 15:38\n+                                         // + literal: Const { ty: fn(i32) -> i32 {ident::<i32>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+    }\n+}"}, {"sha": "c903e5946961b7b51bda4628b62ef4f6796baca7", "filename": "src/test/mir-opt/building/custom/terminators.drop_first.built.after.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `drop_first` after built\n+\n+fn drop_first(_1: WriteOnDrop<'_>, _2: WriteOnDrop<'_>) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:59: +0:59\n+\n+    bb0: {\n+        replace(_1 <- move _2) -> bb1;   // scope 0 at $DIR/terminators.rs:+3:13: +3:49\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+    }\n+}"}, {"sha": "f14246f2d1206e07d01fb6437e419d61f9c8ed6c", "filename": "src/test/mir-opt/building/custom/terminators.drop_second.built.after.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `drop_second` after built\n+\n+fn drop_second(_1: WriteOnDrop<'_>, _2: WriteOnDrop<'_>) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:60: +0:60\n+\n+    bb0: {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/terminators.rs:+3:13: +3:30\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+    }\n+}"}, {"sha": "2f1b14069abe06a124aee230e203decae4b88c55", "filename": "src/test/mir-opt/building/custom/terminators.indirect_call.built.after.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `indirect_call` after built\n+\n+fn indirect_call(_1: i32, _2: fn(i32) -> i32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/terminators.rs:+0:48: +0:51\n+\n+    bb0: {\n+        _0 = _2(_1) -> bb1;              // scope 0 at $DIR/terminators.rs:+3:13: +3:38\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+    }\n+}"}, {"sha": "c23233fcf9aca05fa6531a1b327cc040f51f2be3", "filename": "src/test/mir-opt/building/custom/terminators.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -0,0 +1,108 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+fn ident<T>(t: T) -> T {\n+    t\n+}\n+\n+// EMIT_MIR terminators.direct_call.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn direct_call(x: i32) -> i32 {\n+    mir!(\n+        {\n+            Call(RET, retblock, ident(x))\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR terminators.indirect_call.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn indirect_call(x: i32, f: fn(i32) -> i32) -> i32 {\n+    mir!(\n+        {\n+            Call(RET, retblock, f(x))\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+struct WriteOnDrop<'a>(&'a mut i32, i32);\n+\n+impl<'a> Drop for WriteOnDrop<'a> {\n+    fn drop(&mut self) {\n+        *self.0 = self.1;\n+    }\n+}\n+\n+// EMIT_MIR terminators.drop_first.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn drop_first<'a>(a: WriteOnDrop<'a>, b: WriteOnDrop<'a>) {\n+    mir!(\n+        {\n+            DropAndReplace(a, Move(b), retblock)\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR terminators.drop_second.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn drop_second<'a>(a: WriteOnDrop<'a>, b: WriteOnDrop<'a>) {\n+    mir!(\n+        {\n+            Drop(b, retblock)\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR terminators.assert_nonzero.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn assert_nonzero(a: i32) {\n+    mir!(\n+        {\n+            match a {\n+                0 => unreachable,\n+                _ => retblock\n+            }\n+        }\n+\n+        unreachable = {\n+            Unreachable()\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(direct_call(5), 5);\n+    assert_eq!(indirect_call(5, ident), 5);\n+\n+    let mut a = 0;\n+    let mut b = 0;\n+    drop_first(WriteOnDrop(&mut a, 1), WriteOnDrop(&mut b, 1));\n+    assert_eq!((a, b), (1, 0));\n+\n+    let mut a = 0;\n+    let mut b = 0;\n+    drop_second(WriteOnDrop(&mut a, 1), WriteOnDrop(&mut b, 1));\n+    assert_eq!((a, b), (0, 1));\n+}"}, {"sha": "3e39d15f9b0cd3e665c7ab133de94995f189314c", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.stderr?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -8,3 +8,4 @@ LL |     let ft =\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0320`."}, {"sha": "dbb74354471385a053ebb957dc187ca2064afea0", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.stderr?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -8,3 +8,4 @@ LL |     let ft =\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0320`."}, {"sha": "deaf116b647afe421a327ecc5c7472225f21a87c", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.stderr?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -16,3 +16,4 @@ LL |         Some(Wrapper::Simple::<u32>);\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0320`."}, {"sha": "002dfe115b03f2f343f624377170c706334ea1db", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -8,3 +8,4 @@ LL | fn f(x: S<u32>) {}\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0320`."}, {"sha": "6714c63ee62a143a923f84088101cc99ec1142d1", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -35,15 +35,26 @@ fn main() {\n \n     let bad = std::sync::Arc::new(AtomicBool::new(false));\n \n+    let drain_handles = |handles: &mut VecDeque<ScopedJoinHandle<'_, ()>>| {\n+        // poll all threads for completion before awaiting the oldest one\n+        for i in (0..handles.len()).rev() {\n+            if handles[i].is_finished() {\n+                handles.swap_remove_back(i).unwrap().join().unwrap();\n+            }\n+        }\n+\n+        while handles.len() >= concurrency.get() {\n+            handles.pop_front().unwrap().join().unwrap();\n+        }\n+    };\n+\n     scope(|s| {\n         let mut handles: VecDeque<ScopedJoinHandle<'_, ()>> =\n             VecDeque::with_capacity(concurrency.get());\n \n         macro_rules! check {\n             ($p:ident $(, $args:expr)* ) => {\n-                while handles.len() >= concurrency.get() {\n-                    handles.pop_front().unwrap().join().unwrap();\n-                }\n+                drain_handles(&mut handles);\n \n                 let handle = s.spawn(|| {\n                     let mut flag = false;\n@@ -97,9 +108,8 @@ fn main() {\n         check!(alphabetical, &library_path);\n \n         let collected = {\n-            while handles.len() >= concurrency.get() {\n-                handles.pop_front().unwrap().join().unwrap();\n-            }\n+            drain_handles(&mut handles);\n+\n             let mut flag = false;\n             let r = features::check(&src_path, &compiler_path, &library_path, &mut flag, verbose);\n             if flag {"}, {"sha": "f91e38262f64ff8fd1800c99b1cc10ec85856569", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24368ecdc4c0248d5ab14834576da96b9c2a9fa1/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=24368ecdc4c0248d5ab14834576da96b9c2a9fa1", "patch": "@@ -17,7 +17,7 @@\n //! `// ignore-tidy-CHECK-NAME`.\n \n use crate::walk::{filter_dirs, walk};\n-use regex::Regex;\n+use regex::{Regex, RegexSet};\n use std::path::Path;\n \n /// Error code markdown is restricted to 80 columns because they can be\n@@ -225,6 +225,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n+    let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n     walk(path, &mut skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n@@ -281,7 +282,27 @@ pub fn check(path: &Path, bad: &mut bool) {\n         let mut trailing_new_lines = 0;\n         let mut lines = 0;\n         let mut last_safety_comment = false;\n+        let is_test = file.components().any(|c| c.as_os_str() == \"tests\");\n+        // scanning the whole file for multiple needles at once is more efficient than\n+        // executing lines times needles separate searches.\n+        let any_problematic_line = problematic_regex.is_match(contents);\n         for (i, line) in contents.split('\\n').enumerate() {\n+            if line.is_empty() {\n+                if i == 0 {\n+                    leading_new_lines = true;\n+                }\n+                trailing_new_lines += 1;\n+                continue;\n+            } else {\n+                trailing_new_lines = 0;\n+            }\n+\n+            let trimmed = line.trim();\n+\n+            if !trimmed.starts_with(\"//\") {\n+                lines += 1;\n+            }\n+\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n@@ -308,36 +329,38 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 suppressible_tidy_err!(err, skip_cr, \"CR character\");\n             }\n             if filename != \"style.rs\" {\n-                if line.contains(\"TODO\") {\n+                if trimmed.contains(\"TODO\") {\n                     err(\"TODO is deprecated; use FIXME\")\n                 }\n-                if line.contains(\"//\") && line.contains(\" XXX\") {\n+                if trimmed.contains(\"//\") && trimmed.contains(\" XXX\") {\n                     err(\"XXX is deprecated; use FIXME\")\n                 }\n-                for s in problematic_consts_strings.iter() {\n-                    if line.contains(s) {\n-                        err(\"Don't use magic numbers that spell things (consider 0x12345678)\");\n+                if any_problematic_line {\n+                    for s in problematic_consts_strings.iter() {\n+                        if trimmed.contains(s) {\n+                            err(\"Don't use magic numbers that spell things (consider 0x12345678)\");\n+                        }\n                     }\n                 }\n             }\n-            let is_test = || file.components().any(|c| c.as_os_str() == \"tests\");\n             // for now we just check libcore\n-            if line.contains(\"unsafe {\") && !line.trim().starts_with(\"//\") && !last_safety_comment {\n-                if file.components().any(|c| c.as_os_str() == \"core\") && !is_test() {\n+            if trimmed.contains(\"unsafe {\") && !trimmed.starts_with(\"//\") && !last_safety_comment {\n+                if file.components().any(|c| c.as_os_str() == \"core\") && !is_test {\n                     suppressible_tidy_err!(err, skip_undocumented_unsafe, \"undocumented unsafe\");\n                 }\n             }\n-            if line.contains(\"// SAFETY:\") {\n+            if trimmed.contains(\"// SAFETY:\") {\n                 last_safety_comment = true;\n-            } else if line.trim().starts_with(\"//\") || line.trim().is_empty() {\n+            } else if trimmed.starts_with(\"//\") || trimmed.is_empty() {\n                 // keep previous value\n             } else {\n                 last_safety_comment = false;\n             }\n             if (line.starts_with(\"// Copyright\")\n                 || line.starts_with(\"# Copyright\")\n                 || line.starts_with(\"Copyright\"))\n-                && (line.contains(\"Rust Developers\") || line.contains(\"Rust Project Developers\"))\n+                && (trimmed.contains(\"Rust Developers\")\n+                    || trimmed.contains(\"Rust Project Developers\"))\n             {\n                 suppressible_tidy_err!(\n                     err,\n@@ -351,18 +374,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n             if filename.ends_with(\".cpp\") && line.contains(\"llvm_unreachable\") {\n                 err(LLVM_UNREACHABLE_INFO);\n             }\n-            if line.is_empty() {\n-                if i == 0 {\n-                    leading_new_lines = true;\n-                }\n-                trailing_new_lines += 1;\n-            } else {\n-                trailing_new_lines = 0;\n-            }\n-\n-            if !line.trim().starts_with(\"//\") {\n-                lines += 1;\n-            }\n         }\n         if leading_new_lines {\n             let mut err = |_| {"}]}