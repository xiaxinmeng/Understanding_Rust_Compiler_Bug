{"sha": "2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "node_id": "C_kwDOAAsO6NoAKDJjMjliMDVmYjI0MDk1YjBiYzJlNzkyZmZlZDNkZjc0OTZjYzJhNTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-15T00:40:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-15T00:40:44Z"}, "message": "Rollup merge of #104383 - WaffleLapkin:rustc_undiagnostic_item, r=compiler-errors\n\nRemove unused symbols and diagnostic items\n\nAs the title suggests, this removes unused symbols from `sym::` and `#[rustc_diagnostic_item]` annotations that weren't mentioned anywhere.\n\nOriginally I tried to use grep, to find symbols and item names that are never mentioned via `sym::name`, however this produced a lot of false positives (?), for example clippy matching on `Symbol::as_str` or macros \"implicitly\" adding `sym::`. I ended up fixing all these false positives (?) by hand, but tbh I'm not sure if it was worth it...", "tree": {"sha": "9d888bb5c6cd877858063b5d1c4dd888dee7918f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d888bb5c6cd877858063b5d1c4dd888dee7918f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcuAMCRBK7hj4Ov3rIwAA8v0IAIAY337A35rqJcBrk7gZeKU0\nfVwz6w3sJqQeObCf24WZC9ftcHx2YGrPlpU55chP1Mq2dour5IdVuB50ZwPWGaFG\n/BPxBEqL6lGvls//hmfaU/6cNoGr7Dkx4Sd1h7ne7LTJHopsOiOQHR7wLH3uoz0Q\npLfpdsjriYckD5e2suy37s9Y3egv/HIaeU8cXZdT381qB6rSYJiiQRMLsxYG8r1m\nN+k1ImdAGm2vfyzJbWt0ke3A6xgFRMAyl4Tx4iHW4wmjrDrzRD4evE04wYMAV2Jf\nHZ+ivXIlhkg7Z7k2EO9qULeR6fmoR6kXj7ylPz0kzW9CdrsI6pdfFLR/n+DL5J0=\n=zgyT\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d888bb5c6cd877858063b5d1c4dd888dee7918f\nparent 0a3cb1ed8138900e8697d42988ee41250c3d69ad\nparent 29fe28fcfc01f6b850744cc918dbc07a82978755\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668472844 +0100\ncommitter GitHub <noreply@github.com> 1668472844 +0100\n\nRollup merge of #104383 - WaffleLapkin:rustc_undiagnostic_item, r=compiler-errors\n\nRemove unused symbols and diagnostic items\n\nAs the title suggests, this removes unused symbols from `sym::` and `#[rustc_diagnostic_item]` annotations that weren't mentioned anywhere.\n\nOriginally I tried to use grep, to find symbols and item names that are never mentioned via `sym::name`, however this produced a lot of false positives (?), for example clippy matching on `Symbol::as_str` or macros \"implicitly\" adding `sym::`. I ended up fixing all these false positives (?) by hand, but tbh I'm not sure if it was worth it...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "html_url": "https://github.com/rust-lang/rust/commit/2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3cb1ed8138900e8697d42988ee41250c3d69ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3cb1ed8138900e8697d42988ee41250c3d69ad", "html_url": "https://github.com/rust-lang/rust/commit/0a3cb1ed8138900e8697d42988ee41250c3d69ad"}, {"sha": "29fe28fcfc01f6b850744cc918dbc07a82978755", "url": "https://api.github.com/repos/rust-lang/rust/commits/29fe28fcfc01f6b850744cc918dbc07a82978755", "html_url": "https://github.com/rust-lang/rust/commit/29fe28fcfc01f6b850744cc918dbc07a82978755"}], "stats": {"total": 86, "additions": 7, "deletions": 79}, "files": [{"sha": "bad6d58790708859b1e82fe95df0fd52ef73825f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "patch": "@@ -170,8 +170,6 @@ symbols! {\n         Count,\n         Cow,\n         Debug,\n-        DebugStruct,\n-        DebugTuple,\n         Decodable,\n         Decoder,\n         DecorateLint,\n@@ -190,9 +188,6 @@ symbols! {\n         Error,\n         File,\n         FileType,\n-        Fn,\n-        FnMut,\n-        FnOnce,\n         FormatSpec,\n         Formatter,\n         From,\n@@ -211,7 +206,6 @@ symbols! {\n         Input,\n         Into,\n         IntoDiagnostic,\n-        IntoFuture,\n         IntoIterator,\n         IoRead,\n         IoWrite,\n@@ -256,7 +250,6 @@ symbols! {\n         Pointer,\n         Poll,\n         ProcMacro,\n-        ProcMacroHack,\n         ProceduralMasqueradeDummyType,\n         Range,\n         RangeFrom,\n@@ -332,7 +325,6 @@ symbols! {\n         abi_vectorcall,\n         abi_x86_interrupt,\n         abort,\n-        aborts,\n         add,\n         add_assign,\n         add_with_overflow,\n@@ -344,7 +336,6 @@ symbols! {\n         align,\n         align_offset,\n         alignment,\n-        alignstack,\n         all,\n         alloc,\n         alloc_error_handler,\n@@ -433,7 +424,6 @@ symbols! {\n         bool,\n         borrowck_graphviz_format,\n         borrowck_graphviz_postflow,\n-        borrowck_graphviz_preflow,\n         box_free,\n         box_patterns,\n         box_syntax,\n@@ -462,15 +452,13 @@ symbols! {\n         cfg_doctest,\n         cfg_eval,\n         cfg_hide,\n-        cfg_macro,\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_abi,\n         cfg_target_compact,\n         cfg_target_feature,\n         cfg_target_has_atomic,\n         cfg_target_has_atomic_equal_alignment,\n-        cfg_target_has_atomic_load_store,\n         cfg_target_thread_local,\n         cfg_target_vendor,\n         cfg_version,\n@@ -495,19 +483,15 @@ symbols! {\n         cold,\n         collapse_debuginfo,\n         column,\n-        column_macro,\n-        compare_and_swap,\n         compare_exchange,\n         compare_exchange_weak,\n         compile_error,\n-        compile_error_macro,\n         compiler,\n         compiler_builtins,\n         compiler_fence,\n         concat,\n         concat_bytes,\n         concat_idents,\n-        concat_macro,\n         conservative_impl_trait,\n         console,\n         const_allocate,\n@@ -528,7 +512,6 @@ symbols! {\n         const_fn_unsize,\n         const_for,\n         const_format_args,\n-        const_generic_defaults,\n         const_generics,\n         const_generics_defaults,\n         const_if_match,\n@@ -547,22 +530,19 @@ symbols! {\n         const_trait,\n         const_trait_bound_opt_out,\n         const_trait_impl,\n-        const_transmute,\n         const_try,\n         constant,\n         constructor,\n-        contents,\n         context,\n-        convert,\n         copy,\n         copy_closures,\n         copy_nonoverlapping,\n         copysignf32,\n         copysignf64,\n         core,\n-        core_intrinsics,\n         core_panic,\n         core_panic_2015_macro,\n+        core_panic_2021_macro,\n         core_panic_macro,\n         cosf32,\n         cosf64,\n@@ -598,7 +578,6 @@ symbols! {\n         debug_assertions,\n         debug_struct,\n         debug_struct_fields_finish,\n-        debug_trait_builder,\n         debug_tuple,\n         debug_tuple_fields_finish,\n         debugger_visualizer,\n@@ -630,7 +609,6 @@ symbols! {\n         discriminant_type,\n         discriminant_value,\n         dispatch_from_dyn,\n-        display_trait,\n         div,\n         div_assign,\n         doc,\n@@ -661,7 +639,6 @@ symbols! {\n         dyn_star,\n         dyn_trait,\n         e,\n-        edition_macro_pats,\n         edition_panic,\n         eh_catch_typeinfo,\n         eh_personality,\n@@ -674,7 +651,6 @@ symbols! {\n         encode,\n         end,\n         env,\n-        env_macro,\n         eprint_macro,\n         eprintln_macro,\n         eq,\n@@ -724,9 +700,7 @@ symbols! {\n         field,\n         field_init_shorthand,\n         file,\n-        file_macro,\n         fill,\n-        finish,\n         flags,\n         float,\n         float_to_int_unchecked,\n@@ -735,8 +709,6 @@ symbols! {\n         fmaf32,\n         fmaf64,\n         fmt,\n-        fmt_as_str,\n-        fmt_internals,\n         fmul_fast,\n         fn_align,\n         fn_must_use,\n@@ -751,7 +723,6 @@ symbols! {\n         format_args_macro,\n         format_args_nl,\n         format_macro,\n-        fp,\n         freeze,\n         freg,\n         frem_fast,\n@@ -814,7 +785,6 @@ symbols! {\n         ignore,\n         impl_header_lifetime_elision,\n         impl_lint_pass,\n-        impl_macros,\n         impl_trait_in_bindings,\n         impl_trait_in_fn_trait_return,\n         implied_by,\n@@ -826,7 +796,6 @@ symbols! {\n         include,\n         include_bytes,\n         include_bytes_macro,\n-        include_macro,\n         include_str,\n         include_str_macro,\n         inclusive_range_syntax,\n@@ -844,7 +813,6 @@ symbols! {\n         instruction_set,\n         integer_: \"integer\",\n         integral,\n-        intel,\n         into_future,\n         into_iter,\n         intra_doc_pointers,\n@@ -881,7 +849,6 @@ symbols! {\n         lifetimes,\n         likely,\n         line,\n-        line_macro,\n         link,\n         link_args,\n         link_cfg,\n@@ -926,7 +893,6 @@ symbols! {\n         masked,\n         match_beginning_vert,\n         match_default_bindings,\n-        matches_macro,\n         maxnumf32,\n         maxnumf64,\n         may_dangle,\n@@ -965,7 +931,6 @@ symbols! {\n         modifiers,\n         module,\n         module_path,\n-        module_path_macro,\n         more_qualified_paths,\n         more_struct_aliases,\n         movbe_target_feature,\n@@ -1059,7 +1024,6 @@ symbols! {\n         optin_builtin_traits,\n         option,\n         option_env,\n-        option_env_macro,\n         options,\n         or,\n         or_patterns,\n@@ -1102,7 +1066,6 @@ symbols! {\n         plugins,\n         pointee_trait,\n         pointer,\n-        pointer_trait_fmt,\n         poll,\n         position,\n         post_dash_lto: \"post-lto\",\n@@ -1129,7 +1092,6 @@ symbols! {\n         proc_dash_macro: \"proc-macro\",\n         proc_macro,\n         proc_macro_attribute,\n-        proc_macro_def_site,\n         proc_macro_derive,\n         proc_macro_expr,\n         proc_macro_gen,\n@@ -1230,9 +1192,6 @@ symbols! {\n         rust_cold_cc,\n         rust_eh_catch_typeinfo,\n         rust_eh_personality,\n-        rust_eh_register_frames,\n-        rust_eh_unregister_frames,\n-        rust_oom,\n         rustc,\n         rustc_allocator,\n         rustc_allocator_zeroed,\n@@ -1305,7 +1264,6 @@ symbols! {\n         rustc_serialize,\n         rustc_skip_array_during_method_dispatch,\n         rustc_specialization_trait,\n-        rustc_stable,\n         rustc_std_internal_symbol,\n         rustc_strict_coherence,\n         rustc_symbol_name,\n@@ -1433,7 +1391,6 @@ symbols! {\n         static_recursion,\n         staticlib,\n         std,\n-        std_inject,\n         std_panic,\n         std_panic_2015_macro,\n         std_panic_macro,\n@@ -1448,7 +1405,6 @@ symbols! {\n         str_trim_start,\n         strict_provenance,\n         stringify,\n-        stringify_macro,\n         struct_field_attributes,\n         struct_inherit,\n         struct_variant,\n@@ -1476,10 +1432,8 @@ symbols! {\n         target_has_atomic_load_store,\n         target_os,\n         target_pointer_width,\n-        target_target_vendor,\n         target_thread_local,\n         target_vendor,\n-        task,\n         tbm_target_feature,\n         termination,\n         termination_trait,\n@@ -1491,7 +1445,6 @@ symbols! {\n         test_removed_feature,\n         test_runner,\n         test_unstable_lint,\n-        then_with,\n         thread,\n         thread_local,\n         thread_local_macro,\n@@ -1523,7 +1476,6 @@ symbols! {\n         try_trait_v2,\n         tt,\n         tuple,\n-        tuple_from_req,\n         tuple_indexing,\n         tuple_trait,\n         two_phase,\n@@ -1567,7 +1519,6 @@ symbols! {\n         unreachable_2015,\n         unreachable_2015_macro,\n         unreachable_2021,\n-        unreachable_2021_macro,\n         unreachable_code,\n         unreachable_display,\n         unreachable_macro,\n@@ -1586,7 +1537,6 @@ symbols! {\n                           from crates.io via `Cargo.toml` instead?\",\n         untagged_unions,\n         unused_imports,\n-        unused_qualifications,\n         unwind,\n         unwind_attributes,\n         unwind_safe_trait,"}, {"sha": "2adc968bd469276929609a7a50ceba0e544a1103", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "patch": "@@ -1054,7 +1054,6 @@ pub trait UpperHex {\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_diagnostic_item = \"pointer_trait_fmt\"]\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n "}, {"sha": "34247c058450851402a6160af94d653010fb8842", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "patch": "@@ -338,7 +338,6 @@ pub macro debug_assert_matches($($arg:tt)*) {\n /// ```\n #[macro_export]\n #[stable(feature = \"matches_macro\", since = \"1.42.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"matches_macro\")]\n macro_rules! matches {\n     ($expression:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => {\n         match $expression {\n@@ -820,7 +819,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"compile_error_macro\")]\n     macro_rules! compile_error {\n         ($msg:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -944,7 +942,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"env_macro\")]\n     macro_rules! env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($name:expr, $error_msg:expr $(,)?) => {{ /* compiler built-in */ }};\n@@ -973,7 +970,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"option_env_macro\")]\n     macro_rules! option_env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1058,7 +1054,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"concat_macro\")]\n     macro_rules! concat {\n         ($($e:expr),* $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1084,7 +1079,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"line_macro\")]\n     macro_rules! line {\n         () => {\n             /* compiler built-in */\n@@ -1124,7 +1118,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"column_macro\")]\n     macro_rules! column {\n         () => {\n             /* compiler built-in */\n@@ -1150,7 +1143,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"file_macro\")]\n     macro_rules! file {\n         () => {\n             /* compiler built-in */\n@@ -1175,7 +1167,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"stringify_macro\")]\n     macro_rules! stringify {\n         ($($t:tt)*) => {\n             /* compiler built-in */\n@@ -1282,7 +1273,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"module_path_macro\")]\n     macro_rules! module_path {\n         () => {\n             /* compiler built-in */\n@@ -1316,7 +1306,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"cfg_macro\")]\n     macro_rules! cfg {\n         ($($cfg:tt)*) => {\n             /* compiler built-in */\n@@ -1367,7 +1356,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_macro\")]\n     macro_rules! include {\n         ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }"}, {"sha": "127b047db9192510521f49fe0279cabe79a918c8", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "patch": "@@ -57,7 +57,6 @@ use crate::marker::Tuple;\n #[cfg(bootstrap)]\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"Fn\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -138,7 +137,6 @@ pub trait Fn<Args>: FnMut<Args> {\n #[cfg(not(bootstrap))]\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"Fn\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -227,7 +225,6 @@ pub trait Fn<Args: Tuple>: FnMut<Args> {\n #[cfg(bootstrap)]\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"FnMut\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -316,7 +313,6 @@ pub trait FnMut<Args>: FnOnce<Args> {\n #[cfg(not(bootstrap))]\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"FnMut\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -397,7 +393,6 @@ pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n #[cfg(bootstrap)]\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"FnOnce\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -483,7 +478,6 @@ pub trait FnOnce<Args> {\n #[cfg(not(bootstrap))]\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"FnOnce\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on("}, {"sha": "461b70c32f36e75016c15f505efb441147cb9cde", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "patch": "@@ -80,7 +80,6 @@ pub macro unreachable_2015 {\n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use unreachable!() instead\")]\n #[allow_internal_unstable(core_panic)]\n-#[rustc_diagnostic_item = \"unreachable_2021_macro\"]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro unreachable_2021 {\n     () => ("}, {"sha": "5453853e1381abacf285cb10cc786a4e26af4cb6", "filename": "library/std/src/net/ip_addr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fstd%2Fsrc%2Fnet%2Fip_addr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/library%2Fstd%2Fsrc%2Fnet%2Fip_addr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip_addr.rs?ref=2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "patch": "@@ -73,7 +73,6 @@ pub enum IpAddr {\n /// assert!(\"0xcb.0x0.0x71.0x00\".parse::<Ipv4Addr>().is_err()); // all octets are in hex\n /// ```\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"Ipv4Addr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Ipv4Addr {\n     octets: [u8; 4],\n@@ -156,7 +155,6 @@ pub struct Ipv4Addr {\n /// assert_eq!(localhost.is_loopback(), true);\n /// ```\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"Ipv6Addr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Ipv6Addr {\n     octets: [u8; 16],"}, {"sha": "d13b34a66cca783ea01a70426ca6316af8684471", "filename": "src/tools/clippy/clippy_utils/src/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c29b05fb24095b0bc2e792ffed3df7496cc2a59/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs?ref=2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "patch": "@@ -199,12 +199,12 @@ pub fn first_node_in_macro(cx: &LateContext<'_>, node: &impl HirNode) -> Option<\n pub fn is_panic(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     let Some(name) = cx.tcx.get_diagnostic_name(def_id) else { return false };\n     matches!(\n-        name.as_str(),\n-        \"core_panic_macro\"\n-            | \"std_panic_macro\"\n-            | \"core_panic_2015_macro\"\n-            | \"std_panic_2015_macro\"\n-            | \"core_panic_2021_macro\"\n+        name,\n+        sym::core_panic_macro\n+            | sym::std_panic_macro\n+            | sym::core_panic_2015_macro\n+            | sym::std_panic_2015_macro\n+            | sym::core_panic_2021_macro\n     )\n }\n "}]}