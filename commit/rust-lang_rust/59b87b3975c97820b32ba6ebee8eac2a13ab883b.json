{"sha": "59b87b3975c97820b32ba6ebee8eac2a13ab883b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Yjg3YjM5NzVjOTc4MjBiMzJiYTZlYmVlOGVhYzJhMTNhYjg4M2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-21T10:54:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-21T10:54:46Z"}, "message": "Auto merge of #37127 - jseyfried:stabilize_RFC_1560, r=nrc\n\nStabilize RFC 1560\n\nFixes #13598, fixes #23157, fixes #32303.\ncc #35120\nr? @nrc", "tree": {"sha": "22e010e38541469dd2a1939948a9d18e437ff9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22e010e38541469dd2a1939948a9d18e437ff9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59b87b3975c97820b32ba6ebee8eac2a13ab883b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59b87b3975c97820b32ba6ebee8eac2a13ab883b", "html_url": "https://github.com/rust-lang/rust/commit/59b87b3975c97820b32ba6ebee8eac2a13ab883b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59b87b3975c97820b32ba6ebee8eac2a13ab883b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f6c20657dba5db43668cdc44c86d0547f7e31f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f6c20657dba5db43668cdc44c86d0547f7e31f", "html_url": "https://github.com/rust-lang/rust/commit/b8f6c20657dba5db43668cdc44c86d0547f7e31f"}, {"sha": "649bcd409aed38b20f871e0d215e2c06124a7572", "url": "https://api.github.com/repos/rust-lang/rust/commits/649bcd409aed38b20f871e0d215e2c06124a7572", "html_url": "https://github.com/rust-lang/rust/commit/649bcd409aed38b20f871e0d215e2c06124a7572"}], "stats": {"total": 649, "additions": 50, "deletions": 599}, "files": [{"sha": "08c2cd0a7326f27534db3fa5fe5d2c9e08700482", "filename": "src/libcoretest/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -11,7 +11,6 @@\n use std::prelude::v1::*;\n use std::{i16, f64};\n use super::super::*;\n-use core::num::flt2dec::*;\n use core::num::bignum::Big32x40 as Big;\n use core::num::flt2dec::strategy::dragon::*;\n "}, {"sha": "311bd252353c770b4b7d7fab1a529f5f72908495", "filename": "src/libcoretest/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -10,7 +10,6 @@\n \n use std::{i16, f64};\n use super::super::*;\n-use core::num::flt2dec::*;\n use core::num::flt2dec::strategy::grisu::*;\n \n #[test]"}, {"sha": "89217e83ca22eeaf3be3dd317a4c64553cb3f40d", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n use super::*;\n-use super::MapEntry::*;\n \n-use hir::*;\n use hir::intravisit::Visitor;\n use hir::def_id::DefId;\n use middle::cstore::InlinedItem;"}, {"sha": "c61846182bf4ae3c94f0ff525f1f99be2764c032", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::*;\n+use hir::map::definitions::*;\n \n use hir;\n use hir::intravisit;"}, {"sha": "0942ce79a6b49787e209d8f1ac348c13d22f9649", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -33,6 +33,7 @@\n #![feature(core_intrinsics)]\n #![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(enumset)]\n+#![cfg_attr(stage0, feature(item_like_imports))]\n #![feature(libc)]\n #![feature(nonzero)]\n #![feature(quote)]"}, {"sha": "8a434cdff17e173a5e42dbc44833a6976cd233b3", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -21,7 +21,6 @@ use rustc_const_eval as const_eval;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::{self, AdtKind, VariantDef, Ty};\n use rustc::ty::cast::CastKind as TyCastKind;\n-use rustc::mir::*;\n use rustc::hir;\n use syntax::ptr::P;\n "}, {"sha": "7c4a820223735752fc7e8d3ebd2e9dfb03df74a1", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -16,7 +16,6 @@\n  */\n \n use hair::*;\n-use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n \n use rustc::middle::const_val::ConstVal;"}, {"sha": "62e405564dbb72b10a444302bc59d8284f5fb6e6", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -23,6 +23,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(associated_consts)]\n #![feature(box_patterns)]\n #![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n+#![cfg_attr(stage0, feature(item_like_imports))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "6209f08ef2895116a4c12b4c4be5e711022893d0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -582,7 +582,7 @@ impl<'b> Resolver<'b> {\n             });\n         } else {\n             for (name, span) in legacy_imports.imports {\n-                let result = self.resolve_name_in_module(module, name, MacroNS, false, false, None);\n+                let result = self.resolve_name_in_module(module, name, MacroNS, false, None);\n                 if let Success(binding) = result {\n                     self.legacy_import_macro(name, binding, span, allow_shadowing);\n                 } else {\n@@ -592,7 +592,7 @@ impl<'b> Resolver<'b> {\n         }\n         for (name, span) in legacy_imports.reexports {\n             self.used_crates.insert(module.def_id().unwrap().krate);\n-            let result = self.resolve_name_in_module(module, name, MacroNS, false, false, None);\n+            let result = self.resolve_name_in_module(module, name, MacroNS, false, None);\n             if let Success(binding) = result {\n                 self.macro_exports.push(Export { name: name, def: binding.def() });\n             } else {"}, {"sha": "d54f4e7b20c7a709fe2972823ee177c23dfc1f2d", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -59,7 +59,7 @@ items under a new local name.\n \n An example of this error:\n \n-```compile_fail\n+```ignore\n use foo::baz;\n use bar::*; // error, do `use foo::baz as quux` instead on the previous line\n "}, {"sha": "2bdfe734cf4173ce4e6ae2d665e2a31415d20909", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -1131,7 +1131,6 @@ pub struct Resolver<'a> {\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n-    new_import_semantics: bool, // true if `#![feature(item_like_imports)]`\n     use_extern_macros: bool, // true if `#![feature(use_extern_macros)]`\n \n     pub exported_macros: Vec<ast::MacroDef>,\n@@ -1333,7 +1332,6 @@ impl<'a> Resolver<'a> {\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             }),\n-            new_import_semantics: session.features.borrow().item_like_imports,\n             use_extern_macros: session.features.borrow().use_extern_macros,\n \n             exported_macros: Vec::new(),\n@@ -1442,7 +1440,7 @@ impl<'a> Resolver<'a> {\n                                      -> ResolveResult<Module<'a>> {\n         fn search_parent_externals<'a>(this: &mut Resolver<'a>, needle: Name, module: Module<'a>)\n                                        -> Option<Module<'a>> {\n-            match this.resolve_name_in_module(module, needle, TypeNS, false, false, None) {\n+            match this.resolve_name_in_module(module, needle, TypeNS, false, None) {\n                 Success(binding) if binding.is_extern_crate() => Some(module),\n                 _ => if let (&ModuleKind::Def(..), Some(parent)) = (&module.kind, module.parent) {\n                     search_parent_externals(this, needle, parent)\n@@ -1460,7 +1458,7 @@ impl<'a> Resolver<'a> {\n         // modules as we go.\n         while index < module_path_len {\n             let name = module_path[index].name;\n-            match self.resolve_name_in_module(search_module, name, TypeNS, false, false, span) {\n+            match self.resolve_name_in_module(search_module, name, TypeNS, false, span) {\n                 Failed(_) => {\n                     let segment_name = name.as_str();\n                     let module_name = module_to_string(search_module);\n@@ -1617,7 +1615,7 @@ impl<'a> Resolver<'a> {\n \n             if let ModuleRibKind(module) = self.ribs[ns][i].kind {\n                 let name = ident.name;\n-                let item = self.resolve_name_in_module(module, name, ns, true, false, record_used);\n+                let item = self.resolve_name_in_module(module, name, ns, false, record_used);\n                 if let Success(binding) = item {\n                     // The ident resolves to an item.\n                     return Some(LexicalScopeBinding::Item(binding));\n@@ -1626,7 +1624,7 @@ impl<'a> Resolver<'a> {\n                 if let ModuleKind::Block(..) = module.kind { // We can see through blocks\n                 } else if !module.no_implicit_prelude {\n                     return self.prelude.and_then(|prelude| {\n-                        self.resolve_name_in_module(prelude, name, ns, false, false, None).success()\n+                        self.resolve_name_in_module(prelude, name, ns, false, None).success()\n                     }).map(LexicalScopeBinding::Item)\n                 } else {\n                     return None;\n@@ -2772,7 +2770,7 @@ impl<'a> Resolver<'a> {\n         };\n \n         let name = segments.last().unwrap().identifier.name;\n-        let result = self.resolve_name_in_module(module, name, namespace, false, false, Some(span));\n+        let result = self.resolve_name_in_module(module, name, namespace, false, Some(span));\n         result.success().ok_or(false)\n     }\n \n@@ -2800,7 +2798,7 @@ impl<'a> Resolver<'a> {\n         };\n \n         let name = segments.last().unwrap().ident().name;\n-        let result = self.resolve_name_in_module(module, name, namespace, false, false, Some(span));\n+        let result = self.resolve_name_in_module(module, name, namespace, false, Some(span));\n         result.success().ok_or(false)\n     }\n "}, {"sha": "6b385d549a5b8740bf79b86619de72b5a9979557", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -272,7 +272,7 @@ impl<'a> Resolver<'a> {\n         loop {\n             // Since expanded macros may not shadow the lexical scope (enforced below),\n             // we can ignore unresolved invocations (indicated by the penultimate argument).\n-            match self.resolve_name_in_module(module, name, ns, true, true, record_used) {\n+            match self.resolve_name_in_module(module, name, ns, true, record_used) {\n                 Success(binding) => {\n                     let span = match record_used {\n                         Some(span) => span,"}, {"sha": "47bd1f71084aa3ae24b494b2fd42ffe8cc856b3d", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 13, "deletions": 49, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -75,7 +75,6 @@ pub struct NameResolution<'a> {\n     single_imports: SingleImports<'a>,\n     /// The least shadowable known binding for this name, or None if there are no known bindings.\n     pub binding: Option<&'a NameBinding<'a>>,\n-    duplicate_globs: Vec<&'a NameBinding<'a>>,\n }\n \n #[derive(Clone, Debug)]\n@@ -141,7 +140,6 @@ impl<'a> Resolver<'a> {\n                                   module: Module<'a>,\n                                   name: Name,\n                                   ns: Namespace,\n-                                  allow_private_imports: bool,\n                                   ignore_unresolved_invocations: bool,\n                                   record_used: Option<Span>)\n                                   -> ResolveResult<&'a NameBinding<'a>> {\n@@ -153,18 +151,8 @@ impl<'a> Resolver<'a> {\n             _ => return Failed(None), // This happens when there is a cycle of imports\n         };\n \n-        let new_import_semantics = self.new_import_semantics;\n-        let is_disallowed_private_import = |binding: &NameBinding| {\n-            !new_import_semantics && !allow_private_imports && // disallowed\n-            binding.vis != ty::Visibility::Public && binding.is_import() && // non-`pub` import\n-            !binding.is_extern_crate() // not an `extern crate`\n-        };\n-\n         if let Some(span) = record_used {\n             if let Some(binding) = resolution.binding {\n-                if is_disallowed_private_import(binding) {\n-                    return Failed(None);\n-                }\n                 if self.record_use(name, ns, binding, span) {\n                     return Success(self.dummy_binding);\n                 }\n@@ -177,9 +165,8 @@ impl<'a> Resolver<'a> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n-            let usable =\n-                this.is_accessible(binding.vis) && !is_disallowed_private_import(binding) ||\n-                binding.is_extern_crate(); // c.f. issue #37020\n+            // `extern crate` are always usable for backwards compatability, see issue #37020.\n+            let usable = this.is_accessible(binding.vis) || binding.is_extern_crate();\n             if usable { Success(binding) } else { Failed(None) }\n         };\n \n@@ -202,7 +189,7 @@ impl<'a> Resolver<'a> {\n                     SingleImport { source, .. } => source,\n                     _ => unreachable!(),\n                 };\n-                match self.resolve_name_in_module(module, name, ns, true, false, None) {\n+                match self.resolve_name_in_module(module, name, ns, false, None) {\n                     Failed(_) => {}\n                     _ => return Indeterminate,\n                 }\n@@ -224,7 +211,7 @@ impl<'a> Resolver<'a> {\n         for directive in module.globs.borrow().iter() {\n             if self.is_accessible(directive.vis.get()) {\n                 if let Some(module) = directive.imported_module.get() {\n-                    let result = self.resolve_name_in_module(module, name, ns, true, false, None);\n+                    let result = self.resolve_name_in_module(module, name, ns, false, None);\n                     if let Indeterminate = result {\n                         return Indeterminate;\n                     }\n@@ -311,22 +298,17 @@ impl<'a> Resolver<'a> {\n         self.update_resolution(module, name, ns, |this, resolution| {\n             if let Some(old_binding) = resolution.binding {\n                 if binding.is_glob_import() {\n-                    if !this.new_import_semantics {\n-                        resolution.duplicate_globs.push(binding);\n-                    } else if !old_binding.is_glob_import() &&\n-                              !(ns == MacroNS && old_binding.expansion != Mark::root()) {\n+                    if !old_binding.is_glob_import() &&\n+                       !(ns == MacroNS && old_binding.expansion != Mark::root()) {\n                     } else if binding.def() != old_binding.def() {\n                         resolution.binding = Some(this.ambiguity(old_binding, binding));\n                     } else if !old_binding.vis.is_at_least(binding.vis, this) {\n                         // We are glob-importing the same item but with greater visibility.\n                         resolution.binding = Some(binding);\n                     }\n                 } else if old_binding.is_glob_import() {\n-                    if !this.new_import_semantics {\n-                        resolution.duplicate_globs.push(old_binding);\n-                        resolution.binding = Some(binding);\n-                    } else if ns == MacroNS && binding.expansion != Mark::root() &&\n-                              binding.def() != old_binding.def() {\n+                    if ns == MacroNS && binding.expansion != Mark::root() &&\n+                       binding.def() != old_binding.def() {\n                         resolution.binding = Some(this.ambiguity(binding, old_binding));\n                     } else {\n                         resolution.binding = Some(binding);\n@@ -366,7 +348,7 @@ impl<'a> Resolver<'a> {\n             let t = f(self, resolution);\n \n             match resolution.binding() {\n-                _ if !self.new_import_semantics && old_binding.is_some() => return t,\n+                _ if old_binding.is_some() => return t,\n                 None => return t,\n                 Some(binding) => match old_binding {\n                     Some(old_binding) if old_binding as *const _ == binding as *const _ => return t,\n@@ -377,10 +359,7 @@ impl<'a> Resolver<'a> {\n \n         // Define `binding` in `module`s glob importers.\n         for directive in module.glob_importers.borrow_mut().iter() {\n-            if match self.new_import_semantics {\n-                true => self.is_accessible_from(binding.vis, directive.parent),\n-                false => binding.vis == ty::Visibility::Public,\n-            } {\n+            if self.is_accessible_from(binding.vis, directive.parent) {\n                 let imported_binding = self.import(binding, directive);\n                 let _ = self.try_define(directive.parent, name, ns, imported_binding);\n             }\n@@ -528,7 +507,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         self.per_ns(|this, ns| {\n             if let Err(Undetermined) = result[ns].get() {\n                 result[ns].set({\n-                    match this.resolve_name_in_module(module, source, ns, false, false, None) {\n+                    match this.resolve_name_in_module(module, source, ns, false, None) {\n                         Success(binding) => Ok(binding),\n                         Indeterminate => Err(Undetermined),\n                         Failed(_) => Err(Determined),\n@@ -624,7 +603,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         if all_ns_err {\n             let mut all_ns_failed = true;\n             self.per_ns(|this, ns| {\n-                match this.resolve_name_in_module(module, name, ns, false, false, Some(span)) {\n+                match this.resolve_name_in_module(module, name, ns, false, Some(span)) {\n                     Success(_) => all_ns_failed = false,\n                     _ => {}\n                 }\n@@ -729,8 +708,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             resolution.borrow().binding().map(|binding| (*name, binding))\n         }).collect::<Vec<_>>();\n         for ((name, ns), binding) in bindings {\n-            if binding.pseudo_vis() == ty::Visibility::Public ||\n-               self.new_import_semantics && self.is_accessible(binding.vis) {\n+            if binding.pseudo_vis() == ty::Visibility::Public || self.is_accessible(binding.vis) {\n                 let imported_binding = self.import(binding, directive);\n                 let _ = self.try_define(directive.parent, name, ns, imported_binding);\n             }\n@@ -761,20 +739,6 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 None => continue,\n             };\n \n-            // Report conflicts\n-            if !self.new_import_semantics {\n-                for duplicate_glob in resolution.duplicate_globs.iter() {\n-                    // FIXME #31337: We currently allow items to shadow glob-imported re-exports.\n-                    if !binding.is_import() {\n-                        if let NameBindingKind::Import { binding, .. } = duplicate_glob.kind {\n-                            if binding.is_import() { continue }\n-                        }\n-                    }\n-\n-                    self.report_conflict(module, name, ns, duplicate_glob, binding);\n-                }\n-            }\n-\n             if binding.vis == ty::Visibility::Public &&\n                (binding.is_import() || binding.is_extern_crate()) {\n                 let def = binding.def();"}, {"sha": "dbdf56e4d789011922a44ed859960bb3b400bae3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -284,9 +284,6 @@ declare_features! (\n     // instead of just the platforms on which it is the C ABI\n     (active, abi_sysv64, \"1.13.0\", Some(36167)),\n \n-    // Use the import semantics from RFC 1560.\n-    (active, item_like_imports, \"1.13.0\", Some(35120)),\n-\n     // Macros 1.1\n     (active, proc_macro, \"1.13.0\", Some(35900)),\n \n@@ -362,6 +359,7 @@ declare_features! (\n     (accepted, question_mark, \"1.13.0\", Some(31436)),\n     // Allows `..` in tuple (struct) patterns\n     (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627)),\n+    (accepted, item_like_imports, \"1.14.0\", Some(35120)),\n );\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n "}, {"sha": "a0234c1185a9789f8e449952538dba150886f0fa", "filename": "src/test/compile-fail/auxiliary/issue_12612_1.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_12612_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_12612_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_12612_1.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub mod bar {\n-    pub fn foo() {}\n-}"}, {"sha": "29b139d771b0deebe0fa6054f8059831bee9fc3b", "filename": "src/test/compile-fail/auxiliary/namespace-mix-old.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// FIXME: Remove when `item_like_imports` is stabilized.\n-\n-pub mod c {\n-    pub struct S {}\n-    pub struct TS();\n-    pub struct US;\n-    pub enum E {\n-        V {},\n-        TV(),\n-        UV,\n-    }\n-\n-    pub struct Item;\n-}\n-\n-pub mod proxy {\n-    pub use c::*;\n-    pub use c::E::*;\n-}\n-\n-pub mod xm1 {\n-    pub use ::proxy::*;\n-    pub type S = ::c::Item;\n-}\n-pub mod xm2 {\n-    pub use ::proxy::*;\n-    pub const S: ::c::Item = ::c::Item;\n-}\n-\n-pub mod xm3 {\n-    pub use ::proxy::*;\n-    pub type TS = ::c::Item;\n-}\n-pub mod xm4 {\n-    pub use ::proxy::*;\n-    pub const TS: ::c::Item = ::c::Item;\n-}\n-\n-pub mod xm5 {\n-    pub use ::proxy::*;\n-    pub type US = ::c::Item;\n-}\n-pub mod xm6 {\n-    pub use ::proxy::*;\n-    pub const US: ::c::Item = ::c::Item;\n-}\n-\n-pub mod xm7 {\n-    pub use ::proxy::*;\n-    pub type V = ::c::Item;\n-}\n-pub mod xm8 {\n-    pub use ::proxy::*;\n-    pub const V: ::c::Item = ::c::Item;\n-}\n-\n-pub mod xm9 {\n-    pub use ::proxy::*;\n-    pub type TV = ::c::Item;\n-}\n-pub mod xmA {\n-    pub use ::proxy::*;\n-    pub const TV: ::c::Item = ::c::Item;\n-}\n-\n-pub mod xmB {\n-    pub use ::proxy::*;\n-    pub type UV = ::c::Item;\n-}\n-pub mod xmC {\n-    pub use ::proxy::*;\n-    pub const UV: ::c::Item = ::c::Item;\n-}"}, {"sha": "d82e9bb7022839b251017326536bf308d72fa51c", "filename": "src/test/compile-fail/auxiliary/namespace-mix.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(item_like_imports)]\n-\n pub mod c {\n     pub struct S {}\n     pub struct TS();", "previous_filename": "src/test/compile-fail/auxiliary/namespace-mix-new.rs"}, {"sha": "8f1b8ec91db38aafa4b79e74ebe7cbb89a71387e", "filename": "src/test/compile-fail/glob-cycles.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fglob-cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fglob-cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-cycles.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,19 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n+\n mod foo {\n     pub use bar::*;\n-    pub use main as f; //~ ERROR has already been imported\n+    pub use main as f;\n }\n \n mod bar {\n     pub use foo::*;\n }\n \n pub use foo::*;\n-pub use baz::*; //~ ERROR has already been imported\n+pub use baz::*;\n mod baz {\n     pub use super::*;\n }\n \n-pub fn main() {}\n+#[rustc_error]\n+pub fn main() {} //~ ERROR compilation successful"}, {"sha": "503fa4eca527bbc9c1b1639076d43d79837af58f", "filename": "src/test/compile-fail/import-shadow-1.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that import shadowing using globs causes errors\n-\n-#![no_implicit_prelude]\n-\n-use foo::*;\n-use bar::*; //~ERROR a type named `Baz` has already been imported in this module\n-\n-mod foo {\n-    pub type Baz = isize;\n-}\n-\n-mod bar {\n-    pub type Baz = isize;\n-}\n-\n-mod qux {\n-    pub use bar::Baz;\n-}\n-\n-fn main() {}"}, {"sha": "0c107cf27f5928fc96087c3bcc325e0de6cd9962", "filename": "src/test/compile-fail/import-shadow-2.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that import shadowing using globs causes errors\n-\n-#![no_implicit_prelude]\n-\n-use foo::*;\n-use foo::*; //~ERROR a type named `Baz` has already been imported in this module\n-\n-mod foo {\n-    pub type Baz = isize;\n-}\n-\n-mod bar {\n-    pub type Baz = isize;\n-}\n-\n-mod qux {\n-    pub use bar::Baz;\n-}\n-\n-fn main() {}"}, {"sha": "bf90973c2857e7a8039d7a0685cf9157ef2728fb", "filename": "src/test/compile-fail/import-shadow-3.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that import shadowing using globs causes errors\n-\n-#![no_implicit_prelude]\n-\n-use foo::Baz;\n-use bar::*; //~ERROR a type named `Baz` has already been imported in this module\n-\n-mod foo {\n-    pub type Baz = isize;\n-}\n-\n-mod bar {\n-    pub type Baz = isize;\n-}\n-\n-mod qux {\n-    pub use bar::Baz;\n-}\n-\n-fn main() {}"}, {"sha": "f21fdaae47ba0e29e5f789afec78e05271321e42", "filename": "src/test/compile-fail/import-shadow-4.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that import shadowing using globs causes errors\n-\n-#![no_implicit_prelude]\n-\n-use foo::*;\n-use bar::Baz; //~ERROR a type named `Baz` has already been imported in this module\n-\n-mod foo {\n-    pub type Baz = isize;\n-}\n-\n-mod bar {\n-    pub type Baz = isize;\n-}\n-\n-mod qux {\n-    pub use bar::Baz;\n-}\n-\n-fn main() {}"}, {"sha": "dc300bc7baa7705823103a9f7c2f37382eb8399a", "filename": "src/test/compile-fail/import-shadow-5.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that import shadowing using globs causes errors\n-\n-#![no_implicit_prelude]\n-\n-use foo::Baz;\n-use bar::Baz; //~ERROR a type named `Baz` has already been imported in this module\n-\n-mod foo {\n-    pub type Baz = isize;\n-}\n-\n-mod bar {\n-    pub type Baz = isize;\n-}\n-\n-mod qux {\n-    pub use bar::Baz;\n-}\n-\n-fn main() {}"}, {"sha": "fa3b75c70f0b68a75250c93b5c50638e20257bf6", "filename": "src/test/compile-fail/import-shadow-6.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that import shadowing using globs causes errors\n-\n-#![no_implicit_prelude]\n-\n-use qux::*;\n-use foo::*; //~ERROR a type named `Baz` has already been imported in this module\n-\n-mod foo {\n-    pub type Baz = isize;\n-}\n-\n-mod bar {\n-    pub type Baz = isize;\n-}\n-\n-mod qux {\n-    pub use bar::Baz;\n-}\n-\n-fn main() {}"}, {"sha": "34aba15b3922892d781b5b15545ec9f39115f10e", "filename": "src/test/compile-fail/import-shadow-7.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that import shadowing using globs causes errors\n-\n-#![no_implicit_prelude]\n-\n-use foo::*;\n-use qux::*; //~ERROR a type named `Baz` has already been imported in this module\n-\n-mod foo {\n-    pub type Baz = isize;\n-}\n-\n-mod bar {\n-    pub type Baz = isize;\n-}\n-\n-mod qux {\n-    pub use bar::Baz;\n-}\n-\n-fn main() {}"}, {"sha": "81a5334ed7ab7675867ad8c184784b12d72095c6", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -20,6 +20,6 @@ mod zed {\n }\n \n fn main() {\n-    zed::foo(); //~ ERROR unresolved name\n+    zed::foo(); //~ ERROR `foo` is private\n     bar();\n }"}, {"sha": "8dd69d8c24c855afc267e983199f09e1ed103675", "filename": "src/test/compile-fail/imports/duplicate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(item_like_imports)]\n-\n mod a {\n     pub fn foo() {}\n }"}, {"sha": "65e6e8d01b05f119c6bd6de43eb287c5ed4df57c", "filename": "src/test/compile-fail/imports/reexports.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(item_like_imports)]\n-\n mod a {\n     fn foo() {}\n     mod foo {}"}, {"sha": "05ecc781af30d53b22689e613d3ab4ca74eb8351", "filename": "src/test/compile-fail/imports/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fimports%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fimports%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Funused.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(pub_restricted, item_like_imports)]\n+#![feature(pub_restricted)]\n #![deny(unused)]\n \n mod foo {"}, {"sha": "c6f76ca78874bdc74e290e685ec285a503207e67", "filename": "src/test/compile-fail/issue-12612.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:issue_12612_1.rs\n-\n-extern crate issue_12612_1 as foo;\n-\n-use foo::bar;\n-\n-mod test {\n-    use bar::foo; //~ ERROR unresolved import `bar::foo` [E0432]\n-                  //~^ Maybe a missing `extern crate bar;`?\n-}\n-\n-fn main() {}"}, {"sha": "2c54ed3e857e93130c5456b62fd54417b7214945", "filename": "src/test/compile-fail/issue-32797.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fissue-32797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fissue-32797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32797.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,14 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n+\n pub use bar::*;\n mod bar {\n     pub use super::*;\n }\n \n-pub use baz::*; //~ ERROR already been imported\n+pub use baz::*;\n mod baz {\n     pub use main as f;\n }\n \n-pub fn main() {}\n+#[rustc_error]\n+pub fn main() {} //~ ERROR compilation successful"}, {"sha": "41383e93603d36cd3b12921a95c3f774b9535900", "filename": "src/test/compile-fail/issue-32833.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fissue-32833.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fissue-32833.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32833.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -11,8 +11,7 @@\n use bar::Foo; //~ ERROR unresolved import `bar::Foo` [E0432]\n               //~^ no `Foo` in `bar`\n mod bar {\n-    use Foo; //~ ERROR unresolved import `Foo` [E0432]\n-             //~^ no `Foo` in the root\n+    use Foo;\n }\n \n fn main() {}"}, {"sha": "8cd82050814a001674d250edccb542fddc0e3b18", "filename": "src/test/compile-fail/namespace-mix-old.rs", "status": "removed", "additions": 0, "deletions": 172, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6c20657dba5db43668cdc44c86d0547f7e31f/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs?ref=b8f6c20657dba5db43668cdc44c86d0547f7e31f", "patch": "@@ -1,172 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// FIXME: Remove when `item_like_imports` is stabilized.\n-\n-// aux-build:namespace-mix-old.rs\n-\n-extern crate namespace_mix_old;\n-use namespace_mix_old::{xm1, xm2, xm3, xm4, xm5, xm6, xm7, xm8, xm9, xmA, xmB, xmC};\n-\n-mod c {\n-    pub struct S {}\n-    pub struct TS();\n-    pub struct US;\n-    pub enum E {\n-        V {},\n-        TV(),\n-        UV,\n-    }\n-\n-    pub struct Item;\n-}\n-\n-mod proxy {\n-    pub use c::*;\n-    pub use c::E::*;\n-}\n-\n-// Use something emitting the type argument name, e.g. unsatisfied bound.\n-trait Impossible {}\n-fn check<T: Impossible>(_: T) {}\n-\n-mod m1 {\n-    pub use ::proxy::*;\n-    pub type S = ::c::Item;\n-}\n-mod m2 {\n-    pub use ::proxy::*;\n-    pub const S: ::c::Item = ::c::Item;\n-}\n-\n-fn f12() {\n-    check(m1::S{}); //~ ERROR c::Item\n-    check(m1::S); //~ ERROR unresolved name\n-    check(m2::S{}); //~ ERROR c::S\n-    check(m2::S); //~ ERROR c::Item\n-}\n-fn xf12() {\n-    check(xm1::S{}); //~ ERROR c::Item\n-    check(xm1::S); //~ ERROR unresolved name\n-    check(xm2::S{}); //~ ERROR c::S\n-    check(xm2::S); //~ ERROR c::Item\n-}\n-\n-mod m3 {\n-    pub use ::proxy::*;\n-    pub type TS = ::c::Item;\n-}\n-mod m4 {\n-    pub use ::proxy::*;\n-    pub const TS: ::c::Item = ::c::Item;\n-}\n-\n-fn f34() {\n-    check(m3::TS{}); //~ ERROR c::Item\n-    check(m3::TS); //~ ERROR c::TS\n-    check(m4::TS{}); //~ ERROR c::TS\n-    check(m4::TS); //~ ERROR c::Item\n-}\n-fn xf34() {\n-    check(xm3::TS{}); //~ ERROR c::Item\n-    check(xm3::TS); //~ ERROR c::TS\n-    check(xm4::TS{}); //~ ERROR c::TS\n-    check(xm4::TS); //~ ERROR c::Item\n-}\n-\n-mod m5 {\n-    pub use ::proxy::*;\n-    pub type US = ::c::Item;\n-}\n-mod m6 {\n-    pub use ::proxy::*;\n-    pub const US: ::c::Item = ::c::Item;\n-}\n-\n-fn f56() {\n-    check(m5::US{}); //~ ERROR c::Item\n-    check(m5::US); //~ ERROR c::US\n-    check(m6::US{}); //~ ERROR c::US\n-    check(m6::US); //~ ERROR c::Item\n-}\n-fn xf56() {\n-    check(xm5::US{}); //~ ERROR c::Item\n-    check(xm5::US); //~ ERROR c::US\n-    check(xm6::US{}); //~ ERROR c::US\n-    check(xm6::US); //~ ERROR c::Item\n-}\n-\n-mod m7 {\n-    pub use ::proxy::*;\n-    pub type V = ::c::Item;\n-}\n-mod m8 {\n-    pub use ::proxy::*;\n-    pub const V: ::c::Item = ::c::Item;\n-}\n-\n-fn f78() {\n-    check(m7::V{}); //~ ERROR c::Item\n-    check(m7::V); //~ ERROR name of a struct or struct variant\n-    check(m8::V{}); //~ ERROR c::E\n-    check(m8::V); //~ ERROR c::Item\n-}\n-fn xf78() {\n-    check(xm7::V{}); //~ ERROR c::Item\n-    check(xm7::V); //~ ERROR name of a struct or struct variant\n-    check(xm8::V{}); //~ ERROR c::E\n-    check(xm8::V); //~ ERROR c::Item\n-}\n-\n-mod m9 {\n-    pub use ::proxy::*;\n-    pub type TV = ::c::Item;\n-}\n-mod mA {\n-    pub use ::proxy::*;\n-    pub const TV: ::c::Item = ::c::Item;\n-}\n-\n-fn f9A() {\n-    check(m9::TV{}); //~ ERROR c::Item\n-    check(m9::TV); //~ ERROR c::E\n-    check(mA::TV{}); //~ ERROR c::E\n-    check(mA::TV); //~ ERROR c::Item\n-}\n-fn xf9A() {\n-    check(xm9::TV{}); //~ ERROR c::Item\n-    check(xm9::TV); //~ ERROR c::E\n-    check(xmA::TV{}); //~ ERROR c::E\n-    check(xmA::TV); //~ ERROR c::Item\n-}\n-\n-mod mB {\n-    pub use ::proxy::*;\n-    pub type UV = ::c::Item;\n-}\n-mod mC {\n-    pub use ::proxy::*;\n-    pub const UV: ::c::Item = ::c::Item;\n-}\n-\n-fn fBC() {\n-    check(mB::UV{}); //~ ERROR c::Item\n-    check(mB::UV); //~ ERROR c::E\n-    check(mC::UV{}); //~ ERROR c::E\n-    check(mC::UV); //~ ERROR c::Item\n-}\n-fn xfBC() {\n-    check(xmB::UV{}); //~ ERROR c::Item\n-    check(xmB::UV); //~ ERROR c::E\n-    check(xmC::UV{}); //~ ERROR c::E\n-    check(xmC::UV); //~ ERROR c::Item\n-}\n-\n-fn main() {}"}, {"sha": "cb7894b726f46f597e60d1a102302a6c8ec375c2", "filename": "src/test/compile-fail/namespace-mix.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fnamespace-mix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fnamespace-mix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespace-mix.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:namespace-mix-new.rs\n+// aux-build:namespace-mix.rs\n \n-#![feature(item_like_imports)]\n-\n-extern crate namespace_mix_new;\n-use namespace_mix_new::*;\n+extern crate namespace_mix;\n+use namespace_mix::*;\n \n mod c {\n     pub struct S {}", "previous_filename": "src/test/compile-fail/namespace-mix-new.rs"}, {"sha": "113dd2879406892e60fa0938d6e433b76393b258", "filename": "src/test/compile-fail/privacy2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -31,8 +31,7 @@ fn test1() {\n \n fn test2() {\n     use bar::glob::foo;\n-    //~^ ERROR unresolved import `bar::glob::foo` [E0432]\n-    //~| no `foo` in `bar::glob`\n+    //~^ ERROR `foo` is private\n }\n \n #[start] fn main(_: isize, _: *const *const u8) -> isize { 3 }"}, {"sha": "e7e57a73de02f7176fa6d6a8a70b77114489a29d", "filename": "src/test/compile-fail/shadowed-use-visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fshadowed-use-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fshadowed-use-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-use-visibility.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -16,11 +16,11 @@ mod foo {\n }\n \n mod bar {\n-    use foo::bar::f as g; //~ ERROR unresolved import\n+    use foo::bar::f as g; //~ ERROR module `bar` is private\n \n     use foo as f;\n     pub use foo::*;\n }\n \n-use bar::f::f; //~ ERROR unresolved import\n+use bar::f::f; //~ ERROR module `f` is private\n fn main() {}"}, {"sha": "44e9260770e03ccfe83441c2b83b1dc32566310b", "filename": "src/test/compile-fail/variant-namespacing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -31,11 +31,11 @@ const XTuple: u8 = 0;\n const XUnit: u8 = 0;\n \n extern crate variant_namespacing;\n-pub use variant_namespacing::XE::*;\n+pub use variant_namespacing::XE::{XStruct, XTuple, XUnit};\n //~^ ERROR `XStruct` has already been defined\n //~| ERROR `XTuple` has already been defined\n //~| ERROR `XUnit` has already been defined\n-pub use E::*;\n+pub use E::{Struct, Tuple, Unit};\n //~^ ERROR `Struct` has already been defined\n //~| ERROR `Tuple` has already been defined\n //~| ERROR `Unit` has already been defined"}, {"sha": "4e402721a7b39383e2d08c1433bb82eb668aceca", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#![feature(plugin_registrar, rustc_private, item_like_imports)]\n+#![feature(plugin_registrar, rustc_private)]\n \n extern crate syntax;\n extern crate syntax_ext;"}, {"sha": "f845a2ee571622b699ce35054b0480f63d14177d", "filename": "src/test/run-pass/imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Frun-pass%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b87b3975c97820b32ba6ebee8eac2a13ab883b/src%2Ftest%2Frun-pass%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimports.rs?ref=59b87b3975c97820b32ba6ebee8eac2a13ab883b", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(item_like_imports)]\n #![allow(unused)]\n \n // Like other items, private imports can be imported and used non-lexically in paths."}]}