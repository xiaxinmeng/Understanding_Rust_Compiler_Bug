{"sha": "11e31091a9e7e3604d79d9e820067120945c538d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZTMxMDkxYTllN2UzNjA0ZDc5ZDllODIwMDY3MTIwOTQ1YzUzOGQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-06T23:21:58Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-06T23:21:58Z"}, "message": "trans: don't forget to cast Pair constants of the wrong type.", "tree": {"sha": "05ab0264eb5165808ce4a5cff1ff1bfc702c352a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ab0264eb5165808ce4a5cff1ff1bfc702c352a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e31091a9e7e3604d79d9e820067120945c538d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e31091a9e7e3604d79d9e820067120945c538d", "html_url": "https://github.com/rust-lang/rust/commit/11e31091a9e7e3604d79d9e820067120945c538d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e31091a9e7e3604d79d9e820067120945c538d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6d9f8387aaa9ccd9ba0b379b60c402561fad970", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d9f8387aaa9ccd9ba0b379b60c402561fad970", "html_url": "https://github.com/rust-lang/rust/commit/b6d9f8387aaa9ccd9ba0b379b60c402561fad970"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "534718870734484d8542b1ba8780742d601164aa", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e31091a9e7e3604d79d9e820067120945c538d/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e31091a9e7e3604d79d9e820067120945c538d/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=11e31091a9e7e3604d79d9e820067120945c538d", "patch": "@@ -122,10 +122,10 @@ impl<'tcx> Const<'tcx> {\n         let llty = type_of::immediate_type_of(ccx, self.ty);\n         let llvalty = val_ty(self.llval);\n \n-        let val = if common::type_is_imm_pair(ccx, self.ty) {\n+        let val = if llty == llvalty && common::type_is_imm_pair(ccx, self.ty) {\n             let (a, b) = self.get_pair();\n             OperandValue::Pair(a, b)\n-        } else if common::type_is_immediate(ccx, self.ty) && llty == llvalty {\n+        } else if llty == llvalty && common::type_is_immediate(ccx, self.ty) {\n             // If the types match, we can use the value directly.\n             OperandValue::Immediate(self.llval)\n         } else {"}, {"sha": "0ce9e88ef3dbea7cc8d03c9f3212e0143d556b8a", "filename": "src/test/run-pass/mir_constval_adts.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e31091a9e7e3604d79d9e820067120945c538d/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e31091a9e7e3604d79d9e820067120945c538d/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs?ref=11e31091a9e7e3604d79d9e820067120945c538d", "patch": "@@ -15,21 +15,23 @@ struct Point {\n     _y: i32,\n }\n \n+#[derive(PartialEq, Eq, Debug)]\n+struct Newtype<T>(T);\n+\n const STRUCT: Point = Point { _x: 42, _y: 42 };\n const TUPLE1: (i32, i32) = (42, 42);\n const TUPLE2: (&'static str, &'static str) = (\"hello\",\"world\");\n+const PAIR_NEWTYPE: (Newtype<i32>, Newtype<i32>) = (Newtype(42), Newtype(42));\n \n #[rustc_mir]\n-fn mir() -> (Point, (i32, i32), (&'static str, &'static str)){\n+fn mir() -> (Point, (i32, i32), (&'static str, &'static str), (Newtype<i32>, Newtype<i32>)) {\n     let struct1 = STRUCT;\n     let tuple1 = TUPLE1;\n     let tuple2 = TUPLE2;\n-    (struct1, tuple1, tuple2)\n+    let pair_newtype = PAIR_NEWTYPE;\n+    (struct1, tuple1, tuple2, pair_newtype)\n }\n \n-#[derive(PartialEq, Eq, Debug)]\n-struct Newtype<T>(T);\n-\n const NEWTYPE: Newtype<&'static str> = Newtype(\"foobar\");\n \n #[rustc_mir]\n@@ -39,7 +41,7 @@ fn test_promoted_newtype_str_ref() {\n }\n \n fn main(){\n-    assert_eq!(mir(), (STRUCT, TUPLE1, TUPLE2));\n+    assert_eq!(mir(), (STRUCT, TUPLE1, TUPLE2, PAIR_NEWTYPE));\n     test_promoted_newtype_str_ref();\n }\n "}]}