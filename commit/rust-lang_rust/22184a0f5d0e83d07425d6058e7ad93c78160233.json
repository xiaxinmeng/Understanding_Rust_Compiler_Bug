{"sha": "22184a0f5d0e83d07425d6058e7ad93c78160233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMTg0YTBmNWQwZTgzZDA3NDI1ZDYwNThlN2FkOTNjNzgxNjAyMzM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-02-25T00:37:56Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-02-25T00:37:56Z"}, "message": "Add a cache for rustc_legacy_const_generics", "tree": {"sha": "088cb9708b8a1f9f4eb94d08114b8c08d968968c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088cb9708b8a1f9f4eb94d08114b8c08d968968c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22184a0f5d0e83d07425d6058e7ad93c78160233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22184a0f5d0e83d07425d6058e7ad93c78160233", "html_url": "https://github.com/rust-lang/rust/commit/22184a0f5d0e83d07425d6058e7ad93c78160233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22184a0f5d0e83d07425d6058e7ad93c78160233/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cccd77955b9312be8c476ff07f2c96f08ec3a25c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cccd77955b9312be8c476ff07f2c96f08ec3a25c", "html_url": "https://github.com/rust-lang/rust/commit/cccd77955b9312be8c476ff07f2c96f08ec3a25c"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "c564ada0395e9cddab97acb422584a30194f1492", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22184a0f5d0e83d07425d6058e7ad93c78160233/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22184a0f5d0e83d07425d6058e7ad93c78160233/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=22184a0f5d0e83d07425d6058e7ad93c78160233", "patch": "@@ -175,7 +175,7 @@ pub trait ResolverAstLowering {\n \n     fn item_generics_num_lifetimes(&self, def: DefId, sess: &Session) -> usize;\n \n-    fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;\n+    fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>>;\n \n     /// Obtains resolution for a `NodeId` with a single resolution.\n     fn get_partial_res(&mut self, id: NodeId) -> Option<PartialRes>;"}, {"sha": "e63fd4ce6357db25926f89ac376eafde1eae13fa", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/22184a0f5d0e83d07425d6058e7ad93c78160233/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22184a0f5d0e83d07425d6058e7ad93c78160233/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=22184a0f5d0e83d07425d6058e7ad93c78160233", "patch": "@@ -996,6 +996,8 @@ pub struct Resolver<'a> {\n     /// Some way to know that we are in a *trait* impl in `visit_assoc_item`.\n     /// FIXME: Replace with a more general AST map (together with some other fields).\n     trait_impl_items: FxHashSet<LocalDefId>,\n+\n+    legacy_const_generic_args: FxHashMap<DefId, Option<Vec<usize>>>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1077,7 +1079,7 @@ impl ResolverAstLowering for Resolver<'_> {\n         self.cstore().item_generics_num_lifetimes(def_id, sess)\n     }\n \n-    fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>> {\n+    fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {\n         self.legacy_const_generic_args(expr)\n     }\n \n@@ -1321,6 +1323,7 @@ impl<'a> Resolver<'a> {\n             invocation_parents,\n             next_disambiguator: Default::default(),\n             trait_impl_items: Default::default(),\n+            legacy_const_generic_args: Default::default(),\n         };\n \n         let root_parent_scope = ParentScope::module(graph_root, &resolver);\n@@ -3317,7 +3320,7 @@ impl<'a> Resolver<'a> {\n     /// Checks if an expression refers to a function marked with\n     /// `#[rustc_legacy_const_generics]` and returns the argument index list\n     /// from the attribute.\n-    pub fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>> {\n+    pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {\n         if let ExprKind::Path(None, path) = &expr.kind {\n             // Don't perform legacy const generics rewriting if the path already\n             // has generic arguments.\n@@ -3338,20 +3341,32 @@ impl<'a> Resolver<'a> {\n                     return None;\n                 }\n \n-                let attrs = self.cstore().item_attrs(def_id, self.session);\n-                let attr = attrs\n-                    .iter()\n-                    .find(|a| self.session.check_name(a, sym::rustc_legacy_const_generics))?;\n-                let mut ret = vec![];\n-                for meta in attr.meta_item_list()? {\n-                    match meta.literal()?.kind {\n-                        LitKind::Int(a, _) => {\n-                            ret.push(a as usize);\n+                if let Some(v) = self.legacy_const_generic_args.get(&def_id) {\n+                    return v.clone();\n+                }\n+\n+                let parse_attrs = || {\n+                    let attrs = self.cstore().item_attrs(def_id, self.session);\n+                    let attr = attrs\n+                        .iter()\n+                        .find(|a| self.session.check_name(a, sym::rustc_legacy_const_generics))?;\n+                    let mut ret = vec![];\n+                    for meta in attr.meta_item_list()? {\n+                        match meta.literal()?.kind {\n+                            LitKind::Int(a, _) => {\n+                                ret.push(a as usize);\n+                            }\n+                            _ => panic!(\"invalid arg index\"),\n                         }\n-                        _ => panic!(\"invalid arg index\"),\n                     }\n-                }\n-                return Some(ret);\n+                    Some(ret)\n+                };\n+\n+                // Cache the lookup to avoid parsing attributes for an iterm\n+                // multiple times.\n+                let ret = parse_attrs();\n+                self.legacy_const_generic_args.insert(def_id, ret.clone());\n+                return ret;\n             }\n         }\n         None"}]}