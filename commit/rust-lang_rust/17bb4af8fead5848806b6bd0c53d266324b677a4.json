{"sha": "17bb4af8fead5848806b6bd0c53d266324b677a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YmI0YWY4ZmVhZDU4NDg4MDZiNmJkMGM1M2QyNjYzMjRiNjc3YTQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-07-08T20:48:04Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-07-08T21:49:19Z"}, "message": "Guide: Standard input", "tree": {"sha": "ee6b2b48400359c82c8dba017cb468b5a78917d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee6b2b48400359c82c8dba017cb468b5a78917d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17bb4af8fead5848806b6bd0c53d266324b677a4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17bb4af8fead5848806b6bd0c53d266324b677a4", "html_url": "https://github.com/rust-lang/rust/commit/17bb4af8fead5848806b6bd0c53d266324b677a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17bb4af8fead5848806b6bd0c53d266324b677a4/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "html_url": "https://github.com/rust-lang/rust/commit/35e21346216cc4c5a3b22bb6fb316f8c867f8c92"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "a5a8e74bd6bdfd4a6331c87cfb0fa344cd223013", "filename": "src/doc/guide.md", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/17bb4af8fead5848806b6bd0c53d266324b677a4/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/17bb4af8fead5848806b6bd0c53d266324b677a4/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=17bb4af8fead5848806b6bd0c53d266324b677a4", "patch": "@@ -966,6 +966,112 @@ loop\n \n break/continue\n \n+## Standard Input\n+\n+Getting input from the keyboard is pretty easy, but uses some things\n+we haven't seen before. Here's a simple program that reads some input,\n+and then prints it back out:\n+\n+```{rust,ignore}\n+fn main() {\n+    println!(\"Type something!\");\n+\n+    let input = std::io::stdin().read_line().ok().expect(\"Failed to read line\");\n+\n+    println!(\"{}\", input);\n+}\n+```\n+\n+Let's go over these chunks, one by one:\n+\n+```{rust}\n+std::io::stdin();\n+```\n+\n+This calls a function, `stdin()`, that lives inside the `std::io` module. As\n+you can imagine, everything in `std` is provided by Rust, the 'standard\n+library.' We'll talk more about the module system later.\n+\n+Since writing the fully qualified name all the time is annoying, we can use\n+the `use` statement to import it in:\n+\n+```{rust}\n+use std::io::stdin;\n+\n+stdin();\n+```\n+\n+However, it's considered better practice to not import individual functions, but\n+to import the module, and only use one level of qualification:\n+\n+```{rust}\n+use std::io;\n+\n+io::stdin();\n+```\n+\n+Let's update our example to use this style:\n+\n+```{rust,ignore}\n+use std::io;\n+\n+fn main() {\n+    println!(\"Type something!\");\n+\n+    let input = io::stdin().read_line().ok().expect(\"Failed to read line\");\n+\n+    println!(\"{}\", input);\n+}\n+```\n+\n+Next up:\n+\n+```{rust,ignore}\n+.read_line()\n+```\n+\n+The `read_line()` method can be called on the result of `stdin()` to return\n+a full line of input. Nice and easy.\n+\n+```{rust,ignore}\n+.ok().expect(\"Failed to read line\");\n+```\n+\n+Here's the thing: reading a line from standard input could fail. For example,\n+if this program isn't running in a terminal, but is running as part of a cron\n+job, or some other context where there's no standard input. So Rust expects us\n+to handle this case. Given that we plan on always running this program in a\n+terminal, we use the `ok()` method to tell Rust that we're expecting everything\n+to be just peachy, and the `expect()` method on that result to give an error\n+message if our expectation goes wrong.\n+\n+We will cover the exact details of how all of this works later in the Guide.\n+For now, this is all you need.\n+\n+With long lines like this, Rust gives you some flexibility with the whitespace.\n+We _could_ write the example like this:\n+\n+```{rust,ignore}\n+use std::io;\n+\n+fn main() {\n+    println!(\"Type something!\");\n+\n+    let input = io::stdin()\n+                  .read_line()\n+                  .ok()\n+                  .expect(\"Failed to read line\");\n+\n+    println!(\"{}\", input);\n+}\n+```\n+\n+Sometimes, this makes things more readable. Sometimes, less. Use your judgement\n+here.\n+\n+That's all you need to get basic input from the standard input! It's not too\n+complicated, but there are a number of small parts.\n+\n ## Guessing Game: complete\n \n At this point, you have successfully built the Guessing Game! Congratulations!"}]}