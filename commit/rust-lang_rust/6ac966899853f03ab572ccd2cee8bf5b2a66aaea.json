{"sha": "6ac966899853f03ab572ccd2cee8bf5b2a66aaea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzk2Njg5OTg1M2YwM2FiNTcyY2NkMmNlZThiZjViMmE2NmFhZWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T11:31:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T12:26:08Z"}, "message": "Generalize rustfmt config", "tree": {"sha": "552a089fafbb7e6de0f9e0f325329e537f36ea98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/552a089fafbb7e6de0f9e0f325329e537f36ea98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac966899853f03ab572ccd2cee8bf5b2a66aaea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac966899853f03ab572ccd2cee8bf5b2a66aaea", "html_url": "https://github.com/rust-lang/rust/commit/6ac966899853f03ab572ccd2cee8bf5b2a66aaea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac966899853f03ab572ccd2cee8bf5b2a66aaea/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67351a011bbaf63617c7fc96884129e9fc39e411", "url": "https://api.github.com/repos/rust-lang/rust/commits/67351a011bbaf63617c7fc96884129e9fc39e411", "html_url": "https://github.com/rust-lang/rust/commit/67351a011bbaf63617c7fc96884129e9fc39e411"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "753dc7d50b35eb0d6456ad703f326c2024152e8d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac966899853f03ab572ccd2cee8bf5b2a66aaea/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac966899853f03ab572ccd2cee8bf5b2a66aaea/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6ac966899853f03ab572ccd2cee8bf5b2a66aaea", "patch": "@@ -38,7 +38,7 @@ use crate::{\n         subscriptions::Subscriptions,\n     },\n     req,\n-    world::{Config, WorldSnapshot, WorldState},\n+    world::{Config, RustfmtConfig, WorldSnapshot, WorldState},\n     Result, ServerConfig,\n };\n use req::ConfigurationParams;\n@@ -110,7 +110,7 @@ fn get_config(\n         } else {\n             None\n         },\n-        rustfmt_args: config.rustfmt_args.clone(),\n+        rustfmt: RustfmtConfig::Rustfmt { extra_args: config.rustfmt_args.clone() },\n         vscode_lldb: config.vscode_lldb,\n         proc_macro_srv: None, // FIXME: get this from config\n     }"}, {"sha": "80d96f89e31e17e51918c3d97988cef4f9110304", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6ac966899853f03ab572ccd2cee8bf5b2a66aaea/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac966899853f03ab572ccd2cee8bf5b2a66aaea/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=6ac966899853f03ab572ccd2cee8bf5b2a66aaea", "patch": "@@ -39,7 +39,7 @@ use crate::{\n     from_json,\n     req::{self, Decoration, InlayHint, InlayHintsParams},\n     semantic_tokens::SemanticTokensBuilder,\n-    world::WorldSnapshot,\n+    world::{RustfmtConfig, WorldSnapshot},\n     LspError, Result,\n };\n \n@@ -610,13 +610,24 @@ pub fn handle_formatting(\n     let file_line_index = world.analysis().file_line_index(file_id)?;\n     let end_position = TextUnit::of_str(&file).conv_with(&file_line_index);\n \n-    let mut rustfmt = process::Command::new(\"rustfmt\");\n-    rustfmt.args(&world.config.rustfmt_args);\n-    if let Some(&crate_id) = crate_ids.first() {\n-        // Assume all crates are in the same edition\n-        let edition = world.analysis().crate_edition(crate_id)?;\n-        rustfmt.args(&[\"--edition\", &edition.to_string()]);\n-    }\n+    let mut rustfmt = match &world.config.rustfmt {\n+        RustfmtConfig::Rustfmt { extra_args } => {\n+            let mut cmd = process::Command::new(\"rustfmt\");\n+            cmd.args(extra_args);\n+            if let Some(&crate_id) = crate_ids.first() {\n+                // Assume all crates are in the same edition\n+                let edition = world.analysis().crate_edition(crate_id)?;\n+                cmd.arg(\"--edition\");\n+                cmd.arg(edition.to_string());\n+            }\n+            cmd\n+        }\n+        RustfmtConfig::CustomCommand { command, args } => {\n+            let mut cmd = process::Command::new(command);\n+            cmd.args(args);\n+            cmd\n+        }\n+    };\n \n     if let Ok(path) = params.text_document.uri.to_file_path() {\n         if let Some(parent) = path.parent() {"}, {"sha": "ccdf3710cd00f7443059db2691c65772608a1830", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ac966899853f03ab572ccd2cee8bf5b2a66aaea/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac966899853f03ab572ccd2cee8bf5b2a66aaea/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=6ac966899853f03ab572ccd2cee8bf5b2a66aaea", "patch": "@@ -57,12 +57,30 @@ pub struct Config {\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n     pub inlay_hints: InlayHintsConfig,\n-    pub rustfmt_args: Vec<String>,\n+    pub rustfmt: RustfmtConfig,\n     pub check: Option<FlycheckConfig>,\n     pub vscode_lldb: bool,\n     pub proc_macro_srv: Option<String>,\n }\n \n+#[derive(Debug, Clone)]\n+pub enum RustfmtConfig {\n+    Rustfmt {\n+        extra_args: Vec<String>,\n+    },\n+    #[allow(unused)]\n+    CustomCommand {\n+        command: String,\n+        args: Vec<String>,\n+    },\n+}\n+\n+impl Default for RustfmtConfig {\n+    fn default() -> Self {\n+        RustfmtConfig::Rustfmt { extra_args: Vec::new() }\n+    }\n+}\n+\n /// `WorldState` is the primary mutable state of the language server\n ///\n /// The most interesting components are `vfs`, which stores a consistent"}]}