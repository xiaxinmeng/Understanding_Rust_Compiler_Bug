{"sha": "a783912d2c48d2758c14db11d97fcbeca6e099a0", "node_id": "C_kwDOAAsO6NoAKGE3ODM5MTJkMmM0OGQyNzU4YzE0ZGIxMWQ5N2ZjYmVjYTZlMDk5YTA", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-10T23:39:21Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-17T19:59:40Z"}, "message": "Update term for use in more places\n\nReplace use of `ty()` on term and use it in more places. This will allow more flexibility in the\nfuture, but slightly worried it allows items which are consts which only accept types.", "tree": {"sha": "fd4a857d8c07d94ddc193baf4361c49ac6f94008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd4a857d8c07d94ddc193baf4361c49ac6f94008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a783912d2c48d2758c14db11d97fcbeca6e099a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a783912d2c48d2758c14db11d97fcbeca6e099a0", "html_url": "https://github.com/rust-lang/rust/commit/a783912d2c48d2758c14db11d97fcbeca6e099a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a783912d2c48d2758c14db11d97fcbeca6e099a0/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68", "html_url": "https://github.com/rust-lang/rust/commit/9fb0bff18e6de75328b1bdb63c0ab29e2e413b68"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "ca8bbbd8f9169de0aa1930275d798bbd3e83ed51", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a783912d2c48d2758c14db11d97fcbeca6e099a0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783912d2c48d2758c14db11d97fcbeca6e099a0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a783912d2c48d2758c14db11d97fcbeca6e099a0", "patch": "@@ -2141,12 +2141,16 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n+                        let assoc_ty = match projection_predicate.term {\n+                          ty::Term::Ty(ty) => ty,\n+                          ty::Term::Const(c) => c.ty,\n+                        };\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(projection_predicate.term.ty(), self_adt) {\n+                            if contains_adt_constructor(assoc_ty, self_adt) {\n                                 return;\n                             }\n-                        } else if contains_ty(projection_predicate.term.ty(), self_ty) {\n+                        } else if contains_ty(assoc_ty, self_ty) {\n                             return;\n                         }\n                     }"}, {"sha": "9162de3cceafa3b377c67020154ece42f4c170cd", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a783912d2c48d2758c14db11d97fcbeca6e099a0/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783912d2c48d2758c14db11d97fcbeca6e099a0/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=a783912d2c48d2758c14db11d97fcbeca6e099a0", "patch": "@@ -243,9 +243,10 @@ fn check_other_call_arg<'tcx>(\n         if if trait_predicate.def_id() == deref_trait_id {\n             if let [projection_predicate] = projection_predicates[..] {\n                 let normalized_ty =\n-                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term.ty());\n+                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term);\n                 implements_trait(cx, receiver_ty, deref_trait_id, &[])\n-                    && get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\") == Some(normalized_ty)\n+                    && get_associated_type(cx, receiver_ty, deref_trait_id,\n+                    \"Target\").map_or(false, |ty| ty::Term::Ty(ty) == normalized_ty)\n             } else {\n                 false\n             }"}, {"sha": "68156df2ecea879c1067e9c184131cbd53579d28", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a783912d2c48d2758c14db11d97fcbeca6e099a0/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783912d2c48d2758c14db11d97fcbeca6e099a0/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=a783912d2c48d2758c14db11d97fcbeca6e099a0", "patch": "@@ -98,9 +98,10 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n                         if trait_pred.self_ty() == inp;\n                         if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n                         then {\n-                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.term.ty()) {\n+                            if ord_preds.iter().any(|ord| Some(ord.self_ty()) ==\n+                            return_ty_pred.term.ty()) {\n                                 args_to_check.push((i, \"Ord\".to_string()));\n-                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.term.ty()) {\n+                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.term.ty().unwrap()) {\n                                 args_to_check.push((i, \"PartialOrd\".to_string()));\n                             }\n                         }"}]}