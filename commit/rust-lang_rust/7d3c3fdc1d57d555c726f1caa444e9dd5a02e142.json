{"sha": "7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkM2MzZmRjMWQ1N2Q1NTVjNzI2ZjFjYWE0NDRlOWRkNWEwMmUxNDI=", "commit": {"author": {"name": "Raoul Strackx", "email": "raoul.strackx@fortanix.com", "date": "2020-09-25T13:13:55Z"}, "committer": {"name": "Raoul Strackx", "email": "raoul.strackx@fortanix.com", "date": "2020-09-25T13:13:55Z"}, "message": "cleaning up code", "tree": {"sha": "821b58361129bcbfdc2b0132c381e750fe64fac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821b58361129bcbfdc2b0132c381e750fe64fac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "html_url": "https://github.com/rust-lang/rust/commit/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/comments", "author": {"login": "raoulstrackx", "id": 56830709, "node_id": "MDQ6VXNlcjU2ODMwNzA5", "avatar_url": "https://avatars.githubusercontent.com/u/56830709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raoulstrackx", "html_url": "https://github.com/raoulstrackx", "followers_url": "https://api.github.com/users/raoulstrackx/followers", "following_url": "https://api.github.com/users/raoulstrackx/following{/other_user}", "gists_url": "https://api.github.com/users/raoulstrackx/gists{/gist_id}", "starred_url": "https://api.github.com/users/raoulstrackx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raoulstrackx/subscriptions", "organizations_url": "https://api.github.com/users/raoulstrackx/orgs", "repos_url": "https://api.github.com/users/raoulstrackx/repos", "events_url": "https://api.github.com/users/raoulstrackx/events{/privacy}", "received_events_url": "https://api.github.com/users/raoulstrackx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raoulstrackx", "id": 56830709, "node_id": "MDQ6VXNlcjU2ODMwNzA5", "avatar_url": "https://avatars.githubusercontent.com/u/56830709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raoulstrackx", "html_url": "https://github.com/raoulstrackx", "followers_url": "https://api.github.com/users/raoulstrackx/followers", "following_url": "https://api.github.com/users/raoulstrackx/following{/other_user}", "gists_url": "https://api.github.com/users/raoulstrackx/gists{/gist_id}", "starred_url": "https://api.github.com/users/raoulstrackx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raoulstrackx/subscriptions", "organizations_url": "https://api.github.com/users/raoulstrackx/orgs", "repos_url": "https://api.github.com/users/raoulstrackx/repos", "events_url": "https://api.github.com/users/raoulstrackx/events{/privacy}", "received_events_url": "https://api.github.com/users/raoulstrackx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca26cca2919977cba79e7436c4f72fb6661ea9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca26cca2919977cba79e7436c4f72fb6661ea9b", "html_url": "https://github.com/rust-lang/rust/commit/8ca26cca2919977cba79e7436c4f72fb6661ea9b"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "79d82cf70d381374af922e500e62f26b1cab45ca", "filename": "src/test/assembly/x86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs?ref=7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "patch": "@@ -15,4 +15,3 @@ pub extern fn plus_one(r: &mut u64) {\n // CHECK: popq [[REGISTER:%[a-z]+]]\n // CHECK-NEXT: lfence\n // CHECK-NEXT: jmpq *[[REGISTER]]\n-"}, {"sha": "a21ef6b75894e441a60c2f965d030be0d486d99c", "filename": "src/test/assembly/x86_64-fortanix-unknown-sgx-lvi-generic-ret.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-ret.rs?ref=7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "patch": "@@ -10,4 +10,3 @@ pub extern fn myret() {}\n // CHECK: popq [[REGISTER:%[a-z]+]]\n // CHECK-NEXT: lfence\n // CHECK-NEXT: jmpq *[[REGISTER]]\n-"}, {"sha": "b8dc747d3b4cba7aaf5cbef19c7d05957c317483", "filename": "src/test/assembly/x86_64-fortanix-unknown-sgx-lvi-module-level-assembly.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ca26cca2919977cba79e7436c4f72fb6661ea9b/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-module-level-assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca26cca2919977cba79e7436c4f72fb6661ea9b/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-module-level-assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-module-level-assembly.rs?ref=8ca26cca2919977cba79e7436c4f72fb6661ea9b", "patch": "@@ -1,12 +0,0 @@\n-// Test LVI load hardening on SGX module level assembly code\n-\n-// assembly-output: emit-asm\n-// compile-flags: --crate-type staticlib\n-// only-x86_64-fortanix-unknown-sgx\n-\n-#![feature(global_asm)]\n-\n-global_asm!(\".start_module_asm:\n-            movq (%rdi), %rax\n-            retq\n-            .end_module_asm:\" );"}, {"sha": "dd76d4f303a9545a22320b2d04417176a0f13826", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/foo.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo.c?ref=7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "patch": "@@ -1,4 +1,3 @@\n-\n int cc_plus_one_c(int *arg) {\n     return *arg + 1;\n }\n@@ -9,7 +8,8 @@ int cc_plus_one_c_asm(int *arg) {\n     asm volatile ( \"    movl (%1), %0\\n\"\n                    \"    inc %0\\n\"\n                    \"    jmp 1f\\n\"\n-                   \"    retq\\n\"  // never executed, but a shortcut to determine how the assembler deals with `ret` instructions\n+                   \"    retq\\n\"  // never executed, but a shortcut to determine how\n+                                 // the assembler deals with `ret` instructions\n                    \"1:\\n\"\n                    : \"=r\"(value)\n                    : \"r\"(arg) );"}, {"sha": "ac6f64ac413d0d2f3b44f971f67178f9871191f8", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/foo_cxx.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_cxx.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_cxx.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Ffoo_cxx.cpp?ref=7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "patch": "@@ -11,7 +11,8 @@ int cc_plus_one_cxx_asm(int *arg) {\n     asm volatile ( \"    movl (%1), %0\\n\"\n                    \"    inc %0\\n\"\n                    \"    jmp 1f\\n\"\n-                   \"    retq\\n\"  // never executed, but a shortcut to determine how the assembler deals with `ret` instructions\n+                   \"    retq\\n\"  // never executed, but a shortcut to determine how\n+                                 // the assembler deals with `ret` instructions\n                    \"1:\\n\"\n                    : \"=r\"(value)\n                    : \"r\"(arg) );"}, {"sha": "c3b731a2d50966696400419cf046b77ecb00b44c", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/src/foo.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo.c?ref=7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "patch": "@@ -8,7 +8,8 @@ int cmake_plus_one_c_asm(int *arg) {\n     asm volatile ( \"    movl (%1), %0\\n\"\n                    \"    inc %0\\n\"\n                    \"    jmp 1f\\n\"\n-                   \"    retq\\n\"  // never executed, but a shortcut to determine how the assembler deals with `ret` instructions\n+                   \"    retq\\n\"  // never executed, but a shortcut to determine how\n+                                 // the assembler deals with `ret` instructions\n                    \"1:\\n\"\n                    : \"=r\"(value)\n                    : \"r\"(arg) );"}, {"sha": "824e2afebcc78cd3cc01b9fbdb5089fa7f92f58e", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/src/foo_cxx.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_cxx.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_cxx.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Flibcmake_foo%2Fsrc%2Ffoo_cxx.cpp?ref=7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "patch": "@@ -11,7 +11,8 @@ int cmake_plus_one_cxx_asm(int *arg) {\n     asm volatile ( \"    movl (%1), %0\\n\"\n                    \"    inc %0\\n\"\n                    \"    jmp 1f\\n\"\n-                   \"    retq\\n\"  // never executed, but a shortcut to determine how the assembler deals with `ret` instructions\n+                   \"    retq\\n\"  // never executed, but a shortcut to determine how\n+                                 // the assembler deals with `ret` instructions\n                    \"1:\\n\"\n                    : \"=r\"(value)\n                    : \"r\"(arg) );"}, {"sha": "8e91a8d842c6247575ec2090788f0bf86a7d35f5", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/src/main.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fenclave%2Fsrc%2Fmain.rs?ref=7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "patch": "@@ -28,20 +28,21 @@ extern {\n \n fn main() {\n     let value : u32 = 41;\n-    \n+    let question = \"Answer to the Ultimate Question of Life, the Universe, and Everything:\";\n+\n     unsafe{\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", rust_plus_one_global_asm(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cc_plus_one_c(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cc_plus_one_c_asm(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cc_plus_one_cxx(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cc_plus_one_cxx_asm(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cc_plus_one_asm(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cmake_plus_one_c(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cmake_plus_one_c_asm(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cmake_plus_one_cxx(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cmake_plus_one_cxx_asm(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cmake_plus_one_c_global_asm(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cmake_plus_one_cxx_global_asm(&value));\n-        println!(\"Answer to the Ultimate Question of Life, the Universe, and Everything: {}!\", cmake_plus_one_asm(&value));\n+        println!(\"{}: {}!\", question,rust_plus_one_global_asm(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_c(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_c_asm(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_cxx(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_cxx_asm(&value));\n+        println!(\"{}: {}!\", question,cc_plus_one_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_c(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_c_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_cxx(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_cxx_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_c_global_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_cxx_global_asm(&value));\n+        println!(\"{}: {}!\", question,cmake_plus_one_asm(&value));\n     }\n }"}, {"sha": "ec93c98016078f5f25a962ef9bc4542adaba4caf", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/script.sh", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c3fdc1d57d555c726f1caa444e9dd5a02e142/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh?ref=7d3c3fdc1d57d555c726f1caa444e9dd5a02e142", "patch": "@@ -24,8 +24,9 @@ function check {\n     local asm=$(mktemp)\n     local objdump=\"${BUILD_DIR}/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-objdump\"\n     local filecheck=\"${BUILD_DIR}/x86_64-unknown-linux-gnu/llvm/build/bin/FileCheck\"\n-    \n-    ${objdump} --disassemble-symbols=${func} --demangle ${WORK_DIR}/enclave/target/x86_64-fortanix-unknown-sgx/debug/enclave > ${asm}\n+\n+    ${objdump} --disassemble-symbols=${func} --demangle \\\n+      ${WORK_DIR}/enclave/target/x86_64-fortanix-unknown-sgx/debug/enclave > ${asm}\n     ${filecheck} --input-file ${asm} ${checks}\n }\n \n@@ -34,19 +35,23 @@ build\n check unw_getcontext unw_getcontext.checks\n check \"libunwind::Registers_x86_64::jumpto()\" jumpto.checks\n check \"std::io::stdio::_print::h87f0c238421c45bc\" print.checks\n-check rust_plus_one_global_asm rust_plus_one_global_asm.checks || echo \"warning: module level assembly currently not hardened\"\n+check rust_plus_one_global_asm rust_plus_one_global_asm.checks \\\n+  || echo \"warning: module level assembly currently not hardened\"\n \n check cc_plus_one_c cc_plus_one_c.checks\n check cc_plus_one_c_asm cc_plus_one_c_asm.checks\n check cc_plus_one_cxx cc_plus_one_cxx.checks\n check cc_plus_one_cxx_asm cc_plus_one_cxx_asm.checks\n-check cc_plus_one_asm cc_plus_one_asm.checks || echo \"warning: the cc crate forwards assembly files to the CC compiler.\\\n- Clang uses its own intergrated assembler, which does not include the LVI passes.\"\n+check cc_plus_one_asm cc_plus_one_asm.checks \\\n+  || echo \"warning: the cc crate forwards assembly files to the CC compiler.\" \\\n+           \"Clang uses its own intergrated assembler, which does not include the LVI passes.\"\n \n check cmake_plus_one_c cmake_plus_one_c.checks\n check cmake_plus_one_c_asm cmake_plus_one_c_asm.checks\n-check cmake_plus_one_c_global_asm cmake_plus_one_c_global_asm.checks || echo \"warning: module level assembly currently not hardened\"\n+check cmake_plus_one_c_global_asm cmake_plus_one_c_global_asm.checks \\\n+  || echo \"warning: module level assembly currently not hardened\"\n check cmake_plus_one_cxx cmake_plus_one_cxx.checks\n check cmake_plus_one_cxx_asm cmake_plus_one_cxx_asm.checks\n-check cmake_plus_one_cxx_global_asm cmake_plus_one_cxx_global_asm.checks || echo \"warning: module level assembly currently not hardened\"\n+check cmake_plus_one_cxx_global_asm cmake_plus_one_cxx_global_asm.checks \\\n+  || echo \"warning: module level assembly currently not hardened\"\n check cmake_plus_one_asm cmake_plus_one_asm.checks"}]}