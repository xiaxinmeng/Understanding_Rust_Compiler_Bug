{"sha": "843f90cbb72758a091db25653ac515098f18399d", "node_id": "C_kwDOAAsO6NoAKDg0M2Y5MGNiYjcyNzU4YTA5MWRiMjU2NTNhYzUxNTA5OGYxODM5OWQ", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-04-18T11:37:54Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-06-06T11:10:14Z"}, "message": "Add some more tests\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "548faa45ebbace0fa04f71f01d583611e90ed0ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548faa45ebbace0fa04f71f01d583611e90ed0ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/843f90cbb72758a091db25653ac515098f18399d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/843f90cbb72758a091db25653ac515098f18399d", "html_url": "https://github.com/rust-lang/rust/commit/843f90cbb72758a091db25653ac515098f18399d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/843f90cbb72758a091db25653ac515098f18399d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0ca2537f0f8549e5b24ff7d0b849b61aba7414", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0ca2537f0f8549e5b24ff7d0b849b61aba7414", "html_url": "https://github.com/rust-lang/rust/commit/2e0ca2537f0f8549e5b24ff7d0b849b61aba7414"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "cdc6fadbab7074ddcd521b92523a0a650d1fa87b", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/843f90cbb72758a091db25653ac515098f18399d/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843f90cbb72758a091db25653ac515098f18399d/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=843f90cbb72758a091db25653ac515098f18399d", "patch": "@@ -138,12 +138,15 @@ struct SomeConcreteType {\n }\n \n impl Provider for SomeConcreteType {\n-    fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n-        req.provide_ref::<String>(&self.some_string)\n+    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+        demand\n+            .provide_ref::<String>(&self.some_string)\n+            .provide_ref::<str>(&self.some_string)\n             .provide_value::<String, _>(|| \"bye\".to_owned());\n     }\n }\n \n+// Test the provide and request mechanisms with a by-reference trait object.\n #[test]\n fn test_provider() {\n     let obj: &dyn Provider = &SomeConcreteType { some_string: \"hello\".to_owned() };\n@@ -152,3 +155,40 @@ fn test_provider() {\n     assert_eq!(&*request_value::<String, _>(obj).unwrap(), \"bye\");\n     assert_eq!(request_value::<u8, _>(obj), None);\n }\n+\n+// Test the provide and request mechanisms with a boxed trait object.\n+#[test]\n+fn test_provider_boxed() {\n+    let obj: Box<dyn Provider> = Box::new(SomeConcreteType { some_string: \"hello\".to_owned() });\n+\n+    assert_eq!(&**request_ref::<String, _>(&*obj).unwrap(), \"hello\");\n+    assert_eq!(&*request_value::<String, _>(&*obj).unwrap(), \"bye\");\n+    assert_eq!(request_value::<u8, _>(&*obj), None);\n+}\n+\n+// Test the provide and request mechanisms with a concrete object.\n+#[test]\n+fn test_provider_concrete() {\n+    let obj = SomeConcreteType { some_string: \"hello\".to_owned() };\n+\n+    assert_eq!(&**request_ref::<String, _>(&obj).unwrap(), \"hello\");\n+    assert_eq!(&*request_value::<String, _>(&obj).unwrap(), \"bye\");\n+    assert_eq!(request_value::<u8, _>(&obj), None);\n+}\n+\n+trait OtherTrait: Provider {}\n+\n+impl OtherTrait for SomeConcreteType {}\n+\n+impl dyn OtherTrait {\n+    fn get_ref<T: 'static + ?Sized>(&self) -> Option<&T> {\n+        request_ref::<T, _>(self)\n+    }\n+}\n+\n+// Test the provide and request mechanisms via an intermediate trait.\n+#[test]\n+fn test_provider_intermediate() {\n+    let obj: &dyn OtherTrait = &SomeConcreteType { some_string: \"hello\".to_owned() };\n+    assert_eq!(obj.get_ref::<str>().unwrap(), \"hello\");\n+}"}]}