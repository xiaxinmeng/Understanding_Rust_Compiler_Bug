{"sha": "17b60b8738735d8d64d03601d1dad4001d1e5733", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YjYwYjg3Mzg3MzVkOGQ2NGQwMzYwMWQxZGFkNDAwMWQxZTU3MzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T10:49:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T10:49:29Z"}, "message": "Auto merge of #83129 - LeSeulArtichaut:thir-unsafeck, r=nikomatsakis\n\nIntroduce the beginning of a THIR unsafety checker\n\nThis poses the foundations for the THIR unsafety checker, so that it can be implemented incrementally:\n- implements a rudimentary `Visitor` for the THIR (which will definitely need some tweaking in the future)\n- introduces a new `-Zthir-unsafeck` flag which tells the compiler to use THIR unsafeck instead of MIR unsafeck\n- implements detection of unsafe functions\n- adds revisions to the UI tests to test THIR unsafeck alongside MIR unsafeck\n\nThis uses a very simple query design, where bodies are unsafety-checked on a body per body basis. This however has some big flaws:\n- the unsafety-checker builds the THIR itself, which means a lot of work is duplicated with MIR building constructing its own copy of the THIR\n- unsafety-checking closures is currently completely wrong: closures should take into account the \"safety context\" in which they are created, here we are considering that closures are always a safe context\n\nI had intended to fix these problems in follow-up PRs since they are always gated under the `-Zthir-unsafeck` flag (which is explicitely noted to be unsound).\n\nr? `@nikomatsakis`\ncc https://github.com/rust-lang/project-thir-unsafeck/issues/3 https://github.com/rust-lang/project-thir-unsafeck/issues/7", "tree": {"sha": "3e60cd21ed4bc546ed496bcebdaa12ddf3fcd930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e60cd21ed4bc546ed496bcebdaa12ddf3fcd930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b60b8738735d8d64d03601d1dad4001d1e5733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b60b8738735d8d64d03601d1dad4001d1e5733", "html_url": "https://github.com/rust-lang/rust/commit/17b60b8738735d8d64d03601d1dad4001d1e5733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b60b8738735d8d64d03601d1dad4001d1e5733/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703f2e1685a63c9718bcc3b09eb33a24334a7541", "url": "https://api.github.com/repos/rust-lang/rust/commits/703f2e1685a63c9718bcc3b09eb33a24334a7541", "html_url": "https://github.com/rust-lang/rust/commit/703f2e1685a63c9718bcc3b09eb33a24334a7541"}, {"sha": "985fb4caa076e6c62c45de51aa43a03e97d828f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/985fb4caa076e6c62c45de51aa43a03e97d828f3", "html_url": "https://github.com/rust-lang/rust/commit/985fb4caa076e6c62c45de51aa43a03e97d828f3"}], "stats": {"total": 1065, "additions": 1013, "deletions": 52}, "files": [{"sha": "06bec91501fd58253f54f98559154483be701581", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -876,7 +876,11 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n \n     sess.time(\"MIR_effect_checking\", || {\n         for def_id in tcx.body_owners() {\n-            mir::transform::check_unsafety::check_unsafety(tcx, def_id);\n+            if tcx.sess.opts.debugging_opts.thir_unsafeck {\n+                tcx.ensure().thir_check_unsafety(def_id);\n+            } else {\n+                mir::transform::check_unsafety::check_unsafety(tcx, def_id);\n+            }\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n                 tcx.ensure()"}, {"sha": "bea7d0fb81f95d924292e977b1345d5e2a491637", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -736,6 +736,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(symbol_mangling_version, Some(SymbolManglingVersion::V0));\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));\n+    tracked!(thir_unsafeck, true);\n     tracked!(tune_cpu, Some(String::from(\"abc\")));\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(trap_unreachable, Some(false));"}, {"sha": "fea2aec38a1672a6ea7d448397edbc69b60d240b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -611,6 +611,19 @@ rustc_queries! {\n         }\n     }\n \n+    /// Unsafety-check this `LocalDefId` with THIR unsafeck. This should be\n+    /// used with `-Zthir-unsafeck`.\n+    query thir_check_unsafety(key: LocalDefId) {\n+        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        cache_on_disk_if { true }\n+    }\n+    query thir_check_unsafety_for_const_arg(key: (LocalDefId, DefId)) {\n+        desc {\n+            |tcx| \"unsafety-checking the const argument `{}`\",\n+            tcx.def_path_str(key.0.to_def_id())\n+        }\n+    }\n+\n     /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error.\n     ///\n     /// Unsafety checking is executed for each method separately, but we only want"}, {"sha": "933362578f9fcb3fae2dceeb866c7a6ef3bcd999", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,334 @@\n+use crate::thir::visit::{self, Visitor};\n+use crate::thir::*;\n+\n+use rustc_errors::struct_span_err;\n+use rustc_hir as hir;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n+use rustc_session::lint::Level;\n+use rustc_span::def_id::{DefId, LocalDefId};\n+use rustc_span::Span;\n+\n+struct UnsafetyVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    /// The `HirId` of the current scope, which would be the `HirId`\n+    /// of the current HIR node, modulo adjustments. Used for lint levels.\n+    hir_context: hir::HirId,\n+    /// The current \"safety context\". This notably tracks whether we are in an\n+    /// `unsafe` block, and whether it has been used.\n+    safety_context: SafetyContext,\n+    body_unsafety: BodyUnsafety,\n+}\n+\n+impl<'tcx> UnsafetyVisitor<'tcx> {\n+    fn in_safety_context<R>(\n+        &mut self,\n+        safety_context: SafetyContext,\n+        f: impl FnOnce(&mut Self) -> R,\n+    ) {\n+        if let (\n+            SafetyContext::UnsafeBlock { span: enclosing_span, .. },\n+            SafetyContext::UnsafeBlock { span: block_span, hir_id, .. },\n+        ) = (self.safety_context, safety_context)\n+        {\n+            self.warn_unused_unsafe(\n+                hir_id,\n+                block_span,\n+                Some(self.tcx.sess.source_map().guess_head_span(enclosing_span)),\n+            );\n+            f(self);\n+        } else {\n+            let prev_context = self.safety_context;\n+            self.safety_context = safety_context;\n+\n+            f(self);\n+\n+            if let SafetyContext::UnsafeBlock { used: false, span, hir_id } = self.safety_context {\n+                self.warn_unused_unsafe(hir_id, span, self.body_unsafety.unsafe_fn_sig_span());\n+            }\n+            self.safety_context = prev_context;\n+            return;\n+        }\n+    }\n+\n+    fn requires_unsafe(&mut self, span: Span, kind: UnsafeOpKind) {\n+        let (description, note) = kind.description_and_note();\n+        let unsafe_op_in_unsafe_fn_allowed = self.unsafe_op_in_unsafe_fn_allowed();\n+        match self.safety_context {\n+            SafetyContext::UnsafeBlock { ref mut used, .. } => {\n+                if !self.body_unsafety.is_unsafe() || !unsafe_op_in_unsafe_fn_allowed {\n+                    // Mark this block as useful\n+                    *used = true;\n+                }\n+            }\n+            SafetyContext::UnsafeFn if unsafe_op_in_unsafe_fn_allowed => {}\n+            SafetyContext::UnsafeFn => {\n+                // unsafe_op_in_unsafe_fn is disallowed\n+                if kind == BorrowOfPackedField {\n+                    // FIXME handle borrows of packed fields\n+                } else {\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0133,\n+                        \"{} is unsafe and requires unsafe block\",\n+                        description,\n+                    )\n+                    .span_label(span, description)\n+                    .note(note)\n+                    .emit();\n+                }\n+            }\n+            SafetyContext::Safe => {\n+                if kind == BorrowOfPackedField {\n+                    // FIXME handle borrows of packed fields\n+                } else {\n+                    let fn_sugg = if unsafe_op_in_unsafe_fn_allowed { \" function or\" } else { \"\" };\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0133,\n+                        \"{} is unsafe and requires unsafe{} block\",\n+                        description,\n+                        fn_sugg,\n+                    )\n+                    .span_label(span, description)\n+                    .note(note)\n+                    .emit();\n+                }\n+            }\n+        }\n+    }\n+\n+    fn warn_unused_unsafe(\n+        &self,\n+        hir_id: hir::HirId,\n+        block_span: Span,\n+        enclosing_span: Option<Span>,\n+    ) {\n+        let block_span = self.tcx.sess.source_map().guess_head_span(block_span);\n+        self.tcx.struct_span_lint_hir(UNUSED_UNSAFE, hir_id, block_span, |lint| {\n+            let msg = \"unnecessary `unsafe` block\";\n+            let mut db = lint.build(msg);\n+            db.span_label(block_span, msg);\n+            if let Some(enclosing_span) = enclosing_span {\n+                db.span_label(\n+                    enclosing_span,\n+                    format!(\"because it's nested under this `unsafe` block\"),\n+                );\n+            }\n+            db.emit();\n+        });\n+    }\n+\n+    /// Whether the `unsafe_op_in_unsafe_fn` lint is `allow`ed at the current HIR node.\n+    fn unsafe_op_in_unsafe_fn_allowed(&self) -> bool {\n+        self.tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, self.hir_context).0 == Level::Allow\n+    }\n+}\n+\n+impl<'thir, 'tcx> Visitor<'thir, 'tcx> for UnsafetyVisitor<'tcx> {\n+    fn visit_block(&mut self, block: &Block<'thir, 'tcx>) {\n+        if let BlockSafety::ExplicitUnsafe(hir_id) = block.safety_mode {\n+            self.in_safety_context(\n+                SafetyContext::UnsafeBlock { span: block.span, hir_id, used: false },\n+                |this| visit::walk_block(this, block),\n+            );\n+        } else {\n+            visit::walk_block(self, block);\n+        }\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'thir Expr<'thir, 'tcx>) {\n+        match expr.kind {\n+            ExprKind::Scope { value, lint_level: LintLevel::Explicit(hir_id), region_scope: _ } => {\n+                let prev_id = self.hir_context;\n+                self.hir_context = hir_id;\n+                self.visit_expr(value);\n+                self.hir_context = prev_id;\n+                return;\n+            }\n+            ExprKind::Call { fun, ty: _, args: _, from_hir_call: _, fn_span: _ } => {\n+                if fun.ty.fn_sig(self.tcx).unsafety() == hir::Unsafety::Unsafe {\n+                    self.requires_unsafe(expr.span, CallToUnsafeFunction);\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_expr(self, expr);\n+    }\n+}\n+\n+#[derive(Clone, Copy)]\n+enum SafetyContext {\n+    Safe,\n+    UnsafeFn,\n+    UnsafeBlock { span: Span, hir_id: hir::HirId, used: bool },\n+}\n+\n+#[derive(Clone, Copy)]\n+enum BodyUnsafety {\n+    /// The body is not unsafe.\n+    Safe,\n+    /// The body is an unsafe function. The span points to\n+    /// the signature of the function.\n+    Unsafe(Span),\n+}\n+\n+impl BodyUnsafety {\n+    /// Returns whether the body is unsafe.\n+    fn is_unsafe(&self) -> bool {\n+        matches!(self, BodyUnsafety::Unsafe(_))\n+    }\n+\n+    /// If the body is unsafe, returns the `Span` of its signature.\n+    fn unsafe_fn_sig_span(self) -> Option<Span> {\n+        match self {\n+            BodyUnsafety::Unsafe(span) => Some(span),\n+            BodyUnsafety::Safe => None,\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq)]\n+enum UnsafeOpKind {\n+    CallToUnsafeFunction,\n+    #[allow(dead_code)] // FIXME\n+    UseOfInlineAssembly,\n+    #[allow(dead_code)] // FIXME\n+    InitializingTypeWith,\n+    #[allow(dead_code)] // FIXME\n+    CastOfPointerToInt,\n+    #[allow(dead_code)] // FIXME\n+    BorrowOfPackedField,\n+    #[allow(dead_code)] // FIXME\n+    UseOfMutableStatic,\n+    #[allow(dead_code)] // FIXME\n+    UseOfExternStatic,\n+    #[allow(dead_code)] // FIXME\n+    DerefOfRawPointer,\n+    #[allow(dead_code)] // FIXME\n+    AssignToDroppingUnionField,\n+    #[allow(dead_code)] // FIXME\n+    AccessToUnionField,\n+    #[allow(dead_code)] // FIXME\n+    MutationOfLayoutConstrainedField,\n+    #[allow(dead_code)] // FIXME\n+    BorrowOfLayoutConstrainedField,\n+    #[allow(dead_code)] // FIXME\n+    CallToFunctionWith,\n+}\n+\n+use UnsafeOpKind::*;\n+\n+impl UnsafeOpKind {\n+    pub fn description_and_note(&self) -> (&'static str, &'static str) {\n+        match self {\n+            CallToUnsafeFunction => (\n+                \"call to unsafe function\",\n+                \"consult the function's documentation for information on how to avoid undefined \\\n+                 behavior\",\n+            ),\n+            UseOfInlineAssembly => (\n+                \"use of inline assembly\",\n+                \"inline assembly is entirely unchecked and can cause undefined behavior\",\n+            ),\n+            InitializingTypeWith => (\n+                \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+                \"initializing a layout restricted type's field with a value outside the valid \\\n+                 range is undefined behavior\",\n+            ),\n+            CastOfPointerToInt => {\n+                (\"cast of pointer to int\", \"casting pointers to integers in constants\")\n+            }\n+            BorrowOfPackedField => (\n+                \"borrow of packed field\",\n+                \"fields of packed structs might be misaligned: dereferencing a misaligned pointer \\\n+                 or even just creating a misaligned reference is undefined behavior\",\n+            ),\n+            UseOfMutableStatic => (\n+                \"use of mutable static\",\n+                \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n+                 races will cause undefined behavior\",\n+            ),\n+            UseOfExternStatic => (\n+                \"use of extern static\",\n+                \"extern statics are not controlled by the Rust type system: invalid data, \\\n+                 aliasing violations or data races will cause undefined behavior\",\n+            ),\n+            DerefOfRawPointer => (\n+                \"dereference of raw pointer\",\n+                \"raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules \\\n+                 and cause data races: all of these are undefined behavior\",\n+            ),\n+            AssignToDroppingUnionField => (\n+                \"assignment to union field that might need dropping\",\n+                \"the previous content of the field will be dropped, which causes undefined \\\n+                 behavior if the field was not properly initialized\",\n+            ),\n+            AccessToUnionField => (\n+                \"access to union field\",\n+                \"the field may not be properly initialized: using uninitialized data will cause \\\n+                 undefined behavior\",\n+            ),\n+            MutationOfLayoutConstrainedField => (\n+                \"mutation of layout constrained field\",\n+                \"mutating layout constrained fields cannot statically be checked for valid values\",\n+            ),\n+            BorrowOfLayoutConstrainedField => (\n+                \"borrow of layout constrained field with interior mutability\",\n+                \"references to fields of layout constrained fields lose the constraints. Coupled \\\n+                 with interior mutability, the field can be changed to invalid values\",\n+            ),\n+            CallToFunctionWith => (\n+                \"call to function with `#[target_feature]`\",\n+                \"can only be called if the required target features are available\",\n+            ),\n+        }\n+    }\n+}\n+\n+// FIXME: checking unsafety for closures should be handled by their parent body,\n+// as they inherit their \"safety context\" from their declaration site.\n+pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, thir: &Expr<'_, 'tcx>, hir_id: hir::HirId) {\n+    let body_unsafety = tcx.hir().fn_sig_by_hir_id(hir_id).map_or(BodyUnsafety::Safe, |fn_sig| {\n+        if fn_sig.header.unsafety == hir::Unsafety::Unsafe {\n+            BodyUnsafety::Unsafe(fn_sig.span)\n+        } else {\n+            BodyUnsafety::Safe\n+        }\n+    });\n+    let safety_context =\n+        if body_unsafety.is_unsafe() { SafetyContext::UnsafeFn } else { SafetyContext::Safe };\n+    let mut visitor = UnsafetyVisitor { tcx, safety_context, hir_context: hir_id, body_unsafety };\n+    visitor.visit_expr(thir);\n+}\n+\n+crate fn thir_check_unsafety_inner<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n+    let body_id = tcx.hir().body_owned_by(hir_id);\n+    let body = tcx.hir().body(body_id);\n+\n+    let arena = Arena::default();\n+    let thir = cx::build_thir(tcx, def, &arena, &body.value);\n+    check_unsafety(tcx, thir, hir_id);\n+}\n+\n+crate fn thir_check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n+    if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n+        tcx.thir_check_unsafety_for_const_arg(def)\n+    } else {\n+        thir_check_unsafety_inner(tcx, ty::WithOptConstParam::unknown(def_id))\n+    }\n+}\n+\n+crate fn thir_check_unsafety_for_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (did, param_did): (LocalDefId, DefId),\n+) {\n+    thir_check_unsafety_inner(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n+}"}, {"sha": "d4e9a0a31698583cb15e0c94e45353f06855d820", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -19,6 +19,7 @@ extern crate tracing;\n extern crate rustc_middle;\n \n mod build;\n+mod check_unsafety;\n mod lints;\n pub mod thir;\n \n@@ -28,4 +29,6 @@ pub fn provide(providers: &mut Providers) {\n     providers.check_match = thir::pattern::check_match;\n     providers.lit_to_const = thir::constant::lit_to_const;\n     providers.mir_built = build::mir_built;\n+    providers.thir_check_unsafety = check_unsafety::thir_check_unsafety;\n+    providers.thir_check_unsafety_for_const_arg = check_unsafety::thir_check_unsafety_for_const_arg;\n }"}, {"sha": "9bcb000920c04936973eae3cd433744a7f75b3df", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -29,6 +29,7 @@ mod arena;\n pub use arena::Arena;\n \n mod util;\n+pub mod visit;\n \n #[derive(Copy, Clone, Debug)]\n pub enum LintLevel {"}, {"sha": "9c5b07e2b2ada14e6cf741d69e2984bdc66d0ef3", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,186 @@\n+use crate::thir::*;\n+\n+pub trait Visitor<'thir, 'tcx>: Sized {\n+    fn visit_expr(&mut self, expr: &'thir Expr<'thir, 'tcx>) {\n+        walk_expr(self, expr);\n+    }\n+\n+    fn visit_stmt(&mut self, stmt: &'thir Stmt<'thir, 'tcx>) {\n+        walk_stmt(self, stmt);\n+    }\n+\n+    fn visit_block(&mut self, block: &Block<'thir, 'tcx>) {\n+        walk_block(self, block);\n+    }\n+\n+    fn visit_arm(&mut self, arm: &'thir Arm<'thir, 'tcx>) {\n+        walk_arm(self, arm);\n+    }\n+\n+    fn visit_const(&mut self, _cnst: &'tcx Const<'tcx>) {}\n+}\n+\n+pub fn walk_expr<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n+    visitor: &mut V,\n+    expr: &'thir Expr<'thir, 'tcx>,\n+) {\n+    use ExprKind::*;\n+    match expr.kind {\n+        Scope { value, region_scope: _, lint_level: _ } => visitor.visit_expr(value),\n+        Box { value } => visitor.visit_expr(value),\n+        If { cond, then, else_opt } => {\n+            visitor.visit_expr(cond);\n+            visitor.visit_expr(then);\n+            if let Some(else_expr) = else_opt {\n+                visitor.visit_expr(else_expr);\n+            }\n+        }\n+        Call { fun, args, ty: _, from_hir_call: _, fn_span: _ } => {\n+            visitor.visit_expr(fun);\n+            for arg in args {\n+                visitor.visit_expr(arg);\n+            }\n+        }\n+        Deref { arg } => visitor.visit_expr(arg),\n+        Binary { lhs, rhs, op: _ } | LogicalOp { lhs, rhs, op: _ } => {\n+            visitor.visit_expr(lhs);\n+            visitor.visit_expr(rhs);\n+        }\n+        Unary { arg, op: _ } => visitor.visit_expr(arg),\n+        Cast { source } => visitor.visit_expr(source),\n+        Use { source } => visitor.visit_expr(source),\n+        NeverToAny { source } => visitor.visit_expr(source),\n+        Pointer { source, cast: _ } => visitor.visit_expr(source),\n+        Loop { body } => visitor.visit_expr(body),\n+        Match { scrutinee, arms } => {\n+            visitor.visit_expr(scrutinee);\n+            for arm in arms {\n+                visitor.visit_arm(arm);\n+            }\n+        }\n+        Block { ref body } => visitor.visit_block(body),\n+        Assign { lhs, rhs } | AssignOp { lhs, rhs, op: _ } => {\n+            visitor.visit_expr(lhs);\n+            visitor.visit_expr(rhs);\n+        }\n+        Field { lhs, name: _ } => visitor.visit_expr(lhs),\n+        Index { lhs, index } => {\n+            visitor.visit_expr(lhs);\n+            visitor.visit_expr(index);\n+        }\n+        VarRef { id: _ } | UpvarRef { closure_def_id: _, var_hir_id: _ } => {}\n+        Borrow { arg, borrow_kind: _ } => visitor.visit_expr(arg),\n+        AddressOf { arg, mutability: _ } => visitor.visit_expr(arg),\n+        Break { value, label: _ } => {\n+            if let Some(value) = value {\n+                visitor.visit_expr(value)\n+            }\n+        }\n+        Continue { label: _ } => {}\n+        Return { value } => {\n+            if let Some(value) = value {\n+                visitor.visit_expr(value)\n+            }\n+        }\n+        ConstBlock { value } => visitor.visit_const(value),\n+        Repeat { value, count } => {\n+            visitor.visit_expr(value);\n+            visitor.visit_const(count);\n+        }\n+        Array { fields } | Tuple { fields } => {\n+            for field in fields {\n+                visitor.visit_expr(field);\n+            }\n+        }\n+        Adt { fields, ref base, adt_def: _, variant_index: _, substs: _, user_ty: _ } => {\n+            for field in fields {\n+                visitor.visit_expr(field.expr);\n+            }\n+            if let Some(base) = base {\n+                visitor.visit_expr(base.base);\n+            }\n+        }\n+        PlaceTypeAscription { source, user_ty: _ } | ValueTypeAscription { source, user_ty: _ } => {\n+            visitor.visit_expr(source)\n+        }\n+        Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n+        Literal { literal, user_ty: _, const_id: _ } => visitor.visit_const(literal),\n+        StaticRef { literal, def_id: _ } => visitor.visit_const(literal),\n+        InlineAsm { operands, template: _, options: _, line_spans: _ } => {\n+            for op in operands {\n+                use InlineAsmOperand::*;\n+                match op {\n+                    In { expr, reg: _ }\n+                    | Out { expr: Some(expr), reg: _, late: _ }\n+                    | InOut { expr, reg: _, late: _ }\n+                    | SymFn { expr } => visitor.visit_expr(expr),\n+                    SplitInOut { in_expr, out_expr, reg: _, late: _ } => {\n+                        visitor.visit_expr(in_expr);\n+                        if let Some(out_expr) = out_expr {\n+                            visitor.visit_expr(out_expr);\n+                        }\n+                    }\n+                    Out { expr: None, reg: _, late: _ }\n+                    | Const { value: _, span: _ }\n+                    | SymStatic { def_id: _ } => {}\n+                }\n+            }\n+        }\n+        ThreadLocalRef(_) => {}\n+        LlvmInlineAsm { outputs, inputs, asm: _ } => {\n+            for out_expr in outputs {\n+                visitor.visit_expr(out_expr);\n+            }\n+            for in_expr in inputs {\n+                visitor.visit_expr(in_expr);\n+            }\n+        }\n+        Yield { value } => visitor.visit_expr(value),\n+    }\n+}\n+\n+pub fn walk_stmt<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n+    visitor: &mut V,\n+    stmt: &'thir Stmt<'thir, 'tcx>,\n+) {\n+    match stmt.kind {\n+        StmtKind::Expr { expr, scope: _ } => visitor.visit_expr(expr),\n+        StmtKind::Let {\n+            initializer,\n+            remainder_scope: _,\n+            init_scope: _,\n+            pattern: _,\n+            lint_level: _,\n+        } => {\n+            if let Some(init) = initializer {\n+                visitor.visit_expr(init);\n+            }\n+        }\n+    }\n+}\n+\n+pub fn walk_block<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n+    visitor: &mut V,\n+    block: &Block<'thir, 'tcx>,\n+) {\n+    for stmt in block.stmts {\n+        visitor.visit_stmt(stmt);\n+    }\n+    if let Some(expr) = block.expr {\n+        visitor.visit_expr(expr);\n+    }\n+}\n+\n+pub fn walk_arm<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n+    visitor: &mut V,\n+    arm: &'thir Arm<'thir, 'tcx>,\n+) {\n+    match arm.guard {\n+        Some(Guard::If(expr)) => visitor.visit_expr(expr),\n+        Some(Guard::IfLet(ref _pat, expr)) => {\n+            visitor.visit_expr(expr);\n+        }\n+        None => {}\n+    }\n+    visitor.visit_expr(arm.body);\n+}"}, {"sha": "c9f95ed1224d0d23312b94e6c8952b491dd0c110", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1254,6 +1254,8 @@ options! {\n         \"select processor to schedule for (`rustc --print target-cpus` for details)\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n+    thir_unsafeck: bool = (false, parse_bool, [TRACKED],\n+        \"use the work-in-progress THIR unsafety checker. NOTE: this is unsound (default: no)\"),\n     /// We default to 1 here since we want to behave like\n     /// a sequential compiler for now. This'll likely be adjusted\n     /// in the future. Note that -Zthreads=0 is the way to get"}, {"sha": "d22413beecbcf4e6516262a71a320ec7322d7129", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.mir.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,29 +1,29 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:12:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:13:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:17:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:18:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function", "previous_filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.stderr"}, {"sha": "2ed343b4a07fcbece8420c9a4509f1635cf0af30", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n struct S;\n "}, {"sha": "d22413beecbcf4e6516262a71a320ec7322d7129", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.thir.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,35 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n+   |\n+LL |     S::f();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n+   |\n+LL |     S::f();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "2f9c7973b5a1647840f647eee5f3d842239ed887", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.mir.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:12:23\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:15:23\n    |\n LL |     let result: i32 = foo(5, 5);\n    |                       ^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:21:23\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:24:23\n    |\n LL |     let result: i32 = foo(5, 5);\n    |                       ^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.stderr"}, {"sha": "bdb3eb23c38f84124d67dc39d7ce40b2f2d54183", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n // Ensure we get unsafe function after coercion\n unsafe fn add(a: i32, b: i32) -> i32 {\n     a + b"}, {"sha": "2f9c7973b5a1647840f647eee5f3d842239ed887", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:15:23\n+   |\n+LL |     let result: i32 = foo(5, 5);\n+   |                       ^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:24:23\n+   |\n+LL |     let result: i32 = foo(5, 5);\n+   |                       ^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "a60100ddaeaeb1b40e282202cbc8b03e212a0b26", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:2:31\n+  --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.stderr"}, {"sha": "57358fbdd8404139e644e91b63764a4bc23ecbce", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n fn main() {\n     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n     //~^ ERROR E0133"}, {"sha": "a60100ddaeaeb1b40e282202cbc8b03e212a0b26", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n+   |\n+LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "b643ecc0ce8d98047bc458e7aeff00114368c70e", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.mir.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:8:5\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n    |\n LL |     foo();\n    |     ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:6:17\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];\n    |                 ^^^^^ call to unsafe function", "previous_filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.stderr"}, {"sha": "1ce781479708335eab495c1c62231857721d03e0", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(const_extern_fn)]\n \n const unsafe extern \"C\" fn foo() -> usize { 5 }"}, {"sha": "b643ecc0ce8d98047bc458e7aeff00114368c70e", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n+   |\n+LL |     foo();\n+   |     ^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n+   |\n+LL |     let a: [u8; foo()];\n+   |                 ^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "b11d5e2c2fc729092954da02bf092c3edde49202", "filename": "src/test/ui/error-codes/E0133.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/E0133.rs:4:5\n+  --> $DIR/E0133.rs:7:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function", "previous_filename": "src/test/ui/error-codes/E0133.stderr"}, {"sha": "dee1475ba213a8839535aa222359aaf72424939a", "filename": "src/test/ui/error-codes/E0133.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n unsafe fn f() { return; }\n \n fn main() {"}, {"sha": "b11d5e2c2fc729092954da02bf092c3edde49202", "filename": "src/test/ui/error-codes/E0133.thir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-called-from-safe.rs:4:5\n+  --> $DIR/E0133.rs:7:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function", "previous_filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.stderr"}, {"sha": "04efea0b230de6a8bb6f7db841aff78307549c15", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.mir.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:8:43\n+  --> $DIR/feature-gate-const_fn_transmute.rs:11:43\n    |\n LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:11:53\n+  --> $DIR/feature-gate-const_fn_transmute.rs:14:53\n    |\n LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transm\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:14:58\n+  --> $DIR/feature-gate-const_fn_transmute.rs:17:58\n    |\n LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:17:48\n+  --> $DIR/feature-gate-const_fn_transmute.rs:20:48\n    |\n LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n@@ -39,7 +39,7 @@ LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:20:58\n+  --> $DIR/feature-gate-const_fn_transmute.rs:23:58\n    |\n LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::t\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:23:63\n+  --> $DIR/feature-gate-const_fn_transmute.rs:26:63\n    |\n LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrins\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n    |\n LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^\n@@ -69,7 +69,7 @@ LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n    |\n LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0658]: `transmute` is not allowed in constant functions\n-  --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n    |\n LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -89,23 +89,23 @@ LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::tran\n    = note: `transmute` is only allowed in constants and statics for now\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n    |\n LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n    |\n LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n    |\n LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.stderr"}, {"sha": "9a45dbc51d42aa5a6b80f7e01560fc366a8c37bc", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n use std::mem;\n \n #[repr(transparent)]"}, {"sha": "04efea0b230de6a8bb6f7db841aff78307549c15", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.thir.stderr", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,118 @@\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:11:43\n+   |\n+LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:14:53\n+   |\n+LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:17:58\n+   |\n+LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:20:48\n+   |\n+LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:23:58\n+   |\n+LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:26:63\n+   |\n+LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n+   |\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0658]: `transmute` is not allowed in constant functions\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n+   |\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:29:39\n+   |\n+LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:33:49\n+   |\n+LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/feature-gate-const_fn_transmute.rs:37:54\n+   |\n+LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n+   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0133, E0658.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "d3cf5d84fdd98be1457cf37de3bc8e034b48e678", "filename": "src/test/ui/foreign-unsafe-fn-called.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/foreign-unsafe-fn-called.rs:8:5\n+  --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();\n    |     ^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/foreign-unsafe-fn-called.stderr"}, {"sha": "de3de286fc93ae6bc80343f56d1e737af46b4116", "filename": "src/test/ui/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n mod test {\n     extern \"C\" {\n         pub fn free();"}, {"sha": "d3cf5d84fdd98be1457cf37de3bc8e034b48e678", "filename": "src/test/ui/foreign-unsafe-fn-called.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/foreign-unsafe-fn-called.rs:11:5\n+   |\n+LL |     test::free();\n+   |     ^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "26b2f9f2713118988be3b6db66c55bde479a9e80", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.mir.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,21 +1,21 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unchecked_math_unsafe.rs:5:15\n+  --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unchecked_math_unsafe.rs:6:15\n+  --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unchecked_math_unsafe.rs:7:15\n+  --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/intrinsics/unchecked_math_unsafe.stderr"}, {"sha": "98d3a11ad027643ede5c575a27bdbabdb76e4f4f", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(core_intrinsics)]\n \n fn main() {"}, {"sha": "26b2f9f2713118988be3b6db66c55bde479a9e80", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.thir.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,27 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:8:15\n+   |\n+LL |     let add = std::intrinsics::unchecked_add(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:9:15\n+   |\n+LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:10:15\n+   |\n+LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "1d470fb5e0f00b41904244964b096fafb4954039", "filename": "src/test/ui/issues/issue-28776.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-28776.rs:4:5\n+  --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/issues/issue-28776.stderr"}, {"sha": "19df3c4a4252b1c51fc22dd6d52afb2c6e874971", "filename": "src/test/ui/issues/issue-28776.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-28776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-28776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n use std::ptr;\n \n fn main() {"}, {"sha": "1d470fb5e0f00b41904244964b096fafb4954039", "filename": "src/test/ui/issues/issue-28776.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-28776.rs:7:5\n+   |\n+LL |     (&ptr::write)(1 as *mut _, 42);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "f395c30b8155a54554e9d97e871e73c7b6529365", "filename": "src/test/ui/issues/issue-3080.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-3080.rs:7:5\n+  --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();\n    |     ^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/issues/issue-3080.stderr"}, {"sha": "2b5269dda8fa6b05ef0b156e46f41bf993f056c7", "filename": "src/test/ui/issues/issue-3080.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n struct X(());\n impl X {\n     pub unsafe fn with(&self) { }"}, {"sha": "f395c30b8155a54554e9d97e871e73c7b6529365", "filename": "src/test/ui/issues/issue-3080.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-3080.rs:10:5\n+   |\n+LL |     X(()).with();\n+   |     ^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "6817e8830c50978e23d711f06ca8b7abb116e32b", "filename": "src/test/ui/issues/issue-48131.mir.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-48131.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-48131.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48131.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,17 +1,17 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/issue-48131.rs:9:9\n+  --> $DIR/issue-48131.rs:12:9\n    |\n LL |         unsafe { /* unnecessary */ }\n    |         ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-48131.rs:3:9\n+  --> $DIR/issue-48131.rs:6:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/issue-48131.rs:20:13\n+  --> $DIR/issue-48131.rs:23:13\n    |\n LL |             unsafe { /* unnecessary */ }\n    |             ^^^^^^ unnecessary `unsafe` block", "previous_filename": "src/test/ui/issues/issue-48131.stderr"}, {"sha": "df98547084d696bcf01e949c0fd470fbfd1bf44f", "filename": "src/test/ui/issues/issue-48131.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n // This note is annotated because the purpose of the test\n // is to ensure that certain other notes are not generated.\n #![deny(unused_unsafe)] //~ NOTE"}, {"sha": "6817e8830c50978e23d711f06ca8b7abb116e32b", "filename": "src/test/ui/issues/issue-48131.thir.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-48131.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-48131.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48131.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,20 @@\n+error: unnecessary `unsafe` block\n+  --> $DIR/issue-48131.rs:12:9\n+   |\n+LL |         unsafe { /* unnecessary */ }\n+   |         ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-48131.rs:6:9\n+   |\n+LL | #![deny(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/issue-48131.rs:23:13\n+   |\n+LL |             unsafe { /* unnecessary */ }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6134d6889ff6cb7f2dbae943a469f935dc6f8747", "filename": "src/test/ui/issues/issue-5844.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-5844.rs:6:5\n+  --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/issues/issue-5844.stderr"}, {"sha": "4f90a9c66451f1825be4cc510a8f61a93e8aaad9", "filename": "src/test/ui/issues/issue-5844.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,4 +1,6 @@\n //aux-build:issue-5844-aux.rs\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n extern crate issue_5844_aux;\n "}, {"sha": "6134d6889ff6cb7f2dbae943a469f935dc6f8747", "filename": "src/test/ui/issues/issue-5844.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-5844.rs:8:5\n+   |\n+LL |     issue_5844_aux::rand();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "0f4b5936dd015ac61941045e9ed0903c91843428", "filename": "src/test/ui/threads-sendsync/issue-43733.mir.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -7,10 +7,10 @@ LL |     __KEY.get(Default::default)\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:21:5\n+  --> $DIR/issue-43733.rs:20:42\n    |\n-LL |     std::thread::LocalKey::new(__getit);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n ", "previous_filename": "src/test/ui/threads-sendsync/issue-43733.stderr"}, {"sha": "5434140cd61280b7bc7f6d06eed501b815aac9f3", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,30 +1,31 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(thread_local)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n type Foo = std::cell::RefCell<String>;\n \n #[cfg(target_thread_local)]\n #[thread_local]\n-static __KEY: std::thread::__FastLocalKeyInner<Foo> =\n-    std::thread::__FastLocalKeyInner::new();\n+static __KEY: std::thread::__FastLocalKeyInner<Foo> = std::thread::__FastLocalKeyInner::new();\n \n #[cfg(not(target_thread_local))]\n-static __KEY: std::thread::__OsLocalKeyInner<Foo> =\n-    std::thread::__OsLocalKeyInner::new();\n+static __KEY: std::thread::__OsLocalKeyInner<Foo> = std::thread::__OsLocalKeyInner::new();\n \n-fn __getit() -> std::option::Option<&'static Foo>\n-{\n+fn __getit() -> std::option::Option<&'static Foo> {\n     __KEY.get(Default::default) //~ ERROR call to unsafe function is unsafe\n }\n \n-static FOO: std::thread::LocalKey<Foo> =\n-    std::thread::LocalKey::new(__getit);\n+static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n //~^ ERROR call to unsafe function is unsafe\n \n fn main() {\n     FOO.with(|foo| println!(\"{}\", foo.borrow()));\n     std::thread::spawn(|| {\n         FOO.with(|foo| *foo.borrow_mut() += \"foo\");\n-    }).join().unwrap();\n+    })\n+    .join()\n+    .unwrap();\n     FOO.with(|foo| println!(\"{}\", foo.borrow()));\n }"}, {"sha": "0f4b5936dd015ac61941045e9ed0903c91843428", "filename": "src/test/ui/threads-sendsync/issue-43733.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:17:5\n+   |\n+LL |     __KEY.get(Default::default)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:20:42\n+   |\n+LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "6810132686124c125938caebcb191bac75d0a923", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.mir.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,11 +1,11 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:6:5\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:5\n    |\n LL |     unsafe { println!(\"foo\"); }\n    |     ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:3:9\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:6:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^", "previous_filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.stderr"}, {"sha": "08801f9ef59ffb14f410db4cb3da59f8b927a62a", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,8 @@\n // issue #12418\n \n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![deny(unused_unsafe)]\n \n fn main() {"}, {"sha": "6810132686124c125938caebcb191bac75d0a923", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.thir.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,14 @@\n+error: unnecessary `unsafe` block\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:5\n+   |\n+LL |     unsafe { println!(\"foo\"); }\n+   |     ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:6:9\n+   |\n+LL | #![deny(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3031be720f02e8dbdd4514b290ee7052013f73ae", "filename": "src/test/ui/unsafe/unsafe-const-fn.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-const-fn.rs:7:18\n+  --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);\n    |                  ^^^^^^^^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/unsafe/unsafe-const-fn.stderr"}, {"sha": "65e3acf3063726233ef35b681b7259833ae13ff1", "filename": "src/test/ui/unsafe/unsafe-const-fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,8 @@\n // A quick test of 'unsafe const fn' functionality\n \n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n const unsafe fn dummy(v: u32) -> u32 {\n     !v\n }"}, {"sha": "3031be720f02e8dbdd4514b290ee7052013f73ae", "filename": "src/test/ui/unsafe/unsafe-const-fn.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-const-fn.rs:10:18\n+   |\n+LL | const VAL: u32 = dummy(0xFFFF);\n+   |                  ^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "1d6fa4cbf407d9357793be3e4901c35fa23a9d6f", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.mir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "df12e4415165ccc5cb7674ffef0a70bc5a55e0d2", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n unsafe fn f() { return; }\n \n fn main() {"}, {"sha": "1d6fa4cbf407d9357793be3e4901c35fa23a9d6f", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n+   |\n+LL |     f();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "b08a7109dda57566934650b12c64157305f6a3fb", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-used-as-value.rs:5:5\n+  --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();\n    |     ^^^ call to unsafe function", "previous_filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.stderr"}, {"sha": "2af0786617bccba4ea753432eee66ee822f3af07", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n unsafe fn f() { return; }\n \n fn main() {"}, {"sha": "b08a7109dda57566934650b12c64157305f6a3fb", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-used-as-value.rs:8:5\n+   |\n+LL |     x();\n+   |     ^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "7b42de0ec436991ab453b95c86052ab0f3b91f8b", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b60b8738735d8d64d03601d1dad4001d1e5733/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=17b60b8738735d8d64d03601d1dad4001d1e5733", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1388;\n-const ISSUES_ENTRY_LIMIT: usize = 2551;\n+const ROOT_ENTRY_LIMIT: usize = 1370;\n+const ISSUES_ENTRY_LIMIT: usize = 2555;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}