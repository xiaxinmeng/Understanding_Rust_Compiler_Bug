{"sha": "e8c1d771fcd40507f0ba39f52b8fff7bab967b64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YzFkNzcxZmNkNDA1MDdmMGJhMzlmNTJiOGZmZjdiYWI5NjdiNjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T01:31:50Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T03:19:38Z"}, "message": "Rollup merge of #23428 - Manishearth:ast-doc, r=steveklabnik\n\n I often have to run `ast-json` or look into the pretty-printer source to figure out what the fields of an AST enum mean. I've tried to document most of what I know (and some semi-obvious stuff).\n\nr? @steveklabnik\n\nf? @eddyb", "tree": {"sha": "073a16b6aaa6758d5a95edf900d36a007cf8eb2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/073a16b6aaa6758d5a95edf900d36a007cf8eb2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8c1d771fcd40507f0ba39f52b8fff7bab967b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c1d771fcd40507f0ba39f52b8fff7bab967b64", "html_url": "https://github.com/rust-lang/rust/commit/e8c1d771fcd40507f0ba39f52b8fff7bab967b64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8c1d771fcd40507f0ba39f52b8fff7bab967b64/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760f870addfc61b95a9a944406eaac38c8b7bf3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/760f870addfc61b95a9a944406eaac38c8b7bf3d", "html_url": "https://github.com/rust-lang/rust/commit/760f870addfc61b95a9a944406eaac38c8b7bf3d"}, {"sha": "c20c652a9211d538dcb8b264b0b9c7479684b4d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c20c652a9211d538dcb8b264b0b9c7479684b4d9", "html_url": "https://github.com/rust-lang/rust/commit/c20c652a9211d538dcb8b264b0b9c7479684b4d9"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "6006366ad9abe9f0202bbbda2293b1882b4ca3d0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e8c1d771fcd40507f0ba39f52b8fff7bab967b64/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c1d771fcd40507f0ba39f52b8fff7bab967b64/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e8c1d771fcd40507f0ba39f52b8fff7bab967b64", "patch": "@@ -215,8 +215,8 @@ pub struct Lifetime {\n     pub name: Name\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n /// A lifetime definition, eg `'a: 'b+'c+'d`\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>\n@@ -590,6 +590,7 @@ pub enum Pat_ {\n     /// A PatIdent may either be a new bound variable,\n     /// or a nullary enum (in which case the third field\n     /// is None).\n+    ///\n     /// In the nullary enum case, the parser can't determine\n     /// which it is. The resolver determines this, and\n     /// records this pattern's NodeId in an auxiliary\n@@ -786,18 +787,22 @@ pub enum Expr_ {\n     /// An array (`[a, b, c, d]`)\n     ExprVec(Vec<P<Expr>>),\n     /// A function call\n+    ///\n     /// The first field resolves to the function itself,\n     /// and the second field is the list of arguments\n     ExprCall(P<Expr>, Vec<P<Expr>>),\n     /// A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)\n-    /// The `SpannedIdent` is the identifier for the method name\n+    ///\n+    /// The `SpannedIdent` is the identifier for the method name.\n     /// The vector of `Ty`s are the ascripted type parameters for the method\n-    /// (within the angle brackets)\n+    /// (within the angle brackets).\n+    ///\n     /// The first element of the vector of `Expr`s is the expression that evaluates\n     /// to the object on which the method is being called on (the receiver),\n     /// and the remaining elements are the rest of the arguments.\n+    ///\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n-    /// `ExprMethodCall(foo, [Bar, Baz], [x, a, b, c, d])`\n+    /// `ExprMethodCall(foo, [Bar, Baz], [x, a, b, c, d])`.\n     ExprMethodCall(SpannedIdent, Vec<P<Ty>>, Vec<P<Expr>>),\n     /// A tuple (`(a, b, c ,d)`)\n     ExprTup(Vec<P<Expr>>),\n@@ -810,32 +815,41 @@ pub enum Expr_ {\n     /// A cast (`foo as f64`)\n     ExprCast(P<Expr>, P<Ty>),\n     /// An `if` block, with an optional else block\n+    ///\n     /// `if expr { block } else { expr }`\n     ExprIf(P<Expr>, P<Block>, Option<P<Expr>>),\n     /// An `if let` expression with an optional else block\n+    ///\n     /// `if let pat = expr { block } else { expr }`\n-    /// This is desugared to a `match` expression\n+    ///\n+    /// This is desugared to a `match` expression.\n     ExprIfLet(P<Pat>, P<Expr>, P<Block>, Option<P<Expr>>),\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     /// A while loop, with an optional label\n+    ///\n     /// `'label: while expr { block }`\n     ExprWhile(P<Expr>, P<Block>, Option<Ident>),\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     /// A while-let loop, with an optional label\n+    ///\n     /// `'label: while let pat = expr { block }`\n-    /// This is desugared to a combination of `loop` and `match` expressions\n+    ///\n+    /// This is desugared to a combination of `loop` and `match` expressions.\n     ExprWhileLet(P<Pat>, P<Expr>, P<Block>, Option<Ident>),\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     /// A for loop, with an optional label\n+    ///\n     /// `'label: for pat in expr { block }`\n-    /// This is desugared to a combination of `loop` and `match` expressions\n+    ///\n+    /// This is desugared to a combination of `loop` and `match` expressions.\n     ExprForLoop(P<Pat>, P<Expr>, P<Block>, Option<Ident>),\n     /// Conditionless loop (can be exited with break, continue, or return)\n+    ///\n     /// `'label: loop { block }`\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprLoop(P<Block>, Option<Ident>),\n     /// A `match` block, with a source that indicates whether or not it is\n-    /// the result of a desugaring, and if so, which kind\n+    /// the result of a desugaring, and if so, which kind.\n     ExprMatch(P<Expr>, Vec<Arm>, MatchSource),\n     /// A closure (for example, `move |a, b, c| {a + b + c}`)\n     ExprClosure(CaptureClause, P<FnDecl>, P<Block>),\n@@ -845,20 +859,24 @@ pub enum Expr_ {\n     /// An assignment (`a = foo()`)\n     ExprAssign(P<Expr>, P<Expr>),\n     /// An assignment with an operator\n-    /// For example, `a += 1`\n+    ///\n+    /// For example, `a += 1`.\n     ExprAssignOp(BinOp, P<Expr>, P<Expr>),\n     /// Access of a named struct field (`obj.foo`)\n     ExprField(P<Expr>, SpannedIdent),\n     /// Access of an unnamed field of a struct or tuple-struct\n-    /// For example, `foo.0`\n+    ///\n+    /// For example, `foo.0`.\n     ExprTupField(P<Expr>, Spanned<usize>),\n     /// An indexing operation (`foo[2]`)\n     ExprIndex(P<Expr>, P<Expr>),\n     /// A range (`1..2`, `1..`, or `..2`)\n     ExprRange(Option<P<Expr>>, Option<P<Expr>>),\n \n     /// Variable reference, possibly containing `::` and/or type\n-    /// parameters, e.g. foo::bar::<baz>. Optionally \"qualified\",\n+    /// parameters, e.g. foo::bar::<baz>.\n+    ///\n+    /// Optionally \"qualified\",\n     /// e.g. `<Vec<T> as SomeTrait>::SomeType`.\n     ExprPath(Option<QSelf>, Path),\n \n@@ -878,13 +896,15 @@ pub enum Expr_ {\n     ExprMac(Mac),\n \n     /// A struct literal expression.\n+    ///\n     /// For example, `Foo {x: 1, y: 2}`, or\n-    /// `Foo {x: 1, .. base}`, where `base` is the `Option<Expr>`\n+    /// `Foo {x: 1, .. base}`, where `base` is the `Option<Expr>`.\n     ExprStruct(Path, Vec<Field>, Option<P<Expr>>),\n \n     /// A vector literal constructed from one repeated element.\n+    ///\n     /// For example, `[1u8; 5]`. The first expression is the element\n-    /// to be repeated; the second is the number of times to repeat it\n+    /// to be repeated; the second is the number of times to repeat it.\n     ExprRepeat(P<Expr>, P<Expr>),\n \n     /// No-op: used solely so we can pretty-print faithfully\n@@ -1092,6 +1112,7 @@ pub type Mac = Spanned<Mac_>;\n /// Represents a macro invocation. The Path indicates which macro\n /// is being invoked, and the vector of token-trees contains the source\n /// of the macro invocation.\n+///\n /// There's only one flavor, now, so this could presumably be simplified.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Mac_ {\n@@ -1105,6 +1126,7 @@ pub enum StrStyle {\n     /// A regular string, like `\"foo\"`\n     CookedStr,\n     /// A raw string, like `r##\"foo\"##`\n+    ///\n     /// The uint is the number of `#` symbols used\n     RawStr(usize)\n }\n@@ -1459,7 +1481,7 @@ impl Arg {\n     }\n }\n \n-/// represents the header (not the body) of a function declaration\n+/// Represents the header (not the body) of a function declaration\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,\n@@ -1505,7 +1527,9 @@ pub enum FunctionRetTy {\n     /// Functions with return type `!`that always\n     /// raise an error or exit (i.e. never return to the caller)\n     NoReturn(Span),\n-    /// Return type is not specified. Functions default to `()` and\n+    /// Return type is not specified.\n+    ///\n+    /// Functions default to `()` and\n     /// closures default to inference. Span points to where return\n     /// type would be inserted.\n     DefaultReturn(Span),\n@@ -1645,6 +1669,7 @@ pub struct Attribute_ {\n }\n \n /// TraitRef's appear in impls.\n+///\n /// resolve maps each TraitRef's ref_id to its defining trait; that's all\n /// that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n /// If this impl is an ItemImpl, the impl_id is redundant (it could be the\n@@ -1745,6 +1770,7 @@ pub struct Item {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Item_ {\n     /// An`extern crate` item, with optional original crate name,\n+    ///\n     /// e.g. `extern crate foo` or `extern crate \"foo-bar\" as foo`\n     ItemExternCrate(Option<(InternedString, StrStyle)>),\n     /// A `use` or `pub use` item\n@@ -1773,6 +1799,7 @@ pub enum Item_ {\n               Vec<P<TraitItem>>),\n \n     // Default trait implementations\n+    ///\n     // `impl Trait for .. {}`\n     ItemDefaultImpl(Unsafety, TraitRef),\n     /// An implementation, eg `impl<A> Trait for Foo { .. }`"}]}