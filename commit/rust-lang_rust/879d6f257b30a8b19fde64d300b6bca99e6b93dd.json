{"sha": "879d6f257b30a8b19fde64d300b6bca99e6b93dd", "node_id": "C_kwDOAAsO6NoAKDg3OWQ2ZjI1N2IzMGE4YjE5ZmRlNjRkMzAwYjZiY2E5OWU2YjkzZGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-19T10:03:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-19T10:03:58Z"}, "message": "Rollup merge of #109212 - Ezrashaw:no-similar-sugg-for-unstable, r=estebank\n\nfix: don't suggest similar method when unstable\n\nFixes #109177\n\nDon't display typo suggestions for unstable things, unless the feature flag is enabled.\n\nAFAIK, there are two places this occurs:\n- `rustc_resolve`: before type checking, effectively just `FnCtxt::Free`.\n- `rustc_hir_typck`: during type checking, for `FnCtxt::Assoc(..)`s.\n\nThe linked issue is about the latter, obviously the issue is applicable to both.\n\nr? `@estebank`", "tree": {"sha": "6b5fca1e89ca2aa6c5d752b5c411ead70171e78f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b5fca1e89ca2aa6c5d752b5c411ead70171e78f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879d6f257b30a8b19fde64d300b6bca99e6b93dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFt4OCRBK7hj4Ov3rIwAA/NgIAKsvjN6HNwJMSJbt+4PMjPdO\nkQKebOjQiMWMYaVQPFfy4WJIMcX26FeFnYBuswKIvquJLTHdsigMrjoIRMuM0dPH\n1Yofx6x/ym4uYFe9i6TZMYMWhlV0bjC9yFUYIAT1/kXSCM4UTbRh/WMcBFrLzSvl\nroYsHS2ELjRKVM0NfDovGAjpaR14QBzvztDx7yFwB/XKZsZeScvCVGeAzkmuCsU1\n1wd5MXxlzCg9MFmwXgsNplrsrthF+XaBzduTD4rfHBALOkTENV25JQytxBgSwPQ1\npAZbSAT7e2EUzZTzz/Hvkr+ymkwsXCvZRsz9ZjUj/uoKy1lidAXFxzY82pJg2os=\n=qHTi\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b5fca1e89ca2aa6c5d752b5c411ead70171e78f\nparent 654204f455332618f55dd808e9fe4fc4ae1d6a2f\nparent 0dc36fcd5b0bdf07fe1c180c050e0337f1cd3efe\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1679220238 +0530\ncommitter GitHub <noreply@github.com> 1679220238 +0530\n\nRollup merge of #109212 - Ezrashaw:no-similar-sugg-for-unstable, r=estebank\n\nfix: don't suggest similar method when unstable\n\nFixes #109177\n\nDon't display typo suggestions for unstable things, unless the feature flag is enabled.\n\nAFAIK, there are two places this occurs:\n- `rustc_resolve`: before type checking, effectively just `FnCtxt::Free`.\n- `rustc_hir_typck`: during type checking, for `FnCtxt::Assoc(..)`s.\n\nThe linked issue is about the latter, obviously the issue is applicable to both.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879d6f257b30a8b19fde64d300b6bca99e6b93dd", "html_url": "https://github.com/rust-lang/rust/commit/879d6f257b30a8b19fde64d300b6bca99e6b93dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879d6f257b30a8b19fde64d300b6bca99e6b93dd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654204f455332618f55dd808e9fe4fc4ae1d6a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/654204f455332618f55dd808e9fe4fc4ae1d6a2f", "html_url": "https://github.com/rust-lang/rust/commit/654204f455332618f55dd808e9fe4fc4ae1d6a2f"}, {"sha": "0dc36fcd5b0bdf07fe1c180c050e0337f1cd3efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc36fcd5b0bdf07fe1c180c050e0337f1cd3efe", "html_url": "https://github.com/rust-lang/rust/commit/0dc36fcd5b0bdf07fe1c180c050e0337f1cd3efe"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "b6d39341fe7cc5ecbc04fec2ef3f63b393fa1ba6", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/879d6f257b30a8b19fde64d300b6bca99e6b93dd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879d6f257b30a8b19fde64d300b6bca99e6b93dd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=879d6f257b30a8b19fde64d300b6bca99e6b93dd", "patch": "@@ -1028,6 +1028,15 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     true\n                 }\n             })\n+            // ensure that we don't suggest unstable methods\n+            .filter(|candidate| {\n+                // note that `DUMMY_SP` is ok here because it is only used for\n+                // suggestions and macro stuff which isn't applicable here.\n+                !matches!(\n+                    self.tcx.eval_stability(candidate.item.def_id, None, DUMMY_SP, None),\n+                    stability::EvalResult::Deny { .. }\n+                )\n+            })\n             .map(|candidate| candidate.item.ident(self.tcx))\n             .filter(|&name| set.insert(name))\n             .collect();"}, {"sha": "8804186ee1a6b915777f028ae86925e044c5b78b", "filename": "tests/ui/stability-attribute/auxiliary/similar-unstable-method.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/879d6f257b30a8b19fde64d300b6bca99e6b93dd/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fsimilar-unstable-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879d6f257b30a8b19fde64d300b6bca99e6b93dd/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fsimilar-unstable-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fsimilar-unstable-method.rs?ref=879d6f257b30a8b19fde64d300b6bca99e6b93dd", "patch": "@@ -0,0 +1,13 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"libfoo\", since = \"1.0.0\")]\n+\n+#[unstable(feature = \"foo\", reason = \"...\", issue = \"none\")]\n+pub fn foo() {}\n+\n+#[stable(feature = \"libfoo\", since = \"1.0.0\")]\n+pub struct Foo;\n+\n+impl Foo {\n+    #[unstable(feature = \"foo\", reason = \"...\", issue = \"none\")]\n+    pub fn foo(&self) {}\n+}"}, {"sha": "6d052779c6d363339ac4943b468045308ca629af", "filename": "tests/ui/stability-attribute/issue-109177.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/879d6f257b30a8b19fde64d300b6bca99e6b93dd/tests%2Fui%2Fstability-attribute%2Fissue-109177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879d6f257b30a8b19fde64d300b6bca99e6b93dd/tests%2Fui%2Fstability-attribute%2Fissue-109177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fissue-109177.rs?ref=879d6f257b30a8b19fde64d300b6bca99e6b93dd", "patch": "@@ -0,0 +1,13 @@\n+// aux-build: similar-unstable-method.rs\n+\n+extern crate similar_unstable_method;\n+\n+fn main() {\n+    // FIXME: this function should not suggest the `foo` function.\n+    similar_unstable_method::foo1();\n+    //~^ ERROR cannot find function `foo1` in crate `similar_unstable_method` [E0425]\n+\n+    let foo = similar_unstable_method::Foo;\n+    foo.foo1();\n+    //~^ ERROR no method named `foo1` found for struct `Foo` in the current scope [E0599]\n+}"}, {"sha": "9c2ac591ace05374c6259c3965ffa317e448d210", "filename": "tests/ui/stability-attribute/issue-109177.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/879d6f257b30a8b19fde64d300b6bca99e6b93dd/tests%2Fui%2Fstability-attribute%2Fissue-109177.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/879d6f257b30a8b19fde64d300b6bca99e6b93dd/tests%2Fui%2Fstability-attribute%2Fissue-109177.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fissue-109177.stderr?ref=879d6f257b30a8b19fde64d300b6bca99e6b93dd", "patch": "@@ -0,0 +1,21 @@\n+error[E0425]: cannot find function `foo1` in crate `similar_unstable_method`\n+  --> $DIR/issue-109177.rs:7:30\n+   |\n+LL |     similar_unstable_method::foo1();\n+   |                              ^^^^ help: a function with a similar name exists: `foo`\n+   |\n+  ::: $DIR/auxiliary/similar-unstable-method.rs:5:1\n+   |\n+LL | pub fn foo() {}\n+   | ------------ similarly named function `foo` defined here\n+\n+error[E0599]: no method named `foo1` found for struct `Foo` in the current scope\n+  --> $DIR/issue-109177.rs:11:9\n+   |\n+LL |     foo.foo1();\n+   |         ^^^^ method not found in `Foo`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0425, E0599.\n+For more information about an error, try `rustc --explain E0425`."}]}