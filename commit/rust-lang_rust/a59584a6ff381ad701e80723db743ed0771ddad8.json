{"sha": "a59584a6ff381ad701e80723db743ed0771ddad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OTU4NGE2ZmYzODFhZDcwMWU4MDcyM2RiNzQzZWQwNzcxZGRhZDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-22T00:15:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-23T11:38:47Z"}, "message": "use `TypeOp` machinery for `outlives_bounds`\n\nFixes #52992", "tree": {"sha": "e26aef4aa6ae69314db856c4e039dba21dfee639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e26aef4aa6ae69314db856c4e039dba21dfee639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59584a6ff381ad701e80723db743ed0771ddad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59584a6ff381ad701e80723db743ed0771ddad8", "html_url": "https://github.com/rust-lang/rust/commit/a59584a6ff381ad701e80723db743ed0771ddad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59584a6ff381ad701e80723db743ed0771ddad8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89574a6fc7c660172030724a5d1e8c0ef83094a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/89574a6fc7c660172030724a5d1e8c0ef83094a4", "html_url": "https://github.com/rust-lang/rust/commit/89574a6fc7c660172030724a5d1e8c0ef83094a4"}], "stats": {"total": 148, "additions": 131, "deletions": 17}, "files": [{"sha": "27534bc8c3cf70242d8fe09b67a1589dd377168e", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=a59584a6ff381ad701e80723db743ed0771ddad8", "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n+use traits::query::outlives_bounds::OutlivesBound;\n+use traits::query::Fallible;\n+use ty::{ParamEnvAnd, Ty, TyCtxt};\n+\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+pub struct ImpliedOutlivesBounds<'tcx> {\n+    pub ty: Ty<'tcx>,\n+}\n+\n+impl<'tcx> ImpliedOutlivesBounds<'tcx> {\n+    pub fn new(ty: Ty<'tcx>) -> Self {\n+        ImpliedOutlivesBounds { ty }\n+    }\n+}\n+\n+impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ImpliedOutlivesBounds<'tcx> {\n+    type QueryResult = Vec<OutlivesBound<'tcx>>;\n+\n+    fn try_fast_path(\n+        _tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        _key: &ParamEnvAnd<'tcx, Self>,\n+    ) -> Option<Self::QueryResult> {\n+        None\n+    }\n+\n+    fn perform_query(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>> {\n+        // FIXME the query should take a `ImpliedOutlivesBounds`\n+        let Canonical {\n+            variables,\n+            value:\n+                ParamEnvAnd {\n+                    param_env,\n+                    value: ImpliedOutlivesBounds { ty },\n+                },\n+        } = canonicalized;\n+        let canonicalized = Canonical {\n+            variables,\n+            value: param_env.and(ty),\n+        };\n+\n+        tcx.implied_outlives_bounds(canonicalized)\n+    }\n+\n+    fn shrink_to_tcx_lifetime(\n+        v: &'a CanonicalizedQueryResult<'gcx, Self::QueryResult>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>> {\n+        v\n+    }\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for ImpliedOutlivesBounds<'tcx> {\n+        ty,\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for ImpliedOutlivesBounds<'a> {\n+        type Lifted = ImpliedOutlivesBounds<'tcx>;\n+        ty,\n+    }\n+}\n+\n+impl_stable_hash_for! {\n+    struct ImpliedOutlivesBounds<'tcx> { ty }\n+}"}, {"sha": "2f57981e7e1fefe2f96a626a9e85a9f5d167736e", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=a59584a6ff381ad701e80723db743ed0771ddad8", "patch": "@@ -21,6 +21,7 @@ use ty::{Lift, ParamEnvAnd, TyCtxt};\n \n pub mod custom;\n pub mod eq;\n+pub mod implied_outlives_bounds;\n pub mod normalize;\n pub mod outlives;\n pub mod prove_predicate;"}, {"sha": "e21c490622c089638b71eab8e2d63abb14ce4744", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=a59584a6ff381ad701e80723db743ed0771ddad8", "patch": "@@ -14,7 +14,7 @@ use borrow_check::nll::type_check::constraint_conversion;\n use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n use borrow_check::nll::universal_regions::UniversalRegions;\n use borrow_check::nll::ToRegionVid;\n-use rustc::hir::def_id::DefId;\n+use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;\n use rustc::infer::InferCtxt;\n@@ -23,7 +23,6 @@ use rustc::traits::query::type_op::{self, TypeOp};\n use rustc::ty::{self, RegionVid, Ty};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n use std::rc::Rc;\n-use syntax::ast;\n \n #[derive(Debug)]\n crate struct UniversalRegionRelations<'tcx> {\n@@ -67,19 +66,15 @@ crate struct CreateResult<'tcx> {\n \n crate fn create(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n-    mir_def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n     location_table: &LocationTable,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     constraints: &mut MirTypeckRegionConstraints<'tcx>,\n     all_facts: &mut Option<AllFacts>,\n ) -> CreateResult<'tcx> {\n-    let mir_node_id = infcx.tcx.hir.as_local_node_id(mir_def_id).unwrap();\n     UniversalRegionRelationsBuilder {\n         infcx,\n-        mir_def_id,\n-        mir_node_id,\n         param_env,\n         implicit_region_bound,\n         constraints,\n@@ -212,8 +207,6 @@ impl UniversalRegionRelations<'tcx> {\n \n struct UniversalRegionRelationsBuilder<'this, 'gcx: 'tcx, 'tcx: 'this> {\n     infcx: &'this InferCtxt<'this, 'gcx, 'tcx>,\n-    mir_def_id: DefId,\n-    mir_node_id: ast::NodeId,\n     param_env: ty::ParamEnv<'tcx>,\n     location_table: &'this LocationTable,\n     universal_regions: Rc<UniversalRegions<'tcx>>,\n@@ -248,14 +241,16 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n         let constraint_sets: Vec<_> = unnormalized_input_output_tys\n             .flat_map(|ty| {\n                 debug!(\"build: input_or_output={:?}\", ty);\n-                let (ty, constraints) = self\n+                let (ty, constraints1) = self\n                     .param_env\n                     .and(type_op::normalize::Normalize::new(ty))\n                     .fully_perform(self.infcx)\n                     .unwrap_or_else(|_| bug!(\"failed to normalize {:?}\", ty));\n-                self.add_implied_bounds(ty);\n+                let constraints2 = self.add_implied_bounds(ty);\n                 normalized_inputs_and_output.push(ty);\n-                constraints\n+                constraints1\n+                    .into_iter()\n+                    .chain(constraints2)\n             })\n             .collect();\n \n@@ -306,13 +301,15 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n     /// either the return type of the MIR or one of its arguments. At\n     /// the same time, compute and add any implied bounds that come\n     /// from this local.\n-    fn add_implied_bounds(&mut self, ty: Ty<'tcx>) {\n+    fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<Rc<Vec<QueryRegionConstraint<'tcx>>>> {\n         debug!(\"add_implied_bounds(ty={:?})\", ty);\n-        let span = self.infcx.tcx.def_span(self.mir_def_id);\n-        let bounds = self\n-            .infcx\n-            .implied_outlives_bounds(self.param_env, self.mir_node_id, ty, span);\n+        let (bounds, constraints) =\n+            self.param_env\n+            .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n+            .fully_perform(self.infcx)\n+            .unwrap_or_else(|_| bug!(\"failed to compute implied bounds {:?}\", ty));\n         self.add_outlives_bounds(bounds);\n+        constraints\n     }\n \n     /// Registers the `OutlivesBound` items from `outlives_bounds` in"}, {"sha": "69b2cfea1bd0c471df380e0d268fcdd53fa50b69", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=a59584a6ff381ad701e80723db743ed0771ddad8", "patch": "@@ -135,7 +135,6 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         normalized_inputs_and_output,\n     } = free_region_relations::create(\n         infcx,\n-        mir_def_id,\n         param_env,\n         location_table,\n         Some(implicit_region_bound),"}, {"sha": "2ece0ee9feeaf942b926b10dfeb0480db8f5c818", "filename": "src/test/ui/issue-52992.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Ftest%2Fui%2Fissue-52992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59584a6ff381ad701e80723db743ed0771ddad8/src%2Ftest%2Fui%2Fissue-52992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52992.rs?ref=a59584a6ff381ad701e80723db743ed0771ddad8", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for an NLL-related ICE (#52992) -- computing\n+// implied bounds was causing outlives relations that were not\n+// properly handled.\n+//\n+// compile-pass\n+\n+#![feature(nll)]\n+\n+fn main() {}\n+\n+fn fail<'a>() -> Struct<'a, Generic<()>> {\n+    Struct(&Generic(()))\n+}\n+\n+struct Struct<'a, T>(&'a T) where\n+    T: Trait + 'a,\n+    T::AT: 'a; // only fails with this bound\n+\n+struct Generic<T>(T);\n+\n+trait Trait {\n+    type AT;\n+}\n+\n+impl<T> Trait for Generic<T> {\n+    type AT = T; // only fails with a generic AT\n+}"}]}