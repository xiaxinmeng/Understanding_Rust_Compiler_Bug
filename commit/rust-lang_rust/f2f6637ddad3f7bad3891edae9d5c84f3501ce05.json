{"sha": "f2f6637ddad3f7bad3891edae9d5c84f3501ce05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZjY2MzdkZGFkM2Y3YmFkMzg5MWVkYWU5ZDVjODRmMzUwMWNlMDU=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2017-01-28T13:37:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-28T13:37:59Z"}, "message": "Merge pull request #1486 from killercup/for-loop-suggestions\n\nAdd suggestions to `EXPLICIT_[INTO_]ITER_LOOP`", "tree": {"sha": "4ebf36ea9fc3183a5cf426e347a1df99f5c290c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ebf36ea9fc3183a5cf426e347a1df99f5c290c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2f6637ddad3f7bad3891edae9d5c84f3501ce05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f6637ddad3f7bad3891edae9d5c84f3501ce05", "html_url": "https://github.com/rust-lang/rust/commit/f2f6637ddad3f7bad3891edae9d5c84f3501ce05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2f6637ddad3f7bad3891edae9d5c84f3501ce05/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d825f194fdc1f1f9ccdf87bffdc79aacf98fc975", "url": "https://api.github.com/repos/rust-lang/rust/commits/d825f194fdc1f1f9ccdf87bffdc79aacf98fc975", "html_url": "https://github.com/rust-lang/rust/commit/d825f194fdc1f1f9ccdf87bffdc79aacf98fc975"}, {"sha": "2357dfe8ee709c827d47e4f29d29516d666ce8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2357dfe8ee709c827d47e4f29d29516d666ce8a8", "html_url": "https://github.com/rust-lang/rust/commit/2357dfe8ee709c827d47e4f29d29516d666ce8a8"}], "stats": {"total": 122, "additions": 86, "deletions": 36}, "files": [{"sha": "f3dd2d4b8e3c4007c9fdf15fe24cd593a3eba817", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6637ddad3f7bad3891edae9d5c84f3501ce05/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6637ddad3f7bad3891edae9d5c84f3501ce05/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f2f6637ddad3f7bad3891edae9d5c84f3501ce05", "patch": "@@ -588,28 +588,36 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n             if &*method_name.as_str() == \"iter\" || &*method_name.as_str() == \"iter_mut\" {\n                 if is_ref_iterable_type(cx, &args[0]) {\n                     let object = snippet(cx, args[0].span, \"_\");\n-                    span_lint(cx,\n-                              EXPLICIT_ITER_LOOP,\n-                              expr.span,\n-                              &format!(\"it is more idiomatic to loop over `&{}{}` instead of `{}.{}()`\",\n-                                       if &*method_name.as_str() == \"iter_mut\" {\n-                                           \"mut \"\n-                                       } else {\n-                                           \"\"\n-                                       },\n-                                       object,\n-                                       object,\n-                                       method_name));\n+                    let suggestion = format!(\"&{}{}\",\n+                                             if &*method_name.as_str() == \"iter_mut\" {\n+                                                 \"mut \"\n+                                             } else {\n+                                                 \"\"\n+                                             },\n+                                             object);\n+                    span_lint_and_then(cx,\n+                                       EXPLICIT_ITER_LOOP,\n+                                       arg.span,\n+                                       &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n+                                                suggestion,\n+                                                object,\n+                                                method_name),\n+                                       |db| {\n+                        db.span_suggestion(arg.span, \"to write this more concisely, try looping over\", suggestion);\n+                    });\n                 }\n             } else if &*method_name.as_str() == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n                 let object = snippet(cx, args[0].span, \"_\");\n-                span_lint(cx,\n-                          EXPLICIT_INTO_ITER_LOOP,\n-                          expr.span,\n-                          &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n-                                   object,\n-                                   object,\n-                                   method_name));\n+                span_lint_and_then(cx,\n+                                   EXPLICIT_INTO_ITER_LOOP,\n+                                   arg.span,\n+                                   &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n+                                            object,\n+                                            object,\n+                                            method_name),\n+                                   |db| {\n+                    db.span_suggestion(arg.span, \"to write this more concisely, try looping over\", object.to_string());\n+                });\n \n             } else if &*method_name.as_str() == \"next\" && match_trait_method(cx, arg, &paths::ITERATOR) {\n                 span_lint(cx,"}, {"sha": "09b0431c65669d55381d67b6418073c136ec43b4", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6637ddad3f7bad3891edae9d5c84f3501ce05/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6637ddad3f7bad3891edae9d5c84f3501ce05/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=f2f6637ddad3f7bad3891edae9d5c84f3501ce05", "patch": "@@ -286,39 +286,81 @@ fn main() {\n         id_col[i] = 1f64;\n     }\n \n-    /*\n-    for i in (10..0).map(|x| x * 2) {\n-        println!(\"{}\", i);\n-    }*/\n-\n-    for _v in vec.iter() { } //~ERROR it is more idiomatic to loop over `&vec`\n-    for _v in vec.iter_mut() { } //~ERROR it is more idiomatic to loop over `&mut vec`\n+    for _v in vec.iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&vec`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &vec {\n \n+    for _v in vec.iter_mut() { }\n+    //~^ ERROR it is more idiomatic to loop over `&mut vec`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &mut vec {\n \n     let out_vec = vec![1,2,3];\n-    for _v in out_vec.into_iter() { } //~ERROR it is more idiomatic to loop over `out_vec` instead of `out_vec.into_iter()`\n+    for _v in out_vec.into_iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `out_vec` instead of `out_vec.into_iter()`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in out_vec {\n \n     for _v in &vec { } // these are fine\n     for _v in &mut vec { } // these are fine\n \n-    for _v in [1, 2, 3].iter() { } //~ERROR it is more idiomatic to loop over `&[\n+    for _v in [1, 2, 3].iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&[\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &[1, 2, 3] {\n+\n     for _v in (&mut [1, 2, 3]).iter() { } // no error\n-    for _v in [0; 32].iter() {} //~ERROR it is more idiomatic to loop over `&[\n+\n+    for _v in [0; 32].iter() {}\n+    //~^ ERROR it is more idiomatic to loop over `&[\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &[0; 32] {\n+\n     for _v in [0; 33].iter() {} // no error\n+\n     let ll: LinkedList<()> = LinkedList::new();\n-    for _v in ll.iter() { } //~ERROR it is more idiomatic to loop over `&ll`\n+    for _v in ll.iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&ll`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &ll {\n+\n     let vd: VecDeque<()> = VecDeque::new();\n-    for _v in vd.iter() { } //~ERROR it is more idiomatic to loop over `&vd`\n+    for _v in vd.iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&vd`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &vd {\n+\n     let bh: BinaryHeap<()> = BinaryHeap::new();\n-    for _v in bh.iter() { } //~ERROR it is more idiomatic to loop over `&bh`\n+    for _v in bh.iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&bh`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &bh {\n+\n     let hm: HashMap<(), ()> = HashMap::new();\n-    for _v in hm.iter() { } //~ERROR it is more idiomatic to loop over `&hm`\n+    for _v in hm.iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&hm`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &hm {\n+\n     let bt: BTreeMap<(), ()> = BTreeMap::new();\n-    for _v in bt.iter() { } //~ERROR it is more idiomatic to loop over `&bt`\n+    for _v in bt.iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&bt`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &bt {\n+\n     let hs: HashSet<()> = HashSet::new();\n-    for _v in hs.iter() { } //~ERROR it is more idiomatic to loop over `&hs`\n+    for _v in hs.iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&hs`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &hs {\n+\n     let bs: BTreeSet<()> = BTreeSet::new();\n-    for _v in bs.iter() { } //~ERROR it is more idiomatic to loop over `&bs`\n+    for _v in bs.iter() { }\n+    //~^ ERROR it is more idiomatic to loop over `&bs`\n+    //~| HELP to write this more concisely, try looping over\n+    //~| SUGGESTION for _v in &bs {\n+\n \n     for _v in vec.iter().next() { } //~ERROR you are iterating over `Iterator::next()`\n "}]}