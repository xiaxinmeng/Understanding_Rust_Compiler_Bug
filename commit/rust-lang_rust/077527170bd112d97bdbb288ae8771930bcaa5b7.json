{"sha": "077527170bd112d97bdbb288ae8771930bcaa5b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NzUyNzE3MGJkMTEyZDk3YmRiYjI4OGFlODc3MTkzMGJjYWE1Yjc=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-07T23:07:34Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-07T23:07:34Z"}, "message": "Make write and slice_as_[mut_]_ptr const", "tree": {"sha": "8cd35587b4c94b753c2bef48b0a16fd20e3e594f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd35587b4c94b753c2bef48b0a16fd20e3e594f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/077527170bd112d97bdbb288ae8771930bcaa5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/077527170bd112d97bdbb288ae8771930bcaa5b7", "html_url": "https://github.com/rust-lang/rust/commit/077527170bd112d97bdbb288ae8771930bcaa5b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/077527170bd112d97bdbb288ae8771930bcaa5b7/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "174935988f131efcbce3c63924ee056940c36fb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/174935988f131efcbce3c63924ee056940c36fb5", "html_url": "https://github.com/rust-lang/rust/commit/174935988f131efcbce3c63924ee056940c36fb5"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "8800d7714cf47afa50a3161ea95368c41fb88c9d", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/077527170bd112d97bdbb288ae8771930bcaa5b7/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077527170bd112d97bdbb288ae8771930bcaa5b7/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=077527170bd112d97bdbb288ae8771930bcaa5b7", "patch": "@@ -373,8 +373,9 @@ impl<T> MaybeUninit<T> {\n     /// skip running the destructor. For your convenience, this also returns a mutable\n     /// reference to the (now safely initialized) contents of `self`.\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n-    pub fn write(&mut self, val: T) -> &mut T {\n+    pub const fn write(&mut self, val: T) -> &mut T {\n         *self = MaybeUninit::new(val);\n         // SAFETY: We just initialized this value.\n         unsafe { self.assume_init_mut() }\n@@ -846,15 +847,17 @@ impl<T> MaybeUninit<T> {\n \n     /// Gets a pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n-    pub fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n+    pub const fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n         this.as_ptr() as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n-    pub fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n+    pub const fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n         this.as_mut_ptr() as *mut T\n     }\n }"}]}