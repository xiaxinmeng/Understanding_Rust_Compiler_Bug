{"sha": "938434ab82609c8de83028fa80bde4d6d28c282a", "node_id": "C_kwDOAAsO6NoAKDkzODQzNGFiODI2MDljOGRlODMwMjhmYTgwYmRlNGQ2ZDI4YzI4MmE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-21T15:34:04Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-21T15:34:04Z"}, "message": "enable `intercrate` in the solver `InferCtxt`", "tree": {"sha": "a55793a70afa69f1b163ef6bb443dcc3c68152c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a55793a70afa69f1b163ef6bb443dcc3c68152c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/938434ab82609c8de83028fa80bde4d6d28c282a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/938434ab82609c8de83028fa80bde4d6d28c282a", "html_url": "https://github.com/rust-lang/rust/commit/938434ab82609c8de83028fa80bde4d6d28c282a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/938434ab82609c8de83028fa80bde4d6d28c282a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f24a881bb05293c4d922218d9dfed7e29511cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f24a881bb05293c4d922218d9dfed7e29511cd", "html_url": "https://github.com/rust-lang/rust/commit/47f24a881bb05293c4d922218d9dfed7e29511cd"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "ed5fd590934f37bd657a34c761c1435463442e56", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/938434ab82609c8de83028fa80bde4d6d28c282a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938434ab82609c8de83028fa80bde4d6d28c282a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=938434ab82609c8de83028fa80bde4d6d28c282a", "patch": "@@ -585,8 +585,8 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         self\n     }\n \n-    pub fn intercrate(mut self) -> Self {\n-        self.intercrate = true;\n+    pub fn intercrate(mut self, intercrate: bool) -> Self {\n+        self.intercrate = intercrate;\n         self\n     }\n "}, {"sha": "c492c8c0aea0510328b5ba70d009cdf6aad96fbf", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/938434ab82609c8de83028fa80bde4d6d28c282a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938434ab82609c8de83028fa80bde4d6d28c282a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=938434ab82609c8de83028fa80bde4d6d28c282a", "patch": "@@ -127,8 +127,14 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         //\n         // The actual solver logic happens in `ecx.compute_goal`.\n         search_graph.with_new_goal(tcx, canonical_goal, |search_graph| {\n-            let (ref infcx, goal, var_values) =\n-                tcx.infer_ctxt().build_with_canonical(DUMMY_SP, &canonical_goal);\n+            let intercrate = match search_graph.solver_mode() {\n+                SolverMode::Normal => false,\n+                SolverMode::Coherence => true,\n+            };\n+            let (ref infcx, goal, var_values) = tcx\n+                .infer_ctxt()\n+                .intercrate(intercrate)\n+                .build_with_canonical(DUMMY_SP, &canonical_goal);\n             let mut ecx = EvalCtxt {\n                 infcx,\n                 var_values,"}, {"sha": "5bb0cdda1af0f8e899cfd321b333e6063b7b8ce8", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/938434ab82609c8de83028fa80bde4d6d28c282a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938434ab82609c8de83028fa80bde4d6d28c282a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=938434ab82609c8de83028fa80bde4d6d28c282a", "patch": "@@ -95,8 +95,11 @@ pub fn overlapping_impls(\n         return None;\n     }\n \n-    let infcx =\n-        tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bubble).intercrate().build();\n+    let infcx = tcx\n+        .infer_ctxt()\n+        .with_opaque_type_inference(DefiningAnchor::Bubble)\n+        .intercrate(true)\n+        .build();\n     let selcx = &mut SelectionContext::new(&infcx);\n     let overlaps =\n         overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id, overlap_mode).is_some();\n@@ -107,8 +110,11 @@ pub fn overlapping_impls(\n     // In the case where we detect an error, run the check again, but\n     // this time tracking intercrate ambiguity causes for better\n     // diagnostics. (These take time and can lead to false errors.)\n-    let infcx =\n-        tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bubble).intercrate().build();\n+    let infcx = tcx\n+        .infer_ctxt()\n+        .with_opaque_type_inference(DefiningAnchor::Bubble)\n+        .intercrate(true)\n+        .build();\n     let selcx = &mut SelectionContext::new(&infcx);\n     selcx.enable_tracking_intercrate_ambiguity_causes();\n     Some(overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id, overlap_mode).unwrap())"}]}