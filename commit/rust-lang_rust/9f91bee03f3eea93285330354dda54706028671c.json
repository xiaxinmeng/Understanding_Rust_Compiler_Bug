{"sha": "9f91bee03f3eea93285330354dda54706028671c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOTFiZWUwM2YzZWVhOTMyODUzMzAzNTRkZGE1NDcwNjAyODY3MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-22T21:00:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-22T21:00:07Z"}, "message": "Auto merge of #59370 - Centril:rollup, r=Centril\n\nRollup of 18 pull requests\n\nSuccessful merges:\n\n - #59106 (Add peer_addr function to UdpSocket)\n - #59170 (Add const generics to rustdoc)\n - #59172 (Update and clean up several parts of CONTRIBUTING.md)\n - #59190 (consistent naming for Rhs type parameter in libcore/ops)\n - #59236 (Rename miri component to miri-preview)\n - #59266 (Do not complain about non-existing fields after parse recovery)\n - #59273 (some small HIR doc improvements)\n - #59291 (Make Option<ThreadId> no larger than ThreadId, with NonZeroU64)\n - #59297 (convert field/method confusion help to suggestions)\n - #59304 (Move some bench tests back from libtest)\n - #59309 (Add messages for different verbosity levels. Output copy actions.)\n - #59321 (Unify E0109, E0110 and E0111)\n - #59322 (Tweak incorrect escaped char diagnostic)\n - #59323 (use suggestions for \"enum instead of variant\" error)\n - #59327 (Add NAN test to docs)\n - #59329 (cleanup: Remove compile-fail-fulldeps directory again)\n - #59347 (Move one test from run-make-fulldeps to ui)\n - #59360 (Add tracking issue number for `seek_convenience`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0b8cb0de7ea1416081cfa16e36ea400a9d966498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8cb0de7ea1416081cfa16e36ea400a9d966498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f91bee03f3eea93285330354dda54706028671c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f91bee03f3eea93285330354dda54706028671c", "html_url": "https://github.com/rust-lang/rust/commit/9f91bee03f3eea93285330354dda54706028671c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f91bee03f3eea93285330354dda54706028671c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "html_url": "https://github.com/rust-lang/rust/commit/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7"}, {"sha": "cf8c73936d48560b50d98a299c98fd35e5b4581e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8c73936d48560b50d98a299c98fd35e5b4581e", "html_url": "https://github.com/rust-lang/rust/commit/cf8c73936d48560b50d98a299c98fd35e5b4581e"}], "stats": {"total": 1811, "additions": 1055, "deletions": 756}, "files": [{"sha": "fa408935cc8cc956f0f9ad49680c555f9fea2088", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -15,7 +15,7 @@ links to the major sections:\n * [Helpful Links and Information](#helpful-links-and-information)\n \n If you have questions, please make a post on [internals.rust-lang.org][internals] or\n-hop on [#rust-internals][pound-rust-internals].\n+hop on the [Rust Discord server][rust-discord], [Rust Zulip server][rust-zulip] or [#rust-internals][pound-rust-internals].\n \n As a reminder, all contributors are expected to follow our [Code of Conduct][coc].\n \n@@ -27,14 +27,17 @@ can give you a good example of how a typical contribution would go.\n \n [pound-rust-internals]: https://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-internals\n [internals]: https://internals.rust-lang.org\n+[rust-discord]: http://discord.gg/rust-lang\n+[rust-zulip]: https://rust-lang.zulipchat.com\n [coc]: https://www.rust-lang.org/conduct.html\n+[rustc-guide]: https://rust-lang.github.io/rustc-guide/\n [walkthrough]: https://rust-lang.github.io/rustc-guide/walkthrough.html\n \n ## Feature Requests\n [feature-requests]: #feature-requests\n \n To request a change to the way the Rust language works, please head over\n-to the [RFCs repository](https://github.com/rust-lang/rfcs) and view the \n+to the [RFCs repository](https://github.com/rust-lang/rfcs) and view the\n [README](https://github.com/rust-lang/rfcs/blob/master/README.md)\n for instructions.\n \n@@ -129,28 +132,40 @@ request); you can add [git hooks](https://git-scm.com/book/en/v2/Customizing-Git\n before every push to make sure you never forget to make this check.\n \n All pull requests are reviewed by another person. We have a bot,\n-@rust-highfive, that will automatically assign a random person to review your\n+[@rust-highfive][rust-highfive], that will automatically assign a random person to review your\n request.\n \n If you want to request that a specific person reviews your pull request,\n-you can add an `r?` to the message. For example, Steve usually reviews\n+you can add an `r?` to the message. For example, [Steve][steveklabnik] usually reviews\n documentation changes. So if you were to make a documentation change, add\n \n     r? @steveklabnik\n \n-to the end of the message, and @rust-highfive will assign @steveklabnik instead\n+to the end of the message, and @rust-highfive will assign [@steveklabnik][steveklabnik] instead\n of a random person. This is entirely optional.\n \n After someone has reviewed your pull request, they will leave an annotation\n on the pull request with an `r+`. It will look something like this:\n \n-    @bors: r+ 38fe8d2\n+    @bors r+\n \n-This tells @bors, our lovable integration bot, that your pull request has\n-been approved. The PR then enters the [merge queue][merge-queue], where @bors\n+This tells [@bors][bors], our lovable integration bot, that your pull request has\n+been approved. The PR then enters the [merge queue][merge-queue], where [@bors][bors]\n will run all the tests on every platform we support. If it all works out,\n-@bors will merge your code into `master` and close the pull request.\n+[@bors][bors] will merge your code into `master` and close the pull request.\n \n+Depending on the scale of the change, you may see a slightly different form of `r+`:\n+\n+    @bors r+ rollup\n+\n+The additional `rollup` tells [@bors][bors] that this change is eligible for to be\n+\"rolled up\". Changes that are rolled up are tested and merged at the same time, to\n+speed the process up. Typically only small changes that are expected not to conflict\n+with one another are rolled up.\n+\n+[rust-highfive]: https://github.com/rust-highfive\n+[steveklabnik]: https://github.com/steveklabnik\n+[bors]: https://github.com/bors\n [merge-queue]: https://buildbot2.rust-lang.org/homu/queue/rust\n \n Speaking of tests, Rust has a comprehensive test suite. More information about\n@@ -190,7 +205,7 @@ before the PR is merged.\n [breaking-tools-built-with-the-compiler]: #breaking-tools-built-with-the-compiler\n \n Rust's build system builds a number of tools that make use of the\n-internals of the compiler. This includes \n+internals of the compiler. This includes\n [Clippy](https://github.com/rust-lang/rust-clippy),\n [RLS](https://github.com/rust-lang/rls) and\n [rustfmt](https://github.com/rust-lang/rustfmt). If these tools\n@@ -292,18 +307,8 @@ the submodule to. Running `./x.py build` should work now.\n \n Documentation improvements are very welcome. The source of `doc.rust-lang.org`\n is located in `src/doc` in the tree, and standard API documentation is generated\n-from the source code itself.\n-\n-Documentation pull requests function in the same way as other pull requests,\n-though you may see a slightly different form of `r+`:\n-\n-    @bors: r+ 38fe8d2 rollup\n-\n-That additional `rollup` tells @bors that this change is eligible for a 'rollup'.\n-To save @bors some work, and to get small changes through more quickly, when\n-@bors attempts to merge a commit that's rollup-eligible, it will also merge\n-the other rollup-eligible patches too, and they'll get tested and merged at\n-the same time.\n+from the source code itself. Documentation pull requests function in the same way\n+as other pull requests.\n \n To find documentation-related issues, sort by the [T-doc label][tdoc].\n \n@@ -428,7 +433,8 @@ are:\n * Although out of date, [Tom Lee's great blog article][tlgba] is very helpful\n * [rustaceans.org][ro] is helpful, but mostly dedicated to IRC\n * The [Rust Compiler Testing Docs][rctd]\n-* For @bors, [this cheat sheet][cheatsheet] is helpful (Remember to replace `@homu` with `@bors` in the commands that you use.)\n+* For [@bors][bors], [this cheat sheet][cheatsheet] is helpful\n+(though you'll need to replace `@homu` with `@bors` in any commands)\n * **Google!** ([search only in Rust Documentation][gsearchdocs] to find types, traits, etc. quickly)\n * Don't be afraid to ask! The Rust community is friendly and helpful.\n "}, {"sha": "0c3daea7a3cd60f44a30d1a20d09d5314267cb56", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -726,6 +726,17 @@ impl Build {\n         }\n     }\n \n+    pub fn is_verbose_than(&self, level: usize) -> bool {\n+        self.verbosity > level\n+    }\n+\n+    /// Prints a message if this build is configured in more verbose mode than `level`.\n+    fn verbose_than(&self, level: usize, msg: &str) {\n+        if self.is_verbose_than(level) {\n+            println!(\"{}\", msg);\n+        }\n+    }\n+\n     fn info(&self, msg: &str) {\n         if self.config.dry_run { return; }\n         println!(\"{}\", msg);\n@@ -1158,6 +1169,7 @@ impl Build {\n     /// Copies a file from `src` to `dst`\n     pub fn copy(&self, src: &Path, dst: &Path) {\n         if self.config.dry_run { return; }\n+        self.verbose_than(1, &format!(\"Copy {:?} to {:?}\", src, dst));\n         let _ = fs::remove_file(&dst);\n         let metadata = t!(src.symlink_metadata());\n         if metadata.file_type().is_symlink() {"}, {"sha": "28c9ff94dee7853db30f9cbcdbe382dda3b3b30a", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,6 +1,6 @@\n /// The addition operator `+`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory. For\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory. For\n /// example, [`std::time::SystemTime`] implements `Add<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime + Duration`.\n ///\n@@ -67,26 +67,26 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     on(\n-        all(_Self=\"{integer}\", RHS=\"{float}\"),\n+        all(_Self=\"{integer}\", Rhs=\"{float}\"),\n         message=\"cannot add a float to an integer\",\n     ),\n     on(\n-        all(_Self=\"{float}\", RHS=\"{integer}\"),\n+        all(_Self=\"{float}\", Rhs=\"{integer}\"),\n         message=\"cannot add an integer to a float\",\n     ),\n-    message=\"cannot add `{RHS}` to `{Self}`\",\n-    label=\"no implementation for `{Self} + {RHS}`\",\n+    message=\"cannot add `{Rhs}` to `{Self}`\",\n+    label=\"no implementation for `{Self} + {Rhs}`\",\n )]\n #[doc(alias = \"+\")]\n-pub trait Add<RHS=Self> {\n+pub trait Add<Rhs=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `+` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn add(self, rhs: RHS) -> Self::Output;\n+    fn add(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! add_impl {\n@@ -108,7 +108,7 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The subtraction operator `-`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory. For\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory. For\n /// example, [`std::time::SystemTime`] implements `Sub<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime - Duration`.\n ///\n@@ -173,18 +173,18 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot subtract `{RHS}` from `{Self}`\",\n-                         label=\"no implementation for `{Self} - {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot subtract `{Rhs}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} - {Rhs}`\")]\n #[doc(alias = \"-\")]\n-pub trait Sub<RHS=Self> {\n+pub trait Sub<Rhs=Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `-` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn sub(self, rhs: RHS) -> Self::Output;\n+    fn sub(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! sub_impl {\n@@ -206,7 +206,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The multiplication operator `*`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -293,18 +293,18 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot multiply `{RHS}` to `{Self}`\",\n-                         label=\"no implementation for `{Self} * {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot multiply `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} * {Rhs}`\")]\n #[doc(alias = \"*\")]\n-pub trait Mul<RHS=Self> {\n+pub trait Mul<Rhs=Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `*` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn mul(self, rhs: RHS) -> Self::Output;\n+    fn mul(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! mul_impl {\n@@ -326,7 +326,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The division operator `/`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -417,18 +417,18 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{RHS}`\",\n-                         label=\"no implementation for `{Self} / {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} / {Rhs}`\")]\n #[doc(alias = \"/\")]\n-pub trait Div<RHS=Self> {\n+pub trait Div<Rhs=Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `/` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn div(self, rhs: RHS) -> Self::Output;\n+    fn div(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! div_impl_integer {\n@@ -467,7 +467,7 @@ div_impl_float! { f32 f64 }\n \n /// The remainder operator `%`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -502,18 +502,18 @@ div_impl_float! { f32 f64 }\n /// ```\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{RHS}`\",\n-                         label=\"no implementation for `{Self} % {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} % {Rhs}`\")]\n #[doc(alias = \"%\")]\n-pub trait Rem<RHS=Self> {\n+pub trait Rem<Rhs=Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output = Self;\n \n     /// Performs the `%` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn rem(self, rhs: RHS) -> Self::Output;\n+    fn rem(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! rem_impl_integer {"}, {"sha": "a8f862f6c05a55f010d0e2dca351e90faaa2d976", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -59,7 +59,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise AND operator `&`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -112,17 +112,17 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitand\"]\n #[doc(alias = \"&\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {RHS}`\",\n-                         label=\"no implementation for `{Self} & {RHS}`\")]\n-pub trait BitAnd<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {Rhs}`\",\n+                         label=\"no implementation for `{Self} & {Rhs}`\")]\n+pub trait BitAnd<Rhs=Self> {\n     /// The resulting type after applying the `&` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `&` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitand(self, rhs: RHS) -> Self::Output;\n+    fn bitand(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitand_impl {\n@@ -143,7 +143,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise OR operator `|`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -196,17 +196,17 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitor\"]\n #[doc(alias = \"|\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {RHS}`\",\n-                         label=\"no implementation for `{Self} | {RHS}`\")]\n-pub trait BitOr<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {Rhs}`\",\n+                         label=\"no implementation for `{Self} | {Rhs}`\")]\n+pub trait BitOr<Rhs=Self> {\n     /// The resulting type after applying the `|` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `|` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitor(self, rhs: RHS) -> Self::Output;\n+    fn bitor(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitor_impl {\n@@ -227,7 +227,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise XOR operator `^`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -283,17 +283,17 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitxor\"]\n #[doc(alias = \"^\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {RHS}`\",\n-                         label=\"no implementation for `{Self} ^ {RHS}`\")]\n-pub trait BitXor<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {Rhs}`\",\n+                         label=\"no implementation for `{Self} ^ {Rhs}`\")]\n+pub trait BitXor<Rhs=Self> {\n     /// The resulting type after applying the `^` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `^` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitxor(self, rhs: RHS) -> Self::Output;\n+    fn bitxor(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitxor_impl {\n@@ -371,17 +371,17 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"shl\"]\n #[doc(alias = \"<<\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {RHS}`\",\n-                         label=\"no implementation for `{Self} << {RHS}`\")]\n-pub trait Shl<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {Rhs}`\",\n+                         label=\"no implementation for `{Self} << {Rhs}`\")]\n+pub trait Shl<Rhs=Self> {\n     /// The resulting type after applying the `<<` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `<<` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn shl(self, rhs: RHS) -> Self::Output;\n+    fn shl(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! shl_impl {\n@@ -480,17 +480,17 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n #[lang = \"shr\"]\n #[doc(alias = \">>\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {RHS}`\",\n-                         label=\"no implementation for `{Self} >> {RHS}`\")]\n-pub trait Shr<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {Rhs}`\",\n+                         label=\"no implementation for `{Self} >> {Rhs}`\")]\n+pub trait Shr<Rhs=Self> {\n     /// The resulting type after applying the `>>` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `>>` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn shr(self, rhs: RHS) -> Self::Output;\n+    fn shr(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! shr_impl {"}, {"sha": "73c3b3026d98bf2b7c8465e9436448d24bb0a7ba", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -2672,7 +2672,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData {\n         match *vdata {\n-            VariantData::Struct(ref fields, id) => {\n+            VariantData::Struct(ref fields, id, recovered) => {\n                 let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n \n                 hir::VariantData::Struct(\n@@ -2682,6 +2682,7 @@ impl<'a> LoweringContext<'a> {\n                         .map(|f| self.lower_struct_field(f))\n                         .collect(),\n                     hir_id,\n+                    recovered,\n                 )\n             },\n             VariantData::Tuple(ref fields, id) => {"}, {"sha": "5edddb3b38b0620d4d084dfd2870f691938169bd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -816,6 +816,9 @@ pub struct MacroDef {\n     pub legacy: bool,\n }\n \n+/// A block of statements `{ .. }`, which may have a label (in this case the\n+/// `targeted_by_break` field will be `true`) and may be `unsafe` by means of\n+/// the `rules` being anything but `DefaultBlock`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Block {\n     /// Statements in a block.\n@@ -1178,6 +1181,7 @@ impl fmt::Debug for Stmt {\n     }\n }\n \n+/// The contents of a statement.\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum StmtKind {\n     /// A local (`let`) binding.\n@@ -1208,21 +1212,28 @@ impl StmtKind {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Local {\n     pub pat: P<Pat>,\n+    /// Type annotation, if any (otherwise the type will be inferred).\n     pub ty: Option<P<Ty>>,\n     /// Initializer expression to set the value, if any.\n     pub init: Option<P<Expr>>,\n     pub hir_id: HirId,\n     pub span: Span,\n     pub attrs: ThinVec<Attribute>,\n+    /// Can be `ForLoopDesugar` if the `let` statement is part of a `for` loop\n+    /// desugaring. Otherwise will be `Normal`.\n     pub source: LocalSource,\n }\n \n-/// Represents a single arm of a `match` expression.\n+/// Represents a single arm of a `match` expression, e.g.\n+/// `<pats> (if <guard>) => <body>`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Arm {\n     pub attrs: HirVec<Attribute>,\n+    /// Multiple patterns can be combined with `|`\n     pub pats: HirVec<P<Pat>>,\n+    /// Optional guard clause.\n     pub guard: Option<Guard>,\n+    /// The expression the arm evaluates to if this arm matches.\n     pub body: P<Expr>,\n }\n \n@@ -2173,7 +2184,7 @@ impl StructField {\n /// Id of the whole struct lives in `Item`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum VariantData {\n-    Struct(HirVec<StructField>, HirId),\n+    Struct(HirVec<StructField>, HirId, /* recovered */ bool),\n     Tuple(HirVec<StructField>, HirId),\n     Unit(HirId),\n }\n@@ -2187,7 +2198,7 @@ impl VariantData {\n     }\n     pub fn hir_id(&self) -> HirId {\n         match *self {\n-            VariantData::Struct(_, hir_id)\n+            VariantData::Struct(_, hir_id, _)\n             | VariantData::Tuple(_, hir_id)\n             | VariantData::Unit(hir_id) => hir_id,\n         }"}, {"sha": "bff4190ae7925cb6aa6002f62cf1f5f82ed99727", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -591,12 +591,12 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?; // end the outer cbox\n             }\n-            hir::ItemKind::Fn(ref decl, header, ref typarams, body) => {\n+            hir::ItemKind::Fn(ref decl, header, ref param_names, body) => {\n                 self.head(\"\")?;\n                 self.print_fn(decl,\n                               header,\n                               Some(item.ident.name),\n-                              typarams,\n+                              param_names,\n                               &item.vis,\n                               &[],\n                               Some(body))?;"}, {"sha": "91b84b68802b1366556b50b81af1ea5e3ada7fb8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1811,6 +1811,7 @@ pub struct VariantDef {\n     pub fields: Vec<FieldDef>,\n     pub ctor_kind: CtorKind,\n     flags: VariantFlags,\n+    pub recovered: bool,\n }\n \n impl<'a, 'gcx, 'tcx> VariantDef {\n@@ -1829,16 +1830,17 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n     ///\n     /// If someone speeds up attribute loading to not be a performance concern, they can\n     /// remove this hack and use the constructor `DefId` everywhere.\n-    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-               did: DefId,\n-               ident: Ident,\n-               discr: VariantDiscr,\n-               fields: Vec<FieldDef>,\n-               adt_kind: AdtKind,\n-               ctor_kind: CtorKind,\n-               attribute_def_id: DefId)\n-               -> Self\n-    {\n+    pub fn new(\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        did: DefId,\n+        ident: Ident,\n+        discr: VariantDiscr,\n+        fields: Vec<FieldDef>,\n+        adt_kind: AdtKind,\n+        ctor_kind: CtorKind,\n+        attribute_def_id: DefId,\n+        recovered: bool,\n+    ) -> Self {\n         debug!(\"VariantDef::new({:?}, {:?}, {:?}, {:?}, {:?}, {:?}, {:?})\", did, ident, discr,\n                fields, adt_kind, ctor_kind, attribute_def_id);\n         let mut flags = VariantFlags::NO_VARIANT_FLAGS;\n@@ -1852,7 +1854,8 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n             discr,\n             fields,\n             ctor_kind,\n-            flags\n+            flags,\n+            recovered,\n         }\n     }\n \n@@ -1868,7 +1871,8 @@ impl_stable_hash_for!(struct VariantDef {\n     discr,\n     fields,\n     ctor_kind,\n-    flags\n+    flags,\n+    recovered\n });\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "c608c03095aa35f5c00d0c1fdf5c0361a2b8bd8c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -576,7 +576,8 @@ impl<'a, 'tcx> CrateMetadata {\n             }).collect(),\n             adt_kind,\n             data.ctor_kind,\n-            attribute_def_id\n+            attribute_def_id,\n+            false,\n         )\n     }\n "}, {"sha": "828ffc6d320e75a4c1488f5fca664bbf67ba2fa8", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -293,13 +293,20 @@ impl<'a> Resolver<'a> {\n             (Def::Enum(..), PathSource::TupleStruct)\n                 | (Def::Enum(..), PathSource::Expr(..))  => {\n                 if let Some(variants) = self.collect_enum_variants(def) {\n-                    err.note(&format!(\"did you mean to use one \\\n-                                       of the following variants?\\n{}\",\n-                        variants.iter()\n-                            .map(|suggestion| path_names_to_string(suggestion))\n-                            .map(|suggestion| format!(\"- `{}`\", suggestion))\n-                            .collect::<Vec<_>>()\n-                            .join(\"\\n\")));\n+                    if !variants.is_empty() {\n+                        let msg = if variants.len() == 1 {\n+                            \"try using the enum's variant\"\n+                        } else {\n+                            \"try using one of the enum's variants\"\n+                        };\n+\n+                        err.span_suggestions(\n+                            span,\n+                            msg,\n+                            variants.iter().map(path_names_to_string),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 } else {\n                     err.note(\"did you mean to use one of the enum's variants?\");\n                 }"}, {"sha": "01bb643c1d5873cd1c574ae02211deafd0c0048c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -481,8 +481,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         };\n \n         let (value, fields) = match item.node {\n-            ast::ItemKind::Struct(ast::VariantData::Struct(ref fields, _), _) |\n-            ast::ItemKind::Union(ast::VariantData::Struct(ref fields, _), _) => {\n+            ast::ItemKind::Struct(ast::VariantData::Struct(ref fields, ..), _) |\n+            ast::ItemKind::Union(ast::VariantData::Struct(ref fields, ..), _) => {\n                 let include_priv_fields = !self.save_ctxt.config.pub_only;\n                 let fields_str = fields\n                     .iter()\n@@ -560,7 +560,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             let name_span = variant.node.ident.span;\n \n             match variant.node.data {\n-                ast::VariantData::Struct(ref fields, _) => {\n+                ast::VariantData::Struct(ref fields, ..) => {\n                     let fields_str = fields\n                         .iter()\n                         .enumerate()"}, {"sha": "6e47ae6b159845259441cb626c0499683f46d9ea", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -703,7 +703,7 @@ impl Sig for ast::Variant_ {\n     fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let mut text = self.ident.to_string();\n         match self.data {\n-            ast::VariantData::Struct(ref fields, id) => {\n+            ast::VariantData::Struct(ref fields, id, r) => {\n                 let name_def = SigElement {\n                     id: id_from_node_id(id, scx),\n                     start: offset,\n@@ -712,12 +712,16 @@ impl Sig for ast::Variant_ {\n                 text.push_str(\" { \");\n                 let mut defs = vec![name_def];\n                 let mut refs = vec![];\n-                for f in fields {\n-                    let field_sig = f.make(offset + text.len(), Some(id), scx)?;\n-                    text.push_str(&field_sig.text);\n-                    text.push_str(\", \");\n-                    defs.extend(field_sig.defs.into_iter());\n-                    refs.extend(field_sig.refs.into_iter());\n+                if r {\n+                    text.push_str(\"/* parse error */ \");\n+                } else {\n+                    for f in fields {\n+                        let field_sig = f.make(offset + text.len(), Some(id), scx)?;\n+                        text.push_str(&field_sig.text);\n+                        text.push_str(\", \");\n+                        defs.extend(field_sig.defs.into_iter());\n+                        refs.extend(field_sig.refs.into_iter());\n+                    }\n                 }\n                 text.push('}');\n                 Ok(Signature { text, defs, refs })"}, {"sha": "c65f3443fbb546b0bd9659bfcf40ba4c98ed466e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1486,37 +1486,34 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             segment.with_generic_args(|generic_args| {\n                 let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n                 for arg in &generic_args.args {\n-                    let (mut span_err, span, kind) = match arg {\n-                        // FIXME(varkor): unify E0109, E0110 and E0111.\n+                    let (span, kind) = match arg {\n                         hir::GenericArg::Lifetime(lt) => {\n                             if err_for_lt { continue }\n                             err_for_lt = true;\n                             has_err = true;\n-                            (struct_span_err!(self.tcx().sess, lt.span, E0110,\n-                                              \"lifetime arguments are not allowed on this entity\"),\n-                             lt.span,\n-                             \"lifetime\")\n+                            (lt.span, \"lifetime\")\n                         }\n                         hir::GenericArg::Type(ty) => {\n                             if err_for_ty { continue }\n                             err_for_ty = true;\n                             has_err = true;\n-                            (struct_span_err!(self.tcx().sess, ty.span, E0109,\n-                                              \"type arguments are not allowed on this entity\"),\n-                             ty.span,\n-                             \"type\")\n+                            (ty.span, \"type\")\n                         }\n                         hir::GenericArg::Const(ct) => {\n                             if err_for_ct { continue }\n                             err_for_ct = true;\n-                            (struct_span_err!(self.tcx().sess, ct.span, E0111,\n-                                              \"const parameters are not allowed on this type\"),\n-                             ct.span,\n-                             \"const\")\n+                            (ct.span, \"const\")\n                         }\n                     };\n-                    span_err.span_label(span, format!(\"{} argument not allowed\", kind))\n-                            .emit();\n+                    let mut err = struct_span_err!(\n+                        self.tcx().sess,\n+                        span,\n+                        E0109,\n+                        \"{} arguments are not allowed for this type\",\n+                        kind,\n+                    );\n+                    err.span_label(span, format!(\"{} argument not allowed\", kind));\n+                    err.emit();\n                     if err_for_lt && err_for_ty && err_for_ct {\n                         break;\n                     }"}, {"sha": "c30b9d65fec831bef6c99f856554a8cf8189fd1e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -918,14 +918,16 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         pat_ty\n     }\n \n-    fn check_struct_pat_fields(&self,\n-                               adt_ty: Ty<'tcx>,\n-                               pat_id: hir::HirId,\n-                               span: Span,\n-                               variant: &'tcx ty::VariantDef,\n-                               fields: &'gcx [Spanned<hir::FieldPat>],\n-                               etc: bool,\n-                               def_bm: ty::BindingMode) -> bool {\n+    fn check_struct_pat_fields(\n+        &self,\n+        adt_ty: Ty<'tcx>,\n+        pat_id: hir::HirId,\n+        span: Span,\n+        variant: &'tcx ty::VariantDef,\n+        fields: &'gcx [Spanned<hir::FieldPat>],\n+        etc: bool,\n+        def_bm: ty::BindingMode,\n+    ) -> bool {\n         let tcx = self.tcx;\n \n         let (substs, adt) = match adt_ty.sty {\n@@ -985,7 +987,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 .map(|field| field.ident.modern())\n                 .filter(|ident| !used_fields.contains_key(&ident))\n                 .collect::<Vec<_>>();\n-        if inexistent_fields.len() > 0 {\n+        if inexistent_fields.len() > 0 && !variant.recovered {\n             let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n                 (format!(\"a field named `{}`\", inexistent_fields[0].1), \"this\", \"\")\n             } else {"}, {"sha": "f933e61b8c63e2a6ed335a215f2110e012350fe7", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 50, "deletions": 33, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -332,44 +332,61 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // If the method name is the name of a field with a function or closure type,\n                 // give a helping note that it has to be called as `(x.f)(...)`.\n                 if let SelfSource::MethodCall(expr) = source {\n-                    for (ty, _) in self.autoderef(span, rcvr_ty) {\n-                        if let ty::Adt(def, substs) = ty.sty {\n-                            if !def.is_enum() {\n+                    let field_receiver = self\n+                        .autoderef(span, rcvr_ty)\n+                        .find_map(|(ty, _)| match ty.sty {\n+                            ty::Adt(def, substs) if !def.is_enum() => {\n                                 let variant = &def.non_enum_variant();\n-                                if let Some(index) = self.tcx.find_field_index(item_name, variant) {\n+                                self.tcx.find_field_index(item_name, variant).map(|index| {\n                                     let field = &variant.fields[index];\n-                                    let snippet = tcx.sess.source_map().span_to_snippet(expr.span);\n-                                    let expr_string = match snippet {\n-                                        Ok(expr_string) => expr_string,\n-                                        _ => \"s\".into(), // Default to a generic placeholder for the\n-                                                         // expression when we can't generate a\n-                                                         // string snippet.\n-                                    };\n-\n                                     let field_ty = field.ty(tcx, substs);\n-                                    let scope = self.tcx.hir().get_module_parent_by_hir_id(\n-                                        self.body_id);\n-                                    if field.vis.is_accessible_from(scope, self.tcx) {\n-                                        if self.is_fn_ty(&field_ty, span) {\n-                                            err.help(&format!(\"use `({0}.{1})(...)` if you \\\n-                                                               meant to call the function \\\n-                                                               stored in the `{1}` field\",\n-                                                              expr_string,\n-                                                              item_name));\n-                                        } else {\n-                                            err.help(&format!(\"did you mean to write `{0}.{1}` \\\n-                                                               instead of `{0}.{1}(...)`?\",\n-                                                              expr_string,\n-                                                              item_name));\n-                                        }\n-                                        err.span_label(span, \"field, not a method\");\n-                                    } else {\n-                                        err.span_label(span, \"private field, not a method\");\n-                                    }\n-                                    break;\n-                                }\n+                                    (field, field_ty)\n+                                })\n+                            }\n+                            _ => None,\n+                        });\n+\n+                    if let Some((field, field_ty)) = field_receiver {\n+                        let scope = self.tcx.hir().get_module_parent_by_hir_id(self.body_id);\n+                        let is_accessible = field.vis.is_accessible_from(scope, self.tcx);\n+\n+                        if is_accessible {\n+                            if self.is_fn_ty(&field_ty, span) {\n+                                let expr_span = expr.span.to(item_name.span);\n+                                err.multipart_suggestion(\n+                                    &format!(\n+                                        \"to call the function stored in `{}`, \\\n+                                         surround the field access with parentheses\",\n+                                        item_name,\n+                                    ),\n+                                    vec![\n+                                        (expr_span.shrink_to_lo(), '('.to_string()),\n+                                        (expr_span.shrink_to_hi(), ')'.to_string()),\n+                                    ],\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            } else {\n+                                let call_expr = self.tcx.hir().expect_expr_by_hir_id(\n+                                    self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n+                                );\n+\n+                                let span = call_expr.span.trim_start(item_name.span).unwrap();\n+\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"remove the arguments\",\n+                                    String::new(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n                             }\n                         }\n+\n+                        let field_kind = if is_accessible {\n+                            \"field\"\n+                        } else {\n+                            \"private field\"\n+                        };\n+                        err.span_label(item_name.span, format!(\"{}, not a method\", field_kind));\n                     }\n                 } else {\n                     err.span_label(span, format!(\"{} not found in `{}`\", item_kind, ty_str));"}, {"sha": "ab0e4b086bc77492b53ca6e21c0e786da195e8f7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -3734,12 +3734,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                            field, expr_t)\n     }\n \n-    fn report_unknown_field(&self,\n-                            ty: Ty<'tcx>,\n-                            variant: &'tcx ty::VariantDef,\n-                            field: &hir::Field,\n-                            skip_fields: &[hir::Field],\n-                            kind_name: &str) {\n+    fn report_unknown_field(\n+        &self,\n+        ty: Ty<'tcx>,\n+        variant: &'tcx ty::VariantDef,\n+        field: &hir::Field,\n+        skip_fields: &[hir::Field],\n+        kind_name: &str,\n+    ) {\n+        if variant.recovered {\n+            return;\n+        }\n         let mut err = self.type_error_struct_with_diag(\n             field.ident.span,\n             |actual| match ty.sty {"}, {"sha": "c0739db3df6a2ad51f4bd441c0fd04e46313ddfd", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -598,14 +598,19 @@ fn convert_variant<'a, 'tcx>(\n             }\n         })\n         .collect();\n+    let recovered = match def {\n+        hir::VariantData::Struct(_, _, r) => *r,\n+        _ => false,\n+    };\n     ty::VariantDef::new(tcx,\n         did,\n         ident,\n         discr,\n         fields,\n         adt_kind,\n         CtorKind::from_hir(def),\n-        attribute_def_id\n+        attribute_def_id,\n+        recovered,\n     )\n }\n "}, {"sha": "cde37fb23c320c54666e7979b1ad2e935e020324", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1290,45 +1290,34 @@ fn main() {\n \"##,\n \n E0109: r##\"\n-You tried to give a type parameter to a type which doesn't need it. Erroneous\n-code example:\n+You tried to provide a generic argument to a type which doesn't need it.\n+Erroneous code example:\n \n ```compile_fail,E0109\n-type X = u32<i32>; // error: type arguments are not allowed on this entity\n+type X = u32<i32>; // error: type arguments are not allowed for this type\n+type Y = bool<'static>; // error: lifetime parameters are not allowed on\n+                        //        this type\n ```\n \n-Please check that you used the correct type and recheck its definition. Perhaps\n-it doesn't need the type parameter.\n+Check that you used the correct argument and that the definition is correct.\n \n Example:\n \n ```\n-type X = u32; // this compiles\n+type X = u32; // ok!\n+type Y = bool; // ok!\n ```\n \n-Note that type parameters for enum-variant constructors go after the variant,\n-not after the enum (`Option::None::<u32>`, not `Option::<u32>::None`).\n+Note that generic arguments for enum variant constructors go after the variant,\n+not after the enum. For example, you would write `Option::None::<u32>`,\n+rather than `Option::<u32>::None`.\n \"##,\n \n E0110: r##\"\n-You tried to give a lifetime parameter to a type which doesn't need it.\n-Erroneous code example:\n-\n-```compile_fail,E0110\n-type X = u32<'static>; // error: lifetime parameters are not allowed on\n-                       //        this type\n-```\n-\n-Please check that the correct type was used and recheck its definition; perhaps\n-it doesn't need the lifetime parameter. Example:\n-\n-```\n-type X = u32; // ok!\n-```\n-\"##,\n+#### Note: this error code is no longer emitted by the compiler.\n \n-E0111: r##\"\n-You tried to give a const parameter to a type which doesn't need it.\n+You tried to provide a lifetime to a type which doesn't need it.\n+See `E0109` for more details.\n \"##,\n \n E0116: r##\""}, {"sha": "adbe73b165ef4b812901be583e908b104929ab90", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -435,7 +435,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     let new_ty = match &poly_trait.trait_ {\n                         &Type::ResolvedPath {\n                             ref path,\n-                            ref typarams,\n+                            ref param_names,\n                             ref did,\n                             ref is_generic,\n                         } => {\n@@ -444,7 +444,13 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                                                 .expect(\"segments were empty\");\n \n                             let (old_input, old_output) = match last_segment.args {\n-                                GenericArgs::AngleBracketed { types, .. } => (types, None),\n+                                GenericArgs::AngleBracketed { args, .. } => {\n+                                    let types = args.iter().filter_map(|arg| match arg {\n+                                        GenericArg::Type(ty) => Some(ty.clone()),\n+                                        _ => None,\n+                                    }).collect();\n+                                    (types, None)\n+                                }\n                                 GenericArgs::Parenthesized { inputs, output, .. } => {\n                                     (inputs, output)\n                                 }\n@@ -469,7 +475,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n                             Type::ResolvedPath {\n                                 path: new_path,\n-                                typarams: typarams.clone(),\n+                                param_names: param_names.clone(),\n                                 did: did.clone(),\n                                 is_generic: *is_generic,\n                             }\n@@ -669,7 +675,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                             match **trait_ {\n                                 Type::ResolvedPath {\n                                     path: ref trait_path,\n-                                    ref typarams,\n+                                    ref param_names,\n                                     ref did,\n                                     ref is_generic,\n                                 } => {\n@@ -724,7 +730,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         PolyTrait {\n                                             trait_: Type::ResolvedPath {\n                                                 path: new_trait_path,\n-                                                typarams: typarams.clone(),\n+                                                param_names: param_names.clone(),\n                                                 did: did.clone(),\n                                                 is_generic: *is_generic,\n                                             },"}, {"sha": "ba4481733d592cab99a8381dd8f5d4569e37d008", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 103, "deletions": 77, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -17,11 +17,11 @@ use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::middle::stability;\n use rustc::mir::interpret::{GlobalId, ConstValue};\n-use rustc::hir::{self, GenericArg, HirVec};\n+use rustc::hir::{self, HirVec};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::map::DisambiguatedDefPathData;\n-use rustc::ty::subst::{Kind, InternalSubsts, SubstsRef};\n+use rustc::ty::subst::{Kind, InternalSubsts, SubstsRef, UnpackedKind};\n use rustc::ty::{self, DefIdTree, TyCtxt, Region, RegionVid, Ty, AdtKind};\n use rustc::ty::fold::TypeFolder;\n use rustc::ty::layout::VariantIdx;\n@@ -1057,7 +1057,7 @@ impl GenericBound {\n         GenericBound::TraitBound(PolyTrait {\n             trait_: ResolvedPath {\n                 path,\n-                typarams: None,\n+                param_names: None,\n                 did,\n                 is_generic: false,\n             },\n@@ -1101,42 +1101,48 @@ impl Clean<GenericBound> for hir::GenericBound {\n     }\n }\n \n-fn external_generic_args(cx: &DocContext<'_>, trait_did: Option<DefId>, has_self: bool,\n-                        bindings: Vec<TypeBinding>, substs: SubstsRef<'_>) -> GenericArgs {\n-    let lifetimes = substs.regions().filter_map(|v| v.clean(cx)).collect();\n-    let types = substs.types().skip(has_self as usize).collect::<Vec<_>>();\n+fn external_generic_args(\n+    cx: &DocContext<'_>,\n+    trait_did: Option<DefId>,\n+    has_self: bool,\n+    bindings: Vec<TypeBinding>,\n+    substs: SubstsRef<'_>,\n+) -> GenericArgs {\n+    let mut skip_self = has_self;\n+    let mut ty_sty = None;\n+    let args: Vec<_> = substs.iter().filter_map(|kind| match kind.unpack() {\n+        UnpackedKind::Lifetime(lt) => {\n+            lt.clean(cx).and_then(|lt| Some(GenericArg::Lifetime(lt)))\n+        }\n+        UnpackedKind::Type(_) if skip_self => {\n+            skip_self = false;\n+            None\n+        }\n+        UnpackedKind::Type(ty) => {\n+            ty_sty = Some(&ty.sty);\n+            Some(GenericArg::Type(ty.clean(cx)))\n+        }\n+        UnpackedKind::Const(ct) => Some(GenericArg::Const(ct.clean(cx))),\n+    }).collect();\n \n     match trait_did {\n         // Attempt to sugar an external path like Fn<(A, B,), C> to Fn(A, B) -> C\n         Some(did) if cx.tcx.lang_items().fn_trait_kind(did).is_some() => {\n-            assert_eq!(types.len(), 1);\n-            let inputs = match types[0].sty {\n-                ty::Tuple(ref tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n-                _ => {\n-                    return GenericArgs::AngleBracketed {\n-                        lifetimes,\n-                        types: types.clean(cx),\n-                        bindings,\n-                    }\n-                }\n+            assert!(ty_sty.is_some());\n+            let inputs = match ty_sty {\n+                Some(ty::Tuple(ref tys)) => tys.iter().map(|t| t.clean(cx)).collect(),\n+                _ => return GenericArgs::AngleBracketed { args, bindings },\n             };\n             let output = None;\n             // FIXME(#20299) return type comes from a projection now\n             // match types[1].sty {\n             //     ty::Tuple(ref v) if v.is_empty() => None, // -> ()\n             //     _ => Some(types[1].clean(cx))\n             // };\n-            GenericArgs::Parenthesized {\n-                inputs,\n-                output,\n-            }\n+            GenericArgs::Parenthesized { inputs, output }\n         },\n         _ => {\n-            GenericArgs::AngleBracketed {\n-                lifetimes,\n-                types: types.clean(cx),\n-                bindings,\n-            }\n+            GenericArgs::AngleBracketed { args, bindings }\n         }\n     }\n }\n@@ -1188,7 +1194,7 @@ impl<'a, 'tcx> Clean<GenericBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n             PolyTrait {\n                 trait_: ResolvedPath {\n                     path,\n-                    typarams: None,\n+                    param_names: None,\n                     did: trait_ref.def_id,\n                     is_generic: false,\n                 },\n@@ -1474,14 +1480,14 @@ impl GenericParamDef {\n     }\n }\n \n-impl<'tcx> Clean<GenericParamDef> for ty::GenericParamDef {\n+impl Clean<GenericParamDef> for ty::GenericParamDef {\n     fn clean(&self, cx: &DocContext<'_>) -> GenericParamDef {\n         let (name, kind) = match self.kind {\n             ty::GenericParamDefKind::Lifetime => {\n                 (self.name.to_string(), GenericParamDefKind::Lifetime)\n             }\n             ty::GenericParamDefKind::Type { has_default, .. } => {\n-                cx.renderinfo.borrow_mut().external_typarams\n+                cx.renderinfo.borrow_mut().external_param_names\n                              .insert(self.def_id, self.name.clean(cx));\n                 let default = if has_default {\n                     Some(cx.tcx.type_of(self.def_id).clean(cx))\n@@ -1496,7 +1502,10 @@ impl<'tcx> Clean<GenericParamDef> for ty::GenericParamDef {\n                 })\n             }\n             ty::GenericParamDefKind::Const { .. } => {\n-                unimplemented!() // FIXME(const_generics)\n+                (self.name.clean(cx), GenericParamDefKind::Const {\n+                    did: self.def_id,\n+                    ty: cx.tcx.type_of(self.def_id).clean(cx),\n+                })\n             }\n         };\n \n@@ -1697,9 +1706,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n                         .flat_map(|param| match param.kind {\n                             ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n                             ty::GenericParamDefKind::Type { .. } => None,\n-                            ty::GenericParamDefKind::Const { .. } => {\n-                                unimplemented!() // FIXME(const_generics)\n-                            }\n+                            ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n                         }).chain(simplify::ty_params(stripped_typarams).into_iter())\n                         .collect(),\n             where_predicates: simplify::where_clauses(cx, where_predicates),\n@@ -2260,7 +2267,7 @@ pub enum Type {\n     /// Structs/enums/traits (most that'd be an `hir::TyKind::Path`).\n     ResolvedPath {\n         path: Path,\n-        typarams: Option<Vec<GenericBound>>,\n+        param_names: Option<Vec<GenericBound>>,\n         did: DefId,\n         /// `true` if is a `T::Name` path for associated types.\n         is_generic: bool,\n@@ -2381,12 +2388,15 @@ impl Type {\n         }\n     }\n \n-    pub fn generics(&self) -> Option<&[Type]> {\n+    pub fn generics(&self) -> Option<Vec<Type>> {\n         match *self {\n             ResolvedPath { ref path, .. } => {\n                 path.segments.last().and_then(|seg| {\n-                    if let GenericArgs::AngleBracketed { ref types, .. } = seg.args {\n-                        Some(&**types)\n+                    if let GenericArgs::AngleBracketed { ref args, .. } = seg.args {\n+                        Some(args.iter().filter_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty.clone()),\n+                            _ => None,\n+                        }).collect())\n                     } else {\n                         None\n                     }\n@@ -2722,15 +2732,15 @@ impl Clean<Type> for hir::Ty {\n             }\n             TyKind::TraitObject(ref bounds, ref lifetime) => {\n                 match bounds[0].clean(cx).trait_ {\n-                    ResolvedPath { path, typarams: None, did, is_generic } => {\n+                    ResolvedPath { path, param_names: None, did, is_generic } => {\n                         let mut bounds: Vec<self::GenericBound> = bounds[1..].iter().map(|bound| {\n                             self::GenericBound::TraitBound(bound.clean(cx),\n                                                            hir::TraitBoundModifier::None)\n                         }).collect();\n                         if !lifetime.is_elided() {\n                             bounds.push(self::GenericBound::Outlives(lifetime.clean(cx)));\n                         }\n-                        ResolvedPath { path, typarams: Some(bounds), did, is_generic, }\n+                        ResolvedPath { path, param_names: Some(bounds), did, is_generic, }\n                     }\n                     _ => Infer // shouldn't happen\n                 }\n@@ -2797,7 +2807,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                                          None, false, vec![], substs);\n                 ResolvedPath {\n                     path,\n-                    typarams: None,\n+                    param_names: None,\n                     did,\n                     is_generic: false,\n                 }\n@@ -2808,7 +2818,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                                          None, false, vec![], InternalSubsts::empty());\n                 ResolvedPath {\n                     path: path,\n-                    typarams: None,\n+                    param_names: None,\n                     did: did,\n                     is_generic: false,\n                 }\n@@ -2829,8 +2839,8 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n                 inline::record_extern_fqn(cx, did, TypeKind::Trait);\n \n-                let mut typarams = vec![];\n-                reg.clean(cx).map(|b| typarams.push(GenericBound::Outlives(b)));\n+                let mut param_names = vec![];\n+                reg.clean(cx).map(|b| param_names.push(GenericBound::Outlives(b)));\n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n                     let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n@@ -2839,13 +2849,13 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     let bound = GenericBound::TraitBound(PolyTrait {\n                         trait_: ResolvedPath {\n                             path,\n-                            typarams: None,\n+                            param_names: None,\n                             did,\n                             is_generic: false,\n                         },\n                         generic_params: Vec::new(),\n                     }, hir::TraitBoundModifier::None);\n-                    typarams.push(bound);\n+                    param_names.push(bound);\n                 }\n \n                 let mut bindings = vec![];\n@@ -2860,7 +2870,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     false, bindings, substs);\n                 ResolvedPath {\n                     path,\n-                    typarams: Some(typarams),\n+                    param_names: Some(param_names),\n                     did,\n                     is_generic: false,\n                 }\n@@ -2937,6 +2947,15 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n+    fn clean(&self, cx: &DocContext<'_>) -> Constant {\n+        Constant {\n+            type_: self.ty.clean(cx),\n+            expr: format!(\"{:?}\", self.val), // FIXME(const_generics)\n+        }\n+    }\n+}\n+\n impl Clean<Item> for hir::StructField {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let local_did = cx.tcx.hir().local_def_id_from_hir_id(self.hir_id);\n@@ -3244,11 +3263,27 @@ impl Clean<Path> for hir::Path {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+pub enum GenericArg {\n+    Lifetime(Lifetime),\n+    Type(Type),\n+    Const(Constant),\n+}\n+\n+impl fmt::Display for GenericArg {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            GenericArg::Lifetime(lt) => lt.fmt(f),\n+            GenericArg::Type(ty) => ty.fmt(f),\n+            GenericArg::Const(ct) => ct.fmt(f),\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum GenericArgs {\n     AngleBracketed {\n-        lifetimes: Vec<Lifetime>,\n-        types: Vec<Type>,\n+        args: Vec<GenericArg>,\n         bindings: Vec<TypeBinding>,\n     },\n     Parenthesized {\n@@ -3266,27 +3301,19 @@ impl Clean<GenericArgs> for hir::GenericArgs {\n                 output: if output != Type::Tuple(Vec::new()) { Some(output) } else { None }\n             }\n         } else {\n-            let (mut lifetimes, mut types) = (vec![], vec![]);\n-            let mut elided_lifetimes = true;\n-            for arg in &self.args {\n-                match arg {\n-                    GenericArg::Lifetime(lt) => {\n-                        if !lt.is_elided() {\n-                            elided_lifetimes = false;\n-                        }\n-                        lifetimes.push(lt.clean(cx));\n-                    }\n-                    GenericArg::Type(ty) => {\n-                        types.push(ty.clean(cx));\n-                    }\n-                    GenericArg::Const(..) => {\n-                        unimplemented!() // FIXME(const_generics)\n-                    }\n-                }\n-            }\n+            let elide_lifetimes = self.args.iter().all(|arg| match arg {\n+                hir::GenericArg::Lifetime(lt) => lt.is_elided(),\n+                _ => true,\n+            });\n             GenericArgs::AngleBracketed {\n-                lifetimes: if elided_lifetimes { vec![] } else { lifetimes },\n-                types,\n+                args: self.args.iter().filter_map(|arg| match arg {\n+                    hir::GenericArg::Lifetime(lt) if !elide_lifetimes => {\n+                        Some(GenericArg::Lifetime(lt.clean(cx)))\n+                    }\n+                    hir::GenericArg::Lifetime(_) => None,\n+                    hir::GenericArg::Type(ty) => Some(GenericArg::Type(ty.clean(cx))),\n+                    hir::GenericArg::Const(ct) => Some(GenericArg::Const(ct.clean(cx))),\n+                }).collect(),\n                 bindings: self.bindings.clean(cx),\n             }\n         }\n@@ -3310,8 +3337,8 @@ impl Clean<PathSegment> for hir::PathSegment {\n \n fn strip_type(ty: Type) -> Type {\n     match ty {\n-        Type::ResolvedPath { path, typarams, did, is_generic } => {\n-            Type::ResolvedPath { path: strip_path(&path), typarams, did, is_generic }\n+        Type::ResolvedPath { path, param_names, did, is_generic } => {\n+            Type::ResolvedPath { path: strip_path(&path), param_names, did, is_generic }\n         }\n         Type::Tuple(inner_tys) => {\n             Type::Tuple(inner_tys.iter().map(|t| strip_type(t.clone())).collect())\n@@ -3338,9 +3365,8 @@ fn strip_path(path: &Path) -> Path {\n         PathSegment {\n             name: s.name.clone(),\n             args: GenericArgs::AngleBracketed {\n-                lifetimes: Vec::new(),\n-                types: Vec::new(),\n-                bindings: Vec::new(),\n+                args: vec![],\n+                bindings: vec![],\n             }\n         }\n     }).collect();\n@@ -3491,7 +3517,7 @@ impl Clean<Item> for doctree::Static {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub struct Constant {\n     pub type_: Type,\n     pub expr: String,\n@@ -3971,7 +3997,7 @@ fn resolve_type(cx: &DocContext<'_>,\n         _ => false,\n     };\n     let did = register_def(&*cx, path.def);\n-    ResolvedPath { path: path, typarams: None, did: did, is_generic: is_generic }\n+    ResolvedPath { path: path, param_names: None, did: did, is_generic: is_generic }\n }\n \n pub fn register_def(cx: &DocContext<'_>, def: Def) -> DefId {\n@@ -4397,9 +4423,9 @@ impl From<GenericBound> for SimpleBound {\n         match bound.clone() {\n             GenericBound::Outlives(l) => SimpleBound::Outlives(l),\n             GenericBound::TraitBound(t, mod_) => match t.trait_ {\n-                Type::ResolvedPath { path, typarams, .. } => {\n+                Type::ResolvedPath { path, param_names, .. } => {\n                     SimpleBound::TraitBound(path.segments,\n-                                            typarams\n+                                            param_names\n                                                 .map_or_else(|| Vec::new(), |v| v.iter()\n                                                         .map(|p| SimpleBound::from(p.clone()))\n                                                         .collect()),"}, {"sha": "1982a16f3b81dd84c95bef0fdc4a0d2a9a409fc1", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -236,8 +236,16 @@ impl<'tcx> DocContext<'tcx> {\n                 ty::GenericParamDefKind::Type { .. } => {\n                     args.push(hir::GenericArg::Type(self.ty_param_to_ty(param.clone())));\n                 }\n-                ty::GenericParamDefKind::Const { .. } => {\n-                    unimplemented!() // FIXME(const_generics)\n+                ty::GenericParamDefKind::Const => {\n+                    args.push(hir::GenericArg::Const(hir::ConstArg {\n+                        value: hir::AnonConst {\n+                            hir_id: hir::DUMMY_HIR_ID,\n+                            body: hir::BodyId {\n+                                hir_id: hir::DUMMY_HIR_ID,\n+                            }\n+                        },\n+                        span: DUMMY_SP,\n+                    }))\n                 }\n             }\n         }"}, {"sha": "3d8af7c7716b1475439bd40ba3252c09d6ccdb3e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -260,6 +260,14 @@ impl fmt::Display for clean::Lifetime {\n     }\n }\n \n+impl fmt::Display for clean::Constant {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.expr, f)?;\n+        f.write_str(\": \")?;\n+        fmt::Display::fmt(&self.type_, f)\n+    }\n+}\n+\n impl fmt::Display for clean::PolyTrait {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if !self.generic_params.is_empty() {\n@@ -301,32 +309,23 @@ impl fmt::Display for clean::GenericBound {\n impl fmt::Display for clean::GenericArgs {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            clean::GenericArgs::AngleBracketed {\n-                ref lifetimes, ref types, ref bindings\n-            } => {\n-                if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n+            clean::GenericArgs::AngleBracketed { ref args, ref bindings } => {\n+                if !args.is_empty() || !bindings.is_empty() {\n                     if f.alternate() {\n                         f.write_str(\"<\")?;\n                     } else {\n                         f.write_str(\"&lt;\")?;\n                     }\n                     let mut comma = false;\n-                    for lifetime in lifetimes {\n-                        if comma {\n-                            f.write_str(\", \")?;\n-                        }\n-                        comma = true;\n-                        write!(f, \"{}\", *lifetime)?;\n-                    }\n-                    for ty in types {\n+                    for arg in args {\n                         if comma {\n                             f.write_str(\", \")?;\n                         }\n                         comma = true;\n                         if f.alternate() {\n-                            write!(f, \"{:#}\", *ty)?;\n+                            write!(f, \"{:#}\", *arg)?;\n                         } else {\n-                            write!(f, \"{}\", *ty)?;\n+                            write!(f, \"{}\", *arg)?;\n                         }\n                     }\n                     for binding in bindings {\n@@ -522,8 +521,8 @@ fn primitive_link(f: &mut fmt::Formatter<'_>,\n \n /// Helper to render type parameters\n fn tybounds(w: &mut fmt::Formatter<'_>,\n-            typarams: &Option<Vec<clean::GenericBound>>) -> fmt::Result {\n-    match *typarams {\n+            param_names: &Option<Vec<clean::GenericBound>>) -> fmt::Result {\n+    match *param_names {\n         Some(ref params) => {\n             for param in params {\n                 write!(w, \" + \")?;\n@@ -560,13 +559,13 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n         clean::Generic(ref name) => {\n             f.write_str(name)\n         }\n-        clean::ResolvedPath{ did, ref typarams, ref path, is_generic } => {\n-            if typarams.is_some() {\n+        clean::ResolvedPath{ did, ref param_names, ref path, is_generic } => {\n+            if param_names.is_some() {\n                 f.write_str(\"dyn \")?;\n             }\n             // Paths like T::Output and Self::Output should be rendered with all segments\n             resolved_path(f, did, path, is_generic, use_absolute)?;\n-            tybounds(f, typarams)\n+            tybounds(f, param_names)\n         }\n         clean::Infer => write!(f, \"_\"),\n         clean::Primitive(prim) => primitive_link(f, prim, prim.as_str()),\n@@ -664,7 +663,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                         }\n                     }\n                 }\n-                clean::ResolvedPath { typarams: Some(ref v), .. } if !v.is_empty() => {\n+                clean::ResolvedPath { param_names: Some(ref v), .. } if !v.is_empty() => {\n                     write!(f, \"{}{}{}(\", amp, lt, m)?;\n                     fmt_type(&ty, f, use_absolute)?;\n                     write!(f, \")\")\n@@ -718,7 +717,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                 //        the ugliness comes from inlining across crates where\n                 //        everything comes in as a fully resolved QPath (hard to\n                 //        look at).\n-                box clean::ResolvedPath { did, ref typarams, .. } => {\n+                box clean::ResolvedPath { did, ref param_names, .. } => {\n                     match href(did) {\n                         Some((ref url, _, ref path)) if !f.alternate() => {\n                             write!(f,\n@@ -732,8 +731,8 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                         _ => write!(f, \"{}\", name)?,\n                     }\n \n-                    // FIXME: `typarams` are not rendered, and this seems bad?\n-                    drop(typarams);\n+                    // FIXME: `param_names` are not rendered, and this seems bad?\n+                    drop(param_names);\n                     Ok(())\n                 }\n                 _ => {\n@@ -772,7 +771,7 @@ fn fmt_impl(i: &clean::Impl,\n             fmt::Display::fmt(ty, f)?;\n         } else {\n             match *ty {\n-                clean::ResolvedPath { typarams: None, ref path, is_generic: false, .. } => {\n+                clean::ResolvedPath { param_names: None, ref path, is_generic: false, .. } => {\n                     let last = path.segments.last().unwrap();\n                     fmt::Display::fmt(&last.name, f)?;\n                     fmt::Display::fmt(&last.args, f)?;"}, {"sha": "445ce0637662d4918faf168e0ac9ca9d9ac869a1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -271,7 +271,7 @@ pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty-printing doesn't have to\n     /// painfully maintain a context like this)\n-    pub typarams: FxHashMap<DefId, String>,\n+    pub param_names: FxHashMap<DefId, String>,\n \n     /// Maps a type ID to all known implementations for that type. This is only\n     /// recognized for intra-crate `ResolvedPath` types, and is used to print\n@@ -368,7 +368,7 @@ pub struct Cache {\n pub struct RenderInfo {\n     pub inlined: FxHashSet<DefId>,\n     pub external_paths: crate::core::ExternalPaths,\n-    pub external_typarams: FxHashMap<DefId, String>,\n+    pub external_param_names: FxHashMap<DefId, String>,\n     pub exact_paths: FxHashMap<DefId, Vec<String>>,\n     pub access_levels: AccessLevels<DefId>,\n     pub deref_trait_did: Option<DefId>,\n@@ -601,7 +601,7 @@ pub fn run(mut krate: clean::Crate,\n     let RenderInfo {\n         inlined: _,\n         external_paths,\n-        external_typarams,\n+        external_param_names,\n         exact_paths,\n         access_levels,\n         deref_trait_did,\n@@ -635,7 +635,7 @@ pub fn run(mut krate: clean::Crate,\n         deref_mut_trait_did,\n         owned_box_did,\n         masked_crates: mem::replace(&mut krate.masked_crates, Default::default()),\n-        typarams: external_typarams,\n+        param_names: external_param_names,\n         aliases: Default::default(),\n     };\n \n@@ -1751,7 +1751,7 @@ impl<'a> Cache {\n                 clean::GenericParamDefKind::Lifetime => {}\n                 clean::GenericParamDefKind::Type { did, .. } |\n                 clean::GenericParamDefKind::Const { did, .. } => {\n-                    self.typarams.insert(did, param.name.clone());\n+                    self.param_names.insert(did, param.name.clone());\n                 }\n             }\n         }"}, {"sha": "688d9c1aabbee60b8dcce1e14e17a99146305ef3", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -970,6 +970,7 @@ impl f32 {\n     /// assert!((-3.0f32).clamp(-2.0f32, 1.0f32) == -2.0f32);\n     /// assert!((0.0f32).clamp(-2.0f32, 1.0f32) == 0.0f32);\n     /// assert!((2.0f32).clamp(-2.0f32, 1.0f32) == 1.0f32);\n+    /// assert!((std::f32::NAN).clamp(-2.0f32, 1.0f32).is_nan());\n     /// ```\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]\n@@ -1581,4 +1582,22 @@ mod tests {\n         assert_eq!(f32::from_bits(masked_nan1).to_bits(), masked_nan1);\n         assert_eq!(f32::from_bits(masked_nan2).to_bits(), masked_nan2);\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_greater_than_max() {\n+        1.0f32.clamp(3.0, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_is_nan() {\n+        1.0f32.clamp(NAN, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_max_is_nan() {\n+        1.0f32.clamp(3.0, NAN);\n+    }\n }"}, {"sha": "b171e1c7ac93feb600cfcebff8cf45fbe88c4945", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -892,6 +892,7 @@ impl f64 {\n     /// assert!((-3.0f64).clamp(-2.0f64, 1.0f64) == -2.0f64);\n     /// assert!((0.0f64).clamp(-2.0f64, 1.0f64) == 0.0f64);\n     /// assert!((2.0f64).clamp(-2.0f64, 1.0f64) == 1.0f64);\n+    /// assert!((std::f64::NAN).clamp(-2.0f64, 1.0f64).is_nan());\n     /// ```\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]\n@@ -1522,4 +1523,22 @@ mod tests {\n         assert_eq!(f64::from_bits(masked_nan1).to_bits(), masked_nan1);\n         assert_eq!(f64::from_bits(masked_nan2).to_bits(), masked_nan2);\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_greater_than_max() {\n+        1.0f64.clamp(3.0, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_is_nan() {\n+        1.0f64.clamp(NAN, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_max_is_nan() {\n+        1.0f64.clamp(3.0, NAN);\n+    }\n }"}, {"sha": "7147b641e4743b3fb00510f9ee9dc8b20b744aa7", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1381,7 +1381,7 @@ pub trait Seek {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"seek_convenience\", issue = \"0\")]\n+    #[unstable(feature = \"seek_convenience\", issue = \"59359\")]\n     fn stream_len(&mut self) -> Result<u64> {\n         let old_pos = self.stream_position()?;\n         let len = self.seek(SeekFrom::End(0))?;\n@@ -1420,7 +1420,7 @@ pub trait Seek {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"seek_convenience\", issue = \"0\")]\n+    #[unstable(feature = \"seek_convenience\", issue = \"59359\")]\n     fn stream_position(&mut self) -> Result<u64> {\n         self.seek(SeekFrom::Current(0))\n     }"}, {"sha": "b42a8123042694b52b89e48ba8f1adf8e9c6b627", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -180,6 +180,37 @@ impl UdpSocket {\n         }\n     }\n \n+    /// Returns the socket address of the remote peer this socket was connected to.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(udp_peer_addr)]\n+    /// use std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, UdpSocket};\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// socket.connect(\"192.168.0.1:41203\").expect(\"couldn't connect to address\");\n+    /// assert_eq!(socket.peer_addr().unwrap(),\n+    ///            SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(192, 168, 0, 1), 41203)));\n+    /// ```\n+    ///\n+    /// If the socket isn't connected, it will return a [`NotConnected`] error.\n+    ///\n+    /// [`NotConnected`]: ../../std/io/enum.ErrorKind.html#variant.NotConnected\n+    ///\n+    /// ```no_run\n+    /// #![feature(udp_peer_addr)]\n+    /// use std::net::UdpSocket;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// assert_eq!(socket.peer_addr().unwrap_err().kind(),\n+    ///            ::std::io::ErrorKind::NotConnected);\n+    /// ```\n+    #[unstable(feature = \"udp_peer_addr\", issue = \"59127\")]\n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        self.0.peer_addr()\n+    }\n+\n     /// Returns the socket address that this socket was created from.\n     ///\n     /// # Examples\n@@ -865,13 +896,23 @@ mod tests {\n     }\n \n     #[test]\n-    fn socket_name_ip4() {\n+    fn socket_name() {\n         each_ip(&mut |addr, _| {\n             let server = t!(UdpSocket::bind(&addr));\n             assert_eq!(addr, t!(server.local_addr()));\n         })\n     }\n \n+    #[test]\n+    fn socket_peer() {\n+        each_ip(&mut |addr1, addr2| {\n+            let server = t!(UdpSocket::bind(&addr1));\n+            assert_eq!(server.peer_addr().unwrap_err().kind(), ErrorKind::NotConnected);\n+            t!(server.connect(&addr2));\n+            assert_eq!(addr2, t!(server.peer_addr()));\n+        })\n+    }\n+\n     #[test]\n     fn udp_clone_smoke() {\n         each_ip(&mut |addr1, addr2| {"}, {"sha": "4364a1365443a20f27bd97ae1a05f128943b70ff", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -159,6 +159,10 @@ impl UdpSocket {\n         unsupported()\n     }\n \n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "274123dce4b5846110be17196db5433ebebd726d", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -72,6 +72,11 @@ impl UdpSocket {\n         Ok(None)\n     }\n \n+    pub fn peer_addr(&self) -> Result<SocketAddr> {\n+        let path = self.0.path()?;\n+        Ok(path_to_peer_addr(path.to_str().unwrap_or(\"\")))\n+    }\n+\n     pub fn socket_addr(&self) -> Result<SocketAddr> {\n         let path = self.0.path()?;\n         Ok(path_to_local_addr(path.to_str().unwrap_or(\"\")))"}, {"sha": "81f33c16294c3679d666929b7ba1d35e3a076af0", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -249,6 +249,10 @@ impl UdpSocket {\n         unsupported()\n     }\n \n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "b3dd1cf6aaac7b8620ba75c26155810e1929adf7", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -292,6 +292,10 @@ pub mod net {\n \n         pub fn into_socket(self) -> Socket { self.inner }\n \n+        pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+            unimpl!();\n+        }\n+\n         pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n             unimpl!();\n         }\n@@ -463,4 +467,3 @@ pub mod net {\n         }\n     }\n }\n-"}, {"sha": "c85dd000afe6f4434e05b5cf6522cf774bed3d2b", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -156,6 +156,10 @@ impl UdpSocket {\n         unsupported()\n     }\n \n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "b77bcee4b9d04b4c107f29d6018a1aba5fd52e02", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -472,6 +472,12 @@ impl UdpSocket {\n \n     pub fn into_socket(self) -> Socket { self.inner }\n \n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        sockname(|buf, len| unsafe {\n+            c::getpeername(*self.inner.as_inner(), buf, len)\n+        })\n+    }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         sockname(|buf, len| unsafe {\n             c::getsockname(*self.inner.as_inner(), buf, len)"}, {"sha": "d856f9b465e04057c50456274ec00b42b1cbe529", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -163,6 +163,7 @@ use crate::ffi::{CStr, CString};\n use crate::fmt;\n use crate::io;\n use crate::mem;\n+use crate::num::NonZeroU64;\n use crate::panic;\n use crate::panicking;\n use crate::str;\n@@ -1036,15 +1037,15 @@ pub fn park_timeout(dur: Duration) {\n /// [`Thread`]: ../../std/thread/struct.Thread.html\n #[stable(feature = \"thread_id\", since = \"1.19.0\")]\n #[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]\n-pub struct ThreadId(u64);\n+pub struct ThreadId(NonZeroU64);\n \n impl ThreadId {\n     // Generate a new unique thread ID.\n     fn new() -> ThreadId {\n         // We never call `GUARD.init()`, so it is UB to attempt to\n         // acquire this mutex reentrantly!\n         static GUARD: mutex::Mutex = mutex::Mutex::new();\n-        static mut COUNTER: u64 = 0;\n+        static mut COUNTER: u64 = 1;\n \n         unsafe {\n             let _guard = GUARD.lock();\n@@ -1058,7 +1059,7 @@ impl ThreadId {\n             let id = COUNTER;\n             COUNTER += 1;\n \n-            ThreadId(id)\n+            ThreadId(NonZeroU64::new(id).unwrap())\n         }\n     }\n }\n@@ -1484,9 +1485,10 @@ fn _assert_sync_and_send() {\n mod tests {\n     use super::Builder;\n     use crate::any::Any;\n+    use crate::mem;\n     use crate::sync::mpsc::{channel, Sender};\n     use crate::result;\n-    use crate::thread;\n+    use crate::thread::{self, ThreadId};\n     use crate::time::Duration;\n     use crate::u32;\n \n@@ -1716,6 +1718,11 @@ mod tests {\n         thread::sleep(Duration::from_millis(2));\n     }\n \n+    #[test]\n+    fn test_size_of_option_thread_id() {\n+        assert_eq!(mem::size_of::<Option<ThreadId>>(), mem::size_of::<ThreadId>());\n+    }\n+\n     #[test]\n     fn test_thread_id_equal() {\n         assert!(thread::current().id() == thread::current().id());"}, {"sha": "2cbd2dfeb25d6372d9fb58b283f3055126736e45", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -620,7 +620,7 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(Path, Vec<Spanned<FieldPat>>, bool),\n+    Struct(Path, Vec<Spanned<FieldPat>>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n@@ -2133,7 +2133,7 @@ pub enum VariantData {\n     /// Struct variant.\n     ///\n     /// E.g., `Bar { .. }` as in `enum Foo { Bar { .. } }`.\n-    Struct(Vec<StructField>, NodeId),\n+    Struct(Vec<StructField>, NodeId, bool),\n     /// Tuple variant.\n     ///\n     /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.\n@@ -2147,13 +2147,13 @@ pub enum VariantData {\n impl VariantData {\n     pub fn fields(&self) -> &[StructField] {\n         match *self {\n-            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => fields,\n+            VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, _) => fields,\n             _ => &[],\n         }\n     }\n     pub fn id(&self) -> NodeId {\n         match *self {\n-            VariantData::Struct(_, id) | VariantData::Tuple(_, id) | VariantData::Unit(id) => id,\n+            VariantData::Struct(_, id, _) | VariantData::Tuple(_, id) | VariantData::Unit(id) => id,\n         }\n     }\n     pub fn is_struct(&self) -> bool {"}, {"sha": "7159c949513ac280e01aa16574464a6f564780f9", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -225,7 +225,7 @@ impl<'a> StripUnconfigured<'a> {\n \n     fn configure_variant_data(&mut self, vdata: &mut ast::VariantData) {\n         match vdata {\n-            ast::VariantData::Struct(fields, _id) |\n+            ast::VariantData::Struct(fields, _id, _) |\n             ast::VariantData::Tuple(fields, _id) =>\n                 fields.flat_map_in_place(|field| self.configure(field)),\n             ast::VariantData::Unit(_id) => {}"}, {"sha": "5bb1d8a4b94768814c7f53004625db8dabf4b746", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -765,7 +765,7 @@ pub fn noop_visit_where_predicate<T: MutVisitor>(pred: &mut WherePredicate, vis:\n \n pub fn noop_visit_variant_data<T: MutVisitor>(vdata: &mut VariantData, vis: &mut T) {\n     match vdata {\n-        VariantData::Struct(fields, id) |\n+        VariantData::Struct(fields, id, _) |\n         VariantData::Tuple(fields, id) => {\n             visit_vec(fields, |field| vis.visit_struct_field(field));\n             vis.visit_id(id);"}, {"sha": "cd4944deadb109c9b14558fc5520f419e32deff7", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -968,9 +968,10 @@ impl<'a> StringReader<'a> {\n                                 } else {\n                                     let span = self.mk_sp(start, self.pos);\n                                     let mut suggestion = \"\\\\u{\".to_owned();\n+                                    let msg = \"incorrect unicode escape sequence\";\n                                     let mut err = self.sess.span_diagnostic.struct_span_err(\n                                         span,\n-                                        \"incorrect unicode escape sequence\",\n+                                        msg,\n                                     );\n                                     let mut i = 0;\n                                     while let (Some(ch), true) = (self.ch, i < 6) {\n@@ -991,8 +992,8 @@ impl<'a> StringReader<'a> {\n                                             Applicability::MaybeIncorrect,\n                                         );\n                                     } else {\n-                                        err.span_help(\n-                                            span,\n+                                        err.span_label(span, msg);\n+                                        err.help(\n                                             \"format of unicode escape sequences is `\\\\u{...}`\",\n                                         );\n                                     }\n@@ -1018,25 +1019,24 @@ impl<'a> StringReader<'a> {\n                             }\n                             c => {\n                                 let pos = self.pos;\n-                                let mut err = self.struct_err_span_char(escaped_pos,\n-                                                                        pos,\n-                                                                        if ascii_only {\n-                                                                            \"unknown byte escape\"\n-                                                                        } else {\n-                                                                            \"unknown character \\\n-                                                                             escape\"\n-                                                                        },\n-                                                                        c);\n+                                let msg = if ascii_only {\n+                                    \"unknown byte escape\"\n+                                } else {\n+                                    \"unknown character escape\"\n+                                };\n+                                let mut err = self.struct_err_span_char(escaped_pos, pos, msg, c);\n+                                err.span_label(self.mk_sp(escaped_pos, pos), msg);\n                                 if e == '\\r' {\n-                                    err.span_help(self.mk_sp(escaped_pos, pos),\n-                                                  \"this is an isolated carriage return; consider \\\n-                                                   checking your editor and version control \\\n-                                                   settings\");\n+                                    err.help(\n+                                        \"this is an isolated carriage return; consider checking \\\n+                                         your editor and version control settings\",\n+                                    );\n                                 }\n                                 if (e == '{' || e == '}') && !ascii_only {\n-                                    err.span_help(self.mk_sp(escaped_pos, pos),\n-                                                  \"if used in a formatting string, curly braces \\\n-                                                   are escaped with `{{` and `}}`\");\n+                                    err.help(\n+                                        \"if used in a formatting string, curly braces are escaped \\\n+                                         with `{{` and `}}`\",\n+                                    );\n                                 }\n                                 err.emit();\n                                 false"}, {"sha": "5627ac3fcf24545f3f0a1f9854bcc8b55c30d8d8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4229,19 +4229,24 @@ impl<'a> Parser<'a> {\n     fn parse_pat_list(&mut self) -> PResult<'a, (Vec<P<Pat>>, Option<usize>, bool)> {\n         let mut fields = Vec::new();\n         let mut ddpos = None;\n+        let mut prev_dd_sp = None;\n         let mut trailing_comma = false;\n         loop {\n             if self.eat(&token::DotDot) {\n                 if ddpos.is_none() {\n                     ddpos = Some(fields.len());\n+                    prev_dd_sp = Some(self.prev_span);\n                 } else {\n                     // Emit a friendly error, ignore `..` and continue parsing\n-                    self.struct_span_err(\n+                    let mut err = self.struct_span_err(\n                         self.prev_span,\n                         \"`..` can only be used once per tuple or tuple struct pattern\",\n-                    )\n-                        .span_label(self.prev_span, \"can only be used once per pattern\")\n-                        .emit();\n+                    );\n+                    err.span_label(self.prev_span, \"can only be used once per pattern\");\n+                    if let Some(sp) = prev_dd_sp {\n+                        err.span_label(sp, \"previously present here\");\n+                    }\n+                    err.emit();\n                 }\n             } else if !self.check(&token::CloseDelim(token::Paren)) {\n                 fields.push(self.parse_pat(None)?);\n@@ -6837,14 +6842,16 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(ast::DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+                let (fields, recovered) = self.parse_record_struct_body()?;\n+                VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if self.eat(&token::Semi) {\n             VariantData::Unit(ast::DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+            let (fields, recovered) = self.parse_record_struct_body()?;\n+            VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n             let body = VariantData::Tuple(self.parse_tuple_struct_body()?, ast::DUMMY_NODE_ID);\n@@ -6872,9 +6879,11 @@ impl<'a> Parser<'a> {\n \n         let vdata = if self.token.is_keyword(keywords::Where) {\n             generics.where_clause = self.parse_where_clause()?;\n-            VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+            let (fields, recovered) = self.parse_record_struct_body()?;\n+            VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered)\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+            let (fields, recovered) = self.parse_record_struct_body()?;\n+            VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered)\n         } else {\n             let token_str = self.this_token_descr();\n             let mut err = self.fatal(&format!(\n@@ -6906,12 +6915,16 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_record_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n+    fn parse_record_struct_body(\n+        &mut self,\n+    ) -> PResult<'a, (Vec<StructField>, /* recovered */ bool)> {\n         let mut fields = Vec::new();\n+        let mut recovered = false;\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n                 let field = self.parse_struct_decl_field().map_err(|e| {\n                     self.recover_stmt();\n+                    recovered = true;\n                     e\n                 });\n                 match field {\n@@ -6930,7 +6943,7 @@ impl<'a> Parser<'a> {\n             return Err(err);\n         }\n \n-        Ok(fields)\n+        Ok((fields, recovered))\n     }\n \n     fn parse_tuple_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n@@ -7693,12 +7706,14 @@ impl<'a> Parser<'a> {\n             if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n                 all_nullary = false;\n-                struct_def = VariantData::Struct(self.parse_record_struct_body()?,\n-                                                 ast::DUMMY_NODE_ID);\n+                let (fields, recovered) = self.parse_record_struct_body()?;\n+                struct_def = VariantData::Struct(fields, ast::DUMMY_NODE_ID, recovered);\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n                 all_nullary = false;\n-                struct_def = VariantData::Tuple(self.parse_tuple_struct_body()?,\n-                                                ast::DUMMY_NODE_ID);\n+                struct_def = VariantData::Tuple(\n+                    self.parse_tuple_struct_body()?,\n+                    ast::DUMMY_NODE_ID,\n+                );\n             } else if self.eat(&token::Eq) {\n                 disr_expr = Some(AnonConst {\n                     id: ast::DUMMY_NODE_ID,"}, {"sha": "07df14ddc722cc50b85b9582307794aa0d8e0fb4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1263,13 +1263,13 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?; // end the outer cbox\n             }\n-            ast::ItemKind::Fn(ref decl, header, ref typarams, ref body) => {\n+            ast::ItemKind::Fn(ref decl, header, ref param_names, ref body) => {\n                 self.head(\"\")?;\n                 self.print_fn(\n                     decl,\n                     header,\n                     Some(item.ident),\n-                    typarams,\n+                    param_names,\n                     &item.vis\n                 )?;\n                 self.s.word(\" \")?;"}, {"sha": "cb0ce480e4273c3e9d89376a1a72417c4618f1c2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -44,3 +44,28 @@ pub fn black_box<T>(dummy: T) -> T {\n pub fn black_box<T>(dummy: T) -> T {\n     dummy\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::Bencher;\n+    use libtest::stats::Stats;\n+\n+    #[bench]\n+    pub fn sum_three_items(b: &mut Bencher) {\n+        b.iter(|| {\n+            [1e20f64, 1.5f64, -1e20f64].sum();\n+        })\n+    }\n+\n+    #[bench]\n+    pub fn sum_many_f64(b: &mut Bencher) {\n+        let nums = [-1e30f64, 1e60, 1e30, 1.0, -1e60];\n+        let v = (0..500).map(|i| nums[i % 5]).collect::<Vec<_>>();\n+        b.iter(|| {\n+            v.sum();\n+        })\n+    }\n+\n+    #[bench]\n+    pub fn no_iter(_: &mut Bencher) {}\n+}"}, {"sha": "16630e2b3128555db9e02ac543b39fe43848aa8b", "filename": "src/test/compile-fail-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,45 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar)]\n-#![feature(box_syntax, rustc_private)]\n-\n-// Load rustc as a plugin to get macros.\n-#[macro_use]\n-extern crate rustc;\n-extern crate rustc_plugin;\n-\n-use rustc::hir;\n-use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n-use rustc_plugin::Registry;\n-\n-declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n-\n-declare_lint!(PLEASE_LINT, Warn, \"Warn about items named 'pleaselintme'\");\n-\n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn name(&self) -> &'static str {\n-        \"Pass\"\n-    }\n-\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT, PLEASE_LINT)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        match &*it.ident.as_str() {\n-            \"lintme\" => cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\"),\n-            \"pleaselintme\" => cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\"),\n-            _ => {}\n-        }\n-    }\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box Pass);\n-    reg.register_lint_group(\"lint_me\", None, vec![TEST_LINT, PLEASE_LINT]);\n-}"}, {"sha": "69af01ccf0369210e4dceb47ff105693c53bb134", "filename": "src/test/run-make-fulldeps/extern-prelude/Makefile", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,11 +0,0 @@\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) ep-lib.rs\n-\t$(RUSTC) ep-vec.rs\n-\n-\t$(RUSTC) basic.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib\n-\t$(RUSTC) shadow-mod.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib\n-\t$(RUSTC) shadow-prelude.rs --extern Vec=$(TMPDIR)/libep_vec.rlib\n-\t$(RUSTC) relative-only.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib 2>&1 | $(CGREP) \"unresolved import\"\n-\t$(RUSTC) relative-only.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib 2>&1 | $(CGREP) \"failed to resolve\""}, {"sha": "dc7cc1f27b6f6a4e20fe693573653d9106ca2cf1", "filename": "src/test/run-make-fulldeps/extern-prelude/basic.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fbasic.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,6 +0,0 @@\n-#![feature(extern_prelude)]\n-\n-fn main() {\n-    let s = ep_lib::S; // It works\n-    s.external();\n-}"}, {"sha": "0fdf3b49d96b4486ba62035ffc286a2072ba75d3", "filename": "src/test/run-make-fulldeps/extern-prelude/relative-only.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Frelative-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Frelative-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Frelative-only.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,9 +0,0 @@\n-// Extern prelude names are not available by absolute paths\n-\n-#![feature(extern_prelude)]\n-\n-use ep_lib::S;\n-\n-fn main() {\n-    let s = ::ep_lib::S;\n-}"}, {"sha": "69411aaf57c713a2906a1401275a75b4d41e0403", "filename": "src/test/run-make-fulldeps/extern-prelude/shadow-mod.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-mod.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,14 +0,0 @@\n-// Local module shadows `ep_lib` from extern prelude\n-\n-mod ep_lib {\n-    pub struct S;\n-\n-    impl S {\n-        pub fn internal(&self) {}\n-    }\n-}\n-\n-fn main() {\n-    let s = ep_lib::S;\n-    s.internal(); // OK\n-}"}, {"sha": "6c6ce12708d79b063ce2f4844307b07cd8a58e58", "filename": "src/test/run-make-fulldeps/extern-prelude/shadow-prelude.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-prelude.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,7 +0,0 @@\n-// Extern prelude shadows standard library prelude\n-\n-#![feature(extern_prelude)]\n-\n-fn main() {\n-    let x = Vec::new(0f32, ()); // OK\n-}"}, {"sha": "a643c8889109a5806341eba8b507e1e7e99930a4", "filename": "src/test/ui/auxiliary/extern-prelude-vec.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fauxiliary%2Fextern-prelude-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fauxiliary%2Fextern-prelude-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fextern-prelude-vec.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,3 +1,3 @@\n-#![crate_type = \"rlib\"]\n+#![crate_name = \"Vec\"]\n \n pub fn new(arg1: f32, arg2: ()) {}", "previous_filename": "src/test/run-make-fulldeps/extern-prelude/ep-vec.rs"}, {"sha": "2fdfd85a1da30f1b1228fdcbd24c407a7db3d7aa", "filename": "src/test/ui/auxiliary/extern-prelude.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fauxiliary%2Fextern-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fauxiliary%2Fextern-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fextern-prelude.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,5 +1,3 @@\n-#![crate_type = \"rlib\"]\n-\n pub struct S;\n \n impl S {", "previous_filename": "src/test/run-make-fulldeps/extern-prelude/ep-lib.rs"}, {"sha": "03f9d990dbb23878063d8e5cc461e7effab465bf", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -6,8 +6,10 @@ LL | struct Obj<F> where F: FnMut() -> u32 {\n ...\n LL |     o.closure();\n    |       ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(o.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (o.closure)();\n+   |     ^         ^\n \n error: aborting due to previous error\n "}, {"sha": "2107318d87b5bda7ccd86f59976f26d1ab55c27c", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -6,8 +6,10 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     o_closure.closure();\n    |               ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(o_closure.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (o_closure.closure)();\n+   |     ^                 ^\n \n error[E0599]: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:39:36: 39:41]>` in the current scope\n   --> $DIR/issue-2392.rs:42:15\n@@ -16,9 +18,9 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `not_closure` not found for this\n ...\n LL |     o_closure.not_closure();\n-   |               ^^^^^^^^^^^ field, not a method\n-   |\n-   = help: did you mean to write `o_closure.not_closure` instead of `o_closure.not_closure(...)`?\n+   |               ^^^^^^^^^^^-- help: remove the arguments\n+   |               |\n+   |               field, not a method\n \n error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:46:12\n@@ -28,8 +30,10 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     o_func.closure();\n    |            ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(o_func.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (o_func.closure)();\n+   |     ^              ^\n \n error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:49:14\n@@ -39,8 +43,10 @@ LL | struct BoxedObj {\n ...\n LL |     boxed_fn.boxed_closure();\n    |              ^^^^^^^^^^^^^ field, not a method\n+help: to call the function stored in `boxed_closure`, surround the field access with parentheses\n    |\n-   = help: use `(boxed_fn.boxed_closure)(...)` if you meant to call the function stored in the `boxed_closure` field\n+LL |     (boxed_fn.boxed_closure)();\n+   |     ^                      ^\n \n error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:52:19\n@@ -50,8 +56,10 @@ LL | struct BoxedObj {\n ...\n LL |     boxed_closure.boxed_closure();\n    |                   ^^^^^^^^^^^^^ field, not a method\n+help: to call the function stored in `boxed_closure`, surround the field access with parentheses\n    |\n-   = help: use `(boxed_closure.boxed_closure)(...)` if you meant to call the function stored in the `boxed_closure` field\n+LL |     (boxed_closure.boxed_closure)();\n+   |     ^                           ^\n \n error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:57:12\n@@ -61,8 +69,10 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     w.wrap.closure();\n    |            ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(w.wrap.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (w.wrap.closure)();\n+   |     ^              ^\n \n error[E0599]: no method named `not_closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:59:12\n@@ -71,9 +81,9 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `not_closure` not found for this\n ...\n LL |     w.wrap.not_closure();\n-   |            ^^^^^^^^^^^ field, not a method\n-   |\n-   = help: did you mean to write `w.wrap.not_closure` instead of `w.wrap.not_closure(...)`?\n+   |            ^^^^^^^^^^^-- help: remove the arguments\n+   |            |\n+   |            field, not a method\n \n error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::boxed::FnBox<(), Output = u32> + 'static)>>` in the current scope\n   --> $DIR/issue-2392.rs:62:24\n@@ -83,8 +93,10 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     check_expression().closure();\n    |                        ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(check_expression().closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (check_expression().closure)();\n+   |     ^                          ^\n \n error[E0599]: no method named `f1` found for type `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:68:31\n@@ -94,8 +106,10 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f1(1);\n    |                               ^^ field, not a method\n+help: to call the function stored in `f1`, surround the field access with parentheses\n    |\n-   = help: use `((*self.container).f1)(...)` if you meant to call the function stored in the `f1` field\n+LL |             ((*self.container).f1)(1);\n+   |             ^                    ^\n \n error[E0599]: no method named `f2` found for type `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:69:31\n@@ -105,8 +119,10 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f2(1);\n    |                               ^^ field, not a method\n+help: to call the function stored in `f2`, surround the field access with parentheses\n    |\n-   = help: use `((*self.container).f2)(...)` if you meant to call the function stored in the `f2` field\n+LL |             ((*self.container).f2)(1);\n+   |             ^                    ^\n \n error[E0599]: no method named `f3` found for type `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:70:31\n@@ -116,8 +132,10 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f3(1);\n    |                               ^^ field, not a method\n+help: to call the function stored in `f3`, surround the field access with parentheses\n    |\n-   = help: use `((*self.container).f3)(...)` if you meant to call the function stored in the `f3` field\n+LL |             ((*self.container).f3)(1);\n+   |             ^                    ^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "fbabb3a88cc6cd01245bc970993cb52e26d5e75e", "filename": "src/test/ui/confuse-field-and-method/issue-32128.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -6,8 +6,10 @@ LL | struct Example {\n ...\n LL |     demo.example(1);\n    |          ^^^^^^^ field, not a method\n+help: to call the function stored in `example`, surround the field access with parentheses\n    |\n-   = help: use `(demo.example)(...)` if you meant to call the function stored in the `example` field\n+LL |     (demo.example)(1);\n+   |     ^            ^\n \n error: aborting due to previous error\n "}, {"sha": "60f1a932f4442db73a10a8b32954158981c25b6d", "filename": "src/test/ui/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -3,24 +3,30 @@ error[E0599]: no method named `closure` found for type `&Obj<[closure@$DIR/issue\n    |\n LL |     p.closure();\n    |       ^^^^^^^ field, not a method\n+help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n-   = help: use `(p.closure)(...)` if you meant to call the function stored in the `closure` field\n+LL |     (p.closure)();\n+   |     ^         ^\n \n error[E0599]: no method named `fn_ptr` found for type `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n   --> $DIR/issue-33784.rs:29:7\n    |\n LL |     q.fn_ptr();\n    |       ^^^^^^ field, not a method\n+help: to call the function stored in `fn_ptr`, surround the field access with parentheses\n    |\n-   = help: use `(q.fn_ptr)(...)` if you meant to call the function stored in the `fn_ptr` field\n+LL |     (q.fn_ptr)();\n+   |     ^        ^\n \n error[E0599]: no method named `c_fn_ptr` found for type `&D` in the current scope\n   --> $DIR/issue-33784.rs:32:7\n    |\n LL |     s.c_fn_ptr();\n    |       ^^^^^^^^ field, not a method\n+help: to call the function stored in `c_fn_ptr`, surround the field access with parentheses\n    |\n-   = help: use `(s.c_fn_ptr)(...)` if you meant to call the function stored in the `c_fn_ptr` field\n+LL |     (s.c_fn_ptr)();\n+   |     ^          ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7d3aba364897feeafac5ab8aa9cbe8f2a7b6a90c", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,5 +1,20 @@\n enum Example { Ex(String), NotEx }\n \n+enum Void {}\n+\n+enum ManyVariants {\n+    One,\n+    Two,\n+    Three,\n+    Four,\n+    Five,\n+    Six,\n+    Seven,\n+    Eight,\n+    Nine,\n+    Ten,\n+}\n+\n fn result_test() {\n     let x = Option(1); //~ ERROR expected function, found enum\n \n@@ -12,6 +27,10 @@ fn result_test() {\n     if let Example(_) = y { //~ ERROR expected tuple struct/variant, found enum\n         println!(\"It is OK.\");\n     }\n+\n+    let y = Void(); //~ ERROR expected function, found enum\n+\n+    let z = ManyVariants(); //~ ERROR expected function, found enum\n }\n \n fn main() {}"}, {"sha": "4210b4e057ac132f08d8cf002a67fc2714051471", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,34 +1,63 @@\n error[E0423]: expected function, found enum `Option`\n-  --> $DIR/issue-43871-enum-instead-of-variant.rs:4:13\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:19:13\n    |\n LL |     let x = Option(1);\n    |             ^^^^^^\n+help: try using one of the enum's variants\n    |\n-   = note: did you mean to use one of the following variants?\n-           - `std::prelude::v1::Option::None`\n-           - `std::prelude::v1::Option::Some`\n+LL |     let x = std::prelude::v1::Option::None(1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = std::prelude::v1::Option::Some(1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0532]: expected tuple struct/variant, found enum `Option`\n-  --> $DIR/issue-43871-enum-instead-of-variant.rs:6:12\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:21:12\n    |\n LL |     if let Option(_) = x {\n    |            ^^^^^^\n+help: try using one of the enum's variants\n    |\n-   = note: did you mean to use one of the following variants?\n-           - `std::prelude::v1::Option::None`\n-           - `std::prelude::v1::Option::Some`\n+LL |     if let std::prelude::v1::Option::None(_) = x {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     if let std::prelude::v1::Option::Some(_) = x {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0532]: expected tuple struct/variant, found enum `Example`\n-  --> $DIR/issue-43871-enum-instead-of-variant.rs:12:12\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:27:12\n    |\n LL |     if let Example(_) = y {\n    |            ^^^^^^^\n+help: try using one of the enum's variants\n    |\n-   = note: did you mean to use one of the following variants?\n-           - `Example::Ex`\n-           - `Example::NotEx`\n+LL |     if let Example::Ex(_) = y {\n+   |            ^^^^^^^^^^^\n+LL |     if let Example::NotEx(_) = y {\n+   |            ^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0423]: expected function, found enum `Void`\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:31:13\n+   |\n+LL |     let y = Void();\n+   |             ^^^^\n+\n+error[E0423]: expected function, found enum `ManyVariants`\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:33:13\n+   |\n+LL |     let z = ManyVariants();\n+   |             ^^^^^^^^^^^^\n+help: try using one of the enum's variants\n+   |\n+LL |     let z = ManyVariants::Eight();\n+   |             ^^^^^^^^^^^^^^^^^^^\n+LL |     let z = ManyVariants::Five();\n+   |             ^^^^^^^^^^^^^^^^^^\n+LL |     let z = ManyVariants::Four();\n+   |             ^^^^^^^^^^^^^^^^^^\n+LL |     let z = ManyVariants::Nine();\n+   |             ^^^^^^^^^^^^^^^^^^\n+and 6 other candidates\n+\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0423, E0532.\n For more information about an error, try `rustc --explain E0423`."}, {"sha": "dd1f5f334df1d0ee5b778241b81a61e6119437f3", "filename": "src/test/ui/enum-variant-generic-args.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -9,27 +9,27 @@ impl<T> Enum<T> {\n         Self::TSVariant(());\n         //~^ ERROR mismatched types [E0308]\n         Self::TSVariant::<()>(());\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n         Self::<()>::TSVariant(());\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^ ERROR mismatched types [E0308]\n         Self::<()>::TSVariant::<()>(());\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n-        //~^^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^^ ERROR type arguments are not allowed for this type [E0109]\n     }\n \n     fn s_variant() {\n         Self::SVariant { v: () };\n         //~^ ERROR mismatched types [E0308]\n         Self::SVariant::<()> { v: () };\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^ ERROR mismatched types [E0308]\n         Self::<()>::SVariant { v: () };\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^ ERROR mismatched types [E0308]\n         Self::<()>::SVariant::<()> { v: () };\n-        //~^ ERROR type arguments are not allowed on this entity [E0109]\n-        //~^^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^^ ERROR mismatched types [E0308]\n     }\n }\n@@ -38,36 +38,36 @@ fn main() {\n     // Tuple struct variant\n \n     Enum::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     Alias::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     Alias::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     AliasFixed::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::TSVariant(());\n     //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n     AliasFixed::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n \n     // Struct variant\n \n     Enum::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     Alias::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     Alias::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     AliasFixed::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::SVariant { v: () };\n     //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n     AliasFixed::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n     //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n }"}, {"sha": "09b9a4eed6be88a0f40bf6d18cb6207de6f90897", "filename": "src/test/ui/enum-variant-generic-args.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -7,13 +7,13 @@ LL |         Self::TSVariant(());\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:11:27\n    |\n LL |         Self::TSVariant::<()>(());\n    |                           ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:13:16\n    |\n LL |         Self::<()>::TSVariant(());\n@@ -28,13 +28,13 @@ LL |         Self::<()>::TSVariant(());\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:16:16\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n    |                ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:16:33\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n@@ -49,7 +49,7 @@ LL |         Self::SVariant { v: () };\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:24:26\n    |\n LL |         Self::SVariant::<()> { v: () };\n@@ -64,7 +64,7 @@ LL |         Self::SVariant::<()> { v: () };\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:27:16\n    |\n LL |         Self::<()>::SVariant { v: () };\n@@ -79,13 +79,13 @@ LL |         Self::<()>::SVariant { v: () };\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:30:16\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:30:32\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n@@ -100,25 +100,25 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    = note: expected type `T`\n               found type `()`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:40:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n    |                             ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:43:24\n    |\n LL |     Alias::TSVariant::<()>(());\n    |                        ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:45:30\n    |\n LL |     Alias::<()>::TSVariant::<()>(());\n    |                              ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:48:29\n    |\n LL |     AliasFixed::TSVariant::<()>(());\n@@ -136,31 +136,31 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                  ^^ unexpected type argument\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:52:35\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                                   ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:58:28\n    |\n LL |     Enum::<()>::SVariant::<()> { v: () };\n    |                            ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:61:23\n    |\n LL |     Alias::SVariant::<()> { v: () };\n    |                       ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:63:29\n    |\n LL |     Alias::<()>::SVariant::<()> { v: () };\n    |                             ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:66:28\n    |\n LL |     AliasFixed::SVariant::<()> { v: () };\n@@ -178,7 +178,7 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |                  ^^ unexpected type argument\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:70:34\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };"}, {"sha": "577e286fcc6cefec77937fe163e54353331b121a", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/E0109.rs:1:14\n    |\n LL | type X = u32<i32>;"}, {"sha": "314c7f5af6036514746313faacb65c07d03807d5", "filename": "src/test/ui/error-codes/E0110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,3 +1,3 @@\n-type X = u32<'static>; //~ ERROR E0110\n+type X = u32<'static>; //~ ERROR E0109\n \n fn main() {}"}, {"sha": "b0221318087384aa7d9f856489f6dc93fc6a3274", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,9 +1,9 @@\n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/E0110.rs:1:14\n    |\n LL | type X = u32<'static>;\n    |              ^^^^^^^ lifetime argument not allowed\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0110`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "7d387025ad44d0a183261a0e59492190f7d3d290", "filename": "src/test/ui/extern-prelude-fail.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fextern-prelude-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fextern-prelude-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-prelude-fail.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags:--extern extern_prelude\n+// aux-build:extern-prelude.rs\n+\n+// Extern prelude names are not available by absolute paths\n+\n+fn main() {\n+    use extern_prelude::S; //~ ERROR unresolved import `extern_prelude`\n+    let s = ::extern_prelude::S; //~ ERROR failed to resolve\n+}"}, {"sha": "ad148c04d08af219e9df60ba6f560b74511a1eed", "filename": "src/test/ui/extern-prelude-fail.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fextern-prelude-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fextern-prelude-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-prelude-fail.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -0,0 +1,16 @@\n+error[E0432]: unresolved import `extern_prelude`\n+  --> $DIR/extern-prelude-fail.rs:7:9\n+   |\n+LL |     use extern_prelude::S;\n+   |         ^^^^^^^^^^^^^^ maybe a missing `extern crate extern_prelude;`?\n+\n+error[E0433]: failed to resolve: maybe a missing `extern crate extern_prelude;`?\n+  --> $DIR/extern-prelude-fail.rs:8:15\n+   |\n+LL |     let s = ::extern_prelude::S;\n+   |               ^^^^^^^^^^^^^^ maybe a missing `extern crate extern_prelude;`?\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0432, E0433.\n+For more information about an error, try `rustc --explain E0432`."}, {"sha": "0e52f2c5158d422845b021639e0b8eafdcbcbef1", "filename": "src/test/ui/extern-prelude.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fextern-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fextern-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-prelude.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -0,0 +1,31 @@\n+// compile-pass\n+// compile-flags:--extern extern_prelude --extern Vec\n+// aux-build:extern-prelude.rs\n+// aux-build:extern-prelude-vec.rs\n+\n+fn basic() {\n+    // It works\n+    let s = extern_prelude::S;\n+    s.external();\n+}\n+\n+fn shadow_mod() {\n+    // Local module shadows `extern_prelude` from extern prelude\n+    mod extern_prelude {\n+        pub struct S;\n+\n+        impl S {\n+            pub fn internal(&self) {}\n+        }\n+    }\n+\n+    let s = extern_prelude::S;\n+    s.internal(); // OK\n+}\n+\n+fn shadow_prelude() {\n+    // Extern prelude shadows standard library prelude\n+    let x = Vec::new(0f32, ()); // OK\n+}\n+\n+fn main() {}"}, {"sha": "c252a6e220c64567a5fd5078e0afb2011a91ad5e", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -22,10 +22,7 @@ error[E0423]: expected value, found enum `B`\n   --> $DIR/glob-resolve1.rs:24:5\n    |\n LL |     B;\n-   |     ^\n-   |\n-   = note: did you mean to use one of the following variants?\n-           - `B::B1`\n+   |     ^ help: try using the enum's variant: `B::B1`\n \n error[E0425]: cannot find value `C` in this scope\n   --> $DIR/glob-resolve1.rs:25:5"}, {"sha": "bda2e3c45749967eb9f2641c134afb5de2689b62", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,8 +1,8 @@\n-error[E0393]: the type parameter `RHS` must be explicitly specified\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-21950.rs:7:14\n    |\n LL |             &Add;\n-   |              ^^^ missing reference to `RHS`\n+   |              ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "694a4af51bc9ddf7b7824122dbeed5f1616b4966", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,16 +1,16 @@\n-error[E0393]: the type parameter `RHS` must be explicitly specified\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-22560.rs:5:13\n    |\n LL | type Test = Add +\n-   |             ^^^ missing reference to `RHS`\n+   |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n-error[E0393]: the type parameter `RHS` must be explicitly specified\n+error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-22560.rs:8:13\n    |\n LL |             Sub;\n-   |             ^^^ missing reference to `RHS`\n+   |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "28e8a722804813c00159db59a68ef5fe4ab9bb4b", "filename": "src/test/ui/issues/issue-22706.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,3 +1,3 @@\n fn is_copy<T: ::std::marker<i32>::Copy>() {}\n-//~^ ERROR type arguments are not allowed on this entity [E0109]\n+//~^ ERROR type arguments are not allowed for this type [E0109]\n fn main() {}"}, {"sha": "c5929397f6501e57e300e65c5ce64aa914941289", "filename": "src/test/ui/issues/issue-22706.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/issue-22706.rs:1:29\n    |\n LL | fn is_copy<T: ::std::marker<i32>::Copy>() {}"}, {"sha": "cd4459ae0ff425525bfc8e8697613ba05573fef3", "filename": "src/test/ui/mod-subitem-as-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -6,5 +6,5 @@ mod Mod {\n fn main() {\n     Mod::FakeVariant::<i32>(0);\n     Mod::<i32>::FakeVariant(0);\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n }"}, {"sha": "72eca588208bb1f68ce3b4b8129319449f2e48c8", "filename": "src/test/ui/mod-subitem-as-enum-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/mod-subitem-as-enum-variant.rs:8:11\n    |\n LL |     Mod::<i32>::FakeVariant(0);"}, {"sha": "4edeccfe47556db9a8316b8e94e342b9807e9491", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -2,13 +2,13 @@ error: unknown byte escape: f\n   --> $DIR/byte-literals.rs:6:21\n    |\n LL | static FOO: u8 = b'/f';\n-   |                     ^\n+   |                     ^ unknown byte escape\n \n error: unknown byte escape: f\n   --> $DIR/byte-literals.rs:9:8\n    |\n LL |     b'/f';\n-   |        ^\n+   |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n   --> $DIR/byte-literals.rs:10:10"}, {"sha": "45c1a94b519a302b378050ae13d8de4b7bbb6818", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -2,13 +2,13 @@ error: unknown byte escape: f\n   --> $DIR/byte-string-literals.rs:6:32\n    |\n LL | static FOO: &'static [u8] = b\"/f\";\n-   |                                ^\n+   |                                ^ unknown byte escape\n \n error: unknown byte escape: f\n   --> $DIR/byte-string-literals.rs:9:8\n    |\n LL |     b\"/f\";\n-   |        ^\n+   |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n   --> $DIR/byte-string-literals.rs:10:10"}, {"sha": "669a6d26905d16b83cb5f32ce6644b9b5760121a", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -14,13 +14,9 @@ error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n    |\n LL |     let _ = b'/u';\n-   |               ^^\n-   |\n-help: format of unicode escape sequences is `/u{...}`\n-  --> $DIR/issue-23620-invalid-escapes.rs:10:15\n+   |               ^^ incorrect unicode escape sequence\n    |\n-LL |     let _ = b'/u';\n-   |               ^^\n+   = help: format of unicode escape sequences is `/u{...}`\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n@@ -80,13 +76,9 @@ error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n    |\n LL |     let _ = b\"/u{a4a4} /xf /u\";\n-   |                            ^^\n+   |                            ^^ incorrect unicode escape sequence\n    |\n-help: format of unicode escape sequences is `/u{...}`\n-  --> $DIR/issue-23620-invalid-escapes.rs:28:28\n-   |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n-   |                            ^^\n+   = help: format of unicode escape sequences is `/u{...}`\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n@@ -110,13 +102,9 @@ error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:34:18\n    |\n LL |     let _ = \"/xf /u\";\n-   |                  ^^\n+   |                  ^^ incorrect unicode escape sequence\n    |\n-help: format of unicode escape sequences is `/u{...}`\n-  --> $DIR/issue-23620-invalid-escapes.rs:34:18\n-   |\n-LL |     let _ = \"/xf /u\";\n-   |                  ^^\n+   = help: format of unicode escape sequences is `/u{...}`\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:39:14"}, {"sha": "e6b71108086dfa26618b344dcff810e977b5614c", "filename": "src/test/ui/parser/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -14,13 +14,13 @@ error: unknown character escape: /u{25cf}\n   --> $DIR/lex-bad-char-literals-1.rs:11:7\n    |\n LL |     '/\u25cf'\n-   |       ^\n+   |       ^ unknown character escape\n \n error: unknown character escape: /u{25cf}\n   --> $DIR/lex-bad-char-literals-1.rs:15:7\n    |\n LL |     \"/\u25cf\"\n-   |       ^\n+   |       ^ unknown character escape\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b4d538bf6131206de4d60989e2beca301f91738d", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -38,13 +38,9 @@ error: unknown character escape: /r\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:27:19\n    |\n LL |     let _s = \"foo/\rbar\";\n-   |                   ^\n+   |                   ^ unknown character escape\n    |\n-help: this is an isolated carriage return; consider checking your editor and version control settings\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:27:19\n-   |\n-LL |     let _s = \"foo/\rbar\";\n-   |                   ^\n+   = help: this is an isolated carriage return; consider checking your editor and version control settings\n \n error: aborting due to 7 previous errors\n "}, {"sha": "c9f14bb90429b90e3c0b97cf456bf8aa8760c1b9", "filename": "src/test/ui/parser/pat-tuple-3.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -2,7 +2,9 @@ error: `..` can only be used once per tuple or tuple struct pattern\n   --> $DIR/pat-tuple-3.rs:3:19\n    |\n LL |         (.., pat, ..) => {}\n-   |                   ^^ can only be used once per pattern\n+   |          --       ^^ can only be used once per pattern\n+   |          |\n+   |          previously present here\n \n error: aborting due to previous error\n "}, {"sha": "5b195dcc3787849545770910f991ae31a9951950", "filename": "src/test/ui/parser/recovered-struct-variant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -0,0 +1,13 @@\n+enum Foo {\n+    A { a, b: usize }\n+    //~^ ERROR expected `:`, found `,`\n+}\n+\n+fn main() {\n+    // no complaints about non-existing fields\n+    let f = Foo::A { a:3, b: 4};\n+    match f {\n+        // no complaints about non-existing fields\n+        Foo::A {a, b} => {}\n+    }\n+}"}, {"sha": "51aaf8bb3cfbe2daff10cd6b34cbfd177eb2d663", "filename": "src/test/ui/parser/recovered-struct-variant.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovered-struct-variant.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -0,0 +1,8 @@\n+error: expected `:`, found `,`\n+  --> $DIR/recovered-struct-variant.rs:2:10\n+   |\n+LL |     A { a, b: usize }\n+   |          ^ expected `:`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f70f8ac8d7751def4f2f1d5487e5f7a5e8888122", "filename": "src/test/ui/parser/trailing-carriage-return-in-string.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -2,13 +2,9 @@ error: unknown character escape: /r\n   --> $DIR/trailing-carriage-return-in-string.rs:10:25\n    |\n LL |     let bad = \"This is /\r a test\";\n-   |                         ^\n+   |                         ^ unknown character escape\n    |\n-help: this is an isolated carriage return; consider checking your editor and version control settings\n-  --> $DIR/trailing-carriage-return-in-string.rs:10:25\n-   |\n-LL |     let bad = \"This is /\r a test\";\n-   |                         ^\n+   = help: this is an isolated carriage return; consider checking your editor and version control settings\n \n error: aborting due to previous error\n "}, {"sha": "346eba04c6500d671ce2bc3673c47ff6948f57bd", "filename": "src/test/ui/parser/wrong-escape-of-curly-braces.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -2,25 +2,17 @@ error: unknown character escape: {\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:17\n    |\n LL |     let bad = \"/{it is wrong/}\";\n-   |                 ^\n+   |                 ^ unknown character escape\n    |\n-help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n-  --> $DIR/wrong-escape-of-curly-braces.rs:3:17\n-   |\n-LL |     let bad = \"/{it is wrong/}\";\n-   |                 ^\n+   = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n \n error: unknown character escape: }\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:30\n    |\n LL |     let bad = \"/{it is wrong/}\";\n-   |                              ^\n+   |                              ^ unknown character escape\n    |\n-help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n-  --> $DIR/wrong-escape-of-curly-braces.rs:3:30\n-   |\n-LL |     let bad = \"/{it is wrong/}\";\n-   |                              ^\n+   = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e5beaca6abb8c8b54a15da99754d2fb71948709f", "filename": "src/test/ui/prim-with-args.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprim-with-args.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,27 +1,27 @@\n fn main() {\n \n-let x: isize<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: i8<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: i16<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: i32<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: i64<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: usize<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: u8<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: u16<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: u32<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: u64<isize>; //~ ERROR type arguments are not allowed on this entity\n-let x: char<isize>; //~ ERROR type arguments are not allowed on this entity\n+let x: isize<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: i8<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: i16<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: i32<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: i64<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: usize<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: u8<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: u16<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: u32<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: u64<isize>; //~ ERROR type arguments are not allowed for this type\n+let x: char<isize>; //~ ERROR type arguments are not allowed for this type\n \n-let x: isize<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: i8<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: i16<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: i32<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: i64<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: usize<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: u8<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: u16<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: u32<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: u64<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n-let x: char<'static>; //~ ERROR lifetime arguments are not allowed on this entity\n+let x: isize<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: i8<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: i16<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: i32<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: i64<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: usize<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: u8<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: u16<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: u32<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: u64<'static>; //~ ERROR lifetime arguments are not allowed for this type\n+let x: char<'static>; //~ ERROR lifetime arguments are not allowed for this type\n \n }"}, {"sha": "4bde981e7f2d4fe0c6b20700efd364c913790ddd", "filename": "src/test/ui/prim-with-args.stderr", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprim-with-args.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,136 +1,135 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:3:14\n    |\n LL | let x: isize<isize>;\n    |              ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:4:11\n    |\n LL | let x: i8<isize>;\n    |           ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:5:12\n    |\n LL | let x: i16<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:6:12\n    |\n LL | let x: i32<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:7:12\n    |\n LL | let x: i64<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:8:14\n    |\n LL | let x: usize<isize>;\n    |              ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:9:11\n    |\n LL | let x: u8<isize>;\n    |           ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:10:12\n    |\n LL | let x: u16<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:11:12\n    |\n LL | let x: u32<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:12:12\n    |\n LL | let x: u64<isize>;\n    |            ^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:13:13\n    |\n LL | let x: char<isize>;\n    |             ^^^^^ type argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:15:14\n    |\n LL | let x: isize<'static>;\n    |              ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:16:11\n    |\n LL | let x: i8<'static>;\n    |           ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:17:12\n    |\n LL | let x: i16<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:18:12\n    |\n LL | let x: i32<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:19:12\n    |\n LL | let x: i64<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:20:14\n    |\n LL | let x: usize<'static>;\n    |              ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:21:11\n    |\n LL | let x: u8<'static>;\n    |           ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:22:12\n    |\n LL | let x: u16<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:23:12\n    |\n LL | let x: u32<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:24:12\n    |\n LL | let x: u64<'static>;\n    |            ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/prim-with-args.rs:25:13\n    |\n LL | let x: char<'static>;\n    |             ^^^^^^^ lifetime argument not allowed\n \n error: aborting due to 22 previous errors\n \n-Some errors occurred: E0109, E0110.\n-For more information about an error, try `rustc --explain E0109`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "ebdd749046239ab89ecc6e7787097088a69d36cc", "filename": "src/test/ui/qualified/qualified-path-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -16,7 +16,7 @@ impl S {\n }\n \n type A = <S as Tr>::A::f<u8>;\n-//~^ ERROR type arguments are not allowed on this entity\n+//~^ ERROR type arguments are not allowed for this type\n //~| ERROR ambiguous associated type\n \n fn main() {}"}, {"sha": "2d14d6c5aa8988c42240adf852ba029ebd6247cc", "filename": "src/test/ui/qualified/qualified-path-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/qualified-path-params-2.rs:18:26\n    |\n LL | type A = <S as Tr>::A::f<u8>;"}, {"sha": "75d9c97513d3116de54376909e244a4b648ef06e", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -3,22 +3,32 @@ error[E0423]: expected value, found enum `n::Z`\n    |\n LL |         n::Z;\n    |         ^^^^\n-   |\n-   = note: did you mean to use one of the following variants?\n-           - `m::Z::Fn`\n-           - `m::Z::Struct`\n-           - `m::Z::Unit`\n+help: try using one of the enum's variants\n+   |\n+LL |         m::Z::Fn;\n+   |         ^^^^^^^^\n+LL |         m::Z::Struct;\n+   |         ^^^^^^^^^^^^\n+LL |         m::Z::Unit;\n+   |         ^^^^^^^^^^\n \n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n LL |         Z;\n-   |         ^ help: a function with a similar name exists: `f`\n+   |         ^\n+help: a function with a similar name exists\n    |\n-   = note: did you mean to use one of the following variants?\n-           - `m::Z::Fn`\n-           - `m::Z::Struct`\n-           - `m::Z::Unit`\n+LL |         f;\n+   |         ^\n+help: try using one of the enum's variants\n+   |\n+LL |         m::Z::Fn;\n+   |         ^^^^^^^^\n+LL |         m::Z::Struct;\n+   |         ^^^^^^^^^^^^\n+LL |         m::Z::Unit;\n+   |         ^^^^^^^^^^\n \n error[E0423]: expected value, found struct variant `Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:29:20\n@@ -31,15 +41,18 @@ error[E0423]: expected value, found enum `m::E`\n    |\n LL |     let _: E = m::E;\n    |                ^^^^\n-   |\n-   = note: did you mean to use one of the following variants?\n-           - `E::Fn`\n-           - `E::Struct`\n-           - `E::Unit`\n help: a function with a similar name exists\n    |\n LL |     let _: E = m::f;\n    |                   ^\n+help: try using one of the enum's variants\n+   |\n+LL |     let _: E = E::Fn;\n+   |                ^^^^^\n+LL |     let _: E = E::Struct;\n+   |                ^^^^^^^^^\n+LL |     let _: E = E::Unit;\n+   |                ^^^^^^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use std::f32::consts::E;\n@@ -58,11 +71,14 @@ error[E0423]: expected value, found enum `E`\n    |\n LL |     let _: E = E;\n    |                ^\n+help: try using one of the enum's variants\n    |\n-   = note: did you mean to use one of the following variants?\n-           - `E::Fn`\n-           - `E::Struct`\n-           - `E::Unit`\n+LL |     let _: E = E::Fn;\n+   |                ^^^^^\n+LL |     let _: E = E::Struct;\n+   |                ^^^^^^^^^\n+LL |     let _: E = E::Unit;\n+   |                ^^^^^^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use std::f32::consts::E;\n@@ -95,11 +111,14 @@ error[E0423]: expected value, found enum `m::n::Z`\n    |\n LL |     let _: Z = m::n::Z;\n    |                ^^^^^^^\n+help: try using one of the enum's variants\n    |\n-   = note: did you mean to use one of the following variants?\n-           - `m::Z::Fn`\n-           - `m::Z::Struct`\n-           - `m::Z::Unit`\n+LL |     let _: Z = m::Z::Fn;\n+   |                ^^^^^^^^\n+LL |     let _: Z = m::Z::Struct;\n+   |                ^^^^^^^^^^^^\n+LL |     let _: Z = m::Z::Unit;\n+   |                ^^^^^^^^^^\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:61:12"}, {"sha": "ede6a3b2b3938cc4c27120ec70c486cd9589dd31", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -2,7 +2,7 @@\n //~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n // A Collection trait and collection families. Based on\n@@ -15,14 +15,14 @@ trait Collection<T> {\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> =\n         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n \n     fn empty() -> Self;\n \n     fn add(&mut self, value: T);\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n trait CollectionFamily {\n@@ -48,13 +48,13 @@ impl<T> Collection<T> for Vec<T> {\n     }\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         self.iter()\n     }\n }\n \n fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n-//~^ ERROR type arguments are not allowed on this entity [E0109]\n+//~^ ERROR type arguments are not allowed for this type [E0109]\n where\n     C: Collection<i32>,\n {\n@@ -66,7 +66,7 @@ where\n }\n \n fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-//~^ ERROR type arguments are not allowed on this entity [E0109]\n+//~^ ERROR type arguments are not allowed for this type [E0109]\n where\n     C: Collection<i32>,\n {"}, {"sha": "d0fe5035bca461c07346070053dd57b005a272ba", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4,37 +4,36 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/collections.rs:56:90\n    |\n LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n    |                                                                                          ^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/collections.rs:68:69\n    |\n LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n    |                                                                     ^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/collections.rs:17:71\n    |\n LL |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n    |                                                                       ^ type argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/collections.rs:24:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n    |                                                  ^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/collections.rs:50:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n    |                                                  ^^^^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0109, E0110.\n-For more information about an error, try `rustc --explain E0109`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "3a459a4551c8df815153c716b3a2d1dfd429e97f", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -3,7 +3,7 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n trait Foo {\n@@ -15,15 +15,15 @@ trait Baz {\n \n     // This weird type tests that we can use universal function call syntax to access the Item on\n     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n impl<T> Baz for T where T: Foo {\n     type Quux<'a> = T;\n \n     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n fn main() {}"}, {"sha": "b2dd523c8f59773dc5c5edc72292d22722921711", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4,24 +4,24 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/construct_with_other_type.rs:17:46\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n    |                                              ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/construct_with_other_type.rs:17:63\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n    |                                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/construct_with_other_type.rs:25:40\n    |\n LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n    |                                        ^^ lifetime argument not allowed\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0110`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "150899a034b86c4d440d9726e057a0a03f9080e2", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -3,20 +3,20 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n trait Iterable {\n     type Item<'a>;\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         + Deref<Target = Self::Item<'b>>;\n     //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n \n     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n     //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n fn main() {}"}, {"sha": "d65edc6f7e2473c6fddec8ea8217140a4297bc0e", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -16,25 +16,25 @@ error[E0261]: use of undeclared lifetime name `'undeclared`\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n    |                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:13:37\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:17:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0110, E0261.\n-For more information about an error, try `rustc --explain E0110`.\n+Some errors occurred: E0109, E0261.\n+For more information about an error, try `rustc --explain E0109`."}, {"sha": "29953b9db1a3130d02a1141f1fe25d7e8324932d", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -3,16 +3,16 @@\n \n use std::ops::Deref;\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n trait Iterable {\n     type Item<'a>;\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n // Impl for struct type\n@@ -21,7 +21,7 @@ impl<T> Iterable for Vec<T> {\n     type Iter<'a> = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         self.iter()\n     }\n }\n@@ -32,18 +32,18 @@ impl<T> Iterable for [T] {\n     type Iter<'a> = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         self.iter()\n     }\n }\n \n fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n     it.iter()\n }\n \n fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n     it.iter().next()\n }\n "}, {"sha": "6d5d0cc382840755048b83fc56463f1b6b057ea2", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4,42 +4,42 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:11:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n    |                                               ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:40:53\n    |\n LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n    |                                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:45:60\n    |\n LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n    |                                                            ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:14:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n    |                                         ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:23:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                                         ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:34:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                                         ^^ lifetime argument not allowed\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0110`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "aa3f4b186da83d998a8babba6b497a5fe74b2bcb", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -2,7 +2,7 @@\n //~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-// FIXME(#44265): \"lifetime arguments are not allowed on this entity\" errors will be addressed in a\n+// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n // follow-up PR.\n \n // FIXME(#44265): Update expected errors once E110 is resolved, now does not get past `trait Foo`.\n@@ -15,13 +15,13 @@ trait Foo {\n     type E<'a, T>;\n     // Test parameters in default values\n     type FOk<T> = Self::E<'static, T>;\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n     type FErr1 = Self::E<'static, 'static>; // Error\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n-    //~| ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n struct Fooy;"}, {"sha": "817d911184d0a4bc982f6caf3cfbdb1e0d5b6c63", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4,37 +4,36 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:17:27\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n    |                           ^^^^^^^ lifetime argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:17:36\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n    |                                    ^ type argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:20:26\n    |\n LL |     type FErr1 = Self::E<'static, 'static>; // Error\n    |                          ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:22:29\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n    |                             ^^^^^^^ lifetime argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:22:38\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n    |                                      ^ type argument not allowed\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0109, E0110.\n-For more information about an error, try `rustc --explain E0109`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "edeeaba756549bd23ec739e60bb86a36161fd55b", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -10,15 +10,15 @@ use std::ops::Deref;\n trait PointerFamily {\n     type Pointer<T>: Deref<Target = T>;\n     fn new<T>(value: T) -> Self::Pointer<T>;\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n }\n \n struct ArcFamily;\n \n impl PointerFamily for ArcFamily {\n     type Pointer<T> = Arc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n         Arc::new(value)\n     }\n }\n@@ -28,14 +28,14 @@ struct RcFamily;\n impl PointerFamily for RcFamily {\n     type Pointer<T> = Rc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n         Rc::new(value)\n     }\n }\n \n struct Foo<P: PointerFamily> {\n     bar: P::Pointer<String>,\n-    //~^ ERROR type arguments are not allowed on this entity [E0109]\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n }\n \n fn main() {}"}, {"sha": "0966f8f9422aa4f8acbe42fbe16cbc57f7250d16", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4,25 +4,25 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:37:21\n    |\n LL |     bar: P::Pointer<String>,\n    |                     ^^^^^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:12:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T>;\n    |                                          ^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:20:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n    |                                          ^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:30:42\n    |\n LL |     fn new<T>(value: T) -> Self::Pointer<T> {"}, {"sha": "4e177fb41d732bd057892a7dae90e83f1b450300", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -10,21 +10,21 @@ trait StreamingIterator {\n     type Item<'a>;\n     // Applying the lifetime parameter `'a` to `Self::Item` inside the trait.\n     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n struct Foo<T: StreamingIterator> {\n     // Applying a concrete lifetime to the constructor outside the trait.\n     bar: <T as StreamingIterator>::Item<'static>,\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n // Users can bound parameters by the type constructed by that trait's associated type constructor\n // of a trait using HRTB. Both type equality bounds and trait bounds of this kind are valid:\n //FIXME(sunjay): This next line should parse and be valid\n //fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(iter: T) { /* ... */ }\n fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-//~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+//~^ ERROR lifetime arguments are not allowed for this type [E0109]\n \n // Full example of enumerate iterator\n \n@@ -36,9 +36,9 @@ struct StreamEnumerate<I> {\n \n impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n     type Item<'a> = (usize, I::Item<'a>);\n-    //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-        //~^ ERROR lifetime arguments are not allowed on this entity [E0110]\n+        //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         match self.iter.next() {\n             None => None,\n             Some(val) => {"}, {"sha": "5fc1e3dddbe7413ea6d3e5658d6fc0a276571c30", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4,36 +4,36 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:18:41\n    |\n LL |     bar: <T as StreamingIterator>::Item<'static>,\n    |                                         ^^^^^^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:26:64\n    |\n LL | fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n    |                                                                ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:12:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n    |                                                ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:38:37\n    |\n LL |     type Item<'a> = (usize, I::Item<'a>);\n    |                                     ^^ lifetime argument not allowed\n \n-error[E0110]: lifetime arguments are not allowed on this entity\n+error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:40:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n    |                                                ^^ lifetime argument not allowed\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0110`.\n+For more information about this error, try `rustc --explain E0109`."}, {"sha": "15b37facc502df85561ca6c4f4bda4ef5c117b0b", "filename": "src/test/ui/structs/struct-path-associated-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -13,7 +13,7 @@ fn f<T: Tr>() {\n     //~^ ERROR expected struct, variant or union type, found associated type\n     let z = T::A::<u8> {};\n     //~^ ERROR expected struct, variant or union type, found associated type\n-    //~| ERROR type arguments are not allowed on this entity\n+    //~| ERROR type arguments are not allowed for this type\n     match S {\n         T::A {} => {}\n         //~^ ERROR expected struct, variant or union type, found associated type\n@@ -22,7 +22,7 @@ fn f<T: Tr>() {\n \n fn g<T: Tr<A = S>>() {\n     let s = T::A {}; // OK\n-    let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+    let z = T::A::<u8> {}; //~ ERROR type arguments are not allowed for this type\n     match S {\n         T::A {} => {} // OK\n     }\n@@ -31,7 +31,7 @@ fn g<T: Tr<A = S>>() {\n fn main() {\n     let s = S::A {}; //~ ERROR ambiguous associated type\n     let z = S::A::<u8> {}; //~ ERROR ambiguous associated type\n-    //~^ ERROR type arguments are not allowed on this entity\n+    //~^ ERROR type arguments are not allowed for this type\n     match S {\n         S::A {} => {} //~ ERROR ambiguous associated type\n     }"}, {"sha": "f054bd3d297761e1c3cf8f3eb4aa731584d48e76", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4,7 +4,7 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |     let s = T::A {};\n    |             ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-associated-type.rs:14:20\n    |\n LL |     let z = T::A::<u8> {};\n@@ -22,7 +22,7 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |         T::A {} => {}\n    |         ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-associated-type.rs:25:20\n    |\n LL |     let z = T::A::<u8> {};\n@@ -34,7 +34,7 @@ error[E0223]: ambiguous associated type\n LL |     let s = S::A {};\n    |             ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-associated-type.rs:33:20\n    |\n LL |     let z = S::A::<u8> {};"}, {"sha": "77880bfca4074650b5d53951dda363ee564adc59", "filename": "src/test/ui/structs/struct-path-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -6,7 +6,7 @@ trait Tr {\n         //~^ ERROR expected struct, variant or union type, found Self\n         let z = Self::<u8> {};\n         //~^ ERROR expected struct, variant or union type, found Self\n-        //~| ERROR type arguments are not allowed on this entity\n+        //~| ERROR type arguments are not allowed for this type\n         match s {\n             Self { .. } => {}\n             //~^ ERROR expected struct, variant or union type, found Self\n@@ -17,7 +17,7 @@ trait Tr {\n impl Tr for S {\n     fn f() {\n         let s = Self {}; // OK\n-        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed for this type\n         match s {\n             Self { .. } => {} // OK\n         }\n@@ -27,7 +27,7 @@ impl Tr for S {\n impl S {\n     fn g() {\n         let s = Self {}; // OK\n-        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed on this entity\n+        let z = Self::<u8> {}; //~ ERROR type arguments are not allowed for this type\n         match s {\n             Self { .. } => {} // OK\n         }"}, {"sha": "d9e84acdb3cdae036d0d2e1df7623fdf989cfef9", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -4,7 +4,7 @@ error[E0071]: expected struct, variant or union type, found Self\n LL |         let s = Self {};\n    |                 ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-self.rs:7:24\n    |\n LL |         let z = Self::<u8> {};\n@@ -22,13 +22,13 @@ error[E0071]: expected struct, variant or union type, found Self\n LL |             Self { .. } => {}\n    |             ^^^^ not a struct\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-self.rs:20:24\n    |\n LL |         let z = Self::<u8> {};\n    |                        ^^ type argument not allowed\n \n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/struct-path-self.rs:30:24\n    |\n LL |         let z = Self::<u8> {};"}, {"sha": "c5974e55692232da734abd7244782a89eb7538a6", "filename": "src/test/ui/type-alias-enum-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let _ = Option::None::<u8>; // OK (Lint in future!)\n     let _ = Alias::<u8>::None; // OK\n     let _ = Alias::None::<u8>; // Error\n-    //~^ type arguments are not allowed on this entity\n+    //~^ type arguments are not allowed for this type\n }"}, {"sha": "55f250fa7ee5233ea68603fb53df92e060a0bb27", "filename": "src/test/ui/type-alias-enum-variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants.stderr?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -1,4 +1,4 @@\n-error[E0109]: type arguments are not allowed on this entity\n+error[E0109]: type arguments are not allowed for this type\n   --> $DIR/type-alias-enum-variants.rs:9:27\n    |\n LL |     let _ = Alias::None::<u8>; // Error"}, {"sha": "3c360a81ba5be9d04b6239b165a7149a56b8158f", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f91bee03f3eea93285330354dda54706028671c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f91bee03f3eea93285330354dda54706028671c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=9f91bee03f3eea93285330354dda54706028671c", "patch": "@@ -390,7 +390,7 @@ impl Builder {\n         package(\"rust-src\", &[\"*\"]);\n         package(\"rls-preview\", HOSTS);\n         package(\"clippy-preview\", HOSTS);\n-        package(\"miri\", HOSTS);\n+        package(\"miri-preview\", HOSTS);\n         package(\"rustfmt-preview\", HOSTS);\n         package(\"rust-analysis\", TARGETS);\n         package(\"llvm-tools-preview\", TARGETS);\n@@ -408,7 +408,7 @@ impl Builder {\n             \"rustc\", \"cargo\", \"rust-std\", \"rust-mingw\",\n             \"rust-docs\", \"rustfmt-preview\", \"clippy-preview\",\n             \"rls-preview\", \"rust-src\", \"llvm-tools-preview\",\n-            \"lldb-preview\", \"rust-analysis\", \"miri\"\n+            \"lldb-preview\", \"rust-analysis\", \"miri-preview\"\n         ]);\n     }\n \n@@ -420,6 +420,7 @@ impl Builder {\n         rename(\"rls\", \"rls-preview\");\n         rename(\"rustfmt\", \"rustfmt-preview\");\n         rename(\"clippy\", \"clippy-preview\");\n+        rename(\"miri\", \"miri-preview\");\n     }\n \n     fn rust_package(&mut self, manifest: &Manifest) -> Package {\n@@ -468,7 +469,7 @@ impl Builder {\n         // but might be marked as unavailable if they weren't built.\n         extensions.extend(vec![\n             host_component(\"clippy-preview\"),\n-            host_component(\"miri\"),\n+            host_component(\"miri-preview\"),\n             host_component(\"rls-preview\"),\n             host_component(\"rustfmt-preview\"),\n             host_component(\"llvm-tools-preview\"),"}]}