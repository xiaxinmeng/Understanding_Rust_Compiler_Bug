{"sha": "d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "node_id": "C_kwDOAAsO6NoAKGQzMjdkYjkzMTllN2I4ZWM3ZGZmNTZmMWZjMmNmYjE5OWQzMTUxYjk", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T19:46:15Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T19:49:27Z"}, "message": "Remove ImplTraitContext::reborrow", "tree": {"sha": "725f06bb79e41b4c8adf97defa657b5e5c38d5a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725f06bb79e41b4c8adf97defa657b5e5c38d5a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKWcUgACgkQgTGiTgx5\n76+tMg//TrXWwaEnUT/m0h+Rshfob2ixhW8aXNChUPf5l6PrAZM1waBxcnJFjfxp\nnNqQt/4I9Iaa0h5yrEKbgEKS1LBOvQIwwv/snaUMZNrD6A/qI/hown0bjmErsZqc\nXvDbM+l1iRpp2+amAx9bgzOTF/DfjcKwZb5c+5N204b169mcvel6Ms4PxiFdQk1U\niqqnYQHujPVFN+ETlFNsVualfGP0YGTeD8IityFr0QDl55XkH0cvGIXMZ3l6I7Qb\nWHXcYXW8W5xnO8X3M7QMKKn2Jn5CYYIyn2J7qVAGfH6Ir5n+To2DRXQ6JPlo3vHd\nI9e6Dv0ZzQnJ0PNDn/FCaXVo0lIxdZ3kIVOztLDUw8ZD59Xkf/5d8jNAAZ/kP/Sp\n/o+s6+/QZGNFdkAjHxqRH590mxwrWHq6ZBvV4PkWliiIADZVzGgb1v4KZe+ffaQI\ncJJhqsrxp93nqrN6WblC+C4v5qpfmJehKimpmKhdngESP+HhFgjlz55hcVhU4Jv0\nymcynloCpV8vNPm5OCDX5ZOGd8gXQieEEVmFB0/CqRDmBDBmlHgJIs6O5tuFiU04\noNJL+DATM5pHuwqVlsAOfeymVU9eaElFBwYp+ANVTA6tMAUVTtWMNiKMFI5e1ht/\nZOxKQXgcBdumvIKmTN9NFphtdipVKoT0mZY7RX9bUzWbFqErqnc=\n=NILJ\n-----END PGP SIGNATURE-----", "payload": "tree 725f06bb79e41b4c8adf97defa657b5e5c38d5a2\nparent 208ffbbe8699d169f5f0124d91a6d2b1774172a8\nauthor Santiago Pastorino <spastorino@gmail.com> 1654026375 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654026567 -0300\n\nRemove ImplTraitContext::reborrow\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "html_url": "https://github.com/rust-lang/rust/commit/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "208ffbbe8699d169f5f0124d91a6d2b1774172a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/208ffbbe8699d169f5f0124d91a6d2b1774172a8", "html_url": "https://github.com/rust-lang/rust/commit/208ffbbe8699d169f5f0124d91a6d2b1774172a8"}], "stats": {"total": 63, "additions": 21, "deletions": 42}, "files": [{"sha": "c905f4f11bcd869e5b60efbc4ef9bce589b141ee", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "patch": "@@ -1337,7 +1337,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn lower_generics_mut(\n         &mut self,\n         generics: &Generics,\n-        mut itctx: ImplTraitContext,\n+        itctx: ImplTraitContext,\n     ) -> GenericsCtor<'hir> {\n         // Error if `?Trait` bounds in where clauses don't refer directly to type parameters.\n         // Note: we used to clone these bounds directly onto the type parameter (and avoid lowering\n@@ -1388,7 +1388,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let mut predicates = SmallVec::new();\n         predicates.extend(generics.params.iter().filter_map(|param| {\n-            let bounds = self.lower_param_bounds(&param.bounds, itctx.reborrow());\n+            let bounds = self.lower_param_bounds(&param.bounds, itctx);\n             self.lower_generic_bound_predicate(\n                 param.ident,\n                 param.id,"}, {"sha": "1bd2988576a03f8c98f058d4113ea8b6b3a9d95b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 12, "deletions": 31, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "patch": "@@ -293,18 +293,6 @@ enum ImplTraitPosition {\n     ImplReturn,\n }\n \n-impl ImplTraitContext {\n-    fn reborrow<'this>(&'this mut self) -> ImplTraitContext {\n-        use self::ImplTraitContext::*;\n-        match self {\n-            Universal(parent) => Universal(*parent),\n-            ReturnPositionOpaqueTy { origin } => ReturnPositionOpaqueTy { origin: *origin },\n-            TypeAliasesOpaqueTy => TypeAliasesOpaqueTy,\n-            Disallowed(pos) => Disallowed(*pos),\n-        }\n-    }\n-}\n-\n impl std::fmt::Display for ImplTraitPosition {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let name = match self {\n@@ -867,20 +855,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocConstraint,\n-        mut itctx: ImplTraitContext,\n+        itctx: ImplTraitContext,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n \n         // lower generic arguments of identifier in constraint\n         let gen_args = if let Some(ref gen_args) = constraint.gen_args {\n             let gen_args_ctor = match gen_args {\n                 GenericArgs::AngleBracketed(ref data) => {\n-                    self.lower_angle_bracketed_parameter_data(\n-                        data,\n-                        ParamMode::Explicit,\n-                        itctx.reborrow(),\n-                    )\n-                    .0\n+                    self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n                 GenericArgs::Parenthesized(ref data) => {\n                     let mut err = self.sess.struct_span_err(\n@@ -892,7 +875,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.lower_angle_bracketed_parameter_data(\n                         &data.as_angle_bracketed_args(),\n                         ParamMode::Explicit,\n-                        itctx.reborrow(),\n+                        itctx,\n                     )\n                     .0\n                 }\n@@ -1097,7 +1080,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.ty(span, hir::TyKind::Tup(tys))\n     }\n \n-    fn lower_ty_direct(&mut self, t: &Ty, mut itctx: ImplTraitContext) -> hir::Ty<'hir> {\n+    fn lower_ty_direct(&mut self, t: &Ty, itctx: ImplTraitContext) -> hir::Ty<'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n@@ -1129,11 +1112,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }))\n             }),\n             TyKind::Never => hir::TyKind::Never,\n-            TyKind::Tup(ref tys) => {\n-                hir::TyKind::Tup(self.arena.alloc_from_iter(\n-                    tys.iter().map(|ty| self.lower_ty_direct(ty, itctx.reborrow())),\n-                ))\n-            }\n+            TyKind::Tup(ref tys) => hir::TyKind::Tup(\n+                self.arena.alloc_from_iter(tys.iter().map(|ty| self.lower_ty_direct(ty, itctx))),\n+            ),\n             TyKind::Paren(ref ty) => {\n                 return self.lower_ty_direct(ty, itctx);\n             }\n@@ -1167,7 +1148,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 GenericBound::Trait(\n                                     ref ty,\n                                     TraitBoundModifier::None | TraitBoundModifier::MaybeConst,\n-                                ) => Some(this.lower_poly_trait_ref(ty, itctx.reborrow())),\n+                                ) => Some(this.lower_poly_trait_ref(ty, itctx)),\n                                 // `~const ?Bound` will cause an error during AST validation\n                                 // anyways, so treat it like `?Bound` as compilation proceeds.\n                                 GenericBound::Trait(\n@@ -1935,12 +1916,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,\n-        mut itctx: ImplTraitContext,\n+        itctx: ImplTraitContext,\n     ) -> hir::PolyTraitRef<'hir> {\n         let bound_generic_params = self.lower_generic_params(&p.bound_generic_params);\n \n         let trait_ref = self.with_lifetime_binder(p.trait_ref.ref_id, |this| {\n-            this.lower_trait_ref(&p.trait_ref, itctx.reborrow())\n+            this.lower_trait_ref(&p.trait_ref, itctx)\n         });\n \n         hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n@@ -1961,9 +1942,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_param_bounds_mut<'s>(\n         &'s mut self,\n         bounds: &'s [GenericBound],\n-        mut itctx: ImplTraitContext,\n+        itctx: ImplTraitContext,\n     ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> {\n-        bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx.reborrow()))\n+        bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n     }\n \n     /// Lowers a block directly to an expression, presuming that it"}, {"sha": "d56974b773de6f4268ebbb622a445c32602552f6", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d327db9319e7b8ec7dff56f1fc2cfb199d3151b9/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=d327db9319e7b8ec7dff56f1fc2cfb199d3151b9", "patch": "@@ -21,11 +21,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         p: &Path,\n         param_mode: ParamMode,\n-        mut itctx: ImplTraitContext,\n+        itctx: ImplTraitContext,\n     ) -> hir::QPath<'hir> {\n         debug!(\"lower_qpath(id: {:?}, qself: {:?}, p: {:?})\", id, qself, p);\n         let qself_position = qself.as_ref().map(|q| q.position);\n-        let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx.reborrow()));\n+        let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n \n         let partial_res =\n             self.resolver.get_partial_res(id).unwrap_or_else(|| PartialRes::new(Res::Err));\n@@ -70,7 +70,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         segment,\n                         param_mode,\n                         parenthesized_generic_args,\n-                        itctx.reborrow(),\n+                        itctx,\n                     )\n                 },\n             )),\n@@ -116,7 +116,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 segment,\n                 param_mode,\n                 ParenthesizedGenericArgs::Err,\n-                itctx.reborrow(),\n+                itctx,\n             ));\n             let qpath = hir::QPath::TypeRelative(ty, hir_segment);\n \n@@ -318,7 +318,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n-        mut itctx: ImplTraitContext,\n+        itctx: ImplTraitContext,\n     ) -> (GenericArgsCtor<'hir>, bool) {\n         let has_non_lt_args = data.args.iter().any(|arg| match arg {\n             AngleBracketedArg::Arg(ast::GenericArg::Lifetime(_))\n@@ -329,14 +329,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .args\n             .iter()\n             .filter_map(|arg| match arg {\n-                AngleBracketedArg::Arg(arg) => Some(self.lower_generic_arg(arg, itctx.reborrow())),\n+                AngleBracketedArg::Arg(arg) => Some(self.lower_generic_arg(arg, itctx)),\n                 AngleBracketedArg::Constraint(_) => None,\n             })\n             .collect();\n         let bindings = self.arena.alloc_from_iter(data.args.iter().filter_map(|arg| match arg {\n-            AngleBracketedArg::Constraint(c) => {\n-                Some(self.lower_assoc_ty_constraint(c, itctx.reborrow()))\n-            }\n+            AngleBracketedArg::Constraint(c) => Some(self.lower_assoc_ty_constraint(c, itctx)),\n             AngleBracketedArg::Arg(_) => None,\n         }));\n         let ctor = GenericArgsCtor { args, bindings, parenthesized: false, span: data.span };"}]}