{"sha": "cdc193db993eadab74d9ea439613e8f9d3725ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYzE5M2RiOTkzZWFkYWI3NGQ5ZWE0Mzk2MTNlOGY5ZDM3MjVhYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-04T11:29:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-04T11:29:38Z"}, "message": "Auto merge of #51328 - oli-obk:no_union_promotion, r=eddyb\n\nDo not promote union field accesses\n\nr? @eddyb\n\ntechnically a breaking change, but the code errored on the previous stable and produces UB + a warning on the current stable. I don't think we need a crater run in that case.", "tree": {"sha": "29cc5f53ff8f0c39b8ac246bc47bd139f19d9dbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29cc5f53ff8f0c39b8ac246bc47bd139f19d9dbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc193db993eadab74d9ea439613e8f9d3725ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc193db993eadab74d9ea439613e8f9d3725ac7", "html_url": "https://github.com/rust-lang/rust/commit/cdc193db993eadab74d9ea439613e8f9d3725ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc193db993eadab74d9ea439613e8f9d3725ac7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eafab06cf76fd1461aabc2c6a4fc0daa516da13", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eafab06cf76fd1461aabc2c6a4fc0daa516da13", "html_url": "https://github.com/rust-lang/rust/commit/6eafab06cf76fd1461aabc2c6a4fc0daa516da13"}, {"sha": "eb31ae2e140b682e630a93d2382bd06ffc6089a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb31ae2e140b682e630a93d2382bd06ffc6089a5", "html_url": "https://github.com/rust-lang/rust/commit/eb31ae2e140b682e630a93d2382bd06ffc6089a5"}], "stats": {"total": 116, "additions": 65, "deletions": 51}, "files": [{"sha": "f3fba5b47be14080d99de722ae123fc29a3ba1b8", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=cdc193db993eadab74d9ea439613e8f9d3725ac7", "patch": "@@ -566,8 +566,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                         ProjectionElem::Field(..) |\n                         ProjectionElem::Index(_) => {\n-                            if this.mode != Mode::Fn &&\n-                               this.qualif.intersects(Qualif::STATIC) {\n+                            if this.mode == Mode::Fn {\n+                                let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n+                                if let Some(def) = base_ty.ty_adt_def() {\n+                                    if def.is_union() {\n+                                        this.not_const();\n+                                    }\n+                                }\n+                            } else if this.qualif.intersects(Qualif::STATIC) {\n                                 span_err!(this.tcx.sess, this.span, E0494,\n                                           \"cannot refer to the interior of another \\\n                                            static, use a constant instead\");"}, {"sha": "82ac112b534e9f5dd317633a0209cf903de0866a", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=cdc193db993eadab74d9ea439613e8f9d3725ac7", "patch": "@@ -445,9 +445,16 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             }\n         }\n \n+        hir::ExprField(ref expr, _) => {\n+            if let Some(def) = v.tables.expr_ty(expr).ty_adt_def() {\n+                if def.is_union() {\n+                    v.promotable = false\n+                }\n+            }\n+        }\n+\n         hir::ExprBlock(..) |\n         hir::ExprIndex(..) |\n-        hir::ExprField(..) |\n         hir::ExprArray(_) |\n         hir::ExprType(..) |\n         hir::ExprTup(..) => {}"}, {"sha": "f83f49f298b901d2b86227cddffa4bbad821497a", "filename": "src/test/run-pass/ctfe/union-ice.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6eafab06cf76fd1461aabc2c6a4fc0daa516da13/src%2Ftest%2Frun-pass%2Fctfe%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eafab06cf76fd1461aabc2c6a4fc0daa516da13/src%2Ftest%2Frun-pass%2Fctfe%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Funion-ice.rs?ref=6eafab06cf76fd1461aabc2c6a4fc0daa516da13", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(const_fn)]\n-\n-type Field1 = i32;\n-type Field2 = f32;\n-type Field3 = i64;\n-\n-union DummyUnion {\n-    field1: Field1,\n-    field2: Field2,\n-    field3: Field3,\n-}\n-\n-const FLOAT1_AS_I32: i32 = 1065353216;\n-const UNION: DummyUnion = DummyUnion { field1: FLOAT1_AS_I32 };\n-\n-const fn read_field1() -> Field1 {\n-    const FIELD1: Field1 = unsafe { UNION.field1 };\n-    FIELD1\n-}\n-\n-const fn read_field2() -> Field2 {\n-    const FIELD2: Field2 = unsafe { UNION.field2 };\n-    FIELD2\n-}\n-\n-const fn read_field3() -> Field3 {\n-    const FIELD3: Field3 = unsafe { UNION.field3 };\n-    FIELD3\n-}\n-\n-fn main() {\n-    assert_eq!(read_field1(), FLOAT1_AS_I32);\n-    assert_eq!(read_field2(), 1.0);\n-    assert_eq!(read_field3(), unsafe { UNION.field3 });\n-}"}, {"sha": "a380b01dcc13f9f155ecda451c6398fcf198aa89", "filename": "src/test/run-pass/union/union-const-eval-field.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs?ref=cdc193db993eadab74d9ea439613e8f9d3725ac7", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(const_fn)]\n \n-type Field1 = i32;\n+type Field1 = (i32, u32);\n type Field2 = f32;\n type Field3 = i64;\n \n@@ -21,7 +21,7 @@ union DummyUnion {\n }\n \n const FLOAT1_AS_I32: i32 = 1065353216;\n-const UNION: DummyUnion = DummyUnion { field1: FLOAT1_AS_I32 };\n+const UNION: DummyUnion = DummyUnion { field1: (FLOAT1_AS_I32, 0) };\n \n const fn read_field1() -> Field1 {\n     const FIELD1: Field1 = unsafe { UNION.field1 };\n@@ -39,7 +39,15 @@ const fn read_field3() -> Field3 {\n }\n \n fn main() {\n-    assert_eq!(read_field1(), FLOAT1_AS_I32);\n+    let foo = FLOAT1_AS_I32;\n+    assert_eq!(read_field1().0, foo);\n+    assert_eq!(read_field1().0, FLOAT1_AS_I32);\n+\n+    let foo = 1.0;\n+    assert_eq!(read_field2(), foo);\n     assert_eq!(read_field2(), 1.0);\n+\n     assert_eq!(read_field3(), unsafe { UNION.field3 });\n+    let foo = unsafe { UNION.field3 };\n+    assert_eq!(read_field3(), foo);\n }"}, {"sha": "714d7a4fc8b27c26a20606783ad388ffe251556e", "filename": "src/test/ui/const-eval/union_promotion.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.rs?ref=cdc193db993eadab74d9ea439613e8f9d3725ac7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(const_err)]\n+\n+union Foo {\n+    a: &'static u32,\n+    b: usize,\n+}\n+\n+fn main() {\n+    let x: &'static bool = &unsafe { //~ borrowed value does not live long enough\n+        Foo { a: &1 }.b == Foo { a: &2 }.b\n+    };\n+}"}, {"sha": "b4aa91f2de723696bd269df9d1b547d4579ef593", "filename": "src/test/ui/const-eval/union_promotion.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdc193db993eadab74d9ea439613e8f9d3725ac7/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.stderr?ref=cdc193db993eadab74d9ea439613e8f9d3725ac7", "patch": "@@ -0,0 +1,16 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/union_promotion.rs:19:29\n+   |\n+LL |       let x: &'static bool = &unsafe { //~ borrowed value does not live long enough\n+   |  _____________________________^\n+LL | |         Foo { a: &1 }.b == Foo { a: &2 }.b\n+LL | |     };\n+   | |_____^ temporary value does not live long enough\n+LL |   }\n+   |   - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}