{"sha": "eda41addfcf8112e69531f56ca8c478509be0135", "node_id": "C_kwDOAAsO6NoAKGVkYTQxYWRkZmNmODExMmU2OTUzMWY1NmNhOGM0Nzg1MDliZTAxMzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T16:16:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T16:16:24Z"}, "message": "Auto merge of #104134 - dtolnay:panictemporaries, r=joshtriplett\n\nShorten lifetime of panic temporaries in panic_fmt case\n\nThis fixes an issue called out by `@fasterthanlime` in https://octodon.social/`@fasterthanlime/109304454114856561.` Macros like `todo!(\"\u2026\")` and `panic!(\"\u2026\", \u2026)` drop their `format_args` temporary at the nearest enclosing semicolon **outside** the macro invocation, not inside the macro invocation. Due to the formatting internals being type-erased in a way that is not thread-safe, this blocks futures from being `Send` if there is an `await` anywhere between the panic call and the nearest enclosing semicolon.\n\n**Example:**\n\n```rust\n#![allow(unreachable_code)]\n\nasync fn f(_: u8) {}\n\nasync fn g() {\n    f(todo!(\"...\")).await;\n}\n\nfn require_send(_: impl Send) {}\n\nfn main() {\n    require_send(g());\n}\n```\n\n**Before:**\n\n```console\nerror: future cannot be sent between threads safely\n  --> src/main.rs:15:18\n   |\n15 |     require_send(g());\n   |                  ^^^ future returned by `g` is not `Send`\n   |\n   = help: the trait `Sync` is not implemented for `core::fmt::Opaque`\nnote: future is not `Send` as this value is used across an await\n  --> src/main.rs:9:20\n   |\n9  |     f(todo!(\"...\")).await;\n   |       ------------ ^^^^^^ await occurs here, with `$crate::format_args!($($arg)+)` maybe used later\n   |       |\n   |       has type `ArgumentV1<'_>` which is not `Send`\nnote: `$crate::format_args!($($arg)+)` is later dropped here\n  --> src/main.rs:9:26\n   |\n9  |     f(todo!(\"...\")).await;\n   |                          ^\nnote: required by a bound in `require_send`\n  --> src/main.rs:12:25\n   |\n12 | fn require_send(_: impl Send) {}\n   |                         ^^^^ required by this bound in `require_send`\n```\n\n**After:** works.\n\nArguably there is a rustc fix that could work here too, instead of a standard library change. Rustc could be taught that the code shown above is fine to compile because the `await` is unreachable and so temporaries before the `await` do not need to get put in the anonymous compiler-generated `Future` struct, regardless of syntactically where they're supposed to be dropped according to the language semantics.\n\nI would be open to that, though my recollection is that in the past we have been very hesitant about introducing any smarts into Drop placement. People want the language rules about where temporaries are dropped to be as simplistic and predictable as possible.", "tree": {"sha": "284b91244690fe0cad45348b5d94ece7de0f56ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/284b91244690fe0cad45348b5d94ece7de0f56ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eda41addfcf8112e69531f56ca8c478509be0135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eda41addfcf8112e69531f56ca8c478509be0135", "html_url": "https://github.com/rust-lang/rust/commit/eda41addfcf8112e69531f56ca8c478509be0135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eda41addfcf8112e69531f56ca8c478509be0135/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e8116cfe5b1affcfcc22ffb6bb0152573488114", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8116cfe5b1affcfcc22ffb6bb0152573488114", "html_url": "https://github.com/rust-lang/rust/commit/8e8116cfe5b1affcfcc22ffb6bb0152573488114"}, {"sha": "4be97e0b24246891eefe5eef90509b5c0450b313", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be97e0b24246891eefe5eef90509b5c0450b313", "html_url": "https://github.com/rust-lang/rust/commit/4be97e0b24246891eefe5eef90509b5c0450b313"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "ebcce79b0f81ed2b5f82cd2498d3a9272c64838f", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eda41addfcf8112e69531f56ca8c478509be0135/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda41addfcf8112e69531f56ca8c478509be0135/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=eda41addfcf8112e69531f56ca8c478509be0135", "patch": "@@ -35,9 +35,11 @@ pub macro panic_2015 {\n     (\"{}\", $arg:expr $(,)?) => (\n         $crate::panicking::panic_display(&$arg)\n     ),\n-    ($fmt:expr, $($arg:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n-    ),\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+));\n+    }),\n }\n \n #[doc(hidden)]\n@@ -53,9 +55,11 @@ pub macro panic_2021 {\n     (\"{}\", $arg:expr $(,)?) => (\n         $crate::panicking::panic_display(&$arg)\n     ),\n-    ($($t:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))\n-    ),\n+    ($($t:tt)+) => ({\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+));\n+    }),\n }\n \n #[doc(hidden)]"}, {"sha": "a2ffd8b1e7eca3e3d55bdd94034c4ee1395ad7ea", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda41addfcf8112e69531f56ca8c478509be0135/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda41addfcf8112e69531f56ca8c478509be0135/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=eda41addfcf8112e69531f56ca8c478509be0135", "patch": "@@ -26,7 +26,9 @@ pub macro panic_2015 {\n         $crate::rt::panic_display(&$arg)\n     }),\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+));\n     }),\n }\n "}, {"sha": "51a3b0d972e683d42fef81b1482729c3d5ff7cf9", "filename": "src/tools/clippy/tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eda41addfcf8112e69531f56ca8c478509be0135/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eda41addfcf8112e69531f56ca8c478509be0135/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr?ref=eda41addfcf8112e69531f56ca8c478509be0135", "patch": "@@ -30,19 +30,11 @@ error: sub-expression diverges\n LL |             3 => true || diverge(),\n    |                          ^^^^^^^^^\n \n-error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:36:30\n-   |\n-LL |                 _ => true || panic!(\"boo\"),\n-   |                              ^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: sub-expression diverges\n   --> $DIR/diverging_sub_expression.rs:38:26\n    |\n LL |             _ => true || break,\n    |                          ^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "5b5b8b7c2d90b5928aafbb9417c5e1c3f9bbf898", "filename": "tests/ui/macros/panic-temporaries.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eda41addfcf8112e69531f56ca8c478509be0135/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda41addfcf8112e69531f56ca8c478509be0135/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs?ref=eda41addfcf8112e69531f56ca8c478509be0135", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+// edition:2021\n+\n+#![allow(unreachable_code)]\n+\n+async fn f(_: u8) {}\n+\n+async fn g() {\n+    // Todo returns `!`, so the await is never reached, and in particular the\n+    // temporaries inside the formatting machinery are not still alive at the\n+    // await point.\n+    f(todo!(\"...\")).await;\n+}\n+\n+fn require_send(_: impl Send) {}\n+\n+fn main() {\n+    require_send(g());\n+}"}, {"sha": "b69b5bc3b53f26128d28fba0f4f5eb270a96e7b7", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eda41addfcf8112e69531f56ca8c478509be0135/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/eda41addfcf8112e69531f56ca8c478509be0135/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout?ref=eda41addfcf8112e69531f56ca8c478509be0135", "patch": "@@ -26,7 +26,7 @@ fn arbitrary_consuming_method_for_demonstration_purposes() {\n \n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem as usize\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -42,7 +42,7 @@ fn addr_of() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: &elem\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -58,7 +58,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem == 1\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -71,7 +71,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem >= 1\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -84,7 +84,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem > 0\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -97,7 +97,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem < 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -110,7 +110,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem <= 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -123,7 +123,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem != 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -139,7 +139,7 @@ fn unary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: *elem\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };"}]}