{"sha": "1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhN2QzOTA0MWUxM2M0NWY1YTYwNTcwMjQwZjNjOWM1YzA0NDdiYjY=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-18T19:25:30Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-18T19:36:26Z"}, "message": "Format constants and static variables", "tree": {"sha": "b16afac9727cf79c457ac5de18ca42fcadb39baa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16afac9727cf79c457ac5de18ca42fcadb39baa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "html_url": "https://github.com/rust-lang/rust/commit/1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d326a29b4b763e2f81ea72996765af3bd7394f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d326a29b4b763e2f81ea72996765af3bd7394f8c", "html_url": "https://github.com/rust-lang/rust/commit/d326a29b4b763e2f81ea72996765af3bd7394f8c"}], "stats": {"total": 115, "additions": 88, "deletions": 27}, "files": [{"sha": "bd05d71eea7d1d1c92e148f4886273b078b7831c", "filename": "src/items.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "patch": "@@ -1136,6 +1136,26 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n+pub fn rewrite_static(prefix: &str,\n+                      ident: ast::Ident,\n+                      ty: &ast::Ty,\n+                      mutability: ast::Mutability,\n+                      expr: &ast::Expr,\n+                      context: &RewriteContext)\n+                      -> Option<String> {\n+    let prefix = format!(\"{} {}{}: \", prefix, format_mutability(mutability), ident);\n+    // 2 = \" =\".len()\n+    let ty_str = try_opt!(ty.rewrite(context,\n+                                     context.config.max_width - context.block_indent.width() -\n+                                     prefix.len() - 2,\n+                                     context.block_indent));\n+    let lhs = format!(\"{}{} =\", prefix, ty_str);\n+\n+    // 1 = ;\n+    let remaining_width = context.config.max_width - context.block_indent.width() - 1;\n+    rewrite_assign_rhs(context, lhs, expr, remaining_width, context.block_indent).map(|s| s + \";\")\n+}\n+\n impl Rewrite for ast::FunctionRetTy {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match *self {"}, {"sha": "85ff28148c0248dafdac475a1187a5641d13d95f", "filename": "src/visitor.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "patch": "@@ -20,6 +20,7 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n+use items::rewrite_static;\n \n pub struct FmtVisitor<'a> {\n     pub codemap: &'a CodeMap,\n@@ -31,22 +32,8 @@ pub struct FmtVisitor<'a> {\n }\n \n impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n-    // FIXME: We'd rather not format expressions here, as we have little\n-    // context. How are we still reaching this?\n-    fn visit_expr(&mut self, ex: &'v ast::Expr) {\n-        debug!(\"visit_expr: {:?} {:?}\",\n-               self.codemap.lookup_char_pos(ex.span.lo),\n-               self.codemap.lookup_char_pos(ex.span.hi));\n-        self.format_missing(ex.span.lo);\n-\n-        let rewrite = ex.rewrite(&self.get_context(),\n-                                 self.config.max_width - self.block_indent.width(),\n-                                 self.block_indent);\n-\n-        if let Some(new_str) = rewrite {\n-            self.buffer.push_str(&new_str);\n-            self.last_pos = ex.span.hi;\n-        }\n+    fn visit_expr(&mut self, _: &'v ast::Expr) {\n+        unreachable!()\n     }\n \n     fn visit_stmt(&mut self, stmt: &'v ast::Stmt) {\n@@ -104,16 +91,19 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             self.visit_stmt(&stmt)\n         }\n \n-        match b.expr {\n-            Some(ref e) => {\n-                self.format_missing_with_indent(e.span.lo);\n-                self.visit_expr(e);\n+        if let Some(ref e) = b.expr {\n+            self.format_missing_with_indent(e.span.lo);\n+            let rewrite = e.rewrite(&self.get_context(),\n+                                    self.config.max_width - self.block_indent.width(),\n+                                    self.block_indent)\n+                           .unwrap_or_else(|| self.snippet(e.span));\n \n-                if semicolon_for_expr(e) {\n-                    self.buffer.push_str(\";\");\n-                }\n+            self.buffer.push_str(&rewrite);\n+            self.last_pos = e.span.hi;\n+\n+            if semicolon_for_expr(e) {\n+                self.buffer.push_str(\";\");\n             }\n-            None => {}\n         }\n \n         self.block_indent = self.block_indent.block_unindent(self.config);\n@@ -131,7 +121,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 b: &'v ast::Block,\n                 s: Span,\n                 _: ast::NodeId) {\n-\n         let indent = self.block_indent;\n         let rewrite = match fk {\n             visit::FnKind::ItemFn(ident, ref generics, unsafety, constness, abi, vis) => {\n@@ -190,6 +179,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             ast::Item_::ItemUse(ref vp) => {\n                 self.format_import(item.vis, vp, item.span);\n             }\n+            // TODO(#78): format traits and impl definitions.\n             ast::Item_::ItemImpl(..) |\n             ast::Item_::ItemTrait(..) => {\n                 self.block_indent = self.block_indent.block_indent(self.config);\n@@ -225,7 +215,36 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 self.format_missing_with_indent(item.span.lo);\n                 self.format_foreign_mod(foreign_mod, item.span);\n             }\n-            _ => {\n+            ast::Item_::ItemStatic(ref ty, mutability, ref expr) => {\n+                self.format_missing_with_indent(item.span.lo);\n+                let rewrite = rewrite_static(\"static\",\n+                                             item.ident,\n+                                             ty,\n+                                             mutability,\n+                                             expr,\n+                                             &self.get_context());\n+                if let Some(s) = rewrite {\n+                    self.buffer.push_str(&s);\n+                    self.last_pos = item.span.hi;\n+                }\n+            }\n+            ast::Item_::ItemConst(ref ty, ref expr) => {\n+                self.format_missing_with_indent(item.span.lo);\n+                let rewrite = rewrite_static(\"const\",\n+                                             item.ident,\n+                                             ty,\n+                                             ast::Mutability::MutImmutable,\n+                                             expr,\n+                                             &self.get_context());\n+                if let Some(s) = rewrite {\n+                    self.buffer.push_str(&s);\n+                    self.last_pos = item.span.hi;\n+                }\n+            }\n+            // TODO(#486): format type aliases.\n+            ast::Item_::ItemDefaultImpl(..) |\n+            ast::Item_::ItemFn(..) |\n+            ast::Item_::ItemTy(..) => {\n                 visit::walk_item(self, item);\n             }\n         }\n@@ -247,7 +266,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 self.last_pos = ti.span.hi;\n             }\n         }\n-        // TODO(#78): format trait types.\n \n         visit::walk_trait_item(self, ti)\n     }"}, {"sha": "00688732fe7e057c58716fb01a4189a51150b6a4", "filename": "tests/source/static.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/tests%2Fsource%2Fstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/tests%2Fsource%2Fstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstatic.rs?ref=1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "patch": "@@ -0,0 +1,10 @@\n+pub const FILE_GENERIC_READ: DWORD =\n+                STANDARD_RIGHTS_READ | FILE_READ_DATA |\n+                FILE_READ_ATTRIBUTES | FILE_READ_EA | SYNCHRONIZE;\n+\n+pub static boolnames: &'static[&'static str] = &[\"bw\", \"am\", \"xsb\", \"xhp\", \"xenl\", \"eo\",\n+    \"gn\", \"hc\", \"km\", \"hs\", \"in\", \"db\", \"da\", \"mir\", \"msgr\", \"os\", \"eslok\", \"xt\", \"hz\", \"ul\", \"xon\",\n+    \"nxon\", \"mc5i\", \"chts\", \"nrrmc\", \"npc\", \"ndscr\", \"ccc\", \"bce\", \"hls\", \"xhpa\", \"crxm\", \"daisy\",\n+    \"xvpa\", \"sam\", \"cpix\", \"lpix\", \"OTbs\", \"OTns\", \"OTnc\", \"OTMT\", \"OTNL\", \"OTpt\", \"OTxr\"];\n+\n+static mut name: SomeType = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;"}, {"sha": "02223f59ca7964043e54c0a9e4e8ea17dcff6860", "filename": "tests/target/static.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/tests%2Ftarget%2Fstatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7d39041e13c45f5a60570240f3c9c5c0447bb6/tests%2Ftarget%2Fstatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstatic.rs?ref=1a7d39041e13c45f5a60570240f3c9c5c0447bb6", "patch": "@@ -0,0 +1,13 @@\n+const FILE_GENERIC_READ: DWORD = STANDARD_RIGHTS_READ | FILE_READ_DATA | FILE_READ_ATTRIBUTES |\n+                                 FILE_READ_EA | SYNCHRONIZE;\n+\n+static boolnames: &'static [&'static str] = &[\"bw\", \"am\", \"xsb\", \"xhp\", \"xenl\", \"eo\", \"gn\", \"hc\",\n+                                              \"km\", \"hs\", \"in\", \"db\", \"da\", \"mir\", \"msgr\", \"os\",\n+                                              \"eslok\", \"xt\", \"hz\", \"ul\", \"xon\", \"nxon\", \"mc5i\",\n+                                              \"chts\", \"nrrmc\", \"npc\", \"ndscr\", \"ccc\", \"bce\",\n+                                              \"hls\", \"xhpa\", \"crxm\", \"daisy\", \"xvpa\", \"sam\",\n+                                              \"cpix\", \"lpix\", \"OTbs\", \"OTns\", \"OTnc\", \"OTMT\",\n+                                              \"OTNL\", \"OTpt\", \"OTxr\"];\n+\n+static mut name: SomeType =\n+    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;"}]}