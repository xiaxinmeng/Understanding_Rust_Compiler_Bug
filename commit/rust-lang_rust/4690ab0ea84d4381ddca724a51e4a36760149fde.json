{"sha": "4690ab0ea84d4381ddca724a51e4a36760149fde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OTBhYjBlYTg0ZDQzODFkZGNhNzI0YTUxZTRhMzY3NjAxNDlmZGU=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-02-23T23:02:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-25T05:22:27Z"}, "message": "Match binding is assignment\n\nIn its first pass, namely gather_loans, the borrow checker tracks the\ninitialization sites among other things it does. It does so for let\nbindings with initializers but not for bindings in match arms, which are\neffectively also assignments. This patch does that for borrow checker.\n\nCloses #12452.", "tree": {"sha": "fa76dfce79b393ffbdb9579236e3a653eab52f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa76dfce79b393ffbdb9579236e3a653eab52f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4690ab0ea84d4381ddca724a51e4a36760149fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4690ab0ea84d4381ddca724a51e4a36760149fde", "html_url": "https://github.com/rust-lang/rust/commit/4690ab0ea84d4381ddca724a51e4a36760149fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4690ab0ea84d4381ddca724a51e4a36760149fde/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6757053cffb585249105fbd76f83a2fe7501219b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6757053cffb585249105fbd76f83a2fe7501219b", "html_url": "https://github.com/rust-lang/rust/commit/6757053cffb585249105fbd76f83a2fe7501219b"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "263ed47b29e347788a50ca0193d18e65541268cc", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4690ab0ea84d4381ddca724a51e4a36760149fde/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4690ab0ea84d4381ddca724a51e4a36760149fde/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=4690ab0ea84d4381ddca724a51e4a36760149fde", "patch": "@@ -160,16 +160,8 @@ fn gather_loans_in_local(this: &mut GatherLoanCtxt,\n             })\n         }\n         Some(init) => {\n-            // Variable declarations with initializers are considered \"assigns\":\n-            let tcx = this.bccx.tcx;\n-            pat_util::pat_bindings(tcx.def_map, local.pat, |_, id, span, _| {\n-                gather_moves::gather_assignment(this.bccx,\n-                                                &this.move_data,\n-                                                id,\n-                                                span,\n-                                                @LpVar(id),\n-                                                id);\n-            });\n+            // Variable declarations with initializers are considered \"assigns\",\n+            // which is handled by `gather_pat`:\n             let init_cmt = this.bccx.cat_expr(init);\n             this.gather_pat(init_cmt, local.pat, None);\n         }\n@@ -811,6 +803,17 @@ impl<'a> GatherLoanCtxt<'a> {\n         self.bccx.cat_pattern(discr_cmt, root_pat, |cmt, pat| {\n             match pat.node {\n               ast::PatIdent(bm, _, _) if self.pat_is_binding(pat) => {\n+                // Each match binding is effectively an assignment.\n+                let tcx = self.bccx.tcx;\n+                pat_util::pat_bindings(tcx.def_map, pat, |_, id, span, _| {\n+                    gather_moves::gather_assignment(self.bccx,\n+                                                    &self.move_data,\n+                                                    id,\n+                                                    span,\n+                                                    @LpVar(id),\n+                                                    id);\n+                });\n+\n                 match bm {\n                   ast::BindByRef(mutbl) => {\n                     // ref x or ref x @ p --- creates a ptr which must"}, {"sha": "72d9afd4d2b2be8f51718ebfa486ab435b883248", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4690ab0ea84d4381ddca724a51e4a36760149fde/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4690ab0ea84d4381ddca724a51e4a36760149fde/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=4690ab0ea84d4381ddca724a51e4a36760149fde", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that immutable pattern bindings cannot be reassigned.\n+\n+enum E {\n+    Foo(int)\n+}\n+\n+struct S {\n+    bar: int,\n+}\n+\n+pub fn main() {\n+    match 1i {\n+        x => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+\n+    match Foo(1) {\n+        Foo(x) => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+\n+    match S { bar: 1 } {\n+        S { bar: x } => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+\n+    match (1i,) {\n+        (x,) => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+\n+    match [1,2,3] {\n+        [x,_,_] => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+}"}]}