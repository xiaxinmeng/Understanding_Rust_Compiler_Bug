{"sha": "f2d9ee9c342104880dd978e85260243d2dcedc9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZDllZTljMzQyMTA0ODgwZGQ5NzhlODUyNjAyNDNkMmRjZWRjOWE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-31T18:22:40Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-09-02T16:10:40Z"}, "message": "Preserve most sub-obligations in the projection cache", "tree": {"sha": "452d87442da559a12d1780d92c594a36b9bda1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452d87442da559a12d1780d92c594a36b9bda1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2d9ee9c342104880dd978e85260243d2dcedc9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmEw94kACgkQtAh+UQ6Y\nsWSiyw/+MwdjwnrAyvsJ6uV8NwMMsQIT4b4QDNIK4UvQhHiMMy36CFPtt6Yp0vdK\ndzy73HL0JdEiSsdgGTfdIDDaDo3j7hXut6wJwqPAD/6Jh2r65bTV49FmxyOCDjCW\nXIU8n2twDhGbVdJye4ZN7Mi+Io3OcSFC4cop3CAdocWbRqTMjXo7e2KH8g+jGgEE\nBNLsS2rrlsuSrfdC8qhgP9nwAaNt/Q9OVfEduJbBAKFQ2NIs17KjIjJHxUEerzdW\nL/o6D3VvIyCbxDNHRUr3sNHFFNlS8aKEZ3s8Ghk5/lvmCuq36y86tuLYQdBCyJ3j\ng5zPcjuk/vS84TroUXcVIGJcVjbm7I8v/3jYn7UJRTc506m+DRACbV4b7ZHbqFYQ\naZ1PJ799tRoSgNDmJ3FTPUHY+2C6cn0+If2Fs/15F25kPOJVyWKJWq54UlKzh9bm\nqMc9Ch7uFWXCiv7Crvrto4JBGPez2eaxTbrbsqA4hUutvCrwsdiYta/2Y8b/1oUa\nDncgIsPmnSYLFrk6s5kCQQ1jLkc/HuytQaJ7e2PxGV8VofRDB9eqE78VEOkVBxUC\nZRi6oUAdlMaZ3MIKUAkYrZycQY/OJtled6HptJ7c1cCczVPciUDsJQ4jF8KjOvnZ\nzcrKfyqregL+6UTbo+HHe0e0ll03ypVDsHsdRU/Apt/XmM5whEI=\n=tJ4D\n-----END PGP SIGNATURE-----", "payload": "tree 452d87442da559a12d1780d92c594a36b9bda1c3\nparent 64929313f53181636e4dd37e25836973205477e4\nauthor Aaron Hill <aa1ronham@gmail.com> 1622485360 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1630599040 -0500\n\nPreserve most sub-obligations in the projection cache\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9ee9c342104880dd978e85260243d2dcedc9a", "html_url": "https://github.com/rust-lang/rust/commit/f2d9ee9c342104880dd978e85260243d2dcedc9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9ee9c342104880dd978e85260243d2dcedc9a/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64929313f53181636e4dd37e25836973205477e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/64929313f53181636e4dd37e25836973205477e4", "html_url": "https://github.com/rust-lang/rust/commit/64929313f53181636e4dd37e25836973205477e4"}], "stats": {"total": 123, "additions": 41, "deletions": 82}, "files": [{"sha": "7038f16a2c9c4032652964b9c2590f284706f675", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 24, "deletions": 47, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9ee9c342104880dd978e85260243d2dcedc9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9ee9c342104880dd978e85260243d2dcedc9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=f2d9ee9c342104880dd978e85260243d2dcedc9a", "patch": "@@ -10,6 +10,7 @@ use super::PredicateObligation;\n use super::Selection;\n use super::SelectionContext;\n use super::SelectionError;\n+use super::TraitQueryMode;\n use super::{\n     ImplSourceClosureData, ImplSourceDiscriminantKindData, ImplSourceFnPointerData,\n     ImplSourceGeneratorData, ImplSourcePointeeData, ImplSourceUserDefinedData,\n@@ -18,7 +19,7 @@ use super::{Normalized, NormalizedTy, ProjectionCacheEntry, ProjectionCacheKey};\n \n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n-use crate::traits::error_reporting::InferCtxtExt;\n+use crate::traits::error_reporting::InferCtxtExt as _;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n@@ -912,6 +913,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n     }\n \n     let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);\n+\n     match project_type(selcx, &obligation) {\n         Ok(ProjectedTy::Progress(Progress {\n             ty: projected_ty,\n@@ -925,7 +927,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             let projected_ty = selcx.infcx().resolve_vars_if_possible(projected_ty);\n             debug!(?projected_ty, ?depth, ?projected_obligations);\n \n-            let result = if projected_ty.has_projections() {\n+            let mut result = if projected_ty.has_projections() {\n                 let mut normalizer = AssocTypeNormalizer::new(\n                     selcx,\n                     param_env,\n@@ -942,8 +944,26 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n                 Normalized { value: projected_ty, obligations: projected_obligations }\n             };\n \n-            let cache_value = prune_cache_value_obligations(infcx, &result);\n-            infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, cache_value);\n+            let mut canonical =\n+                SelectionContext::with_query_mode(selcx.infcx(), TraitQueryMode::Canonical);\n+            result.obligations.drain_filter(|projected_obligation| {\n+                // If any global obligations always apply, considering regions, then we don't\n+                // need to include them. The `is_global` check rules out inference variables,\n+                // so there's no need for the caller of `opt_normalize_projection_type`\n+                // to evaluate them.\n+                // Note that we do *not* discard obligations that evaluate to\n+                // `EvaluatedtoOkModuloRegions`. Evaluating these obligations\n+                // inside of a query (e.g. `evaluate_obligation`) can change\n+                // the result to `EvaluatedToOkModuloRegions`, while an\n+                // `EvaluatedToOk` obligation will never change the result.\n+                // See #85360 for more details\n+                projected_obligation.is_global(canonical.tcx())\n+                    && canonical\n+                        .evaluate_root_obligation(projected_obligation)\n+                        .map_or(false, |res| res.must_apply_considering_regions())\n+            });\n+\n+            infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());\n             obligations.extend(result.obligations);\n             Ok(Some(result.value))\n         }\n@@ -974,49 +994,6 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n     }\n }\n \n-/// If there are unresolved type variables, then we need to include\n-/// any subobligations that bind them, at least until those type\n-/// variables are fully resolved.\n-fn prune_cache_value_obligations<'a, 'tcx>(\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n-    result: &NormalizedTy<'tcx>,\n-) -> NormalizedTy<'tcx> {\n-    if infcx.unresolved_type_vars(&result.value).is_none() {\n-        return NormalizedTy { value: result.value, obligations: vec![] };\n-    }\n-\n-    let mut obligations: Vec<_> = result\n-        .obligations\n-        .iter()\n-        .filter(|obligation| {\n-            let bound_predicate = obligation.predicate.kind();\n-            match bound_predicate.skip_binder() {\n-                // We found a `T: Foo<X = U>` predicate, let's check\n-                // if `U` references any unresolved type\n-                // variables. In principle, we only care if this\n-                // projection can help resolve any of the type\n-                // variables found in `result.value` -- but we just\n-                // check for any type variables here, for fear of\n-                // indirect obligations (e.g., we project to `?0`,\n-                // but we have `T: Foo<X = ?1>` and `?1: Bar<X =\n-                // ?0>`).\n-                ty::PredicateKind::Projection(data) => {\n-                    infcx.unresolved_type_vars(&bound_predicate.rebind(data.ty)).is_some()\n-                }\n-\n-                // We are only interested in `T: Foo<X = U>` predicates, whre\n-                // `U` references one of `unresolved_type_vars`. =)\n-                _ => false,\n-            }\n-        })\n-        .cloned()\n-        .collect();\n-\n-    obligations.shrink_to_fit();\n-\n-    NormalizedTy { value: result.value, obligations }\n-}\n-\n /// If we are projecting `<T as Trait>::Item`, but `T: Trait` does not\n /// hold. In various error cases, we cannot generate a valid\n /// normalized projection. Therefore, we create an inference variable"}, {"sha": "032d402fec0459a6462054fab649ac0ec72be20f", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9ee9c342104880dd978e85260243d2dcedc9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9ee9c342104880dd978e85260243d2dcedc9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=f2d9ee9c342104880dd978e85260243d2dcedc9a", "patch": "@@ -71,7 +71,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         // Run canonical query. If overflow occurs, rerun from scratch but this time\n         // in standard trait query mode so that overflow is handled appropriately\n         // within `SelectionContext`.\n-        self.tcx.evaluate_obligation(c_pred)\n+        self.tcx.at(obligation.cause.span(self.tcx)).evaluate_obligation(c_pred)\n     }\n \n     // Helper function that canonicalizes and runs the query. If an"}, {"sha": "22013fb79cf797d3f68dd9d49a02331ee5e8b331", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9ee9c342104880dd978e85260243d2dcedc9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9ee9c342104880dd978e85260243d2dcedc9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f2d9ee9c342104880dd978e85260243d2dcedc9a", "patch": "@@ -682,7 +682,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         });\n \n-        debug!(?result);\n+        debug!(\"finished: {:?} from {:?}\", result, obligation);\n \n         result\n     }"}, {"sha": "a31c104d8f58bb4db302e43f000cbf9aa19b7126", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9ee9c342104880dd978e85260243d2dcedc9a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9ee9c342104880dd978e85260243d2dcedc9a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=f2d9ee9c342104880dd978e85260243d2dcedc9a", "patch": "@@ -30,10 +30,10 @@ note: ...which requires building MIR for `cycle1`...\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n+  --> $DIR/auto-trait-leak.rs:14:5\n    |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     send(cycle2().clone());\n+   |     ^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires computing type of `cycle2::{opaque#0}`...\n   --> $DIR/auto-trait-leak.rs:19:16\n@@ -66,10 +66,10 @@ note: ...which requires building MIR for `cycle2`...\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:19:1\n+  --> $DIR/auto-trait-leak.rs:20:5\n    |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     send(cycle1().clone());\n+   |     ^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n    = note: ...which again requires computing type of `cycle1::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module"}, {"sha": "88f0bd872535f004ce2063b3f28e287dbf9f4c65", "filename": "src/test/ui/traits/cycle-cache-err-60010.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9ee9c342104880dd978e85260243d2dcedc9a/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9ee9c342104880dd978e85260243d2dcedc9a/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs?ref=f2d9ee9c342104880dd978e85260243d2dcedc9a", "patch": "@@ -25,6 +25,7 @@ struct Runtime<DB: Database> {\n }\n struct SalsaStorage {\n     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n+    //~^ ERROR overflow evaluating the requirement `RootDatabase: SourceDatabase`\n }\n \n impl Database for RootDatabase {\n@@ -67,7 +68,6 @@ pub(crate) fn goto_implementation(db: &RootDatabase) -> u32 {\n     // we used to fail to report an error here because we got the\n     // caching wrong.\n     SourceDatabase::parse(db);\n-    //~^ ERROR overflow\n     22\n }\n "}, {"sha": "91c2bd6c3b225716c5f788d319149b33353277a0", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9ee9c342104880dd978e85260243d2dcedc9a/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9ee9c342104880dd978e85260243d2dcedc9a/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=f2d9ee9c342104880dd978e85260243d2dcedc9a", "patch": "@@ -1,32 +1,14 @@\n-error[E0275]: overflow evaluating the requirement `SalsaStorage: RefUnwindSafe`\n-  --> $DIR/cycle-cache-err-60010.rs:69:5\n+error[E0275]: overflow evaluating the requirement `RootDatabase: SourceDatabase`\n+  --> $DIR/cycle-cache-err-60010.rs:27:13\n    |\n-LL |     SourceDatabase::parse(db);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required because it appears within the type `*const SalsaStorage`\n-   = note: required because it appears within the type `Unique<SalsaStorage>`\n-   = note: required because it appears within the type `Box<SalsaStorage>`\n-note: required because it appears within the type `Runtime<RootDatabase>`\n-  --> $DIR/cycle-cache-err-60010.rs:23:8\n+note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n+  --> $DIR/cycle-cache-err-60010.rs:37:10\n    |\n-LL | struct Runtime<DB: Database> {\n-   |        ^^^^^^^\n-note: required because it appears within the type `RootDatabase`\n-  --> $DIR/cycle-cache-err-60010.rs:20:8\n-   |\n-LL | struct RootDatabase {\n-   |        ^^^^^^^^^^^^\n-note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n-  --> $DIR/cycle-cache-err-60010.rs:43:9\n-   |\n-LL | impl<T> SourceDatabase for T\n-   |         ^^^^^^^^^^^^^^     ^\n-note: required by `SourceDatabase::parse`\n-  --> $DIR/cycle-cache-err-60010.rs:14:5\n-   |\n-LL |     fn parse(&self) {\n-   |     ^^^^^^^^^^^^^^^\n+LL | impl<DB> Query<DB> for ParseQuery\n+   |          ^^^^^^^^^     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}