{"sha": "7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjFiZDg4YWNlMDA2YTViODViZmJjYmNiOWMyMTNlZGUzYTZmZDE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T21:05:04Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T21:05:04Z"}, "message": "Update existing usages", "tree": {"sha": "19a346aa7fc8d5391734a00edee9dc78607cc357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a346aa7fc8d5391734a00edee9dc78607cc357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "html_url": "https://github.com/rust-lang/rust/commit/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c20c44c922d548381bc4199be44c0b4f3e0c5af", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c20c44c922d548381bc4199be44c0b4f3e0c5af", "html_url": "https://github.com/rust-lang/rust/commit/2c20c44c922d548381bc4199be44c0b4f3e0c5af"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "27ed36ab98b0f21f4e6830c2490f342a15834f9c", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::ReEmpty |\n             ty::ReErased => {\n                 // replace all free regions with 'erased\n-                self.tcx().types.re_erased\n+                self.tcx().lifetimes.re_erased\n             }\n \n             ty::ReClosureBound(..) => {"}, {"sha": "bde2ed5e7ccb46e0600f1676706cf6500b087552", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -138,8 +138,8 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n     /// empty region. The `expansion` phase will grow this larger.\n     fn construct_var_data(&self, tcx: TyCtxt<'_, '_, 'tcx>) -> LexicalRegionResolutions<'tcx> {\n         LexicalRegionResolutions {\n-            error_region: tcx.types.re_static,\n-            values: IndexVec::from_elem_n(VarValue::Value(tcx.types.re_empty), self.num_vars())\n+            error_region: tcx.lifetimes.re_static,\n+            values: IndexVec::from_elem_n(VarValue::Value(tcx.lifetimes.re_empty), self.num_vars())\n         }\n     }\n \n@@ -266,7 +266,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n                 let b_universe = self.var_infos[b_vid].universe;\n                 if let ty::RePlaceholder(p) = lub {\n                     if b_universe.cannot_name(p.universe) {\n-                        lub = self.tcx().types.re_static;\n+                        lub = self.tcx().lifetimes.re_static;\n                     }\n                 }\n \n@@ -348,7 +348,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n                 // otherwise, we don't know what the free region is,\n                 // so we must conservatively say the LUB is static:\n-                tcx.types.re_static\n+                tcx.lifetimes.re_static\n             }\n \n             (&ReScope(a_id), &ReScope(b_id)) => {\n@@ -371,7 +371,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n             (&RePlaceholder(..), _) | (_, &RePlaceholder(..)) => if a == b {\n                 a\n             } else {\n-                tcx.types.re_static\n+                tcx.lifetimes.re_static\n             },\n         }\n     }\n@@ -598,7 +598,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n         for lower_bound in &lower_bounds {\n             let effective_lower_bound = if let ty::RePlaceholder(p) = lower_bound.region {\n                 if node_universe.cannot_name(p.universe) {\n-                    self.tcx().types.re_static\n+                    self.tcx().lifetimes.re_static\n                 } else {\n                     lower_bound.region\n                 }"}, {"sha": "b1d009146473fadf88066623b05ad755a02e766a", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -370,7 +370,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let least_region = least_region.unwrap_or(self.tcx.types.re_static);\n+        let least_region = least_region.unwrap_or(self.tcx.lifetimes.re_static);\n         debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n \n         // Require that the type `concrete_ty` outlives\n@@ -608,7 +608,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ReverseMapper<'cx, 'gcx, 'tcx>\n                         err.emit();\n                     }\n                 }\n-                self.tcx.types.re_empty\n+                self.tcx.lifetimes.re_empty\n             },\n         }\n     }"}, {"sha": "582c4de2e7c216ab87cc24af02f6405a7aa31aa6", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -435,7 +435,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n             hir::ExprKind::Match(ref discr, ref arms, _) => {\n                 let discr_cmt = Rc::new(return_if_err!(self.mc.cat_expr(&discr)));\n-                let r = self.tcx().types.re_empty;\n+                let r = self.tcx().lifetimes.re_empty;\n                 self.borrow_expr(&discr, r, ty::ImmBorrow, MatchDiscriminant);\n \n                 // treatment of the discriminant is handled while walking the arms."}, {"sha": "74a6d35da3bd4423cf8c917c12e291c49198bd0e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -966,7 +966,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // we can promote to a constant, otherwise equal to enclosing temp\n         // lifetime.\n         let re = if promotable {\n-            self.tcx.types.re_static\n+            self.tcx.lifetimes.re_static\n         } else {\n             self.temporary_scope(hir_id.local_id)\n         };"}, {"sha": "af16e055460a1a5d4e00adc8a6273769f1ff2059", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -787,7 +787,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         (None, Some(t_a)) => {\n                             select.infcx().register_region_obligation_with_cause(\n                                 t_a,\n-                                select.infcx().tcx.types.re_static,\n+                                select.infcx().tcx.lifetimes.re_static,\n                                 &dummy_cause,\n                             );\n                         }"}, {"sha": "e725ebb797e379af9076113c3a26ee6da943f190", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -359,7 +359,7 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                             // `for<'a> T: 'a where 'a not in T`, which we can treat as\n                             // `T: 'static`.\n                             Some(t_a) => {\n-                                let r_static = self.selcx.tcx().types.re_static;\n+                                let r_static = self.selcx.tcx().lifetimes.re_static;\n                                 if self.register_region_obligations {\n                                     self.selcx.infcx().register_region_obligation_with_cause(\n                                         t_a,"}, {"sha": "7f37350c6653e7a1202b13da760d61cebe5f6e56", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -1010,7 +1010,7 @@ fn vtable_methods<'a, 'tcx>(\n                 let substs = trait_ref.map_bound(|trait_ref|\n                     InternalSubsts::for_item(tcx, def_id, |param, _|\n                         match param.kind {\n-                            GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n+                            GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n                             GenericParamDefKind::Type { .. } |\n                             GenericParamDefKind::Const => {\n                                 trait_ref.substs[param.index as usize]"}, {"sha": "1f2d45a4e7ff7282d08b92d4ae1ee5315b4df954", "filename": "src/librustc/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferase_regions.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionEraserVisitor<'a, 'gcx, 't\n         // whenever a substitution occurs.\n         match *r {\n             ty::ReLateBound(..) => r,\n-            _ => self.tcx.types.re_erased\n+            _ => self.tcx.lifetimes.re_erased\n         }\n     }\n }"}, {"sha": "1bf22b08d06f48852f8c327bc06281d7016c4299", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -624,7 +624,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn erase_late_bound_regions<T>(self, value: &Binder<T>) -> T\n         where T : TypeFoldable<'tcx>\n     {\n-        self.replace_late_bound_regions(value, |_| self.types.re_erased).0\n+        self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0\n     }\n \n     /// Rewrite any late-bound regions so that they are anonymous. Region numbers are"}, {"sha": "d8ae9f38e715a1f467733e1ecf00f49596ff35dc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -1675,7 +1675,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                     let ptr_ty = if this.ty.is_unsafe_ptr() {\n                         tcx.mk_mut_ptr(nil)\n                     } else {\n-                        tcx.mk_mut_ref(tcx.types.re_static, nil)\n+                        tcx.mk_mut_ref(tcx.lifetimes.re_static, nil)\n                     };\n                     return cx.layout_of(ptr_ty).map_same(|mut ptr_layout| {\n                         ptr_layout.ty = this.ty;\n@@ -1688,7 +1688,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                     ty::Str => tcx.types.usize,\n                     ty::Dynamic(_, _) => {\n                         tcx.mk_imm_ref(\n-                            tcx.types.re_static,\n+                            tcx.lifetimes.re_static,\n                             tcx.mk_array(tcx.types.usize, 3),\n                         )\n                         /* FIXME: use actual fn pointers"}, {"sha": "86836434cf50ce38b7fb5422fd41637fe023ae0b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -601,7 +601,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> SubstsRef<'tcx> {\n         InternalSubsts::for_item(self, item_def_id, |param, _| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime => self.types.re_erased.into(),\n+                GenericParamDefKind::Lifetime => self.lifetimes.re_erased.into(),\n                 GenericParamDefKind::Type { .. } => {\n                     bug!(\"empty_substs_for_def_id: {:?} has type parameters\", item_def_id)\n                 }"}, {"sha": "1607a62920109a3c44b12520b113bb51cd42e5c2", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             }\n             Categorization::StaticItem |\n             Categorization::Deref(_, mc::UnsafePtr(..)) => {\n-                self.bccx.tcx.types.re_static\n+                self.bccx.tcx.lifetimes.re_static\n             }\n             Categorization::Deref(_, mc::BorrowedPtr(_, r)) => {\n                 r"}, {"sha": "1caafb014e012eddae13bf05aee2a7ab58617889", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -371,7 +371,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 (bx, OperandRef {\n                     val,\n                     layout: self.cx.layout_of(self.cx.tcx().mk_ref(\n-                        self.cx.tcx().types.re_erased,\n+                        self.cx.tcx().lifetimes.re_erased,\n                         ty::TypeAndMut { ty, mutbl: bk.to_mutbl_lossy() }\n                     )),\n                 })"}, {"sha": "87544754f5de98a97218ae238725eebefa1dd568", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -71,7 +71,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n             let origin = NLLRegionVariableOrigin::Existential;\n             self.infcx.next_nll_region_var(origin)\n         } else {\n-            self.infcx.tcx.types.re_erased\n+            self.infcx.tcx.lifetimes.re_erased\n         }\n     }\n \n@@ -82,7 +82,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n         if let Some(borrowck_context) = &mut self.borrowck_context {\n             borrowck_context.constraints.placeholder_region(self.infcx, placeholder)\n         } else {\n-            self.infcx.tcx.types.re_erased\n+            self.infcx.tcx.lifetimes.re_erased\n         }\n     }\n "}, {"sha": "e72cd2b7e1a66c42d8ff92de41e130e3e42c0f0d", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -224,7 +224,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n         closure_base_def_id: DefId,\n     ) -> IndexVec<RegionVid, ty::Region<'tcx>> {\n         let mut region_mapping = IndexVec::with_capacity(expected_num_vars);\n-        region_mapping.push(tcx.types.re_static);\n+        region_mapping.push(tcx.lifetimes.re_static);\n         tcx.for_each_free_region(&closure_substs, |fr| {\n             region_mapping.push(fr);\n         });\n@@ -542,7 +542,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             DefiningTy::FnDef(_, substs) | DefiningTy::Const(_, substs) => substs,\n         };\n \n-        let global_mapping = iter::once((gcx.types.re_static, fr_static));\n+        let global_mapping = iter::once((gcx.lifetimes.re_static, fr_static));\n         let subst_mapping = identity_substs\n             .regions()\n             .zip(fr_substs.regions().map(|r| r.to_region_vid()));"}, {"sha": "629aef56f5f19d579bda728ba2318691860458d0", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     BorrowKind::Shared => unpack!(block = this.as_read_only_place(block, arg)),\n                     _ => unpack!(block = this.as_place(block, arg)),\n                 };\n-                block.and(Rvalue::Ref(this.hir.tcx().types.re_erased, borrow_kind, arg_place))\n+                block.and(Rvalue::Ref(this.hir.tcx().lifetimes.re_erased, borrow_kind, arg_place))\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(block = this.as_operand(block, scope, lhs));\n@@ -572,7 +572,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             block,\n             source_info,\n             &Place::Base(PlaceBase::Local(temp)),\n-            Rvalue::Ref(this.hir.tcx().types.re_erased, borrow_kind, arg_place),\n+            Rvalue::Ref(this.hir.tcx().lifetimes.re_erased, borrow_kind, arg_place),\n         );\n \n         // In constants, temp_lifetime is None. We should not need to drop"}, {"sha": "51d5c96083d8f61b6b15b28b9a5278cae7242372", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -1295,7 +1295,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         all_fake_borrows.into_iter().map(|matched_place| {\n             let fake_borrow_deref_ty = matched_place.ty(&self.local_decls, tcx).ty;\n-            let fake_borrow_ty = tcx.mk_imm_ref(tcx.types.re_erased, fake_borrow_deref_ty);\n+            let fake_borrow_ty = tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);\n             let fake_borrow_temp = self.local_decls.push(\n                 LocalDecl::new_temp(fake_borrow_ty, temp_span)\n             );\n@@ -1443,7 +1443,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             debug!(\"Entering guard building context: {:?}\", guard_frame);\n             self.guard_context.push(guard_frame);\n \n-            let re_erased = tcx.types.re_erased;\n+            let re_erased = tcx.lifetimes.re_erased;\n             let scrutinee_source_info = self.source_info(scrutinee_span);\n             for &(place, temp) in fake_borrows {\n                 let borrow = Rvalue::Ref(\n@@ -1607,7 +1607,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // Assign each of the bindings. Since we are binding for a\n         // guard expression, this will never trigger moves out of the\n         // candidate.\n-        let re_erased = self.hir.tcx().types.re_erased;\n+        let re_erased = self.hir.tcx().lifetimes.re_erased;\n         for binding in bindings {\n             let source_info = self.source_info(binding.span);\n \n@@ -1659,7 +1659,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     ) where 'tcx: 'b {\n         debug!(\"bind_matched_candidate_for_arm_body(block={:?})\", block);\n \n-        let re_erased = self.hir.tcx().types.re_erased;\n+        let re_erased = self.hir.tcx().lifetimes.re_erased;\n         // Assign each of the bindings. This may trigger moves out of the candidate.\n         for binding in bindings {\n             let source_info = self.source_info(binding.span);\n@@ -1735,7 +1735,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // This variable isn't mutated but has a name, so has to be\n                 // immutable to avoid the unused mut lint.\n                 mutability: Mutability::Not,\n-                ty: tcx.mk_imm_ref(tcx.types.re_erased, var_ty),\n+                ty: tcx.mk_imm_ref(tcx.lifetimes.re_erased, var_ty),\n                 user_ty: UserTypeProjections::none(),\n                 name: Some(name),\n                 source_info,"}, {"sha": "a5834b02ffc82858719a3d0497442808a3dba797", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty.into()]);\n                     let method = self.hir.tcx().mk_const(method);\n \n-                    let re_erased = self.hir.tcx().types.re_erased;\n+                    let re_erased = self.hir.tcx().lifetimes.re_erased;\n                     // take the argument by reference\n                     let tam = ty::TypeAndMut {\n                         ty,"}, {"sha": "e3755e6999530e0e2a3181cd31a60537bd3cbd56", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -141,7 +141,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // then an unsafe coercion.\n             expr = Expr {\n                 temp_lifetime,\n-                ty: cx.tcx.mk_ref(cx.tcx.types.re_erased,\n+                ty: cx.tcx.mk_ref(cx.tcx.lifetimes.re_erased,\n                                   ty::TypeAndMut {\n                                     ty: expr.ty,\n                                     mutbl: m,"}, {"sha": "c656dabb24ace8c6d3792499e3a6ac6248c80ab2", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -1149,7 +1149,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                     let substs = InternalSubsts::for_item(tcx, method.def_id, |param, _| {\n                         match param.kind {\n-                            GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n+                            GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n                             GenericParamDefKind::Type { .. } |\n                             GenericParamDefKind::Const => {\n                                 trait_ref.substs[param.index as usize]"}, {"sha": "1bfcaea20349216538290c97f3ec2e28305372d7", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -465,7 +465,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n \n         let ref_loc = self.make_place(\n             Mutability::Not,\n-            tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n+            tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n                 ty,\n                 mutbl: hir::Mutability::MutImmutable,\n             })\n@@ -475,7 +475,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let statement = self.make_statement(\n             StatementKind::Assign(\n                 ref_loc.clone(),\n-                box Rvalue::Ref(tcx.types.re_erased, BorrowKind::Shared, src)\n+                box Rvalue::Ref(tcx.lifetimes.re_erased, BorrowKind::Shared, src)\n             )\n         );\n \n@@ -734,7 +734,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // let rcvr = &mut rcvr;\n             let ref_rcvr = local_decls.push(temp_decl(\n                 Mutability::Not,\n-                tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n+                tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n                     ty: sig.inputs()[0],\n                     mutbl: hir::Mutability::MutMutable\n                 }),\n@@ -747,7 +747,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 source_info,\n                 kind: StatementKind::Assign(\n                     Place::Base(PlaceBase::Local(ref_rcvr)),\n-                    box Rvalue::Ref(tcx.types.re_erased, borrow_kind, rcvr_l)\n+                    box Rvalue::Ref(tcx.lifetimes.re_erased, borrow_kind, rcvr_l)\n                 )\n             });\n             Operand::Move(Place::Base(PlaceBase::Local(ref_rcvr)))"}, {"sha": "e7e2887d92c8d0cdbb8e1d657204f8bb1b536cb8", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n     }\n \n     fn visit_region(&mut self, region: &mut ty::Region<'tcx>, _: Location) {\n-        *region = self.tcx.types.re_erased;\n+        *region = self.tcx.lifetimes.re_erased;\n     }\n \n     fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _: Location) {"}, {"sha": "dbeae4df7db8d12cf157dd283a7160160413b65f", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -458,7 +458,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 let dest = if dest_needs_borrow(&destination.0) {\n                     debug!(\"Creating temp for return destination\");\n                     let dest = Rvalue::Ref(\n-                        self.tcx.types.re_erased,\n+                        self.tcx.lifetimes.re_erased,\n                         BorrowKind::Mut { allow_two_phase_borrow: false },\n                         destination.0);\n "}, {"sha": "4ad0c324a43a94c97a9e672d02a3fc0859039de5", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -515,7 +515,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let ty = self.place_ty(self.place);\n         let substs = tcx.mk_substs_trait(ty, &[]);\n \n-        let ref_ty = tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n+        let ref_ty = tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n             ty,\n             mutbl: hir::Mutability::MutMutable\n         });\n@@ -525,7 +525,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let result = BasicBlockData {\n             statements: vec![self.assign(\n                 &Place::Base(PlaceBase::Local(ref_place)),\n-                Rvalue::Ref(tcx.types.re_erased,\n+                Rvalue::Ref(tcx.lifetimes.re_erased,\n                             BorrowKind::Mut { allow_two_phase_borrow: false },\n                             self.place.clone())\n             )],\n@@ -574,7 +574,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let move_ = |place: &Place<'tcx>| Operand::Move(place.clone());\n         let tcx = self.tcx();\n \n-        let ref_ty = tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n+        let ref_ty = tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n             ty: ety,\n             mutbl: hir::Mutability::MutMutable\n         });\n@@ -584,7 +584,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let one = self.constant_usize(1);\n         let (ptr_next, cur_next) = if ptr_based {\n             (Rvalue::Ref(\n-                tcx.types.re_erased,\n+                tcx.lifetimes.re_erased,\n                 BorrowKind::Mut { allow_two_phase_borrow: false },\n                 Place::Projection(Box::new(Projection {\n                     base: Place::Base(PlaceBase::Local(cur)),\n@@ -594,7 +594,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n              Rvalue::BinaryOp(BinOp::Offset, copy(&Place::Base(PlaceBase::Local(cur))), one))\n         } else {\n             (Rvalue::Ref(\n-                 tcx.types.re_erased,\n+                 tcx.lifetimes.re_erased,\n                  BorrowKind::Mut { allow_two_phase_borrow: false },\n                  self.place.clone().index(cur)),\n              Rvalue::BinaryOp(BinOp::Add, copy(&Place::Base(PlaceBase::Local(cur))), one))\n@@ -742,7 +742,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n             drop_block_stmts.push(self.assign(&tmp, Rvalue::Ref(\n-                tcx.types.re_erased,\n+                tcx.lifetimes.re_erased,\n                 BorrowKind::Mut { allow_two_phase_borrow: false },\n                 self.place.clone()\n             )));"}, {"sha": "98d72ee03d06e82393b8fb77991be7c0aac9735f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -112,7 +112,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n         let r = match tcx.named_region(lifetime.hir_id) {\n             Some(rl::Region::Static) => {\n-                tcx.types.re_static\n+                tcx.lifetimes.re_static\n             }\n \n             Some(rl::Region::LateBound(debruijn, id, _)) => {\n@@ -155,7 +155,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n                         // Supply some dummy value. We don't have an\n                         // `re_error`, annoyingly, so use `'static`.\n-                        tcx.types.re_static\n+                        tcx.lifetimes.re_static\n                     })\n             }\n         };\n@@ -633,7 +633,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             // Provide substitutions for parameters for which arguments are inferred.\n             |substs, param, infer_types| {\n                 match param.kind {\n-                    GenericParamDefKind::Lifetime => tcx.types.re_static.into(),\n+                    GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n                     GenericParamDefKind::Type { has_default, .. } => {\n                         if !infer_types && has_default {\n                             // No type parameter provided, but a default exists.\n@@ -1174,7 +1174,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                         span_err!(tcx.sess, span, E0228,\n                                   \"the lifetime bound for this object type cannot be deduced \\\n                                    from context; please supply an explicit bound\");\n-                        tcx.types.re_static\n+                        tcx.lifetimes.re_static\n                     })\n                 }\n             })\n@@ -1954,7 +1954,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 // Replace all parent lifetimes with 'static.\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n-                        tcx.types.re_static.into()\n+                        tcx.lifetimes.re_static.into()\n                     }\n                     _ => tcx.mk_param_from_def(param)\n                 }\n@@ -2074,7 +2074,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         // If any of the derived region bounds are 'static, that is always\n         // the best choice.\n         if derived_region_bounds.iter().any(|&r| ty::ReStatic == *r) {\n-            return Some(tcx.types.re_static);\n+            return Some(tcx.lifetimes.re_static);\n         }\n \n         // Determine whether there is exactly one unique region in the set"}, {"sha": "dc27e6e905f52b00b0bdbbd35b61cf6b7bf7ef26", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                         if let ty::Ref(_, r_ty, _) = expected_ty.sty {\n                             if let ty::Slice(_) = r_ty.sty {\n-                                pat_ty = tcx.mk_imm_ref(tcx.types.re_static,\n+                                pat_ty = tcx.mk_imm_ref(tcx.lifetimes.re_static,\n                                                         tcx.mk_slice(tcx.types.u8))\n                             }\n                         }"}, {"sha": "5a420c366159405facc7a38a05631339957a79c0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -1079,7 +1079,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n         // In general, during probing we erase regions. See\n         // `impl_self_ty()` for an explanation.\n-        let region = tcx.types.re_erased;\n+        let region = tcx.lifetimes.re_erased;\n \n         let autoref_ty = tcx.mk_ref(region,\n                                     ty::TypeAndMut {\n@@ -1545,7 +1545,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                         GenericParamDefKind::Lifetime => {\n                             // In general, during probe we erase regions. See\n                             // `impl_self_ty()` for an explanation.\n-                            self.tcx.types.re_erased.into()\n+                            self.tcx.lifetimes.re_erased.into()\n                         }\n                         GenericParamDefKind::Type { .. }\n                         | GenericParamDefKind::Const => {\n@@ -1566,7 +1566,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {\n         InternalSubsts::for_item(self.tcx, def_id, |param, _| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime => self.tcx.types.re_erased.into(),\n+                GenericParamDefKind::Lifetime => self.tcx.lifetimes.re_erased.into(),\n                 GenericParamDefKind::Type { .. } => {\n                     self.next_ty_var(TypeVariableOrigin::SubstitutionPlaceholder(\n                         self.tcx.def_span(def_id))).into()"}, {"sha": "08f6118c6e0ec9f4ab88105a7bbb610bf59ae1cf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -3088,7 +3088,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match lit.node {\n             ast::LitKind::Str(..) => tcx.mk_static_str(),\n             ast::LitKind::ByteStr(ref v) => {\n-                tcx.mk_imm_ref(tcx.types.re_static,\n+                tcx.mk_imm_ref(tcx.lifetimes.re_static,\n                                tcx.mk_array(tcx.types.u8, v.len() as u64))\n             }\n             ast::LitKind::Byte(_) => tcx.types.u8,"}, {"sha": "f8f3b473a1abdc62ad2e5c4cafba43ad77bc0529", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=7261bd88ace006a5b85bfbcbcb9c213ede3a6fd1", "patch": "@@ -817,7 +817,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Resolver<'cx, 'gcx, 'tcx> {\n     // FIXME This should be carefully checked\n     // We could use `self.report_error` but it doesn't accept a ty::Region, right now.\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        self.infcx.fully_resolve(&r).unwrap_or(self.tcx.types.re_static)\n+        self.infcx.fully_resolve(&r).unwrap_or(self.tcx.lifetimes.re_static)\n     }\n }\n "}]}