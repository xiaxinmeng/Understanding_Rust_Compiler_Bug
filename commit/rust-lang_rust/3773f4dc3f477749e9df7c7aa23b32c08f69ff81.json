{"sha": "3773f4dc3f477749e9df7c7aa23b32c08f69ff81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NzNmNGRjM2Y0Nzc3NDllOWRmN2M3YWEyM2IzMmMwOGY2OWZmODE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-26T19:31:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-27T23:28:00Z"}, "message": "Use thread-safe types for interners", "tree": {"sha": "93634a439402db33ffe591ab924102b7ac73c619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93634a439402db33ffe591ab924102b7ac73c619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3773f4dc3f477749e9df7c7aa23b32c08f69ff81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3773f4dc3f477749e9df7c7aa23b32c08f69ff81", "html_url": "https://github.com/rust-lang/rust/commit/3773f4dc3f477749e9df7c7aa23b32c08f69ff81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3773f4dc3f477749e9df7c7aa23b32c08f69ff81/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70de2e8ad6484c4951c7515e78843d242ea71f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/70de2e8ad6484c4951c7515e78843d242ea71f82", "html_url": "https://github.com/rust-lang/rust/commit/70de2e8ad6484c4951c7515e78843d242ea71f82"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "d55145fba38809d6b726a2f827f16c1cd32a6a0d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3773f4dc3f477749e9df7c7aa23b32c08f69ff81/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3773f4dc3f477749e9df7c7aa23b32c08f69ff81/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3773f4dc3f477749e9df7c7aa23b32c08f69ff81", "patch": "@@ -57,7 +57,7 @@ use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n                                            StableVec};\n use arena::{TypedArena, DroplessArena};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, Lock};\n use std::any::Any;\n use std::borrow::Borrow;\n use std::cell::{Cell, RefCell};\n@@ -130,28 +130,28 @@ pub struct CtxtInterners<'tcx> {\n \n     /// Specifically use a speedy hash algorithm for these hash sets,\n     /// they're accessed quite often.\n-    type_: RefCell<FxHashSet<Interned<'tcx, TyS<'tcx>>>>,\n-    type_list: RefCell<FxHashSet<Interned<'tcx, Slice<Ty<'tcx>>>>>,\n-    substs: RefCell<FxHashSet<Interned<'tcx, Substs<'tcx>>>>,\n-    canonical_var_infos: RefCell<FxHashSet<Interned<'tcx, Slice<CanonicalVarInfo>>>>,\n-    region: RefCell<FxHashSet<Interned<'tcx, RegionKind>>>,\n-    existential_predicates: RefCell<FxHashSet<Interned<'tcx, Slice<ExistentialPredicate<'tcx>>>>>,\n-    predicates: RefCell<FxHashSet<Interned<'tcx, Slice<Predicate<'tcx>>>>>,\n-    const_: RefCell<FxHashSet<Interned<'tcx, Const<'tcx>>>>,\n+    type_: Lock<FxHashSet<Interned<'tcx, TyS<'tcx>>>>,\n+    type_list: Lock<FxHashSet<Interned<'tcx, Slice<Ty<'tcx>>>>>,\n+    substs: Lock<FxHashSet<Interned<'tcx, Substs<'tcx>>>>,\n+    canonical_var_infos: Lock<FxHashSet<Interned<'tcx, Slice<CanonicalVarInfo>>>>,\n+    region: Lock<FxHashSet<Interned<'tcx, RegionKind>>>,\n+    existential_predicates: Lock<FxHashSet<Interned<'tcx, Slice<ExistentialPredicate<'tcx>>>>>,\n+    predicates: Lock<FxHashSet<Interned<'tcx, Slice<Predicate<'tcx>>>>>,\n+    const_: Lock<FxHashSet<Interned<'tcx, Const<'tcx>>>>,\n }\n \n impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n     fn new(arena: &'tcx DroplessArena) -> CtxtInterners<'tcx> {\n         CtxtInterners {\n-            arena,\n-            type_: RefCell::new(FxHashSet()),\n-            type_list: RefCell::new(FxHashSet()),\n-            substs: RefCell::new(FxHashSet()),\n-            region: RefCell::new(FxHashSet()),\n-            existential_predicates: RefCell::new(FxHashSet()),\n-            canonical_var_infos: RefCell::new(FxHashSet()),\n-            predicates: RefCell::new(FxHashSet()),\n-            const_: RefCell::new(FxHashSet()),\n+            arena: arena,\n+            type_: Lock::new(FxHashSet()),\n+            type_list: Lock::new(FxHashSet()),\n+            substs: Lock::new(FxHashSet()),\n+            canonical_var_infos: Lock::new(FxHashSet()),\n+            region: Lock::new(FxHashSet()),\n+            existential_predicates: Lock::new(FxHashSet()),\n+            predicates: Lock::new(FxHashSet()),\n+            const_: Lock::new(FxHashSet()),\n         }\n     }\n \n@@ -891,11 +891,11 @@ pub struct GlobalCtxt<'tcx> {\n     /// by `proc-macro` crates.\n     pub derive_macros: RefCell<NodeMap<Symbol>>,\n \n-    stability_interner: RefCell<FxHashSet<&'tcx attr::Stability>>,\n+    stability_interner: Lock<FxHashSet<&'tcx attr::Stability>>,\n \n     pub interpret_interner: InterpretInterner<'tcx>,\n \n-    layout_interner: RefCell<FxHashSet<&'tcx LayoutDetails>>,\n+    layout_interner: Lock<FxHashSet<&'tcx LayoutDetails>>,\n \n     /// A vector of every trait accessible in the whole crate\n     /// (i.e. including those from subcrates). This is used only for\n@@ -917,7 +917,7 @@ pub struct GlobalCtxt<'tcx> {\n /// Everything needed to efficiently work with interned allocations\n #[derive(Debug, Default)]\n pub struct InterpretInterner<'tcx> {\n-    inner: RefCell<InterpretInternerInner<'tcx>>,\n+    inner: Lock<InterpretInternerInner<'tcx>>,\n }\n \n #[derive(Debug, Default)]\n@@ -1277,10 +1277,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             evaluation_cache: traits::EvaluationCache::new(),\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n-            layout_interner: RefCell::new(FxHashSet()),\n+            layout_interner: Lock::new(FxHashSet()),\n             layout_depth: Cell::new(0),\n             derive_macros: RefCell::new(NodeMap()),\n-            stability_interner: RefCell::new(FxHashSet()),\n+            stability_interner: Lock::new(FxHashSet()),\n             interpret_interner: Default::default(),\n             all_traits: RefCell::new(None),\n             tx_to_llvm_workers: tx,"}]}