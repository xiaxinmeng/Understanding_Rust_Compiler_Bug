{"sha": "a5328bc17b8d18083478554b3381d55183647f15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MzI4YmMxN2I4ZDE4MDgzNDc4NTU0YjMzODFkNTUxODM2NDdmMTU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-27T20:54:10Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:21:52Z"}, "message": "Simply joint lifetime/type iteration", "tree": {"sha": "5bda15e6c7620f1edc09254dd5283c2822b35cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bda15e6c7620f1edc09254dd5283c2822b35cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5328bc17b8d18083478554b3381d55183647f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5328bc17b8d18083478554b3381d55183647f15", "html_url": "https://github.com/rust-lang/rust/commit/a5328bc17b8d18083478554b3381d55183647f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5328bc17b8d18083478554b3381d55183647f15/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "html_url": "https://github.com/rust-lang/rust/commit/8bccfe7a526bb03fd656a194a03f6850e16bc4c6"}], "stats": {"total": 339, "additions": 122, "deletions": 217}, "files": [{"sha": "135403c9c2798c4007619356ec6d755e97a3a7d1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -449,12 +449,6 @@ pub type TyParamBounds = HirVec<TyParamBound>;\n pub enum GenericParamKind {\n     /// A lifetime definition, eg `'a: 'b + 'c + 'd`.\n     Lifetime {\n-        /// Either \"'a\", referring to a named lifetime definition,\n-        /// or \"\" (aka keywords::Invalid), for elision placeholders.\n-        ///\n-        /// HIR lowering inserts these placeholders in type paths that\n-        /// refer to type definitions needing lifetime parameters,\n-        /// `&T` and `&mut T`, and trait objects without `... + 'a`.\n         name: LifetimeName,\n         bounds: HirVec<Lifetime>,\n         // Indicates that the lifetime definition was synthetically added"}, {"sha": "453500d5ab7bd4d6a8cfd010d8130cdad8581d5d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -934,10 +934,7 @@ fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n         sig.push_str(&generics\n             .params\n             .iter()\n-            .map(|param| match param.kind {\n-                ast::GenericParamKind::Lifetime { .. } => param.ident.name.to_string(),\n-                ast::GenericParamKind::Type { .. } => param.ident.to_string(),\n-            })\n+            .map(|param| param.ident.to_string())\n             .collect::<Vec<_>>()\n             .join(\", \"));\n         sig.push_str(\"> \");"}, {"sha": "7cd71518bed529fe74f980afd289b49835da321e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -996,22 +996,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     pub fn prohibit_type_params(&self, segments: &[hir::PathSegment]) {\n         for segment in segments {\n             segment.with_generic_args(|generic_args| {\n-                let mut err_for_lifetime = false;\n-                let mut err_for_type = false;\n+                let (mut err_for_lt, mut err_for_ty) = (false, false);\n                 for arg in &generic_args.args {\n                     let (mut span_err, span, kind) = match arg {\n                         hir::GenericArg::Lifetime(lt) => {\n-                            if err_for_lifetime { continue }\n-                            err_for_lifetime = true;\n+                            if err_for_lt { continue }\n+                            err_for_lt = true;\n                             (struct_span_err!(self.tcx().sess, lt.span, E0110,\n                                             \"lifetime parameters are not allowed on \\\n                                                 this type\"),\n                              lt.span,\n                              \"lifetime\")\n                         }\n                         hir::GenericArg::Type(ty) => {\n-                            if err_for_type { continue }\n-                            err_for_type = true;\n+                            if err_for_ty { continue }\n+                            err_for_ty = true;\n                             (struct_span_err!(self.tcx().sess, ty.span, E0109,\n                                             \"type parameters are not allowed on this type\"),\n                              ty.span,\n@@ -1020,7 +1019,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     };\n                     span_err.span_label(span, format!(\"{} parameter not allowed\", kind))\n                             .emit();\n-                    if err_for_lifetime && err_for_type {\n+                    if err_for_lt && err_for_ty {\n                         break;\n                     }\n                 }"}, {"sha": "36ce01bcd08b30cd266aa242a1c68fede31fae50", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -329,46 +329,32 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             if i < parent_substs.len() {\n                 parent_substs[i]\n             } else {\n-                match param.kind {\n-                    GenericParamDefKind::Lifetime => {\n-                        if let Some(lifetime) = provided.as_ref().and_then(|data| {\n-                            for arg in &data.args {\n-                                match arg {\n-                                    GenericArg::Lifetime(lt) => {\n-                                        if i == parent_substs.len() {\n-                                            return Some(lt);\n-                                        }\n-                                        i -= 1;\n-                                    }\n-                                    _ => {}\n+                let (is_lt, is_ty) = match param.kind {\n+                    GenericParamDefKind::Lifetime => (true, false),\n+                    GenericParamDefKind::Type { .. } => (false, true),\n+                };\n+                provided.as_ref().and_then(|data| {\n+                    for arg in &data.args {\n+                        match arg {\n+                            GenericArg::Lifetime(lt) if is_lt => {\n+                                if i == parent_substs.len() {\n+                                    return Some(AstConv::ast_region_to_region(\n+                                        self.fcx, lt, Some(param)).into());\n                                 }\n+                                i -= 1;\n                             }\n-                            None\n-                        }) {\n-                            return AstConv::ast_region_to_region(\n-                                self.fcx, lifetime, Some(param)).into();\n-                        }\n-                    }\n-                    GenericParamDefKind::Type {..} => {\n-                        if let Some(ast_ty) = provided.as_ref().and_then(|data| {\n-                            for arg in &data.args {\n-                                match arg {\n-                                    GenericArg::Type(ty) => {\n-                                        if i == parent_substs.len() + own_counts.lifetimes {\n-                                            return Some(ty);\n-                                        }\n-                                        i -= 1;\n-                                    }\n-                                    _ => {}\n+                            GenericArg::Lifetime(_) => {}\n+                            GenericArg::Type(ty) if is_ty => {\n+                                if i == parent_substs.len() + own_counts.lifetimes {\n+                                    return Some(self.to_ty(ty).into());\n                                 }\n+                                i -= 1;\n                             }\n-                            None\n-                        }) {\n-                            return self.to_ty(ast_ty).into();\n+                            GenericArg::Type(_) => {}\n                         }\n                     }\n-                }\n-                self.var_for_def(self.span, param)\n+                    None\n+                }).unwrap_or_else(|| self.var_for_def(self.span, param))\n             }\n         })\n     }"}, {"sha": "036c0aa442e566d76675733ab20aa9274b9d08f5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 40, "deletions": 49, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -4977,8 +4977,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 s.args.as_ref().map_or(\n                     (vec![], vec![], s.infer_types, &[][..]),\n                     |data| {\n-                        let mut lifetimes = vec![];\n-                        let mut types = vec![];\n+                        let (mut lifetimes, mut types) = (vec![], vec![]);\n                         data.args.iter().for_each(|arg| match arg {\n                             GenericArg::Lifetime(lt) => lifetimes.push(lt),\n                             GenericArg::Type(ty) => types.push(ty),\n@@ -4987,14 +4986,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 )\n             });\n-        let infer_lifetimes = lifetimes.len() == 0;\n-\n-        let count_lifetime_params = |n| {\n-            format!(\"{} lifetime parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n-        };\n-        let count_type_params = |n| {\n-            format!(\"{} type parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n-        };\n \n         // Check provided parameters.\n         let ((ty_required, ty_accepted), lt_accepted) =\n@@ -5008,9 +4999,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let mut ty_params = ParamRange { required: 0, accepted: 0 };\n                 for param in &generics.params {\n                     match param.kind {\n-                        GenericParamDefKind::Lifetime => {\n-                            lt_accepted += 1;\n-                        }\n+                        GenericParamDefKind::Lifetime => lt_accepted += 1,\n                         GenericParamDefKind::Type { has_default, .. } => {\n                             ty_params.accepted += 1;\n                             if !has_default {\n@@ -5027,36 +5016,37 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 ((ty_params.required, ty_params.accepted), lt_accepted)\n             });\n \n-        if types.len() > ty_accepted {\n-            let span = types[ty_accepted].span;\n-            let expected_text = count_type_params(ty_accepted);\n-            let actual_text = count_type_params(types.len());\n-            struct_span_err!(self.tcx.sess, span, E0087,\n-                             \"too many type parameters provided: \\\n-                              expected at most {}, found {}\",\n-                             expected_text, actual_text)\n-                .span_label(span, format!(\"expected {}\", expected_text))\n-                .emit();\n-\n+        let count_type_params = |n| {\n+            format!(\"{} type parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n+        };\n+        let expected_text = count_type_params(ty_accepted);\n+        let actual_text = count_type_params(types.len());\n+        if let Some((mut err, span)) = if types.len() > ty_accepted {\n             // To prevent derived errors to accumulate due to extra\n             // type parameters, we force instantiate_value_path to\n             // use inference variables instead of the provided types.\n             *segment = None;\n+            let span = types[ty_accepted].span;\n+            Some((struct_span_err!(self.tcx.sess, span, E0087,\n+                                  \"too many type parameters provided: \\\n+                                  expected at most {}, found {}\",\n+                                  expected_text, actual_text), span))\n         } else if types.len() < ty_required && !infer_types && !supress_mismatch_error {\n-            let expected_text = count_type_params(ty_required);\n-            let actual_text = count_type_params(types.len());\n-            struct_span_err!(self.tcx.sess, span, E0089,\n-                             \"too few type parameters provided: \\\n-                              expected {}, found {}\",\n-                             expected_text, actual_text)\n-                .span_label(span, format!(\"expected {}\", expected_text))\n-                .emit();\n+            Some((struct_span_err!(self.tcx.sess, span, E0089,\n+                                  \"too few type parameters provided: \\\n+                                  expected {}, found {}\",\n+                                  expected_text, actual_text), span))\n+        } else {\n+            None\n+        } {\n+            err.span_label(span, format!(\"expected {}\", expected_text)).emit();\n         }\n \n         if !bindings.is_empty() {\n             AstConv::prohibit_projection(self, bindings[0].span);\n         }\n \n+        let infer_lifetimes = lifetimes.len() == 0;\n         // Prohibit explicit lifetime arguments if late bound lifetime parameters are present.\n         let has_late_bound_lifetime_defs =\n             segment.map_or(None, |(_, generics)| generics.has_late_bound_regions);\n@@ -5080,25 +5070,26 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             return;\n         }\n \n-        if lifetimes.len() > lt_accepted {\n+        let count_lifetime_params = |n| {\n+            format!(\"{} lifetime parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n+        };\n+        let expected_text = count_lifetime_params(lt_accepted);\n+        let actual_text = count_lifetime_params(lifetimes.len());\n+        if let Some((mut err, span)) = if lifetimes.len() > lt_accepted {\n             let span = lifetimes[lt_accepted].span;\n-            let expected_text = count_lifetime_params(lt_accepted);\n-            let actual_text = count_lifetime_params(lifetimes.len());\n-            struct_span_err!(self.tcx.sess, span, E0088,\n-                             \"too many lifetime parameters provided: \\\n-                              expected at most {}, found {}\",\n-                             expected_text, actual_text)\n-                .span_label(span, format!(\"expected {}\", expected_text))\n-                .emit();\n+            Some((struct_span_err!(self.tcx.sess, span, E0088,\n+                                  \"too many lifetime parameters provided: \\\n+                                  expected at most {}, found {}\",\n+                                  expected_text, actual_text), span))\n         } else if lifetimes.len() < lt_accepted && !infer_lifetimes {\n-            let expected_text = count_lifetime_params(lt_accepted);\n-            let actual_text = count_lifetime_params(lifetimes.len());\n-            struct_span_err!(self.tcx.sess, span, E0090,\n-                             \"too few lifetime parameters provided: \\\n-                              expected {}, found {}\",\n-                             expected_text, actual_text)\n-                .span_label(span, format!(\"expected {}\", expected_text))\n-                .emit();\n+            Some((struct_span_err!(self.tcx.sess, span, E0090,\n+                                  \"too few lifetime parameters provided: \\\n+                                  expected {}, found {}\",\n+                                  expected_text, actual_text), span))\n+        } else {\n+            None\n+        } {\n+            err.span_label(span, format!(\"expected {}\", expected_text)).emit();\n         }\n     }\n "}, {"sha": "f8f0126279087b8061cf8fac375df15bb2d0ab2c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -660,15 +660,12 @@ fn report_bivariance<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n     let generics = tcx.generics_of(def_id);\n     let parent = tcx.generics_of(generics.parent.unwrap());\n-    let impl_params: FxHashMap<_, _> =\n-        parent.params.iter()\n-                     .flat_map(|param| match param.kind {\n-                         GenericParamDefKind::Lifetime => None,\n-                         GenericParamDefKind::Type {..} => Some((param.name, param.def_id)),\n-                     })\n-                     .collect();\n-\n-    for method_param in generics.params.iter() {\n+    let impl_params: FxHashMap<_, _> = parent.params.iter().flat_map(|param| match param.kind {\n+        GenericParamDefKind::Lifetime => None,\n+        GenericParamDefKind::Type {..} => Some((param.name, param.def_id)),\n+    }).collect();\n+\n+    for method_param in &generics.params {\n         match method_param.kind {\n             // Shadowing is checked in resolve_lifetime.\n             GenericParamDefKind::Lifetime => continue,"}, {"sha": "5a442881a631582a539d625c0141ada151845590", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -35,13 +35,8 @@ impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n \n             Some(trait_ref) => {\n                 let trait_def = self.tcx.trait_def(trait_ref.def_id);\n-                let unsafe_attr = impl_generics.and_then(|g| {\n-                    for param in &g.params {\n-                        if param.pure_wrt_drop {\n-                            return Some(\"may_dangle\");\n-                        }\n-                    }\n-                    None\n+                let unsafe_attr = impl_generics.and_then(|generics| {\n+                    generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\")\n                 });\n                 match (trait_def.unsafety, unsafe_attr, unsafety, polarity) {\n                     (Unsafety::Normal, None, Unsafety::Unsafe, hir::ImplPolarity::Positive) => {"}, {"sha": "2e4ceb5a65c9981fd2bb4a526ed55653bea89ac9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -117,12 +117,11 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n         for param in &generics.params {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n-                hir::GenericParamKind::Type { ref default, .. } => {\n-                    if default.is_some() {\n-                        let def_id = self.tcx.hir.local_def_id(param.id);\n-                        self.tcx.type_of(def_id);\n-                    }\n+                hir::GenericParamKind::Type { ref default, .. } if default.is_some() => {\n+                    let def_id = self.tcx.hir.local_def_id(param.id);\n+                    self.tcx.type_of(def_id);\n                 }\n+                hir::GenericParamKind::Type { .. } => {}\n             }\n         }\n         intravisit::walk_generics(self, generics);\n@@ -316,11 +315,8 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n         let from_ty_params =\n             ast_generics.params.iter()\n                 .filter_map(|param| match param.kind {\n-                    GenericParamKind::Type { ref bounds, .. } => {\n-                        if param.id == param_id {\n-                            return Some(bounds);\n-                        }\n-                        None\n+                    GenericParamKind::Type { ref bounds, .. } if param.id == param_id => {\n+                        Some(bounds)\n                     }\n                     _ => None\n                 })\n@@ -1470,11 +1466,8 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            .to_ty(tcx);\n                 index += 1;\n \n-                let bounds = compute_bounds(&icx,\n-                                            param_ty,\n-                                            bounds,\n-                                            SizedByDefault::Yes,\n-                                            param.span);\n+                let bounds =\n+                    compute_bounds(&icx, param_ty, bounds, SizedByDefault::Yes, param.span);\n                 predicates.extend(bounds.predicates(tcx, param_ty));\n             }\n             _ => {}"}, {"sha": "3f7e3529e9648f713430dd29216aec29ab623802", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -1501,12 +1501,12 @@ struct Foo {\n \"##,\n \n E0131: r##\"\n-It is not possible to define `main` with type parameters, or even with function\n-parameters. When `main` is present, it must take no arguments and return `()`.\n+It is not possible to define `main` with generic parameters.\n+When `main` is present, it must take no arguments and return `()`.\n Erroneous code example:\n \n ```compile_fail,E0131\n-fn main<T>() { // error: main function is not allowed to have type parameters\n+fn main<T>() { // error: main function is not allowed to have generic parameters\n }\n ```\n \"##,"}, {"sha": "dcc5fa53d2f420f9c0e75c6cc0464d00b1f37781", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -191,16 +191,9 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         hir::ItemFn(.., ref generics, _) => {\n                             let mut error = false;\n                             if !generics.params.is_empty() {\n-                                let param_type = if generics.is_lt_parameterized() {\n-                                    \"lifetime\"\n-                                } else {\n-                                    \"type\"\n-                                };\n-                                let msg =\n-                                    format!(\"`main` function is not allowed to have {} parameters\",\n-                                            param_type);\n-                                let label =\n-                                    format!(\"`main` cannot have {} parameters\", param_type);\n+                                let msg = format!(\"`main` function is not allowed to have generic \\\n+                                                   parameters\");\n+                                let label = format!(\"`main` cannot have generic parameters\");\n                                 struct_span_err!(tcx.sess, generics.span, E0131, \"{}\", msg)\n                                     .span_label(generics.span, label)\n                                     .emit();"}, {"sha": "89835ab6aaef06e3ae1eb393592cd97edc7c2e64", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -3540,27 +3540,23 @@ impl Clean<GenericArgs> for hir::GenericArgs {\n                 output: if output != Type::Tuple(Vec::new()) { Some(output) } else { None }\n             }\n         } else {\n-            let mut lifetimes = vec![];\n-            let mut types = vec![];\n+            let (mut lifetimes, mut types) = (vec![], vec![]);\n             let mut elided_lifetimes = true;\n             for arg in &self.args {\n                 match arg {\n-                    GenericArg::Lifetime(lt) if elided_lifetimes => {\n-                        if lt.is_elided() {\n+                    GenericArg::Lifetime(lt) => {\n+                        if !lt.is_elided() {\n                             elided_lifetimes = false;\n-                            lifetimes = vec![];\n-                            continue;\n                         }\n                         lifetimes.push(lt.clean(cx));\n                     }\n-                    GenericArg::Lifetime(_) => {}\n                     GenericArg::Type(ty) => {\n                         types.push(ty.clean(cx));\n                     }\n                 }\n             }\n             GenericArgs::AngleBracketed {\n-                lifetimes,\n+                lifetimes: if elided_lifetimes { vec![] } else { lifetimes },\n                 types,\n                 bindings: self.bindings.clean(cx),\n             }"}, {"sha": "e12369a522da7204262c18d8fccecebd795520f0", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -136,7 +136,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n-            GenericArg::Type(ty)     => self.visit_ty(ty),\n+            GenericArg::Type(ty) => self.visit_ty(ty),\n         }\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'ast TypeBinding) {"}, {"sha": "1024d445cdb96933509d3ba6a797b85d70d32d7a", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -665,35 +665,18 @@ impl<'a> TraitDef<'a> {\n         // Create the reference to the trait.\n         let trait_ref = cx.trait_ref(trait_path);\n \n-        // Create the type parameters on the `self` path.\n-        let self_ty_params: Vec<P<ast::Ty>> = generics.params\n-            .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Type { .. } => Some(cx.ty_ident(self.span, param.ident)),\n-                _ => None,\n-            })\n-            .collect();\n-\n-        let self_lifetimes: Vec<ast::Lifetime> = generics.params\n-            .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { ref lifetime, .. } => Some(*lifetime),\n-                _ => None,\n-            })\n-            .collect();\n-\n-        let self_params = self_lifetimes.into_iter()\n-                                        .map(|lt| GenericArg::Lifetime(lt))\n-                                        .chain(self_ty_params.into_iter().map(|ty|\n-                                            GenericArg::Type(ty)))\n-                                        .collect();\n+        let self_params: Vec<_> = generics.params.iter().map(|param| match param.kind {\n+            GenericParamKind::Lifetime { ref lifetime, .. } => {\n+                GenericArg::Lifetime(*lifetime)\n+            }\n+            GenericParamKind::Type { .. } => {\n+                GenericArg::Type(cx.ty_ident(self.span, param.ident))\n+            }\n+        }).collect();\n \n         // Create the type of `self`.\n-        let self_type = cx.ty_path(cx.path_all(self.span,\n-                                               false,\n-                                               vec![type_ident],\n-                                               self_params,\n-                                               Vec::new()));\n+        let path = cx.path_all(self.span, false, vec![type_ident], self_params, vec![]);\n+        let self_type = cx.ty_path(path);\n \n         let attr = cx.attribute(self.span,\n                                 cx.meta_word(self.span,"}, {"sha": "127ed62b8c59d6fd5ceb35f6cd1fd45c123c2475", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -185,41 +185,22 @@ impl<'a> Ty<'a> {\n                    cx: &ExtCtxt,\n                    span: Span,\n                    self_ty: Ident,\n-                   self_generics: &Generics)\n+                   generics: &Generics)\n                    -> ast::Path {\n         match *self {\n             Self_ => {\n-                let ty_params: Vec<P<ast::Ty>> = self_generics.params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Type { .. } => {\n-                            Some(cx.ty_ident(span, param.ident))\n-                        }\n-                        _ => None,\n-                    })\n-                    .collect();\n-\n-                let lifetimes: Vec<ast::Lifetime> = self_generics.params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { ref lifetime, .. } => Some(*lifetime),\n-                        _ => None,\n-                    })\n-                    .collect();\n-\n-                let params = lifetimes.into_iter()\n-                                      .map(|lt| GenericArg::Lifetime(lt))\n-                                      .chain(ty_params.into_iter().map(|ty|\n-                                            GenericArg::Type(ty)))\n-                                      .collect();\n+                let params: Vec<_> = generics.params.iter().map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { ref lifetime, .. } => {\n+                        GenericArg::Lifetime(*lifetime)\n+                    }\n+                    GenericParamKind::Type { .. } => {\n+                        GenericArg::Type(cx.ty_ident(span, param.ident))\n+                    }\n+                }).collect();\n \n-                cx.path_all(span,\n-                            false,\n-                            vec![self_ty],\n-                            params,\n-                            Vec::new())\n+                cx.path_all(span, false, vec![self_ty], params, vec![])\n             }\n-            Literal(ref p) => p.to_path(cx, span, self_ty, self_generics),\n+            Literal(ref p) => p.to_path(cx, span, self_ty, generics),\n             Ptr(..) => cx.span_bug(span, \"pointer in a path in generic `derive`\"),\n             Tuple(..) => cx.span_bug(span, \"tuple in a path in generic `derive`\"),\n         }"}, {"sha": "bbc5b03d6885eaa3f1a69cf2119b7d12f3550827", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -43,7 +43,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n                                                      cx.ty_ident(sp, Ident::from_str(\"str\")),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable))],\n-                                     Vec::new()))\n+                                     vec![]))\n         }\n         Ok(s) => {\n             cx.expr_call_global(sp,"}, {"sha": "ccdd9db25c40a0b2e8d10b6de52ad49fda78bd1f", "filename": "src/test/compile-fail/issue-1900.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: `main` function is not allowed to have type parameters\n+// error-pattern: `main` function is not allowed to have generic parameters\n fn main<T>() { }"}, {"sha": "46bc872746cc32492d16ccd787bf2afdd5ae6f91", "filename": "src/test/ui/error-codes/E0131.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -1,8 +1,8 @@\n-error[E0131]: `main` function is not allowed to have type parameters\n+error[E0131]: `main` function is not allowed to have generic parameters\n   --> $DIR/E0131.rs:11:8\n    |\n LL | fn main<T>() {\n-   |        ^^^ `main` cannot have type parameters\n+   |        ^^^ `main` cannot have generic parameters\n \n error: aborting due to previous error\n "}, {"sha": "831c3e5fda084c560f01c0676303e1ea99a85ad4", "filename": "src/test/ui/issue-51022.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Ftest%2Fui%2Fissue-51022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Ftest%2Fui%2Fissue-51022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51022.rs?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main<'a>() { }\n-    //~^ ERROR `main` function is not allowed to have lifetime parameters [E0131]\n+    //~^ ERROR `main` function is not allowed to have generic parameters [E0131]"}, {"sha": "1daa8dfbba689ec3b55edc3daf15dbf6da8f8932", "filename": "src/test/ui/issue-51022.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5328bc17b8d18083478554b3381d55183647f15/src%2Ftest%2Fui%2Fissue-51022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5328bc17b8d18083478554b3381d55183647f15/src%2Ftest%2Fui%2Fissue-51022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51022.stderr?ref=a5328bc17b8d18083478554b3381d55183647f15", "patch": "@@ -1,8 +1,8 @@\n-error[E0131]: `main` function is not allowed to have lifetime parameters\n+error[E0131]: `main` function is not allowed to have generic parameters\n   --> $DIR/issue-51022.rs:11:8\n    |\n LL | fn main<'a>() { }\n-   |        ^^^^ `main` cannot have lifetime parameters\n+   |        ^^^^ `main` cannot have generic parameters\n \n error: aborting due to previous error\n "}]}