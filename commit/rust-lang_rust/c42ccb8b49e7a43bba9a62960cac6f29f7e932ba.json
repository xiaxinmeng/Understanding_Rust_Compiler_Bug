{"sha": "c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MmNjYjhiNDllN2E0M2JiYTlhNjI5NjBjYWM2ZjI5ZjdlOTMyYmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-16T03:11:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-16T03:11:47Z"}, "message": "Auto merge of #30896 - petrochenkov:vkindmeta, r=alexcrichton\n\nAlso add tests for use of empty structs in cross-crate scenarios\n\nSome tests are commented out, they depend on fixes from  https://github.com/rust-lang/rust/pull/30882", "tree": {"sha": "5f57bc8aa5aabf2f1b3ebd814f05d37ce3d22d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f57bc8aa5aabf2f1b3ebd814f05d37ce3d22d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "html_url": "https://github.com/rust-lang/rust/commit/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e4ecc52267f35ae5f846e9e65e5fe83fc6b7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e4ecc52267f35ae5f846e9e65e5fe83fc6b7be", "html_url": "https://github.com/rust-lang/rust/commit/e7e4ecc52267f35ae5f846e9e65e5fe83fc6b7be"}, {"sha": "ccb4b35897c0356bb397fe045fa23ddbce9fc134", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb4b35897c0356bb397fe045fa23ddbce9fc134", "html_url": "https://github.com/rust-lang/rust/commit/ccb4b35897c0356bb397fe045fa23ddbce9fc134"}], "stats": {"total": 279, "additions": 229, "deletions": 50}, "files": [{"sha": "b902a46fea314083d6a0e4d70c42d218b100a43c", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -49,7 +49,7 @@ use std::collections::{HashMap, HashSet};\n use syntax::ast::{self, CrateNum, Name, NodeId};\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{DUMMY_SP, Span};\n-use syntax::parse::token::{InternedString, special_idents};\n+use syntax::parse::token::InternedString;\n \n use rustc_front::hir;\n use rustc_front::hir::{ItemImpl, ItemTrait};\n@@ -1353,6 +1353,7 @@ pub struct VariantDefData<'tcx, 'container: 'tcx> {\n     pub name: Name, // struct's name if this is a struct\n     pub disr_val: Disr,\n     pub fields: Vec<FieldDefData<'tcx, 'container>>,\n+    pub kind: VariantKind,\n }\n \n pub struct FieldDefData<'tcx, 'container: 'tcx> {\n@@ -1607,13 +1608,7 @@ impl<'tcx, 'container> VariantDefData<'tcx, 'container> {\n     }\n \n     pub fn kind(&self) -> VariantKind {\n-        match self.fields.get(0) {\n-            None => VariantKind::Unit,\n-            Some(&FieldDefData { name, .. }) if name == special_idents::unnamed_field.name => {\n-                VariantKind::Tuple\n-            }\n-            Some(_) => VariantKind::Struct\n-        }\n+        self.kind\n     }\n \n     pub fn is_tuple_struct(&self) -> bool {"}, {"sha": "def5897e92d9d8aa8d1161ad84577c95315382c0", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -101,12 +101,15 @@ enum Family {\n     Mod,                   // m\n     ForeignMod,            // n\n     Enum,                  // t\n-    TupleVariant,          // v\n     StructVariant,         // V\n+    TupleVariant,          // v\n+    UnitVariant,           // w\n     Impl,                  // i\n-    DefaultImpl,              // d\n+    DefaultImpl,           // d\n     Trait,                 // I\n     Struct,                // S\n+    TupleStruct,           // s\n+    UnitStruct,            // u\n     PublicField,           // g\n     InheritedField,        // N\n     Constant,              // C\n@@ -126,12 +129,15 @@ fn item_family(item: rbml::Doc) -> Family {\n       'm' => Mod,\n       'n' => ForeignMod,\n       't' => Enum,\n-      'v' => TupleVariant,\n       'V' => StructVariant,\n+      'v' => TupleVariant,\n+      'w' => UnitVariant,\n       'i' => Impl,\n       'd' => DefaultImpl,\n       'I' => Trait,\n       'S' => Struct,\n+      's' => TupleStruct,\n+      'u' => UnitStruct,\n       'g' => PublicField,\n       'N' => InheritedField,\n        c => panic!(\"unexpected family char: {}\", c)\n@@ -282,7 +288,7 @@ fn item_to_def_like(cdata: Cmd, item: rbml::Doc, did: DefId) -> DefLike {\n         }\n         ImmStatic => DlDef(def::DefStatic(did, false)),\n         MutStatic => DlDef(def::DefStatic(did, true)),\n-        Struct    => DlDef(def::DefStruct(did)),\n+        Struct | TupleStruct | UnitStruct => DlDef(def::DefStruct(did)),\n         Fn        => DlDef(def::DefFn(did, false)),\n         CtorFn    => DlDef(def::DefFn(did, true)),\n         Method | StaticMethod => {\n@@ -302,7 +308,7 @@ fn item_to_def_like(cdata: Cmd, item: rbml::Doc, did: DefId) -> DefLike {\n             let enum_did = item_require_parent_item(cdata, item);\n             DlDef(def::DefVariant(enum_did, did, true))\n         }\n-        TupleVariant => {\n+        TupleVariant | UnitVariant => {\n             let enum_did = item_require_parent_item(cdata, item);\n             DlDef(def::DefVariant(enum_did, did, false))\n         }\n@@ -365,6 +371,14 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                          item_id: DefIndex,\n                          tcx: &ty::ctxt<'tcx>) -> ty::AdtDefMaster<'tcx>\n {\n+    fn family_to_variant_kind<'tcx>(family: Family, tcx: &ty::ctxt<'tcx>) -> ty::VariantKind {\n+        match family {\n+            Struct | StructVariant => ty::VariantKind::Struct,\n+            TupleStruct | TupleVariant => ty::VariantKind::Tuple,\n+            UnitStruct | UnitVariant => ty::VariantKind::Unit,\n+            _ => tcx.sess.bug(&format!(\"unexpected family: {:?}\", family)),\n+        }\n+    }\n     fn get_enum_variants<'tcx>(intr: &IdentInterner,\n                                cdata: Cmd,\n                                doc: rbml::Doc,\n@@ -384,7 +398,8 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                 did: did,\n                 name: item_name(intr, item),\n                 fields: get_variant_fields(intr, cdata, item, tcx),\n-                disr_val: disr\n+                disr_val: disr,\n+                kind: family_to_variant_kind(item_family(item), tcx),\n             }\n         }).collect()\n     }\n@@ -417,7 +432,8 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n             did: did,\n             name: item_name(intr, doc),\n             fields: get_variant_fields(intr, cdata, doc, tcx),\n-            disr_val: 0\n+            disr_val: 0,\n+            kind: family_to_variant_kind(item_family(doc), tcx),\n         }\n     }\n \n@@ -428,7 +444,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n             (ty::AdtKind::Enum,\n              get_enum_variants(intr, cdata, doc, tcx))\n         }\n-        Struct => {\n+        Struct | TupleStruct | UnitStruct => {\n             let ctor_did =\n                 reader::maybe_get_doc(doc, tag_items_data_item_struct_ctor).\n                 map_or(did, |ctor_doc| translated_def_id(cdata, ctor_doc));"}, {"sha": "ec70a610e0b3afecc7c03e690228f0b5ebad496d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -285,8 +285,9 @@ fn encode_enum_variant_info<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id_and_key(ecx, rbml_w, vid);\n         encode_family(rbml_w, match variant.kind() {\n-            ty::VariantKind::Unit | ty::VariantKind::Tuple => 'v',\n-            ty::VariantKind::Struct => 'V'\n+            ty::VariantKind::Struct => 'V',\n+            ty::VariantKind::Tuple => 'v',\n+            ty::VariantKind::Unit => 'w',\n         });\n         encode_name(rbml_w, variant.name);\n         encode_parent_item(rbml_w, ecx.tcx.map.local_def_id(id));\n@@ -1043,7 +1044,11 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         /* Now, make an item for the class itself */\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id_and_key(ecx, rbml_w, def_id);\n-        encode_family(rbml_w, 'S');\n+        encode_family(rbml_w, match *struct_def {\n+            hir::VariantData::Struct(..) => 'S',\n+            hir::VariantData::Tuple(..) => 's',\n+            hir::VariantData::Unit(..) => 'u',\n+        });\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, item.id);\n \n         encode_item_variances(rbml_w, ecx, item.id);"}, {"sha": "eb204c5641495ed11d248ad1e4be8b3b80468a27", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -1006,7 +1006,12 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n         did: did,\n         name: name,\n         disr_val: disr_val,\n-        fields: fields\n+        fields: fields,\n+        kind: match *def {\n+            hir::VariantData::Struct(..) => ty::VariantKind::Struct,\n+            hir::VariantData::Tuple(..) => ty::VariantKind::Tuple,\n+            hir::VariantData::Unit(..) => ty::VariantKind::Unit,\n+        }\n     }\n }\n "}, {"sha": "3b92bc3121792be8f0019065dc40856cb5c85721", "filename": "src/test/auxiliary/empty-struct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fempty-struct.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(braced_empty_structs)]\n+\n+pub struct XEmpty1 {}\n+pub struct XEmpty2;\n+\n+pub enum XE {\n+    XEmpty3 {},\n+    XEmpty4,\n+}"}, {"sha": "6ae0dad0e7bfbd485a4370d0b2fd06f86c770423", "filename": "src/test/compile-fail/empty-struct-braces-expr.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -10,17 +10,28 @@\n \n // Can't use empty braced struct as constant or constructor function\n \n+// aux-build:empty-struct.rs\n+\n #![feature(braced_empty_structs)]\n \n+extern crate empty_struct;\n+use empty_struct::*;\n+\n struct Empty1 {}\n \n enum E {\n-    Empty2 {}\n+    Empty3 {}\n }\n \n fn main() {\n     let e1 = Empty1; //~ ERROR `Empty1` is the name of a struct or struct variant\n     let e1 = Empty1(); //~ ERROR `Empty1` is the name of a struct or struct variant\n-    let e2 = E::Empty2; //~ ERROR `E::Empty2` is the name of a struct or struct variant\n-    let e2 = E::Empty2(); //~ ERROR `E::Empty2` is the name of a struct or struct variant\n+    let e3 = E::Empty3; //~ ERROR `E::Empty3` is the name of a struct or struct variant\n+    let e3 = E::Empty3(); //~ ERROR `E::Empty3` is the name of a struct or struct variant\n+\n+    // FIXME: non-local struct kind should be known early (e.g. kept in `DefStruct`)\n+    // let xe1 = XEmpty1; // ERROR `XEmpty1` is the name of a struct or struct variant\n+    let xe1 = XEmpty1(); //~ ERROR expected function, found `empty_struct::XEmpty1`\n+    let xe3 = XE::Empty3; //~ ERROR no associated item named `Empty3` found for type\n+    let xe3 = XE::Empty3(); //~ ERROR no associated item named `Empty3` found for type\n }"}, {"sha": "27c97a3a5509601919d1e96958428120d2702f6d", "filename": "src/test/compile-fail/empty-struct-braces-pat-1.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -10,22 +10,35 @@\n \n // Can't use empty braced struct as constant pattern\n \n+// aux-build:empty-struct.rs\n+\n #![feature(braced_empty_structs)]\n \n+extern crate empty_struct;\n+use empty_struct::*;\n+\n struct Empty1 {}\n \n enum E {\n-    Empty2 {}\n+    Empty3 {}\n }\n \n fn main() {\n     let e1 = Empty1 {};\n-    let e2 = E::Empty2 {};\n+    let e3 = E::Empty3 {};\n+    let xe1 = XEmpty1 {};\n+    let xe3 = XE::XEmpty3 {};\n \n     match e1 {\n         Empty1 => () // Not an error, `Empty1` is interpreted as a new binding\n     }\n-    match e2 {\n-        E::Empty2 => () //~ ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    match e3 {\n+        E::Empty3 => () //~ ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n+    }\n+    match xe1 {\n+        XEmpty1 => () // Not an error, `XEmpty1` is interpreted as a new binding\n+    }\n+    match xe3 {\n+        XE::XEmpty3 => () //~ ERROR no associated item named `XEmpty3` found for type\n     }\n }"}, {"sha": "3436e2a2cd752c298ea13b6971583909d6967784", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -10,18 +10,30 @@\n \n // Can't use empty braced struct as enum pattern\n \n+// aux-build:empty-struct.rs\n+\n #![feature(braced_empty_structs)]\n \n+extern crate empty_struct;\n+use empty_struct::*;\n+\n struct Empty1 {}\n \n fn main() {\n     let e1 = Empty1 {};\n+    let xe1 = XEmpty1 {};\n \n     // Rejected by parser as yet\n     // match e1 {\n     //     Empty1() => () // ERROR unresolved enum variant, struct or const `Empty1`\n     // }\n+    // match xe1 {\n+    //     XEmpty1() => () // ERROR unresolved enum variant, struct or const `XEmpty1`\n+    // }\n     match e1 {\n         Empty1(..) => () //~ ERROR unresolved enum variant, struct or const `Empty1`\n     }\n+    match xe1 {\n+        XEmpty1(..) => () //~ ERROR `XEmpty1` does not name a tuple variant or a tuple struct\n+    }\n }"}, {"sha": "ca51a1cfc2186f64214843b591385cb82fb8ab92", "filename": "src/test/compile-fail/empty-struct-braces-pat-3.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -10,20 +10,32 @@\n \n // Can't use empty braced struct as enum pattern\n \n+// aux-build:empty-struct.rs\n+\n #![feature(braced_empty_structs)]\n \n+extern crate empty_struct;\n+use empty_struct::*;\n+\n enum E {\n-    Empty2 {}\n+    Empty3 {}\n }\n \n fn main() {\n-    let e2 = E::Empty2 {};\n+    let e3 = E::Empty3 {};\n+    let xe3 = XE::XEmpty3 {};\n \n     // Rejected by parser as yet\n-    // match e2 {\n-    //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    // match e3 {\n+    //     E::Empty3() => () // ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n     // }\n-    match e2 {\n-        E::Empty2(..) => () //~ ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    // match xe3 {\n+    //     E::Empty3() => () // ERROR `XE::XEmpty3` does not name a tuple variant or a tuple struct\n+    // }\n+    match e3 {\n+        E::Empty3(..) => () //~ ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n+    }\n+    match xe3 {\n+        XE::XEmpty3(..) => () //~ ERROR no associated item named `XEmpty3` found for type\n     }\n }"}, {"sha": "822ee9e0dbc106923d8bc608674b30fabcb8f143", "filename": "src/test/compile-fail/empty-struct-unit-expr.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -10,15 +10,22 @@\n \n // Can't use unit struct as constructor function\n \n+// aux-build:empty-struct.rs\n+\n #![feature(braced_empty_structs)]\n \n-struct Empty1;\n+extern crate empty_struct;\n+use empty_struct::*;\n+\n+struct Empty2;\n \n enum E {\n-    Empty2\n+    Empty4\n }\n \n fn main() {\n-    let e1 = Empty1(); //~ ERROR expected function, found `Empty1`\n-    let e2 = E::Empty2(); //~ ERROR expected function, found `E`\n+    let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n+    let e4 = E::Empty4(); //~ ERROR expected function, found `E`\n+    let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n+    let xe4 = XE::XEmpty4(); //~ ERROR  expected function, found `empty_struct::XE`\n }"}, {"sha": "0f54d1b7365854c99d46c05d3614e55be51b5d57", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -10,36 +10,59 @@\n \n // Can't use unit struct as enum pattern\n \n+// aux-build:empty-struct.rs\n+\n #![feature(rustc_attrs)]\n // remove prior feature after warning cycle and promoting warnings to errors\n #![feature(braced_empty_structs)]\n \n-struct Empty1;\n+extern crate empty_struct;\n+use empty_struct::*;\n+\n+struct Empty2;\n \n enum E {\n-    Empty2\n+    Empty4\n }\n \n // remove attribute after warning cycle and promoting warnings to errors\n #[rustc_error]\n fn main() { //~ ERROR: compilation successful\n-    let e1 = Empty1;\n-    let e2 = E::Empty2;\n+    let e2 = Empty2;\n+    let e4 = E::Empty4;\n+    let xe2 = XEmpty2;\n+    let xe4 = XE::XEmpty4;\n \n     // Rejected by parser as yet\n-    // match e1 {\n-    //     Empty1() => () // ERROR `Empty1` does not name a tuple variant or a tuple struct\n+    // match e2 {\n+    //     Empty2() => () // ERROR `Empty2` does not name a tuple variant or a tuple struct\n     // }\n-    match e1 {\n-        Empty1(..) => () //~ WARN `Empty1` does not name a tuple variant or a tuple struct\n+    // match xe2 {\n+    //     XEmpty2() => () // ERROR `XEmpty2` does not name a tuple variant or a tuple struct\n+    // }\n+    match e2 {\n+        Empty2(..) => () //~ WARN `Empty2` does not name a tuple variant or a tuple struct\n+            //~^ WARN hard error\n+    }\n+    match xe2 {\n+        XEmpty2(..) => () //~ WARN `XEmpty2` does not name a tuple variant or a tuple struct\n             //~^ WARN hard error\n     }\n     // Rejected by parser as yet\n-    // match e2 {\n-    //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    // match e4 {\n+    //     E::Empty4() => () // ERROR `E::Empty4` does not name a tuple variant or a tuple struct\n     // }\n-    match e2 {\n-        E::Empty2(..) => () //~ WARN `E::Empty2` does not name a tuple variant or a tuple struct\n+    // match xe4 {\n+    //     XE::XEmpty4() => (), // ERROR `XE::XEmpty4` does not name a tuple variant or a tuple\n+    //     _ => {},\n+    // }\n+    match e4 {\n+        E::Empty4(..) => () //~ WARN `E::Empty4` does not name a tuple variant or a tuple struct\n+            //~^ WARN hard error\n+    }\n+    match xe4 {\n+        XE::XEmpty4(..) => (), //~ WARN `XE::XEmpty4` does not name a tuple variant or a tuple\n             //~^ WARN hard error\n+        _ => {},\n     }\n }"}, {"sha": "b4ce1b97a4c00f09dae359ee38d8abbccc125d24", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42ccb8b49e7a43bba9a62960cac6f29f7e932ba/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=c42ccb8b49e7a43bba9a62960cac6f29f7e932ba", "patch": "@@ -11,8 +11,13 @@\n // Empty struct defined with braces add names into type namespace\n // Empty struct defined without braces add names into both type and value namespaces\n \n+// aux-build:empty-struct.rs\n+\n #![feature(braced_empty_structs)]\n \n+extern crate empty_struct;\n+use empty_struct::*;\n+\n struct Empty1 {}\n struct Empty2;\n struct Empty3 {}\n@@ -23,7 +28,7 @@ enum E {\n     Empty5,\n }\n \n-fn main() {\n+fn local() {\n     let e1: Empty1 = Empty1 {};\n     let e2: Empty2 = Empty2 {};\n     let e2: Empty2 = Empty2;\n@@ -84,3 +89,59 @@ fn main() {\n     let e22: Empty2 = Empty2 { ..e2 };\n     let e33: Empty3 = Empty3 { ..e3 };\n }\n+\n+fn xcrate() {\n+    let e1: XEmpty1 = XEmpty1 {};\n+    let e2: XEmpty2 = XEmpty2 {};\n+    let e2: XEmpty2 = XEmpty2;\n+    let e3: XE = XE::XEmpty3 {};\n+    // FIXME: Commented out tests are waiting for PR 30882 (fixes for variant namespaces)\n+    // let e4: XE = XE::XEmpty4 {};\n+    let e4: XE = XE::XEmpty4;\n+\n+    match e1 {\n+        XEmpty1 {} => {}\n+    }\n+    match e2 {\n+        XEmpty2 {} => {}\n+    }\n+    match e3 {\n+        XE::XEmpty3 {} => {}\n+        _ => {}\n+    }\n+    // match e4 {\n+    //     XE::XEmpty4 {} => {}\n+    //     _ => {}\n+    // }\n+\n+    match e1 {\n+        XEmpty1 { .. } => {}\n+    }\n+    match e2 {\n+        XEmpty2 { .. } => {}\n+    }\n+    match e3 {\n+        XE::XEmpty3 { .. } => {}\n+        _ => {}\n+    }\n+    // match e4 {\n+    //     XE::XEmpty4 { .. } => {}\n+    //     _ => {}\n+    // }\n+\n+    match e2 {\n+        XEmpty2 => {}\n+    }\n+    // match e4 {\n+    //     XE::XEmpty4 => {}\n+    //     _ => {}\n+    // }\n+\n+    let e11: XEmpty1 = XEmpty1 { ..e1 };\n+    let e22: XEmpty2 = XEmpty2 { ..e2 };\n+}\n+\n+fn main() {\n+    local();\n+    xcrate();\n+}"}]}