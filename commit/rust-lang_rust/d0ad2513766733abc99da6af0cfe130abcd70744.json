{"sha": "d0ad2513766733abc99da6af0cfe130abcd70744", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYWQyNTEzNzY2NzMzYWJjOTlkYTZhZjBjZmUxMzBhYmNkNzA3NDQ=", "commit": {"author": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-09-04T07:14:56Z"}, "committer": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-09-04T07:14:56Z"}, "message": "Use MuextArc and RWArc in docstrings", "tree": {"sha": "3fd0ed5400a0d3064c6f460287b2e70456e85e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd0ed5400a0d3064c6f460287b2e70456e85e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0ad2513766733abc99da6af0cfe130abcd70744", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ad2513766733abc99da6af0cfe130abcd70744", "html_url": "https://github.com/rust-lang/rust/commit/d0ad2513766733abc99da6af0cfe130abcd70744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0ad2513766733abc99da6af0cfe130abcd70744/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0aa62c872c745ce3a13f60da199752b035f9c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0aa62c872c745ce3a13f60da199752b035f9c48", "html_url": "https://github.com/rust-lang/rust/commit/c0aa62c872c745ce3a13f60da199752b035f9c48"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3fbfae52c6300bf925d071a95c611447149476ec", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0ad2513766733abc99da6af0cfe130abcd70744/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ad2513766733abc99da6af0cfe130abcd70744/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=d0ad2513766733abc99da6af0cfe130abcd70744", "patch": "@@ -201,10 +201,10 @@ impl<T:Send> MutexArc<T> {\n      * The reason this function is 'unsafe' is because it is possible to\n      * construct a circular reference among multiple Arcs by mutating the\n      * underlying data. This creates potential for deadlock, but worse, this\n-     * will guarantee a memory leak of all involved Arcs. Using mutex Arcs\n+     * will guarantee a memory leak of all involved Arcs. Using MutexArcs\n      * inside of other Arcs is safe in absence of circular references.\n      *\n-     * If you wish to nest mutex_arcs, one strategy for ensuring safety at\n+     * If you wish to nest MutexArcs, one strategy for ensuring safety at\n      * runtime is to add a \"nesting level counter\" inside the stored data, and\n      * when traversing the arcs, assert that they monotonically decrease.\n      *\n@@ -272,9 +272,9 @@ impl<T:Freeze + Send> MutexArc<T> {\n      * requires the Freeze bound, which prohibits access on MutexArcs which\n      * might contain nested MutexArcs inside.\n      *\n-     * The purpose of this is to offer a safe implementation of both methods\n-     * access and access_cond to be used instead of rwlock in cases where no\n-     * readers are needed and sightly better performance is required.\n+     * The purpose of this is to offer a safe implementation of MutexArc to be\n+     * used instead of RWArc in cases where no readers are needed and sightly\n+     * better performance is required.\n      *\n      * Both methods have the same failure behaviour as unsafe_access and\n      * unsafe_access_cond."}]}