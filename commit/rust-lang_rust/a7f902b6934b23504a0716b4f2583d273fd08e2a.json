{"sha": "a7f902b6934b23504a0716b4f2583d273fd08e2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjkwMmI2OTM0YjIzNTA0YTA3MTZiNGYyNTgzZDI3M2ZkMDhlMmE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-23T18:19:42Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-23T18:19:42Z"}, "message": "Remove another unnecessary `Option`\n\nThe previous changes mean that we can now remove this `Option`.", "tree": {"sha": "29dbe3c9fcb2577bc85d8419fb980b0ef5acfb6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29dbe3c9fcb2577bc85d8419fb980b0ef5acfb6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f902b6934b23504a0716b4f2583d273fd08e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f902b6934b23504a0716b4f2583d273fd08e2a", "html_url": "https://github.com/rust-lang/rust/commit/a7f902b6934b23504a0716b4f2583d273fd08e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f902b6934b23504a0716b4f2583d273fd08e2a/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68244fc521c91b5daba347a4160a884eab268e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/68244fc521c91b5daba347a4160a884eab268e08", "html_url": "https://github.com/rust-lang/rust/commit/68244fc521c91b5daba347a4160a884eab268e08"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "ff30632daabfd3e4d6ed4058179b98868c2a6971", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f902b6934b23504a0716b4f2583d273fd08e2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f902b6934b23504a0716b4f2583d273fd08e2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a7f902b6934b23504a0716b4f2583d273fd08e2a", "patch": "@@ -231,7 +231,7 @@ impl Clean<Item> for doctree::Module<'_> {\n \n         let what_rustc_thinks = Item::from_hir_id_and_parts(\n             self.id,\n-            self.name,\n+            Some(self.name),\n             ModuleItem(Module { is_crate: self.is_crate, items }),\n             cx,\n         );"}, {"sha": "189624c0d809c35ea7df84971e415271629db459", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f902b6934b23504a0716b4f2583d273fd08e2a/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f902b6934b23504a0716b4f2583d273fd08e2a/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=a7f902b6934b23504a0716b4f2583d273fd08e2a", "patch": "@@ -5,7 +5,7 @@ use rustc_span::{self, Span, Symbol};\n use rustc_hir as hir;\n \n crate struct Module<'hir> {\n-    crate name: Option<Symbol>,\n+    crate name: Symbol,\n     crate where_outer: Span,\n     crate where_inner: Span,\n     crate mods: Vec<Module<'hir>>,\n@@ -18,7 +18,7 @@ crate struct Module<'hir> {\n }\n \n impl Module<'hir> {\n-    crate fn new(name: Option<Symbol>) -> Module<'hir> {\n+    crate fn new(name: Symbol) -> Module<'hir> {\n         Module {\n             name,\n             id: hir::CRATE_HIR_ID,"}, {"sha": "17a66d1788e6d23e5ffbedf8a64c9077b5ed38bd", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7f902b6934b23504a0716b4f2583d273fd08e2a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f902b6934b23504a0716b4f2583d273fd08e2a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a7f902b6934b23504a0716b4f2583d273fd08e2a", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item.module,\n-            Some(self.cx.tcx.crate_name),\n+            self.cx.tcx.crate_name,\n         );\n         top_level_module.is_crate = true;\n         // Attach the crate's exported macros to the top-level module.\n@@ -114,7 +114,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     _ => continue 'exported_macros,\n                 };\n                 // Descend into the child module that matches this path segment (if any).\n-                match cur_mod.mods.iter_mut().find(|child| child.name == Some(path_segment_ty_ns)) {\n+                match cur_mod.mods.iter_mut().find(|child| child.name == path_segment_ty_ns) {\n                     Some(child_mod) => cur_mod = &mut *child_mod,\n                     None => continue 'exported_macros,\n                 }\n@@ -133,7 +133,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         vis: &'tcx hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n-        name: Option<Symbol>,\n+        name: Symbol,\n     ) -> Module<'tcx> {\n         let mut om = Module::new(name);\n         om.where_outer = span;\n@@ -312,13 +312,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.items.push((item, renamed))\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                om.mods.push(self.visit_mod_contents(\n-                    item.span,\n-                    &item.vis,\n-                    item.hir_id(),\n-                    m,\n-                    Some(name),\n-                ));\n+                om.mods.push(self.visit_mod_contents(item.span, &item.vis, item.hir_id(), m, name));\n             }\n             hir::ItemKind::Fn(..)\n             | hir::ItemKind::ExternCrate(..)"}]}