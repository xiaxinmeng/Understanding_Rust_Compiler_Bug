{"sha": "c170dcf04c62ffd79cbf28f340aaf6824e70f493", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNzBkY2YwNGM2MmZmZDc5Y2JmMjhmMzQwYWFmNjgyNGU3MGY0OTM=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-06T22:18:25Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-09T00:32:03Z"}, "message": "tidy", "tree": {"sha": "d6a26800f9dd664e6c74df465d403a692f73270a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6a26800f9dd664e6c74df465d403a692f73270a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c170dcf04c62ffd79cbf28f340aaf6824e70f493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c170dcf04c62ffd79cbf28f340aaf6824e70f493", "html_url": "https://github.com/rust-lang/rust/commit/c170dcf04c62ffd79cbf28f340aaf6824e70f493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c170dcf04c62ffd79cbf28f340aaf6824e70f493/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b16f4ac9145538e8375d2625181df281206be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b16f4ac9145538e8375d2625181df281206be7", "html_url": "https://github.com/rust-lang/rust/commit/47b16f4ac9145538e8375d2625181df281206be7"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "910249ecc479ef61235f803b6de1dac4f9203167", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c170dcf04c62ffd79cbf28f340aaf6824e70f493/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c170dcf04c62ffd79cbf28f340aaf6824e70f493/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=c170dcf04c62ffd79cbf28f340aaf6824e70f493", "patch": "@@ -159,9 +159,9 @@ where\n                 self.visit_const(leaf)\n             }\n             ACNode::Cast(_, ty) => self.visit_ty(ty),\n-            ACNode::Binop(..)\n-            | ACNode::UnaryOp(..)\n-            | ACNode::FunctionCall(_, _) => ControlFlow::CONTINUE,\n+            ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n+                ControlFlow::CONTINUE\n+            }\n         })\n     }\n "}, {"sha": "7d69ec54bdf0228b92a4884504b67dc3dda33458", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c170dcf04c62ffd79cbf28f340aaf6824e70f493/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c170dcf04c62ffd79cbf28f340aaf6824e70f493/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=c170dcf04c62ffd79cbf28f340aaf6824e70f493", "patch": "@@ -102,9 +102,9 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n                         ControlFlow::CONTINUE\n                     }\n-                    Node::Binop(_, _, _)\n-                    | Node::UnaryOp(_, _)\n-                    | Node::FunctionCall(_, _) => ControlFlow::CONTINUE,\n+                    Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => {\n+                        ControlFlow::CONTINUE\n+                    }\n                 });\n \n                 match failure_kind {\n@@ -348,8 +348,8 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             &ExprKind::PlaceTypeAscription { source, .. } |\n             &ExprKind::ValueTypeAscription { source, .. } => self.recurse_build(source)?,\n \n-            // subtle: associated consts are literals this arm handles \n-            // `<T as Trait>::ASSOC` as well as `12` \n+            // subtle: associated consts are literals this arm handles\n+            // `<T as Trait>::ASSOC` as well as `12`\n             &ExprKind::Literal { literal, .. }\n             | &ExprKind::StaticRef { literal, .. } => self.add_node(Node::Leaf(literal), node.span),\n \n@@ -381,10 +381,10 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             // }\n             // ```\n             ExprKind::Block { body: thir::Block { stmts: box [], expr: Some(e), .. }} => self.recurse_build(*e)?,\n-            // ExprKind::Use happens when a `hir::ExprKind::Cast` is a \n+            // ExprKind::Use happens when a `hir::ExprKind::Cast` is a\n             // \"coercion cast\" i.e. using a coercion or is a no-op.\n             // this is important so that `N as usize as usize` doesnt unify with `N as usize`\n-            &ExprKind::Use { source} \n+            &ExprKind::Use { source}\n             | &ExprKind::Cast { source } => {\n                 let arg = self.recurse_build(source)?;\n                 self.add_node(Node::Cast(arg, node.ty), node.span)\n@@ -404,7 +404,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             | ExprKind::Field { .. }\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::Adt(_) => return self.error(\n-                    Some(node.span), \n+                    Some(node.span),\n                     \"unsupported operation in generic constant, this may be supported in the future\",\n                 ).map(|never| never),\n \n@@ -417,7 +417,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             | ExprKind::Assign { .. }\n             | ExprKind::LogicalOp { .. }\n             | ExprKind::Unary { .. } //\n-            | ExprKind::Binary { .. } // we handle valid unary/binary ops above \n+            | ExprKind::Binary { .. } // we handle valid unary/binary ops above\n             | ExprKind::Break { .. }\n             | ExprKind::Continue { .. }\n             | ExprKind::If { .. }\n@@ -592,16 +592,14 @@ pub(super) fn try_unify<'tcx>(\n                 && iter::zip(a_args, b_args)\n                     .all(|(&an, &bn)| try_unify(tcx, a.subtree(an), b.subtree(bn)))\n         }\n-        (Node::Cast(a_operand, a_ty), Node::Cast(b_operand, b_ty))\n-            if (a_ty == b_ty) =>\n-        {\n+        (Node::Cast(a_operand, a_ty), Node::Cast(b_operand, b_ty)) if (a_ty == b_ty) => {\n             try_unify(tcx, a.subtree(a_operand), b.subtree(b_operand))\n         }\n         // use this over `_ => false` to make adding variants to `Node` less error prone\n-        (Node::Cast(..), _) \n-        | (Node::FunctionCall(..), _) \n-        | (Node::UnaryOp(..), _) \n-        | (Node::Binop(..), _) \n+        (Node::Cast(..), _)\n+        | (Node::FunctionCall(..), _)\n+        | (Node::UnaryOp(..), _)\n+        | (Node::Binop(..), _)\n         | (Node::Leaf(..), _) => false,\n     }\n }"}, {"sha": "63bd10994b1aca0bd20626cb4047a65495240a6b", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c170dcf04c62ffd79cbf28f340aaf6824e70f493/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c170dcf04c62ffd79cbf28f340aaf6824e70f493/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c170dcf04c62ffd79cbf28f340aaf6824e70f493", "patch": "@@ -844,9 +844,9 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                         self.visit_const(leaf)\n                     }\n                     Node::Cast(_, ty) => self.visit_ty(ty),\n-                    Node::Binop(..)\n-                    | Node::UnaryOp(..)\n-                    | Node::FunctionCall(_, _) => ControlFlow::CONTINUE,\n+                    Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n+                        ControlFlow::CONTINUE\n+                    }\n                 })\n             } else {\n                 ControlFlow::CONTINUE"}]}