{"sha": "6d05e2a9afb558e4e9668e54db6747e4d8a8383a", "node_id": "C_kwDOAAsO6NoAKDZkMDVlMmE5YWZiNTU4ZTRlOTY2OGU1NGRiNjc0N2U0ZDhhODM4M2E", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-01-15T09:16:13Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-01-18T00:41:09Z"}, "message": "add more info to invalid use of #[test] on invalid items", "tree": {"sha": "3922cc0a112264e9538e41c488aa2c0da78e0cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3922cc0a112264e9538e41c488aa2c0da78e0cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d05e2a9afb558e4e9668e54db6747e4d8a8383a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d05e2a9afb558e4e9668e54db6747e4d8a8383a", "html_url": "https://github.com/rust-lang/rust/commit/6d05e2a9afb558e4e9668e54db6747e4d8a8383a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d05e2a9afb558e4e9668e54db6747e4d8a8383a/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0ec3e09a996f2cb35be7710fd1003c3c38f1667", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ec3e09a996f2cb35be7710fd1003c3c38f1667", "html_url": "https://github.com/rust-lang/rust/commit/b0ec3e09a996f2cb35be7710fd1003c3c38f1667"}], "stats": {"total": 322, "additions": 281, "deletions": 41}, "files": [{"sha": "97cb7aa0ddeb115613edcc9688af90c78f04cd65", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d05e2a9afb558e4e9668e54db6747e4d8a8383a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d05e2a9afb558e4e9668e54db6747e4d8a8383a/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=6d05e2a9afb558e4e9668e54db6747e4d8a8383a", "patch": "@@ -6,6 +6,7 @@ use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast_pretty::pprust;\n+use rustc_errors::Applicability;\n use rustc_expand::base::*;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -102,11 +103,20 @@ pub fn expand_test_or_bench(\n         }\n     };\n \n-    if let ast::ItemKind::MacCall(_) = item.kind {\n-        cx.sess.parse_sess.span_diagnostic.span_warn(\n-            item.span,\n-            \"`#[test]` attribute should not be used on macros. Use `#[cfg(test)]` instead.\",\n-        );\n+    // Note: non-associated fn items are already handled by `expand_test_or_bench`\n+    if !matches!(item.kind, ast::ItemKind::Fn(_)) {\n+        cx.sess\n+            .parse_sess\n+            .span_diagnostic\n+            .struct_span_err(\n+                attr_sp,\n+                \"the `#[test]` attribute may only be used on a non-associated function\",\n+            )\n+            .note(\"the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\")\n+            .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n+            .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", String::from(\"#[cfg(test)]\"), Applicability::MaybeIncorrect)\n+            .emit();\n+\n         return vec![Annotatable::Item(item)];\n     }\n \n@@ -475,7 +485,7 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n             (false, _) => true,\n         }\n     } else {\n-        sd.span_err(i.span, \"only functions may be used as tests\");\n+        // should be unreachable because `is_test_fn_item` should catch all non-fn items\n         false\n     }\n }"}, {"sha": "8f6745246fd1db2eb1c3144b46c3793e74a1bb57", "filename": "src/test/ui/issues/issue-14772.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec3e09a996f2cb35be7710fd1003c3c38f1667/src%2Ftest%2Fui%2Fissues%2Fissue-14772.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec3e09a996f2cb35be7710fd1003c3c38f1667/src%2Ftest%2Fui%2Fissues%2Fissue-14772.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14772.rs?ref=b0ec3e09a996f2cb35be7710fd1003c3c38f1667", "patch": "@@ -1,6 +0,0 @@\n-// compile-flags: --test\n-\n-#[test]\n-mod foo {} //~ ERROR only functions may be used as tests\n-\n-fn main() {}"}, {"sha": "253fec5e57833e70d6fb958e4c75e811a143cd5b", "filename": "src/test/ui/issues/issue-14772.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec3e09a996f2cb35be7710fd1003c3c38f1667/src%2Ftest%2Fui%2Fissues%2Fissue-14772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec3e09a996f2cb35be7710fd1003c3c38f1667/src%2Ftest%2Fui%2Fissues%2Fissue-14772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14772.stderr?ref=b0ec3e09a996f2cb35be7710fd1003c3c38f1667", "patch": "@@ -1,8 +0,0 @@\n-error: only functions may be used as tests\n-  --> $DIR/issue-14772.rs:4:1\n-   |\n-LL | mod foo {}\n-   | ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0667364d13cd499ef721f1c1777006fad0708ab3", "filename": "src/test/ui/test-attrs/test-on-macro.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec3e09a996f2cb35be7710fd1003c3c38f1667/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec3e09a996f2cb35be7710fd1003c3c38f1667/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs?ref=b0ec3e09a996f2cb35be7710fd1003c3c38f1667", "patch": "@@ -1,13 +0,0 @@\n-// check-pass\n-// compile-flags:--test\n-\n-#![deny(warnings)]\n-\n-macro_rules! foo {\n-    () => (fn foo(){})\n-}\n-\n-#[test]\n-foo!(); //~ WARNING `#[test]` attribute should not be used on macros\n-\n-fn main(){}"}, {"sha": "98190b060cec59e35a8758c2831e1e0273b75f22", "filename": "src/test/ui/test-attrs/test-on-macro.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec3e09a996f2cb35be7710fd1003c3c38f1667/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec3e09a996f2cb35be7710fd1003c3c38f1667/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.stderr?ref=b0ec3e09a996f2cb35be7710fd1003c3c38f1667", "patch": "@@ -1,8 +0,0 @@\n-warning: `#[test]` attribute should not be used on macros. Use `#[cfg(test)]` instead.\n-  --> $DIR/test-on-macro.rs:11:1\n-   |\n-LL | foo!();\n-   | ^^^^^^^\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b2f681c01d156c12553b9403f305eb21335c5627", "filename": "src/test/ui/test-attrs/test-on-not-fn.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6d05e2a9afb558e4e9668e54db6747e4d8a8383a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d05e2a9afb558e4e9668e54db6747e4d8a8383a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.rs?ref=6d05e2a9afb558e4e9668e54db6747e4d8a8383a", "patch": "@@ -0,0 +1,80 @@\n+// compile-flags: --test\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+mod test {}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+mod loooooooooooooong_teeeeeeeeeest {\n+    /*\n+    this is a comment\n+    this comment goes on for a very long time\n+    this is to pad out the span for this module for a long time\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n+    labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n+    laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n+    voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n+    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n+    */\n+}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+extern \"C\" {}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+trait Foo {}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+impl Foo for i32 {}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+const FOO: i32 = -1_i32;\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+static BAR: u64 = 10_000_u64;\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+enum MyUnit {\n+    Unit,\n+}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+struct NewI32(i32);\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+union Spooky {\n+    x: i32,\n+    y: u32,\n+}\n+\n+#[repr(C, align(64))]\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+#[derive(Copy, Clone, Debug)]\n+struct MoreAttrs {\n+    a: i32,\n+    b: u64,\n+}\n+\n+macro_rules! foo {\n+    () => {};\n+}\n+\n+#[test] //~ ERROR: the `#[test]` attribute may only be used on a non-associated function\n+foo!();\n+\n+// make sure it doesn't erroneously trigger on a real test\n+#[test]\n+fn real_test() {\n+    assert_eq!(42_i32, 42_i32);\n+}\n+\n+// make sure it works with cfg test\n+#[cfg(test)]\n+mod real_tests {\n+    #[cfg(test)]\n+    fn foo() {}\n+\n+    #[test]\n+    fn bar() {\n+        foo();\n+    }\n+}"}, {"sha": "dd693cf316dc7c87561f8be1e045db311ce22f59", "filename": "src/test/ui/test-attrs/test-on-not-fn.stderr", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/6d05e2a9afb558e4e9668e54db6747e4d8a8383a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d05e2a9afb558e4e9668e54db6747e4d8a8383a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr?ref=6d05e2a9afb558e4e9668e54db6747e4d8a8383a", "patch": "@@ -0,0 +1,185 @@\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:3:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | mod test {}\n+   | ----------- expected a non-associated function, found a module\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:6:1\n+   |\n+LL |   #[test]\n+   |   ^^^^^^^\n+LL | / mod loooooooooooooong_teeeeeeeeeest {\n+LL | |     /*\n+LL | |     this is a comment\n+LL | |     this comment goes on for a very long time\n+...  |\n+LL | |     */\n+LL | | }\n+   | |_- expected a non-associated function, found a module\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:20:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | extern \"C\" {}\n+   | ------------- expected a non-associated function, found an extern block\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:23:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | trait Foo {}\n+   | ------------ expected a non-associated function, found a trait\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:26:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | impl Foo for i32 {}\n+   | ------------------- expected a non-associated function, found an implementation\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:29:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | const FOO: i32 = -1_i32;\n+   | ------------------------ expected a non-associated function, found a constant item\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:32:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | static BAR: u64 = 10_000_u64;\n+   | ----------------------------- expected a non-associated function, found a static item\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:35:1\n+   |\n+LL |   #[test]\n+   |   ^^^^^^^\n+LL | / enum MyUnit {\n+LL | |     Unit,\n+LL | | }\n+   | |_- expected a non-associated function, found an enum\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:40:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | struct NewI32(i32);\n+   | ------------------- expected a non-associated function, found a struct\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:43:1\n+   |\n+LL |   #[test]\n+   |   ^^^^^^^\n+LL | / union Spooky {\n+LL | |     x: i32,\n+LL | |     y: u32,\n+LL | | }\n+   | |_- expected a non-associated function, found a union\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:50:1\n+   |\n+LL |   #[test]\n+   |   ^^^^^^^\n+LL |   #[derive(Copy, Clone, Debug)]\n+LL | / struct MoreAttrs {\n+LL | |     a: i32,\n+LL | |     b: u64,\n+LL | | }\n+   | |_- expected a non-associated function, found a struct\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-on-not-fn.rs:61:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+LL | foo!();\n+   | ------- expected a non-associated function, found an item macro invocation\n+   |\n+   = note: the `#[test]` macro causes a a function to be run on a test and has no effect on non-functions\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL | #[cfg(test)]\n+   | ~~~~~~~~~~~~\n+\n+error: aborting due to 12 previous errors\n+"}]}