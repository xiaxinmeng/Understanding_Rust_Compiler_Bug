{"sha": "461c5764577414d0232508177f8099a27b96b303", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MWM1NzY0NTc3NDE0ZDAyMzI1MDgxNzdmODA5OWEyN2I5NmIzMDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-07-22T16:51:19Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-07-22T16:51:19Z"}, "message": "build: Harden env var tracking in build scripts", "tree": {"sha": "52e138730b310270cf009879c135cb4a58991a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e138730b310270cf009879c135cb4a58991a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/461c5764577414d0232508177f8099a27b96b303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/461c5764577414d0232508177f8099a27b96b303", "html_url": "https://github.com/rust-lang/rust/commit/461c5764577414d0232508177f8099a27b96b303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/461c5764577414d0232508177f8099a27b96b303/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b662c23580420c3d6a9e457df54c17a934ebdc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b662c23580420c3d6a9e457df54c17a934ebdc9", "html_url": "https://github.com/rust-lang/rust/commit/0b662c23580420c3d6a9e457df54c17a934ebdc9"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "e30da8d56e10fca3ebb0fb3e289f07665e4e27e0", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/461c5764577414d0232508177f8099a27b96b303/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461c5764577414d0232508177f8099a27b96b303/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=461c5764577414d0232508177f8099a27b96b303", "patch": "@@ -1,3 +1,5 @@\n+use std::ffi::{OsStr, OsString};\n+use std::fmt::Display;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::time::{SystemTime, UNIX_EPOCH};\n@@ -28,6 +30,14 @@ macro_rules! t {\n     };\n }\n \n+/// Reads an environment variable and adds it to dependencies.\n+/// Supposed to be used for all variables except those set for build scripts by cargo\n+/// https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\n+pub fn tracked_env_var_os<K: AsRef<OsStr> + Display>(key: K) -> Option<OsString> {\n+    println!(\"cargo:rerun-if-env-changed={}\", key);\n+    env::var_os(key)\n+}\n+\n // Because Cargo adds the compiler's dylib path to our library search path, llvm-config may\n // break: the dylib path for the compiler, as of this writing, contains a copy of the LLVM\n // shared library, which means that when our freshly built llvm-config goes to load it's\n@@ -37,10 +47,8 @@ macro_rules! t {\n // perfect -- we might actually want to see something from Cargo's added library paths -- but\n // for now it works.\n pub fn restore_library_path() {\n-    println!(\"cargo:rerun-if-env-changed=REAL_LIBRARY_PATH_VAR\");\n-    println!(\"cargo:rerun-if-env-changed=REAL_LIBRARY_PATH\");\n-    let key = env::var_os(\"REAL_LIBRARY_PATH_VAR\").expect(\"REAL_LIBRARY_PATH_VAR\");\n-    if let Some(env) = env::var_os(\"REAL_LIBRARY_PATH\") {\n+    let key = tracked_env_var_os(\"REAL_LIBRARY_PATH_VAR\").expect(\"REAL_LIBRARY_PATH_VAR\");\n+    if let Some(env) = tracked_env_var_os(\"REAL_LIBRARY_PATH\") {\n         env::set_var(&key, &env);\n     } else {\n         env::remove_var(&key);"}, {"sha": "21b8080714c1744ca54130adbb6325ece0082bff", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/461c5764577414d0232508177f8099a27b96b303/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461c5764577414d0232508177f8099a27b96b303/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=461c5764577414d0232508177f8099a27b96b303", "patch": "@@ -2,21 +2,20 @@ use std::env;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use build_helper::output;\n+use build_helper::{output, tracked_env_var_os};\n \n fn detect_llvm_link() -> (&'static str, &'static str) {\n     // Force the link mode we want, preferring static by default, but\n     // possibly overridden by `configure --enable-llvm-link-shared`.\n-    if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n+    if tracked_env_var_os(\"LLVM_LINK_SHARED\").is_some() {\n         (\"dylib\", \"--link-shared\")\n     } else {\n         (\"static\", \"--link-static\")\n     }\n }\n \n fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUST_CHECK\");\n-    if env::var_os(\"RUST_CHECK\").is_some() {\n+    if tracked_env_var_os(\"RUST_CHECK\").is_some() {\n         // If we're just running `check`, there's no need for LLVM to be built.\n         return;\n     }\n@@ -25,8 +24,8 @@ fn main() {\n \n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config =\n-        env::var_os(\"LLVM_CONFIG\").map(|x| Some(PathBuf::from(x))).unwrap_or_else(|| {\n-            if let Some(dir) = env::var_os(\"CARGO_TARGET_DIR\").map(PathBuf::from) {\n+        tracked_env_var_os(\"LLVM_CONFIG\").map(|x| Some(PathBuf::from(x))).unwrap_or_else(|| {\n+            if let Some(dir) = tracked_env_var_os(\"CARGO_TARGET_DIR\").map(PathBuf::from) {\n                 let to_test = dir\n                     .parent()\n                     .unwrap()\n@@ -46,8 +45,6 @@ fn main() {\n     }\n     let llvm_config = llvm_config.unwrap_or_else(|| PathBuf::from(\"llvm-config\"));\n \n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-\n     // Test whether we're cross-compiling LLVM. This is a pretty rare case\n     // currently where we're producing an LLVM for a different platform than\n     // what this build script is currently running on.\n@@ -163,12 +160,11 @@ fn main() {\n         cfg.define(&flag, None);\n     }\n \n-    println!(\"cargo:rerun-if-env-changed=LLVM_RUSTLLVM\");\n-    if env::var_os(\"LLVM_RUSTLLVM\").is_some() {\n+    if tracked_env_var_os(\"LLVM_RUSTLLVM\").is_some() {\n         cfg.define(\"LLVM_RUSTLLVM\", None);\n     }\n \n-    if env::var_os(\"LLVM_NDEBUG\").is_some() {\n+    if tracked_env_var_os(\"LLVM_NDEBUG\").is_some() {\n         cfg.define(\"NDEBUG\", None);\n         cfg.debug(false);\n     }\n@@ -255,7 +251,7 @@ fn main() {\n     // librustc_llvm, for example when using static libc++, we may need to\n     // manually specify the library search path and -ldl -lpthread as link\n     // dependencies.\n-    let llvm_linker_flags = env::var_os(\"LLVM_LINKER_FLAGS\");\n+    let llvm_linker_flags = tracked_env_var_os(\"LLVM_LINKER_FLAGS\");\n     if let Some(s) = llvm_linker_flags {\n         for lib in s.into_string().unwrap().split_whitespace() {\n             if lib.starts_with(\"-l\") {\n@@ -266,8 +262,8 @@ fn main() {\n         }\n     }\n \n-    let llvm_static_stdcpp = env::var_os(\"LLVM_STATIC_STDCPP\");\n-    let llvm_use_libcxx = env::var_os(\"LLVM_USE_LIBCXX\");\n+    let llvm_static_stdcpp = tracked_env_var_os(\"LLVM_STATIC_STDCPP\");\n+    let llvm_use_libcxx = tracked_env_var_os(\"LLVM_USE_LIBCXX\");\n \n     let stdcppname = if target.contains(\"openbsd\") {\n         if target.contains(\"sparc64\") { \"estdc++\" } else { \"c++\" }"}]}