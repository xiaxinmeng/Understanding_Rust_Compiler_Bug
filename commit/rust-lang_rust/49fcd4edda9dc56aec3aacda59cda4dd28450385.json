{"sha": "49fcd4edda9dc56aec3aacda59cda4dd28450385", "node_id": "C_kwDOAAsO6NoAKDQ5ZmNkNGVkZGE5ZGM1NmFlYzNhYWNkYTU5Y2RhNGRkMjg0NTAzODU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-25T08:47:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-25T08:47:33Z"}, "message": "fix: Fix vscode workspaces not working properly", "tree": {"sha": "8efebc2d907823398c6b9938fd45ca5fef80c95a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8efebc2d907823398c6b9938fd45ca5fef80c95a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49fcd4edda9dc56aec3aacda59cda4dd28450385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49fcd4edda9dc56aec3aacda59cda4dd28450385", "html_url": "https://github.com/rust-lang/rust/commit/49fcd4edda9dc56aec3aacda59cda4dd28450385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49fcd4edda9dc56aec3aacda59cda4dd28450385/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cebc018e2ab1779ab68bfe8f4d0bb38986c52596", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebc018e2ab1779ab68bfe8f4d0bb38986c52596", "html_url": "https://github.com/rust-lang/rust/commit/cebc018e2ab1779ab68bfe8f4d0bb38986c52596"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "8de13a39c08fc54f239601d72026ea16f79b7abe", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49fcd4edda9dc56aec3aacda59cda4dd28450385/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49fcd4edda9dc56aec3aacda59cda4dd28450385/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=49fcd4edda9dc56aec3aacda59cda4dd28450385", "patch": "@@ -102,6 +102,7 @@ pub trait ExpandDatabase: SourceDatabase {\n     #[salsa::transparent]\n     fn parse_or_expand_with_err(&self, file_id: HirFileId) -> ExpandResult<Parse<SyntaxNode>>;\n     /// Implementation for the macro case.\n+    // This query is LRU cached\n     fn parse_macro_expansion(\n         &self,\n         macro_file: MacroFile,\n@@ -130,11 +131,12 @@ pub trait ExpandDatabase: SourceDatabase {\n     fn macro_def(&self, id: MacroDefId) -> Result<Arc<TokenExpander>, mbe::ParseError>;\n \n     /// Expand macro call to a token tree.\n+    // This query is LRU cached\n     fn macro_expand(&self, macro_call: MacroCallId) -> ExpandResult<Arc<tt::Subtree>>;\n     /// Special case of the previous query for procedural macros. We can't LRU\n     /// proc macros, since they are not deterministic in general, and\n-    /// non-determinism breaks salsa in a very, very, very bad way. @edwin0cheng\n-    /// heroically debugged this once!\n+    /// non-determinism breaks salsa in a very, very, very bad way.\n+    /// @edwin0cheng heroically debugged this once!\n     fn expand_proc_macro(&self, call: MacroCallId) -> ExpandResult<tt::Subtree>;\n     /// Firewall query that returns the errors from the `parse_macro_expansion` query.\n     fn parse_macro_expansion_error("}, {"sha": "d81bb647194cac62ae05fcb3156192ca51b613ff", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/49fcd4edda9dc56aec3aacda59cda4dd28450385/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49fcd4edda9dc56aec3aacda59cda4dd28450385/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=49fcd4edda9dc56aec3aacda59cda4dd28450385", "patch": "@@ -54,8 +54,8 @@ pub fn expand_eager_macro(\n     let expand_to = ExpandTo::from_call_site(&macro_call.value);\n \n     // Note:\n-    // When `lazy_expand` is called, its *parent* file must be already exists.\n-    // Here we store an eager macro id for the argument expanded subtree here\n+    // When `lazy_expand` is called, its *parent* file must already exist.\n+    // Here we store an eager macro id for the argument expanded subtree\n     // for that purpose.\n     let arg_id = db.intern_macro_call(MacroCallLoc {\n         def,\n@@ -79,7 +79,11 @@ pub fn expand_eager_macro(\n     let Some(value ) = value else {\n         return Ok(ExpandResult { value: None, err })\n     };\n-    let subtree = to_subtree(&value);\n+    let subtree = {\n+        let mut subtree = mbe::syntax_node_to_token_tree(&value).0;\n+        subtree.delimiter = crate::tt::Delimiter::unspecified();\n+        subtree\n+    };\n \n     let res = eager.expand(db, arg_id, &subtree);\n     if err.is_none() {\n@@ -100,12 +104,6 @@ pub fn expand_eager_macro(\n     Ok(ExpandResult { value: Some(db.intern_macro_call(loc)), err })\n }\n \n-fn to_subtree(node: &SyntaxNode) -> crate::tt::Subtree {\n-    let mut subtree = mbe::syntax_node_to_token_tree(node).0;\n-    subtree.delimiter = crate::tt::Delimiter::unspecified();\n-    subtree\n-}\n-\n fn lazy_expand(\n     db: &dyn ExpandDatabase,\n     def: &MacroDefId,\n@@ -121,7 +119,8 @@ fn lazy_expand(\n         MacroCallKind::FnLike { ast_id: macro_call.with_value(ast_id), expand_to },\n     );\n \n-    db.parse_or_expand_with_err(id.as_file()).map(|parse| InFile::new(id.as_file(), parse))\n+    let file_id = id.as_file();\n+    db.parse_or_expand_with_err(file_id).map(|parse| InFile::new(file_id, parse))\n }\n \n fn eager_macro_recur("}, {"sha": "ef319d9b77fcfaedf8dc90e88c581d512bc61e49", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49fcd4edda9dc56aec3aacda59cda4dd28450385/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49fcd4edda9dc56aec3aacda59cda4dd28450385/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=49fcd4edda9dc56aec3aacda59cda4dd28450385", "patch": "@@ -215,13 +215,17 @@ impl GlobalState {\n                 let mut i = 0;\n                 while i < workspaces.len() {\n                     if let Ok(w) = &workspaces[i] {\n-                        if let Some(dupe) = workspaces[i + 1..]\n+                        let dupes: Vec<_> = workspaces\n                             .iter()\n-                            .filter_map(|it| it.as_ref().ok())\n-                            .position(|ws| ws.eq_ignore_build_data(w))\n-                        {\n-                            _ = workspaces.remove(dupe);\n-                        }\n+                            .enumerate()\n+                            .skip(i + 1)\n+                            .filter_map(|(i, it)| {\n+                                it.as_ref().ok().filter(|ws| ws.eq_ignore_build_data(w)).map(|_| i)\n+                            })\n+                            .collect();\n+                        dupes.into_iter().rev().for_each(|d| {\n+                            _ = workspaces.remove(d);\n+                        });\n                     }\n                     i += 1;\n                 }"}]}