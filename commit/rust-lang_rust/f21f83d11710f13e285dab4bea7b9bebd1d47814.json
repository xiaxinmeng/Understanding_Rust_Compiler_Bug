{"sha": "f21f83d11710f13e285dab4bea7b9bebd1d47814", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMWY4M2QxMTcxMGYxM2UyODVkYWI0YmVhN2I5YmViZDFkNDc4MTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-28T21:25:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-28T21:25:41Z"}, "message": "Rollup merge of #57045 - RalfJung:kill-more-uninit, r=SimonSapin\n\nKill remaining uses of mem::uninitialized in libcore, liballoc\n\nKill remaining uses of mem::uninitialized in libcore and liballoc, and enable a lint that will warn when uses are added again in the future.\n\nTo avoid casting raw pointers around (which is always very dangerous because it is not typechecked at all -- it doesn't even get the \"same size\" sanity check that `transmute` gets), I also added two new functions to `MaybeUninit`:\n\n```rust\n    /// Get a pointer to the first contained values.\n    pub fn first_ptr(this: &[MaybeUninit<T>]) -> *const T {\n        this as *const [MaybeUninit<T>] as *const T\n    }\n\n    /// Get a mutable pointer to the first contained values.\n    pub fn first_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n        this as *mut [MaybeUninit<T>] as *mut T\n    }\n```\n\nI changed some of the existing code to use array-of-`MaybeUninit` instead of `MaybeUninit`-of-array, successfully removing raw pointer casts there as well.", "tree": {"sha": "5107c096fdcbfc3170fc34efe95b28b02ac3033e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5107c096fdcbfc3170fc34efe95b28b02ac3033e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f21f83d11710f13e285dab4bea7b9bebd1d47814", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcT3NVCRBK7hj4Ov3rIwAAdHIIAAPU5Ji8lp31x3zvkkrWBPRI\nzOa1oxlraZaYeEIeurS9iExscPxx95+kpn522xutunXsLUIfH1Vgrilm6sHmqrbg\nNmVWvID4T890D6QMauNelqpL7cJccCHpzB8NqEAACZ5hpMF+Kzav2xKj8yv2AnPN\nD2H99cP+8ou17Fe5VBRLzS1Vh40C4BhtKxcl4QiF+j97ORhJDzcB+yTbfi1X0cDC\nyhci9PSV9BiEuxsYfl6/iUOqEZKAr774ALeTn6UN7+G87bMan0obesW6m5HECxCv\nK81JEEuXR3s2k6ouXks7lhWW2sQBgr+QqppjzmwKoUkL9AJ0S/AB0QZXkSd6fR0=\n=PO8c\n-----END PGP SIGNATURE-----\n", "payload": "tree 5107c096fdcbfc3170fc34efe95b28b02ac3033e\nparent d8a0dd7ae88023bd09fa4b86c9ca1f6ed8095b43\nparent 489a79247ddf5da8090019ff4da4b688ad55afa7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548710741 +0100\ncommitter GitHub <noreply@github.com> 1548710741 +0100\n\nRollup merge of #57045 - RalfJung:kill-more-uninit, r=SimonSapin\n\nKill remaining uses of mem::uninitialized in libcore, liballoc\n\nKill remaining uses of mem::uninitialized in libcore and liballoc, and enable a lint that will warn when uses are added again in the future.\n\nTo avoid casting raw pointers around (which is always very dangerous because it is not typechecked at all -- it doesn't even get the \"same size\" sanity check that `transmute` gets), I also added two new functions to `MaybeUninit`:\n\n```rust\n    /// Get a pointer to the first contained values.\n    pub fn first_ptr(this: &[MaybeUninit<T>]) -> *const T {\n        this as *const [MaybeUninit<T>] as *const T\n    }\n\n    /// Get a mutable pointer to the first contained values.\n    pub fn first_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n        this as *mut [MaybeUninit<T>] as *mut T\n    }\n```\n\nI changed some of the existing code to use array-of-`MaybeUninit` instead of `MaybeUninit`-of-array, successfully removing raw pointer casts there as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f21f83d11710f13e285dab4bea7b9bebd1d47814", "html_url": "https://github.com/rust-lang/rust/commit/f21f83d11710f13e285dab4bea7b9bebd1d47814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f21f83d11710f13e285dab4bea7b9bebd1d47814/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a0dd7ae88023bd09fa4b86c9ca1f6ed8095b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a0dd7ae88023bd09fa4b86c9ca1f6ed8095b43", "html_url": "https://github.com/rust-lang/rust/commit/d8a0dd7ae88023bd09fa4b86c9ca1f6ed8095b43"}, {"sha": "489a79247ddf5da8090019ff4da4b688ad55afa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/489a79247ddf5da8090019ff4da4b688ad55afa7", "html_url": "https://github.com/rust-lang/rust/commit/489a79247ddf5da8090019ff4da4b688ad55afa7"}], "stats": {"total": 132, "additions": 85, "deletions": 47}, "files": [{"sha": "a6b09722e1c9497d2d70833dfdf3a2b4802108e4", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -330,19 +330,20 @@ def children_of_node(boxed_node, height, want_values):\n         leaf = node_ptr['data']\n     else:\n         leaf = node_ptr.dereference()\n-    keys = leaf['keys']['value']['value']\n+    keys = leaf['keys']\n     if want_values:\n-        values = leaf['vals']['value']['value']\n+        values = leaf['vals']\n     length = int(leaf['len'])\n     for i in xrange(0, length + 1):\n         if height > 0:\n-            for child in children_of_node(node_ptr['edges'][i], height - 1, want_values):\n+            child_ptr = node_ptr['edges'][i]['value']['value']\n+            for child in children_of_node(child_ptr, height - 1, want_values):\n                 yield child\n         if i < length:\n             if want_values:\n-                yield (keys[i], values[i])\n+                yield (keys[i]['value']['value'], values[i]['value']['value'])\n             else:\n-                yield keys[i]\n+                yield keys[i]['value']['value']\n \n class RustStdBTreeSetPrinter(object):\n     def __init__(self, val):"}, {"sha": "b47337e44b2fed5627fc4eb99bbd33a53002b737", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -380,7 +380,6 @@ impl<'a, B: ?Sized> Hash for Cow<'a, B>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized + ToOwned> AsRef<T> for Cow<'a, T> {\n     fn as_ref(&self) -> &T {\n         self"}, {"sha": "e969e119dbe880c5abcd15512b3be9b4901af0e6", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -95,8 +95,8 @@ struct LeafNode<K, V> {\n \n     /// The arrays storing the actual data of the node. Only the first `len` elements of each\n     /// array are initialized and valid.\n-    keys: MaybeUninit<[K; CAPACITY]>,\n-    vals: MaybeUninit<[V; CAPACITY]>,\n+    keys: [MaybeUninit<K>; CAPACITY],\n+    vals: [MaybeUninit<V>; CAPACITY],\n }\n \n impl<K, V> LeafNode<K, V> {\n@@ -106,8 +106,8 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: MaybeUninit::uninitialized(),\n-            vals: MaybeUninit::uninitialized(),\n+            keys: uninitialized_array![_; CAPACITY],\n+            vals: uninitialized_array![_; CAPACITY],\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninitialized(),\n             len: 0\n@@ -145,7 +145,7 @@ struct InternalNode<K, V> {\n \n     /// The pointers to the children of this node. `len + 1` of these are considered\n     /// initialized and valid.\n-    edges: [BoxedNode<K, V>; 2 * B],\n+    edges: [MaybeUninit<BoxedNode<K, V>>; 2 * B],\n }\n \n impl<K, V> InternalNode<K, V> {\n@@ -159,7 +159,7 @@ impl<K, V> InternalNode<K, V> {\n     unsafe fn new() -> Self {\n         InternalNode {\n             data: LeafNode::new(),\n-            edges: mem::uninitialized()\n+            edges: uninitialized_array![_; 2*B],\n         }\n     }\n }\n@@ -261,7 +261,7 @@ impl<K, V> Root<K, V> {\n             -> NodeRef<marker::Mut, K, V, marker::Internal> {\n         debug_assert!(!self.is_shared_root());\n         let mut new_node = Box::new(unsafe { InternalNode::new() });\n-        new_node.edges[0] = unsafe { BoxedNode::from_ptr(self.node.as_ptr()) };\n+        new_node.edges[0].set(unsafe { BoxedNode::from_ptr(self.node.as_ptr()) });\n \n         self.node = BoxedNode::from_internal(new_node);\n         self.height += 1;\n@@ -623,7 +623,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n         // We cannot be the root, so `as_leaf` is okay\n         unsafe {\n             slice::from_raw_parts(\n-                self.as_leaf().vals.as_ptr() as *const V,\n+                MaybeUninit::first_ptr(&self.as_leaf().vals),\n                 self.len()\n             )\n         }\n@@ -650,7 +650,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         } else {\n             unsafe {\n                 slice::from_raw_parts_mut(\n-                    (*self.as_leaf_mut()).keys.as_mut_ptr() as *mut K,\n+                    MaybeUninit::first_ptr_mut(&mut (*self.as_leaf_mut()).keys),\n                     self.len()\n                 )\n             }\n@@ -661,7 +661,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts_mut(\n-                (*self.as_leaf_mut()).vals.as_mut_ptr() as *mut V,\n+                MaybeUninit::first_ptr_mut(&mut (*self.as_leaf_mut()).vals),\n                 self.len()\n             )\n         }\n@@ -718,7 +718,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n         unsafe {\n             ptr::write(self.keys_mut().get_unchecked_mut(idx), key);\n             ptr::write(self.vals_mut().get_unchecked_mut(idx), val);\n-            ptr::write(self.as_internal_mut().edges.get_unchecked_mut(idx + 1), edge.node);\n+            self.as_internal_mut().edges.get_unchecked_mut(idx + 1).set(edge.node);\n \n             (*self.as_leaf_mut()).len += 1;\n \n@@ -749,7 +749,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n             slice_insert(self.vals_mut(), 0, val);\n             slice_insert(\n                 slice::from_raw_parts_mut(\n-                    self.as_internal_mut().edges.as_mut_ptr(),\n+                    MaybeUninit::first_ptr_mut(&mut self.as_internal_mut().edges),\n                     self.len()+1\n                 ),\n                 0,\n@@ -778,7 +778,9 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n             let edge = match self.reborrow_mut().force() {\n                 ForceResult::Leaf(_) => None,\n                 ForceResult::Internal(internal) => {\n-                    let edge = ptr::read(internal.as_internal().edges.get_unchecked(idx + 1));\n+                    let edge = ptr::read(\n+                        internal.as_internal().edges.get_unchecked(idx + 1).as_ptr()\n+                    );\n                     let mut new_root = Root { node: edge, height: internal.height - 1 };\n                     (*new_root.as_mut().as_leaf_mut()).parent = ptr::null();\n                     Some(new_root)\n@@ -806,7 +808,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                 ForceResult::Internal(mut internal) => {\n                     let edge = slice_remove(\n                         slice::from_raw_parts_mut(\n-                            internal.as_internal_mut().edges.as_mut_ptr(),\n+                            MaybeUninit::first_ptr_mut(&mut internal.as_internal_mut().edges),\n                             old_len+1\n                         ),\n                         0\n@@ -1085,7 +1087,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n \n             slice_insert(\n                 slice::from_raw_parts_mut(\n-                    self.node.as_internal_mut().edges.as_mut_ptr(),\n+                    MaybeUninit::first_ptr_mut(&mut self.node.as_internal_mut().edges),\n                     self.node.len()\n                 ),\n                 self.idx + 1,\n@@ -1140,7 +1142,9 @@ impl<BorrowType, K, V>\n     pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n         NodeRef {\n             height: self.node.height - 1,\n-            node: unsafe { self.node.as_internal().edges.get_unchecked(self.idx).as_ptr() },\n+            node: unsafe {\n+                self.node.as_internal().edges.get_unchecked(self.idx).get_ref().as_ptr()\n+            },\n             root: self.node.root,\n             _marker: PhantomData\n         }"}, {"sha": "d2ff1bae635616c050cb0a5b40e886abc94dbc19", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -63,8 +63,9 @@\n #![no_std]\n #![needs_allocator]\n \n-#![deny(intra_doc_link_resolution_failure)]\n-#![deny(missing_debug_implementations)]\n+#![warn(deprecated_in_future)]\n+#![warn(intra_doc_link_resolution_failure)]\n+#![warn(missing_debug_implementations)]\n \n #![cfg_attr(not(test), feature(fn_traits))]\n #![cfg_attr(not(test), feature(generator_trait))]"}, {"sha": "c0dc010fe59a5df1260f5dde025468a07f1e7bc6", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -1,5 +1,3 @@\n-#![allow(deprecated)]\n-\n //! Single-threaded reference-counting pointers. 'Rc' stands for 'Reference\n //! Counted'.\n //!"}, {"sha": "530b2f52c0df2c352f2ea007ee697b2cfb2d4843", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -2048,7 +2048,7 @@ macro_rules! tuple {\n     ( $($name:ident,)+ ) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n-            #[allow(non_snake_case, unused_assignments, deprecated)]\n+            #[allow(non_snake_case, unused_assignments)]\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n                 let ($(ref $name,)*) = *self;"}, {"sha": "3a812337bb111e855f6053cb8c0088ae89f5f528", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -1,14 +1,12 @@\n //! Integer and floating-point number formatting\n \n-#![allow(deprecated)]\n-\n \n use fmt;\n use ops::{Div, Rem, Sub};\n use str;\n use slice;\n use ptr;\n-use mem;\n+use mem::MaybeUninit;\n \n #[doc(hidden)]\n trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n@@ -53,7 +51,7 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = T::zero();\n         let is_nonnegative = x >= zero;\n-        let mut buf: [u8; 128] = unsafe { mem::uninitialized() };\n+        let mut buf = uninitialized_array![u8; 128];\n         let mut curr = buf.len();\n         let base = T::from_u8(Self::BASE);\n         if is_nonnegative {\n@@ -62,7 +60,7 @@ trait GenericRadix {\n             for byte in buf.iter_mut().rev() {\n                 let n = x % base;               // Get the current place value.\n                 x = x / base;                   // Deaccumulate the number.\n-                *byte = Self::digit(n.to_u8()); // Store the digit in the buffer.\n+                byte.set(Self::digit(n.to_u8())); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n@@ -74,15 +72,19 @@ trait GenericRadix {\n             for byte in buf.iter_mut().rev() {\n                 let n = zero - (x % base);      // Get the current place value.\n                 x = x / base;                   // Deaccumulate the number.\n-                *byte = Self::digit(n.to_u8()); // Store the digit in the buffer.\n+                byte.set(Self::digit(n.to_u8())); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n                     break\n                 };\n             }\n         }\n-        let buf = unsafe { str::from_utf8_unchecked(&buf[curr..]) };\n+        let buf = &buf[curr..];\n+        let buf = unsafe { str::from_utf8_unchecked(slice::from_raw_parts(\n+            MaybeUninit::first_ptr(buf),\n+            buf.len()\n+        )) };\n         f.pad_integral(is_nonnegative, Self::PREFIX, buf)\n     }\n }\n@@ -196,9 +198,9 @@ macro_rules! impl_Display {\n                 // convert the negative num to positive by summing 1 to it's 2 complement\n                 (!self.$conv_fn()).wrapping_add(1)\n             };\n-            let mut buf: [u8; 39] = unsafe { mem::uninitialized() };\n+            let mut buf = uninitialized_array![u8; 39];\n             let mut curr = buf.len() as isize;\n-            let buf_ptr = buf.as_mut_ptr();\n+            let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n \n             unsafe {"}, {"sha": "18f09f4c5dda4fed7235733881a9f1caac40f236", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -1,6 +1,6 @@\n //! An implementation of SipHash.\n \n-#![allow(deprecated)]\n+#![allow(deprecated)] // the types in this module are deprecated\n \n use marker::PhantomData;\n use ptr;"}, {"sha": "1ef21832592ca5c32b58ad8cf9fb8c0e45f759a4", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -58,11 +58,12 @@\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n-\n #![no_core]\n-#![deny(missing_docs)]\n-#![deny(intra_doc_link_resolution_failure)]\n-#![deny(missing_debug_implementations)]\n+\n+#![warn(deprecated_in_future)]\n+#![warn(missing_docs)]\n+#![warn(intra_doc_link_resolution_failure)]\n+#![warn(missing_debug_implementations)]\n \n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n@@ -122,6 +123,7 @@\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n+#![feature(maybe_uninit)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "12b7adb8a9d268d828478153408ea6bcbe8f9da7", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -547,6 +547,23 @@ macro_rules! unimplemented {\n     ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n }\n \n+/// A macro to create an array of [`MaybeUninit`]\n+///\n+/// This macro constructs and uninitialized array of the type `[MaybeUninit<K>; N]`.\n+///\n+/// [`MaybeUninit`]: mem/union.MaybeUninit.html\n+#[macro_export]\n+#[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+macro_rules! uninitialized_array {\n+    // This `into_inner` is safe because an array of `MaybeUninit` does not\n+    // require initialization.\n+    // FIXME(#49147): Could be replaced by an array initializer, once those can\n+    // be any const expression.\n+    ($t:ty; $size:expr) => (unsafe {\n+        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninitialized().into_inner()\n+    });\n+}\n+\n /// Built-in macros to the compiler itself.\n ///\n /// These macros do not have any corresponding definition with a `macro_rules!`"}, {"sha": "8b6d9d882b5ad6d31c113c85535ab6cafbe9f06a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -1148,4 +1148,18 @@ impl<T> MaybeUninit<T> {\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         unsafe { &mut *self.value as *mut T }\n     }\n+\n+    /// Get a pointer to the first element of the array.\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    pub fn first_ptr(this: &[MaybeUninit<T>]) -> *const T {\n+        this as *const [MaybeUninit<T>] as *const T\n+    }\n+\n+    /// Get a mutable pointer to the first element of the array.\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    pub fn first_ptr_mut(this: &mut [MaybeUninit<T>]) -> *mut T {\n+        this as *mut [MaybeUninit<T>] as *mut T\n+    }\n }"}, {"sha": "3f84faa04993915091367dea8caff8b596e5767b", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21f83d11710f13e285dab4bea7b9bebd1d47814/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=f21f83d11710f13e285dab4bea7b9bebd1d47814", "patch": "@@ -216,14 +216,14 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n-    let mut offsets_l = MaybeUninit::<[u8; BLOCK]>::uninitialized();\n+    let mut offsets_l: [MaybeUninit<u8>; BLOCK] = uninitialized_array![u8; BLOCK];\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n     let mut end_r = ptr::null_mut();\n-    let mut offsets_r = MaybeUninit::<[u8; BLOCK]>::uninitialized();\n+    let mut offsets_r: [MaybeUninit<u8>; BLOCK] = uninitialized_array![u8; BLOCK];\n \n     // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n     // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient.\n@@ -262,8 +262,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_l == end_l {\n             // Trace `block_l` elements from the left side.\n-            start_l = offsets_l.as_mut_ptr() as *mut u8;\n-            end_l = offsets_l.as_mut_ptr() as *mut u8;\n+            start_l = MaybeUninit::first_ptr_mut(&mut offsets_l);\n+            end_l = MaybeUninit::first_ptr_mut(&mut offsets_l);\n             let mut elem = l;\n \n             for i in 0..block_l {\n@@ -278,8 +278,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_r == end_r {\n             // Trace `block_r` elements from the right side.\n-            start_r = offsets_r.as_mut_ptr() as *mut u8;\n-            end_r = offsets_r.as_mut_ptr() as *mut u8;\n+            start_r = MaybeUninit::first_ptr_mut(&mut offsets_r);\n+            end_r = MaybeUninit::first_ptr_mut(&mut offsets_r);\n             let mut elem = r;\n \n             for i in 0..block_r {"}]}