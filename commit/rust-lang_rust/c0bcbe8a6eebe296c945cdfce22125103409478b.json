{"sha": "c0bcbe8a6eebe296c945cdfce22125103409478b", "node_id": "C_kwDOAAsO6NoAKGMwYmNiZThhNmVlYmUyOTZjOTQ1Y2RmY2UyMjEyNTEwMzQwOTQ3OGI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-12T11:36:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-12T11:36:34Z"}, "message": "Rollup merge of #99038 - jackh726:earlybinder-cleanup, r=lcnr\n\nSome more `EarlyBinder` cleanups\n\nFirst commit has a couple unrelated cleanups, but otherwise each commit is self-explanatory\n\nr? rust-lang/types", "tree": {"sha": "c96d3249f60fe28302ab813456499827419f95db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c96d3249f60fe28302ab813456499827419f95db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0bcbe8a6eebe296c945cdfce22125103409478b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizVzDCRBK7hj4Ov3rIwAAceMIADIyXxiHRgyFluSHL/PZPyK0\nLDj68ppuXk3z+GOGjxoW2PrZ0hVDe0diOSOjcqLFz0DSioFg2i4OfH3bufiWSQYX\n/Apaz9DX/ZwssiFKC3SEKAj4q+XF7KPMYAg1mYrv2eXVTPVdjEQAyUTdTpPeTOa5\nVq1cuBHlbzy+v1FSPcgk8T9fgQki6W6FZCoEjxoTM5M70Iqob2nTE2TdxaldtfIZ\nnTIhc+BkDQSwaszrXHOy6Muo8Os00H71Pn++K0tim/S7fj+c+SYuxqFfHZv+qvZt\ngQQEy8slc7O87/ODPO/0KFyZdxIhAWRPmvjodU9z/q9sb4uyZXshKJFTr57ZXYU=\n=++h9\n-----END PGP SIGNATURE-----\n", "payload": "tree c96d3249f60fe28302ab813456499827419f95db\nparent 99fc65bc49d351b5466841b638f80676f554041f\nparent 988e754691ed754dbbaf25096cfd673dd1da69bc\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657625794 +0530\ncommitter GitHub <noreply@github.com> 1657625794 +0530\n\nRollup merge of #99038 - jackh726:earlybinder-cleanup, r=lcnr\n\nSome more `EarlyBinder` cleanups\n\nFirst commit has a couple unrelated cleanups, but otherwise each commit is self-explanatory\n\nr? rust-lang/types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bcbe8a6eebe296c945cdfce22125103409478b", "html_url": "https://github.com/rust-lang/rust/commit/c0bcbe8a6eebe296c945cdfce22125103409478b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0bcbe8a6eebe296c945cdfce22125103409478b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fc65bc49d351b5466841b638f80676f554041f", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fc65bc49d351b5466841b638f80676f554041f", "html_url": "https://github.com/rust-lang/rust/commit/99fc65bc49d351b5466841b638f80676f554041f"}, {"sha": "988e754691ed754dbbaf25096cfd673dd1da69bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/988e754691ed754dbbaf25096cfd673dd1da69bc", "html_url": "https://github.com/rust-lang/rust/commit/988e754691ed754dbbaf25096cfd673dd1da69bc"}], "stats": {"total": 102, "additions": 57, "deletions": 45}, "files": [{"sha": "add2df25884e3f1b7e1406b5e503f5dd9b0f0902", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -85,10 +85,10 @@ impl GenericParamDef {\n     ) -> Option<EarlyBinder<ty::GenericArg<'tcx>>> {\n         match self.kind {\n             GenericParamDefKind::Type { has_default, .. } if has_default => {\n-                Some(EarlyBinder(tcx.type_of(self.def_id).into()))\n+                Some(tcx.bound_type_of(self.def_id).map_bound(|t| t.into()))\n             }\n             GenericParamDefKind::Const { has_default } if has_default => {\n-                Some(EarlyBinder(tcx.const_param_default(self.def_id).into()))\n+                Some(tcx.bound_const_param_default(self.def_id).map_bound(|c| c.into()))\n             }\n             _ => None,\n         }"}, {"sha": "d663f1a3ec6e796c190c3589068505538c33259c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -932,6 +932,10 @@ impl<T> EarlyBinder<T> {\n         let value = f(self.0)?;\n         Ok(EarlyBinder(value))\n     }\n+\n+    pub fn rebind<U>(&self, value: U) -> EarlyBinder<U> {\n+        EarlyBinder(value)\n+    }\n }\n \n impl<T> EarlyBinder<Option<T>> {"}, {"sha": "4d2f69b23fa09adbe47a2a06f75dcce5b9d91c3f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -676,6 +676,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> ty::EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n         ty::EarlyBinder(self.item_bounds(def_id))\n     }\n+\n+    pub fn bound_const_param_default(self, def_id: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n+        ty::EarlyBinder(self.const_param_default(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "f3153a64820483513ca3d4fd1220e5ba7ad46204", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -537,13 +537,12 @@ fn build_call_shim<'tcx>(\n     };\n \n     let def_id = instance.def_id();\n-    let sig = tcx.fn_sig(def_id);\n-    let mut sig = tcx.erase_late_bound_regions(sig);\n+    let sig = tcx.bound_fn_sig(def_id);\n+    let sig = sig.map_bound(|sig| tcx.erase_late_bound_regions(sig));\n \n     assert_eq!(sig_substs.is_some(), !instance.has_polymorphic_mir_body());\n-    if let Some(sig_substs) = sig_substs {\n-        sig = EarlyBinder(sig).subst(tcx, sig_substs);\n-    }\n+    let mut sig =\n+        if let Some(sig_substs) = sig_substs { sig.subst(tcx, sig_substs) } else { sig.0 };\n \n     if let CallKind::Indirect(fnty) = call_kind {\n         // `sig` determines our local decls, and thus the callee type in the `Call` terminator. This"}, {"sha": "4862631980e36ee9798a2ba5780cc2ef4e3f3bfb", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -12,7 +12,7 @@ use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, GenericParamDefKind, Ty, TyCtxt};\n+use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n use rustc_span::def_id::DefId;\n \n@@ -555,7 +555,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                         let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n                         let bound =\n-                            EarlyBinder(bound.0.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n+                            bound.map_bound(|b| b.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n                         tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))\n                     };\n                 let normalized_bound = normalize_with_depth_to("}, {"sha": "1d4e64b6bfc303c747062128738b77ab0f989c76", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -550,7 +550,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            EarlyBinder(tcx.const_param_default(param.def_id))\n+                            tcx.bound_const_param_default(param.def_id)\n                                 .subst(tcx, substs.unwrap())\n                                 .into()\n                         } else {"}, {"sha": "d15d40bc24756938d26c1d53113fdfdd232eb04d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -1426,7 +1426,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n-                            EarlyBinder(tcx.const_param_default(param.def_id))\n+                            tcx.bound_const_param_default(param.def_id)\n                                 .subst(tcx, substs.unwrap())\n                                 .into()\n                         } else {"}, {"sha": "2de225303560c3108a82c5112b7685fc8a379a30", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -21,9 +21,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{\n-    self, EarlyBinder, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{\n@@ -713,7 +711,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             }\n \n             let (impl_ty, impl_substs) = self.impl_ty_and_substs(impl_def_id);\n-            let impl_ty = EarlyBinder(impl_ty).subst(self.tcx, impl_substs);\n+            let impl_ty = impl_ty.subst(self.tcx, impl_substs);\n \n             debug!(\"impl_ty: {:?}\", impl_ty);\n \n@@ -1811,9 +1809,12 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.erase_late_bound_regions(xform_fn_sig)\n     }\n \n-    /// Gets the type of an impl and generate substitutions with placeholders.\n-    fn impl_ty_and_substs(&self, impl_def_id: DefId) -> (Ty<'tcx>, SubstsRef<'tcx>) {\n-        (self.tcx.type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n+    /// Gets the type of an impl and generate substitutions with inference vars.\n+    fn impl_ty_and_substs(\n+        &self,\n+        impl_def_id: DefId,\n+    ) -> (ty::EarlyBinder<Ty<'tcx>>, SubstsRef<'tcx>) {\n+        (self.tcx.bound_type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n     }\n \n     fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {"}, {"sha": "7534482cce9bba7f3deccbe62887ac6e42554efa", "filename": "compiler/rustc_typeck/src/outlives/explicit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -6,19 +6,19 @@ use super::utils::*;\n \n #[derive(Debug)]\n pub struct ExplicitPredicatesMap<'tcx> {\n-    map: FxHashMap<DefId, RequiredPredicates<'tcx>>,\n+    map: FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>>,\n }\n \n impl<'tcx> ExplicitPredicatesMap<'tcx> {\n     pub fn new() -> ExplicitPredicatesMap<'tcx> {\n         ExplicitPredicatesMap { map: FxHashMap::default() }\n     }\n \n-    pub fn explicit_predicates_of(\n+    pub(crate) fn explicit_predicates_of(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n-    ) -> &RequiredPredicates<'tcx> {\n+    ) -> &ty::EarlyBinder<RequiredPredicates<'tcx>> {\n         self.map.entry(def_id).or_insert_with(|| {\n             let predicates = if def_id.is_local() {\n                 tcx.explicit_predicates_of(def_id)\n@@ -63,7 +63,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                 }\n             }\n \n-            required_predicates\n+            ty::EarlyBinder(required_predicates)\n         })\n     }\n }"}, {"sha": "257a9520eeb25f87fc269e8197fd32096430ba08", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n use super::explicit::ExplicitPredicatesMap;\n@@ -13,20 +13,19 @@ use super::utils::*;\n /// `global_inferred_outlives`: this is initially the empty map that\n ///     was generated by walking the items in the crate. This will\n ///     now be filled with inferred predicates.\n-pub fn infer_predicates<'tcx>(\n+pub(super) fn infer_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n-) -> FxHashMap<DefId, RequiredPredicates<'tcx>> {\n+) -> FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>> {\n     debug!(\"infer_predicates\");\n \n-    let mut predicates_added = true;\n+    let mut explicit_map = ExplicitPredicatesMap::new();\n \n     let mut global_inferred_outlives = FxHashMap::default();\n \n     // If new predicates were added then we need to re-calculate\n     // all crates since there could be new implied predicates.\n-    while predicates_added {\n-        predicates_added = false;\n+    'outer: loop {\n+        let mut predicates_added = false;\n \n         // Visit all the crates and infer predicates\n         for id in tcx.hir().items() {\n@@ -53,9 +52,9 @@ pub fn infer_predicates<'tcx>(\n                             tcx,\n                             field_ty,\n                             field_span,\n-                            &mut global_inferred_outlives,\n+                            &global_inferred_outlives,\n                             &mut item_required_predicates,\n-                            explicit_map,\n+                            &mut explicit_map,\n                         );\n                     }\n                 }\n@@ -70,12 +69,17 @@ pub fn infer_predicates<'tcx>(\n             // we walk the crates again and re-calculate predicates for all\n             // items.\n             let item_predicates_len: usize =\n-                global_inferred_outlives.get(&item_did.to_def_id()).map_or(0, |p| p.len());\n+                global_inferred_outlives.get(&item_did.to_def_id()).map_or(0, |p| p.0.len());\n             if item_required_predicates.len() > item_predicates_len {\n                 predicates_added = true;\n-                global_inferred_outlives.insert(item_did.to_def_id(), item_required_predicates);\n+                global_inferred_outlives\n+                    .insert(item_did.to_def_id(), ty::EarlyBinder(item_required_predicates));\n             }\n         }\n+\n+        if !predicates_added {\n+            break 'outer;\n+        }\n     }\n \n     global_inferred_outlives\n@@ -85,7 +89,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     field_ty: Ty<'tcx>,\n     field_span: Span,\n-    global_inferred_outlives: &FxHashMap<DefId, RequiredPredicates<'tcx>>,\n+    global_inferred_outlives: &FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>>,\n     required_predicates: &mut RequiredPredicates<'tcx>,\n     explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n ) {\n@@ -133,11 +137,13 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                 // 'a` holds for `Foo`.\n                 debug!(\"Adt\");\n                 if let Some(unsubstituted_predicates) = global_inferred_outlives.get(&def.did()) {\n-                    for (unsubstituted_predicate, &span) in unsubstituted_predicates {\n+                    for (unsubstituted_predicate, &span) in &unsubstituted_predicates.0 {\n                         // `unsubstituted_predicate` is `U: 'b` in the\n                         // example above.  So apply the substitution to\n                         // get `T: 'a` (or `predicate`):\n-                        let predicate = EarlyBinder(*unsubstituted_predicate).subst(tcx, substs);\n+                        let predicate = unsubstituted_predicates\n+                            .rebind(*unsubstituted_predicate)\n+                            .subst(tcx, substs);\n                         insert_outlives_predicate(\n                             tcx,\n                             predicate.0,\n@@ -224,7 +230,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n /// will give us `U: 'static` and `U: Foo`. The latter we\n /// can ignore, but we will want to process `U: 'static`,\n /// applying the substitution as above.\n-pub fn check_explicit_predicates<'tcx>(\n+fn check_explicit_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     substs: &[GenericArg<'tcx>],\n@@ -242,7 +248,7 @@ pub fn check_explicit_predicates<'tcx>(\n     );\n     let explicit_predicates = explicit_map.explicit_predicates_of(tcx, def_id);\n \n-    for (outlives_predicate, &span) in explicit_predicates {\n+    for (outlives_predicate, &span) in &explicit_predicates.0 {\n         debug!(\"outlives_predicate = {:?}\", &outlives_predicate);\n \n         // Careful: If we are inferring the effects of a `dyn Trait<..>`\n@@ -287,7 +293,7 @@ pub fn check_explicit_predicates<'tcx>(\n             continue;\n         }\n \n-        let predicate = EarlyBinder(*outlives_predicate).subst(tcx, substs);\n+        let predicate = explicit_predicates.rebind(*outlives_predicate).subst(tcx, substs);\n         debug!(\"predicate = {:?}\", &predicate);\n         insert_outlives_predicate(tcx, predicate.0, predicate.1, span, required_predicates);\n     }"}, {"sha": "8fa65d51e3ba16cad63b955716d377928eb33da7", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -88,9 +88,7 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     // for the type.\n \n     // Compute the inferred predicates\n-    let mut exp_map = explicit::ExplicitPredicatesMap::new();\n-\n-    let global_inferred_outlives = implicit_infer::infer_predicates(tcx, &mut exp_map);\n+    let global_inferred_outlives = implicit_infer::infer_predicates(tcx);\n \n     // Convert the inferred predicates into the \"collected\" form the\n     // global data structure expects.\n@@ -100,7 +98,7 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     let predicates = global_inferred_outlives\n         .iter()\n         .map(|(&def_id, set)| {\n-            let predicates = &*tcx.arena.alloc_from_iter(set.iter().filter_map(\n+            let predicates = &*tcx.arena.alloc_from_iter(set.0.iter().filter_map(\n                 |(ty::OutlivesPredicate(kind1, region2), &span)| {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some(("}, {"sha": "b718ca942133674130857776d1bab4c34b215f12", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bcbe8a6eebe296c945cdfce22125103409478b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=c0bcbe8a6eebe296c945cdfce22125103409478b", "patch": "@@ -7,12 +7,12 @@ use std::collections::BTreeMap;\n \n /// Tracks the `T: 'a` or `'a: 'a` predicates that we have inferred\n /// must be added to the struct header.\n-pub type RequiredPredicates<'tcx> =\n+pub(crate) type RequiredPredicates<'tcx> =\n     BTreeMap<ty::OutlivesPredicate<GenericArg<'tcx>, ty::Region<'tcx>>, Span>;\n \n /// Given a requirement `T: 'a` or `'b: 'a`, deduce the\n /// outlives_component and add it to `required_predicates`\n-pub fn insert_outlives_predicate<'tcx>(\n+pub(crate) fn insert_outlives_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     kind: GenericArg<'tcx>,\n     outlived_region: Region<'tcx>,"}]}