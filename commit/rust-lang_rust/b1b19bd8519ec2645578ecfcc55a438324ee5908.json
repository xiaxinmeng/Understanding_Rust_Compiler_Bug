{"sha": "b1b19bd8519ec2645578ecfcc55a438324ee5908", "node_id": "C_kwDOAAsO6NoAKGIxYjE5YmQ4NTE5ZWMyNjQ1NTc4ZWNmY2M1NWE0MzgzMjRlZTU5MDg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-03T17:30:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T00:43:13Z"}, "message": "get_parent and find_parent", "tree": {"sha": "4e5cba81a94db7102c5a202b6f6a76a37ab47974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e5cba81a94db7102c5a202b6f6a76a37ab47974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b19bd8519ec2645578ecfcc55a438324ee5908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b19bd8519ec2645578ecfcc55a438324ee5908", "html_url": "https://github.com/rust-lang/rust/commit/b1b19bd8519ec2645578ecfcc55a438324ee5908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b19bd8519ec2645578ecfcc55a438324ee5908/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af339dbfac612c13ae3811b70a066f6babc5e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af339dbfac612c13ae3811b70a066f6babc5e02", "html_url": "https://github.com/rust-lang/rust/commit/6af339dbfac612c13ae3811b70a066f6babc5e02"}], "stats": {"total": 179, "additions": 86, "deletions": 93}, "files": [{"sha": "bc897ed8112e59e5659dde99527a1452abae6be2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -3460,7 +3460,7 @@ impl<'hir> Node<'hir> {\n     /// ```ignore (illustrative)\n     /// ctor\n     ///     .ctor_hir_id()\n-    ///     .and_then(|ctor_id| tcx.hir().find(tcx.hir().parent_id(ctor_id)))\n+    ///     .and_then(|ctor_id| tcx.hir().find_parent(ctor_id))\n     ///     .and_then(|parent| parent.ident())\n     /// ```\n     pub fn ident(&self) -> Option<Ident> {"}, {"sha": "1b334f65b9ecc3db7c87de76942c6de04431c16b", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -2936,7 +2936,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), ident, .. }) =\n             hir.get(fn_hir_id) else { return None };\n         let hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(i), .. }) =\n-                hir.get(hir.parent_id(fn_hir_id)) else { bug!(\"ImplItem should have Impl parent\") };\n+                hir.get_parent(fn_hir_id) else { bug!(\"ImplItem should have Impl parent\") };\n \n         let trait_ref = self.instantiate_mono_trait_ref(\n             i.of_trait.as_ref()?,"}, {"sha": "86ee18c04ec075cac3c82ac7eea79db626cae939", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -1108,7 +1108,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), generics, .. }) => {\n             // Do not try to infer the return type for a impl method coming from a trait\n             if let Item(hir::Item { kind: ItemKind::Impl(i), .. }) =\n-                tcx.hir().get(tcx.hir().parent_id(hir_id))\n+                tcx.hir().get_parent(hir_id)\n                 && i.of_trait.is_some()\n             {\n                 <dyn AstConv<'_>>::ty_of_fn("}, {"sha": "96221c3e3d86e1326c0ab330f7c847b820bb8ec1", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -103,7 +103,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // `min_const_generics`.\n                 Some(parent_def_id.to_def_id())\n             } else {\n-                let parent_node = tcx.hir().get(tcx.hir().parent_id(hir_id));\n+                let parent_node = tcx.hir().get_parent(hir_id);\n                 match parent_node {\n                     // HACK(eddyb) this provides the correct generics for repeat\n                     // expressions' count (i.e. `N` in `[x; N]`), and explicit\n@@ -320,7 +320,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n \n     // provide junk type parameter defs for const blocks.\n     if let Node::AnonConst(_) = node {\n-        let parent_node = tcx.hir().get(tcx.hir().parent_id(hir_id));\n+        let parent_node = tcx.hir().get_parent(hir_id);\n         if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n             params.push(ty::GenericParamDef {\n                 index: next_index(),"}, {"sha": "1f9a9f80302e3590957b9ef5a7d466ddfd860c1e", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -402,7 +402,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         }\n \n         Node::AnonConst(_) => {\n-            let parent_node = tcx.hir().get(tcx.hir().parent_id(hir_id));\n+            let parent_node = tcx.hir().get_parent(hir_id);\n             match parent_node {\n                 Node::Ty(&Ty { kind: TyKind::Array(_, ref constant), .. })\n                 | Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n@@ -445,7 +445,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         ..\n                     },\n                 ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get(tcx.hir().parent_id(binding_id))\n+                    tcx.hir().get_parent(binding_id)\n                     && e.hir_id == hir_id =>\n                 {\n                     let Some(trait_def_id) = trait_ref.trait_def_id() else {\n@@ -472,7 +472,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 Node::TypeBinding(\n                     binding @ &TypeBinding { hir_id: binding_id, gen_args, ref kind, .. },\n                 ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get(tcx.hir().parent_id(binding_id))\n+                    tcx.hir().get_parent(binding_id)\n                     && let Some((idx, _)) =\n                         gen_args.args.iter().enumerate().find(|(_, arg)| {\n                             if let GenericArg::Const(ct) = arg {"}, {"sha": "71a469784cd8debfc2b1b173dd3644a64c6a939b", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -294,10 +294,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         if let hir::Node::Block(block) = node {\n             // check that the body's parent is an fn\n-            let parent = self\n-                .tcx\n-                .hir()\n-                .get(self.tcx.hir().parent_id(self.tcx.hir().parent_id(block.hir_id)));\n+            let parent = self.tcx.hir().get_parent(self.tcx.hir().parent_id(block.hir_id));\n             if let (Some(expr), hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. })) =\n                 (&block.expr, parent)\n             {"}, {"sha": "9c6c53abf07488ce6d6b2c74243c0724ecd2b428", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -258,10 +258,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         hir::Path { res: hir::def::Res::Local(hir_id), .. },\n                     )) => {\n                         if let Some(hir::Node::Pat(pat)) = self.tcx.hir().find(*hir_id) {\n-                            let parent = self.tcx.hir().parent_id(pat.hir_id);\n                             primary_span = pat.span;\n                             secondary_span = pat.span;\n-                            match self.tcx.hir().find(parent) {\n+                            match self.tcx.hir().find_parent(pat.hir_id) {\n                                 Some(hir::Node::Local(hir::Local { ty: Some(ty), .. })) => {\n                                     primary_span = ty.span;\n                                     post_message = \" type\";\n@@ -857,7 +856,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => None,\n         }?;\n \n-        match hir.find(hir.parent_id(expr.hir_id))? {\n+        match hir.find_parent(expr.hir_id)? {\n             Node::ExprField(field) => {\n                 if field.ident.name == local.name && field.is_shorthand {\n                     return Some(local.name);\n@@ -1040,7 +1039,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(hir::Node::Expr(hir::Expr {\n                             kind: hir::ExprKind::Assign(..),\n                             ..\n-                        })) = self.tcx.hir().find(self.tcx.hir().parent_id(expr.hir_id))\n+                        })) = self.tcx.hir().find_parent(expr.hir_id)\n                         {\n                             if mutability.is_mut() {\n                                 // Suppressing this diagnostic, we'll properly print it in `check_expr_assign`\n@@ -1267,9 +1266,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut sugg = vec![];\n \n-        if let Some(hir::Node::ExprField(field)) =\n-            self.tcx.hir().find(self.tcx.hir().parent_id(expr.hir_id))\n-        {\n+        if let Some(hir::Node::ExprField(field)) = self.tcx.hir().find_parent(expr.hir_id) {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n             if field.is_shorthand {\n                 // This is a field literal"}, {"sha": "631749fcc0fa4f23260e1bdbd3683d1a72576213", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -1083,7 +1083,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n                 let hir = self.tcx.hir();\n                 if let hir::Node::Expr(hir::Expr { kind: ExprKind::If { .. }, .. }) =\n-                    hir.get(hir.parent_id(hir.parent_id(expr.hir_id)))\n+                    hir.get_parent(hir.parent_id(expr.hir_id))\n                 {\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_lo(),\n@@ -2462,7 +2462,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_label(field.span, \"method, not a field\");\n         let expr_is_call =\n             if let hir::Node::Expr(hir::Expr { kind: ExprKind::Call(callee, _args), .. }) =\n-                self.tcx.hir().get(self.tcx.hir().parent_id(expr.hir_id))\n+                self.tcx.hir().get_parent(expr.hir_id)\n             {\n                 expr.hir_id == callee.hir_id\n             } else {"}, {"sha": "634688de01a656fbdddff66dfa2b3fda88bac9d8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -1435,9 +1435,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn expr_in_place(&self, mut expr_id: hir::HirId) -> bool {\n         let mut contained_in_place = false;\n \n-        while let hir::Node::Expr(parent_expr) =\n-            self.tcx.hir().get(self.tcx.hir().parent_id(expr_id))\n-        {\n+        while let hir::Node::Expr(parent_expr) = self.tcx.hir().get_parent(expr_id) {\n             match &parent_expr.kind {\n                 hir::ExprKind::Assign(lhs, ..) | hir::ExprKind::AssignOp(_, lhs, ..) => {\n                     if lhs.hir_id == expr_id {"}, {"sha": "3de0f7c6f650609fec29fdf129a68bdb191d388d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -1803,7 +1803,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     hir_id: call_hir_id,\n                     span: call_span,\n                     ..\n-                }) = hir.get(hir.parent_id(expr.hir_id))\n+                }) = hir.get_parent(expr.hir_id)\n                     && callee.hir_id == expr.hir_id\n                 {\n                     if self.closure_span_overlaps_error(error, *call_span) {"}, {"sha": "dd9ea59eefc088033568143337f298f1f5f6471e", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -1451,7 +1451,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n                         let parent_node =\n-                            self.tcx.hir().get(self.tcx.hir().parent_id(hir_id));\n+                            self.tcx.hir().get_parent(hir_id);\n                         let msg = format!(\n                             \"you must specify a type for this binding, like `{}`\",\n                             concrete_type,"}, {"sha": "0143901f2d7a734b910815f5c56bcb7bff040e43", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -936,7 +936,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         res.descr(),\n                     ),\n                 );\n-                match self.tcx.hir().get(self.tcx.hir().parent_id(pat.hir_id)) {\n+                match self.tcx.hir().get_parent(pat.hir_id) {\n                     hir::Node::PatField(..) => {\n                         e.span_suggestion_verbose(\n                             ident.span.shrink_to_hi(),"}, {"sha": "5b02956a106c6cafa6775311a49921aafc355433", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -585,45 +585,42 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             let hir::StmtKind::Local(local) = &stmt.kind else { continue; };\n             local.pat.walk(&mut find_compatible_candidates);\n         }\n-        match hir.find(hir.parent_id(blk.hir_id)) {\n-            Some(hir::Node::Expr(hir::Expr { hir_id, .. })) => {\n-                match hir.find(hir.parent_id(*hir_id)) {\n-                    Some(hir::Node::Arm(hir::Arm { pat, .. })) => {\n-                        pat.walk(&mut find_compatible_candidates);\n-                    }\n-                    Some(\n-                        hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, _, body), .. })\n-                        | hir::Node::ImplItem(hir::ImplItem {\n-                            kind: hir::ImplItemKind::Fn(_, body),\n-                            ..\n-                        })\n-                        | hir::Node::TraitItem(hir::TraitItem {\n-                            kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body)),\n-                            ..\n-                        })\n-                        | hir::Node::Expr(hir::Expr {\n-                            kind: hir::ExprKind::Closure(hir::Closure { body, .. }),\n-                            ..\n-                        }),\n-                    ) => {\n-                        for param in hir.body(*body).params {\n-                            param.pat.walk(&mut find_compatible_candidates);\n-                        }\n-                    }\n-                    Some(hir::Node::Expr(hir::Expr {\n-                        kind:\n-                            hir::ExprKind::If(\n-                                hir::Expr { kind: hir::ExprKind::Let(let_), .. },\n-                                then_block,\n-                                _,\n-                            ),\n+        match hir.find_parent(blk.hir_id) {\n+            Some(hir::Node::Expr(hir::Expr { hir_id, .. })) => match hir.find_parent(*hir_id) {\n+                Some(hir::Node::Arm(hir::Arm { pat, .. })) => {\n+                    pat.walk(&mut find_compatible_candidates);\n+                }\n+                Some(\n+                    hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, _, body), .. })\n+                    | hir::Node::ImplItem(hir::ImplItem {\n+                        kind: hir::ImplItemKind::Fn(_, body), ..\n+                    })\n+                    | hir::Node::TraitItem(hir::TraitItem {\n+                        kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body)),\n+                        ..\n+                    })\n+                    | hir::Node::Expr(hir::Expr {\n+                        kind: hir::ExprKind::Closure(hir::Closure { body, .. }),\n                         ..\n-                    })) if then_block.hir_id == *hir_id => {\n-                        let_.pat.walk(&mut find_compatible_candidates);\n+                    }),\n+                ) => {\n+                    for param in hir.body(*body).params {\n+                        param.pat.walk(&mut find_compatible_candidates);\n                     }\n-                    _ => {}\n                 }\n-            }\n+                Some(hir::Node::Expr(hir::Expr {\n+                    kind:\n+                        hir::ExprKind::If(\n+                            hir::Expr { kind: hir::ExprKind::Let(let_), .. },\n+                            then_block,\n+                            _,\n+                        ),\n+                    ..\n+                })) if then_block.hir_id == *hir_id => {\n+                    let_.pat.walk(&mut find_compatible_candidates);\n+                }\n+                _ => {}\n+            },\n             _ => {}\n         }\n "}, {"sha": "d58168ff37721d71cde3c8b28a271f79920a2fe6", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -1526,7 +1526,7 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         let map = cx.tcx.hir();\n-        if matches!(map.get(map.parent_id(field.hir_id)), Node::Variant(_)) {\n+        if matches!(map.get_parent(field.hir_id), Node::Variant(_)) {\n             return;\n         }\n         self.perform_lint(cx, \"field\", field.def_id, field.vis_span, false);"}, {"sha": "48902cd05695c751a1c1173fdbe4f2f7f571eaa1", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n             TyKind::Path(QPath::Resolved(_, path)) => {\n                 if lint_ty_kind_usage(cx, &path.res) {\n                     let hir = cx.tcx.hir();\n-                    let span = match hir.find(hir.parent_id(ty.hir_id)) {\n+                    let span = match hir.find_parent(ty.hir_id) {\n                         Some(Node::Pat(Pat {\n                             kind:\n                                 PatKind::Path(qpath)"}, {"sha": "f37d6e9a63d49f076c7ece809256944a18d6067d", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -444,7 +444,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n \n     fn check_pat(&mut self, cx: &LateContext<'_>, p: &hir::Pat<'_>) {\n         if let PatKind::Binding(_, hid, ident, _) = p.kind {\n-            if let hir::Node::PatField(field) = cx.tcx.hir().get(cx.tcx.hir().parent_id(hid)) {\n+            if let hir::Node::PatField(field) = cx.tcx.hir().get_parent(hid) {\n                 if !field.is_shorthand {\n                     // Only check if a new name has been introduced, to avoid warning\n                     // on both the struct definition and this pattern."}, {"sha": "fa415243ba066c99cc897973023aebff1ddd2479", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -129,8 +129,7 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     // which are represented as `ExprKind::Struct`.\n     let par_id = cx.tcx.hir().parent_id(expr.hir_id);\n     let Node::ExprField(field) = cx.tcx.hir().get(par_id) else { return false };\n-    let field_par_id = cx.tcx.hir().parent_id(field.hir_id);\n-    let Node::Expr(struct_expr) = cx.tcx.hir().get(field_par_id) else { return false };\n+    let Node::Expr(struct_expr) = cx.tcx.hir().get_parent(field.hir_id) else { return false };\n     if !is_range_literal(struct_expr) {\n         return false;\n     };"}, {"sha": "883554f959ccb65240f9361f9af2a278fcf92f1d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -246,7 +246,7 @@ impl<'hir> Map<'hir> {\n             },\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n-                let ctor_of = match self.find(self.parent_id(hir_id)) {\n+                let ctor_of = match self.find_parent(hir_id) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n@@ -257,7 +257,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::AnonConst(_) => {\n-                let inline = match self.find(self.parent_id(hir_id)) {\n+                let inline = match self.find_parent(hir_id) {\n                     Some(Node::Expr(&Expr {\n                         kind: ExprKind::ConstBlock(ref anon_const), ..\n                     })) if anon_const.hir_id == hir_id => true,\n@@ -317,6 +317,14 @@ impl<'hir> Map<'hir> {\n             .unwrap_or_else(|| bug!(\"No parent for node {:?}\", self.node_to_string(hir_id)))\n     }\n \n+    pub fn get_parent(self, hir_id: HirId) -> Node<'hir> {\n+        self.get(self.parent_id(hir_id))\n+    }\n+\n+    pub fn find_parent(self, hir_id: HirId) -> Option<Node<'hir>> {\n+        self.find(self.opt_parent_id(hir_id)?)\n+    }\n+\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(self, id: HirId) -> Option<Node<'hir>> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n@@ -664,7 +672,7 @@ impl<'hir> Map<'hir> {\n \n     /// Checks if the node is left-hand side of an assignment.\n     pub fn is_lhs(self, id: HirId) -> bool {\n-        match self.find(self.parent_id(id)) {\n+        match self.find_parent(id) {\n             Some(Node::Expr(expr)) => match expr.kind {\n                 ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,\n                 _ => false,\n@@ -892,7 +900,7 @@ impl<'hir> Map<'hir> {\n             Node::Pat(&Pat { kind: PatKind::Binding(_, _, ident, _), .. }) => Some(ident),\n             // A `Ctor` doesn't have an identifier itself, but its parent\n             // struct/variant does. Compare with `hir::Map::opt_span`.\n-            Node::Ctor(..) => match self.find(self.parent_id(id))? {\n+            Node::Ctor(..) => match self.find_parent(id)? {\n                 Node::Item(item) => Some(item.ident),\n                 Node::Variant(variant) => Some(variant.ident),\n                 _ => unreachable!(),\n@@ -1093,7 +1101,7 @@ impl<'hir> Map<'hir> {\n     /// Returns the HirId of `N` in `struct Foo<const N: usize = { ... }>` when\n     /// called with the HirId for the `{ ... }` anon const\n     pub fn opt_const_param_default_param_def_id(self, anon_const: HirId) -> Option<LocalDefId> {\n-        match self.get(self.parent_id(anon_const)) {\n+        match self.get_parent(anon_const) {\n             Node::GenericParam(GenericParam {\n                 def_id: param_id,\n                 kind: GenericParamKind::Const { .. },"}, {"sha": "50554cf9a82c85e7e53112ae0da4e6a3bb723f6e", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -457,7 +457,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                             .def_id\n                             .as_local()\n                             .map(|id| hir.local_def_id_to_hir_id(id))\n-                            .and_then(|id| self.hir().find(self.hir().parent_id(id)))\n+                            .and_then(|id| self.hir().find_parent(id))\n                             .as_ref()\n                             .and_then(|node| node.generics())\n                         {"}, {"sha": "8c2c182877496587a207501851fe73cbc882761f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -838,8 +838,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         let hir = self.tcx.hir();\n         let hir_id = hir.local_def_id_to_hir_id(def_id.as_local()?);\n-        let parent_node = hir.parent_id(hir_id);\n-        match hir.find(parent_node) {\n+        match hir.find_parent(hir_id) {\n             Some(hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(local), .. })) => {\n                 get_name(err, &local.pat.kind)\n             }\n@@ -3287,8 +3286,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n                 && let hir::Path { res: hir::def::Res::Local(hir_id), .. } = path\n                 && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(*hir_id)\n-                && let parent_hir_id = self.tcx.hir().parent_id(binding.hir_id)\n-                && let Some(parent) = self.tcx.hir().find(parent_hir_id)\n+                && let Some(parent) = self.tcx.hir().find_parent(binding.hir_id)\n             {\n                 // We've reached the root of the method call chain...\n                 if let hir::Node::Local(local) = parent"}, {"sha": "dfb43893326eb8a225ee72b7ef0ce5feaecd0886", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -131,7 +131,7 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n         _ => return false,\n     }\n \n-    matches!(map.find(map.parent_id(id)), Some(Node::Param(_)))\n+    matches!(map.find_parent(id), Some(Node::Param(_)))\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n@@ -157,7 +157,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             if is_argument(*map, cmt.hir_id) {\n                 // Skip closure arguments\n                 let parent_id = map.parent_id(cmt.hir_id);\n-                if let Some(Node::Expr(..)) = map.find(map.parent_id(parent_id)) {\n+                if let Some(Node::Expr(..)) = map.find_parent(parent_id) {\n                     return;\n                 }\n "}, {"sha": "38f41d077c161f941764e897216d62c4fdd60b55", "filename": "src/tools/clippy/clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && let Some(hir_id) = path_to_local(expr3)\n             && let Some(Node::Pat(_)) = cx.tcx.hir().find(hir_id) {\n                 // Apply only to params or locals with annotated types\n-                match cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n+                match cx.tcx.hir().find_parent(hir_id) {\n                     Some(Node::Param(..)) => (),\n                     Some(Node::Local(local)) => {\n                         let Some(ty) = local.ty else { return };"}, {"sha": "065a5c72621cd50e1617c767874a01f361a41dfb", "filename": "src/tools/clippy/clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -140,8 +140,8 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n fn opt_parent_assign_span<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<AssignmentExpr> {\n     let map = &cx.tcx.hir();\n \n-    if let Some(Node::Expr(parent_arm_expr)) = map.find(map.parent_id(ex.hir_id)) {\n-        return match map.find(map.parent_id(parent_arm_expr.hir_id)) {\n+    if let Some(Node::Expr(parent_arm_expr)) = map.find_parent(ex.hir_id) {\n+        return match map.find_parent(parent_arm_expr.hir_id) {\n             Some(Node::Local(parent_let_expr)) => Some(AssignmentExpr::Local {\n                 span: parent_let_expr.span,\n                 pat_span: parent_let_expr.pat.span(),\n@@ -183,8 +183,7 @@ fn sugg_with_curlies<'a>(\n \n     // If the parent is already an arm, and the body is another match statement,\n     // we need curly braces around suggestion\n-    let parent_node_id = cx.tcx.hir().parent_id(match_expr.hir_id);\n-    if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n+    if let Node::Arm(arm) = &cx.tcx.hir().get_parent(match_expr.hir_id) {\n         if let ExprKind::Match(..) = arm.body.kind {\n             cbrace_end = format!(\"\\n{indent}}}\");\n             // Fix body indent due to the match"}, {"sha": "1249db5dc4792307ed353ba64dfd959e8a7368b4", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "870a1c7d88d532bd6eadbf148acde49fd64b58be", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -299,7 +299,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "dd120599c04e1b9c6f0175a4644e4c14dd1b00c8", "filename": "src/tools/clippy/clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         return;\n     }\n     let map = &cx.tcx.hir();\n-    let opt_parent_node = map.find(map.parent_id(expr.hir_id));\n+    let opt_parent_node = map.find_parent(expr.hir_id);\n     if_chain! {\n         if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n         if is_questionmark_desugar_marked_call(parent_expr);\n@@ -192,7 +192,7 @@ fn fmt_stmts_and_call(\n \n     let mut stmts_and_call_snippet = stmts_and_call.join(&format!(\"{}{}\", \";\\n\", \" \".repeat(call_expr_indent)));\n     // expr is not in a block statement or result expression position, wrap in a block\n-    let parent_node = cx.tcx.hir().find(cx.tcx.hir().parent_id(call_expr.hir_id));\n+    let parent_node = cx.tcx.hir().find_parent(call_expr.hir_id);\n     if !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_))) {\n         let block_indent = call_expr_indent + 4;\n         stmts_and_call_snippet ="}, {"sha": "84ec0d0fb1cf4ccf42e4bf43e8b4c34f84d192c1", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         // Abort if the method is implementing a trait or of it a trait method.\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "c86f24cbd3780d5300ad1b4d278668e125d8ddf9", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -1058,7 +1058,7 @@ fn get_parent_local<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -\n fn get_parent_local_hir_id<'hir>(cx: &LateContext<'hir>, hir_id: hir::HirId) -> Option<&'hir hir::Local<'hir>> {\n     let map = cx.tcx.hir();\n \n-    match map.find(map.parent_id(hir_id)) {\n+    match map.find_parent((hir_id)) {\n         Some(hir::Node::Local(local)) => Some(local),\n         Some(hir::Node::Pat(pattern)) => get_parent_local_hir_id(cx, pattern.hir_id),\n         _ => None,"}, {"sha": "8290fe9ecb4c64593098395ff34389aa30ec4c06", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b19bd8519ec2645578ecfcc55a438324ee5908/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=b1b19bd8519ec2645578ecfcc55a438324ee5908", "patch": "@@ -1287,7 +1287,7 @@ pub fn contains_return(expr: &hir::Expr<'_>) -> bool {\n \n /// Gets the parent node, if any.\n pub fn get_parent_node(tcx: TyCtxt<'_>, id: HirId) -> Option<Node<'_>> {\n-    tcx.hir().parent_iter(id).next().map(|(_, node)| node)\n+    tcx.hir().find_parent(id)\n }\n \n /// Gets the parent expression, if any \u2013- this is useful to constrain a lint.\n@@ -2075,7 +2075,7 @@ pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n /// }\n /// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n-    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n         matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n     } else {\n         false"}]}