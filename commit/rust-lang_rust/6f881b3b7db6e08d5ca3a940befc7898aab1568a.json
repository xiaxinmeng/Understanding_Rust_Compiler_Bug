{"sha": "6f881b3b7db6e08d5ca3a940befc7898aab1568a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODgxYjNiN2RiNmUwOGQ1Y2EzYTk0MGJlZmM3ODk4YWFiMTU2OGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-18T07:54:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-26T10:29:01Z"}, "message": "might_permit_raw_init: also check aggregate fields", "tree": {"sha": "d95bb3fc1baeeaeb30a501bfe09fdd1cf6e3b792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d95bb3fc1baeeaeb30a501bfe09fdd1cf6e3b792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f881b3b7db6e08d5ca3a940befc7898aab1568a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f881b3b7db6e08d5ca3a940befc7898aab1568a", "html_url": "https://github.com/rust-lang/rust/commit/6f881b3b7db6e08d5ca3a940befc7898aab1568a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f881b3b7db6e08d5ca3a940befc7898aab1568a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e599b53e67ddd197a09a3d8720eed872df481aa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e599b53e67ddd197a09a3d8720eed872df481aa0", "html_url": "https://github.com/rust-lang/rust/commit/e599b53e67ddd197a09a3d8720eed872df481aa0"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "3c1a2ea39d3fcb323bcd9cfea42a684426a3dda8", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f881b3b7db6e08d5ca3a940befc7898aab1568a/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f881b3b7db6e08d5ca3a940befc7898aab1568a/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=6f881b3b7db6e08d5ca3a940befc7898aab1568a", "patch": "@@ -1135,16 +1135,31 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n             Abi::Scalar(s) => scalar_allows_raw_init(s),\n             Abi::ScalarPair(s1, s2) => scalar_allows_raw_init(s1) && scalar_allows_raw_init(s2),\n             Abi::Vector { element: s, count } => *count == 0 || scalar_allows_raw_init(s),\n-            Abi::Aggregate { .. } => true, // Cannot be excluded *right now*.\n+            Abi::Aggregate { .. } => true, // Fields are checked below.\n         };\n         if !valid {\n             // This is definitely not okay.\n-            trace!(\"might_permit_raw_init({:?}, zero={}): not valid\", self.layout, zero);\n             return Ok(false);\n         }\n \n-        // If we have not found an error yet, we need to recursively descend.\n-        // FIXME(#66151): For now, we are conservative and do not do this.\n+        // If we have not found an error yet, we need to recursively descend into fields.\n+        match &self.fields {\n+            FieldsShape::Primitive | FieldsShape::Union { .. } => {}\n+            FieldsShape::Array { .. } => {\n+                // FIXME(#66151): For now, we are conservative and do not check arrays.\n+            }\n+            FieldsShape::Arbitrary { offsets, .. } => {\n+                for idx in 0..offsets.len() {\n+                    let field = self.field(cx, idx).to_result()?;\n+                    if !field.might_permit_raw_init(cx, zero)? {\n+                        // We found a field that is unhappy with this kind of initialization.\n+                        return Ok(false);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // FIXME(#66151): For now, we are conservative and do not check `self.variants`.\n         Ok(true)\n     }\n }"}, {"sha": "24474cabf1e37f9ce868eb757b9d232adf2c8d76", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f881b3b7db6e08d5ca3a940befc7898aab1568a/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f881b3b7db6e08d5ca3a940befc7898aab1568a/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=6f881b3b7db6e08d5ca3a940befc7898aab1568a", "patch": "@@ -3,7 +3,7 @@\n \n // This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n \n-#![feature(never_type)]\n+#![feature(never_type, arbitrary_enum_discriminant)]\n #![allow(deprecated, invalid_value)]\n \n use std::{\n@@ -24,6 +24,20 @@ enum Bar {}\n #[allow(dead_code)]\n enum OneVariant { Variant(i32) }\n \n+#[allow(dead_code, non_camel_case_types)]\n+enum OneVariant_NonZero {\n+    Variant(i32, i32, num::NonZeroI32),\n+    DeadVariant(Bar),\n+}\n+\n+// An `Aggregate` abi enum where 0 is not a valid discriminant.\n+#[allow(dead_code)]\n+#[repr(i32)]\n+enum NoNullVariant {\n+    Variant1(i32, i32) = 1,\n+    Variant2(i32, i32) = 2,\n+}\n+\n // An enum with ScalarPair layout\n #[allow(dead_code)]\n enum LR {\n@@ -125,6 +139,7 @@ fn main() {\n             \"attempted to zero-initialize type `std::mem::ManuallyDrop<LR_NonZero>`, \\\n              which is invalid\"\n         );\n+        */\n \n         test_panic_msg(\n             || mem::uninitialized::<(NonNull<u32>, u32, u32)>(),\n@@ -136,7 +151,28 @@ fn main() {\n             \"attempted to zero-initialize type `(std::ptr::NonNull<u32>, u32, u32)`, \\\n                 which is invalid\"\n         );\n-        */\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<OneVariant_NonZero>(),\n+            \"attempted to leave type `OneVariant_NonZero` uninitialized, \\\n+                which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<OneVariant_NonZero>(),\n+            \"attempted to zero-initialize type `OneVariant_NonZero`, \\\n+                which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<NoNullVariant>(),\n+            \"attempted to leave type `NoNullVariant` uninitialized, \\\n+                which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<NoNullVariant>(),\n+            \"attempted to zero-initialize type `NoNullVariant`, \\\n+                which is invalid\"\n+        );\n \n         // Types that can be zero, but not uninit.\n         test_panic_msg("}]}