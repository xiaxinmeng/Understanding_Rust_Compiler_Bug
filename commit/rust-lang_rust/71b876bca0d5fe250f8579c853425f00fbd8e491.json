{"sha": "71b876bca0d5fe250f8579c853425f00fbd8e491", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYjg3NmJjYTBkNWZlMjUwZjg1NzljODUzNDI1ZjAwZmJkOGU0OTE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-28T07:56:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-28T07:56:20Z"}, "message": "Rollup merge of #45449 - frewsxcv:frewsxcv-udp-nonblocking, r=sfackler\n\nImprove docs for UdpSocket::set_nonblocking.\n\nCloses https://github.com/rust-lang/rust/issues/44050.", "tree": {"sha": "4687371f4d8dd28e867a8743a2ce59cbd78caff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4687371f4d8dd28e867a8743a2ce59cbd78caff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71b876bca0d5fe250f8579c853425f00fbd8e491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71b876bca0d5fe250f8579c853425f00fbd8e491", "html_url": "https://github.com/rust-lang/rust/commit/71b876bca0d5fe250f8579c853425f00fbd8e491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71b876bca0d5fe250f8579c853425f00fbd8e491/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b644339a167f8ab3303b7cbf9a4a97438f231b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/b644339a167f8ab3303b7cbf9a4a97438f231b87", "html_url": "https://github.com/rust-lang/rust/commit/b644339a167f8ab3303b7cbf9a4a97438f231b87"}, {"sha": "04f27f01cb25f63d25e07ed0a48a8ac4135371c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f27f01cb25f63d25e07ed0a48a8ac4135371c8", "html_url": "https://github.com/rust-lang/rust/commit/04f27f01cb25f63d25e07ed0a48a8ac4135371c8"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "84ceaa659510f0790bed3217c0c95dc4806d94e8", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/71b876bca0d5fe250f8579c853425f00fbd8e491/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b876bca0d5fe250f8579c853425f00fbd8e491/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=71b876bca0d5fe250f8579c853425f00fbd8e491", "patch": "@@ -721,16 +721,45 @@ impl UdpSocket {\n \n     /// Moves this UDP socket into or out of nonblocking mode.\n     ///\n-    /// On Unix this corresponds to calling fcntl, and on Windows this\n-    /// corresponds to calling ioctlsocket.\n+    /// This will result in `recv`, `recv_from`, `send`, and `send_to`\n+    /// operations becoming nonblocking, i.e. immediately returning from their\n+    /// calls. If the IO operation is successful, `Ok` is returned and no\n+    /// further action is required. If the IO operation could not be completed\n+    /// and needs to be retried, an error with kind\n+    /// [`io::ErrorKind::WouldBlock`] is returned.\n+    ///\n+    /// On Unix platforms, calling this method corresponds to calling `fcntl`\n+    /// `FIONBIO`. On Windows calling this method corresponds to calling\n+    /// `ioctlsocket` `FIONBIO`.\n+    ///\n+    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n     ///\n     /// # Examples\n     ///\n+    /// Create a UDP socket bound to `127.0.0.1:7878` and read bytes in\n+    /// nonblocking mode:\n+    ///\n     /// ```no_run\n+    /// use std::io;\n     /// use std::net::UdpSocket;\n     ///\n-    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n-    /// socket.set_nonblocking(true).expect(\"set_nonblocking call failed\");\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:7878\").unwrap();\n+    /// socket.set_nonblocking(true).unwrap();\n+    ///\n+    /// # fn wait_for_fd() { unimplemented!() }\n+    /// let mut buf = [0; 10];\n+    /// let (num_bytes_read, _) = loop {\n+    ///     match socket.recv_from(&mut buf) {\n+    ///         Ok(n) => break n,\n+    ///         Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+    ///             // wait until network socket is ready, typically implemented\n+    ///             // via platform-specific APIs such as epoll or IOCP\n+    ///             wait_for_fd();\n+    ///         }\n+    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///     }\n+    /// };\n+    /// println!(\"bytes: {:?}\", &buf[..num_bytes_read]);\n     /// ```\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {"}]}