{"sha": "80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwY2Y0ZWNkM2JmZTYwMjAwNDE0NWU1N2NmN2ZkZmIwNjdiNzZjZTE=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-06-30T01:07:04Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-07-12T01:52:10Z"}, "message": "Add nodes for embedding types and blocks in expressions for macros.", "tree": {"sha": "7fe2ceabdf59e39be101924ee18d6afdefcd00b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe2ceabdf59e39be101924ee18d6afdefcd00b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "html_url": "https://github.com/rust-lang/rust/commit/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd24fd5e318c5bfbe0cba49f0b49edd3c112f451", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451", "html_url": "https://github.com/rust-lang/rust/commit/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451"}], "stats": {"total": 103, "additions": 58, "deletions": 45}, "files": [{"sha": "26cefb3c0d615f807998b55181d52eb671e4ef59", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "patch": "@@ -323,7 +323,6 @@ tag expr_ {\n       to expr_if_check. */\n     expr_if_check(@expr, block, option::t[@expr]);\n     expr_port(option::t[@ty]);\n-    expr_chan(@expr);\n     expr_anon_obj(anon_obj, ty_param[]);\n }\n "}, {"sha": "659a527dbe2c3baad5f4d3ff40b775138ef23194", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "patch": "@@ -445,6 +445,12 @@ fn noop_fold_expr(&expr_ e, ast_fold fld) -> expr_ {\n         case (expr_anon_obj(?ao, ?typms)) {\n             expr_anon_obj(fold_anon_obj(ao), typms)\n                 }\n+        case (expr_embeded_type(?ty)) {\n+            expr_embeded_type(fld.fold_ty(ty))\n+        }\n+        case (expr_embeded_block(?blk)) {\n+            expr_embeded_block(fld.fold_block(blk))\n+        }\n     }\n }\n \n@@ -695,22 +701,6 @@ fn make_fold(&ast_fold_precursor afp) -> ast_fold {\n                   fold_path = bind f_path(afp,result,_),\n                   fold_local = bind f_local(afp,result,_));\n     ret result;\n-    /*\n-    ret rec(fold_crate = noop_fold_crate,\n-          fold_crate_directive = noop_fold_crate_drective,\n-          fold_view_item = noop_fold_view_item,\n-          fold_native_item = noop_fold_native_item,\n-          fold_item = noop_fold_item,\n-          fold_method = noop_fold_method,\n-          fold_block = noop_fold_block,\n-          fold_stmt = noop_fold_stmt,\n-          fold_arm = noop_fold_arm,\n-          fold_pat = noop_fold_pat,\n-          fold_decl = noop_fold_decl,\n-          fold_expr = noop_fold_expr,\n-          fold_ty = noop_fold_ty,\n-          fold_constr = noop_fold_constr,\n-          fold_fn = noop_fold_fn);*/\n }\n \n "}, {"sha": "21b1b7ee6342c3bb455b3a08a6e6a9e00ab5539d", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "patch": "@@ -361,12 +361,8 @@ fn next_token(&reader rdr) -> token::token {\n         } else { ret token::BINOP(op); }\n     }\n     alt (c) {\n-        case (\n-             // One-byte tokens.\n-             '?') {\n-            rdr.bump();\n-            ret token::QUES;\n-        }\n+        // One-byte tokens.\n+        case ('?') { rdr.bump(); ret token::QUES; }\n         case (';') { rdr.bump(); ret token::SEMI; }\n         case (',') { rdr.bump(); ret token::COMMA; }\n         case ('.') { rdr.bump(); ret token::DOT; }\n@@ -377,7 +373,18 @@ fn next_token(&reader rdr) -> token::token {\n         case ('[') { rdr.bump(); ret token::LBRACKET; }\n         case (']') { rdr.bump(); ret token::RBRACKET; }\n         case ('@') { rdr.bump(); ret token::AT; }\n-        case ('#') { rdr.bump(); ret token::POUND; }\n+        case ('#') { \n+            rdr.bump(); \n+            if (rdr.curr() == '<') {\n+                rdr.bump();\n+                ret token::POUND_LT;\n+            }\n+            if (rdr.curr() == '{') {\n+                rdr.bump();\n+                ret token::POUND_LBRACE;\n+            }\n+            ret token::POUND;\n+        }\n         case ('~') { rdr.bump(); ret token::TILDE; }\n         case (':') {\n             rdr.bump();\n@@ -386,9 +393,8 @@ fn next_token(&reader rdr) -> token::token {\n                 ret token::MOD_SEP;\n             } else { ret token::COLON; }\n         }\n-        case (\n-             // Multi-byte tokens.\n-             '=') {\n+        // Multi-byte tokens.\n+        case ('=') {\n             rdr.bump();\n             if (rdr.curr() == '=') {\n                 rdr.bump();"}, {"sha": "7d6fc8561cc38510279e2614e3cadfeda0fcb795", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "patch": "@@ -804,6 +804,13 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n             parse_seq_to_end_ivec(token::RBRACKET, some(token::COMMA),\n                                   parse_expr, p);\n         ex = ast::expr_vec(es, mut, ast::sk_rc);\n+    } else if (p.peek() == token::POUND_LT) {\n+        p.bump();\n+        ex = ast::expr_embeded_type(parse_ty(p));\n+        expect(p, token::GT);\n+    } else if (p.peek() == token::POUND_LBRACE) {\n+        p.bump();\n+        ex = ast::expr_embeded_block(parse_block_tail(p));\n     } else if (p.peek() == token::TILDE) {\n         p.bump();\n         alt (p.peek()) {\n@@ -1715,10 +1722,15 @@ fn stmt_ends_with_semi(&ast::stmt stmt) -> bool {\n }\n \n fn parse_block(&parser p) -> ast::block {\n+    expect(p, token::LBRACE);\n+    be parse_block_tail(p);\n+}\n+\n+// some blocks start with \"#{\"... \n+fn parse_block_tail(&parser p) -> ast::block {\n     auto lo = p.get_lo_pos();\n     let (@ast::stmt)[] stmts = ~[];\n     let option::t[@ast::expr] expr = none;\n-    expect(p, token::LBRACE);\n     while (p.peek() != token::RBRACE) {\n         alt (p.peek()) {\n             case (token::SEMI) {\n@@ -2204,8 +2216,10 @@ fn parse_outer_attrs_or_ext(&parser p) -> attr_or_ext {\n         if (p.peek() == token::LBRACKET) {\n             auto first_attr = parse_attribute_naked(p, ast::attr_outer, lo);\n             ret some(left(~[first_attr] + parse_outer_attributes(p)));\n-        } else {\n+        } else if (! (p.peek() == token::LT || p.peek() == token::LBRACKET)) {\n             ret some(right(parse_syntax_ext_naked(p, lo)));\n+        } else {\n+            ret none;\n         }\n     } else {\n         ret none;"}, {"sha": "6ba8c6ce525a38732d23be1fc30d275bbc6239cd", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "patch": "@@ -60,6 +60,8 @@ tag token {\n     LBRACE;\n     RBRACE;\n     POUND;\n+    POUND_LBRACE;\n+    POUND_LT;\n \n     /* Literals */\n     LIT_INT(int);\n@@ -110,11 +112,8 @@ fn to_str(lexer::reader r, token t) -> str {\n         case (ANDAND) { ret \"&&\"; }\n         case (BINOP(?op)) { ret binop_to_str(op); }\n         case (BINOPEQ(?op)) { ret binop_to_str(op) + \"=\"; }\n-        case (\n              /* Structural symbols */\n-             AT) {\n-            ret \"@\";\n-        }\n+        case (AT) { ret \"@\"; }\n         case (DOT) { ret \".\"; }\n         case (COMMA) { ret \",\"; }\n         case (SEMI) { ret \";\"; }\n@@ -133,11 +132,10 @@ fn to_str(lexer::reader r, token t) -> str {\n         case (LBRACE) { ret \"{\"; }\n         case (RBRACE) { ret \"}\"; }\n         case (POUND) { ret \"#\"; }\n-        case (\n+        case (POUND_LBRACE) { ret \"#{\"; }\n+        case (POUND_LT) { ret \"#<\"; }\n              /* Literals */\n-             LIT_INT(?i)) {\n-            ret int::to_str(i, 10u);\n-        }\n+        case (LIT_INT(?i)) { ret int::to_str(i, 10u); }\n         case (LIT_UINT(?u)) { ret uint::to_str(u, 10u); }\n         case (LIT_MACH_INT(?tm, ?i)) {\n             ret int::to_str(i, 10u) + \"_\" + ty_mach_to_str(tm);\n@@ -147,25 +145,19 @@ fn to_str(lexer::reader r, token t) -> str {\n                     ty_mach_to_str(tm);\n         }\n         case (LIT_FLOAT(?s)) { ret interner::get[str](*r.get_interner(), s); }\n-        case (LIT_STR(?s)) {\n-            // FIXME: escape.\n-\n+        case (LIT_STR(?s)) { // FIXME: escape.\n             ret \"\\\"\" + interner::get[str](*r.get_interner(), s) + \"\\\"\";\n         }\n         case (LIT_CHAR(?c)) {\n             // FIXME: escape.\n-\n             auto tmp = \"'\";\n             str::push_char(tmp, c);\n             str::push_byte(tmp, '\\'' as u8);\n             ret tmp;\n         }\n         case (LIT_BOOL(?b)) { if (b) { ret \"true\"; } else { ret \"false\"; } }\n-        case (\n              /* Name components */\n-             IDENT(?s, _)) {\n-            ret interner::get[str](*r.get_interner(), s);\n-        }\n+        case (IDENT(?s, _)) { ret interner::get[str](*r.get_interner(), s); }\n         case (IDX(?i)) { ret \"_\" + int::to_str(i, 10u); }\n         case (UNDERSCORE) { ret \"_\"; }\n         case (BRACEQUOTE(_)) { ret \"<bracequote>\"; }"}, {"sha": "71d44e29f804b9cdd01b3a2ca240ce8f725fd7c4", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "patch": "@@ -397,6 +397,12 @@ fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n                            m.node.id, e, v);\n             }\n         }\n+        case (expr_embeded_type(?ty)) {\n+            vt(v).visit_ty(ty, e, v);\n+        }\n+        case (expr_embeded_block(?blk)) {\n+            vt(v).visit_block(blk, e, v);\n+        }\n     }\n }\n "}, {"sha": "bc188b8c60408c7bb88a26b270e7596e51b61c84", "filename": "src/comp/syntax/walk.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80cf4ecd3bfe602004145e57cf7fdfb067b76ce1/src%2Fcomp%2Fsyntax%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fwalk.rs?ref=80cf4ecd3bfe602004145e57cf7fdfb067b76ce1", "patch": "@@ -410,6 +410,12 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n                 v.visit_method_post(m);\n             }\n         }\n+        case (ast::expr_embeded_type(?ty)) {\n+            walk_ty(v, ty);\n+        }\n+        case (ast::expr_embeded_block(?blk)) {\n+            walk_block(v, blk);\n+        }\n     }\n     v.visit_expr_post(e);\n }"}]}