{"sha": "95c07479dd9c7a0438a749638987deb15977cd92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzA3NDc5ZGQ5YzdhMDQzOGE3NDk2Mzg5ODdkZWIxNTk3N2NkOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-07T00:51:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-07T00:51:47Z"}, "message": "auto merge of #5182 : youknowone/rust/enum-cast, r=brson\n\nFix #4926", "tree": {"sha": "88f9aa57653a6d37493715cef3e899c1433db311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f9aa57653a6d37493715cef3e899c1433db311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c07479dd9c7a0438a749638987deb15977cd92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c07479dd9c7a0438a749638987deb15977cd92", "html_url": "https://github.com/rust-lang/rust/commit/95c07479dd9c7a0438a749638987deb15977cd92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c07479dd9c7a0438a749638987deb15977cd92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c3728f839acd5bc1a3e1e110be832506777f746", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c3728f839acd5bc1a3e1e110be832506777f746", "html_url": "https://github.com/rust-lang/rust/commit/8c3728f839acd5bc1a3e1e110be832506777f746"}, {"sha": "792181084244abc7ab361fd1db809c4217148304", "url": "https://api.github.com/repos/rust-lang/rust/commits/792181084244abc7ab361fd1db809c4217148304", "html_url": "https://github.com/rust-lang/rust/commit/792181084244abc7ab361fd1db809c4217148304"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "e585e433ef239624044d615848d7706c0f707dd0", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/95c07479dd9c7a0438a749638987deb15977cd92/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c07479dd9c7a0438a749638987deb15977cd92/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=95c07479dd9c7a0438a749638987deb15977cd92", "patch": "@@ -10,7 +10,7 @@\n \n use core::prelude::*;\n \n-use lib::llvm::{llvm, ValueRef, True, TypeRef, False};\n+use lib::llvm::{llvm, ValueRef, TypeRef, Bool, True, False};\n use middle::const_eval;\n use middle::trans::base;\n use middle::trans::base::get_insn_ctxt;\n@@ -323,7 +323,7 @@ fn const_expr_unchecked(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                    expr::cast_type_kind(ety)) {\n \n               (expr::cast_integral, expr::cast_integral) => {\n-                let s = if ty::type_is_signed(basety) { True } else { False };\n+                let s = ty::type_is_signed(basety) as Bool;\n                 llvm::LLVMConstIntCast(v, llty, s)\n               }\n               (expr::cast_integral, expr::cast_float) => {\n@@ -340,6 +340,37 @@ fn const_expr_unchecked(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                 if ty::type_is_signed(ety) { llvm::LLVMConstFPToSI(v, llty) }\n                 else { llvm::LLVMConstFPToUI(v, llty) }\n               }\n+              (expr::cast_enum, expr::cast_integral) |\n+              (expr::cast_enum, expr::cast_float)  => {\n+                let def = ty::resolve_expr(cx.tcx, base);\n+                let (enum_did, variant_did) = match def {\n+                    ast::def_variant(enum_did, variant_did) => {\n+                        (enum_did, variant_did)\n+                    }\n+                    _ => cx.sess.bug(~\"enum cast source is not enum\")\n+                };\n+                // Note that we know this is a C-like (nullary) enum\n+                // variant or we wouldn't have gotten here\n+                let variants = ty::enum_variants(cx.tcx, enum_did);\n+                let iv = if variants.len() == 1 {\n+                    // Univariants don't have a discriminant field,\n+                    // because there's only one value it could have:\n+                    C_integral(T_i64(),\n+                               variants[0].disr_val as u64, True)\n+                } else {\n+                    base::get_discrim_val(cx, e.span, enum_did, variant_did)\n+                };\n+                let ety_cast = expr::cast_type_kind(ety);\n+                match ety_cast {\n+                    expr::cast_integral => {\n+                        let s = ty::type_is_signed(ety) as Bool;\n+                        llvm::LLVMConstIntCast(iv, llty, s)\n+                    }\n+                    expr::cast_float => llvm::LLVMConstUIToFP(iv, llty),\n+                    _ => cx.sess.bug(~\"enum cast destination is not \\\n+                                       integral or float\")\n+                }\n+              }\n               _ => {\n                 cx.sess.impossible_case(e.span,\n                                         ~\"bad combination of types for cast\")"}, {"sha": "0cbc01deff214befa5c189dd9c9d5459fdf098b4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c07479dd9c7a0438a749638987deb15977cd92/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c07479dd9c7a0438a749638987deb15977cd92/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=95c07479dd9c7a0438a749638987deb15977cd92", "patch": "@@ -3040,7 +3040,7 @@ pub fn method_call_bounds(tcx: ctxt, method_map: typeck::method_map,\n     }\n }\n \n-fn resolve_expr(tcx: ctxt, expr: @ast::expr) -> ast::def {\n+pub fn resolve_expr(tcx: ctxt, expr: @ast::expr) -> ast::def {\n     match tcx.def_map.find(&expr.id) {\n         Some(def) => def,\n         None => {"}, {"sha": "eed5645776bcc322df07ea4c9d2f193d06983883", "filename": "src/test/run-pass/enum-cast.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/95c07479dd9c7a0438a749638987deb15977cd92/src%2Ftest%2Frun-pass%2Fenum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c07479dd9c7a0438a749638987deb15977cd92/src%2Ftest%2Frun-pass%2Fenum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-cast.rs?ref=95c07479dd9c7a0438a749638987deb15977cd92", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum A { A1, A2 }\n+enum B { B1=0, B2=2 }\n+\n+fn main () {\n+    const c1: int = A2 as int;\n+    const c2: int = B2 as int;\n+    const c3: float = A2 as float;\n+    const c4: float = B2 as float;\n+    let a1 = A2 as int;\n+    let a2 = B2 as int;\n+    let a3 = A2 as float;\n+    let a4 = B2 as float;\n+    assert(c1 == 1);\n+    assert(c2 == 2);\n+    assert(c3 == 1.0);\n+    assert(c4 == 2.0);\n+    assert(a1 == 1);\n+    assert(a2 == 2);\n+    assert(a3 == 1.0);\n+    assert(a4 == 2.0);\n+}"}]}