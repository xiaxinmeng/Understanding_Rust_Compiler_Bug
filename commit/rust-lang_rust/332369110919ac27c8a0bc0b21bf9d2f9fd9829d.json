{"sha": "332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjM2OTExMDkxOWFjMjdjOGEwYmMwYjIxYmY5ZDJmOWZkOTgyOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-20T18:02:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-20T18:02:46Z"}, "message": "Auto merge of #75747 - cuviper:rollup-icke90l, r=cuviper\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #75672 (Move to intra-doc links for task.rs and vec.rs)\n - #75702 (Clean up E0759 explanation)\n - #75703 (Enable stack-overflow detection on musl for non-main threads)\n - #75710 (Fix bad printing of const-eval queries)\n - #75716 (Upgrade Emscripten on CI to 1.39.20 )\n - #75731 (Suppress ty::Float in MIR comments of ty::Const)\n - #75733 (Remove duplicated alloc vec bench push_all_move)\n - #75743 (Rename rustc_lexer::TokenKind::Not to Bang)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7550284cf555c2114a04a390ba0bda55ae6973d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7550284cf555c2114a04a390ba0bda55ae6973d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "html_url": "https://github.com/rust-lang/rust/commit/332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814d252417cec7cfca98d75db0b3d89555d6d676", "url": "https://api.github.com/repos/rust-lang/rust/commits/814d252417cec7cfca98d75db0b3d89555d6d676", "html_url": "https://github.com/rust-lang/rust/commit/814d252417cec7cfca98d75db0b3d89555d6d676"}, {"sha": "2a3f43de428c70e140c7882174855165b1724f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3f43de428c70e140c7882174855165b1724f5f", "html_url": "https://github.com/rust-lang/rust/commit/2a3f43de428c70e140c7882174855165b1724f5f"}], "stats": {"total": 275, "additions": 131, "deletions": 144}, "files": [{"sha": "4e71eec03e5bff622aa9c9ee26ae7643f386ff2b", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 15, "deletions": 64, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -213,7 +213,7 @@ fn bench_extend_1000_1000(b: &mut Bencher) {\n     do_bench_extend(b, 1000, 1000)\n }\n \n-fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) {\n+fn do_bench_extend_from_slice(b: &mut Bencher, dst_len: usize, src_len: usize) {\n     let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n     let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n \n@@ -228,87 +228,38 @@ fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) {\n }\n \n #[bench]\n-fn bench_push_all_0000_0000(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 0)\n+fn bench_extend_from_slice_0000_0000(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 0, 0)\n }\n \n #[bench]\n-fn bench_push_all_0000_0010(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 10)\n+fn bench_extend_from_slice_0000_0010(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 0, 10)\n }\n \n #[bench]\n-fn bench_push_all_0000_0100(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 100)\n+fn bench_extend_from_slice_0000_0100(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 0, 100)\n }\n \n #[bench]\n-fn bench_push_all_0000_1000(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 1000)\n+fn bench_extend_from_slice_0000_1000(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 0, 1000)\n }\n \n #[bench]\n-fn bench_push_all_0010_0010(b: &mut Bencher) {\n-    do_bench_push_all(b, 10, 10)\n+fn bench_extend_from_slice_0010_0010(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 10, 10)\n }\n \n #[bench]\n-fn bench_push_all_0100_0100(b: &mut Bencher) {\n-    do_bench_push_all(b, 100, 100)\n+fn bench_extend_from_slice_0100_0100(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 100, 100)\n }\n \n #[bench]\n-fn bench_push_all_1000_1000(b: &mut Bencher) {\n-    do_bench_push_all(b, 1000, 1000)\n-}\n-\n-fn do_bench_push_all_move(b: &mut Bencher, dst_len: usize, src_len: usize) {\n-    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n-    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let mut dst = dst.clone();\n-        dst.extend(src.clone());\n-        assert_eq!(dst.len(), dst_len + src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 0)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0010(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0100(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_1000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 1000)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0010_0010(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 10, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0100_0100(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 100, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_1000_1000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 1000, 1000)\n+fn bench_extend_from_slice_1000_1000(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 1000, 1000)\n }\n \n fn do_bench_clone(b: &mut Bencher, src_len: usize) {"}, {"sha": "5edc5796056692deb69dfb8a21d7f59770b51e4f", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -13,11 +13,9 @@ use crate::sync::Arc;\n ///\n /// This trait is a memory-safe and ergonomic alternative to constructing a\n /// [`RawWaker`]. It supports the common executor design in which the data used\n-/// to wake up a task is stored in an [`Arc`][arc]. Some executors (especially\n+/// to wake up a task is stored in an [`Arc`]. Some executors (especially\n /// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n /// exists as an alternative for those systems.\n-///\n-/// [arc]: ../../std/sync/struct.Arc.html\n #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n pub trait Wake {\n     /// Wake this task."}, {"sha": "058a06e1326f82152318ca3b77e490609f0629c7", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -50,12 +50,9 @@\n //! v[1] = v[1] + 5;\n //! ```\n //!\n-//! [`Vec<T>`]: ../../std/vec/struct.Vec.html\n-//! [`new`]: ../../std/vec/struct.Vec.html#method.new\n-//! [`push`]: ../../std/vec/struct.Vec.html#method.push\n-//! [`Index`]: ../../std/ops/trait.Index.html\n-//! [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n-//! [`vec!`]: ../../std/macro.vec.html\n+//! [`Vec<T>`]: Vec\n+//! [`new`]: Vec::new\n+//! [`push`]: Vec::push\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -278,22 +275,18 @@ use crate::raw_vec::RawVec;\n /// `Vec` does not currently guarantee the order in which elements are dropped.\n /// The order has changed in the past and may change again.\n ///\n-/// [`vec!`]: ../../std/macro.vec.html\n /// [`get`]: ../../std/vec/struct.Vec.html#method.get\n /// [`get_mut`]: ../../std/vec/struct.Vec.html#method.get_mut\n-/// [`Index`]: ../../std/ops/trait.Index.html\n-/// [`String`]: ../../std/string/struct.String.html\n-/// [`&str`]: ../../std/primitive.str.html\n-/// [`Vec::with_capacity`]: ../../std/vec/struct.Vec.html#method.with_capacity\n-/// [`Vec::new`]: ../../std/vec/struct.Vec.html#method.new\n-/// [`shrink_to_fit`]: ../../std/vec/struct.Vec.html#method.shrink_to_fit\n-/// [`capacity`]: ../../std/vec/struct.Vec.html#method.capacity\n-/// [`mem::size_of::<T>`]: ../../std/mem/fn.size_of.html\n-/// [`len`]: ../../std/vec/struct.Vec.html#method.len\n-/// [`push`]: ../../std/vec/struct.Vec.html#method.push\n-/// [`insert`]: ../../std/vec/struct.Vec.html#method.insert\n-/// [`reserve`]: ../../std/vec/struct.Vec.html#method.reserve\n-/// [owned slice]: ../../std/boxed/struct.Box.html\n+/// [`String`]: crate::string::String\n+/// [`&str`]: type@str\n+/// [`shrink_to_fit`]: Vec::shrink_to_fit\n+/// [`capacity`]: Vec::capacity\n+/// [`mem::size_of::<T>`]: core::mem::size_of\n+/// [`len`]: Vec::len\n+/// [`push`]: Vec::push\n+/// [`insert`]: Vec::insert\n+/// [`reserve`]: Vec::reserve\n+/// [owned slice]: Box\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vec_type\")]\n pub struct Vec<T> {\n@@ -375,7 +368,7 @@ impl<T> Vec<T> {\n     /// into a `Vec` with the [`from_raw_parts`] function, allowing\n     /// the destructor to perform the cleanup.\n     ///\n-    /// [`from_raw_parts`]: #method.from_raw_parts\n+    /// [`from_raw_parts`]: Vec::from_raw_parts\n     ///\n     /// # Examples\n     ///\n@@ -430,8 +423,8 @@ impl<T> Vec<T> {\n     /// that nothing else uses the pointer after calling this\n     /// function.\n     ///\n-    /// [`String`]: ../../std/string/struct.String.html\n-    /// [`dealloc`]: ../../alloc/alloc/trait.GlobalAlloc.html#tymethod.dealloc\n+    /// [`String`]: crate::string::String\n+    /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n     ///\n     /// # Examples\n     ///\n@@ -661,7 +654,7 @@ impl<T> Vec<T> {\n     ///\n     /// Note that this will drop any excess capacity.\n     ///\n-    /// [owned slice]: ../../std/boxed/struct.Box.html\n+    /// [owned slice]: Box\n     ///\n     /// # Examples\n     ///\n@@ -732,8 +725,8 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, []);\n     /// ```\n     ///\n-    /// [`clear`]: #method.clear\n-    /// [`drain`]: #method.drain\n+    /// [`clear`]: Vec::clear\n+    /// [`drain`]: Vec::drain\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn truncate(&mut self, len: usize) {\n         // This is safe because:\n@@ -812,7 +805,7 @@ impl<T> Vec<T> {\n     /// }\n     /// ```\n     ///\n-    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    /// [`as_mut_ptr`]: Vec::as_mut_ptr\n     #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n     #[inline]\n     pub fn as_ptr(&self) -> *const T {\n@@ -868,17 +861,17 @@ impl<T> Vec<T> {\n     /// is done using one of the safe operations instead, such as\n     /// [`truncate`], [`resize`], [`extend`], or [`clear`].\n     ///\n-    /// [`truncate`]: #method.truncate\n-    /// [`resize`]: #method.resize\n-    /// [`extend`]: ../../std/iter/trait.Extend.html#tymethod.extend\n-    /// [`clear`]: #method.clear\n+    /// [`truncate`]: Vec::truncate\n+    /// [`resize`]: Vec::resize\n+    /// [`extend`]: Extend::extend\n+    /// [`clear`]: Vec::clear\n     ///\n     /// # Safety\n     ///\n     /// - `new_len` must be less than or equal to [`capacity()`].\n     /// - The elements at `old_len..new_len` must be initialized.\n     ///\n-    /// [`capacity()`]: #method.capacity\n+    /// [`capacity()`]: Vec::capacity\n     ///\n     /// # Examples\n     ///\n@@ -1217,8 +1210,6 @@ impl<T> Vec<T> {\n     /// Removes the last element from a vector and returns it, or [`None`] if it\n     /// is empty.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1482,8 +1473,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, [2, 4, 8, 16]);\n     /// ```\n     ///\n-    /// [`resize`]: #method.resize\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    /// [`resize`]: Vec::resize\n     #[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]\n     pub fn resize_with<F>(&mut self, new_len: usize, f: F)\n     where\n@@ -1534,7 +1524,7 @@ impl<T> Vec<T> {\n     /// reading from a file) before marking the data as initialized using the\n     /// [`set_len`] method.\n     ///\n-    /// [`set_len`]: #method.set_len\n+    /// [`set_len`]: Vec::set_len\n     ///\n     /// # Examples\n     ///\n@@ -1593,9 +1583,7 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n     ///\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n-    /// [`Default`]: ../../std/default/trait.Default.html\n-    /// [`resize_with`]: #method.resize_with\n+    /// [`resize_with`]: Vec::resize_with\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n@@ -1657,10 +1645,7 @@ impl<T: Default> Vec<T> {\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n     ///\n-    /// [`resize`]: #method.resize\n-    /// [`Default::default()`]: ../../std/default/trait.Default.html#tymethod.default\n-    /// [`Default`]: ../../std/default/trait.Default.html\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    /// [`resize`]: Vec::resize\n     #[unstable(feature = \"vec_resize_default\", issue = \"41758\")]\n     #[rustc_deprecated(\n         reason = \"This is moving towards being removed in favor \\\n@@ -2341,7 +2326,6 @@ impl<T> Vec<T> {\n     /// Note that `drain_filter` also lets you mutate every element in the filter closure,\n     /// regardless of whether you choose to keep or remove it.\n     ///\n-    ///\n     /// # Examples\n     ///\n     /// Splitting an array into evens and odds, reusing the original allocation:"}, {"sha": "04da9812ddc45f7ede86e500816855873cf7d679", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -213,7 +213,7 @@ impl Drop for Thread {\n }\n \n #[cfg(all(\n-    not(all(target_os = \"linux\", not(target_env = \"musl\"))),\n+    not(target_os = \"linux\"),\n     not(target_os = \"freebsd\"),\n     not(target_os = \"macos\"),\n     not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n@@ -233,7 +233,7 @@ pub mod guard {\n }\n \n #[cfg(any(\n-    all(target_os = \"linux\", not(target_env = \"musl\")),\n+    target_os = \"linux\",\n     target_os = \"freebsd\",\n     target_os = \"macos\",\n     all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n@@ -333,9 +333,7 @@ pub mod guard {\n         let page_size = os::page_size();\n         PAGE_SIZE.store(page_size, Ordering::Relaxed);\n \n-        let stackaddr = get_stack_start_aligned()?;\n-\n-        if cfg!(target_os = \"linux\") {\n+        if cfg!(all(target_os = \"linux\", not(target_env = \"musl\"))) {\n             // Linux doesn't allocate the whole stack right away, and\n             // the kernel has its own stack-guard mechanism to fault\n             // when growing too close to an existing mapping.  If we map\n@@ -346,8 +344,15 @@ pub mod guard {\n             // Instead, we'll just note where we expect rlimit to start\n             // faulting, so our handler can report \"stack overflow\", and\n             // trust that the kernel's own stack guard will work.\n+            let stackaddr = get_stack_start_aligned()?;\n             let stackaddr = stackaddr as usize;\n             Some(stackaddr - page_size..stackaddr)\n+        } else if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n+            // For the main thread, the musl's pthread_attr_getstack\n+            // returns the current stack size, rather than maximum size\n+            // it can eventually grow to. It cannot be used to determine\n+            // the position of kernel's stack guard.\n+            None\n         } else {\n             // Reallocate the last page of the stack.\n             // This ensures SIGBUS will be raised on\n@@ -357,6 +362,7 @@ pub mod guard {\n             // than the initial mmap() used, so we mmap() here with\n             // read/write permissions and only then mprotect() it to\n             // no permissions at all. See issue #50313.\n+            let stackaddr = get_stack_start_aligned()?;\n             let result = mmap(\n                 stackaddr,\n                 page_size,\n@@ -406,7 +412,14 @@ pub mod guard {\n             let mut guardsize = 0;\n             assert_eq!(libc::pthread_attr_getguardsize(&attr, &mut guardsize), 0);\n             if guardsize == 0 {\n-                panic!(\"there is no guard page\");\n+                if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n+                    // musl versions before 1.1.19 always reported guard\n+                    // size obtained from pthread_attr_get_np as zero.\n+                    // Use page size as a fallback.\n+                    guardsize = PAGE_SIZE.load(Ordering::Relaxed);\n+                } else {\n+                    panic!(\"there is no guard page\");\n+                }\n             }\n             let mut stackaddr = crate::ptr::null_mut();\n             let mut size = 0;\n@@ -419,6 +432,8 @@ pub mod guard {\n                 Some(guardaddr - PAGE_SIZE.load(Ordering::Relaxed)..guardaddr)\n             } else if cfg!(target_os = \"netbsd\") {\n                 Some(stackaddr - guardsize..stackaddr)\n+            } else if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n+                Some(stackaddr - guardsize..stackaddr)\n             } else if cfg!(all(target_os = \"linux\", target_env = \"gnu\")) {\n                 // glibc used to include the guard area within the stack, as noted in the BUGS\n                 // section of `man pthread_attr_getguardsize`.  This has been corrected starting"}, {"sha": "9481ee95399db5213df5ed6abc2c7902c3e8c446", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -19,5 +19,5 @@ exit 1\n \n git clone https://github.com/emscripten-core/emsdk.git /emsdk-portable\n cd /emsdk-portable\n-hide_output ./emsdk install 1.38.47-upstream\n-./emsdk activate 1.38.47-upstream\n+hide_output ./emsdk install 1.39.20\n+./emsdk activate 1.39.20"}, {"sha": "6d525310f75c3320cd0cea6cc8140d65b8219f67", "filename": "src/librustc_error_codes/error_codes/E0759.md", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -1,34 +1,28 @@\n-A `'static` requirement in a return type involving a trait is not fulfilled.\n+Return type involving a trait did not require `'static` lifetime.\n \n Erroneous code examples:\n \n ```compile_fail,E0759\n use std::fmt::Debug;\n \n-fn foo(x: &i32) -> impl Debug {\n+fn foo(x: &i32) -> impl Debug { // error!\n     x\n }\n-```\n \n-```compile_fail,E0759\n-# use std::fmt::Debug;\n-fn bar(x: &i32) -> Box<dyn Debug> {\n+fn bar(x: &i32) -> Box<dyn Debug> { // error!\n     Box::new(x)\n }\n ```\n \n-These examples have the same semantics as the following:\n+Add `'static` requirement to fix them:\n \n ```compile_fail,E0759\n # use std::fmt::Debug;\n-fn foo(x: &i32) -> impl Debug + 'static {\n+fn foo(x: &i32) -> impl Debug + 'static { // ok!\n     x\n }\n-```\n \n-```compile_fail,E0759\n-# use std::fmt::Debug;\n-fn bar(x: &i32) -> Box<dyn Debug + 'static> {\n+fn bar(x: &i32) -> Box<dyn Debug + 'static> { // ok!\n     Box::new(x)\n }\n ```"}, {"sha": "f94466b03ed1ed44803a0c0f164687dbe7dd4096", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -103,7 +103,7 @@ pub enum TokenKind {\n     /// \"=\"\n     Eq,\n     /// \"!\"\n-    Not,\n+    Bang,\n     /// \"<\"\n     Lt,\n     /// \">\"\n@@ -378,7 +378,7 @@ impl Cursor<'_> {\n             ':' => Colon,\n             '$' => Dollar,\n             '=' => Eq,\n-            '!' => Not,\n+            '!' => Bang,\n             '<' => Lt,\n             '>' => Gt,\n             '-' => Minus,"}, {"sha": "0dc3d6e344a7effdf4117017c9dc25ad96ebd051", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -143,6 +143,17 @@ pub struct GlobalId<'tcx> {\n     pub promoted: Option<mir::Promoted>,\n }\n \n+impl GlobalId<'tcx> {\n+    pub fn display(self, tcx: TyCtxt<'tcx>) -> String {\n+        let instance_name = tcx.def_path_str(self.instance.def.def_id());\n+        if let Some(promoted) = self.promoted {\n+            format!(\"{}::{:?}\", instance_name, promoted)\n+        } else {\n+            instance_name\n+        }\n+    }\n+}\n+\n /// Input argument for `tcx.lit_to_const`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, HashStable)]\n pub struct LitToConstInput<'tcx> {"}, {"sha": "d6836d2ee36658015043f53f56674ffdee0a73fa", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -684,7 +684,7 @@ rustc_queries! {\n             -> ConstEvalRawResult<'tcx> {\n             desc { |tcx|\n                 \"const-evaluating `{}`\",\n-                tcx.def_path_str(key.value.instance.def.def_id())\n+                key.value.display(tcx)\n             }\n         }\n \n@@ -700,7 +700,7 @@ rustc_queries! {\n             -> ConstEvalResult<'tcx> {\n             desc { |tcx|\n                 \"const-evaluating + checking `{}`\",\n-                tcx.def_path_str(key.value.instance.def.def_id())\n+                key.value.display(tcx)\n             }\n             cache_on_disk_if(_, opt_result) {\n                 // Only store results without errors"}, {"sha": "2a9cbc7fc0e37915388dfff1a037ccf561a3b405", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -406,7 +406,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n         self.super_const(constant);\n         let ty::Const { ty, val, .. } = constant;\n         match ty.kind {\n-            ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char => {}\n+            ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => {}\n             // Unit type\n             ty::Tuple(tys) if tys.is_empty() => {}\n             ty::FnDef(..) => {}"}, {"sha": "398e23a6ff72715aec72abfd973810b8f7073b6c", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -290,7 +290,7 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::Colon => token::Colon,\n             rustc_lexer::TokenKind::Dollar => token::Dollar,\n             rustc_lexer::TokenKind::Eq => token::Eq,\n-            rustc_lexer::TokenKind::Not => token::Not,\n+            rustc_lexer::TokenKind::Bang => token::Not,\n             rustc_lexer::TokenKind::Lt => token::Lt,\n             rustc_lexer::TokenKind::Gt => token::Gt,\n             rustc_lexer::TokenKind::Minus => token::BinOp(token::Minus),"}, {"sha": "e60a1f3e75f9fe93d41767b3f7032b24ea3d2100", "filename": "src/test/mir-opt/deaggregator_test.bar.Deaggregator.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -12,9 +12,6 @@\n -         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n +         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n +         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-                                           // ty::Const\n-                                           // + ty: f32\n-                                           // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/deaggregator_test.rs:9:20: 9:23\n                                            // + literal: Const { ty: f32, val: Value(Scalar(0x00000000)) }"}, {"sha": "a52c285f9f0b4279f65a37448937b88a33f3ff28", "filename": "src/test/ui/abi/stack-probes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -11,7 +11,6 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n-// ignore-musl FIXME #31506\n \n use std::mem::MaybeUninit;\n use std::process::Command;"}, {"sha": "e6075f745776a5a6d663995af4ed8fbbc8ca9bbb", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -32,7 +32,7 @@ note: ...which requires const-evaluating `Tr::B`...\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires normalizing `<() as Tr>::A`, completing the cycle\n-note: cycle used when const-evaluating `main`\n+note: cycle used when const-evaluating `main::promoted[2]`\n   --> $DIR/defaults-cyclic-fail.rs:14:1\n    |\n LL | fn main() {"}, {"sha": "6962ccdec73eea52e084c6a99f9be43598792e87", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -Ztreat-err-as-bug\n+// build-fail\n+// failure-status: 101\n+// rustc-env:RUST_BACKTRACE=1\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread.*panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"stack backtrace:\\n\" -> \"\"\n+// normalize-stderr-test \"  \\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \".*note: Some details.*\\n\" -> \"\"\n+\n+#![allow(unconditional_panic)]\n+\n+fn main() {\n+    let x: &'static i32 = &(1 / 0);\n+    //~^ ERROR reaching this expression at runtime will panic or abort [const_err]\n+    println!(\"x={}\", x);\n+}"}, {"sha": "32233a0f6eeb71183ac1da766e3aa8d09faf0805", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -0,0 +1,18 @@\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/const-eval-query-stack.rs:18:28\n+   |\n+LL |     let x: &'static i32 = &(1 / 0);\n+   |                           -^^^^^^^\n+   |                            |\n+   |                            dividing by zero\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+query stack during panic:\n+#0 [const_eval_raw] const-evaluating `main::promoted[1]`\n+#1 [const_eval_validated] const-evaluating + checking `main::promoted[1]`\n+#2 [const_eval_validated] const-evaluating + checking `main::promoted[1]`\n+#3 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n+#4 [optimized_mir] optimizing MIR for `main`\n+#5 [collect_and_partition_mono_items] collect_and_partition_mono_items\n+end of query stack"}, {"sha": "6beafc0732ba3174774ea77af304818508b213c8", "filename": "src/test/ui/out-of-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332369110919ac27c8a0bc0b21bf9d2f9fd9829d/src%2Ftest%2Fui%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-stack.rs?ref=332369110919ac27c8a0bc0b21bf9d2f9fd9829d", "patch": "@@ -3,7 +3,6 @@\n #![allow(unused_must_use)]\n #![allow(unconditional_recursion)]\n // ignore-android: FIXME (#20004)\n-// ignore-musl\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes"}]}