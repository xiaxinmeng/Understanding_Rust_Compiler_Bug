{"sha": "c26c0e5abf6b7730a6614ee8b448b0018336a285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNmMwZTVhYmY2Yjc3MzBhNjYxNGVlOGI0NDhiMDAxODMzNmEyODU=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-08-27T00:27:32Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-08-27T00:27:32Z"}, "message": "feat: add support for --message-format option (#3752)", "tree": {"sha": "930a08c290bb87e8730503f4fd315e98c0706f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930a08c290bb87e8730503f4fd315e98c0706f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c26c0e5abf6b7730a6614ee8b448b0018336a285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c26c0e5abf6b7730a6614ee8b448b0018336a285", "html_url": "https://github.com/rust-lang/rust/commit/c26c0e5abf6b7730a6614ee8b448b0018336a285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c26c0e5abf6b7730a6614ee8b448b0018336a285/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac940c71100f32ddd56fd69e5b628cbbcad2f55b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac940c71100f32ddd56fd69e5b628cbbcad2f55b", "html_url": "https://github.com/rust-lang/rust/commit/ac940c71100f32ddd56fd69e5b628cbbcad2f55b"}], "stats": {"total": 159, "additions": 152, "deletions": 7}, "files": [{"sha": "05ce9b5f241c225963fab6d863baddab339db134", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 152, "deletions": 7, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/c26c0e5abf6b7730a6614ee8b448b0018336a285/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26c0e5abf6b7730a6614ee8b448b0018336a285/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=c26c0e5abf6b7730a6614ee8b448b0018336a285", "patch": "@@ -45,6 +45,10 @@ pub struct Opts {\n     #[structopt(long = \"manifest-path\", value_name = \"manifest-path\")]\n     manifest_path: Option<String>,\n \n+    /// Specify message-format: short|json|human\n+    #[structopt(long = \"message-format\", value_name = \"message-format\")]\n+    message_format: Option<String>,\n+\n     /// Options passed to rustfmt\n     // 'raw = true' to make `--` explicit.\n     #[structopt(name = \"rustfmt_options\", raw(raw = \"true\"))]\n@@ -100,6 +104,14 @@ fn execute() -> i32 {\n     }\n \n     let strategy = CargoFmtStrategy::from_opts(&opts);\n+    let mut rustfmt_args = opts.rustfmt_options;\n+    if let Some(message_format) = opts.message_format {\n+        if let Err(msg) = convert_message_format_to_rustfmt_args(&message_format, &mut rustfmt_args)\n+        {\n+            print_usage_to_stderr(&msg);\n+            return FAILURE;\n+        }\n+    }\n \n     if let Some(specified_manifest_path) = opts.manifest_path {\n         if !specified_manifest_path.ends_with(\"Cargo.toml\") {\n@@ -110,16 +122,61 @@ fn execute() -> i32 {\n         handle_command_status(format_crate(\n             verbosity,\n             &strategy,\n-            opts.rustfmt_options,\n+            rustfmt_args,\n             Some(&manifest_path),\n         ))\n     } else {\n-        handle_command_status(format_crate(\n-            verbosity,\n-            &strategy,\n-            opts.rustfmt_options,\n-            None,\n-        ))\n+        handle_command_status(format_crate(verbosity, &strategy, rustfmt_args, None))\n+    }\n+}\n+\n+fn convert_message_format_to_rustfmt_args(\n+    message_format: &str,\n+    rustfmt_args: &mut Vec<String>,\n+) -> Result<(), String> {\n+    let mut contains_emit_mode = false;\n+    let mut contains_check = false;\n+    let mut contains_list_files = false;\n+    for arg in rustfmt_args.iter() {\n+        if arg.starts_with(\"--emit\") {\n+            contains_emit_mode = true;\n+        }\n+        if arg == \"--check\" {\n+            contains_check = true;\n+        }\n+        if arg == \"-l\" || arg == \"--files-with-diff\" {\n+            contains_list_files = true;\n+        }\n+    }\n+    match message_format {\n+        \"short\" => {\n+            if !contains_list_files {\n+                rustfmt_args.push(String::from(\"-l\"));\n+            }\n+            Ok(())\n+        }\n+        \"json\" => {\n+            if contains_emit_mode {\n+                return Err(String::from(\n+                    \"cannot include --emit arg when --message-format is set to json\",\n+                ));\n+            }\n+            if contains_check {\n+                return Err(String::from(\n+                    \"cannot include --check arg when --message-format is set to json\",\n+                ));\n+            }\n+            rustfmt_args.push(String::from(\"--emit\"));\n+            rustfmt_args.push(String::from(\"json\"));\n+            Ok(())\n+        }\n+        \"human\" => Ok(()),\n+        _ => {\n+            return Err(format!(\n+                \"invalid --message-format value: {}. Allowed values are: short|json|human\",\n+                message_format\n+            ));\n+        }\n     }\n }\n \n@@ -483,6 +540,8 @@ mod cargo_fmt_tests {\n         assert_eq!(empty, o.packages);\n         assert_eq!(empty, o.rustfmt_options);\n         assert_eq!(false, o.format_all);\n+        assert_eq!(None, o.manifest_path);\n+        assert_eq!(None, o.message_format);\n     }\n \n     #[test]\n@@ -494,6 +553,8 @@ mod cargo_fmt_tests {\n             \"p1\",\n             \"-p\",\n             \"p2\",\n+            \"--message-format\",\n+            \"short\",\n             \"--\",\n             \"--edition\",\n             \"2018\",\n@@ -504,6 +565,7 @@ mod cargo_fmt_tests {\n         assert_eq!(vec![\"p1\", \"p2\"], o.packages);\n         assert_eq!(vec![\"--edition\", \"2018\"], o.rustfmt_options);\n         assert_eq!(false, o.format_all);\n+        assert_eq!(Some(String::from(\"short\")), o.message_format);\n     }\n \n     #[test]\n@@ -597,4 +659,87 @@ mod cargo_fmt_tests {\n                 .is_err()\n         );\n     }\n+\n+    mod convert_message_format_to_rustfmt_args_tests {\n+        use super::*;\n+\n+        #[test]\n+        fn invalid_message_format() {\n+            assert_eq!(\n+                convert_message_format_to_rustfmt_args(\"awesome\", &mut vec![]),\n+                Err(String::from(\n+                    \"invalid --message-format value: awesome. Allowed values are: short|json|human\"\n+                )),\n+            );\n+        }\n+\n+        #[test]\n+        fn json_message_format_and_check_arg() {\n+            let mut args = vec![String::from(\"--check\")];\n+            assert_eq!(\n+                convert_message_format_to_rustfmt_args(\"json\", &mut args),\n+                Err(String::from(\n+                    \"cannot include --check arg when --message-format is set to json\"\n+                )),\n+            );\n+        }\n+\n+        #[test]\n+        fn json_message_format_and_emit_arg() {\n+            let mut args = vec![String::from(\"--emit\"), String::from(\"checkstyle\")];\n+            assert_eq!(\n+                convert_message_format_to_rustfmt_args(\"json\", &mut args),\n+                Err(String::from(\n+                    \"cannot include --emit arg when --message-format is set to json\"\n+                )),\n+            );\n+        }\n+\n+        #[test]\n+        fn json_message_format() {\n+            let mut args = vec![String::from(\"--edition\"), String::from(\"2018\")];\n+            assert!(convert_message_format_to_rustfmt_args(\"json\", &mut args).is_ok());\n+            assert_eq!(\n+                args,\n+                vec![\n+                    String::from(\"--edition\"),\n+                    String::from(\"2018\"),\n+                    String::from(\"--emit\"),\n+                    String::from(\"json\")\n+                ]\n+            );\n+        }\n+\n+        #[test]\n+        fn human_message_format() {\n+            let exp_args = vec![String::from(\"--emit\"), String::from(\"json\")];\n+            let mut act_args = exp_args.clone();\n+            assert!(convert_message_format_to_rustfmt_args(\"human\", &mut act_args).is_ok());\n+            assert_eq!(act_args, exp_args);\n+        }\n+\n+        #[test]\n+        fn short_message_format() {\n+            let mut args = vec![String::from(\"--check\")];\n+            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n+            assert_eq!(args, vec![String::from(\"--check\"), String::from(\"-l\")]);\n+        }\n+\n+        #[test]\n+        fn short_message_format_included_short_list_files_flag() {\n+            let mut args = vec![String::from(\"--check\"), String::from(\"-l\")];\n+            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n+            assert_eq!(args, vec![String::from(\"--check\"), String::from(\"-l\")]);\n+        }\n+\n+        #[test]\n+        fn short_message_format_included_long_list_files_flag() {\n+            let mut args = vec![String::from(\"--check\"), String::from(\"--files-with-diff\")];\n+            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n+            assert_eq!(\n+                args,\n+                vec![String::from(\"--check\"), String::from(\"--files-with-diff\")]\n+            );\n+        }\n+    }\n }"}]}