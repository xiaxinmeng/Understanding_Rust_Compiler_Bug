{"sha": "4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjliNGNiOTNlZTA5MGEyMmQyN2ZhZjRlNzAwYmZjMjM2NGViYzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-02T23:20:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-19T18:53:33Z"}, "message": "librustc: Optimize metadata::decoder::item_name.", "tree": {"sha": "081bb9803f1887746caa5e510916a6ed3a588d59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/081bb9803f1887746caa5e510916a6ed3a588d59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "html_url": "https://github.com/rust-lang/rust/commit/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f54dda60a769fa6b3d325f5787134bc9d90c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f54dda60a769fa6b3d325f5787134bc9d90c6b", "html_url": "https://github.com/rust-lang/rust/commit/53f54dda60a769fa6b3d325f5787134bc9d90c6b"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "6bde7d33849e6e50bffea17e05d9464a961880fb", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "patch": "@@ -67,6 +67,15 @@ pub fn from_bytes_with_null<'a>(vv: &'a [u8]) -> &'a str {\n     return unsafe { raw::from_bytes_with_null(vv) };\n }\n \n+pub fn from_bytes_slice<'a>(vector: &'a [u8]) -> &'a str {\n+    unsafe {\n+        assert!(is_utf8(vector));\n+        let (ptr, len): (*u8, uint) = ::cast::transmute(vector);\n+        let string: &'a str = ::cast::transmute((ptr, len + 1));\n+        string\n+    }\n+}\n+\n /// Copy a slice into a new unique str\n pub fn from_slice(s: &str) -> ~str {\n     unsafe { raw::slice_bytes_owned(s, 0, len(s)) }"}, {"sha": "248d847f89dae2db6db8f584a90ec958453b57e2", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "patch": "@@ -37,7 +37,7 @@ use std::serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;\n use syntax::diagnostic::span_handler;\n-use syntax::parse::token::{ident_interner, special_idents};\n+use syntax::parse::token::{StringRef, ident_interner, special_idents};\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n use syntax::codemap;\n@@ -322,7 +322,13 @@ fn item_path(intr: @ident_interner, item_doc: ebml::Doc) -> ast_map::path {\n \n fn item_name(intr: @ident_interner, item: ebml::Doc) -> ast::ident {\n     let name = reader::get_doc(item, tag_paths_data_name);\n-    intr.intern(@str::from_bytes(reader::doc_data(name)))\n+    do reader::with_doc_data(name) |data| {\n+        let string = str::from_bytes_slice(data);\n+        match intr.find_equiv(&StringRef(string)) {\n+            None => intr.intern(@(string.to_owned())),\n+            Some(val) => val,\n+        }\n+    }\n }\n \n fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)"}, {"sha": "b94b53076ec5526a01c0bca9716a2ac69c9352f9", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "patch": "@@ -18,9 +18,11 @@ use util::interner;\n \n use core::cast;\n use core::char;\n+use core::cmp::Equiv;\n use core::hashmap::HashSet;\n use core::str;\n use core::task;\n+use core::to_bytes;\n \n #[auto_encode]\n #[auto_decode]\n@@ -355,6 +357,19 @@ pub mod special_idents {\n     pub static type_self: ident = ident { repr: 36u, ctxt: 0};    // `Self`\n }\n \n+pub struct StringRef<'self>(&'self str);\n+\n+impl<'self> Equiv<@~str> for StringRef<'self> {\n+    #[inline(always)]\n+    fn equiv(&self, other: &@~str) -> bool { str::eq_slice(**self, **other) }\n+}\n+\n+impl<'self> to_bytes::IterBytes for StringRef<'self> {\n+    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n+        (**self).iter_bytes(lsb0, f);\n+    }\n+}\n+\n pub struct ident_interner {\n     priv interner: Interner<@~str>,\n }\n@@ -372,6 +387,13 @@ pub impl ident_interner {\n     fn len(&self) -> uint {\n         self.interner.len()\n     }\n+    fn find_equiv<Q:Hash + IterBytes + Equiv<@~str>>(&self, val: &Q)\n+                                                  -> Option<ast::ident> {\n+        match self.interner.find_equiv(val) {\n+            Some(v) => Some(ast::ident { repr: v }),\n+            None => None,\n+        }\n+    }\n }\n \n pub fn mk_ident_interner() -> @ident_interner {"}, {"sha": "cda1c6c0df3856bdb1f21b3119962def39d54ae1", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "patch": "@@ -16,6 +16,7 @@\n #[macro_escape];\n \n use core::prelude::*;\n+use core::cmp::Equiv;\n use core::hashmap::HashMap;\n \n pub struct Interner<T> {\n@@ -67,6 +68,14 @@ pub impl<T:Eq + IterBytes + Hash + Const + Copy> Interner<T> {\n     fn get(&self, idx: uint) -> T { self.vect[idx] }\n \n     fn len(&self) -> uint { let vect = &*self.vect; vect.len() }\n+\n+    fn find_equiv<Q:Hash + IterBytes + Equiv<T>>(&self, val: &Q)\n+                                              -> Option<uint> {\n+        match self.map.find_equiv(val) {\n+            Some(v) => Some(*v),\n+            None => None,\n+        }\n+    }\n }\n \n /* Key for thread-local data for sneaking interner information to the"}]}