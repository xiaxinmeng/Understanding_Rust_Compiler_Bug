{"sha": "b07bb6d698d842f05b1664b8824671080274d53d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwN2JiNmQ2OThkODQyZjA1YjE2NjRiODgyNDY3MTA4MDI3NGQ1M2Q=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-30T01:54:22Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-06-21T22:25:45Z"}, "message": "Fix unused_unsafe with compiler-generated unsafe", "tree": {"sha": "bd591e90b423ef9ae456dd719023cc1cf91c4450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd591e90b423ef9ae456dd719023cc1cf91c4450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07bb6d698d842f05b1664b8824671080274d53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07bb6d698d842f05b1664b8824671080274d53d", "html_url": "https://github.com/rust-lang/rust/commit/b07bb6d698d842f05b1664b8824671080274d53d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07bb6d698d842f05b1664b8824671080274d53d/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39260f6d4994db191f2fca9f12b4930eb3a3c122", "url": "https://api.github.com/repos/rust-lang/rust/commits/39260f6d4994db191f2fca9f12b4930eb3a3c122", "html_url": "https://github.com/rust-lang/rust/commit/39260f6d4994db191f2fca9f12b4930eb3a3c122"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "672686410f9bfcb3e4dc8382a2b44dff7ec957f0", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -494,6 +494,8 @@ impl<'tcx> Body<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum Safety {\n     Safe,\n+    /// Unsafe because of compiler-generated unsafe code, like `await` desugaring\n+    BuiltinUnsafe,\n     /// Unsafe because of an unsafe fn\n     FnUnsafe,\n     /// Unsafe because of an `unsafe` block"}, {"sha": "6b2e542ee70517847b1dcfc0cdee9b9635e12fd0", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -114,6 +114,7 @@ pub struct Adt<'tcx> {\n #[derive(Copy, Clone, Debug, HashStable)]\n pub enum BlockSafety {\n     Safe,\n+    BuiltinUnsafe,\n     ExplicitUnsafe(hir::HirId),\n }\n "}, {"sha": "103ddda1a1d262c45069da1fab78d78404a7776b", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -321,6 +321,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 false\n             }\n+            Safety::BuiltinUnsafe => true,\n             Safety::ExplicitUnsafe(hir_id) => {\n                 // mark unsafe block as used if there are any unsafe operations inside\n                 if !violations.is_empty() {"}, {"sha": "df71379c1d88643c50813a1329565cc9c401bc90", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -214,6 +214,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"update_source_scope_for({:?}, {:?})\", span, safety_mode);\n         let new_unsafety = match safety_mode {\n             BlockSafety::Safe => None,\n+            BlockSafety::BuiltinUnsafe => Some(Safety::BuiltinUnsafe),\n             BlockSafety::ExplicitUnsafe(hir_id) => {\n                 match self.in_scope_unsafe {\n                     Safety::Safe => {}"}, {"sha": "4e80931ec037088c12772fb1e544a38d29ada7e5", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -29,11 +29,7 @@ struct UnsafetyVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n-    fn in_safety_context<R>(\n-        &mut self,\n-        safety_context: SafetyContext,\n-        f: impl FnOnce(&mut Self) -> R,\n-    ) {\n+    fn in_safety_context(&mut self, safety_context: SafetyContext, f: impl FnOnce(&mut Self)) {\n         if let (\n             SafetyContext::UnsafeBlock { span: enclosing_span, .. },\n             SafetyContext::UnsafeBlock { span: block_span, hir_id, .. },\n@@ -63,14 +59,14 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                 );\n             }\n             self.safety_context = prev_context;\n-            return;\n         }\n     }\n \n     fn requires_unsafe(&mut self, span: Span, kind: UnsafeOpKind) {\n         let (description, note) = kind.description_and_note();\n         let unsafe_op_in_unsafe_fn_allowed = self.unsafe_op_in_unsafe_fn_allowed();\n         match self.safety_context {\n+            SafetyContext::BuiltinUnsafeBlock => {}\n             SafetyContext::UnsafeBlock { ref mut used, .. } => {\n                 if !self.body_unsafety.is_unsafe() || !unsafe_op_in_unsafe_fn_allowed {\n                     // Mark this block as useful\n@@ -142,13 +138,23 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_block(&mut self, block: &Block) {\n-        if let BlockSafety::ExplicitUnsafe(hir_id) = block.safety_mode {\n-            self.in_safety_context(\n-                SafetyContext::UnsafeBlock { span: block.span, hir_id, used: false },\n-                |this| visit::walk_block(this, block),\n-            );\n-        } else {\n-            visit::walk_block(self, block);\n+        match block.safety_mode {\n+            // compiler-generated unsafe code should not count towards the usefulness of\n+            // an outer unsafe block\n+            BlockSafety::BuiltinUnsafe => {\n+                self.in_safety_context(SafetyContext::BuiltinUnsafeBlock, |this| {\n+                    visit::walk_block(this, block)\n+                });\n+            }\n+            BlockSafety::ExplicitUnsafe(hir_id) => {\n+                self.in_safety_context(\n+                    SafetyContext::UnsafeBlock { span: block.span, hir_id, used: false },\n+                    |this| visit::walk_block(this, block),\n+                );\n+            }\n+            BlockSafety::Safe => {\n+                visit::walk_block(self, block);\n+            }\n         }\n     }\n \n@@ -250,6 +256,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n #[derive(Clone, Copy)]\n enum SafetyContext {\n     Safe,\n+    BuiltinUnsafeBlock,\n     UnsafeFn,\n     UnsafeBlock { span: Span, hir_id: hir::HirId, used: bool },\n }"}, {"sha": "2d9b5c1d98aab26f66c9db3f8f501e4948376455", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -26,7 +26,12 @@ impl<'tcx> Cx<'tcx> {\n             expr: block.expr.map(|expr| self.mirror_expr(expr)),\n             safety_mode: match block.rules {\n                 hir::BlockCheckMode::DefaultBlock => BlockSafety::Safe,\n-                hir::BlockCheckMode::UnsafeBlock(..) => BlockSafety::ExplicitUnsafe(block.hir_id),\n+                hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::CompilerGenerated) => {\n+                    BlockSafety::BuiltinUnsafe\n+                }\n+                hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::UserProvided) => {\n+                    BlockSafety::ExplicitUnsafe(block.hir_id)\n+                }\n             },\n         }\n     }"}, {"sha": "29bd84cd0db53834fde1c6364b4eff790e89d4d5", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -1,11 +1,11 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:5\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:9\n    |\n-LL |     unsafe { println!(\"foo\"); }\n-   |     ^^^^^^ unnecessary `unsafe` block\n+LL |         unsafe { async {}.await; }\n+   |         ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:6:9\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:5:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^"}, {"sha": "e9c7efb9e8b80e17bf07fa1d5ac633f417ef4904", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -1,10 +1,11 @@\n-// issue #12418\n-\n+// edition:2018\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n #![deny(unused_unsafe)]\n \n fn main() {\n-    unsafe { println!(\"foo\"); } //~ ERROR unnecessary `unsafe`\n+    let _ = async {\n+        unsafe { async {}.await; } //~ ERROR unnecessary `unsafe`\n+    };\n }"}, {"sha": "29bd84cd0db53834fde1c6364b4eff790e89d4d5", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.thir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b07bb6d698d842f05b1664b8824671080274d53d/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b07bb6d698d842f05b1664b8824671080274d53d/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr?ref=b07bb6d698d842f05b1664b8824671080274d53d", "patch": "@@ -1,11 +1,11 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:5\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:9\n    |\n-LL |     unsafe { println!(\"foo\"); }\n-   |     ^^^^^^ unnecessary `unsafe` block\n+LL |         unsafe { async {}.await; }\n+   |         ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:6:9\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:5:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^"}]}