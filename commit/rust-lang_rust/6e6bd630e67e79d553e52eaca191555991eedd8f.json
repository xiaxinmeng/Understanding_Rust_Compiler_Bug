{"sha": "6e6bd630e67e79d553e52eaca191555991eedd8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNmJkNjMwZTY3ZTc5ZDU1M2U1MmVhY2ExOTE1NTU5OTFlZWRkOGY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-26T20:11:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-26T20:11:22Z"}, "message": "Rollup merge of #72270 - RalfJung:lint-ref-to-packed, r=oli-obk\n\nadd a lint against references to packed fields\n\nCreating a reference to an insufficiently aligned packed field is UB and should be disallowed, both inside and outside of `unsafe` blocks. However, currently there is no stable alternative (https://github.com/rust-lang/rust/issues/64490) so all we do right now is have a future incompatibility warning when doing this outside `unsafe` (https://github.com/rust-lang/rust/issues/46043).\n\nThis adds an allow-by-default lint. @retep998 suggested this can help early adopters avoid issues. It also means we can then do a crater run where this is deny-by-default as suggested by @joshtriplett.\n\nI guess the main thing to bikeshed is the lint name. I am not particularly happy with \"packed_references\" as it sounds like the packed field has reference type. I chose this because it is similar to \"safe_packed_borrows\". What about \"reference_to_packed\" or \"unaligned_reference\" or so?", "tree": {"sha": "e6682f5f7a557158160f028de79f2a94c3b9c8d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6682f5f7a557158160f028de79f2a94c3b9c8d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e6bd630e67e79d553e52eaca191555991eedd8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJezXfrCRBK7hj4Ov3rIwAAdHIIAATR2NWDhojO7TGXC0nuz1Fc\n9053/FyH/9siqFDLRxPAHxBq/BsWGWU+fFivFK1UVfHvnAhPDA5Dfxk5lOMl20nx\nWpn+8XfN9zthCOoHCnjiZLaW0eI/JbFqcBVQPX71VIexu3vhwwltjB5dHutzjbck\n54qyHef8wfVqEwbPI/ZBBUHUb4zEKCmFey0myjXW6eXdmreoRAKp9J1J3EaNMj0C\n20PfJCec6BCmYtFMwwjhNija0FHcRI463Ys+AZ4qOqzF6srU00sQDX1gZpEHLUdR\nLjlxH3CiQqEkG8YRYZmTS1EMxQ2zD3Te5E1TvA087Ys7COATTYfpddsHLnT+V1c=\n=gXYh\n-----END PGP SIGNATURE-----\n", "payload": "tree e6682f5f7a557158160f028de79f2a94c3b9c8d2\nparent aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c\nparent d959a8f91d9945302f58a8f79613e75060c6b77d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590523882 +0200\ncommitter GitHub <noreply@github.com> 1590523882 +0200\n\nRollup merge of #72270 - RalfJung:lint-ref-to-packed, r=oli-obk\n\nadd a lint against references to packed fields\n\nCreating a reference to an insufficiently aligned packed field is UB and should be disallowed, both inside and outside of `unsafe` blocks. However, currently there is no stable alternative (https://github.com/rust-lang/rust/issues/64490) so all we do right now is have a future incompatibility warning when doing this outside `unsafe` (https://github.com/rust-lang/rust/issues/46043).\n\nThis adds an allow-by-default lint. @retep998 suggested this can help early adopters avoid issues. It also means we can then do a crater run where this is deny-by-default as suggested by @joshtriplett.\n\nI guess the main thing to bikeshed is the lint name. I am not particularly happy with \"packed_references\" as it sounds like the packed field has reference type. I chose this because it is similar to \"safe_packed_borrows\". What about \"reference_to_packed\" or \"unaligned_reference\" or so?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6bd630e67e79d553e52eaca191555991eedd8f", "html_url": "https://github.com/rust-lang/rust/commit/6e6bd630e67e79d553e52eaca191555991eedd8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e6bd630e67e79d553e52eaca191555991eedd8f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "html_url": "https://github.com/rust-lang/rust/commit/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c"}, {"sha": "d959a8f91d9945302f58a8f79613e75060c6b77d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d959a8f91d9945302f58a8f79613e75060c6b77d", "html_url": "https://github.com/rust-lang/rust/commit/d959a8f91d9945302f58a8f79613e75060c6b77d"}], "stats": {"total": 164, "additions": 144, "deletions": 20}, "files": [{"sha": "faad1a72327f49acd88a19c96f65b59ffa901068", "filename": "src/librustc_mir/transform/check_packed_ref.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs?ref=6e6bd630e67e79d553e52eaca191555991eedd8f", "patch": "@@ -0,0 +1,66 @@\n+use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n+\n+use crate::transform::{MirPass, MirSource};\n+use crate::util;\n+\n+pub struct CheckPackedRef;\n+\n+impl<'tcx> MirPass<'tcx> for CheckPackedRef {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let param_env = tcx.param_env(src.instance.def_id());\n+        let source_info = SourceInfo::outermost(body.span);\n+        let mut checker = PackedRefChecker { body, tcx, param_env, source_info };\n+        checker.visit_body(&body);\n+    }\n+}\n+\n+struct PackedRefChecker<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    source_info: SourceInfo,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for PackedRefChecker<'a, 'tcx> {\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n+        // Make sure we know where in the MIR we are.\n+        self.source_info = terminator.source_info;\n+        self.super_terminator(terminator, location);\n+    }\n+\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        // Make sure we know where in the MIR we are.\n+        self.source_info = statement.source_info;\n+        self.super_statement(statement, location);\n+    }\n+\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n+        if context.is_borrow() {\n+            if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n+                let source_info = self.source_info;\n+                let lint_root = self.body.source_scopes[source_info.scope]\n+                    .local_data\n+                    .as_ref()\n+                    .assert_crate_local()\n+                    .lint_root;\n+                self.tcx.struct_span_lint_hir(\n+                    UNALIGNED_REFERENCES,\n+                    lint_root,\n+                    source_info.span,\n+                    |lint| {\n+                        lint.build(&format!(\"reference to packed field is unaligned\",))\n+                            .note(\n+                                \"fields of packed structs are not properly aligned, and creating \\\n+                                a misaligned reference is undefined behavior (even if that \\\n+                                reference is never dereferenced)\",\n+                            )\n+                            .emit()\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "26725a2ac02d585ecc528067127a10696dfb82b3", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=6e6bd630e67e79d553e52eaca191555991eedd8f", "patch": "@@ -17,6 +17,7 @@ pub mod add_call_guards;\n pub mod add_moves_for_packed_drops;\n pub mod add_retag;\n pub mod check_consts;\n+pub mod check_packed_ref;\n pub mod check_unsafety;\n pub mod cleanup_post_borrowck;\n pub mod const_prop;\n@@ -228,10 +229,11 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     validator.qualifs_in_return_place()\n }\n \n+/// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n     let def_id = def_id.expect_local();\n \n-    // Unsafety check uses the raw mir, so make sure it is run\n+    // Unsafety check uses the raw mir, so make sure it is run.\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut body = tcx.mir_built(def_id).steal();\n@@ -247,6 +249,8 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n         None,\n         MirPhase::Const,\n         &[&[\n+            // MIR-level lints.\n+            &check_packed_ref::CheckPackedRef,\n             // What we need to do constant evaluation.\n             &simplify::SimplifyCfg::new(\"initial\"),\n             &rustc_peek::SanityCheck,"}, {"sha": "4035417204867496ff95612d24a4130d5331e830", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=6e6bd630e67e79d553e52eaca191555991eedd8f", "patch": "@@ -216,10 +216,16 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n+declare_lint! {\n+    pub UNALIGNED_REFERENCES,\n+    Allow,\n+    \"detects unaligned references to fields of packed structs\",\n+}\n+\n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n-    \"safe borrows of fields of packed structs were was erroneously allowed\",\n+    \"safe borrows of fields of packed structs were erroneously allowed\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n         edition: None,\n@@ -545,6 +551,7 @@ declare_lint_pass! {\n         INVALID_TYPE_PARAM_DEFAULT,\n         CONST_ERR,\n         RENAMED_AND_REMOVED_LINTS,\n+        UNALIGNED_REFERENCES,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         MISSING_FRAGMENT_SPECIFIER,"}, {"sha": "b20d614b3036bbe620d873ff5dedcc311d0d11ff", "filename": "src/test/ui/issues/issue-27060-rpass.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Fissues%2Fissue-27060-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Fissues%2Fissue-27060-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-rpass.rs?ref=6e6bd630e67e79d553e52eaca191555991eedd8f", "patch": "@@ -7,19 +7,10 @@ pub struct Good {\n     aligned: [u8; 32],\n }\n \n-#[repr(packed)]\n-pub struct JustArray {\n-    array: [u32]\n-}\n-\n // kill this test when that turns to a hard error\n #[allow(safe_packed_borrows)]\n fn main() {\n-    let good = Good {\n-        data: &0,\n-        data2: [&0, &0],\n-        aligned: [0; 32]\n-    };\n+    let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n \n     unsafe {\n         let _ = &good.data; // ok"}, {"sha": "78f2022ed38df6c8bf6143fb774a96b471a12eee", "filename": "src/test/ui/issues/issue-27060.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Fissues%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Fissues%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060.rs?ref=6e6bd630e67e79d553e52eaca191555991eedd8f", "patch": "@@ -5,11 +5,6 @@ pub struct Good {\n     aligned: [u8; 32],\n }\n \n-#[repr(packed)]\n-pub struct JustArray {\n-    array: [u32]\n-}\n-\n #[deny(safe_packed_borrows)]\n fn main() {\n     let good = Good {"}, {"sha": "d14ae4d41d5c52d6526acfd4b8bd835542ec0d05", "filename": "src/test/ui/issues/issue-27060.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Fissues%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Fissues%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060.stderr?ref=6e6bd630e67e79d553e52eaca191555991eedd8f", "patch": "@@ -1,11 +1,11 @@\n error: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/issue-27060.rs:26:13\n+  --> $DIR/issue-27060.rs:21:13\n    |\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-27060.rs:13:8\n+  --> $DIR/issue-27060.rs:8:8\n    |\n LL | #[deny(safe_packed_borrows)]\n    |        ^^^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | #[deny(safe_packed_borrows)]\n    = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n \n error: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/issue-27060.rs:28:13\n+  --> $DIR/issue-27060.rs:23:13\n    |\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^"}, {"sha": "1d9f4c3db2eb508adc184a3d012b1b191430b1ae", "filename": "src/test/ui/lint/unaligned_references.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs?ref=6e6bd630e67e79d553e52eaca191555991eedd8f", "patch": "@@ -0,0 +1,22 @@\n+#![deny(unaligned_references)]\n+\n+#[repr(packed)]\n+pub struct Good {\n+    data: &'static u32,\n+    data2: [&'static u32; 2],\n+    aligned: [u8; 32],\n+}\n+\n+fn main() {\n+    unsafe {\n+        let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n+\n+        let _ = &good.data; //~ ERROR reference to packed field\n+        let _ = &good.data as *const _; //~ ERROR reference to packed field\n+        let _: *const _ = &good.data; //~ ERROR reference to packed field\n+        let _ = &good.data2[0]; //~ ERROR reference to packed field\n+        let _ = &*good.data; // ok, behind a pointer\n+        let _ = &good.aligned; // ok, has align 1\n+        let _ = &good.aligned[2]; // ok, has align 1\n+    }\n+}"}, {"sha": "0c594cdb30a3ce1cae9b4908acaef9ce46c46987", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6bd630e67e79d553e52eaca191555991eedd8f/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=6e6bd630e67e79d553e52eaca191555991eedd8f", "patch": "@@ -0,0 +1,39 @@\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:14:17\n+   |\n+LL |         let _ = &good.data;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:15:17\n+   |\n+LL |         let _ = &good.data as *const _;\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:16:27\n+   |\n+LL |         let _: *const _ = &good.data;\n+   |                           ^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:17:17\n+   |\n+LL |         let _ = &good.data2[0];\n+   |                 ^^^^^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: aborting due to 4 previous errors\n+"}]}