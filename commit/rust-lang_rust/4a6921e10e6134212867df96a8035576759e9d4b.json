{"sha": "4a6921e10e6134212867df96a8035576759e9d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNjkyMWUxMGU2MTM0MjEyODY3ZGY5NmE4MDM1NTc2NzU5ZTlkNGI=", "commit": {"author": {"name": "QuietMisdreavus", "email": "bryan@icesoldier.me", "date": "2016-10-13T15:17:25Z"}, "committer": {"name": "QuietMisdreavus", "email": "bryan@icesoldier.me", "date": "2016-10-13T15:17:25Z"}, "message": "rustdoc: add line breaks to where clauses a la rustfmt", "tree": {"sha": "59b5107f2a56439d9b06dd7d30233d0d3388d67c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59b5107f2a56439d9b06dd7d30233d0d3388d67c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a6921e10e6134212867df96a8035576759e9d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6921e10e6134212867df96a8035576759e9d4b", "html_url": "https://github.com/rust-lang/rust/commit/4a6921e10e6134212867df96a8035576759e9d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a6921e10e6134212867df96a8035576759e9d4b/comments", "author": null, "committer": null, "parents": [{"sha": "0b2c356420c155373d312f4b7063fd19983dfd20", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2c356420c155373d312f4b7063fd19983dfd20", "html_url": "https://github.com/rust-lang/rust/commit/0b2c356420c155373d312f4b7063fd19983dfd20"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "092e1548446e384e3c732b5c44b2fb2b469723d8", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4a6921e10e6134212867df96a8035576759e9d4b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6921e10e6134212867df96a8035576759e9d4b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4a6921e10e6134212867df96a8035576759e9d4b", "patch": "@@ -161,48 +161,60 @@ impl<'a> fmt::Display for WhereClause<'a> {\n         if gens.where_predicates.is_empty() {\n             return Ok(());\n         }\n+        let mut clause = String::new();\n         if f.alternate() {\n-            f.write_str(\" \")?;\n+            clause.push_str(\" where \");\n         } else {\n-            f.write_str(\" <span class='where'>where \")?;\n+            clause.push_str(\" <span class='where'>where \");\n         }\n         for (i, pred) in gens.where_predicates.iter().enumerate() {\n             if i > 0 {\n-                f.write_str(\", \")?;\n+                if f.alternate() {\n+                    clause.push_str(\", \");\n+                } else {\n+                    clause.push_str(\",<br>\");\n+                }\n             }\n             match pred {\n                 &clean::WherePredicate::BoundPredicate { ref ty, ref bounds } => {\n                     let bounds = bounds;\n                     if f.alternate() {\n-                        write!(f, \"{:#}: {:#}\", ty, TyParamBounds(bounds))?;\n+                        clause.push_str(&format!(\"{:#}: {:#}\", ty, TyParamBounds(bounds)));\n                     } else {\n-                        write!(f, \"{}: {}\", ty, TyParamBounds(bounds))?;\n+                        clause.push_str(&format!(\"{}: {}\", ty, TyParamBounds(bounds)));\n                     }\n                 }\n                 &clean::WherePredicate::RegionPredicate { ref lifetime,\n                                                           ref bounds } => {\n-                    write!(f, \"{}: \", lifetime)?;\n+                    clause.push_str(&format!(\"{}: \", lifetime));\n                     for (i, lifetime) in bounds.iter().enumerate() {\n                         if i > 0 {\n-                            f.write_str(\" + \")?;\n+                            clause.push_str(\" + \");\n                         }\n \n-                        write!(f, \"{}\", lifetime)?;\n+                        clause.push_str(&format!(\"{}\", lifetime));\n                     }\n                 }\n                 &clean::WherePredicate::EqPredicate { ref lhs, ref rhs } => {\n                     if f.alternate() {\n-                        write!(f, \"{:#} == {:#}\", lhs, rhs)?;\n+                        clause.push_str(&format!(\"{:#} == {:#}\", lhs, rhs));\n                     } else {\n-                        write!(f, \"{} == {}\", lhs, rhs)?;\n+                        clause.push_str(&format!(\"{} == {}\", lhs, rhs));\n                     }\n                 }\n             }\n         }\n         if !f.alternate() {\n             f.write_str(\"</span>\")?;\n+            let plain = format!(\"{:#}\", self);\n+            if plain.len() > 80 {\n+                let padding = repeat(\"&nbsp;\").take(8).collect::<String>();\n+                clause = clause.replace(\"<br>\", &format!(\"<br>{}\", padding));\n+            } else {\n+                clause = clause.replace(\"<br>\", \" \");\n+            }\n         }\n-        Ok(())\n+        write!(f, \"{}\", clause)\n     }\n }\n "}, {"sha": "a1eabb515a5ce28cd9c7214fe4943fcf8a2d7d2e", "filename": "src/test/rustdoc/line-breaks.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a6921e10e6134212867df96a8035576759e9d4b/src%2Ftest%2Frustdoc%2Fline-breaks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6921e10e6134212867df96a8035576759e9d4b/src%2Ftest%2Frustdoc%2Fline-breaks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fline-breaks.rs?ref=4a6921e10e6134212867df96a8035576759e9d4b", "patch": "@@ -10,6 +10,9 @@\n \n #![crate_name = \"foo\"]\n \n+use std::ops::Add;\n+use std::fmt::Display;\n+\n //@count foo/fn.function_with_a_really_long_name.html //pre/br 2\n pub fn function_with_a_really_long_name(parameter_one: i32,\n                                         parameter_two: i32)\n@@ -19,3 +22,19 @@ pub fn function_with_a_really_long_name(parameter_one: i32,\n \n //@count foo/fn.short_name.html //pre/br 0\n pub fn short_name(param: i32) -> i32 { param + 1 }\n+\n+//@count foo/fn.where_clause.html //pre/br 4\n+pub fn where_clause<T, U>(param_one: T,\n+                          param_two: U)\n+    where T: Add<U> + Display + Copy,\n+          U: Add<T> + Display + Copy,\n+          T::Output: Display + Add<U::Output> + Copy,\n+          <T::Output as Add<U::Output>>::Output: Display,\n+          U::Output: Display + Copy\n+{\n+    let x = param_one + param_two;\n+    println!(\"{} + {} = {}\", param_one, param_two, x);\n+    let y = param_two + param_one;\n+    println!(\"{} + {} = {}\", param_two, param_one, y);\n+    println!(\"{} + {} = {}\", x, y, x + y);\n+}"}]}