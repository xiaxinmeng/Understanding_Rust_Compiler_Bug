{"sha": "a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YTZmOGM4ZWRkYmExMmM3MmE4Y2FhNzNiZGIyMzZmMDg5YmRhM2M=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-12-01T23:21:59Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-12-02T00:56:49Z"}, "message": "Remove the \"linked_from\" feature.", "tree": {"sha": "bade1b79bda101fb91a17509618d379c9d0081d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bade1b79bda101fb91a17509618d379c9d0081d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "html_url": "https://github.com/rust-lang/rust/commit/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13477c77bf07b1c9a8ddcbd4613e173312c33d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/13477c77bf07b1c9a8ddcbd4613e173312c33d59", "html_url": "https://github.com/rust-lang/rust/commit/13477c77bf07b1c9a8ddcbd4613e173312c33d59"}], "stats": {"total": 61, "additions": 5, "deletions": 56}, "files": [{"sha": "4ee157233eded430ad9716b7bd9350a33e47d2d7", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "patch": "@@ -465,11 +465,9 @@ pub mod debuginfo {\n // generates an llvmdeps.rs file next to this one which will be\n // automatically updated whenever LLVM is updated to include an up-to-date\n // set of the libraries we need to link to LLVM for.\n-#[link(name = \"rustllvm\", kind = \"static\")]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}\n-\n-#[linked_from = \"rustllvm\"] // not quite true but good enough\n+#[cfg_attr(not(all(stage0,cargobuild)),\n+           link(name = \"rustllvm\", kind = \"static\"))] // not quite true but good enough\n+#[cfg_attr(stage0, linked_from = \"rustllvm\")]\n extern \"C\" {\n     // Create and destroy contexts.\n     pub fn LLVMContextCreate() -> ContextRef;"}, {"sha": "8ac2c4677eeadc1e32eaede684bc641eea75e3c0", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "patch": "@@ -27,7 +27,7 @@\n #![feature(concat_idents)]\n #![feature(libc)]\n #![feature(link_args)]\n-#![feature(linked_from)]\n+#![cfg_attr(stage0, feature(linked_from))]\n #![feature(staged_api)]\n \n extern crate libc;"}, {"sha": "90bd65386e4666176f848c54de38ef3294928d12", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "patch": "@@ -22,7 +22,7 @@ use rustc_back::PanicStrategy;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, validate_crate_name, ExternCrate};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::util::nodemap::FxHashSet;\n use rustc::middle::cstore::NativeLibrary;\n use rustc::hir::map::Definitions;\n \n@@ -52,7 +52,6 @@ pub struct CrateLoader<'a> {\n     pub sess: &'a Session,\n     cstore: &'a CStore,\n     next_crate_num: CrateNum,\n-    foreign_item_map: FxHashMap<String, Vec<DefIndex>>,\n     local_crate_name: Symbol,\n }\n \n@@ -148,7 +147,6 @@ impl<'a> CrateLoader<'a> {\n             sess: sess,\n             cstore: cstore,\n             next_crate_num: cstore.next_crate_num(),\n-            foreign_item_map: FxHashMap(),\n             local_crate_name: Symbol::intern(local_crate_name),\n         }\n     }\n@@ -649,14 +647,6 @@ impl<'a> CrateLoader<'a> {\n                 items.extend(&lib.foreign_items);\n             }\n         }\n-        for (foreign_lib, list) in self.foreign_item_map.iter() {\n-            let kind_matches = libs.borrow().iter().any(|lib| {\n-                lib.name == &**foreign_lib && lib.kind == kind\n-            });\n-            if kind_matches {\n-                items.extend(list)\n-            }\n-        }\n         items\n     }\n \n@@ -943,17 +933,6 @@ impl<'a> CrateLoader<'a> {\n             };\n             register_native_lib(self.sess, self.cstore, Some(m.span), lib);\n         }\n-\n-        // Finally, process the #[linked_from = \"...\"] attribute\n-        for m in i.attrs.iter().filter(|a| a.check_name(\"linked_from\")) {\n-            let lib_name = match m.value_str() {\n-                Some(name) => name,\n-                None => continue,\n-            };\n-            let list = self.foreign_item_map.entry(lib_name.to_string())\n-                                                    .or_insert(Vec::new());\n-            list.extend(fm.items.iter().map(|it| definitions.opt_def_index(it.id).unwrap()));\n-        }\n     }\n }\n "}, {"sha": "33d99d37c2db6c5c2d13d78e7b417b034e192dd1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "patch": "@@ -132,7 +132,6 @@ declare_features! (\n \n     (active, allocator, \"1.0.0\", Some(27389)),\n     (active, fundamental, \"1.0.0\", Some(29635)),\n-    (active, linked_from, \"1.3.0\", Some(29629)),\n     (active, main, \"1.0.0\", Some(29634)),\n     (active, needs_allocator, \"1.4.0\", Some(27389)),\n     (active, on_unimplemented, \"1.0.0\", Some(29628)),\n@@ -636,12 +635,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                         is an experimental feature\",\n                                        cfg_fn!(fundamental))),\n \n-    (\"linked_from\", Normal, Gated(Stability::Unstable,\n-                                  \"linked_from\",\n-                                  \"the `#[linked_from]` attribute \\\n-                                   is an experimental feature\",\n-                                  cfg_fn!(linked_from))),\n-\n     (\"proc_macro_derive\", Normal, Gated(Stability::Unstable,\n                                         \"proc_macro\",\n                                         \"the `#[proc_macro_derive]` attribute \\"}, {"sha": "8705684111eb46eb276401b9a22170e4a3a9a67e", "filename": "src/test/compile-fail/feature-gate-linked-from.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Ftest%2Fcompile-fail%2Ffeature-gate-linked-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13477c77bf07b1c9a8ddcbd4613e173312c33d59/src%2Ftest%2Fcompile-fail%2Ffeature-gate-linked-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-linked-from.rs?ref=13477c77bf07b1c9a8ddcbd4613e173312c33d59", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[linked_from = \"foo\"] //~ ERROR experimental feature\n-extern {\n-    fn foo();\n-}\n-\n-fn main() {}"}, {"sha": "6917fa55579801da9e10c8fc76b3a83257303340", "filename": "src/test/run-make/issue-15460/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs?ref=a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(linked_from)]\n #![crate_type = \"dylib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n-#[linked_from = \"foo\"]\n extern {\n     pub fn foo();\n }"}, {"sha": "b9da39cbbcb4e35a516c4456b5b9a2c0f16b5ef6", "filename": "src/test/run-pass/auxiliary/issue-25185-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-25185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-25185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-25185-1.rs?ref=a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "patch": "@@ -10,12 +10,9 @@\n \n // no-prefer-dynamic\n \n-#![feature(linked_from)]\n-\n #![crate_type = \"rlib\"]\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-#[linked_from = \"rust_test_helpers\"]\n extern {\n     pub fn rust_dbg_extern_identity_u32(u: u32) -> u32;\n }"}]}