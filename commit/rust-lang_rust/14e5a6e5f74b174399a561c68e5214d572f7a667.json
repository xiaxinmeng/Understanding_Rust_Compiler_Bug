{"sha": "14e5a6e5f74b174399a561c68e5214d572f7a667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZTVhNmU1Zjc0YjE3NDM5OWE1NjFjNjhlNTIxNGQ1NzJmN2E2Njc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-07T06:36:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-07T06:37:52Z"}, "message": "mk: Cleanup. Minor fixes", "tree": {"sha": "f810c92ccd9257434c23d322d6cc2182465725d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f810c92ccd9257434c23d322d6cc2182465725d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14e5a6e5f74b174399a561c68e5214d572f7a667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14e5a6e5f74b174399a561c68e5214d572f7a667", "html_url": "https://github.com/rust-lang/rust/commit/14e5a6e5f74b174399a561c68e5214d572f7a667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14e5a6e5f74b174399a561c68e5214d572f7a667/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c707a2d73cfbb630ff7f38790732586d026a5e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c707a2d73cfbb630ff7f38790732586d026a5e8a", "html_url": "https://github.com/rust-lang/rust/commit/c707a2d73cfbb630ff7f38790732586d026a5e8a"}], "stats": {"total": 263, "additions": 128, "deletions": 135}, "files": [{"sha": "f3a27bb30e4a833ec406c8805378c77aceea42a7", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14e5a6e5f74b174399a561c68e5214d572f7a667/configure", "raw_url": "https://github.com/rust-lang/rust/raw/14e5a6e5f74b174399a561c68e5214d572f7a667/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=14e5a6e5f74b174399a561c68e5214d572f7a667", "patch": "@@ -534,6 +534,7 @@ fi\n # a little post-processing of various config values\n \n CFG_PREFIX=${CFG_PREFIX%/}\n+CFG_HOST_TRIPLES=\"$(echo $CFG_HOST_TRIPLES | tr ',' ' ')\"\n CFG_TARGET_TRIPLES=\"$(echo $CFG_TARGET_TRIPLES | tr ',' ' ')\"\n \n # copy host-triples to target-triples so that hosts are a subset of targets"}, {"sha": "92989d157b4299c0def828d3a6621c342a3704bd", "filename": "mk/dist.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14e5a6e5f74b174399a561c68e5214d572f7a667/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/14e5a6e5f74b174399a561c68e5214d572f7a667/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=14e5a6e5f74b174399a561c68e5214d572f7a667", "patch": "@@ -83,7 +83,7 @@ $(PKG_TAR): $(PKG_FILES)\n \n .PHONY: dist distcheck\n \n-ifdef CFG_WINDOWSY\n+ifdef CFG_WINDOWSY_$(CFG_BUILD_TRIPLE)\n \n dist: $(PKG_EXE)\n "}, {"sha": "55d5a3c476e7397e94d79e3d757af4a975730aa2", "filename": "mk/platform.mk", "status": "modified", "additions": 122, "deletions": 131, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/14e5a6e5f74b174399a561c68e5214d572f7a667/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/14e5a6e5f74b174399a561c68e5214d572f7a667/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=14e5a6e5f74b174399a561c68e5214d572f7a667", "patch": "@@ -36,7 +36,88 @@ CFG_GCCISH_CFLAGS += -fno-omit-frame-pointer\n # embedded into the executable, so use a no-op command.\n CFG_DSYMUTIL := true\n \n+# Hack: not sure how to test if a file exists in make other than this\n+OS_SUPP = $(patsubst %,--suppressions=%,\\\n+      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n+\n+ifdef CFG_DISABLE_OPTIMIZE_CXX\n+  $(info cfg: disabling C++ optimization (CFG_DISABLE_OPTIMIZE_CXX))\n+  CFG_GCCISH_CFLAGS += -O0\n+else\n+  CFG_GCCISH_CFLAGS += -O2\n+endif\n+\n+ifdef CFG_VALGRIND\n+  CFG_VALGRIND += --error-exitcode=100 \\\n+                  --quiet \\\n+                  --suppressions=$(CFG_SRC_DIR)src/etc/x86.supp \\\n+                  $(OS_SUPP)\n+  ifdef CFG_ENABLE_HELGRIND\n+    CFG_VALGRIND += --tool=helgrind\n+  else\n+    CFG_VALGRIND += --tool=memcheck \\\n+                    --leak-check=full\n+  endif\n+endif\n+\n+ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n+  # -znoexecstack is here because librt is for some reason being created\n+  # with executable stack and Fedora (or SELinux) doesn't like that (#798)\n+  ifdef CFG_PERF\n+    ifneq ($(CFG_PERF_WITH_LOGFD),)\n+        CFG_PERF_TOOL := $(CFG_PERF) stat -r 3 --log-fd 2\n+    else\n+        CFG_PERF_TOOL := $(CFG_PERF) stat -r 3\n+    endif\n+  else\n+    ifdef CFG_VALGRIND\n+      CFG_PERF_TOOL :=\\\n+        $(CFG_VALGRIND) --tool=cachegrind --cache-sim=yes --branch-sim=yes\n+    else\n+      CFG_PERF_TOOL := /usr/bin/time --verbose\n+    endif\n+  endif\n+endif\n+\n+# These flags will cause the compiler to produce a .d file\n+# next to the .o file that lists header deps.\n+CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n+\n+AR := ar\n+\n+CFG_INFO := $(info cfg: using $(CFG_C_COMPILER))\n+ifeq ($(CFG_C_COMPILER),clang)\n+  ifeq ($(origin CC),default)\n+    CC=clang\n+  endif\n+  ifeq ($(origin CXX),default)\n+    CXX=clang++\n+  endif\n+  ifeq ($(origin CPP),default)\n+    CPP=clang\n+  endif\n+else\n+ifeq ($(CFG_C_COMPILER),gcc)\n+  ifeq ($(origin CC),default)\n+    CC=gcc\n+  endif\n+  ifeq ($(origin CXX),default)\n+    CXX=g++\n+  endif\n+  ifeq ($(origin CPP),default)\n+    CPP=gcc\n+  endif\n+else\n+  CFG_ERR := $(error please try on a system with gcc or clang)\n+endif\n+endif\n+\n+\n # x86_64-unknown-linux-gnu configuration\n+CC_x86_64-unknown-linux-gnu=$(CC)\n+CXX_x86_64-unknown-linux-gnu=$(CXX)\n+CPP_x86_64-unknown-linux-gnu=$(CPP)\n+AR_x86_64-unknown-linux-gnu=$(AR)\n CFG_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).so\n CFG_LIB_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n@@ -59,6 +140,10 @@ CFG_RUN_x86_64-unknown-linux-gnu=$(2)\n CFG_RUN_TARG_x86_64-unknown-linux-gnu=$(call CFG_RUN_x86_64-unknown-linux-gnu,,$(2))\n \n # i686-unknown-linux-gnu configuration\n+CC_i686-unknown-linux-gnu=$(CC)\n+CXX_i686-unknown-linux-gnu=$(CXX)\n+CPP_i686-unknown-linux-gnu=$(CPP)\n+AR_i686-unknown-linux-gnu=$(AR)\n CFG_LIB_NAME_i686-unknown-linux-gnu=lib$(1).so\n CFG_LIB_GLOB_i686-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_i686-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n@@ -81,6 +166,10 @@ CFG_RUN_i686-unknown-linux-gnu=$(2)\n CFG_RUN_TARG_i686-unknown-linux-gnu=$(call CFG_RUN_i686-unknown-linux-gnu,,$(2))\n \n # x86_64-apple-darwin configuration\n+CC_x86_64-apple-darwin=$(CC)\n+CXX_x86_64-apple-darwin=$(CXX)\n+CPP_x86_64-apple-darwin=$(CPP)\n+AR_x86_64-apple-darwin=$(AR)\n CFG_LIB_NAME_x86_64-apple-darwin=lib$(1).dylib\n CFG_LIB_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib.dSYM\n@@ -102,6 +191,10 @@ CFG_RUN_x86_64-apple-darwin=$(2)\n CFG_RUN_TARG_x86_64-apple-darwin=$(call CFG_RUN_x86_64-apple-darwin,,$(2))\n \n # i686-apple-darwin configuration\n+CC_i686-apple-darwin=$(CC)\n+CXX_i686-apple-darwin=$(CXX)\n+CPP_i686-apple-darwin=$(CPP)\n+AR_i686-apple-darwin=$(AR)\n CFG_LIB_NAME_i686-apple-darwin=lib$(1).dylib\n CFG_LIB_GLOB_i686-apple-darwin=lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_i686-apple-darwin=lib$(1)-*.dylib.dSYM\n@@ -123,6 +216,10 @@ CFG_RUN_i686-apple-darwin=$(2)\n CFG_RUN_TARG_i686-apple-darwin=$(call CFG_RUN_i686-apple-darwin,,$(2))\n \n # arm-unknown-android configuration\n+CC_arm-unknown-android=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-gcc\n+CXX_arm-unknown-android=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-g++\n+CPP_arm-unknown-android=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-gcc -E\n+AR_arm-unknown-android=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-ar\n CFG_LIB_NAME_arm-unknown-android=lib$(1).so\n CFG_LIB_GLOB_arm-unknown-android=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-unknown-android=lib$(1)-*.dylib.dSYM\n@@ -135,7 +232,6 @@ CFG_GCCISH_POST_LIB_FLAGS_arm-unknown-android := -Wl,-no-whole-archive -Wl,-znoe\n CFG_DEF_SUFFIX_arm-unknown-android := .android.def\n CFG_INSTALL_NAME_arm-unknown-android =\n CFG_LIBUV_LINK_FLAGS_arm-unknown-android =\n-CFG_GCCISH_CROSS_PREFIX_arm-unknown-android = $(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-\n CFG_EXE_SUFFIX_arm-unknown-android :=\n CFG_WINDOWSY_arm-unknown-android :=\n CFG_UNIXY_arm-unknown-android := 1\n@@ -146,6 +242,10 @@ CFG_RUN_TARG_arm-unknown-android=\n RUSTC_FLAGS_arm-unknown-android :=--android-cross-path='$(CFG_ANDROID_CROSS_PATH)'\n \n # i686-pc-mingw32 configuration\n+CC_i686-pc-mingw32=$(CC)\n+CXX_i686-pc-mingw32=$(CXX)\n+CPP_i686-pc-mingw32=$(CPP)\n+AR_i686-pc-mingw32=$(AR)\n CFG_LIB_NAME_i686-pc-mingw32=$(1).dll\n CFG_LIB_GLOB_i686-pc-mingw32=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_i686-pc-mingw32=$(1)-*.dylib.dSYM\n@@ -167,6 +267,10 @@ CFG_RUN_i686-pc-mingw32=PATH=\"$(CFG_LDPATH_i686-pc-mingw32):$(1)\" $(2)\n CFG_RUN_TARG_i686-pc-mingw32=$(call CFG_RUN_i686-pc-mingw32,$(HLIB$(1)_H_$(CFG_BUILD_TRIPLE)),$(2))\n \n # i586-mingw32msvc configuration\n+CC_i586-mingw32msvc=$(CC)\n+CXX_i586-mingw32msvc=$(CXX)\n+CPP_i586-mingw32msvc=$(CPP)\n+AR_i586-mingw32msvc=$(AR)\n CFG_LIB_NAME_i586-mingw32msvc=$(1).dll\n CFG_LIB_GLOB_i586-mingw32msvc=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_i586-mingw32msvc=$(1)-*.dylib.dSYM\n@@ -179,7 +283,6 @@ CFG_GCCISH_POST_LIB_FLAGS_i586-mingw32msvc :=\n CFG_DEF_SUFFIX_i586-mingw32msvc := .mingw32.def\n CFG_INSTALL_NAME_i586-mingw32msvc =\n CFG_LIBUV_LINK_FLAGS_i586-mingw32msvc := -lWs2_32 -lpsapi -liphlpapi\n-CFG_GCCISH_CROSS_PREFIX_i586-mingw32msvc = $(CFG_MIGW32_CROSS_PATH)/bin/i586-mingw32msvc-\n CFG_EXE_SUFFIX_i586-mingw32msvc := .exe\n CFG_WINDOWSY_i586-mingw32msvc := 1\n CFG_UNIXY_i586-mingw32msvc :=\n@@ -191,6 +294,10 @@ CFG_RUN_i586-mingw32msvc=\n CFG_RUN_TARG_i586-mingw32msvc=\n \n # x86_64-unknown-freebsd configuration\n+CC_x86_64-unknown-freebsd=$(CC)\n+CXX_x86_64-unknown-freebsd=$(CXX)\n+CPP_x86_64-unknown-freebsd=$(CPP)\n+AR_x86_64-unknown-freebsd=$(AR)\n CFG_LIB_NAME_x86_64-unknown-freebsd=lib$(1).so\n CFG_LIB_GLOB_x86_64-unknown-freebsd=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-freebsd=$(1)-*.dylib.dSYM\n@@ -210,166 +317,50 @@ CFG_LDPATH_x86_64-unknown-freebsd :=\n CFG_RUN_x86_64-unknown-freebsd=$(2)\n CFG_RUN_TARG_x86_64-unknown-freebsd=$(call CFG_RUN_x86_64-unknown-freebsd,,$(2))\n \n-# Hack: not sure how to test if a file exists in make other than this\n-OS_SUPP = $(patsubst %,--suppressions=%,\\\n-      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n-\n-ifdef CFG_DISABLE_OPTIMIZE_CXX\n-  $(info cfg: disabling C++ optimization (CFG_DISABLE_OPTIMIZE_CXX))\n-  CFG_GCCISH_CFLAGS += -O0\n-else\n-  CFG_GCCISH_CFLAGS += -O2\n-endif\n \n-ifdef CFG_VALGRIND\n-  CFG_VALGRIND += --error-exitcode=100 \\\n-                  --quiet \\\n-                  --suppressions=$(CFG_SRC_DIR)src/etc/x86.supp \\\n-                  $(OS_SUPP)\n-  ifdef CFG_ENABLE_HELGRIND\n-    CFG_VALGRIND += --tool=helgrind\n-  else\n-    CFG_VALGRIND += --tool=memcheck \\\n-                    --leak-check=full\n-  endif\n-endif\n-\n-ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n-  # -znoexecstack is here because librt is for some reason being created\n-  # with executable stack and Fedora (or SELinux) doesn't like that (#798)\n-  ifdef CFG_PERF\n-    ifneq ($(CFG_PERF_WITH_LOGFD),)\n-        CFG_PERF_TOOL := $(CFG_PERF) stat -r 3 --log-fd 2\n-    else\n-        CFG_PERF_TOOL := $(CFG_PERF) stat -r 3\n-    endif\n-  else\n-    ifdef CFG_VALGRIND\n-      CFG_PERF_TOOL :=\\\n-        $(CFG_VALGRIND) --tool=cachegrind --cache-sim=yes --branch-sim=yes\n-    else\n-      CFG_PERF_TOOL := /usr/bin/time --verbose\n-    endif\n-  endif\n-endif\n-\n-CFG_INFO := $(info cfg: using $(CFG_C_COMPILER))\n-ifeq ($(CFG_C_COMPILER),clang)\n-  ifeq ($(origin CC),default)\n-    CC=clang\n-  endif\n-  ifeq ($(origin CXX),default)\n-    CXX=clang++\n-  endif\n-  ifeq ($(origin CPP),default)\n-    CPP=clang\n-  endif\n-  CFG_GCCISH_CFLAGS += \n-  CFG_GCCISH_CXXFLAGS += \n-  CFG_GCCISH_LINK_FLAGS += \n-  # These flags will cause the compiler to produce a .d file\n-  # next to the .o file that lists header deps.\n-  CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n-\n-else\n-ifeq ($(CFG_C_COMPILER),gcc)\n-  ifeq ($(origin CC),default)\n-    CC=gcc\n-  endif\n-  ifeq ($(origin CXX),default)\n-    CXX=g++\n-  endif\n-  ifeq ($(origin CPP),default)\n-    CPP=gcc\n-  endif\n-  CFG_GCCISH_CFLAGS += \n-  CFG_GCCISH_CXXFLAGS += \n-  CFG_GCCISH_LINK_FLAGS += \n-  # These flags will cause the compiler to produce a .d file\n-  # next to the .o file that lists header deps.\n-  CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n-\n-else\n-  CFG_ERR := $(error please try on a system with gcc or clang)\n-endif\n-endif\n-\n-define CFG_MAKE_CC\n-  ifeq ($$(CFG_BUILD_TRIPLE),$(1))\n-  \n-  CFG_COMPILE_C_$(1) = $$(CC)  \\\n-        $$(CFG_GCCISH_CFLAGS)      \\\n-        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        $$(CFG_DEPEND_FLAGS)       \\\n-        -c -o $$(1) $$(2)\n-  CFG_LINK_C_$(1) = $$(CC) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)          \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1)))             \\\n-        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)     \\\n-        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n-  CFG_COMPILE_CXX_$(1) = $$(CXX) \\\n+define CFG_MAKE_TOOLCHAIN\n+  CFG_COMPILE_C_$(1) = $$(CC_$(1))  \\\n         $$(CFG_GCCISH_CFLAGS)      \\\n-        $$(CFG_GCCISH_CXXFLAGS)    \\\n         $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        $$(CFG_GCCISH_CXXFLAGS_$(1))    \\\n         $$(CFG_DEPEND_FLAGS)       \\\n         -c -o $$(1) $$(2)\n-  CFG_LINK_CXX_$(1) = $$(CXX) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)             \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1))                 \\\n-        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)        \\\n-        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n-\n-  else\n-  \n-  CFG_COMPILE_C_$(1) = $(CFG_GCCISH_CROSS_PREFIX_$(1))$$(CC)  \\\n-        $$(CFG_GCCISH_CFLAGS)      \\\n-        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        $$(CFG_DEPEND_FLAGS)       \\\n-        -c -o $$(1) $$(2)\n-  CFG_LINK_C_$(1) = $(CFG_GCCISH_CROSS_PREFIX_$(1))$$(CC) \\\n+  CFG_LINK_C_$(1) = $$(CC_$(1)) \\\n         $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)          \\\n         $$(CFG_GCCISH_LINK_FLAGS_$(1)))             \\\n         $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)     \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n-  CFG_COMPILE_CXX_$(1) = $(CFG_GCCISH_CROSS_PREFIX_$(1))$$(CXX) \\\n+  CFG_COMPILE_CXX_$(1) = $$(CXX_$(1)) \\\n         $$(CFG_GCCISH_CFLAGS)      \\\n         $$(CFG_GCCISH_CXXFLAGS)    \\\n         $$(CFG_GCCISH_CFLAGS_$(1)) \\\n         $$(CFG_GCCISH_CXXFLAGS_$(1))    \\\n         $$(CFG_DEPEND_FLAGS)       \\\n         -c -o $$(1) $$(2)\n-  CFG_LINK_CXX_$(1) = $(CFG_GCCISH_CROSS_PREFIX_$(1))$$(CXX) \\\n+  CFG_LINK_CXX_$(1) = $$(CXX_$(1)) \\\n         $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)             \\\n         $$(CFG_GCCISH_LINK_FLAGS_$(1))                 \\\n         $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)        \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n \n-  endif\n-\n-endef\n-\n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(eval $(call CFG_MAKE_CC,$(target))))\n-\n-# We're using llvm-mc as our assembler because it supports\n-# .cfi pseudo-ops on mac\n-define CFG_MAKE_ASSEMBLER\n-  ifeq ($$(CFG_BUILD_TRIPLE),$(1))\n+  ifneq ($(1),arm-unknown-android)\n \n-  CFG_ASSEMBLE_$(1)=$$(CPP) -E $$(CFG_DEPEND_FLAGS) $$(2) | \\\n+  # We're using llvm-mc as our assembler because it supports\n+  # .cfi pseudo-ops on mac\n+  CFG_ASSEMBLE_$(1)=$$(CPP_$(1)) -E $$(CFG_DEPEND_FLAGS) $$(2) | \\\n                     $$(LLVM_MC_$$(CFG_BUILD_TRIPLE)) \\\n                     -assemble \\\n                     -filetype=obj \\\n                     -triple=$(1) \\\n                     -o=$$(1)\n   else\n \n-  CFG_ASSEMBLE_$(1)=$(CFG_GCCISH_CROSS_PREFIX_$(1))$$(CPP) $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1) \n+  # For the Android cross, use the Android assembler\n+  # XXX: We should be able to use the LLVM assembler\n+  CFG_ASSEMBLE_$(1)=$$(CXX_$(1)) $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)\n \n   endif\n \n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES),\\\n-  $(eval $(call CFG_MAKE_ASSEMBLER,$(target))))\n+  $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))"}, {"sha": "d104d608e01497115b161e65b81563781e2c769f", "filename": "mk/rt.mk", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14e5a6e5f74b174399a561c68e5214d572f7a667/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/14e5a6e5f74b174399a561c68e5214d572f7a667/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=14e5a6e5f74b174399a561c68e5214d572f7a667", "patch": "@@ -157,6 +157,7 @@ LIBUV_DEPS := $$(wildcard \\\n               $$(S)src/libuv/*/*/*/*)\n endif\n \n+# XXX: Shouldn't need platform-specific conditions here\n ifdef CFG_WINDOWSY_$(1)\n $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n@@ -168,9 +169,9 @@ $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n \t\tCFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n \t\tLDFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n-\t\tCC=\"$$(CFG_GCCISH_CROSS_PREFIX_$(1))$$(CC)\" \\\n-\t\tCXX=\"$$(CFG_GCCISH_CROSS_PREFIX_$(1))$$(CXX)\" \\\n-\t\tAR=\"$$(CFG_GCCISH_CROSS_PREFIX_$(1))$$(AR)\" \\\n+\t\tCC=\"$$(CC_$(1))\" \\\n+\t\tCXX=\"$$(CXX_$(1))\" \\\n+\t\tAR=\"$$(AR_$(1))\" \\\n \t\tBUILDTYPE=Release \\\n \t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n \t\thost=android OS=linux \\"}]}