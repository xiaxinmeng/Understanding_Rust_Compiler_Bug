{"sha": "a35877b5f102f9da3d7e7d6aac3800a96b549de9", "node_id": "C_kwDOAAsO6NoAKGEzNTg3N2I1ZjEwMmY5ZGEzZDdlN2Q2YWFjMzgwMGE5NmI1NDlkZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-10T00:30:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-10T00:30:07Z"}, "message": "Auto merge of #2013 - RalfJung:simd, r=RalfJung\n\nimplement simd_{shuffle,gather,scatter}\n\nThis makes portable-simd doctests pass. :)\n\nCc https://github.com/rust-lang/miri/issues/1912", "tree": {"sha": "92e5def9344e22f478a09faaac502ba9539d95bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e5def9344e22f478a09faaac502ba9539d95bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a35877b5f102f9da3d7e7d6aac3800a96b549de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a35877b5f102f9da3d7e7d6aac3800a96b549de9", "html_url": "https://github.com/rust-lang/rust/commit/a35877b5f102f9da3d7e7d6aac3800a96b549de9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a35877b5f102f9da3d7e7d6aac3800a96b549de9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aeff5d9ef3032c6ab618cd346f6cdcfaa46c258", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aeff5d9ef3032c6ab618cd346f6cdcfaa46c258", "html_url": "https://github.com/rust-lang/rust/commit/5aeff5d9ef3032c6ab618cd346f6cdcfaa46c258"}, {"sha": "41ffce1145efd87e23878ce0802a52557b24d852", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ffce1145efd87e23878ce0802a52557b24d852", "html_url": "https://github.com/rust-lang/rust/commit/41ffce1145efd87e23878ce0802a52557b24d852"}], "stats": {"total": 132, "additions": 129, "deletions": 3}, "files": [{"sha": "b4416bfa985989b84c2bcc034a7d71c3b47d2db0", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 87, "deletions": 3, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/a35877b5f102f9da3d7e7d6aac3800a96b549de9/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35877b5f102f9da3d7e7d6aac3800a96b549de9/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=a35877b5f102f9da3d7e7d6aac3800a96b549de9", "patch": "@@ -3,7 +3,7 @@ use std::iter;\n use log::trace;\n \n use rustc_apfloat::{Float, Round};\n-use rustc_middle::ty::layout::{IntegerExt, LayoutOf};\n+use rustc_middle::ty::layout::{HasParamEnv, IntegerExt, LayoutOf};\n use rustc_middle::{mir, mir::BinOp, ty, ty::FloatTy};\n use rustc_target::abi::{Align, Integer};\n \n@@ -570,8 +570,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let no = this.read_immediate(&this.mplace_index(&no, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n \n-                    let mask = simd_element_to_bool(mask)?;\n-                    let val = if mask { yes } else { no };\n+                    let val = if simd_element_to_bool(mask)? { yes } else { no };\n                     this.write_immediate(*val, &dest.into())?;\n                 }\n             }\n@@ -614,6 +613,91 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     this.write_immediate(val, &dest.into())?;\n                 }\n             }\n+            \"simd_shuffle\" => {\n+                let &[ref left, ref right, ref index] = check_arg_count(args)?;\n+                let (left, left_len) = this.operand_to_simd(left)?;\n+                let (right, right_len) = this.operand_to_simd(right)?;\n+                let (dest, dest_len) = this.place_to_simd(dest)?;\n+\n+                // `index` is an array, not a SIMD type\n+                let ty::Array(_, index_len) = index.layout.ty.kind() else {\n+                    bug!(\"simd_shuffle index argument has non-array type {}\", index.layout.ty)\n+                };\n+                let index_len = index_len.eval_usize(*this.tcx, this.param_env());\n+\n+                assert_eq!(left_len, right_len);\n+                assert_eq!(index_len, dest_len);\n+\n+                for i in 0..dest_len {\n+                    let src_index: u64 = this\n+                        .read_immediate(&this.operand_index(&index, i)?.into())?\n+                        .to_scalar()?\n+                        .to_u32()?\n+                        .into();\n+                    let dest = this.mplace_index(&dest, i)?;\n+\n+                    let val = if src_index < left_len {\n+                        this.read_immediate(&this.mplace_index(&left, src_index)?.into())?\n+                    } else if src_index < left_len.checked_add(right_len).unwrap() {\n+                        this.read_immediate(\n+                            &this.mplace_index(&right, src_index - left_len)?.into(),\n+                        )?\n+                    } else {\n+                        bug!(\n+                            \"simd_shuffle index {} is out of bounds for 2 vectors of size {}\",\n+                            src_index,\n+                            left_len\n+                        );\n+                    };\n+                    this.write_immediate(*val, &dest.into())?;\n+                }\n+            }\n+            \"simd_gather\" => {\n+                let &[ref passthru, ref ptrs, ref mask] = check_arg_count(args)?;\n+                let (passthru, passthru_len) = this.operand_to_simd(passthru)?;\n+                let (ptrs, ptrs_len) = this.operand_to_simd(ptrs)?;\n+                let (mask, mask_len) = this.operand_to_simd(mask)?;\n+                let (dest, dest_len) = this.place_to_simd(dest)?;\n+\n+                assert_eq!(dest_len, passthru_len);\n+                assert_eq!(dest_len, ptrs_len);\n+                assert_eq!(dest_len, mask_len);\n+\n+                for i in 0..dest_len {\n+                    let passthru = this.read_immediate(&this.mplace_index(&passthru, i)?.into())?;\n+                    let ptr = this.read_immediate(&this.mplace_index(&ptrs, i)?.into())?;\n+                    let mask = this.read_immediate(&this.mplace_index(&mask, i)?.into())?;\n+                    let dest = this.mplace_index(&dest, i)?;\n+\n+                    let val = if simd_element_to_bool(mask)? {\n+                        let place = this.deref_operand(&ptr.into())?;\n+                        this.read_immediate(&place.into())?\n+                    } else {\n+                        passthru\n+                    };\n+                    this.write_immediate(*val, &dest.into())?;\n+                }\n+            }\n+            \"simd_scatter\" => {\n+                let &[ref value, ref ptrs, ref mask] = check_arg_count(args)?;\n+                let (value, value_len) = this.operand_to_simd(value)?;\n+                let (ptrs, ptrs_len) = this.operand_to_simd(ptrs)?;\n+                let (mask, mask_len) = this.operand_to_simd(mask)?;\n+\n+                assert_eq!(ptrs_len, value_len);\n+                assert_eq!(ptrs_len, mask_len);\n+\n+                for i in 0..ptrs_len {\n+                    let value = this.read_immediate(&this.mplace_index(&value, i)?.into())?;\n+                    let ptr = this.read_immediate(&this.mplace_index(&ptrs, i)?.into())?;\n+                    let mask = this.read_immediate(&this.mplace_index(&mask, i)?.into())?;\n+\n+                    if simd_element_to_bool(mask)? {\n+                        let place = this.deref_operand(&ptr.into())?;\n+                        this.write_immediate(*value, &place.into())?;\n+                    }\n+                }\n+            }\n \n             // Atomic operations\n             \"atomic_load\" => this.atomic_load(args, dest, AtomicReadOp::SeqCst)?,"}, {"sha": "ae6f048226ddb5131327c3e3c64d502a60c553f0", "filename": "tests/compile-fail/intrinsics/simd-gather.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a35877b5f102f9da3d7e7d6aac3800a96b549de9/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35877b5f102f9da3d7e7d6aac3800a96b549de9/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.rs?ref=a35877b5f102f9da3d7e7d6aac3800a96b549de9", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+#![feature(portable_simd)]\n+use std::simd::*;\n+\n+fn main() { unsafe {\n+    let vec: &[i8] = &[10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    let idxs = Simd::from_array([9, 3, 0, 17]);\n+    let _result = Simd::gather_select_unchecked(&vec, Mask::splat(true), idxs, Simd::splat(0));\n+} }"}, {"sha": "f46e4f0d4f6a8418e409b2849379f4751296db19", "filename": "tests/compile-fail/intrinsics/simd-scatter.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a35877b5f102f9da3d7e7d6aac3800a96b549de9/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35877b5f102f9da3d7e7d6aac3800a96b549de9/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.rs?ref=a35877b5f102f9da3d7e7d6aac3800a96b549de9", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+#![feature(portable_simd)]\n+use std::simd::*;\n+\n+fn main() { unsafe {\n+    let mut vec: Vec<i8> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    let idxs = Simd::from_array([9, 3, 0, 17]);\n+    Simd::from_array([-27, 82, -41, 124]).scatter_select_unchecked(&mut vec, Mask::splat(true), idxs);\n+} }"}, {"sha": "c046af0bcf52af76bb746787498f2470a0067cfd", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a35877b5f102f9da3d7e7d6aac3800a96b549de9/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35877b5f102f9da3d7e7d6aac3800a96b549de9/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=a35877b5f102f9da3d7e7d6aac3800a96b549de9", "patch": "@@ -238,6 +238,28 @@ fn simd_cast() {\n     }\n }\n \n+fn simd_swizzle() {\n+    use Which::*;\n+\n+    let a = f32x4::splat(10.0);\n+    let b = f32x4::from_array([1.0, 2.0, 3.0, -4.0]);\n+\n+    assert_eq!(simd_swizzle!(b, [3, 0, 0, 2]), f32x4::from_array([-4.0, 1.0, 1.0, 3.0]));\n+    assert_eq!(simd_swizzle!(b, [1, 2]), f32x2::from_array([2.0, 3.0]));\n+    assert_eq!(simd_swizzle!(b, a, [First(3), Second(0)]), f32x2::from_array([-4.0, 10.0]));\n+}\n+\n+fn simd_gather_scatter() {\n+    let mut vec: Vec<i16> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    let idxs = Simd::from_array([9, 3, 0, 17]);\n+    let result = Simd::gather_or_default(&vec, idxs); // Note the lane that is out-of-bounds.\n+    assert_eq!(result, Simd::from_array([0, 13, 10, 0]));\n+\n+    let idxs = Simd::from_array([9, 3, 0, 0]);\n+    Simd::from_array([-27, 82, -41, 124]).scatter(&mut vec, idxs);\n+    assert_eq!(vec, vec![124, 11, 12, 82, 14, 15, 16, 17, 18]);\n+}\n+\n fn simd_intrinsics() {\n     extern \"platform-intrinsic\" {\n         fn simd_eq<T, U>(x: T, y: T) -> U;\n@@ -276,5 +298,7 @@ fn main() {\n     simd_ops_f64();\n     simd_ops_i32();\n     simd_cast();\n+    simd_swizzle();\n+    simd_gather_scatter();\n     simd_intrinsics();\n }"}]}