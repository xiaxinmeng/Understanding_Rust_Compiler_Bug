{"sha": "f001287c90e98d72296eb2a20e3cbe34b977f587", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMDEyODdjOTBlOThkNzIyOTZlYjJhMjBlM2NiZTM0Yjk3N2Y1ODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-18T23:40:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-18T23:40:14Z"}, "message": "Auto merge of #57747 - Centril:rollup, r=Centril\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #57107 (Add a regression test for mutating a non-mut #[thread_local])\n - #57132 (Document that `-C opt-level=0` implies `-C debug-assertions`.)\n - #57212 (docs(rustc): Link to the book's source in rustc)\n - #57302 (Fix unused_assignments false positive)\n - #57350 (Better error note on unimplemented Index trait for string)\n - #57635 (use structured macro and path resolve suggestions)\n - #57650 (librustc_metadata: Pass a default value when unwrapping a span)\n - #57657 (Add regression test to close #53787)\n - #57658 (Two HIR tweaks)\n - #57720 (Fix suggestions given mulitple bad lifetimes)\n - #57725 (Use structured suggestion to surround struct literal with parenthesis)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ef53985ae377e166b1bb6f55079ecb2376bb36bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef53985ae377e166b1bb6f55079ecb2376bb36bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f001287c90e98d72296eb2a20e3cbe34b977f587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f001287c90e98d72296eb2a20e3cbe34b977f587", "html_url": "https://github.com/rust-lang/rust/commit/f001287c90e98d72296eb2a20e3cbe34b977f587", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f001287c90e98d72296eb2a20e3cbe34b977f587/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c76f3c374f80e20b612601a3c375666a58ac3971", "url": "https://api.github.com/repos/rust-lang/rust/commits/c76f3c374f80e20b612601a3c375666a58ac3971", "html_url": "https://github.com/rust-lang/rust/commit/c76f3c374f80e20b612601a3c375666a58ac3971"}, {"sha": "2a830e47e11ad46f1df86c10b58aea17e7d273d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a830e47e11ad46f1df86c10b58aea17e7d273d0", "html_url": "https://github.com/rust-lang/rust/commit/2a830e47e11ad46f1df86c10b58aea17e7d273d0"}], "stats": {"total": 392, "additions": 302, "deletions": 90}, "files": [{"sha": "a616409d9a400204b099d20399268e18d03b4258", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -187,7 +187,7 @@ This flag lets you control debug information:\n \n This flag lets you control the optimization level.\n \n-* `0`: no optimizations\n+* `0`: no optimizations, also turn on `cfg(debug_assertions)`.\n * `1`: basic optimizations\n * `2`: some optimizations\n * `3`: all optimizations"}, {"sha": "25a5c97b0a1200dbad7b9e9266f663602c5649f5", "filename": "src/doc/rustc/src/contributing.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcontributing.md?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -1,6 +1,12 @@\n # Contributing to rustc\n \n We'd love to have your help improving `rustc`! To that end, we've written [a\n-whole book](https://rust-lang.github.io/rustc-guide/) on its\n+whole book][rustc_guide] on its\n internals, how it works, and how to get started working on it. To learn\n more, you'll want to check that out.\n+\n+If you would like to contribute to _this_ book, you can find its source in the\n+rustc source at [src/doc/rustc][rustc_book].\n+\n+[rustc_guide]: https://rust-lang.github.io/rustc-guide/\n+[rustc_book]: https://github.com/rust-lang/rust/tree/master/src/doc/rustc"}, {"sha": "6cfa36741d0ca61363d3bdfba0df1233a94a1153", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -51,6 +51,21 @@\n /// ```\n #[lang = \"index\"]\n #[rustc_on_unimplemented(\n+    on(\n+        _Self=\"&str\",\n+        note=\"you can use `.chars().nth()` or `.bytes().nth()`\n+see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"\n+    ),\n+    on(\n+        _Self=\"str\",\n+        note=\"you can use `.chars().nth()` or `.bytes().nth()`\n+see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"\n+    ),\n+    on(\n+        _Self=\"std::string::String\",\n+        note=\"you can use `.chars().nth()` or `.bytes().nth()`\n+see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"\n+    ),\n     message=\"the type `{Self}` cannot be indexed by `{Idx}`\",\n     label=\"`{Self}` cannot be indexed by `{Idx}`\",\n )]\n@@ -141,6 +156,21 @@ pub trait Index<Idx: ?Sized> {\n /// ```\n #[lang = \"index_mut\"]\n #[rustc_on_unimplemented(\n+    on(\n+        _Self=\"&str\",\n+        note=\"you can use `.chars().nth()` or `.bytes().nth()`\n+see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"\n+    ),\n+    on(\n+        _Self=\"str\",\n+        note=\"you can use `.chars().nth()` or `.bytes().nth()`\n+see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"\n+    ),\n+    on(\n+        _Self=\"std::string::String\",\n+        note=\"you can use `.chars().nth()` or `.bytes().nth()`\n+see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"\n+    ),\n     message=\"the type `{Self}` cannot be mutably indexed by `{Idx}`\",\n     label=\"`{Self}` cannot be mutably indexed by `{Idx}`\",\n )]"}, {"sha": "8cdc493e6fda7763a64f9ee99e9148aa9d36d8d1", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -3775,7 +3775,7 @@ impl<'a> LoweringContext<'a> {\n                 let ohs = P(self.lower_expr(ohs));\n                 hir::ExprKind::Unary(op, ohs)\n             }\n-            ExprKind::Lit(ref l) => hir::ExprKind::Lit(P((*l).clone())),\n+            ExprKind::Lit(ref l) => hir::ExprKind::Lit((*l).clone()),\n             ExprKind::Cast(ref expr, ref ty) => {\n                 let expr = P(self.lower_expr(expr));\n                 hir::ExprKind::Cast(expr, self.lower_ty(ty, ImplTraitContext::disallowed()))"}, {"sha": "aaef1c722be9695db03e144f374832078e7620bd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -19,7 +19,7 @@ use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n use syntax::source_map::{self, Spanned};\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n-use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy};\n+use syntax::ast::{Attribute, Label, Lit, StrStyle, FloatTy, IntTy, UintTy};\n use syntax::attr::InlineAttr;\n use syntax::ext::hygiene::SyntaxContext;\n use syntax::ptr::P;\n@@ -142,17 +142,6 @@ pub const DUMMY_HIR_ID: HirId = HirId {\n \n pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n-pub struct Label {\n-    pub ident: Ident,\n-}\n-\n-impl fmt::Debug for Label {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"label({:?})\", self.ident)\n-    }\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n@@ -1466,7 +1455,7 @@ pub enum ExprKind {\n     /// A unary operation (For example: `!x`, `*x`)\n     Unary(UnOp, P<Expr>),\n     /// A literal (For example: `1`, `\"foo\"`)\n-    Lit(P<Lit>),\n+    Lit(Lit),\n     /// A cast (`foo as f64`)\n     Cast(P<Expr>, P<Ty>),\n     Type(P<Expr>, P<Ty>),"}, {"sha": "f48059b328ff3631ae97c0fee29b9e188b7ab131", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -153,7 +153,7 @@ impl_stable_hash_for!(enum hir::LifetimeName {\n     Error,\n });\n \n-impl_stable_hash_for!(struct hir::Label {\n+impl_stable_hash_for!(struct ast::Label {\n     ident\n });\n "}, {"sha": "2ca823929fd3885a28629e1b94f341697c2e3f6f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -911,17 +911,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn compute(&mut self, body: &hir::Expr) -> LiveNode {\n-        // if there is a `break` or `again` at the top level, then it's\n-        // effectively a return---this only occurs in `for` loops,\n-        // where the body is really a closure.\n-\n         debug!(\"compute: using id for body, {}\", self.ir.tcx.hir().node_to_pretty_string(body.id));\n \n-        let exit_ln = self.s.exit_ln;\n-\n-        self.break_ln.insert(body.id, exit_ln);\n-        self.cont_ln.insert(body.id, exit_ln);\n-\n         // the fallthrough exit is only for those cases where we do not\n         // explicitly return:\n         let s = self.s;\n@@ -1024,19 +1015,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&e, succ)\n             }\n \n-            hir::ExprKind::Closure(.., blk_id, _, _) => {\n+            hir::ExprKind::Closure(..) => {\n                 debug!(\"{} is an ExprKind::Closure\",\n                        self.ir.tcx.hir().node_to_pretty_string(expr.id));\n \n-                // The next-node for a break is the successor of the entire\n-                // loop. The next-node for a continue is the top of this loop.\n-                let node = self.live_node(expr.hir_id, expr.span);\n-\n-                let break_ln = succ;\n-                let cont_ln = node;\n-                self.break_ln.insert(blk_id.node_id, break_ln);\n-                self.cont_ln.insert(blk_id.node_id, cont_ln);\n-\n                 // the construction of a closure itself is not important,\n                 // but we have to consider the closed over variables.\n                 let caps = self.ir.capture_info_map.get(&expr.id).cloned().unwrap_or_else(||\n@@ -1407,15 +1389,16 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         debug!(\"propagate_through_loop: using id for loop body {} {}\",\n                expr.id, self.ir.tcx.hir().node_to_pretty_string(body.id));\n \n-        let break_ln = succ;\n-        let cont_ln = ln;\n-        self.break_ln.insert(expr.id, break_ln);\n-        self.cont_ln.insert(expr.id, cont_ln);\n+\n+        self.break_ln.insert(expr.id, succ);\n \n         let cond_ln = match kind {\n             LoopLoop => ln,\n             WhileLoop(ref cond) => self.propagate_through_expr(&cond, ln),\n         };\n+\n+        self.cont_ln.insert(expr.id, cond_ln);\n+\n         let body_ln = self.propagate_through_block(body, cond_ln);\n \n         // repeat until fixed point is reached:"}, {"sha": "3e25f98ccd27cfed98de1c8675734e2b1b6480d5", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -135,10 +135,11 @@ impl CodeSuggestion {\n             if let Some(line) = line_opt {\n                 if let Some(lo) = line.char_indices().map(|(i, _)| i).nth(lo) {\n                     let hi_opt = hi_opt.and_then(|hi| line.char_indices().map(|(i, _)| i).nth(hi));\n-                    buf.push_str(match hi_opt {\n-                        Some(hi) => &line[lo..hi],\n-                        None => &line[lo..],\n-                    });\n+                    match hi_opt {\n+                        Some(hi) if hi > lo => buf.push_str(&line[lo..hi]),\n+                        Some(_) => (),\n+                        None => buf.push_str(&line[lo..]),\n+                    }\n                 }\n                 if let None = hi_opt {\n                     buf.push('\\n');"}, {"sha": "1f00086e32fe127d3e5759bddc83f579ebe61497", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -163,7 +163,7 @@ impl<'a, 'tcx> Collector<'a, 'tcx> {\n            !self.tcx.features().static_nobundle {\n             feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n                                            \"static_nobundle\",\n-                                           span.unwrap(),\n+                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n                                            GateIssue::Language,\n                                            \"kind=\\\"static-nobundle\\\" is feature gated\");\n         }"}, {"sha": "a58d63e1ca28b271f2915a14a62ad3d08f1daec1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -3318,7 +3318,12 @@ impl<'a> Resolver<'a> {\n             if let Some(def) = def {\n                 match (def, source) {\n                     (Def::Macro(..), _) => {\n-                        err.span_label(span, format!(\"did you mean `{}!(...)`?\", path_str));\n+                        err.span_suggestion_with_applicability(\n+                            span,\n+                            \"use `!` to invoke the macro\",\n+                            format!(\"{}!\", path_str),\n+                            Applicability::MaybeIncorrect,\n+                        );\n                         return (err, candidates);\n                     }\n                     (Def::TyAlias(..), PathSource::Trait(_)) => {\n@@ -3330,13 +3335,22 @@ impl<'a> Resolver<'a> {\n                     }\n                     (Def::Mod(..), PathSource::Expr(Some(parent))) => match parent.node {\n                         ExprKind::Field(_, ident) => {\n-                            err.span_label(parent.span, format!(\"did you mean `{}::{}`?\",\n-                                                                 path_str, ident));\n+                            err.span_suggestion_with_applicability(\n+                                parent.span,\n+                                \"use the path separator to refer to an item\",\n+                                format!(\"{}::{}\", path_str, ident),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                             return (err, candidates);\n                         }\n                         ExprKind::MethodCall(ref segment, ..) => {\n-                            err.span_label(parent.span, format!(\"did you mean `{}::{}(...)`?\",\n-                                                                 path_str, segment.ident));\n+                            let span = parent.span.with_hi(segment.ident.span.hi());\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"use the path separator to refer to an item\",\n+                                format!(\"{}::{}\", path_str, segment.ident),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                             return (err, candidates);\n                         }\n                         _ => {}\n@@ -3387,6 +3401,29 @@ impl<'a> Resolver<'a> {\n                                 Ok(ref snippet) if snippet == \"{\" => true,\n                                 _ => false,\n                             };\n+                            // In case this could be a struct literal that needs to be surrounded\n+                            // by parenthesis, find the appropriate span.\n+                            let mut i = 0;\n+                            let mut closing_brace = None;\n+                            loop {\n+                                sp = sm.next_point(sp);\n+                                match sm.span_to_snippet(sp) {\n+                                    Ok(ref snippet) => {\n+                                        if snippet == \"}\" {\n+                                            let sp = span.to(sp);\n+                                            if let Ok(snippet) = sm.span_to_snippet(sp) {\n+                                                closing_brace = Some((sp, snippet));\n+                                            }\n+                                            break;\n+                                        }\n+                                    }\n+                                    _ => break,\n+                                }\n+                                i += 1;\n+                                if i > 100 { // The bigger the span the more likely we're\n+                                    break;   // incorrect. Bound it to 100 chars long.\n+                                }\n+                            }\n                             match source {\n                                 PathSource::Expr(Some(parent)) => {\n                                     match parent.node {\n@@ -3413,11 +3450,20 @@ impl<'a> Resolver<'a> {\n                                     }\n                                 },\n                                 PathSource::Expr(None) if followed_by_brace == true => {\n-                                    err.span_label(\n-                                        span,\n-                                        format!(\"did you mean `({} {{ /* fields */ }})`?\",\n-                                                path_str),\n-                                    );\n+                                    if let Some((sp, snippet)) = closing_brace {\n+                                        err.span_suggestion_with_applicability(\n+                                            sp,\n+                                            \"surround the struct literal with parenthesis\",\n+                                            format!(\"({})\", snippet),\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                    } else {\n+                                        err.span_label(\n+                                            span,\n+                                            format!(\"did you mean `({} {{ /* fields */ }})`?\",\n+                                                    path_str),\n+                                        );\n+                                    }\n                                     return (err, candidates);\n                                 },\n                                 _ => {"}, {"sha": "5b430d13516b47f7ebd912263710ffc4c626e6b4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -5234,22 +5234,13 @@ impl<'a> Parser<'a> {\n                     kind: ast::GenericParamKind::Lifetime,\n                 });\n                 if let Some(sp) = seen_ty_param {\n-                    let param_span = self.prev_span;\n-                    let ate_comma = self.eat(&token::Comma);\n-                    let remove_sp = if ate_comma {\n-                        param_span.until(self.span)\n-                    } else {\n-                        last_comma_span.unwrap_or(param_span).to(param_span)\n-                    };\n-                    bad_lifetime_pos.push(param_span);\n-\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(param_span) {\n+                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n+                    bad_lifetime_pos.push(self.prev_span);\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n                         suggestions.push((remove_sp, String::new()));\n-                        suggestions.push((sp.shrink_to_lo(), format!(\"{}, \", snippet)));\n-                    }\n-                    if ate_comma {\n-                        last_comma_span = Some(self.prev_span);\n-                        continue\n+                        suggestions.push((\n+                            sp.shrink_to_lo(),\n+                            format!(\"{}, \", snippet)));\n                     }\n                 }\n             } else if self.check_ident() {"}, {"sha": "d0deb8ce7ea26fde83589454e0fc8b20944d1298", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -29,19 +29,25 @@ error[E0423]: expected value, found struct `S`\n   --> $DIR/E0423.rs:12:32\n    |\n LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n-   |                                ^ did you mean `(S { /* fields */ })`?\n+   |                                ^---------------\n+   |                                |\n+   |                                help: surround the struct literal with parenthesis: `(S { x: 1, y: 2 })`\n \n error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:15:8\n    |\n LL |     if T {} == T {} { println!(\"Ok\"); }\n-   |        ^ did you mean `(T { /* fields */ })`?\n+   |        ^---\n+   |        |\n+   |        help: surround the struct literal with parenthesis: `(T {})`\n \n error[E0423]: expected value, found struct `std::ops::Range`\n   --> $DIR/E0423.rs:21:14\n    |\n LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n-   |              ^^^^^^^^^^^^^^^ did you mean `(std::ops::Range { /* fields */ })`?\n+   |              ^^^^^^^^^^^^^^^----------------------\n+   |              |\n+   |              help: surround the struct literal with parenthesis: `(std::ops::Range { start: 0, end: 10 })`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "92844f9306d28df11e13132bc30ed7cd7c5e7172", "filename": "src/test/ui/feature-gate/feature-gate-static-nobundle-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,6 @@\n+//~ ERROR kind=\"static-nobundle\" is feature gated\n+// Test the behavior of rustc when non-existent library is statically linked\n+\n+// compile-flags: -l static-nobundle=nonexistent\n+\n+fn main() {}"}, {"sha": "419c21901a02f925d92360da14512779d42169fc", "filename": "src/test/ui/feature-gate/feature-gate-static-nobundle-2.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,7 @@\n+error[E0658]: kind=\"static-nobundle\" is feature gated (see issue #37403)\n+   |\n+   = help: add #![feature(static_nobundle)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "937bce1b655dd50805112ef7c4b66f44bf9d86a1", "filename": "src/test/ui/issue-53787-inline-assembler-macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fissue-53787-inline-assembler-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fissue-53787-inline-assembler-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53787-inline-assembler-macro.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for Issue #53787: Fix ICE when creating a label in inline assembler with macros.\n+\n+#![feature(asm)]\n+\n+macro_rules! fake_jump {\n+    ($id:expr) => {\n+        unsafe {\n+            asm!(\n+            \"\n+            jmp $0\n+            lea eax, [ebx]\n+            xor eax, 0xDEADBEEF\n+            retn\n+            $0:\n+            \"::\"0\"($id)::\"volatile\", \"intel\");\n+        }\n+    };\n+}\n+\n+fn main() {\n+    fake_jump!(\"FirstFunc\"); //~ ERROR invalid value for constraint in inline assembly\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "69f380bdc9c038a88001d40a71179d770a0628a7", "filename": "src/test/ui/issue-53787-inline-assembler-macro.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fissue-53787-inline-assembler-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fissue-53787-inline-assembler-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53787-inline-assembler-macro.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,9 @@\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/issue-53787-inline-assembler-macro.rs:21:16\n+   |\n+LL |     fake_jump!(\"FirstFunc\"); //~ ERROR invalid value for constraint in inline assembly\n+   |                ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0669`."}, {"sha": "9b905d4883a162dcad6d647f3777ea0c4df8d335", "filename": "src/test/ui/lifetime-before-type-params.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Flifetime-before-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Flifetime-before-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-before-type-params.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,9 @@\n+#![allow(unused)]\n+fn first<T, 'a, 'b>() {}\n+//~^ ERROR lifetime parameters must be declared prior to type parameters\n+fn second<'a, T, 'b>() {}\n+//~^ ERROR lifetime parameters must be declared prior to type parameters\n+fn third<T, U, 'a>() {}\n+//~^ ERROR lifetime parameters must be declared prior to type parameters\n+fn fourth<'a, T, 'b, U, 'c, V>() {}\n+//~^ ERROR lifetime parameters must be declared prior to type parameters"}, {"sha": "7ac8dffdfbe0c2e59cad4ca601ada46e439f44ae", "filename": "src/test/ui/lifetime-before-type-params.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,47 @@\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/lifetime-before-type-params.rs:2:13\n+   |\n+LL | fn first<T, 'a, 'b>() {}\n+   |             ^^  ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | fn first<'a, 'b, T>() {}\n+   |          ^^^ ^^^ --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/lifetime-before-type-params.rs:4:18\n+   |\n+LL | fn second<'a, T, 'b>() {}\n+   |                  ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | fn second<'a, 'b, T>() {}\n+   |               ^^^ --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/lifetime-before-type-params.rs:6:16\n+   |\n+LL | fn third<T, U, 'a>() {}\n+   |                ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | fn third<'a, T, U>() {}\n+   |          ^^^    --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/lifetime-before-type-params.rs:8:18\n+   |\n+LL | fn fourth<'a, T, 'b, U, 'c, V>() {}\n+   |                  ^^     ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | fn fourth<'a, 'b, 'c, T, U, V>() {}\n+   |               ^^^ ^^^ -- --\n+\n+error[E0601]: `main` function not found in crate `lifetime_before_type_params`\n+   |\n+   = note: consider adding a `main` function to `$DIR/lifetime-before-type-params.rs`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "004663c85ee5018371b1e2dbe1601b573f752a55", "filename": "src/test/ui/liveness/liveness-dead.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -27,4 +27,13 @@ fn f5(mut x: i32) {\n     x = 4; //~ ERROR: value assigned to `x` is never read\n }\n \n+// #22630\n+fn f6() {\n+    let mut done = false;\n+    while !done {\n+        done = true; // no error\n+        continue;\n+    }\n+}\n+\n fn main() {}"}, {"sha": "ebe3c36f21eb1f83d81e824157e98ab42df99b32", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -2,7 +2,7 @@ error[E0423]: expected function, found macro `assert`\n   --> $DIR/resolve-hint-macro.rs:2:5\n    |\n LL |     assert(true);\n-   |     ^^^^^^ did you mean `assert!(...)`?\n+   |     ^^^^^^ help: use `!` to invoke the macro: `assert!`\n \n error: aborting due to previous error\n "}, {"sha": "b7b158ce7efa6e4e5778021fbaabc11a8e6265a4", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -4,40 +4,45 @@ error[E0423]: expected value, found module `a`\n LL |     a.I\n    |     ^--\n    |     |\n-   |     did you mean `a::I`?\n+   |     help: use the path separator to refer to an item: `a::I`\n \n error[E0423]: expected value, found module `a`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:22:5\n    |\n LL |     a.g()\n-   |     ^----\n+   |     ^--\n    |     |\n-   |     did you mean `a::g(...)`?\n+   |     help: use the path separator to refer to an item: `a::g`\n \n error[E0423]: expected value, found module `a`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:27:5\n    |\n LL |     a.b.J\n    |     ^--\n    |     |\n-   |     did you mean `a::b`?\n+   |     help: use the path separator to refer to an item: `a::b`\n \n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:32:5\n    |\n LL |     a::b.J\n-   |     ^^^---\n-   |     |  |\n-   |     |  help: a constant with a similar name exists: `I`\n-   |     did you mean `a::b::J`?\n+   |     ^^^^\n+help: a constant with a similar name exists\n+   |\n+LL |     a::I.J\n+   |        ^\n+help: use the path separator to refer to an item\n+   |\n+LL |     a::b::J\n+   |\n \n error[E0423]: expected value, found module `a`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:37:5\n    |\n LL |     a.b.f();\n    |     ^--\n    |     |\n-   |     did you mean `a::b`?\n+   |     help: use the path separator to refer to an item: `a::b`\n \n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:40:12\n@@ -51,10 +56,15 @@ error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:45:5\n    |\n LL |     a::b.f()\n-   |     ^^^-----\n-   |     |  |\n-   |     |  help: a constant with a similar name exists: `I`\n-   |     did you mean `a::b::f(...)`?\n+   |     ^^^^\n+help: a constant with a similar name exists\n+   |\n+LL |     a::I.f()\n+   |        ^\n+help: use the path separator to refer to an item\n+   |\n+LL |     a::b::f()\n+   |     ^^^^^^^\n \n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:50:5"}, {"sha": "71b1747492329a8ecf060f98e744bb5a0ef8f5c2", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -5,6 +5,8 @@ LL |     let c: u8 = s[4]; //~ ERROR the type `str` cannot be indexed by `{integ\n    |                 ^^^^ `str` cannot be indexed by `{integer}`\n    |\n    = help: the trait `std::ops::Index<{integer}>` is not implemented for `str`\n+   = note: you can use `.chars().nth()` or `.bytes().nth()`\n+           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n \n error: aborting due to previous error\n "}, {"sha": "a1212c5a4fe10c1d7787bf624519515700ffac71", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -29,6 +29,8 @@ LL |     s[1usize] = bot();\n    |     ^^^^^^^^^ `str` cannot be mutably indexed by `usize`\n    |\n    = help: the trait `std::ops::IndexMut<usize>` is not implemented for `str`\n+   = note: you can use `.chars().nth()` or `.bytes().nth()`\n+           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b36e927b5c0c6e46cc1c5018927e5bdaf3c30eba", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -16,7 +16,7 @@ LL | struct B<T, 'a, U> { //~ ERROR lifetime parameters must be declared\n help: move the lifetime parameter prior to the first type parameter\n    |\n LL | struct B<'a, T, U> { //~ ERROR lifetime parameters must be declared\n-   |          ^^^   --\n+   |          ^^^ --\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:10:16\n@@ -36,7 +36,7 @@ LL | struct D<T, U, 'a, 'b, V, 'c> { //~ ERROR lifetime parameters must be decla\n help: move the lifetime parameter prior to the first type parameter\n    |\n LL | struct D<'a, 'b, 'c, T, U, V> { //~ ERROR lifetime parameters must be declared\n-   |          ^^^ ^^^ ^^^      ---\n+   |          ^^^ ^^^ ^^^    -- --\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0a3664b0d9d40e3cd954c15f192d354937d25543", "filename": "src/test/ui/thread-local-mutation.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fthread-local-mutation.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fthread-local-mutation.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-mutation.nll.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to immutable static item `S`\n+  --> $DIR/thread-local-mutation.rs:11:5\n+   |\n+LL |     S = \"after\"; //~ ERROR cannot assign to immutable\n+   |     ^^^^^^^^^^^ cannot assign\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "e738225ce2a48569b7c1beb761ea70bb9cfa9eff", "filename": "src/test/ui/thread-local-mutation.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fthread-local-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fthread-local-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-mutation.rs?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for #54901: immutable thread locals could be mutated. See:\n+// https://github.com/rust-lang/rust/issues/29594#issuecomment-328177697\n+// https://github.com/rust-lang/rust/issues/54901\n+\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static S: &str = \"before\";\n+\n+fn set_s() {\n+    S = \"after\"; //~ ERROR cannot assign to immutable\n+}\n+\n+fn main() {\n+    println!(\"{}\", S);\n+    set_s();\n+    println!(\"{}\", S);\n+}"}, {"sha": "bf298523e1b73e20800a8ebe4c0144caeb0b850b", "filename": "src/test/ui/thread-local-mutation.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fthread-local-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Fthread-local-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-mutation.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to immutable thread-local static item\n+  --> $DIR/thread-local-mutation.rs:11:5\n+   |\n+LL |     S = \"after\"; //~ ERROR cannot assign to immutable\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "a7b81060d3dc6a3e1b4746f56bf7396f846f2718", "filename": "src/test/ui/try-block/try-block-in-edition2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001287c90e98d72296eb2a20e3cbe34b977f587/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr?ref=f001287c90e98d72296eb2a20e3cbe34b977f587", "patch": "@@ -15,7 +15,7 @@ error[E0574]: expected struct, variant or union type, found macro `try`\n   --> $DIR/try-block-in-edition2015.rs:4:33\n    |\n LL |     let try_result: Option<_> = try {\n-   |                                 ^^^ did you mean `try!(...)`?\n+   |                                 ^^^ help: use `!` to invoke the macro: `try!`\n \n error: aborting due to 2 previous errors\n "}]}