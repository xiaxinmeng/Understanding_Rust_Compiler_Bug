{"sha": "b173b42354ec8d77d1613de383c9a0ea801f9a9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzNiNDIzNTRlYzhkNzdkMTYxM2RlMzgzYzlhMGVhODAxZjlhOWQ=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-03-28T03:29:12Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-03-28T03:29:12Z"}, "message": "refactor: rename libsyntax --> rustc_ast", "tree": {"sha": "eb6813caf8fb8d1c3b8a8cfcd49a88410a6f4514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6813caf8fb8d1c3b8a8cfcd49a88410a6f4514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b173b42354ec8d77d1613de383c9a0ea801f9a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b173b42354ec8d77d1613de383c9a0ea801f9a9d", "html_url": "https://github.com/rust-lang/rust/commit/b173b42354ec8d77d1613de383c9a0ea801f9a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b173b42354ec8d77d1613de383c9a0ea801f9a9d/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a66e1e223db7687c28359d95f7a218283b796f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a66e1e223db7687c28359d95f7a218283b796f", "html_url": "https://github.com/rust-lang/rust/commit/c1a66e1e223db7687c28359d95f7a218283b796f"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "cfb750c0a8fe1041bb74d27285126401c300dffd", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -63,6 +63,10 @@ lazy_static = \"1.0.0\"\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n \n+[dependencies.rustc_ast]\n+package = \"rustc-ap-rustc_ast\"\n+version = \"650.0.0\"\n+\n [dependencies.rustc_ast_pretty]\n package = \"rustc-ap-rustc_ast_pretty\"\n version = \"650.0.0\"\n@@ -94,7 +98,3 @@ version = \"650.0.0\"\n [dependencies.rustc_target]\n package = \"rustc-ap-rustc_target\"\n version = \"650.0.0\"\n-\n-[dependencies.syntax]\n-package = \"rustc-ap-rustc_ast\"\n-version = \"650.0.0\""}, {"sha": "5221caf2fadef60b5bf25f927a5686cb1edeff54", "filename": "src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,7 +1,7 @@\n //! Format attributes and meta items.\n \n+use rustc_ast::ast;\n use rustc_span::{symbol::sym, BytePos, Span, DUMMY_SP};\n-use syntax::ast;\n \n use self::doc_comment::DocCommentFormatter;\n use crate::comment::{contains_comment, rewrite_doc_comment, CommentStyle};"}, {"sha": "32bcf0e0999bd221cf2723a419d2cffc2dec141e", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -58,8 +58,8 @@\n use std::borrow::Cow;\n use std::cmp::min;\n \n+use rustc_ast::{ast, ptr};\n use rustc_span::{BytePos, Span};\n-use syntax::{ast, ptr};\n \n use crate::comment::{rewrite_comment, CharClasses, FullCodeCharKind, RichChar};\n use crate::config::IndentStyle;"}, {"sha": "55a96a5c68a7e61537f7c1f029a597de1cb6469d", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,5 +1,5 @@\n+use rustc_ast::{ast, ptr};\n use rustc_span::Span;\n-use syntax::{ast, ptr};\n \n use crate::attr::get_attrs_from_stmt;\n use crate::config::lists::*;"}, {"sha": "d63961449f88324133f8297d84186a33f34d6063", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -2,9 +2,9 @@ use std::borrow::Cow;\n use std::cmp::min;\n \n use itertools::Itertools;\n+use rustc_ast::token::{DelimToken, LitKind};\n+use rustc_ast::{ast, ptr};\n use rustc_span::{BytePos, Span};\n-use syntax::token::{DelimToken, LitKind};\n-use syntax::{ast, ptr};\n \n use crate::chains::rewrite_chain;\n use crate::closures;\n@@ -1314,7 +1314,7 @@ pub(crate) fn can_be_overflowed_expr(\n         }\n         ast::ExprKind::MacCall(ref mac) => {\n             match (\n-                syntax::ast::MacDelimiter::from_token(mac.args.delim()),\n+                rustc_ast::ast::MacDelimiter::from_token(mac.args.delim()),\n                 context.config.overflow_delimited_expr(),\n             ) {\n                 (Some(ast::MacDelimiter::Bracket), true)"}, {"sha": "8178342f28cd93f8324e3e0cbafaa3e730f36962", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -4,8 +4,8 @@ use std::collections::HashMap;\n use std::io::{self, Write};\n use std::time::{Duration, Instant};\n \n+use rustc_ast::ast;\n use rustc_span::Span;\n-use syntax::ast;\n \n use self::newline_style::apply_newline_style;\n use crate::comment::{CharClasses, FullCodeCharKind};\n@@ -29,7 +29,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n             return Err(ErrorKind::VersionMismatch);\n         }\n \n-        syntax::with_globals(self.config.edition().to_libsyntax_pos_edition(), || {\n+        rustc_ast::with_globals(self.config.edition().to_libsyntax_pos_edition(), || {\n             if self.config.disable_all_formatting() {\n                 // When the input is from stdin, echo back the input.\n                 if let Input::Text(ref buf) = input {"}, {"sha": "d8f963e1ec3f131d550bfd13abef89632c1552cb", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -2,8 +2,8 @@ use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::fmt;\n \n+use rustc_ast::ast::{self, UseTreeKind};\n use rustc_span::{source_map, symbol::sym, BytePos, Span, DUMMY_SP};\n-use syntax::ast::{self, UseTreeKind};\n \n use crate::comment::combine_strs_with_missing_comments;\n use crate::config::lists::*;"}, {"sha": "baa993590cad3558429e5a4bbf00a8d34dc5d8f0", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -4,9 +4,9 @@ use std::borrow::Cow;\n use std::cmp::{max, min, Ordering};\n \n use regex::Regex;\n+use rustc_ast::visit;\n+use rustc_ast::{ast, ptr};\n use rustc_span::{source_map, symbol, BytePos, Span, DUMMY_SP};\n-use syntax::visit;\n-use syntax::{ast, ptr};\n \n use crate::attr::filter_inline_attrs;\n use crate::comment::{\n@@ -594,7 +594,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.buffer.clear();\n             }\n \n-            fn is_type(ty: &Option<syntax::ptr::P<ast::Ty>>) -> bool {\n+            fn is_type(ty: &Option<rustc_ast::ptr::P<ast::Ty>>) -> bool {\n                 match ty {\n                     None => true,\n                     Some(lty) => match lty.kind.opaque_top_hack() {\n@@ -604,7 +604,7 @@ impl<'a> FmtVisitor<'a> {\n                 }\n             }\n \n-            fn is_opaque(ty: &Option<syntax::ptr::P<ast::Ty>>) -> bool {\n+            fn is_opaque(ty: &Option<rustc_ast::ptr::P<ast::Ty>>) -> bool {\n                 match ty {\n                     None => false,\n                     Some(lty) => match lty.kind.opaque_top_hack() {\n@@ -615,15 +615,15 @@ impl<'a> FmtVisitor<'a> {\n             }\n \n             fn both_type(\n-                a: &Option<syntax::ptr::P<ast::Ty>>,\n-                b: &Option<syntax::ptr::P<ast::Ty>>,\n+                a: &Option<rustc_ast::ptr::P<ast::Ty>>,\n+                b: &Option<rustc_ast::ptr::P<ast::Ty>>,\n             ) -> bool {\n                 is_type(a) && is_type(b)\n             }\n \n             fn both_opaque(\n-                a: &Option<syntax::ptr::P<ast::Ty>>,\n-                b: &Option<syntax::ptr::P<ast::Ty>>,\n+                a: &Option<rustc_ast::ptr::P<ast::Ty>>,\n+                b: &Option<rustc_ast::ptr::P<ast::Ty>>,\n             ) -> bool {\n                 is_opaque(a) && is_opaque(b)\n             }"}, {"sha": "ecf19ebb58604335d843df1b85af1b15f5bfcf51", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -19,7 +19,7 @@ use std::rc::Rc;\n \n use failure::Fail;\n use ignore;\n-use syntax::ast;\n+use rustc_ast::ast;\n \n use crate::comment::LineClasses;\n use crate::emitter::Emitter;"}, {"sha": "400daa6a5aa65c71b9d3194a68ade8a1747397aa", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -12,12 +12,12 @@\n use std::collections::HashMap;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n+use rustc_ast::token::{BinOpToken, DelimToken, Token, TokenKind};\n+use rustc_ast::tokenstream::{Cursor, TokenStream, TokenTree};\n+use rustc_ast::{ast, ptr};\n use rustc_ast_pretty::pprust;\n use rustc_parse::{new_parser_from_tts, parser::Parser};\n use rustc_span::{symbol::kw, BytePos, Span, Symbol, DUMMY_SP};\n-use syntax::token::{BinOpToken, DelimToken, Token, TokenKind};\n-use syntax::tokenstream::{Cursor, TokenStream, TokenTree};\n-use syntax::{ast, ptr};\n \n use crate::comment::{\n     contains_comment, CharClasses, FindUncommented, FullCodeCharKind, LineClasses,"}, {"sha": "c6b1712232656a22744eb8d62cb1bbb05747f938", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -2,8 +2,8 @@\n \n use std::iter::repeat;\n \n+use rustc_ast::{ast, ptr};\n use rustc_span::{BytePos, Span};\n-use syntax::{ast, ptr};\n \n use crate::comment::{combine_strs_with_missing_comments, rewrite_comment};\n use crate::config::lists::*;"}, {"sha": "9f8dabbfaf4c03f2bfb739c8f9cfe476f0c75637", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -2,9 +2,9 @@ use std::borrow::Cow;\n use std::collections::BTreeMap;\n use std::path::{Path, PathBuf};\n \n+use rustc_ast::ast;\n+use rustc_ast::visit::Visitor;\n use rustc_span::symbol::{sym, Symbol};\n-use syntax::ast;\n-use syntax::visit::Visitor;\n \n use crate::attr::MetaVisitor;\n use crate::config::FileName;"}, {"sha": "942e70d0e8840aaf65eb6300bbe459df8fef3f03", "filename": "src/modules/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fmodules%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fmodules%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules%2Fvisitor.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,6 +1,6 @@\n+use rustc_ast::ast;\n+use rustc_ast::visit::Visitor;\n use rustc_span::Symbol;\n-use syntax::ast;\n-use syntax::visit::Visitor;\n \n use crate::attr::MetaVisitor;\n use crate::syntux::parser::Parser;"}, {"sha": "566f0e366392e67d85ac70cdbdfa90b340cf7f2b", "filename": "src/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -3,9 +3,9 @@\n use std::cmp::min;\n \n use itertools::Itertools;\n+use rustc_ast::token::DelimToken;\n+use rustc_ast::{ast, ptr};\n use rustc_span::Span;\n-use syntax::token::DelimToken;\n-use syntax::{ast, ptr};\n \n use crate::closures;\n use crate::config::lists::*;"}, {"sha": "0f3d5e8f878ba7d7f08883e95c40262bf2d8adfa", "filename": "src/pairs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,4 +1,4 @@\n-use syntax::ast;\n+use rustc_ast::ast;\n \n use crate::config::lists::*;\n use crate::config::IndentStyle;"}, {"sha": "782926202327d238d3acb2bf5b62809d55ca6848", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,6 +1,6 @@\n+use rustc_ast::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n+use rustc_ast::ptr;\n use rustc_span::{BytePos, Span};\n-use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n-use syntax::ptr;\n \n use crate::comment::{combine_strs_with_missing_comments, FindUncommented};\n use crate::config::lists::*;"}, {"sha": "3b9f2475acc1fcdef219cd03ba06213178b7562e", "filename": "src/reorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -8,8 +8,8 @@\n \n use std::cmp::{Ord, Ordering};\n \n+use rustc_ast::{ast, attr};\n use rustc_span::{symbol::sym, Span};\n-use syntax::{ast, attr};\n \n use crate::config::Config;\n use crate::imports::{merge_use_trees, UseTree};"}, {"sha": "86b2e9ded1c07cf7da0c9efc136a86e5379c0a55", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -3,8 +3,8 @@\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n \n+use rustc_ast::ptr;\n use rustc_span::Span;\n-use syntax::ptr;\n \n use crate::config::{Config, IndentStyle};\n use crate::shape::Shape;"}, {"sha": "fd48e67ee73cb3560244d9041b537cbe515e4e00", "filename": "src/skip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fskip.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,7 +1,7 @@\n //! Module that contains skip related stuffs.\n \n+use rustc_ast::ast;\n use rustc_ast_pretty::pprust;\n-use syntax::ast;\n \n /// Take care of skip name stack. You can update it by attributes slice or\n /// by other context. Query this context to know if you need skip a block.\n@@ -56,7 +56,7 @@ fn get_skip_names(kind: &str, attrs: &[ast::Attribute]) -> Vec<String> {\n     let mut skip_names = vec![];\n     let path = format!(\"{}::{}::{}\", RUSTFMT, SKIP, kind);\n     for attr in attrs {\n-        // syntax::ast::Path is implemented partialEq\n+        // rustc_ast::ast::Path is implemented partialEq\n         // but it is designed for segments.len() == 1\n         if let ast::AttrKind::Normal(attr_item) = &attr.kind {\n             if pprust::path_to_string(&attr_item.path) != path {"}, {"sha": "60a350524faf4e0443830cc6910566c1915d7b06", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,7 +1,7 @@\n use std::cmp::max;\n \n+use rustc_ast::{ast, ptr};\n use rustc_span::{source_map, Span};\n-use syntax::{ast, ptr};\n \n use crate::macros::MacroArg;\n use crate::utils::{mk_sp, outer_attributes};"}, {"sha": "807cd9e5fada48d23f47519020bc0e3364d47c04", "filename": "src/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstmt.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,5 +1,5 @@\n+use rustc_ast::ast;\n use rustc_span::Span;\n-use syntax::ast;\n \n use crate::comment::recover_comment_removed;\n use crate::config::Version;"}, {"sha": "04a6f7577a0587e3014de6a1728a7f9554cc25e3", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,11 +1,11 @@\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::path::{Path, PathBuf};\n \n+use rustc_ast::ast;\n+use rustc_ast::token::{DelimToken, TokenKind};\n use rustc_errors::{Diagnostic, PResult};\n use rustc_parse::{new_parser_from_file, parser::Parser as RawParser};\n use rustc_span::{symbol::kw, Span};\n-use syntax::ast;\n-use syntax::token::{DelimToken, TokenKind};\n \n use crate::syntux::session::ParseSess;\n use crate::{Config, Input};\n@@ -121,8 +121,8 @@ impl<'a> Parser<'a> {\n                 }\n                 TokenKind::DocComment(s) => {\n                     // we need to get the position of this token before we bump.\n-                    let attr = syntax::attr::mk_doc_comment(\n-                        syntax::util::comments::doc_comment_style(&s.as_str()),\n+                    let attr = rustc_ast::attr::mk_doc_comment(\n+                        rustc_ast::util::comments::doc_comment_style(&s.as_str()),\n                         s,\n                         parser.token.span,\n                     );"}, {"sha": "da8741c84e5f9a11e8e247a8cc8ce204ef3395d1", "filename": "src/syntux/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -2,6 +2,7 @@ use std::cell::RefCell;\n use std::path::Path;\n use std::rc::Rc;\n \n+use rustc_ast::ast;\n use rustc_data_structures::sync::{Lrc, Send};\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::{ColorConfig, Diagnostic, Handler, Level as DiagnosticLevel};\n@@ -10,7 +11,6 @@ use rustc_span::{\n     source_map::{FilePathMapping, SourceMap},\n     BytePos, Span,\n };\n-use syntax::ast;\n \n use crate::config::file_lines::LineRange;\n use crate::ignore_path::IgnorePathSet;"}, {"sha": "0708152b9ba90d78f2e742e946cf9973cc2a0eb6", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,8 +1,8 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n+use rustc_ast::ast::{self, FnRetTy, Mutability};\n use rustc_span::{symbol::kw, BytePos, Span};\n-use syntax::ast::{self, FnRetTy, Mutability};\n \n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n@@ -551,7 +551,7 @@ impl Rewrite for ast::GenericParam {\n             _ => (),\n         }\n \n-        if let syntax::ast::GenericParamKind::Const { ref ty } = &self.kind {\n+        if let rustc_ast::ast::GenericParamKind::Const { ref ty } = &self.kind {\n             result.push_str(\"const \");\n             result.push_str(rewrite_ident(context, self.ident));\n             result.push_str(\": \");"}, {"sha": "4f62dc363dd54c58c20a7b633b0f3ddd62c8ddd2", "filename": "src/utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,13 +1,13 @@\n use std::borrow::Cow;\n \n-use rustc_ast_pretty::pprust;\n-use rustc_span::{sym, BytePos, ExpnId, Span, Symbol, SyntaxContext};\n-use rustc_target::spec::abi;\n-use syntax::ast::{\n+use rustc_ast::ast::{\n     self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n     VisibilityKind,\n };\n-use syntax::ptr;\n+use rustc_ast::ptr;\n+use rustc_ast_pretty::pprust;\n+use rustc_span::{sym, BytePos, ExpnId, Span, Symbol, SyntaxContext};\n+use rustc_target::spec::abi;\n use unicode_width::UnicodeWidthStr;\n \n use crate::comment::{filter_normal_code, CharClasses, FullCodeCharKind, LineClasses};\n@@ -157,7 +157,7 @@ pub(crate) fn format_extern(\n }\n \n #[inline]\n-// Transform `Vec<syntax::ptr::P<T>>` into `Vec<&T>`\n+// Transform `Vec<rustc_ast::ptr::P<T>>` into `Vec<&T>`\n pub(crate) fn ptr_vec_to_ref_vec<T>(vec: &[ptr::P<T>]) -> Vec<&T> {\n     vec.iter().map(|x| &**x).collect::<Vec<_>>()\n }"}, {"sha": "95d1d5c2d7e28ac5fd80e3d26d9604d8d1bfc4c6", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -3,8 +3,8 @@\n use std::cmp;\n \n use itertools::Itertools;\n+use rustc_ast::ast;\n use rustc_span::{BytePos, Span};\n-use syntax::ast;\n \n use crate::comment::combine_strs_with_missing_comments;\n use crate::config::lists::*;"}, {"sha": "27e4f6543b09c04efe8cc072ed35cb4998fa4e9a", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -1,9 +1,9 @@\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n \n+use rustc_ast::token::DelimToken;\n+use rustc_ast::{ast, visit};\n use rustc_span::{BytePos, Pos, Span};\n-use syntax::token::DelimToken;\n-use syntax::{ast, visit};\n \n use crate::attr::*;\n use crate::comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};"}, {"sha": "4dfc6ed94e34f1acf717436dc73429980d01916a", "filename": "tests/source/imports.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/tests%2Fsource%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/tests%2Fsource%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -3,7 +3,7 @@\n // Imports.\n \n // Long import.\n-use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n+use rustc_ast::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n use exceedingly::looooooooooooooooooooooooooooooooooooooooooooooooooooooooooong::import::path::{ItemA, ItemB};\n use exceedingly::loooooooooooooooooooooooooooooooooooooooooooooooooooooooong::import::path::{ItemA, ItemB};\n \n@@ -15,30 +15,30 @@ use list::{\n \n use test::{  Other          /* C   */  , /*   A   */ self  /*    B     */    };\n \n-use syntax::{self};\n+use rustc_ast::{self};\n use {/* Pre-comment! */\n      Foo, Bar /* comment */};\n use Foo::{Bar, Baz};\n-pub use syntax::ast::{Expr_, Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath};\n+pub use rustc_ast::ast::{Expr_, Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath};\n \n-use syntax::some::{};\n+use rustc_ast::some::{};\n \n use self;\n use std::io::{self};\n use std::io::self;\n \n mod Foo {\n-    pub use syntax::ast::{\n+    pub use rustc_ast::ast::{\n         ItemForeignMod,\n-        ItemImpl, \n+        ItemImpl,\n         ItemMac,\n         ItemMod,\n-        ItemStatic, \n+        ItemStatic,\n         ItemDefaultImpl\n     };\n \n     mod Foo2 {\n-        pub use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, self, ItemDefaultImpl};\n+        pub use rustc_ast::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, self, ItemDefaultImpl};\n     }\n }\n "}, {"sha": "87584d89f6637f3dfd6046e99cb12e9c7bfbe3bf", "filename": "tests/target/imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b173b42354ec8d77d1613de383c9a0ea801f9a9d/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b173b42354ec8d77d1613de383c9a0ea801f9a9d/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=b173b42354ec8d77d1613de383c9a0ea801f9a9d", "patch": "@@ -9,7 +9,7 @@ use exceedingly::loooooooooooooooooooooooooooooooooooooooooooooooooooooooong::im\n use exceedingly::looooooooooooooooooooooooooooooooooooooooooooooooooooooooooong::import::path::{\n     ItemA, ItemB,\n };\n-use syntax::ast::{ItemDefaultImpl, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic};\n+use rustc_ast::ast::{ItemDefaultImpl, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic};\n \n use list::{\n     // Another item\n@@ -22,21 +22,21 @@ use list::{\n \n use test::{/* A */ self /* B */, Other /* C */};\n \n-pub use syntax::ast::{Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath, Expr_};\n-use syntax::{self};\n+pub use rustc_ast::ast::{Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath, Expr_};\n+use rustc_ast::{self};\n use Foo::{Bar, Baz};\n use {Bar /* comment */, /* Pre-comment! */ Foo};\n \n use std::io;\n use std::io::{self};\n \n mod Foo {\n-    pub use syntax::ast::{\n+    pub use rustc_ast::ast::{\n         ItemDefaultImpl, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic,\n     };\n \n     mod Foo2 {\n-        pub use syntax::ast::{\n+        pub use rustc_ast::ast::{\n             self, ItemDefaultImpl, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic,\n         };\n     }"}]}