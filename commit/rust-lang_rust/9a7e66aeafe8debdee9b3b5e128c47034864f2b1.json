{"sha": "9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhN2U2NmFlYWZlOGRlYmRlZTliM2I1ZTEyOGM0NzAzNDg2NGYyYjE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T15:52:37Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T15:52:37Z"}, "message": "Make sure we don't hide errors just because a lint has been emitted", "tree": {"sha": "abdc2d6a4cccac8de2523c51f49b97a076853fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abdc2d6a4cccac8de2523c51f49b97a076853fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "html_url": "https://github.com/rust-lang/rust/commit/9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "177d0cef48879c7aea8d7dc5064407c454d36124", "url": "https://api.github.com/repos/rust-lang/rust/commits/177d0cef48879c7aea8d7dc5064407c454d36124", "html_url": "https://github.com/rust-lang/rust/commit/177d0cef48879c7aea8d7dc5064407c454d36124"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "f80c60b181ebc59332598d8aa3596c3cf50af81a", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "patch": "@@ -43,11 +43,16 @@ struct ConstToPat<'a, 'tcx> {\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n \n-    // This tracks if we saw some error or lint for a given const value, so that\n+    // This tracks if we emitted some hard error for a given const value, so that\n     // we will not subsequently issue an irrelevant lint for the same const\n     // value.\n     saw_const_match_error: Cell<bool>,\n \n+    // This tracks if we emitted some diagnostic for a given const value, so that\n+    // we will not subsequently issue an irrelevant lint for the same const\n+    // value.\n+    saw_const_match_lint: Cell<bool>,\n+\n     // For backcompat we need to keep allowing non-structurally-eq types behind references.\n     // See also all the `cant-hide-behind` tests.\n     behind_reference: Cell<bool>,\n@@ -75,6 +80,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             param_env: pat_ctxt.param_env,\n             include_lint_checks: pat_ctxt.include_lint_checks,\n             saw_const_match_error: Cell::new(false),\n+            saw_const_match_lint: Cell::new(false),\n             behind_reference: Cell::new(false),\n         }\n     }\n@@ -165,7 +171,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if !self.type_has_partial_eq_impl(cv.ty) {\n                     // span_fatal avoids ICE from resolution of non-existent method (rare case).\n                     self.tcx().sess.span_fatal(self.span, &msg);\n-                } else if mir_structural_match_violation {\n+                } else if mir_structural_match_violation && !self.saw_const_match_lint.get() {\n                     self.tcx().struct_span_lint_hir(\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         self.id,\n@@ -289,8 +295,11 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             // Backwards compatibility hack because we can't cause hard errors on these\n             // types, so we compare them via `PartialEq::eq` at runtime.\n             ty::Adt(..) if !self.type_marked_structural(cv.ty) && self.behind_reference.get() => {\n-                if self.include_lint_checks && !self.saw_const_match_error.get() {\n-                    self.saw_const_match_error.set(true);\n+                if self.include_lint_checks\n+                    && !self.saw_const_match_error.get()\n+                    && !self.saw_const_match_lint.get()\n+                {\n+                    self.saw_const_match_lint.set(true);\n                     let msg = format!(\n                         \"to use a constant of type `{}` in a pattern, \\\n                         `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n@@ -429,8 +438,11 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             // compilation choices change the runtime behaviour of the match.\n             // See https://github.com/rust-lang/rust/issues/70861 for examples.\n             ty::FnPtr(..) | ty::RawPtr(..) => {\n-                if self.include_lint_checks && !self.saw_const_match_error.get() {\n-                    self.saw_const_match_error.set(true);\n+                if self.include_lint_checks\n+                    && !self.saw_const_match_error.get()\n+                    && !self.saw_const_match_lint.get()\n+                {\n+                    self.saw_const_match_lint.set(true);\n                     let msg = \"function pointers and unsized pointers in patterns behave \\\n                         unpredictably and should not be relied upon. \\\n                         See https://github.com/rust-lang/rust/issues/70861 for details.\";\n@@ -457,12 +469,13 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n \n         if self.include_lint_checks\n             && !self.saw_const_match_error.get()\n+            && !self.saw_const_match_lint.get()\n             && mir_structural_match_violation\n             // FIXME(#73448): Find a way to bring const qualification into parity with\n             // `search_for_structural_match_violation` and then remove this condition.\n             && self.search_for_structural_match_violation(cv.ty).is_some()\n         {\n-            self.saw_const_match_error.set(true);\n+            self.saw_const_match_lint.set(true);\n             let msg = format!(\n                 \"to use a constant of type `{}` in a pattern, \\\n                  the constant's initializer must be trivial or all types \\"}, {"sha": "73ff15f212234711d3dbd6aa3fe6c75b27bc8d72", "filename": "src/test/ui/consts/match_ice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs?ref=9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "patch": "@@ -8,10 +8,10 @@ struct T;\n fn main() {\n     const C: &S = &S;\n     match C {\n-        //~^ non-exhaustive patterns: `&S` not covered\n         C => {}\n-        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARN was previously accepted by the compiler\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN must be annotated\n+        //~| WARN previously accepted\n     }\n     const K: &T = &T;\n     match K {"}, {"sha": "915111b3ce4b49e9b00aab779fde313b7a99d951", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "patch": "@@ -1,5 +1,5 @@\n warning: to use a constant of type `&S` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/match_ice.rs:12:9\n+  --> $DIR/match_ice.rs:11:9\n    |\n LL |         C => {}\n    |         ^\n@@ -8,18 +8,11 @@ LL |         C => {}\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n-error[E0004]: non-exhaustive patterns: `&S` not covered\n-  --> $DIR/match_ice.rs:10:11\n+error: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match_ice.rs:11:9\n    |\n-LL | struct S;\n-   | --------- `S` defined here\n-...\n-LL |     match C {\n-   |           ^ pattern `&S` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `&S`\n+LL |         C => {}\n+   |         ^\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0004`."}, {"sha": "fe62774d220d4efe825d320b60cab4a143c9278c", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs?ref=9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     match WRAP_DOUBLY_INDIRECT_INLINE {\n         WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLINE matched itself\"); }\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARN will become a hard error in a future release\n+        //~| WARN this was previously accepted\n         _ => { println!(\"WRAP_DOUBLY_INDIRECT_INLINE correctly did not match itself\"); }\n     }\n }"}, {"sha": "c3a30674ea3878b766306c5692bad45266ca35ae", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs?ref=9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     match WRAP_DOUBLY_INDIRECT_PARAM {\n         WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM matched itself\"); }\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARN will become a hard error in a future release\n+        //~| WARN this was previously accepted\n         _ => { println!(\"WRAP_DOUBLY_INDIRECT_PARAM correctly did not match itself\"); }\n     }\n }"}, {"sha": "4d0e80d5af31235f237855afa3839a5f2b0125e2", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs?ref=9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     match WRAP_INDIRECT_INLINE {\n         WRAP_INDIRECT_INLINE => { panic!(\"WRAP_INDIRECT_INLINE matched itself\"); }\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARN will become a hard error in a future release\n+        //~| WARN this was previously accepted\n         _ => { println!(\"WRAP_INDIRECT_INLINE did not match itself\"); }\n     }\n }"}, {"sha": "432f196ec81279fd82854e5449661beef1004fa8", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs?ref=9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     match WRAP_INDIRECT_PARAM {\n         WRAP_INDIRECT_PARAM => { panic!(\"WRAP_INDIRECT_PARAM matched itself\"); }\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARN will become a hard error in a future release\n+        //~| WARN this was previously accepted\n         _ => { println!(\"WRAP_INDIRECT_PARAM correctly did not match itself\"); }\n     }\n }"}, {"sha": "46d8ee3b6be9c0c5a2b1eb9efc87e696529c1898", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e66aeafe8debdee9b3b5e128c47034864f2b1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs?ref=9a7e66aeafe8debdee9b3b5e128c47034864f2b1", "patch": "@@ -30,14 +30,14 @@ fn main() {\n     match RR_B0 {\n         RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0); }\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARN will become a hard error in a future release\n+        //~| WARN this was previously accepted\n         _ => { }\n     }\n \n     match RR_B1 {\n         RR_B1 => { println!(\"CLAIM RR1: {:?} matches {:?}\", RR_B1, RR_B1); }\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARN will become a hard error in a future release\n+        //~| WARN this was previously accepted\n         _ => { }\n     }\n }"}]}