{"sha": "d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDZiNTE5OTdhNGE1ZDlmMmU4NWFhNDFmYzMxMTMzMzhiOGE4M2I=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-25T03:54:37Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-26T09:29:27Z"}, "message": "libsyntax: change token::to_str to take &Token", "tree": {"sha": "3d97d25a53409246fbbc69c46ee042abfee079cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d97d25a53409246fbbc69c46ee042abfee079cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "html_url": "https://github.com/rust-lang/rust/commit/d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "194f29c20fb86fa163f35e9cd0540ae2b0d41b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/194f29c20fb86fa163f35e9cd0540ae2b0d41b9d", "html_url": "https://github.com/rust-lang/rust/commit/194f29c20fb86fa163f35e9cd0540ae2b0d41b9d"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "82e7de08d6533898ab7f9dc29c69e6323aa9bce7", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "patch": "@@ -378,7 +378,7 @@ pub fn parse(sess: @mut ParseSess,\n                     nts, next_eis.len()));\n             } else if (bb_eis.len() == 0u && next_eis.len() == 0u) {\n                 return failure(sp, ~\"No rules expected the token: \"\n-                            + to_str(rdr.interner(), tok));\n+                            + to_str(rdr.interner(), &tok));\n             } else if (next_eis.len() > 0u) {\n                 /* Now process the next token */\n                 while(next_eis.len() > 0u) {\n@@ -424,7 +424,7 @@ pub fn parse_nt(p: Parser, name: ~str) -> nonterminal {\n       ~\"ident\" => match *p.token {\n         token::IDENT(sn,b) => { p.bump(); token::nt_ident(sn,b) }\n         _ => p.fatal(~\"expected ident, found \"\n-                     + token::to_str(p.reader.interner(), copy *p.token))\n+                     + token::to_str(p.reader.interner(), &copy *p.token))\n       },\n       ~\"path\" => token::nt_path(p.parse_path_with_tps(false)),\n       ~\"tt\" => {"}, {"sha": "377b089c532a4a5f860397da3ca6531c73287da7", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "patch": "@@ -359,7 +359,7 @@ pub fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n             literals.push(lit {lit: s, pos: sp.lo});\n             log(debug, ~\"tok lit: \" + s);\n         } else {\n-            log(debug, ~\"tok: \" + token::to_str(rdr.interner, tok));\n+            log(debug, ~\"tok: \" + token::to_str(rdr.interner, &tok));\n         }\n         first_read = false;\n     }"}, {"sha": "764ff52a303da5ea0379b500c522f7473d401050", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "patch": "@@ -46,7 +46,7 @@ pub fn seq_sep_none() -> SeqSep {\n     }\n }\n \n-pub fn token_to_str(reader: reader, ++token: token::Token) -> ~str {\n+pub fn token_to_str(reader: reader, token: &token::Token) -> ~str {\n     token::to_str(reader.interner(), token)\n }\n \n@@ -56,7 +56,7 @@ pub impl Parser {\n             *self.last_span,\n             fmt!(\n                 \"unexpected token: `%s`\",\n-                token_to_str(self.reader, t)\n+                token_to_str(self.reader, &t)\n             )\n         );\n     }\n@@ -65,7 +65,7 @@ pub impl Parser {\n         self.fatal(\n             fmt!(\n                 \"unexpected token: `%s`\",\n-                token_to_str(self.reader, *self.token)\n+                token_to_str(self.reader, &copy *self.token)\n             )\n         );\n     }\n@@ -77,9 +77,10 @@ pub impl Parser {\n             self.bump();\n         } else {\n             self.fatal(\n-                fmt!(\"expected `%s` but found `%s`\",\n-                    token_to_str(self.reader, *t),\n-                    token_to_str(self.reader, *self.token)\n+                fmt!(\n+                    \"expected `%s` but found `%s`\",\n+                    token_to_str(self.reader, t),\n+                    token_to_str(self.reader, &copy *self.token)\n                 )\n             )\n         }\n@@ -102,7 +103,7 @@ pub impl Parser {\n                 self.fatal(\n                     fmt!(\n                         \"expected ident, found `%s`\",\n-                         token_to_str(self.reader, *self.token)\n+                        token_to_str(self.reader, &copy *self.token)\n                     )\n                 );\n             }\n@@ -149,7 +150,7 @@ pub impl Parser {\n     }\n \n     fn is_keyword(word: &~str) -> bool {\n-        self.token_is_keyword(word, &*self.token)\n+        self.token_is_keyword(word, &copy *self.token)\n     }\n \n     fn is_any_keyword(tok: &token::Token) -> bool {\n@@ -178,7 +179,7 @@ pub impl Parser {\n                 fmt!(\n                     \"expected `%s`, found `%s`\",\n                     *word,\n-                    token_to_str(self.reader, *self.token)\n+                    token_to_str(self.reader, &copy *self.token)\n                 )\n             );\n         }\n@@ -190,11 +191,11 @@ pub impl Parser {\n \n     fn check_strict_keywords() {\n         match *self.token {\n-          token::IDENT(_, false) => {\n-            let w = token_to_str(self.reader, *self.token);\n-            self.check_strict_keywords_(&w);\n-          }\n-          _ => ()\n+            token::IDENT(_, false) => {\n+                let w = token_to_str(self.reader, &copy *self.token);\n+                self.check_strict_keywords_(&w);\n+            }\n+            _ => ()\n         }\n     }\n \n@@ -210,11 +211,11 @@ pub impl Parser {\n \n     fn check_reserved_keywords() {\n         match *self.token {\n-          token::IDENT(_, false) => {\n-            let w = token_to_str(self.reader, *self.token);\n-            self.check_reserved_keywords_(&w);\n-          }\n-          _ => ()\n+            token::IDENT(_, false) => {\n+                let w = token_to_str(self.reader, &copy *self.token);\n+                self.check_reserved_keywords_(&w);\n+            }\n+            _ => ()\n         }\n     }\n \n@@ -237,9 +238,9 @@ pub impl Parser {\n             );\n         } else {\n             let mut s: ~str = ~\"expected `\";\n-            s += token_to_str(self.reader, token::GT);\n+            s += token_to_str(self.reader, &token::GT);\n             s += ~\"`, found `\";\n-            s += token_to_str(self.reader, *self.token);\n+            s += token_to_str(self.reader, &copy *self.token);\n             s += ~\"`\";\n             self.fatal(s);\n         }"}, {"sha": "d0c6019e09a01d96c2ceab0bda2b41a48dbe7918", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "patch": "@@ -460,7 +460,7 @@ pub impl Parser {\n             let hi = p.last_span.hi;\n             debug!(\"parse_trait_methods(): trait method signature ends in \\\n                     `%s`\",\n-                   token_to_str(p.reader, copy *p.token));\n+                   token_to_str(p.reader, &copy *p.token));\n             match *p.token {\n               token::SEMI => {\n                 p.bump();\n@@ -502,7 +502,7 @@ pub impl Parser {\n                     p.fatal(\n                         fmt!(\n                             \"expected `;` or `}` but found `%s`\",\n-                            token_to_str(p.reader, copy *p.token)\n+                            token_to_str(p.reader, &copy *p.token)\n                         )\n                     );\n                 }\n@@ -848,7 +848,7 @@ pub impl Parser {\n                         fmt!(\n                             \"expected integral vector length \\\n                             but found `%s`\",\n-                            token_to_str(self.reader, copy *self.token)\n+                            token_to_str(self.reader, &copy *self.token)\n                         )\n                     );\n                 }\n@@ -1423,7 +1423,7 @@ pub impl Parser {\n                 p.fatal(\n                     fmt!(\n                         \"incorrect close delimiter: `%s`\",\n-                        token_to_str(p.reader, copy *p.token)\n+                        token_to_str(p.reader, &copy *p.token)\n                     )\n                 );\n               }\n@@ -2114,7 +2114,7 @@ pub impl Parser {\n                     self.fatal(\n                         fmt!(\n                             \"expected `}`, found `%s`\",\n-                            token_to_str(self.reader, copy *self.token)\n+                            token_to_str(self.reader, &copy *self.token)\n                         )\n                     );\n                 }\n@@ -2621,10 +2621,15 @@ pub impl Parser {\n                                 copy t => {\n                                     if classify::stmt_ends_with_semi(*stmt) {\n                                         self.fatal(\n-                                            ~\"expected `;` or `}` after \\\n-                                              expression but found `\"\n-                                            + token_to_str(self.reader, t)\n-                                            + ~\"`\");\n+                                            fmt!(\n+                                                \"expected `;` or `}` after \\\n+                                                expression but found `%s`\",\n+                                                token_to_str(\n+                                                    self.reader,\n+                                                    &t\n+                                                )\n+                                            )\n+                                        );\n                                     }\n                                     stmts.push(stmt);\n                                 }\n@@ -2811,7 +2816,7 @@ pub impl Parser {\n             self.fatal(\n                 fmt!(\n                     \"expected `self` but found `%s`\",\n-                    token_to_str(self.reader, copy *self.token)\n+                    token_to_str(self.reader, &copy *self.token)\n                 )\n             );\n         }\n@@ -2883,7 +2888,7 @@ pub impl Parser {\n                     self.fatal(\n                         fmt!(\n                             \"expected `,` or `)`, found `%s`\",\n-                            token_to_str(self.reader, copy *self.token)\n+                            token_to_str(self.reader, &copy *self.token)\n                         )\n                     );\n                 }\n@@ -3194,7 +3199,7 @@ pub impl Parser {\n                 fmt!(\n                     \"expected `{`, `(`, or `;` after struct name \\\n                     but found `%s`\",\n-                    token_to_str(self.reader, copy *self.token)\n+                    token_to_str(self.reader, &copy *self.token)\n                 )\n             );\n         }\n@@ -3244,7 +3249,7 @@ pub impl Parser {\n                     copy *self.span,\n                     fmt!(\n                         \"expected `;`, `,`, or '}' but found `%s`\",\n-                        token_to_str(self.reader, copy *self.token)\n+                        token_to_str(self.reader, &copy *self.token)\n                     )\n                 );\n             }\n@@ -3334,7 +3339,7 @@ pub impl Parser {\n                 self.fatal(\n                     fmt!(\n                         \"expected item but found `%s`\",\n-                        token_to_str(self.reader, copy *self.token)\n+                        token_to_str(self.reader, &copy *self.token)\n                     )\n                 );\n               }\n@@ -3590,7 +3595,7 @@ pub impl Parser {\n                 copy *self.span,\n                 fmt!(\n                     \"expected `{` or `mod` but found `%s`\",\n-                    token_to_str(self.reader, copy *self.token)\n+                    token_to_str(self.reader, &copy *self.token)\n                 )\n             );\n         }\n@@ -3603,7 +3608,7 @@ pub impl Parser {\n                         copy *self.span,\n                         fmt!(\n                             \"expected foreign module name but found `%s`\",\n-                            token_to_str(self.reader, copy *self.token)\n+                            token_to_str(self.reader, &copy *self.token)\n                         )\n                     );\n                 }"}, {"sha": "bc61ce9e7fcd95596b6ee77108f32e9afe65fd6c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "patch": "@@ -130,8 +130,8 @@ pub fn binop_to_str(o: binop) -> ~str {\n     }\n }\n \n-pub fn to_str(in: @ident_interner, t: Token) -> ~str {\n-    match t {\n+pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n+    match *t {\n       EQ => ~\"=\",\n       LT => ~\"<\",\n       LE => ~\"<=\","}, {"sha": "7cf297b324bda7c0c4c088dcbbceb18f6fc04859", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d346b51997a4a5d9f2e85aa41fc3113338b8a83b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d346b51997a4a5d9f2e85aa41fc3113338b8a83b", "patch": "@@ -777,14 +777,14 @@ pub fn print_tt(s: @ps, tt: ast::token_tree) {\n     match tt {\n       ast::tt_delim(ref tts) => print_tts(s, *tts),\n       ast::tt_tok(_, ref tk) => {\n-          word(s.s, parse::token::to_str(s.intr, (*tk)));\n+          word(s.s, parse::token::to_str(s.intr, tk));\n       }\n       ast::tt_seq(_, ref tts, ref sep, zerok) => {\n         word(s.s, ~\"$(\");\n         for (*tts).each() |tt_elt| { print_tt(s, *tt_elt); }\n         word(s.s, ~\")\");\n         match (*sep) {\n-          Some(ref tk) => word(s.s, parse::token::to_str(s.intr, (*tk))),\n+          Some(ref tk) => word(s.s, parse::token::to_str(s.intr, tk)),\n           None => ()\n         }\n         word(s.s, if zerok { ~\"*\" } else { ~\"+\" });"}]}