{"sha": "ec162703dc05a490d7872b8dec9b8657666e855d", "node_id": "C_kwDOAAsO6NoAKGVjMTYyNzAzZGMwNWE0OTBkNzg3MmI4ZGVjOWI4NjU3NjY2ZTg1NWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-05T13:29:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-05T13:29:10Z"}, "message": "Rollup merge of #108744 - compiler-errors:non_lifetime_binders-bad-copy-clone, r=jackh726\n\nDon't ICE when encountering bound var in builtin copy/clone bounds\n\nFixes #108742", "tree": {"sha": "5d66634e333d4dfb1edc9537f142a450f56d54bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d66634e333d4dfb1edc9537f142a450f56d54bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec162703dc05a490d7872b8dec9b8657666e855d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkBJkmCRBK7hj4Ov3rIwAAiNwIAG7O2Vg14LG3e7eTg0j7WbSh\nyYmU6eyt4mHSAC6e9r6HOqAq5npf/UGcIU8OXMevBXK32XXe7vVT4FHqFKxG4cLh\nccR/Gx1VRItYlm4yxP1QRBV2Zja/nM/bkKX7Jh9gRKak575CitLoNrPQIFz+/Q1k\nPZgeG/HoZiWHvmD+zxpkPcg9noapuMi3+K9mLUlGEqu62NUJq94OJmJWmZuB4o90\nNGojRkw7pB/KiR0JSdLEslum1rUDNr/94qgjJ0CWa641im6GJXXnWdGPEPfI5zXQ\nDhBVzDBXBciOD9RE0Vbu6GwPRrOydR73cfbQrCnnqFgIIKBmdZtK488ou7YxOMA=\n=he8+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d66634e333d4dfb1edc9537f142a450f56d54bb\nparent 03c1e4d4ffaccddc09ed88238d354f9af7fccb21\nparent 32f1f0149924dc15af804def867c480eab26fb52\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678022950 +0100\ncommitter GitHub <noreply@github.com> 1678022950 +0100\n\nRollup merge of #108744 - compiler-errors:non_lifetime_binders-bad-copy-clone, r=jackh726\n\nDon't ICE when encountering bound var in builtin copy/clone bounds\n\nFixes #108742\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec162703dc05a490d7872b8dec9b8657666e855d", "html_url": "https://github.com/rust-lang/rust/commit/ec162703dc05a490d7872b8dec9b8657666e855d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec162703dc05a490d7872b8dec9b8657666e855d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c1e4d4ffaccddc09ed88238d354f9af7fccb21", "html_url": "https://github.com/rust-lang/rust/commit/03c1e4d4ffaccddc09ed88238d354f9af7fccb21"}, {"sha": "32f1f0149924dc15af804def867c480eab26fb52", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f1f0149924dc15af804def867c480eab26fb52", "html_url": "https://github.com/rust-lang/rust/commit/32f1f0149924dc15af804def867c480eab26fb52"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "cd3f3c114ba1e5742c13769928e479b8c4bd3487", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec162703dc05a490d7872b8dec9b8657666e855d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec162703dc05a490d7872b8dec9b8657666e855d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ec162703dc05a490d7872b8dec9b8657666e855d", "patch": "@@ -2149,7 +2149,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Alias(..) | ty::Param(_) | ty::Placeholder(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n-            // We can make this an ICE if/once we actually instantiate the trait obligation.\n+            // We can make this an ICE if/once we actually instantiate the trait obligation eagerly.\n             ty::Bound(..) => None,\n \n             ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n@@ -2257,7 +2257,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::Adt(..) | ty::Alias(..) | ty::Param(..) => {\n+            ty::Adt(..) | ty::Alias(..) | ty::Param(..) | ty::Placeholder(..) => {\n                 // Fallback to whatever user-defined impls exist in this case.\n                 None\n             }\n@@ -2269,9 +2269,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ambiguous\n             }\n \n-            ty::Placeholder(..)\n-            | ty::Bound(..)\n-            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            // We can make this an ICE if/once we actually instantiate the trait obligation eagerly.\n+            ty::Bound(..) => None,\n+\n+            ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n             }\n         }"}, {"sha": "506cad25f630ceb6408a7c3a5f6c42052d4d2074", "filename": "tests/ui/traits/non_lifetime_binders/bad-copy-cond.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec162703dc05a490d7872b8dec9b8657666e855d/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec162703dc05a490d7872b8dec9b8657666e855d/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.rs?ref=ec162703dc05a490d7872b8dec9b8657666e855d", "patch": "@@ -0,0 +1,9 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+fn foo() where for<T> T: Copy {}\n+\n+fn main() {\n+    foo();\n+    //~^ ERROR the trait bound `T: Copy` is not satisfied\n+}"}, {"sha": "07e02d47f27f6b1dcbd30c6379c45d8fa4777369", "filename": "tests/ui/traits/non_lifetime_binders/bad-copy-cond.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec162703dc05a490d7872b8dec9b8657666e855d/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec162703dc05a490d7872b8dec9b8657666e855d/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.stderr?ref=ec162703dc05a490d7872b8dec9b8657666e855d", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-copy-cond.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n+  --> $DIR/bad-copy-cond.rs:7:5\n+   |\n+LL |     foo();\n+   |     ^^^ the trait `Copy` is not implemented for `T`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/bad-copy-cond.rs:4:26\n+   |\n+LL | fn foo() where for<T> T: Copy {}\n+   |                          ^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}]}