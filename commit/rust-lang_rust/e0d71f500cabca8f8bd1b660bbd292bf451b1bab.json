{"sha": "e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "node_id": "C_kwDOAAsO6NoAKGUwZDcxZjUwMGNhYmNhOGY4YmQxYjY2MGJiZDI5MmJmNDUxYjFiYWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T06:53:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T06:53:21Z"}, "message": "Rollup merge of #97373 - dimpolo:cell_dispatch_from_dyn, r=dtolnay\n\nimpl DispatchFromDyn for Cell and UnsafeCell\n\nAfter some fruitful discussion on [Internals](https://internals.rust-lang.org/t/impl-dispatchfromdyn-for-cell-2/16520) here's my first PR to rust-lang/rust \ud83c\udf89\n\nPlease let me know if there's something I missed.\n\nThis adds `DispatchFromDyn` impls for `Cell`, `UnsafeCell` and `SyncUnsafeCell`.\nAn existing test is also expanded to test the `Cell` impl (which requires the `UnsafeCell` impl)\n\nThe different `RefCell` types can not implement `DispatchFromDyn` since they have more than one (non ZST) field.\n\n&nbsp;\n\n**Edit:**\n### What:\nThese changes allow one to make types like `MyRc`(code below), to be object safe method receivers after implementing `DispatchFromDyn` and `Deref` for them.\n\nThis allows for code like this:\n```rust\nstruct MyRc<T: ?Sized>(Cell<NonNull<RcBox<T>>>);\n\n/* impls for DispatchFromDyn, CoerceUnsized and Deref for MyRc*/\n\ntrait Trait {\n    fn foo(self: MyRc<Self>);\n}\n\nlet impls_trait = ...;\nlet rc = MyRc::new(impls_trait) as MyRc<dyn Trait>;\nrc.foo();\n```\n\nNote: `Cell` and `UnsafeCell` won't directly become valid method receivers since they don't implement `Deref`. Making use of these changes requires a wrapper type and nightly features.\n\n### Why:\nA custom pointer type with interior mutability allows one to store extra information in the pointer itself.\nThese changes allow for such a type to be a method receiver.\n\n### Examples:\nMy use case is a cycle aware custom `Rc` implementation that when dropping a cycle marks some references dangling.\n\nOn the [forum](https://internals.rust-lang.org/t/impl-dispatchfromdyn-for-cell/14762/8) andersk mentioned that they track if a `Gc` reference is rooted with an extra bit in the reference itself.", "tree": {"sha": "fbffdf6734cba4d9c39b9f8f727be76eef5da8f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbffdf6734cba4d9c39b9f8f727be76eef5da8f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0iNhCRBK7hj4Ov3rIwAAO5AIAFYOijSu1DDI2UUPl446Dgiy\nkgk2Q+UHd09afUOXA25+jdmahjRG2jSVQWtAaSpXhRNSTXMVIbwSkA8+v/JbBest\niT6pNO9Fry25HjEyfcmFYWlixulNqOWtrn87iiEfdtjMBCixbDjDWSkKR4Hpucck\nmc3T2L6kZfXUKggg5uyHui9Jh9IaxMgb9FZKWMFyt0tQafyoVMKJTTpM+kbma0Fy\nr0Z66tqwiYYVTOgw2Lvq+TY7uoS4vRIDaLN3J2CbPgbBXNnE3tTOVwb6lxI5Ssjn\nyUN/rLn7EA0yi8VCEJLxvY1V1VLzldU36jVQnSguTyrTw82uSFgePlSyNaOYDmI=\n=yIVt\n-----END PGP SIGNATURE-----\n", "payload": "tree fbffdf6734cba4d9c39b9f8f727be76eef5da8f6\nparent 885bf628879310b885721e1fdd91ea2cbca9311f\nparent af58854168f2ae6b0af89d7945584cb78e276193\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674716001 +0100\ncommitter GitHub <noreply@github.com> 1674716001 +0100\n\nRollup merge of #97373 - dimpolo:cell_dispatch_from_dyn, r=dtolnay\n\nimpl DispatchFromDyn for Cell and UnsafeCell\n\nAfter some fruitful discussion on [Internals](https://internals.rust-lang.org/t/impl-dispatchfromdyn-for-cell-2/16520) here's my first PR to rust-lang/rust \ud83c\udf89\n\nPlease let me know if there's something I missed.\n\nThis adds `DispatchFromDyn` impls for `Cell`, `UnsafeCell` and `SyncUnsafeCell`.\nAn existing test is also expanded to test the `Cell` impl (which requires the `UnsafeCell` impl)\n\nThe different `RefCell` types can not implement `DispatchFromDyn` since they have more than one (non ZST) field.\n\n&nbsp;\n\n**Edit:**\n### What:\nThese changes allow one to make types like `MyRc`(code below), to be object safe method receivers after implementing `DispatchFromDyn` and `Deref` for them.\n\nThis allows for code like this:\n```rust\nstruct MyRc<T: ?Sized>(Cell<NonNull<RcBox<T>>>);\n\n/* impls for DispatchFromDyn, CoerceUnsized and Deref for MyRc*/\n\ntrait Trait {\n    fn foo(self: MyRc<Self>);\n}\n\nlet impls_trait = ...;\nlet rc = MyRc::new(impls_trait) as MyRc<dyn Trait>;\nrc.foo();\n```\n\nNote: `Cell` and `UnsafeCell` won't directly become valid method receivers since they don't implement `Deref`. Making use of these changes requires a wrapper type and nightly features.\n\n### Why:\nA custom pointer type with interior mutability allows one to store extra information in the pointer itself.\nThese changes allow for such a type to be a method receiver.\n\n### Examples:\nMy use case is a cycle aware custom `Rc` implementation that when dropping a cycle marks some references dangling.\n\nOn the [forum](https://internals.rust-lang.org/t/impl-dispatchfromdyn-for-cell/14762/8) andersk mentioned that they track if a `Gc` reference is rooted with an extra bit in the reference itself.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "html_url": "https://github.com/rust-lang/rust/commit/e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885bf628879310b885721e1fdd91ea2cbca9311f", "url": "https://api.github.com/repos/rust-lang/rust/commits/885bf628879310b885721e1fdd91ea2cbca9311f", "html_url": "https://github.com/rust-lang/rust/commit/885bf628879310b885721e1fdd91ea2cbca9311f"}, {"sha": "af58854168f2ae6b0af89d7945584cb78e276193", "url": "https://api.github.com/repos/rust-lang/rust/commits/af58854168f2ae6b0af89d7945584cb78e276193", "html_url": "https://github.com/rust-lang/rust/commit/af58854168f2ae6b0af89d7945584cb78e276193"}], "stats": {"total": 156, "additions": 155, "deletions": 1}, "files": [{"sha": "7f109491350f0a21c2bbb5bc3f6b0badd193e4e8", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "patch": "@@ -196,7 +196,7 @@ use crate::cmp::Ordering;\n use crate::fmt::{self, Debug, Display};\n use crate::marker::{PhantomData, Unsize};\n use crate::mem;\n-use crate::ops::{CoerceUnsized, Deref, DerefMut};\n+use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn};\n use crate::ptr::{self, NonNull};\n \n mod lazy;\n@@ -571,6 +571,16 @@ impl<T: Default> Cell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}\n \n+// Allow types that wrap `Cell` to also implement `DispatchFromDyn`\n+// and become object safe method receivers.\n+// Note that currently `Cell` itself cannot be a method receiver\n+// because it does not implement Deref.\n+// In other words:\n+// `self: Cell<&Self>` won't work\n+// `self: CellWrapper<Self>` becomes possible\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n+impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Cell<U>> for Cell<T> {}\n+\n impl<T> Cell<[T]> {\n     /// Returns a `&[Cell<T>]` from a `&Cell<[T]>`\n     ///\n@@ -2078,6 +2088,16 @@ impl<T> const From<T> for UnsafeCell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n \n+// Allow types that wrap `UnsafeCell` to also implement `DispatchFromDyn`\n+// and become object safe method receivers.\n+// Note that currently `UnsafeCell` itself cannot be a method receiver\n+// because it does not implement Deref.\n+// In other words:\n+// `self: UnsafeCell<&Self>` won't work\n+// `self: UnsafeCellWrapper<Self>` becomes possible\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n+impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<UnsafeCell<U>> for UnsafeCell<T> {}\n+\n /// [`UnsafeCell`], but [`Sync`].\n ///\n /// This is just an `UnsafeCell`, except it implements `Sync`\n@@ -2169,6 +2189,17 @@ impl<T> const From<T> for SyncUnsafeCell<T> {\n //#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n \n+// Allow types that wrap `SyncUnsafeCell` to also implement `DispatchFromDyn`\n+// and become object safe method receivers.\n+// Note that currently `SyncUnsafeCell` itself cannot be a method receiver\n+// because it does not implement Deref.\n+// In other words:\n+// `self: SyncUnsafeCell<&Self>` won't work\n+// `self: SyncUnsafeCellWrapper<Self>` becomes possible\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n+//#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n+\n #[allow(unused)]\n fn assert_coerce_unsized(\n     a: UnsafeCell<&i32>,"}, {"sha": "83366ea02b09a4be662212c0425827ea4497c1d0", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-cell.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.rs?ref=e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "patch": "@@ -0,0 +1,9 @@\n+// Check that even though Cell: DispatchFromDyn it remains an invalid self parameter type\n+\n+use std::cell::Cell;\n+\n+trait Trait{\n+    fn cell(self: Cell<&Self>); //~ ERROR invalid `self` parameter type: Cell<&Self>\n+}\n+\n+fn main() {}"}, {"sha": "ce06ce916a7587823dfa66a8427635cca3b0102c", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-cell.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.stderr?ref=e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "patch": "@@ -0,0 +1,12 @@\n+error[E0307]: invalid `self` parameter type: Cell<&Self>\n+  --> $DIR/feature-gate-dispatch-from-dyn-cell.rs:6:19\n+   |\n+LL |     fn cell(self: Cell<&Self>);\n+   |                   ^^^^^^^^^^^\n+   |\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "23857cbaca85e700de69af8bc9b663edb77eb2cd", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.rs?ref=e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "patch": "@@ -0,0 +1,35 @@\n+// Check that a self parameter type requires a DispatchFromDyn impl to be object safe\n+\n+#![feature(arbitrary_self_types, unsize, coerce_unsized)]\n+\n+use std::{\n+    marker::Unsize,\n+    ops::{CoerceUnsized, Deref},\n+};\n+\n+struct Ptr<T: ?Sized>(Box<T>);\n+\n+impl<T: ?Sized> Deref for Ptr<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.0\n+    }\n+}\n+\n+impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n+// Because this impl is missing the coercion below fails.\n+// impl<T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<Ptr<U>> for Ptr<T> {}\n+\n+trait Trait {\n+    fn ptr(self: Ptr<Self>);\n+}\n+impl Trait for i32 {\n+    fn ptr(self: Ptr<Self>) {}\n+}\n+\n+fn main() {\n+    Ptr(Box::new(4)) as Ptr<dyn Trait>;\n+    //~^ ERROR the trait `Trait` cannot be made into an object\n+    //~^^ ERROR the trait `Trait` cannot be made into an object\n+}"}, {"sha": "d81eade8e9bfb74dd62e2013e51240cb54832d20", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr?ref=e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "patch": "@@ -0,0 +1,45 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:32:25\n+   |\n+LL |     fn ptr(self: Ptr<Self>);\n+   |                  --------- help: consider changing method `ptr`'s `self` parameter to be `&self`: `&Self`\n+...\n+LL |     Ptr(Box::new(4)) as Ptr<dyn Trait>;\n+   |                         ^^^^^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:25:18\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn ptr(self: Ptr<Self>);\n+   |                  ^^^^^^^^^ ...because method `ptr`'s `self` parameter cannot be dispatched on\n+\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:32:5\n+   |\n+LL |     fn ptr(self: Ptr<Self>);\n+   |                  --------- help: consider changing method `ptr`'s `self` parameter to be `&self`: `&Self`\n+...\n+LL |     Ptr(Box::new(4)) as Ptr<dyn Trait>;\n+   |     ^^^^^^^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:25:18\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn ptr(self: Ptr<Self>);\n+   |                  ^^^^^^^^^ ...because method `ptr`'s `self` parameter cannot be dispatched on\n+note: required for `Ptr<{integer}>` to implement `CoerceUnsized<Ptr<dyn Trait>>`\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:20:40\n+   |\n+LL | impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n+   |         ---------                      ^^^^^^^^^^^^^^^^^^^^^     ^^^^^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+   = note: required by cast to type `Ptr<dyn Trait>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "91aacedfc577897b70c0bad4de441d3633bd38a4", "filename": "tests/ui/self/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Fself%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d71f500cabca8f8bd1b660bbd292bf451b1bab/tests%2Fui%2Fself%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=e0d71f500cabca8f8bd1b660bbd292bf451b1bab", "patch": "@@ -3,6 +3,7 @@\n #![feature(rustc_attrs)]\n \n use std::{\n+    cell::Cell,\n     ops::{Deref, CoerceUnsized, DispatchFromDyn},\n     marker::Unsize,\n };\n@@ -20,6 +21,20 @@ impl<T: ?Sized> Deref for Ptr<T> {\n impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n impl<T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<Ptr<U>> for Ptr<T> {}\n \n+\n+struct CellPtr<'a, T: ?Sized>(Cell<&'a T>);\n+\n+impl<'a, T: ?Sized> Deref for CellPtr<'a, T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        self.0.get()\n+    }\n+}\n+\n+impl<'a, T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<CellPtr<'a, U>> for CellPtr<'a, T> {}\n+impl<'a, T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<CellPtr<'a, U>> for CellPtr<'a, T> {}\n+\n struct Wrapper<T: ?Sized>(T);\n \n impl<T: ?Sized> Deref for Wrapper<T> {\n@@ -42,6 +57,7 @@ trait Trait {\n     fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32;\n     fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32;\n     fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32;\n+    fn cell(self: CellPtr<Self>) -> i32;\n }\n \n impl Trait for i32 {\n@@ -54,6 +70,9 @@ impl Trait for i32 {\n     fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32 {\n         ***self\n     }\n+    fn cell(self: CellPtr<Self>) -> i32 {\n+        *self\n+    }\n }\n \n fn main() {\n@@ -65,4 +84,7 @@ fn main() {\n \n     let wpw = Wrapper(Ptr(Box::new(Wrapper(7)))) as Wrapper<Ptr<Wrapper<dyn Trait>>>;\n     assert_eq!(wpw.wrapper_ptr_wrapper(), 7);\n+\n+    let c = CellPtr(Cell::new(&8)) as CellPtr<dyn Trait>;\n+    assert_eq!(c.cell(), 8);\n }"}]}