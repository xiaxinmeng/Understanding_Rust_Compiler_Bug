{"sha": "4cfceeabdcd185cd4bfca080d39e93abddc4977a", "node_id": "C_kwDOAAsO6NoAKDRjZmNlZWFiZGNkMTg1Y2Q0YmZjYTA4MGQzOWU5M2FiZGRjNDk3N2E", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-11T11:01:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-17T09:03:33Z"}, "message": "Remove is_in_fn_syntax.", "tree": {"sha": "7b74496d3e226efa12b79ea71bb8fb8a2eaa1494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b74496d3e226efa12b79ea71bb8fb8a2eaa1494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cfceeabdcd185cd4bfca080d39e93abddc4977a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfceeabdcd185cd4bfca080d39e93abddc4977a", "html_url": "https://github.com/rust-lang/rust/commit/4cfceeabdcd185cd4bfca080d39e93abddc4977a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cfceeabdcd185cd4bfca080d39e93abddc4977a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e47f66dc0d2697aab816fe045fb00195bac18596", "url": "https://api.github.com/repos/rust-lang/rust/commits/e47f66dc0d2697aab816fe045fb00195bac18596", "html_url": "https://github.com/rust-lang/rust/commit/e47f66dc0d2697aab816fe045fb00195bac18596"}], "stats": {"total": 11, "additions": 0, "deletions": 11}, "files": [{"sha": "1aa1d51e2efc81af0fae92d8a1b77c00dfb3cbd8", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4cfceeabdcd185cd4bfca080d39e93abddc4977a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfceeabdcd185cd4bfca080d39e93abddc4977a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=4cfceeabdcd185cd4bfca080d39e93abddc4977a", "patch": "@@ -164,9 +164,6 @@ crate struct LifetimeContext<'a, 'tcx> {\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n \n-    /// Used to disallow the use of in-band lifetimes in `fn` or `Fn` syntax.\n-    is_in_fn_syntax: bool,\n-\n     is_in_const_generic: bool,\n \n     /// Indicates that we only care about the definition of a trait. This should\n@@ -455,7 +452,6 @@ fn do_resolve(\n         tcx,\n         map: &mut named_region_map,\n         scope: ROOT_SCOPE,\n-        is_in_fn_syntax: false,\n         is_in_const_generic: false,\n         trait_definition_only,\n         labels_in_fn: vec![],\n@@ -874,8 +870,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         match ty.kind {\n             hir::TyKind::BareFn(ref c) => {\n                 let next_early_index = self.next_early_index();\n-                let was_in_fn_syntax = self.is_in_fn_syntax;\n-                self.is_in_fn_syntax = true;\n                 let lifetime_span: Option<Span> =\n                     c.generic_params.iter().rev().find_map(|param| match param.kind {\n                         GenericParamKind::Lifetime { .. } => Some(param.span),\n@@ -917,7 +911,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     intravisit::walk_ty(this, ty);\n                 });\n                 self.missing_named_lifetime_spots.pop();\n-                self.is_in_fn_syntax = was_in_fn_syntax;\n             }\n             hir::TyKind::TraitObject(bounds, ref lifetime, _) => {\n                 debug!(?bounds, ?lifetime, \"TraitObject\");\n@@ -1805,7 +1798,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             tcx: *tcx,\n             map,\n             scope: &wrap_scope,\n-            is_in_fn_syntax: self.is_in_fn_syntax,\n             is_in_const_generic: self.is_in_const_generic,\n             trait_definition_only: self.trait_definition_only,\n             labels_in_fn,\n@@ -2336,10 +2328,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         );\n \n         if generic_args.parenthesized {\n-            let was_in_fn_syntax = self.is_in_fn_syntax;\n-            self.is_in_fn_syntax = true;\n             self.visit_fn_like_elision(generic_args.inputs(), Some(generic_args.bindings[0].ty()));\n-            self.is_in_fn_syntax = was_in_fn_syntax;\n             return;\n         }\n "}]}