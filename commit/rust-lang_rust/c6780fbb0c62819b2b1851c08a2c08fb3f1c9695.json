{"sha": "c6780fbb0c62819b2b1851c08a2c08fb3f1c9695", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NzgwZmJiMGM2MjgxOWIyYjE4NTFjMDhhMmMwOGZiM2YxYzk2OTU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-19T05:54:57Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-13T03:43:38Z"}, "message": "Make trans ignore last use", "tree": {"sha": "eebd1468cd2e4294ae88b434267df69b2779eb6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eebd1468cd2e4294ae88b434267df69b2779eb6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6780fbb0c62819b2b1851c08a2c08fb3f1c9695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6780fbb0c62819b2b1851c08a2c08fb3f1c9695", "html_url": "https://github.com/rust-lang/rust/commit/c6780fbb0c62819b2b1851c08a2c08fb3f1c9695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6780fbb0c62819b2b1851c08a2c08fb3f1c9695/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4155f5ea37b9921eff310d9ca06402d0bb9b0f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4155f5ea37b9921eff310d9ca06402d0bb9b0f6", "html_url": "https://github.com/rust-lang/rust/commit/c4155f5ea37b9921eff310d9ca06402d0bb9b0f6"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "655efe75bf65c9e184ae298d7d6e54d10cb09698", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6780fbb0c62819b2b1851c08a2c08fb3f1c9695/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6780fbb0c62819b2b1851c08a2c08fb3f1c9695/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c6780fbb0c62819b2b1851c08a2c08fb3f1c9695", "patch": "@@ -244,7 +244,6 @@ fn store_environment(bcx: block,\n fn build_closure(bcx0: block,\n                  cap_vars: ~[capture::capture_var],\n                  ck: ty::closure_kind,\n-                 id: ast::node_id,\n                  include_ret_handle: Option<ValueRef>) -> closure_result {\n     let _icx = bcx0.insn_ctxt(\"closure::build_closure\");\n     // If we need to, package up the iterator body to call\n@@ -255,7 +254,7 @@ fn build_closure(bcx0: block,\n     let mut env_vals = ~[];\n     for vec::each(cap_vars) |cap_var| {\n         debug!(\"Building closure: captured variable %?\", *cap_var);\n-        let datum = expr::trans_local_var(bcx, id, cap_var.def);\n+        let datum = expr::trans_local_var(bcx, cap_var.def);\n         match cap_var.mode {\n             capture::cap_ref => {\n                 assert ck == ty::ck_block;\n@@ -370,7 +369,7 @@ fn trans_expr_fn(bcx: block,\n         let cap_vars = capture::compute_capture_vars(ccx.tcx, id, proto,\n                                                      cap_clause);\n         let ret_handle = match is_loop_body { Some(x) => x, None => None };\n-        let {llbox, cdata_ty, bcx} = build_closure(bcx, cap_vars, ck, id,\n+        let {llbox, cdata_ty, bcx} = build_closure(bcx, cap_vars, ck,\n                                                    ret_handle);\n         trans_closure(ccx, sub_path, decl, body, llfn, no_self,\n                       bcx.fcx.param_substs, id, |fcx| {"}, {"sha": "333d76a91ee6822f10ece7185a692fba068f14d8", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c6780fbb0c62819b2b1851c08a2c08fb3f1c9695/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6780fbb0c62819b2b1851c08a2c08fb3f1c9695/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=c6780fbb0c62819b2b1851c08a2c08fb3f1c9695", "patch": "@@ -748,13 +748,13 @@ fn trans_def_lvalue(bcx: block, ref_expr: @ast::expr,\n         _ => {\n             DatumBlock {\n                 bcx: bcx,\n-                datum: trans_local_var(bcx, ref_expr.id, def)\n+                datum: trans_local_var(bcx, def)\n             }\n         }\n     }\n }\n \n-fn trans_local_var(bcx: block, ref_id: ast::node_id, def: ast::def) -> Datum {\n+fn trans_local_var(bcx: block, def: ast::def) -> Datum {\n     let _icx = bcx.insn_ctxt(\"trans_local_var\");\n \n     return match def {\n@@ -776,10 +776,10 @@ fn trans_local_var(bcx: block, ref_id: ast::node_id, def: ast::def) -> Datum {\n             }\n         }\n         ast::def_arg(nid, _) => {\n-            take_local(bcx, ref_id, bcx.fcx.llargs, nid)\n+            take_local(bcx, bcx.fcx.llargs, nid)\n         }\n         ast::def_local(nid, _) | ast::def_binding(nid, _) => {\n-            take_local(bcx, ref_id, bcx.fcx.lllocals, nid)\n+            take_local(bcx, bcx.fcx.lllocals, nid)\n         }\n         ast::def_self(nid) => {\n             let self_info: ValSelfData = match bcx.fcx.llself {\n@@ -809,15 +809,8 @@ fn trans_local_var(bcx: block, ref_id: ast::node_id, def: ast::def) -> Datum {\n     };\n \n     fn take_local(bcx: block,\n-                  ref_id: ast::node_id,\n                   table: HashMap<ast::node_id, local_val>,\n                   nid: ast::node_id) -> Datum {\n-        let is_last_use = match bcx.ccx().maps.last_use_map.find(ref_id) {\n-            None => false,\n-            Some(vars) => (*vars).contains(&nid)\n-        };\n-\n-        let source = if is_last_use {FromLastUseLvalue} else {FromLvalue};\n \n         let (v, mode) = match table.find(nid) {\n             Some(local_mem(v)) => (v, ByRef),\n@@ -829,10 +822,10 @@ fn trans_local_var(bcx: block, ref_id: ast::node_id, def: ast::def) -> Datum {\n         };\n         let ty = node_id_type(bcx, nid);\n \n-        debug!(\"take_local(nid=%?, last_use=%b, v=%s, mode=%?, ty=%s)\",\n-               nid, is_last_use, bcx.val_str(v), mode, bcx.ty_to_str(ty));\n+        debug!(\"take_local(nid=%?, v=%s, mode=%?, ty=%s)\",\n+               nid, bcx.val_str(v), mode, bcx.ty_to_str(ty));\n \n-        Datum { val: v, ty: ty, mode: mode, source: source }\n+        Datum { val: v, ty: ty, mode: mode, source: FromLvalue }\n     }\n }\n "}]}