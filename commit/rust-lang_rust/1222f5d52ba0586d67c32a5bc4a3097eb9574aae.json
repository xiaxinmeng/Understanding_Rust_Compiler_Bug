{"sha": "1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMjJmNWQ1MmJhMDU4NmQ2N2MzMmE1YmM0YTMwOTdlYjk1NzRhYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-11T04:42:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-11T04:42:48Z"}, "message": "Auto merge of #34845 - bitshifter:issue-30961, r=alexcrichton\n\nAdd help for target CPUs, features, relocation and code models.\n\nFix for https://github.com/rust-lang/rust/issues/30961. Requires PR https://github.com/rust-lang/llvm/pull/45 to be accepted first, and the .gitmodules for llvm to be updated before this can be merged.", "tree": {"sha": "436580873936f5699d607ff9bf84ef6f05d816ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/436580873936f5699d607ff9bf84ef6f05d816ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "html_url": "https://github.com/rust-lang/rust/commit/1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ef24eed2fe3bfdd050e246327332fadb5985a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef24eed2fe3bfdd050e246327332fadb5985a6a", "html_url": "https://github.com/rust-lang/rust/commit/0ef24eed2fe3bfdd050e246327332fadb5985a6a"}, {"sha": "05045da9fdab511f39e88335b1bc7f92ea7973ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/05045da9fdab511f39e88335b1bc7f92ea7973ba", "html_url": "https://github.com/rust-lang/rust/commit/05045da9fdab511f39e88335b1bc7f92ea7973ba"}], "stats": {"total": 181, "additions": 160, "deletions": 21}, "files": [{"sha": "2d63f69960f78a949b952d4fdf8e916c1559c398", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -32,6 +32,11 @@ RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n                      $$(call CFG_CC_INCLUDE_$(1),$$(S)src/rustllvm/include)\n RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=$(1)/rustllvm/%.o)\n \n+# Flag that we are building with Rust's llvm fork\n+ifeq ($(CFG_LLVM_ROOT),)\n+RUSTLLVM_CXXFLAGS_$(1) := -DLLVM_RUSTLLVM\n+endif\n+\n # Note that we appease `cl.exe` and its need for some sort of exception\n # handling flag with the `EHsc` argument here as well.\n ifeq ($$(findstring msvc,$(1)),msvc)\n@@ -55,6 +60,7 @@ $(1)/rustllvm/%.o: $(S)src/rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n \t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@,) \\\n \t\t$$(subst  /,//,$$(LLVM_CXXFLAGS_$(1))) \\\n \t\t$$(RUSTLLVM_COMPONENTS_$(1)) \\\n+\t\t$$(RUSTLLVM_CXXFLAGS_$(1)) \\\n \t\t$$(EXTRA_RUSTLLVM_CXXFLAGS_$(1)) \\\n \t\t$$(RUSTLLVM_INCS_$(1)) \\\n \t\t$$<"}, {"sha": "155848901cdb49c8919d1d77f9d0756f18328b4d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -198,6 +198,10 @@ pub fn rustc<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     if !build.unstable_features {\n         cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n     }\n+    // Flag that rust llvm is in use\n+    if build.is_rust_llvm(target) {\n+        cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+    }\n     cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n     if build.config.llvm_static_stdcpp {\n         cargo.env(\"LLVM_STATIC_STDCPP\","}, {"sha": "5d61abe5e086ad23c54c2d2e42a70ece43d30ff7", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -727,6 +727,16 @@ impl Build {\n         self.out.join(target).join(\"llvm\")\n     }\n \n+    /// Returns true if no custom `llvm-config` is set for the specified target.\n+    ///\n+    /// If no custom `llvm-config` was specified then Rust's llvm will be used.\n+    fn is_rust_llvm(&self, target: &str) -> bool {\n+        match self.config.target_config.get(target) {\n+            Some(ref c) => c.llvm_config.is_none(),\n+            None => true\n+        }\n+    }\n+\n     /// Returns the path to `llvm-config` for the specified target.\n     ///\n     /// If a custom `llvm-config` was specified for target then that's returned"}, {"sha": "0fb4d0f8fea5e63f171c5ddbc642505775b894f8", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -176,6 +176,10 @@ pub enum PrintRequest {\n     CrateName,\n     Cfg,\n     TargetList,\n+    TargetCPUs,\n+    TargetFeatures,\n+    RelocationModels,\n+    CodeModels,\n }\n \n pub enum Input {\n@@ -629,9 +633,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     lto: bool = (false, parse_bool,\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string,\n-        \"select target processor (llc -mcpu=help for details)\"),\n+        \"select target processor (rustc --print target-cpus for details)\"),\n     target_feature: String = (\"\".to_string(), parse_string,\n-        \"target specific attributes (llc -mattr=help for details)\"),\n+        \"target specific attributes (rustc --print target-features for details)\"),\n     passes: Vec<String> = (Vec::new(), parse_list,\n         \"a list of extra LLVM passes to run (space separated)\"),\n     llvm_args: Vec<String> = (Vec::new(), parse_list,\n@@ -655,9 +659,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     no_redzone: Option<bool> = (None, parse_opt_bool,\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string,\n-         \"choose the relocation model to use (llc -relocation-model for details)\"),\n+         \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n     code_model: Option<String> = (None, parse_opt_string,\n-         \"choose the code model to use (llc -code-model for details)\"),\n+         \"choose the code model to use (rustc --print code-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list,\n          \"metadata to mangle symbol names with\"),\n     extra_filename: String = (\"\".to_string(), parse_string,\n@@ -1024,7 +1028,8 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                  \"[asm|llvm-bc|llvm-ir|obj|link|dep-info]\"),\n         opt::multi_s(\"\", \"print\", \"Comma separated list of compiler information to \\\n                                print on stdout\",\n-                 \"[crate-name|file-names|sysroot|cfg|target-list]\"),\n+                 \"[crate-name|file-names|sysroot|cfg|target-list|target-cpus|\\\n+                   target-features|relocation-models|code-models]\"),\n         opt::flagmulti_s(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n         opt::opt_s(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n@@ -1238,6 +1243,24 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         early_error(error_format, \"Value for codegen units must be a positive nonzero integer\");\n     }\n \n+    let mut prints = Vec::<PrintRequest>::new();\n+    if cg.target_cpu.as_ref().map_or(false, |s| s == \"help\") {\n+        prints.push(PrintRequest::TargetCPUs);\n+        cg.target_cpu = None;\n+    };\n+    if cg.target_feature == \"help\" {\n+        prints.push(PrintRequest::TargetFeatures);\n+        cg.target_feature = \"\".to_string();\n+    }\n+    if cg.relocation_model.as_ref().map_or(false, |s| s == \"help\") {\n+        prints.push(PrintRequest::RelocationModels);\n+        cg.relocation_model = None;\n+    }\n+    if cg.code_model.as_ref().map_or(false, |s| s == \"help\") {\n+        prints.push(PrintRequest::CodeModels);\n+        cg.code_model = None;\n+    }\n+\n     let cg = cg;\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n@@ -1315,18 +1338,22 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n \n-    let prints = matches.opt_strs(\"print\").into_iter().map(|s| {\n+    prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| {\n         match &*s {\n             \"crate-name\" => PrintRequest::CrateName,\n             \"file-names\" => PrintRequest::FileNames,\n             \"sysroot\" => PrintRequest::Sysroot,\n             \"cfg\" => PrintRequest::Cfg,\n             \"target-list\" => PrintRequest::TargetList,\n+            \"target-cpus\" => PrintRequest::TargetCPUs,\n+            \"target-features\" => PrintRequest::TargetFeatures,\n+            \"relocation-models\" => PrintRequest::RelocationModels,\n+            \"code-models\" => PrintRequest::CodeModels,\n             req => {\n                 early_error(error_format, &format!(\"unknown print request `{}`\", req))\n             }\n         }\n-    }).collect::<Vec<_>>();\n+    }));\n \n     if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n         early_warn(error_format, \"-C remark will not show source locations without \\"}, {"sha": "98860c8f900eb397a68851509144182c89bc8364", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -68,6 +68,7 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_trans::back::link;\n+use rustc_trans::back::write::{create_target_machine, RELOC_MODEL_ARGS, CODE_GEN_MODEL_ARGS};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n@@ -654,6 +655,28 @@ impl RustcDefaultCalls {\n                         }\n                     }\n                 }\n+                PrintRequest::TargetCPUs => {\n+                    let tm = create_target_machine(sess);\n+                    unsafe { llvm::LLVMRustPrintTargetCPUs(tm); }\n+                }\n+                PrintRequest::TargetFeatures => {\n+                    let tm = create_target_machine(sess);\n+                    unsafe { llvm::LLVMRustPrintTargetFeatures(tm); }\n+                }\n+                PrintRequest::RelocationModels => {\n+                    println!(\"Available relocation models:\");\n+                    for &(name, _) in RELOC_MODEL_ARGS.iter() {\n+                        println!(\"    {}\", name);\n+                    }\n+                    println!(\"\");\n+                }\n+                PrintRequest::CodeModels => {\n+                    println!(\"Available code models:\");\n+                    for &(name, _) in CODE_GEN_MODEL_ARGS.iter(){\n+                        println!(\"    {}\", name);\n+                    }\n+                    println!(\"\");\n+                }\n             }\n         }\n         return Compilation::Stop;"}, {"sha": "5f7a0f788ca1289e8da69b9e001289622041af8b", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -112,6 +112,10 @@ fn main() {\n         cfg.flag(&flag);\n     }\n \n+    if env::var_os(\"LLVM_RUSTLLVM\").is_some() {\n+        cfg.flag(\"-DLLVM_RUSTLLVM\");\n+    }\n+\n     cfg.file(\"../rustllvm/PassWrapper.cpp\")\n        .file(\"../rustllvm/RustWrapper.cpp\")\n        .file(\"../rustllvm/ArchiveWrapper.cpp\")"}, {"sha": "b2ffcac365bad34760351052003f8411d7265fb0", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -1940,6 +1940,9 @@ extern {\n     pub fn LLVMRustHasFeature(T: TargetMachineRef,\n                               s: *const c_char) -> bool;\n \n+    pub fn LLVMRustPrintTargetCPUs(T: TargetMachineRef);\n+    pub fn LLVMRustPrintTargetFeatures(T: TargetMachineRef);\n+\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n                                        Features: *const c_char,"}, {"sha": "b5c993b86ecb2e0c09d015f9d93117ec02534b60", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -36,6 +36,21 @@ use std::sync::mpsc::channel;\n use std::thread;\n use libc::{c_uint, c_void};\n \n+pub const RELOC_MODEL_ARGS : [(&'static str, llvm::RelocMode); 4] = [\n+    (\"pic\", llvm::RelocMode::PIC),\n+    (\"static\", llvm::RelocMode::Static),\n+    (\"default\", llvm::RelocMode::Default),\n+    (\"dynamic-no-pic\", llvm::RelocMode::DynamicNoPic),\n+];\n+\n+pub const CODE_GEN_MODEL_ARGS : [(&'static str, llvm::CodeModel); 5] = [\n+    (\"default\", llvm::CodeModel::Default),\n+    (\"small\", llvm::CodeModel::Small),\n+    (\"kernel\", llvm::CodeModel::Kernel),\n+    (\"medium\", llvm::CodeModel::Medium),\n+    (\"large\", llvm::CodeModel::Large),\n+];\n+\n pub fn llvm_err(handler: &errors::Handler, msg: String) -> ! {\n     match llvm::last_error() {\n         Some(err) => panic!(handler.fatal(&format!(\"{}: {}\", msg, err))),\n@@ -168,12 +183,9 @@ pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n         None => &sess.target.target.options.code_model[..],\n     };\n \n-    let code_model = match code_model_arg {\n-        \"default\" => llvm::CodeModel::Default,\n-        \"small\" => llvm::CodeModel::Small,\n-        \"kernel\" => llvm::CodeModel::Kernel,\n-        \"medium\" => llvm::CodeModel::Medium,\n-        \"large\" => llvm::CodeModel::Large,\n+    let code_model = match CODE_GEN_MODEL_ARGS.iter().find(\n+        |&&arg| arg.0 == code_model_arg) {\n+        Some(x) => x.1,\n         _ => {\n             sess.err(&format!(\"{:?} is not a valid code model\",\n                              sess.opts"}, {"sha": "65eea1bbb6337cba32e1737be9da86b04a3f6d19", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -337,16 +337,14 @@ pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n         None => &sess.target.target.options.relocation_model[..],\n     };\n \n-    match reloc_model_arg {\n-        \"pic\" => llvm::RelocMode::PIC,\n-        \"static\" => llvm::RelocMode::Static,\n-        \"default\" => llvm::RelocMode::Default,\n-        \"dynamic-no-pic\" => llvm::RelocMode::DynamicNoPic,\n+    match ::back::write::RELOC_MODEL_ARGS.iter().find(\n+        |&&arg| arg.0 == reloc_model_arg) {\n+        Some(x) => x.1,\n         _ => {\n             sess.err(&format!(\"{:?} is not a valid relocation mode\",\n                              sess.opts\n                                  .cg\n-                                 .relocation_model));\n+                                 .code_model));\n             sess.abort_if_errors();\n             bug!();\n         }"}, {"sha": "786aad117be48547f4ca50fae84c4879fa992d4d", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -1 +1 @@\n-Subproject commit d1cc48989b13780f21c408fef17dceb104a09c9d\n+Subproject commit 786aad117be48547f4ca50fae84c4879fa992d4d"}, {"sha": "0555a96ff24ce900d6b6f53f56021a6c02496a91", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -226,6 +226,58 @@ from_rust(LLVMRustCodeGenOptLevel level)\n   }\n }\n \n+#if LLVM_RUSTLLVM\n+/// getLongestEntryLength - Return the length of the longest entry in the table.\n+///\n+static size_t getLongestEntryLength(ArrayRef<SubtargetFeatureKV> Table) {\n+  size_t MaxLen = 0;\n+  for (auto &I : Table)\n+    MaxLen = std::max(MaxLen, std::strlen(I.Key));\n+  return MaxLen;\n+}\n+\n+extern \"C\" void\n+LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n+    const TargetMachine *Target = unwrap(TM);\n+    const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n+    const ArrayRef<SubtargetFeatureKV> CPUTable = MCInfo->getCPUTable();\n+    unsigned MaxCPULen = getLongestEntryLength(CPUTable);\n+\n+    printf(\"Available CPUs for this target:\\n\");\n+    for (auto &CPU : CPUTable)\n+        printf(\"    %-*s - %s.\\n\", MaxCPULen, CPU.Key, CPU.Desc);\n+    printf(\"\\n\");\n+}\n+\n+extern \"C\" void\n+LLVMRustPrintTargetFeatures(LLVMTargetMachineRef TM) {\n+    const TargetMachine *Target = unwrap(TM);\n+    const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n+    const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n+    unsigned MaxFeatLen = getLongestEntryLength(FeatTable);\n+\n+    printf(\"Available features for this target:\\n\");\n+    for (auto &Feature : FeatTable)\n+        printf(\"    %-*s - %s.\\n\", MaxFeatLen, Feature.Key, Feature.Desc);\n+    printf(\"\\n\");\n+\n+    printf(\"Use +feature to enable a feature, or -feature to disable it.\\n\"\n+            \"For example, rustc -C -target-cpu=mycpu -C target-feature=+feature1,-feature2\\n\\n\");\n+}\n+\n+#else\n+\n+extern \"C\" void\n+LLVMRustPrintTargetCPUs(LLVMTargetMachineRef) {\n+    printf(\"Target CPU help is not supported by this LLVM version.\\n\\n\");\n+}\n+\n+extern \"C\" void\n+LLVMRustPrintTargetFeatures(LLVMTargetMachineRef) {\n+    printf(\"Target features help is not supported by this LLVM version.\\n\\n\");\n+}\n+#endif\n+\n extern \"C\" LLVMTargetMachineRef\n LLVMRustCreateTargetMachine(const char *triple,\n                             const char *cpu,"}, {"sha": "378810a8b89fc9f0caad49ae7101c62d4241e8a0", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/1222f5d52ba0586d67c32a5bc4a3097eb9574aae/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=1222f5d52ba0586d67c32a5bc4a3097eb9574aae", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2016-07-25b\n+2016-08-07"}]}