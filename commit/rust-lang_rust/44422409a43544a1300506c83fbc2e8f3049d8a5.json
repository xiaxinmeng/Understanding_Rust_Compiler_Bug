{"sha": "44422409a43544a1300506c83fbc2e8f3049d8a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NDIyNDA5YTQzNTQ0YTEzMDA1MDZjODNmYmMyZThmMzA0OWQ4YTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-29T11:51:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-29T16:30:13Z"}, "message": "resolve: Modularize crate-local `#[macro_export] macro_rules`", "tree": {"sha": "c7ffbf3091bea422e6b33ac774acabf702348be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ffbf3091bea422e6b33ac774acabf702348be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44422409a43544a1300506c83fbc2e8f3049d8a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44422409a43544a1300506c83fbc2e8f3049d8a5", "html_url": "https://github.com/rust-lang/rust/commit/44422409a43544a1300506c83fbc2e8f3049d8a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44422409a43544a1300506c83fbc2e8f3049d8a5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75af9df71b9eea84f281cf7de72c3e3cc2b02222", "url": "https://api.github.com/repos/rust-lang/rust/commits/75af9df71b9eea84f281cf7de72c3e3cc2b02222", "html_url": "https://github.com/rust-lang/rust/commit/75af9df71b9eea84f281cf7de72c3e3cc2b02222"}], "stats": {"total": 447, "additions": 415, "deletions": 32}, "files": [{"sha": "4553a2ab5779f6e972600ee119c72812f7c22ba2", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -59,7 +59,20 @@ impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, Mark) {\n impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n-            kind: NameBindingKind::Def(self.0),\n+            kind: NameBindingKind::Def(self.0, false),\n+            vis: self.1,\n+            span: self.2,\n+            expansion: self.3,\n+        })\n+    }\n+}\n+\n+pub(crate) struct IsMacroExport;\n+\n+impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark, IsMacroExport) {\n+    fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n+        arenas.alloc_name_binding(NameBinding {\n+            kind: NameBindingKind::Def(self.0, true),\n             vis: self.1,\n             span: self.2,\n             expansion: self.3,\n@@ -772,6 +785,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_invoc(&mut self, id: ast::NodeId) -> &'b InvocationData<'b> {\n         let mark = id.placeholder_to_mark();\n         self.resolver.current_module.unresolved_invocations.borrow_mut().insert(mark);\n+        self.resolver.unresolved_invocations_macro_export.insert(mark);\n         let invocation = self.resolver.invocations[&mark];\n         invocation.module.set(self.resolver.current_module);\n         invocation.legacy_scope.set(self.legacy_scope);"}, {"sha": "77eb97b02ffd6e81a8d957fcece13a193a9d0d17", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -1117,7 +1117,7 @@ impl<'a> ToNameBinding<'a> for &'a NameBinding<'a> {\n \n #[derive(Clone, Debug)]\n enum NameBindingKind<'a> {\n-    Def(Def),\n+    Def(Def, /* is_macro_export */ bool),\n     Module(Module<'a>),\n     Import {\n         binding: &'a NameBinding<'a>,\n@@ -1161,7 +1161,7 @@ impl<'a> NameBinding<'a> {\n \n     fn def(&self) -> Def {\n         match self.kind {\n-            NameBindingKind::Def(def) => def,\n+            NameBindingKind::Def(def, _) => def,\n             NameBindingKind::Module(module) => module.def().unwrap(),\n             NameBindingKind::Import { binding, .. } => binding.def(),\n             NameBindingKind::Ambiguity { .. } => Def::Err,\n@@ -1191,8 +1191,8 @@ impl<'a> NameBinding<'a> {\n \n     fn is_variant(&self) -> bool {\n         match self.kind {\n-            NameBindingKind::Def(Def::Variant(..)) |\n-            NameBindingKind::Def(Def::VariantCtor(..)) => true,\n+            NameBindingKind::Def(Def::Variant(..), _) |\n+            NameBindingKind::Def(Def::VariantCtor(..), _) => true,\n             _ => false,\n         }\n     }\n@@ -1241,7 +1241,7 @@ impl<'a> NameBinding<'a> {\n \n     fn is_macro_def(&self) -> bool {\n         match self.kind {\n-            NameBindingKind::Def(Def::Macro(..)) => true,\n+            NameBindingKind::Def(Def::Macro(..), _) => true,\n             _ => false,\n         }\n     }\n@@ -1397,7 +1397,7 @@ pub struct Resolver<'a> {\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     macro_defs: FxHashMap<Mark, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n-    macro_exports: Vec<Export>,\n+    macro_exports: Vec<Export>, // FIXME: Remove when `use_extern_macros` is stabilized\n     pub whitelisted_legacy_custom_derives: Vec<Name>,\n     pub found_unresolved_macro: bool,\n \n@@ -1427,6 +1427,9 @@ pub struct Resolver<'a> {\n \n     /// Only supposed to be used by rustdoc, otherwise should be false.\n     pub ignore_extern_prelude_feature: bool,\n+\n+    /// Macro invocations in the whole crate that can expand into a `#[macro_export] macro_rules`.\n+    unresolved_invocations_macro_export: FxHashSet<Mark>,\n }\n \n /// Nothing really interesting here, it just provides memory for the rest of the crate.\n@@ -1701,7 +1704,7 @@ impl<'a> Resolver<'a> {\n \n             arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n-                kind: NameBindingKind::Def(Def::Err),\n+                kind: NameBindingKind::Def(Def::Err, false),\n                 expansion: Mark::root(),\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n@@ -1731,6 +1734,7 @@ impl<'a> Resolver<'a> {\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n             ignore_extern_prelude_feature: false,\n+            unresolved_invocations_macro_export: FxHashSet(),\n         }\n     }\n "}, {"sha": "1d42ad4e4902e2336302c376237cfb8d38fa419e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -11,7 +11,7 @@\n use {AmbiguityError, CrateLint, Resolver, ResolutionError, resolve_error};\n use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult};\n use Namespace::{self, MacroNS};\n-use build_reduced_graph::BuildReducedGraphVisitor;\n+use build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex,\n                          DefIndexAddressSpace};\n@@ -193,7 +193,9 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n         self.current_module = invocation.module.get();\n         self.current_module.unresolved_invocations.borrow_mut().remove(&mark);\n+        self.unresolved_invocations_macro_export.remove(&mark);\n         self.current_module.unresolved_invocations.borrow_mut().extend(derives);\n+        self.unresolved_invocations_macro_export.extend(derives);\n         for &derive in derives {\n             self.invocations.insert(derive, invocation);\n         }\n@@ -215,7 +217,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let kind = ext.kind();\n         self.macro_map.insert(def_id, ext);\n         let binding = self.arenas.alloc_name_binding(NameBinding {\n-            kind: NameBindingKind::Def(Def::Macro(def_id, kind)),\n+            kind: NameBindingKind::Def(Def::Macro(def_id, kind), false),\n             span: DUMMY_SP,\n             vis: ty::Visibility::Invisible,\n             expansion: Mark::root(),\n@@ -711,12 +713,15 @@ impl<'a> Resolver<'a> {\n \n             match (legacy_resolution, resolution) {\n                 (Some(MacroBinding::Legacy(legacy_binding)), Ok(MacroBinding::Modern(binding))) => {\n-                    let msg1 = format!(\"`{}` could refer to the macro defined here\", ident);\n-                    let msg2 = format!(\"`{}` could also refer to the macro imported here\", ident);\n-                    self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", ident))\n-                        .span_note(legacy_binding.span, &msg1)\n-                        .span_note(binding.span, &msg2)\n-                        .emit();\n+                    if legacy_binding.def_id != binding.def_ignoring_ambiguity().def_id() {\n+                        let msg1 = format!(\"`{}` could refer to the macro defined here\", ident);\n+                        let msg2 =\n+                            format!(\"`{}` could also refer to the macro imported here\", ident);\n+                        self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", ident))\n+                            .span_note(legacy_binding.span, &msg1)\n+                            .span_note(binding.span, &msg2)\n+                            .emit();\n+                    }\n                 },\n                 (None, Err(_)) => {\n                     assert!(def.is_none());\n@@ -850,12 +855,19 @@ impl<'a> Resolver<'a> {\n             let def = Def::Macro(def_id, MacroKind::Bang);\n             self.all_macros.insert(ident.name, def);\n             if attr::contains_name(&item.attrs, \"macro_export\") {\n-                self.macro_exports.push(Export {\n-                    ident: ident.modern(),\n-                    def: def,\n-                    vis: ty::Visibility::Public,\n-                    span: item.span,\n-                });\n+                if self.use_extern_macros {\n+                    let module = self.graph_root;\n+                    let vis = ty::Visibility::Public;\n+                    self.define(module, ident, MacroNS,\n+                                (def, vis, item.span, expansion, IsMacroExport));\n+                } else {\n+                    self.macro_exports.push(Export {\n+                        ident: ident.modern(),\n+                        def: def,\n+                        vis: ty::Visibility::Public,\n+                        span: item.span,\n+                    });\n+                }\n             } else {\n                 self.unused_macros.insert(def_id);\n             }"}, {"sha": "c83fcf65c40f3fd7f1b75657b6da7264feed95f1", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -211,7 +211,9 @@ impl<'a> Resolver<'a> {\n         // if it cannot be shadowed by some new item/import expanded from a macro.\n         // This happens either if there are no unexpanded macros, or expanded names cannot\n         // shadow globs (that happens in macro namespace or with restricted shadowing).\n-        let unexpanded_macros = !module.unresolved_invocations.borrow().is_empty();\n+        let unexpanded_macros = !module.unresolved_invocations.borrow().is_empty() ||\n+                                (ns == MacroNS && ptr::eq(module, self.graph_root) &&\n+                                 !self.unresolved_invocations_macro_export.is_empty());\n         if let Some(binding) = resolution.binding {\n             if !unexpanded_macros || ns == MacroNS || restricted_shadowing {\n                 return check_usable(self, binding);\n@@ -363,6 +365,18 @@ impl<'a> Resolver<'a> {\n                         resolution.binding = Some(binding);\n                         resolution.shadowed_glob = Some(old_binding);\n                     }\n+                } else if let (&NameBindingKind::Def(_, true), &NameBindingKind::Def(_, true)) =\n+                        (&old_binding.kind, &binding.kind) {\n+\n+                    this.session.buffer_lint_with_diagnostic(\n+                        DUPLICATE_MACRO_EXPORTS,\n+                        CRATE_NODE_ID,\n+                        binding.span,\n+                        &format!(\"a macro named `{}` has already been exported\", ident),\n+                        BuiltinLintDiagnostics::DuplicatedMacroExports(\n+                            ident, old_binding.span, binding.span));\n+\n+                    resolution.binding = Some(binding);\n                 } else {\n                     return Err(old_binding);\n                 }\n@@ -766,7 +780,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                                     match binding.kind {\n                                         // Never suggest the name that has binding error\n                                         // i.e. the name that cannot be previously resolved\n-                                        NameBindingKind::Def(Def::Err) => return None,\n+                                        NameBindingKind::Def(Def::Err, _) => return None,\n                                         _ => Some(&i.name),\n                                     }\n                                 },"}, {"sha": "68aced7f979c952e0fd86eccbd40c5aeeaf52f1e", "filename": "src/test/run-pass/auxiliary/issue_38715-modern.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715-modern.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(use_extern_macros)]\n+#![allow(duplicate_macro_exports)]\n+\n+#[macro_export]\n+macro_rules! foo_modern { ($i:ident) => {} }\n+\n+#[macro_export]\n+macro_rules! foo_modern { () => {} }"}, {"sha": "b158234eb1154d98d0b872eefaa0fb5f97f1da10", "filename": "src/test/run-pass/issue-38715.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Frun-pass%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Frun-pass%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38715.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -9,12 +9,16 @@\n // except according to those terms.\n \n // aux-build:issue_38715.rs\n+// aux-build:issue_38715-modern.rs\n \n // Test that `#[macro_export] macro_rules!` shadow earlier `#[macro_export] macro_rules!`\n \n #[macro_use]\n extern crate issue_38715;\n+#[macro_use]\n+extern crate issue_38715_modern;\n \n fn main() {\n     foo!();\n+    foo_modern!();\n }"}, {"sha": "d8159bff567ad18cf7bb6178ce9602e8188cd255", "filename": "src/test/ui/duplicate-check-macro-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -13,6 +13,6 @@\n pub use std::panic;\n \n #[macro_export]\n-macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n+macro_rules! panic { () => {} } //~ ERROR the name `panic` is defined multiple times\n \n fn main() {}"}, {"sha": "651e984b274528f4ff5a4aff47b032db88c30789", "filename": "src/test/ui/duplicate-check-macro-exports.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -1,14 +1,18 @@\n-error: a macro named `panic` has already been exported\n+error[E0255]: the name `panic` is defined multiple times\n   --> $DIR/duplicate-check-macro-exports.rs:16:1\n    |\n-LL | macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `panic` already exported\n+LL | pub use std::panic;\n+   |         ---------- previous import of the macro `panic` here\n+...\n+LL | macro_rules! panic { () => {} } //~ ERROR the name `panic` is defined multiple times\n+   | ^^^^^^^^^^^^^^^^^^ `panic` redefined here\n    |\n-note: previous macro export here\n-  --> $DIR/duplicate-check-macro-exports.rs:13:9\n+   = note: `panic` must be defined only once in the macro namespace of this module\n+help: You can use `as` to change the binding name of the import\n    |\n-LL | pub use std::panic;\n-   |         ^^^^^^^^^^\n+LL | pub use std::panic as other_panic;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0255`."}, {"sha": "445344732f7bd6da0f530d7234d7a5380078d312", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro)]\n+\n+macro_rules! define_exported { () => {\n+    #[macro_export]\n+    macro_rules! exported {\n+        () => ()\n+    }\n+}}\n+macro_rules! define_panic { () => {\n+    #[macro_export]\n+    macro_rules! panic {\n+        () => ()\n+    }\n+}}\n+macro_rules! define_include { () => {\n+    #[macro_export]\n+    macro_rules! include {\n+        () => ()\n+    }\n+}}\n+\n+use inner1::*;\n+\n+mod inner1 {\n+    pub macro exported() {}\n+}\n+\n+exported!(); //~ ERROR `exported` is ambiguous\n+\n+mod inner2 {\n+    define_exported!();\n+}\n+\n+fn main() {\n+    panic!(); //~ ERROR `panic` is ambiguous\n+              //~^ ERROR `panic` is ambiguous\n+}\n+\n+mod inner3 {\n+    define_panic!();\n+}\n+\n+mod inner4 {\n+    define_include!();\n+}\n+\n+include!(); //~ ERROR `include` is ambiguous"}, {"sha": "e9a81e7ae4c4cbeb5d1d615879b9bc305a2c4ca7", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -0,0 +1,84 @@\n+error[E0659]: `exported` is ambiguous\n+  --> $DIR/local-modularized-tricky-fail-1.rs:38:1\n+   |\n+LL | exported!(); //~ ERROR `exported` is ambiguous\n+   | ^^^^^^^^\n+   |\n+note: `exported` could refer to the name defined here\n+  --> $DIR/local-modularized-tricky-fail-1.rs:15:5\n+   |\n+LL | /     macro_rules! exported {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |       define_exported!();\n+   |       ------------------- in this macro invocation\n+note: `exported` could also refer to the name imported here\n+  --> $DIR/local-modularized-tricky-fail-1.rs:32:5\n+   |\n+LL | use inner1::*;\n+   |     ^^^^^^^^^\n+   = note: macro-expanded macros do not shadow\n+\n+error[E0659]: `include` is ambiguous\n+  --> $DIR/local-modularized-tricky-fail-1.rs:57:1\n+   |\n+LL | include!(); //~ ERROR `include` is ambiguous\n+   | ^^^^^^^\n+   |\n+note: `include` could refer to the name defined here\n+  --> $DIR/local-modularized-tricky-fail-1.rs:27:5\n+   |\n+LL | /     macro_rules! include {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |       define_include!();\n+   |       ------------------ in this macro invocation\n+   = note: `include` is also a builtin macro\n+   = note: macro-expanded macros do not shadow\n+\n+error[E0659]: `panic` is ambiguous\n+  --> $DIR/local-modularized-tricky-fail-1.rs:45:5\n+   |\n+LL |     panic!(); //~ ERROR `panic` is ambiguous\n+   |     ^^^^^\n+   |\n+note: `panic` could refer to the name defined here\n+  --> $DIR/local-modularized-tricky-fail-1.rs:21:5\n+   |\n+LL | /     macro_rules! panic {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |       define_panic!();\n+   |       ---------------- in this macro invocation\n+   = note: `panic` is also a builtin macro\n+   = note: macro-expanded macros do not shadow\n+\n+error[E0659]: `panic` is ambiguous\n+  --> $DIR/local-modularized-tricky-fail-1.rs:45:5\n+   |\n+LL |     panic!(); //~ ERROR `panic` is ambiguous\n+   |     ^^^^^^^^^\n+   |\n+note: `panic` could refer to the name defined here\n+  --> $DIR/local-modularized-tricky-fail-1.rs:21:5\n+   |\n+LL | /     macro_rules! panic {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |       define_panic!();\n+   |       ---------------- in this macro invocation\n+   = note: `panic` is also a builtin macro\n+   = note: macro-expanded macros do not shadow\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "afdebc4533ff6370dff3ef88ead1b366633b2ddb", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// `#[macro_export] macro_rules` that doen't originate from macro expansions can be placed\n+// into the root module soon enough to act as usual items and shadow globs and preludes.\n+\n+#![feature(decl_macro)]\n+\n+// `macro_export` shadows globs\n+use inner1::*;\n+\n+mod inner1 {\n+    pub macro exported() {}\n+}\n+\n+exported!();\n+\n+mod deep {\n+    fn deep() {\n+        type Deeper = [u8; {\n+            #[macro_export]\n+            macro_rules! exported {\n+                () => ( struct \u0411; ) //~ ERROR non-ascii idents are not fully supported\n+            }\n+\n+            0\n+        }];\n+    }\n+}\n+\n+// `macro_export` shadows std prelude\n+fn main() {\n+    panic!();\n+}\n+\n+mod inner3 {\n+    #[macro_export]\n+    macro_rules! panic {\n+        () => ( struct \u0413; ) //~ ERROR non-ascii idents are not fully supported\n+    }\n+}\n+\n+// `macro_export` shadows builtin macros\n+include!();\n+\n+mod inner4 {\n+    #[macro_export]\n+    macro_rules! include {\n+        () => ( struct \u0414; ) //~ ERROR non-ascii idents are not fully supported\n+    }\n+}"}, {"sha": "5681dd59628500fcfc8546621e67484ec7f4bdc2", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -0,0 +1,36 @@\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/local-modularized-tricky-fail-2.rs:30:32\n+   |\n+LL | exported!();\n+   | ------------ in this macro invocation\n+...\n+LL |                 () => ( struct \u0411; ) //~ ERROR non-ascii idents are not fully supported\n+   |                                ^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/local-modularized-tricky-fail-2.rs:46:24\n+   |\n+LL |     panic!();\n+   |     --------- in this macro invocation\n+...\n+LL |         () => ( struct \u0413; ) //~ ERROR non-ascii idents are not fully supported\n+   |                        ^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/local-modularized-tricky-fail-2.rs:56:24\n+   |\n+LL | include!();\n+   | ----------- in this macro invocation\n+...\n+LL |         () => ( struct \u0414; ) //~ ERROR non-ascii idents are not fully supported\n+   |                        ^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "04df357e106cba97d2693387b8df3a2f51a88b25", "filename": "src/test/ui/imports/local-modularized-tricky-pass.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(use_extern_macros)]\n+\n+macro_rules! define_exported { () => {\n+    #[macro_export]\n+    macro_rules! exported {\n+        () => ()\n+    }\n+}}\n+\n+mod inner1 {\n+    use super::*;\n+    exported!();\n+}\n+\n+mod inner2 {\n+    define_exported!();\n+}\n+\n+fn main() {}"}, {"sha": "a5297c54c9e0275160e972b90a048c969420037d", "filename": "src/test/ui/imports/local-modularized.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44422409a43544a1300506c83fbc2e8f3049d8a5/src%2Ftest%2Fui%2Fimports%2Flocal-modularized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized.rs?ref=44422409a43544a1300506c83fbc2e8f3049d8a5", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(use_extern_macros)]\n+\n+#[macro_export(local_inner_macros)]\n+macro_rules! dollar_crate_exported {\n+    (1) => { $crate::exported!(); };\n+    (2) => { exported!(); };\n+}\n+\n+// Before `exported` is defined\n+exported!();\n+\n+mod inner {\n+\n+    ::exported!();\n+    crate::exported!();\n+    dollar_crate_exported!(1);\n+    dollar_crate_exported!(2);\n+\n+    mod inner_inner {\n+        #[macro_export]\n+        macro_rules! exported {\n+            () => ()\n+        }\n+    }\n+\n+    // After `exported` is defined\n+    ::exported!();\n+    crate::exported!();\n+    dollar_crate_exported!(1);\n+    dollar_crate_exported!(2);\n+}\n+\n+exported!();\n+\n+fn main() {}"}]}