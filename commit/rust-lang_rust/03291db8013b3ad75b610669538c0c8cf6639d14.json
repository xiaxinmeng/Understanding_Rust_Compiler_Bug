{"sha": "03291db8013b3ad75b610669538c0c8cf6639d14", "node_id": "C_kwDOAAsO6NoAKDAzMjkxZGI4MDEzYjNhZDc1YjYxMDY2OTUzOGMwYzhjZjY2MzlkMTQ", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2022-01-02T23:34:33Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2022-01-02T23:34:33Z"}, "message": "Allow adding partially resolved types", "tree": {"sha": "b19fb653b41dea608a5a4752691758816781848e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b19fb653b41dea608a5a4752691758816781848e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03291db8013b3ad75b610669538c0c8cf6639d14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03291db8013b3ad75b610669538c0c8cf6639d14", "html_url": "https://github.com/rust-lang/rust/commit/03291db8013b3ad75b610669538c0c8cf6639d14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03291db8013b3ad75b610669538c0c8cf6639d14/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1099aaa5749afe3d6dc8f196ef50ffc07fe3d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1099aaa5749afe3d6dc8f196ef50ffc07fe3d68", "html_url": "https://github.com/rust-lang/rust/commit/e1099aaa5749afe3d6dc8f196ef50ffc07fe3d68"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "95d1550afc33cd366b836411b47e7a6ca1618985", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/03291db8013b3ad75b610669538c0c8cf6639d14/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03291db8013b3ad75b610669538c0c8cf6639d14/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=03291db8013b3ad75b610669538c0c8cf6639d14", "patch": "@@ -567,7 +567,27 @@ impl HirDisplay for Ty {\n                     };\n                     if !parameters_to_write.is_empty() {\n                         write!(f, \"<\")?;\n-                        f.write_joined(parameters_to_write, \", \")?;\n+\n+                        if f.display_target.is_source_code() {\n+                            let mut first = true;\n+                            for generic_arg in parameters_to_write {\n+                                if !first {\n+                                    write!(f, \", \")?;\n+                                }\n+                                first = false;\n+\n+                                if generic_arg.ty(Interner).map(|ty| ty.kind(Interner))\n+                                    == Some(&TyKind::Error)\n+                                {\n+                                    write!(f, \"_\")?;\n+                                } else {\n+                                    generic_arg.hir_fmt(f)?;\n+                                }\n+                            }\n+                        } else {\n+                            f.write_joined(parameters_to_write, \", \")?;\n+                        }\n+\n                         write!(f, \">\")?;\n                     }\n                 }"}, {"sha": "d7e1be900ffb0c9658ad93170dccfd5b767a7616", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/03291db8013b3ad75b610669538c0c8cf6639d14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03291db8013b3ad75b610669538c0c8cf6639d14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=03291db8013b3ad75b610669538c0c8cf6639d14", "patch": "@@ -60,8 +60,8 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     }\n     .adjusted();\n \n-    // Unresolved or unnameable types can't be annotated\n-    if ty.contains_unknown() || ty.is_closure() {\n+    // Fully unresolved or unnameable types can't be annotated\n+    if (ty.contains_unknown() && ty.type_arguments().count() == 0) || ty.is_closure() {\n         cov_mark::hit!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         return None;\n     }\n@@ -139,11 +139,34 @@ fn f() {\n     }\n \n     #[test]\n-    fn add_explicit_type_not_applicable_unresolved() {\n+    fn add_explicit_type_not_applicable_for_fully_unresolved() {\n         cov_mark::check!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         check_assist_not_applicable(add_explicit_type, r#\"fn f() { let a$0 = None; }\"#);\n     }\n \n+    #[test]\n+    fn add_explicit_type_applicable_for_partially_unresolved() {\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+        struct Vec<T, V> { t: T, v: V }\n+        impl<T> Vec<T, Vec<ZZZ, i32>> {\n+            fn new() -> Self {\n+                panic!()\n+            }\n+        }\n+        fn f() { let a$0 = Vec::new(); }\"#,\n+            r#\"\n+        struct Vec<T, V> { t: T, v: V }\n+        impl<T> Vec<T, Vec<ZZZ, i32>> {\n+            fn new() -> Self {\n+                panic!()\n+            }\n+        }\n+        fn f() { let a: Vec<_, Vec<_, i32>> = Vec::new(); }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn add_explicit_type_not_applicable_closure_expr() {\n         check_assist_not_applicable(add_explicit_type, r#\"fn f() { let a$0 = || {}; }\"#);"}]}