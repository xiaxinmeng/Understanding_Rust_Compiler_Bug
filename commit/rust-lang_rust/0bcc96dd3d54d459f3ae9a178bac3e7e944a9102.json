{"sha": "0bcc96dd3d54d459f3ae9a178bac3e7e944a9102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiY2M5NmRkM2Q1NGQ0NTlmM2FlOWExNzhiYWMzZTdlOTQ0YTkxMDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-16T06:25:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-16T06:25:00Z"}, "message": "Rollup merge of #76641 - nox:pointee-random-stuff, r=eddyb\n\nSome cleanup changes and commenting\n\nr? @nikomatsakis\nCc @eddyb", "tree": {"sha": "34679c7badd783578305ee9f46573a4dd4c76c4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34679c7badd783578305ee9f46573a4dd4c76c4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYa+9CRBK7hj4Ov3rIwAAdHIIAEpkQW5XNlN5O/q5HHHBIrO3\nXYulSruuQYpTAtJ3lh2o8vrD29U6nQP/Gej4XgAyOInV/Npu7Lh9Ol3TYY0KlT2a\npQfWuRXL5QQjJECQKkGI4Ay7m+vwPa3wxf6ya2DUxhc4B+ao7pv3X4l4KLOtuAJ9\nWMPox4hl2HQ2MvLVNvG74qqFj6jxFekhGoOGWLPgNi4b9CrwrgRWJz2mIkLvYm7K\niVyqPr0bXE2jWvmohJH5878JNV2xyNaz9mzQ8Mox7xiR0NYaes/HblKkeTS0a/BG\n2yBFtkVTseLE42NvCy9YzES+6kKB9D/3s+Amn5sOIW8Eur3FYMtC1YDO6CI9yQU=\n=wu9G\n-----END PGP SIGNATURE-----\n", "payload": "tree 34679c7badd783578305ee9f46573a4dd4c76c4d\nparent 1ff91d6d59db32d7c20df4d384cd84addbc0067e\nparent caf6c92d19216d75bf248643a11df77a598293e7\nauthor Ralf Jung <post@ralfj.de> 1600237500 +0200\ncommitter GitHub <noreply@github.com> 1600237500 +0200\n\nRollup merge of #76641 - nox:pointee-random-stuff, r=eddyb\n\nSome cleanup changes and commenting\n\nr? @nikomatsakis\nCc @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102", "html_url": "https://github.com/rust-lang/rust/commit/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ff91d6d59db32d7c20df4d384cd84addbc0067e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff91d6d59db32d7c20df4d384cd84addbc0067e", "html_url": "https://github.com/rust-lang/rust/commit/1ff91d6d59db32d7c20df4d384cd84addbc0067e"}, {"sha": "caf6c92d19216d75bf248643a11df77a598293e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf6c92d19216d75bf248643a11df77a598293e7", "html_url": "https://github.com/rust-lang/rust/commit/caf6c92d19216d75bf248643a11df77a598293e7"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "825221c22a8c100e5213ef490800cd84d62971fc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=0bcc96dd3d54d459f3ae9a178bac3e7e944a9102", "patch": "@@ -2280,6 +2280,12 @@ impl<'tcx> TyS<'tcx> {\n     ///\n     /// Returning true means the type is known to be sized. Returning\n     /// `false` means nothing -- could be sized, might not be.\n+    ///\n+    /// Note that we could never rely on the fact that a type such as `[_]` is\n+    /// trivially `!Sized` because we could be in a type environment with a\n+    /// bound such as `[_]: Copy`. A function with such a bound obviously never\n+    /// can be called, but that doesn't mean it shouldn't typecheck. This is why\n+    /// this method doesn't return `Option<bool>`.\n     pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {\n         match self.kind() {\n             ty::Infer(ty::IntVar(_) | ty::FloatVar(_))"}, {"sha": "bda4351b2f2d8437623583a2d208eae41526a296", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=0bcc96dd3d54d459f3ae9a178bac3e7e944a9102", "patch": "@@ -1512,12 +1512,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // avoid inundating the user with unnecessary errors, but we now\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n-                if self\n-                    .tcx\n-                    .lang_items()\n-                    .sized_trait()\n-                    .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n-                {\n+                if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n                     self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0282).emit();\n                     return;\n                 }"}, {"sha": "2fad54013ad5bebc5d836fb7963b129f98f8658d", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=0bcc96dd3d54d459f3ae9a178bac3e7e944a9102", "patch": "@@ -110,25 +110,15 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .map(|i| chalk_ir::AssocTypeId(i.def_id))\n             .collect();\n \n-        let well_known = if self\n-            .interner\n-            .tcx\n-            .lang_items()\n-            .sized_trait()\n-            .map(|t| def_id == t)\n-            .unwrap_or(false)\n-        {\n+        let well_known = if self.interner.tcx.lang_items().sized_trait() == Some(def_id) {\n             Some(chalk_solve::rust_ir::WellKnownTrait::Sized)\n-        } else if self.interner.tcx.lang_items().copy_trait().map(|t| def_id == t).unwrap_or(false)\n-        {\n+        } else if self.interner.tcx.lang_items().copy_trait() == Some(def_id) {\n             Some(chalk_solve::rust_ir::WellKnownTrait::Copy)\n-        } else if self.interner.tcx.lang_items().clone_trait().map(|t| def_id == t).unwrap_or(false)\n-        {\n+        } else if self.interner.tcx.lang_items().clone_trait() == Some(def_id) {\n             Some(chalk_solve::rust_ir::WellKnownTrait::Clone)\n-        } else if self.interner.tcx.lang_items().drop_trait().map(|t| def_id == t).unwrap_or(false)\n-        {\n+        } else if self.interner.tcx.lang_items().drop_trait() == Some(def_id) {\n             Some(chalk_solve::rust_ir::WellKnownTrait::Drop)\n-        } else if self.interner.tcx.lang_items().fn_trait().map(|t| def_id == t).unwrap_or(false) {\n+        } else if self.interner.tcx.lang_items().fn_trait() == Some(def_id) {\n             Some(chalk_solve::rust_ir::WellKnownTrait::Fn)\n         } else if self\n             .interner"}, {"sha": "46ba14aa67e60d7fb35ffd59ce961ec71d569451", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcc96dd3d54d459f3ae9a178bac3e7e944a9102/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0bcc96dd3d54d459f3ae9a178bac3e7e944a9102", "patch": "@@ -840,7 +840,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         let mut where_predicates =\n             where_predicates.into_iter().flat_map(|p| p.clean(cx)).collect::<Vec<_>>();\n \n-        // Type parameters and have a Sized bound by default unless removed with\n+        // Type parameters have a Sized bound by default unless removed with\n         // ?Sized. Scan through the predicates and mark any type parameter with\n         // a Sized bound, removing the bounds as we find them.\n         //"}]}