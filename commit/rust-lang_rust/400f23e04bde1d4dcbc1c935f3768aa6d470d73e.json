{"sha": "400f23e04bde1d4dcbc1c935f3768aa6d470d73e", "node_id": "C_kwDOAAsO6NoAKDQwMGYyM2UwNGJkZTFkNGRjYmMxYzkzNWYzNzY4YWE2ZDQ3MGQ3M2U", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-30T22:06:16Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-03-30T23:01:23Z"}, "message": "Simplify `make_run` for `test::Crate` by introducing `crate_paths` instead of calculating them after the fact", "tree": {"sha": "985ef133ded2ff27ee93fa5fc92b981ca97d30a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/985ef133ded2ff27ee93fa5fc92b981ca97d30a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/400f23e04bde1d4dcbc1c935f3768aa6d470d73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/400f23e04bde1d4dcbc1c935f3768aa6d470d73e", "html_url": "https://github.com/rust-lang/rust/commit/400f23e04bde1d4dcbc1c935f3768aa6d470d73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/400f23e04bde1d4dcbc1c935f3768aa6d470d73e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11909e3588319235e28e99294e17cca11db1d7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11909e3588319235e28e99294e17cca11db1d7e2", "html_url": "https://github.com/rust-lang/rust/commit/11909e3588319235e28e99294e17cca11db1d7e2"}], "stats": {"total": 45, "additions": 14, "deletions": 31}, "files": [{"sha": "3a256bb50f215164f5982518f9da9d088a30ae7a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/400f23e04bde1d4dcbc1c935f3768aa6d470d73e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f23e04bde1d4dcbc1c935f3768aa6d470d73e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=400f23e04bde1d4dcbc1c935f3768aa6d470d73e", "patch": "@@ -301,7 +301,9 @@ pub struct Build {\n     ar: HashMap<TargetSelection, PathBuf>,\n     ranlib: HashMap<TargetSelection, PathBuf>,\n     // Miscellaneous\n+    // allow bidirectional lookups: both name -> path and path -> name\n     crates: HashMap<Interned<String>, Crate>,\n+    crate_paths: HashMap<PathBuf, Interned<String>>,\n     is_sudo: bool,\n     ci_env: CiEnv,\n     delayed_failures: RefCell<Vec<String>>,\n@@ -491,6 +493,7 @@ impl Build {\n             ar: HashMap::new(),\n             ranlib: HashMap::new(),\n             crates: HashMap::new(),\n+            crate_paths: HashMap::new(),\n             is_sudo,\n             ci_env: CiEnv::current(),\n             delayed_failures: RefCell::new(Vec::new()),"}, {"sha": "e193e70a0c417452b3649571c2cb990be23727db", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/400f23e04bde1d4dcbc1c935f3768aa6d470d73e/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f23e04bde1d4dcbc1c935f3768aa6d470d73e/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=400f23e04bde1d4dcbc1c935f3768aa6d470d73e", "patch": "@@ -49,7 +49,11 @@ pub fn build(build: &mut Build) {\n                 .filter(|dep| dep.source.is_none())\n                 .map(|dep| INTERNER.intern_string(dep.name))\n                 .collect();\n-            build.crates.insert(name, Crate { name, deps, path });\n+            let krate = Crate { name, deps, path };\n+            let relative_path = krate.local_path(build);\n+            build.crates.insert(name, krate);\n+            let existing_path = build.crate_paths.insert(relative_path, name);\n+            assert!(existing_path.is_none(), \"multiple crates with the same path\");\n         }\n     }\n }"}, {"sha": "83561ffdb36a089694c727cba84082913bf39087", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/400f23e04bde1d4dcbc1c935f3768aa6d470d73e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f23e04bde1d4dcbc1c935f3768aa6d470d73e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=400f23e04bde1d4dcbc1c935f3768aa6d470d73e", "patch": "@@ -21,7 +21,6 @@ use crate::native;\n use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t};\n-use crate::Crate as CargoCrate;\n use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n@@ -1901,19 +1900,10 @@ impl Step for CrateLibrustc {\n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n         let compiler = builder.compiler(builder.top_stage, run.build_triple());\n+        let krate = builder.crate_paths[&run.path];\n+        let test_kind = builder.kind.into();\n \n-        for krate in builder.in_tree_crates(\"rustc-main\", Some(run.target)) {\n-            if krate.path.ends_with(&run.path) {\n-                let test_kind = builder.kind.into();\n-\n-                builder.ensure(CrateLibrustc {\n-                    compiler,\n-                    target: run.target,\n-                    test_kind,\n-                    krate: krate.name,\n-                });\n-            }\n-        }\n+        builder.ensure(CrateLibrustc { compiler, target: run.target, test_kind, krate });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -1947,24 +1937,10 @@ impl Step for Crate {\n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n         let compiler = builder.compiler(builder.top_stage, run.build_triple());\n+        let test_kind = builder.kind.into();\n+        let krate = builder.crate_paths[&run.path];\n \n-        let make = |mode: Mode, krate: &CargoCrate| {\n-            let test_kind = builder.kind.into();\n-\n-            builder.ensure(Crate {\n-                compiler,\n-                target: run.target,\n-                mode,\n-                test_kind,\n-                krate: krate.name,\n-            });\n-        };\n-\n-        for krate in builder.in_tree_crates(\"test\", Some(run.target)) {\n-            if krate.path.ends_with(&run.path) {\n-                make(Mode::Std, krate);\n-            }\n-        }\n+        builder.ensure(Crate { compiler, target: run.target, mode: Mode::Std, test_kind, krate });\n     }\n \n     /// Runs all unit tests plus documentation tests for a given crate defined"}]}