{"sha": "27380a3eddd57a65744416e308408e4f41e57f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MzgwYTNlZGRkNTdhNjU3NDQ0MTZlMzA4NDA4ZTRmNDFlNTdmNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-30T12:32:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-30T12:32:47Z"}, "message": "Auto merge of #31305 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #31099, #31244, #31280, #31290, #31292, #31294, #31295, #31296\n- Failed merges:", "tree": {"sha": "c5462e899c0964e722672ab1dcfcdc89e99a0993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5462e899c0964e722672ab1dcfcdc89e99a0993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27380a3eddd57a65744416e308408e4f41e57f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27380a3eddd57a65744416e308408e4f41e57f4b", "html_url": "https://github.com/rust-lang/rust/commit/27380a3eddd57a65744416e308408e4f41e57f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27380a3eddd57a65744416e308408e4f41e57f4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16fbe79ac29fc5ce604c89736352ca2765c7d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/b16fbe79ac29fc5ce604c89736352ca2765c7d78", "html_url": "https://github.com/rust-lang/rust/commit/b16fbe79ac29fc5ce604c89736352ca2765c7d78"}, {"sha": "f66d3c55666806c48ca8f3755e09d4278b66b9ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66d3c55666806c48ca8f3755e09d4278b66b9ab", "html_url": "https://github.com/rust-lang/rust/commit/f66d3c55666806c48ca8f3755e09d4278b66b9ab"}], "stats": {"total": 504, "additions": 449, "deletions": 55}, "files": [{"sha": "293f585d105cbd5cd39cfc9f290fcdec5f2eb749", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -9,7 +9,7 @@ and documentation.\n \n Read [\"Installing Rust\"] from [The Book].\n \n-[\"Installing Rust\"]: https://doc.rust-lang.org/book/installing-rust.html\n+[\"Installing Rust\"]: https://doc.rust-lang.org/book/getting-started.html#installing-rust\n [The Book]: https://doc.rust-lang.org/book/index.html\n \n ## Building from Source"}, {"sha": "5ff06f2f810756b1e83ba629db03a72ce2462a4e", "filename": "RELEASES.md", "status": "modified", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -1,3 +1,355 @@\n+Version 1.7.0 (2016-03-03)\n+==========================\n+\n+Language\n+--------\n+\n+* Soundness fixes to the interactions between associated types and\n+  lifetimes, specified in [RFC 1214], [now generate errors][1.7sf] for\n+  code that violates the new rules. This is a significant change that\n+  is known to break existing code, so it has emitted warnings for the\n+  new error cases since 1.4 to give crate authors time to adapt. The\n+  details of what is changing are subtle; read the RFC for more.\n+\n+Libraries\n+---------\n+\n+* Stabilized APIs:\n+  [`Path::strip_prefix`][] (renamed from relative_from),\n+  [`path::StripPrefixError`][] (new error type returned from strip_prefix),\n+  [`Ipv4Addr::is_loopback`],\n+  [`Ipv4Addr::is_private`],\n+  [`Ipv4Addr::is_link_local`],\n+  [`Ipv4Addr::is_multicast`],\n+  [`Ipv4Addr::is_broadcast`],\n+  [`Ipv4Addr::is_documentation`],\n+  [`Ipv6Addr::is_unspecified`],\n+  [`Ipv6Addr::is_loopback`],\n+  [`Ipv6Addr::is_multicast`],\n+  [`Vec::as_slice`],\n+  [`Vec::as_mut_slice`],\n+  [`String::as_str`],\n+  [`String::as_mut_str`],\n+  `<[T]>::`[`clone_from_slice`], which now requires the two slices to\n+  be the same length\n+  `<[T]>::`[`sort_by_key`],\n+  [`i32::checked_rem`],\n+  [`i32::checked_neg`],\n+  [`i32::checked_shl`],\n+  [`i32::checked_shr`],\n+  [`i32::saturating_mul`],\n+  [`i32::overflowing_add`],\n+  [`i32::overflowing_sub`],\n+  [`i32::overflowing_mul`],\n+  [`i32::overflowing_div`],\n+  [`i32::overflowing_rem`],\n+  [`i32::overflowing_neg`],\n+  [`i32::overflowing_shl`],\n+  [`i32::overflowing_shr`],\n+  [`u32::checked_rem`],\n+  [`u32::checked_neg`],\n+  [`u32::checked_shl`],\n+  [`u32::checked_shl`],\n+  [`u32::saturating_mul`],\n+  [`u32::overflowing_add`],\n+  [`u32::overflowing_sub`],\n+  [`u32::overflowing_mul`],\n+  [`u32::overflowing_div`],\n+  [`u32::overflowing_rem`],\n+  [`u32::overflowing_neg`],\n+  [`u32::overflowing_shl`],\n+  [`u32::overflowing_shr`],\n+  checked, saturated, and overflowing operations for other primitive types,\n+  [`ffi::IntoStringError`],\n+  [`CString::into_string`],\n+  [`CString::into_bytes`],\n+  [`CString::into_bytes_with_nul`],\n+  `From<CString> for Vec<u8>`,\n+  [`IntoStringError::into_cstring`],\n+  [`IntoStringError::utf8_error`],\n+  `Error for IntoStringError`.\n+* [Validating UTF-8 is faster by a factor of between 7 and 14x for\n+  ASCII input][1.7utf8]. This means that creating `String`s and `str`s\n+  from bytes is faster.\n+* [The performance of `LineWriter` (and thus `io::stdout`) was\n+  improved by using `memchr` to search for newlines][1.7m].\n+* [`f32::to_degrees` and `f32::to_radians` are stable][1.7f]. The\n+  `f64` variants were stabilized previously.\n+* [`BTreeMap` was rewritten to use less memory improve performance of\n+  insertion and iteration, the latter by as much as 5x`][1.7bm].\n+* [`BTreeSet` and its iterators, `Iter`, `IntoIter`, and `Range` are\n+  covariant over their contained type][1.7bt].\n+* [`LinkedList` and its iterators, `Iter` and `IntoIter` are covariant\n+  over their contained type][1.7ll].\n+* [`str::replace` now accepts a `Pattern`][1.7rp], like other string\n+  searching methods.\n+* [`Any` is implemented for unsized types][1.7a].\n+* [`Hash` is implemented for `Duration`][1.7h].\n+\n+Misc\n+----\n+\n+* [The `--error-format=json` flag to `rustc` causes it to emit errors\n+  in JSON format][1.7j]. This is an unstable flag and so also requires\n+  the `-Z unstable-options` flag.\n+* [When running tests with `--test`, rustdoc will pass `--cfg`\n+  arguments to the compiler][1.7dt].\n+* [The compiler is built with RPATH information by default][1.7rp].\n+  This means that it will be possible to run `rustc` when installed in\n+  unusual configurations without configuring the dynamic linker search\n+  path explicitly.\n+* [`rustc` passes `--enable-new-dtags` to GNU ld][1.7dt]. This makes\n+  any RPATH entries (emitted with `-C rpath`) *not* take precedence\n+  over `LD_LIBRARY_PATH`.\n+\n+Cargo\n+-----\n+\n+* [`cargo rustc` accepts a `--profile` flag that runs `rustc` under\n+  any of the compilation profiles, 'dev', 'bench', or 'test'][1.7cp].\n+* [The `rerun-if-changed` build script directive no longer causes the\n+  build script to incorrectly run twice in certain scenarios][1.7rr].\n+\n+Compatibility Notes\n+-------------------\n+\n+* [Several bugs in the compiler's visibility calculations were\n+  fixed][1.7v]. Since this was found to break significant amounts of\n+  code, the new errors will be emitted as warnings for several release\n+  cycles, under the `private_in_public` lint.\n+* Defaulted type parameters were accidentally accepted in positions\n+  that were not intended. In this release, [defaulted type parameters\n+  appearing outside of type definitions will generate a\n+  warning][1.7d], which will become an error in future releases.\n+* [Parsing \".\" as a float results in an error instead of\n+  0][1.7p]. That is, `\".\".parse::<f32>()` returns `Err`, not `Ok(0)`.\n+* [Borrows of closure parameters may not outlive the closure][1.7bc].\n+\n+[1.7a]: https://github.com/rust-lang/rust/pull/30928\n+[1.7bc]: https://github.com/rust-lang/rust/pull/30341\n+[1.7bm]: https://github.com/rust-lang/rust/pull/30426\n+[1.7bt]: https://github.com/rust-lang/rust/pull/30998\n+[1.7cp]: https://github.com/rust-lang/cargo/pull/2224\n+[1.7d]: https://github.com/rust-lang/rust/pull/30724\n+[1.7dt]: https://github.com/rust-lang/rust/pull/30372\n+[1.7dt]: https://github.com/rust-lang/rust/pull/30394\n+[1.7f]: https://github.com/rust-lang/rust/pull/30672\n+[1.7h]: https://github.com/rust-lang/rust/pull/30818\n+[1.7j]: https://github.com/rust-lang/rust/pull/30711\n+[1.7ll]: https://github.com/rust-lang/rust/pull/30663\n+[1.7m]: https://github.com/rust-lang/rust/pull/30381\n+[1.7p]: https://github.com/rust-lang/rust/pull/30681\n+[1.7rp]: https://github.com/rust-lang/rust/pull/29498\n+[1.7rp]: https://github.com/rust-lang/rust/pull/30353\n+[1.7rr]: https://github.com/rust-lang/cargo/pull/2279\n+[1.7sf]: https://github.com/rust-lang/rust/pull/30389\n+[1.7utf8]: https://github.com/rust-lang/rust/pull/30740\n+[1.7v]: https://github.com/rust-lang/rust/pull/29973\n+[RFC 1214]: https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md\n+[`clone_from_slice`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.clone_from_slice\n+[`sort_by_key`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.sort_by_key\n+[`CString::into_bytes_with_nul`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes_with_nul\n+[`CString::into_bytes`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes\n+[`CString::into_string`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_string\n+[`IntoStringError::into_cstring`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.into_cstring\n+[`IntoStringError::utf8_error`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.utf8_error\n+[`Ipv4Addr::is_broadcast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_broadcast\n+[`Ipv4Addr::is_documentation`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_documentation\n+[`Ipv4Addr::is_link_local`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_link_local\n+[`Ipv4Addr::is_loopback`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_loopback\n+[`Ipv4Addr::is_multicast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_multicast\n+[`Ipv4Addr::is_private`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_private\n+[`Ipv6Addr::is_loopback`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_loopback\n+[`Ipv6Addr::is_multicast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_multicast\n+[`Ipv6Addr::is_unspecified`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_unspecified\n+[`Path::strip_prefix`]: http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.strip_prefix\n+[`String::as_mut_str`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_mut_str\n+[`String::as_str`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_str\n+[`Vec::as_mut_slice`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_mut_slice\n+[`Vec::as_slice`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_slice\n+[`ffi::IntoStringError`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html\n+[`i32::checked_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_neg\n+[`i32::checked_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_rem\n+[`i32::checked_shl`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shl\n+[`i32::checked_shr`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shr\n+[`i32::overflowing_add`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_add\n+[`i32::overflowing_div`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_div\n+[`i32::overflowing_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_mul\n+[`i32::overflowing_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_neg\n+[`i32::overflowing_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_rem\n+[`i32::overflowing_shl`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_shl\n+[`i32::overflowing_shr`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_shr\n+[`i32::overflowing_sub`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_sub\n+[`i32::saturating_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.saturating_mul\n+[`path::StripPrefixError`]: http://doc.rust-lang.org/nightly/std/path/struct.StripPrefixError.html\n+[`u32::checked_rem`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_rem\n+[`u32::checked_shl`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_shl\n+[`u32::overflowing_add`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_add\n+[`u32::overflowing_div`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_div\n+[`u32::overflowing_mul`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_mul\n+[`u32::overflowing_neg`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_neg\n+[`u32::overflowing_rem`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_rem\n+[`u32::overflowing_shl`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_shl\n+[`u32::overflowing_shr`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_shr\n+[`u32::overflowing_sub`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_sub\n+[`u32::saturating_mul`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.saturating_mul\n+\n+\n+Version 1.6.0 (2016-01-21)\n+==========================\n+\n+Language\n+--------\n+\n+* The `#![no_std]` attribute causes a crate to not be linked to the\n+  standard library, but only the [core library][1.6co], as described\n+  in [RFC 1184]. The core library defines common types and traits but\n+  has no platform dependencies whatsoever, and is the basis for Rust\n+  software in environments that cannot support a full port of the\n+  standard library, such as operating systems. Most of the core\n+  library is now stable.\n+\n+Libraries\n+---------\n+\n+* Stabilized APIs:\n+  [`Read::read_exact`],\n+  [`ErrorKind::UnexpectedEof`][] (renamed from `UnexpectedEOF`),\n+  [`fs::DirBuilder`], [`fs::DirBuilder::new`],\n+  [`fs::DirBuilder::recursive`], [`fs::DirBuilder::create`],\n+  [`os::unix::fs::DirBuilderExt`],\n+  [`os::unix::fs::DirBuilderExt::mode`], [`vec::Drain`],\n+  [`vec::Vec::drain`], [`string::Drain`], [`string::String::drain`],\n+  [`vec_deque::Drain`], [`vec_deque::VecDeque::drain`],\n+  [`collections::hash_map::Drain`],\n+  [`collections::hash_map::HashMap::drain`],\n+  [`collections::hash_set::Drain`],\n+  [`collections::hash_set::HashSet::drain`],\n+  [`collections::binary_heap::Drain`],\n+  [`collections::binary_heap::BinaryHeap::drain`],\n+  [`Vec::extend_from_slice`][] (renamed from `push_all`),\n+  [`Mutex::get_mut`], [`Mutex::into_inner`], [`RwLock::get_mut`],\n+  [`RwLock::into_inner`],\n+  [`Iterator::min_by_key`][] (renamed from `min_by`),\n+  [`Iterator::max_by_key`][] (renamed from `max_by`).\n+* The [core library][1.6co] is stable, as are most of its APIs.\n+* [The `assert_eq!` macro supports arguments that don't implement\n+  `Sized`][1.6ae], such as arrays. In this way it behaves more like\n+  `assert!`.\n+* Several timer functions that take duration in milliseconds [are\n+  deprecated in favor of those that take `Duration`][1.6ms]. These\n+  include `Condvar::wait_timeout_ms`, `thread::sleep_ms`, and\n+  `thread::park_timeout_ms`.\n+* The algorithm by which `Vec` reserves additional elements was\n+  [tweaked to not allocate excessive space][1.6a] while still growing\n+  exponentially.\n+* `From` conversions are [implemented from integers to floats][1.6f]\n+  in cases where the conversion is lossless. Thus they are not\n+  implemented for 32-bit ints to `f32`, nor for 64-bit ints to `f32`\n+  or `f64`. They are also not implemented for `isize` and `usize`\n+  because the implementations would be platform-specific. `From` is\n+  also implemented from `f32` to `f64`.\n+* `From<&Path>` and `From<PathBuf>` are implemented for `Cow<Path>`.\n+* `From<T>` is implemented for `Box<T>`, `Rc<T>` and `Arc<T>`.\n+* `IntoIterator` is implemented for `&PathBuf` and `&Path`.\n+* [`BinaryHeap` was refactored][1.6bh] for modest performance\n+  improvements.\n+* Sorting slices that are already sorted [is 50% faster in some\n+  cases][1.6s].\n+\n+Cargo\n+-----\n+\n+* Cargo will look in `$CARGO_HOME/bin` for subcommands [by default][1.6c].\n+* Cargo build scripts can specify their dependencies by emitting the\n+  [`rerun-if-changed`][1.6rr] key.\n+* crates.io will reject publication of crates with dependencies that\n+  have a wildcard version constraint. Crates with wildcard\n+  dependencies were seen to cause a variety of problems, as described\n+  in [RFC 1241]. Since 1.5 publication of such crates has emitted a\n+  warning.\n+* `cargo clean` [accepts a `--release` flag][1.6cc] to clean the\n+  release folder.  A variety of artifacts that Cargo failed to clean\n+  are now correctly deleted.\n+\n+Misc\n+----\n+\n+* The `unreachable_code` lint [warns when a function call's argument\n+  diverges][1.6dv].\n+* The parser indicates [failures that may be caused by\n+  confusingly-similar Unicode characters][1.6uc]\n+* Certain macro errors [are reported at definition time][1.6m], not\n+  expansion.\n+\n+Compatibility Notes\n+-------------------\n+\n+* The compiler no longer makes use of the [`RUST_PATH`][1.6rp]\n+  environment variable when locating crates. This was a pre-cargo\n+  feature for integrating with the package manager that was\n+  accidentally never removed.\n+* [A number of bugs were fixed in the privacy checker][1.6p] that\n+  could cause previously-accepted code to break.\n+* [Modules and unit/tuple structs may not share the same name][1.6ts].\n+* [Bugs in pattern matching unit structs were fixed][1.6us]. The tuple\n+  struct pattern syntax (`Foo(..)`) can no longer be used to match\n+  unit structs. This is a warning now, but will become an error in\n+  future releases. Patterns that share the same name as a const are\n+  now an error.\n+* A bug was fixed that causes [rustc not to apply default type\n+  parameters][1.6xc] when resolving certain method implementations of\n+  traits defined in other crates.\n+\n+[1.6a]: https://github.com/rust-lang/rust/pull/29454\n+[1.6ae]: https://github.com/rust-lang/rust/pull/29770\n+[1.6bh]: https://github.com/rust-lang/rust/pull/29811\n+[1.6c]: https://github.com/rust-lang/cargo/pull/2192\n+[1.6cc]: https://github.com/rust-lang/cargo/pull/2131\n+[1.6co]: http://doc.rust-lang.org/beta/core/index.html\n+[1.6dv]: https://github.com/rust-lang/rust/pull/30000\n+[1.6f]: https://github.com/rust-lang/rust/pull/29129\n+[1.6m]: https://github.com/rust-lang/rust/pull/29828\n+[1.6ms]: https://github.com/rust-lang/rust/pull/29604\n+[1.6p]: https://github.com/rust-lang/rust/pull/29726\n+[1.6rp]: https://github.com/rust-lang/rust/pull/30034\n+[1.6rr]: https://github.com/rust-lang/cargo/pull/2134\n+[1.6s]: https://github.com/rust-lang/rust/pull/29675\n+[1.6ts]: https://github.com/rust-lang/rust/issues/21546\n+[1.6uc]: https://github.com/rust-lang/rust/pull/29837\n+[1.6us]: https://github.com/rust-lang/rust/pull/29383\n+[1.6xc]: https://github.com/rust-lang/rust/issues/30123\n+[RFC 1184]: https://github.com/rust-lang/rfcs/blob/master/text/1184-stabilize-no_std.md\n+[RFC 1241]: https://github.com/rust-lang/rfcs/blob/master/text/1241-no-wildcard-deps.md\n+[`ErrorKind::UnexpectedEof`]: http://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html#variant.UnexpectedEof\n+[`Iterator::max_by_key`]: http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.max_by_key\n+[`Iterator::min_by_key`]: http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.min_by_key\n+[`Mutex::get_mut`]: http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.get_mut\n+[`Mutex::into_inner`]: http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.into_inner\n+[`Read::read_exact`]: http://doc.rust-lang.org/nightly/std/io/trait.Read.html#method.read_exact\n+[`RwLock::get_mut`]: http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html#method.get_mut\n+[`RwLock::into_inner`]: http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html#method.into_inner\n+[`Vec::extend_from_slice`]: http://doc.rust-lang.org/nightly/collections/vec/struct.Vec.html#method.extend_from_slice\n+[`collections::binary_heap::BinaryHeap::drain`]: http://doc.rust-lang.org/nightly/std/collections/binary_heap/struct.BinaryHeap.html#method.drain\n+[`collections::binary_heap::Drain`]: http://doc.rust-lang.org/nightly/std/collections/binary_heap/struct.Drain.html\n+[`collections::hash_map::Drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.Drain.html\n+[`collections::hash_map::HashMap::drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.HashMap.html#method.drain\n+[`collections::hash_set::Drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_set/struct.Drain.html\n+[`collections::hash_set::HashSet::drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_set/struct.HashSet.html#method.drain\n+[`fs::DirBuilder::create`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.create\n+[`fs::DirBuilder::new`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.new\n+[`fs::DirBuilder::recursive`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.recursive\n+[`fs::DirBuilder`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html\n+[`os::unix::fs::DirBuilderExt::mode`]: http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.DirBuilderExt.html#tymethod.mode\n+[`os::unix::fs::DirBuilderExt`]: http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.DirBuilderExt.html\n+[`string::Drain`]: http://doc.rust-lang.org/nightly/std/string/struct.Drain.html\n+[`string::String::drain`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.drain\n+[`vec::Drain`]: http://doc.rust-lang.org/nightly/std/vec/struct.Drain.html\n+[`vec::Vec::drain`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.drain\n+[`vec_deque::Drain`]: http://doc.rust-lang.org/nightly/std/collections/vec_deque/struct.Drain.html\n+[`vec_deque::VecDeque::drain`]: http://doc.rust-lang.org/nightly/std/collections/vec_deque/struct.VecDeque.html#method.drain\n+\n+\n Version 1.5.0 (2015-12-10)\n ==========================\n "}, {"sha": "546c71f667ffa245d950d155e109e65969c46825", "filename": "mk/cfg/armv7-unknown-linux-gnueabihf.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -1,5 +1,5 @@\n # armv7-unknown-linux-gnueabihf configuration\n-CROSS_PREFIX_armv7-unknown-linux-gnueabihf=armv7-unknown-linux-gnueabihf-\n+CROSS_PREFIX_armv7-unknown-linux-gnueabihf=arm-linux-gnueabihf-\n CC_armv7-unknown-linux-gnueabihf=gcc\n CXX_armv7-unknown-linux-gnueabihf=g++\n CPP_armv7-unknown-linux-gnueabihf=gcc -E\n@@ -8,8 +8,8 @@ CFG_LIB_NAME_armv7-unknown-linux-gnueabihf=lib$(1).so\n CFG_STATIC_LIB_NAME_armv7-unknown-linux-gnueabihf=lib$(1).a\n CFG_LIB_GLOB_armv7-unknown-linux-gnueabihf=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_armv7-unknown-linux-gnueabihf=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7-unknown-linux-gnueabihf := -D__arm__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_armv7-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__ $(CFLAGS)\n+CFG_JEMALLOC_CFLAGS_armv7-unknown-linux-gnueabihf := -D__arm__ $(CFLAGS) -march=armv7\n+CFG_GCCISH_CFLAGS_armv7-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__ $(CFLAGS) -march=armv7\n CFG_GCCISH_CXXFLAGS_armv7-unknown-linux-gnueabihf := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_armv7-unknown-linux-gnueabihf := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_armv7-unknown-linux-gnueabihf := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "f6e6436f6157805254341e7cee3c316f30e775c8", "filename": "mk/cfg/powerpc64-unknown-linux-gnu.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -8,6 +8,7 @@ CFG_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).so\n CFG_STATIC_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_powerpc64-unknown-linux-gnu := -m64\n CFG_CFLAGS_powerpc64-unknown-linux-gnu := -m64 $(CFLAGS)\n CFG_GCCISH_CFLAGS_powerpc64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_powerpc64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)"}, {"sha": "78527c21d106710c96473fb738e5cb9311f04ab9", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -265,6 +265,8 @@ fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n ```\n \n Indeed, `map` is [defined as a method][2] on `Option<T>` in the standard library.\n+As a method, it has a slighly different signature: methods take `self`, `&self`,\n+or `&mut self` as their first argument.\n \n Armed with our new combinator, we can rewrite our `extension_explicit` method\n to get rid of the case analysis:\n@@ -294,6 +296,9 @@ fn unwrap_or<T>(option: Option<T>, default: T) -> T {\n }\n ```\n \n+Like with `map` above, the standard library implementation is a method instead\n+of a free function.\n+\n The trick here is that the default value must have the same type as the value\n that might be inside the `Option<T>`. Using it is dead simple in our case:\n "}, {"sha": "861ef6810f54a668fff55623f2edcea4cdb26439", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -279,7 +279,7 @@ displaying the message.\n [expect]: ../std/option/enum.Option.html#method.expect\n [panic]: error-handling.html\n \n-If we leave off calling these two methods, our program will compile, but\n+If we leave off calling this method, our program will compile, but\n we\u2019ll get a warning:\n \n ```bash\n@@ -680,7 +680,7 @@ fn main() {\n }\n ```\n \n-The new three lines:\n+The new two lines:\n \n ```rust,ignore\n     let guess: u32 = guess.trim().parse()"}, {"sha": "d57664bf07e4d8cda1fb217c40973224033e48c2", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -24,6 +24,7 @@ Cargo will automatically generate a simple test when you make a new project.\n Here's the contents of `src/lib.rs`:\n \n ```rust\n+# fn main() {}\n #[test]\n fn it_works() {\n }\n@@ -75,6 +76,7 @@ So why does our do-nothing test pass? Any test which doesn't `panic!` passes,\n and any test that does `panic!` fails. Let's make our test fail:\n \n ```rust\n+# fn main() {}\n #[test]\n fn it_works() {\n     assert!(false);\n@@ -145,6 +147,7 @@ This is useful if you want to integrate `cargo test` into other tooling.\n We can invert our test's failure with another attribute: `should_panic`:\n \n ```rust\n+# fn main() {}\n #[test]\n #[should_panic]\n fn it_works() {\n@@ -175,6 +178,7 @@ Rust provides another macro, `assert_eq!`, that compares two arguments for\n equality:\n \n ```rust\n+# fn main() {}\n #[test]\n #[should_panic]\n fn it_works() {\n@@ -209,6 +213,7 @@ make sure that the failure message contains the provided text. A safer version\n of the example above would be:\n \n ```rust\n+# fn main() {}\n #[test]\n #[should_panic(expected = \"assertion failed\")]\n fn it_works() {\n@@ -219,6 +224,7 @@ fn it_works() {\n That's all there is to the basics! Let's write one 'real' test:\n \n ```rust,ignore\n+# fn main() {}\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -238,6 +244,7 @@ Sometimes a few specific tests can be very time-consuming to execute. These\n can be disabled by default by using the `ignore` attribute:\n \n ```rust\n+# fn main() {}\n #[test]\n fn it_works() {\n     assert_eq!(4, add_two(2));\n@@ -299,6 +306,7 @@ missing the `tests` module. The idiomatic way of writing our example\n looks like this:\n \n ```rust,ignore\n+# fn main() {}\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -327,6 +335,7 @@ a large module, and so this is a common use of globs. Let's change our\n `src/lib.rs` to make use of it:\n \n ```rust,ignore\n+# fn main() {}\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }\n@@ -377,6 +386,7 @@ put a `tests/lib.rs` file inside, with this as its contents:\n ```rust,ignore\n extern crate adder;\n \n+# fn main() {}\n #[test]\n fn it_works() {\n     assert_eq!(4, adder::add_two(2));\n@@ -432,6 +442,7 @@ running examples in your documentation (**note:** this only works in library\n crates, not binary crates). Here's a fleshed-out `src/lib.rs` with examples:\n \n ```rust,ignore\n+# fn main() {}\n //! The `adder` crate provides functions that add numbers to other numbers.\n //!\n //! # Examples"}, {"sha": "d1f5cf81c038da88f5ceb3c8c27a680f9c64840f", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -56,6 +56,26 @@ use mem;\n ///     assert_eq!(*f.borrow(), 2);\n /// });\n /// ```\n+///\n+/// # Platform-specific behavior\n+///\n+/// Note that a \"best effort\" is made to ensure that destructors for types\n+/// stored in thread local storage are run, but not all platforms can gurantee\n+/// that destructors will be run for all types in thread local storage. For\n+/// example, there are a number of known caveats where destructors are not run:\n+///\n+/// 1. On Unix systems when pthread-based TLS is being used, destructors will\n+///    not be run for TLS values on the main thread when it exits. Note that the\n+///    application will exit immediately after the main thread exits as well.\n+/// 2. On all platforms it's possible for TLS to re-initialize other TLS slots\n+///    during destruction. Some platforms ensure that this cannot happen\n+///    infinitely by preventing re-initialization of any slot that has been\n+///    destroyed, but not all platforms have this guard. Those platforms that do\n+///    not guard typically have a synthetic limit after which point no more\n+///    destructors are run.\n+/// 3. On OSX, initializing TLS during destruction of other TLS slots can\n+///    sometimes cancel *all* destructors for the current thread, whether or not\n+///    the slots have already had their destructors run or not.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LocalKey<T: 'static> {\n     // This outer `LocalKey<T>` type is what's going to be stored in statics,\n@@ -602,7 +622,12 @@ mod tests {\n         }).join().ok().unwrap();\n     }\n \n+    // Note that this test will deadlock if TLS destructors aren't run (this\n+    // requires the destructor to be run to pass the test). OSX has a known bug\n+    // where dtors-in-dtors may cancel other destructors, so we just ignore this\n+    // test on OSX.\n     #[test]\n+    #[cfg_attr(target_os = \"macos\", ignore)]\n     fn dtors_in_dtors_in_dtors() {\n         struct S1(Sender<()>);\n         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));"}, {"sha": "96ac9b83d2f2400ceab12f5680a88de399333eb4", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -22,26 +22,25 @@ impl<'a> Parser<'a> {\n     pub fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();\n         loop {\n-            debug!(\"parse_outer_attributes: self.token={:?}\",\n-                   self.token);\n+            debug!(\"parse_outer_attributes: self.token={:?}\", self.token);\n             match self.token {\n-              token::Pound => {\n-                attrs.push(try!(self.parse_attribute(false)));\n-              }\n-              token::DocComment(s) => {\n-                let attr = ::attr::mk_sugared_doc_attr(\n+                token::Pound => {\n+                    attrs.push(try!(self.parse_attribute(false)));\n+                }\n+                token::DocComment(s) => {\n+                    let attr = ::attr::mk_sugared_doc_attr(\n                     attr::mk_attr_id(),\n                     self.id_to_interned_str(ast::Ident::with_empty_ctxt(s)),\n                     self.span.lo,\n                     self.span.hi\n                 );\n-                if attr.node.style != ast::AttrStyle::Outer {\n-                  return Err(self.fatal(\"expected outer comment\"));\n+                    if attr.node.style != ast::AttrStyle::Outer {\n+                        return Err(self.fatal(\"expected outer comment\"));\n+                    }\n+                    attrs.push(attr);\n+                    self.bump();\n                 }\n-                attrs.push(attr);\n-                self.bump();\n-              }\n-              _ => break\n+                _ => break,\n             }\n         }\n         return Ok(attrs);\n@@ -53,24 +52,27 @@ impl<'a> Parser<'a> {\n     /// attribute\n     pub fn parse_attribute(&mut self, permit_inner: bool) -> PResult<'a, ast::Attribute> {\n         debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n-               permit_inner, self.token);\n+               permit_inner,\n+               self.token);\n         let (span, value, mut style) = match self.token {\n             token::Pound => {\n                 let lo = self.span.lo;\n                 self.bump();\n \n-                if permit_inner { self.expected_tokens.push(TokenType::Token(token::Not)); }\n+                if permit_inner {\n+                    self.expected_tokens.push(TokenType::Token(token::Not));\n+                }\n                 let style = if self.token == token::Not {\n                     self.bump();\n                     if !permit_inner {\n                         let span = self.span;\n-                        self.diagnostic().struct_span_err(span,\n-                                                          \"an inner attribute is not permitted in \\\n-                                                           this context\")\n-                                         .fileline_help(span,\n-                                                        \"place inner attribute at the top of \\\n-                                                         the module or block\")\n-                                         .emit()\n+                        self.diagnostic()\n+                            .struct_span_err(span,\n+                                             \"an inner attribute is not permitted in this context\")\n+                            .fileline_help(span,\n+                                           \"place inner attribute at the top of the module or \\\n+                                            block\")\n+                            .emit()\n                     }\n                     ast::AttrStyle::Inner\n                 } else {\n@@ -92,8 +94,9 @@ impl<'a> Parser<'a> {\n \n         if permit_inner && self.token == token::Semi {\n             self.bump();\n-            self.span_warn(span, \"this inner attribute syntax is deprecated. \\\n-                           The new syntax is `#![foo]`, with a bang and no semicolon\");\n+            self.span_warn(span,\n+                           \"this inner attribute syntax is deprecated. The new syntax is \\\n+                            `#![foo]`, with a bang and no semicolon\");\n             style = ast::AttrStyle::Inner;\n         }\n \n@@ -103,8 +106,8 @@ impl<'a> Parser<'a> {\n                 id: attr::mk_attr_id(),\n                 style: style,\n                 value: value,\n-                is_sugared_doc: false\n-            }\n+                is_sugared_doc: false,\n+            },\n         })\n     }\n \n@@ -139,7 +142,7 @@ impl<'a> Parser<'a> {\n                         break;\n                     }\n                 }\n-                _ => break\n+                _ => break,\n             }\n         }\n         Ok(attrs)\n@@ -150,10 +153,8 @@ impl<'a> Parser<'a> {\n     /// | IDENT meta_seq\n     pub fn parse_meta_item(&mut self) -> PResult<'a, P<ast::MetaItem>> {\n         let nt_meta = match self.token {\n-            token::Interpolated(token::NtMeta(ref e)) => {\n-                Some(e.clone())\n-            }\n-            _ => None\n+            token::Interpolated(token::NtMeta(ref e)) => Some(e.clone()),\n+            _ => None,\n         };\n \n         match nt_meta {\n@@ -176,9 +177,8 @@ impl<'a> Parser<'a> {\n                 match lit.node {\n                     ast::LitStr(..) => {}\n                     _ => {\n-                        self.span_err(\n-                            lit.span,\n-                            \"non-string literals are not allowed in meta-items\");\n+                        self.span_err(lit.span,\n+                                      \"non-string literals are not allowed in meta-items\");\n                     }\n                 }\n                 let hi = self.span.hi;"}, {"sha": "1193224bdb62559e895f8c4e5d4a45dcd7bfc645", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -23,22 +23,22 @@ use ast;\n /// isn't parsed as (if true {...} else {...} | x) | 5\n pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n     match e.node {\n-        ast::ExprIf(..)\n-        | ast::ExprIfLet(..)\n-        | ast::ExprMatch(..)\n-        | ast::ExprBlock(_)\n-        | ast::ExprWhile(..)\n-        | ast::ExprWhileLet(..)\n-        | ast::ExprLoop(..)\n-        | ast::ExprForLoop(..) => false,\n-        _ => true\n+        ast::ExprIf(..) |\n+        ast::ExprIfLet(..) |\n+        ast::ExprMatch(..) |\n+        ast::ExprBlock(_) |\n+        ast::ExprWhile(..) |\n+        ast::ExprWhileLet(..) |\n+        ast::ExprLoop(..) |\n+        ast::ExprForLoop(..) => false,\n+        _ => true,\n     }\n }\n \n pub fn expr_is_simple_block(e: &ast::Expr) -> bool {\n     match e.node {\n         ast::ExprBlock(ref block) => block.rules == ast::DefaultBlock,\n-        _ => false\n+        _ => false,\n     }\n }\n \n@@ -50,11 +50,11 @@ pub fn stmt_ends_with_semi(stmt: &ast::Stmt_) -> bool {\n         ast::StmtDecl(ref d, _) => {\n             match d.node {\n                 ast::DeclLocal(_) => true,\n-                ast::DeclItem(_) => false\n+                ast::DeclItem(_) => false,\n             }\n         }\n-        ast::StmtExpr(ref e, _) => { expr_requires_semi_to_be_stmt(e) }\n-        ast::StmtSemi(..) => { false }\n-        ast::StmtMac(..) => { false }\n+        ast::StmtExpr(ref e, _) => expr_requires_semi_to_be_stmt(e),\n+        ast::StmtSemi(..) => false,\n+        ast::StmtMac(..) => false,\n     }\n }"}, {"sha": "060b0b5263765f8e7839edbc31c36dca09ab4365", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27380a3eddd57a65744416e308408e4f41e57f4b/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=27380a3eddd57a65744416e308408e4f41e57f4b", "patch": "@@ -16,7 +16,7 @@ use parse::token;\n /// and whether a trailing separator is allowed.\n pub struct SeqSep {\n     pub sep: Option<token::Token>,\n-    pub trailing_sep_allowed: bool\n+    pub trailing_sep_allowed: bool,\n }\n \n pub fn seq_sep_trailing_allowed(t: token::Token) -> SeqSep {"}]}