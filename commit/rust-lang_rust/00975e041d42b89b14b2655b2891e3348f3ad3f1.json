{"sha": "00975e041d42b89b14b2655b2891e3348f3ad3f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOTc1ZTA0MWQ0MmI4OWIxNGIyNjU1YjI4OTFlMzM0OGYzYWQzZjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-30T16:02:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-31T00:37:22Z"}, "message": "rollup merge of #18398 : aturon/lint-conventions-2\n\nConflicts:\n\tsrc/libcollections/slice.rs\n\tsrc/libcore/failure.rs\n\tsrc/libsyntax/parse/token.rs\n\tsrc/test/debuginfo/basic-types-mut-globals.rs\n\tsrc/test/debuginfo/simple-struct.rs\n\tsrc/test/debuginfo/trait-pointers.rs", "tree": {"sha": "4300bbf758c3c1438ca807ef0ca8326b373a4e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4300bbf758c3c1438ca807ef0ca8326b373a4e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00975e041d42b89b14b2655b2891e3348f3ad3f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00975e041d42b89b14b2655b2891e3348f3ad3f1", "html_url": "https://github.com/rust-lang/rust/commit/00975e041d42b89b14b2655b2891e3348f3ad3f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00975e041d42b89b14b2655b2891e3348f3ad3f1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f68dafa5059b84b6102dfd7b1e1cee9aae86b220", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68dafa5059b84b6102dfd7b1e1cee9aae86b220", "html_url": "https://github.com/rust-lang/rust/commit/f68dafa5059b84b6102dfd7b1e1cee9aae86b220"}, {"sha": "d9eb13b2c8397f6eccea0c37967c4010d9aedb0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9eb13b2c8397f6eccea0c37967c4010d9aedb0d", "html_url": "https://github.com/rust-lang/rust/commit/d9eb13b2c8397f6eccea0c37967c4010d9aedb0d"}], "stats": {"total": 556, "additions": 285, "deletions": 271}, "files": [{"sha": "0e3010ad30ab3aed379481a1482464e53f91fdf2", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -29,7 +29,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![feature(unsafe_destructor)]\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use std::cell::{Cell, RefCell};\n use std::cmp;"}, {"sha": "9de2c20c03f3bed3d9698894897d0c54bf9f48c3", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -151,7 +151,7 @@\n //! }\n //! ```\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use core::prelude::*;\n "}, {"sha": "a552e4caa2d21415b0310b9ce7858bc9694bb0fc", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -109,7 +109,7 @@ pub use core::slice::{Found, NotFound};\n \n // Functional utilities\n \n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n pub trait VectorVector<T> for Sized? {\n     // FIXME #5898: calling these .concat and .connect conflicts with\n     // StrVector::con{cat,nect}, since they have generic contents."}, {"sha": "731e8beca306dbc85c64ac7062f717cbe2ce4029", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n //! A simple map based on a vector for small integer keys. Space requirements\n //! are O(highest integer key).\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use core::prelude::*;\n "}, {"sha": "b8a91a912ba3c96e7201c4db7246e485603a8167", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use char;\n use collections::Collection;"}, {"sha": "65107d6ab7d832556cb0e6e038407dfa92efdb4a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,7 +10,7 @@\n \n //! Utilities for formatting and printing strings\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n use any;\n use cell::{Cell, Ref, RefMut};\n@@ -733,7 +733,7 @@ macro_rules! tuple (\n     () => ();\n     ( $($name:ident,)+ ) => (\n         impl<$($name:Show),*> Show for ($($name,)*) {\n-            #[allow(non_snake_case, dead_assignment)]\n+            #[allow(non_snake_case, unused_assignments)]\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 try!(write!(f, \"(\"));\n                 let ($(ref $name,)*) = *self;"}, {"sha": "568528f6ae29ee2ab0208b477a8e26906e2d48a3", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -12,7 +12,7 @@\n \n // FIXME: #6220 Implement floating point formatting\n \n-#![allow(unsigned_negate)]\n+#![allow(unsigned_negation)]\n \n use collections::Collection;\n use fmt;"}, {"sha": "2cc425b737194b147592f1d3c847a273ccaaa683", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -42,7 +42,7 @@ A quick refresher on memory ordering:\n */\n \n #![experimental]\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n pub type GlueFn = extern \"Rust\" fn(*const i8);\n "}, {"sha": "a7be23e53e074012dbc50863b1b2df7241c6cdda", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -60,7 +60,7 @@\n #![allow(unknown_features)]\n #![feature(globs, intrinsics, lang_items, macro_rules, phase)]\n #![feature(simd, unsafe_destructor, slicing_syntax)]\n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n \n mod macros;\n "}, {"sha": "521085bca7638a0c84f7758b24568dba7a3d2b85", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -12,7 +12,7 @@\n \n #![doc(primitive = \"f32\")]\n // FIXME: MIN_VALUE and MAX_VALUE literals are parsed as -inf and inf #14353\n-#![allow(type_overflow)]\n+#![allow(overflowing_literals)]\n \n use intrinsics;\n use mem;"}, {"sha": "78065d7803e0b610c53b9f21233aee07da752ee9", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -12,7 +12,7 @@\n \n #![doc(primitive = \"f64\")]\n // FIXME: MIN_VALUE and MAX_VALUE literals are parsed as -inf and inf #14353\n-#![allow(type_overflow)]\n+#![allow(overflowing_literals)]\n \n use intrinsics;\n use mem;"}, {"sha": "a177b89058c8bc172c8f7a8c127e6d1671e4c9e3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -12,7 +12,7 @@\n \n //! Numeric traits and functions for generic mathematics\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use intrinsics;\n use {int, i8, i16, i32, i64};"}, {"sha": "d156f71462dd1dda740e1d3791a546e132528f17", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n #![experimental]\n \n //! Contains struct definitions for the layout of compiler built-in types."}, {"sha": "2b6f97cf6a5c4102468fd6b83688ac3d1253d149", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -35,7 +35,7 @@\n //! warning.\n \n #![allow(non_camel_case_types)]\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n #[experimental]\n #[simd]"}, {"sha": "433a3ce1109add127c8e068f6c0ec9935af24861", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -768,7 +768,7 @@ Section: Comparing strings\n /// to compare &[u8] byte slices that are not necessarily valid UTF-8.\n #[inline]\n fn eq_slice_(a: &str, b: &str) -> bool {\n-    #[allow(ctypes)]\n+    #[allow(improper_ctypes)]\n     extern { fn memcmp(s1: *const i8, s2: *const i8, n: uint) -> i32; }\n     a.len() == b.len() && unsafe {\n         memcmp(a.as_ptr() as *const i8,\n@@ -1118,7 +1118,7 @@ pub mod raw {\n Section: Trait implementations\n */\n \n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n pub mod traits {\n     use cmp::{Ord, Ordering, Less, Equal, Greater, PartialEq, PartialOrd, Equiv, Eq};\n     use collections::Collection;"}, {"sha": "56ea7a4e7a1e98f724d6b50ea07b86d8d91b8f33", "filename": "src/libcore/tuple/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Ftuple%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcore%2Ftuple%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple%2Fmod.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -81,7 +81,7 @@ macro_rules! tuple_impls {\n         }\n     )+) => {\n         $(\n-            #[allow(missing_doc)]\n+            #[allow(missing_docs)]\n             #[stable]\n             pub trait $Tuple<$($T),+> {\n                 $(\n@@ -97,21 +97,21 @@ macro_rules! tuple_impls {\n             impl<$($T),+> $Tuple<$($T),+> for ($($T,)+) {\n                 $(\n                     #[inline]\n-                    #[allow(unused_variable)]\n+                    #[allow(unused_variables)]\n                     #[unstable = \"may rename pending accessor naming conventions\"]\n                     fn $valN(self) -> $T {\n                         let ($($x,)+) = self; $ret\n                     }\n \n                     #[inline]\n-                    #[allow(unused_variable)]\n+                    #[allow(unused_variables)]\n                     #[unstable = \"may rename pending accessor naming conventions\"]\n                     fn $refN<'a>(&'a self) -> &'a $T {\n                         let ($(ref $x,)+) = *self; $ret\n                     }\n \n                     #[inline]\n-                    #[allow(unused_variable)]\n+                    #[allow(unused_variables)]\n                     #[unstable = \"may rename pending accessor naming conventions\"]\n                     fn $mutN<'a>(&'a mut self) -> &'a mut $T {\n                         let ($(ref mut $x,)+) = *self; $ret"}, {"sha": "868e14b928a40cebf3a88cd759435ba4dbeb84ce", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![allow(unsigned_negate)]\n+#![allow(unsigned_negation)]\n \n use core::fmt::radix;\n "}, {"sha": "3f4166a9658a0945a0dc2cce9b4183a92d875ee4", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -89,7 +89,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(globs, phase)]\n #![feature(import_shadowing)]\n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n@@ -201,7 +201,7 @@ pub enum Fail_ {\n \n /// The type of failure that occurred.\n #[deriving(PartialEq, Eq)]\n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n pub enum FailType {\n     ArgumentMissing_,\n     UnrecognizedOption_,"}, {"sha": "6756d4b21ff78153a07fd3ffa2c501a567538868", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -75,8 +75,8 @@\n \n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n-#![allow(non_uppercase_statics)]\n-#![allow(missing_doc)]\n+#![allow(non_upper_case_globals)]\n+#![allow(missing_docs)]\n #![allow(non_snake_case)]\n \n extern crate core;"}, {"sha": "b626b66427df3580a56f926b7ffe37382db278d1", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -167,7 +167,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(macro_rules)]\n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n \n extern crate regex;\n "}, {"sha": "ee6aa26ede22c60cf4355e5328292ffe54f9d937", "filename": "src/libnative/io/c_windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibnative%2Fio%2Fc_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibnative%2Fio%2Fc_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_windows.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,7 +10,7 @@\n \n //! C definitions used by libnative that don't belong in liblibc\n \n-#![allow(type_overflow)]\n+#![allow(overflowing_literals)]\n \n use libc;\n "}, {"sha": "c0ec4c16ab01fd90b7d0dba4bb1d2b2b355c2538", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -55,7 +55,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![deny(unused_result, unused_must_use)]\n+#![deny(unused_results, unused_must_use)]\n #![allow(non_camel_case_types)]\n #![allow(unknown_features)]\n #![feature(default_type_params, lang_items, slicing_syntax)]"}, {"sha": "49d60a98b64962a5c14b5169742e307691770422", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -118,7 +118,7 @@ impl IsaacRng {\n \n     /// Refills the output buffer (`self.rsl`)\n     #[inline]\n-    #[allow(unsigned_negate)]\n+    #[allow(unsigned_negation)]\n     fn isaac(&mut self) {\n         self.c += 1;\n         // abbreviations"}, {"sha": "95b6d9a17dd1875e64e61a55d597a976a39d9eda", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -26,7 +26,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n #![feature(macro_rules, phase, slicing_syntax)]\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n extern crate serialize;\n "}, {"sha": "f3633a006b13eb98da33ff3b9d5e1483c210699e", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -370,7 +370,7 @@\n \n #![allow(unknown_features)]\n #![feature(macro_rules, phase, slicing_syntax)]\n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n \n #[cfg(test)]\n extern crate \"test\" as stdtest;"}, {"sha": "3cc6d361e3c58992bbc62d3dfc1cef160d839c89", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -179,7 +179,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n     }\n \n     impl<'t> Nfa<'t> {\n-        #[allow(unused_variable)]\n+        #[allow(unused_variables)]\n         fn run(&mut self, start: uint, end: uint) -> Vec<Option<uint>> {\n             let mut matched = false;\n             let prefix_bytes: &[u8] = $prefix_bytes;\n@@ -226,7 +226,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n         }\n \n         // Sometimes `nlist` is never used (for empty regexes).\n-        #[allow(unused_variable)]\n+        #[allow(unused_variables)]\n         #[inline]\n         fn step(&self, groups: &mut Captures, nlist: &mut Threads,\n                 caps: &mut Captures, pc: uint) -> StepState {"}, {"sha": "ace5ba26fdbaa9d3196daa34eb953b7e2e13d105", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -498,7 +498,7 @@ pub fn get_os(triple: &str) -> Option<abi::Os> {\n     }\n     None\n }\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static os_names : &'static [(&'static str, abi::Os)] = &[\n     (\"mingw32\",   abi::OsWindows),\n     (\"win32\",     abi::OsWindows),\n@@ -516,7 +516,7 @@ pub fn get_arch(triple: &str) -> Option<abi::Architecture> {\n     }\n     None\n }\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static architecture_abis : &'static [(&'static str, abi::Architecture)] = &[\n     (\"i386\",   abi::X86),\n     (\"i486\",   abi::X86),"}, {"sha": "3e53620cbd4757ff9a26e299b42b77b839c5c707", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -1021,7 +1021,7 @@ declare_lint!(UNUSED_PARENS, Warn,\n pub struct UnusedParens;\n \n impl UnusedParens {\n-    fn check_unnecessary_parens_core(&self, cx: &Context, value: &ast::Expr, msg: &str,\n+    fn check_unused_parens_core(&self, cx: &Context, value: &ast::Expr, msg: &str,\n                                      struct_lit_needs_parens: bool) {\n         match value.node {\n             ast::ExprParen(ref inner) => {\n@@ -1090,7 +1090,7 @@ impl LintPass for UnusedParens {\n             ast::ExprAssignOp(_, _, ref value) => (value, \"assigned value\", false),\n             _ => return\n         };\n-        self.check_unnecessary_parens_core(cx, &**value, msg, struct_lit_needs_parens);\n+        self.check_unused_parens_core(cx, &**value, msg, struct_lit_needs_parens);\n     }\n \n     fn check_stmt(&mut self, cx: &Context, s: &ast::Stmt) {\n@@ -1104,7 +1104,7 @@ impl LintPass for UnusedParens {\n             },\n             _ => return\n         };\n-        self.check_unnecessary_parens_core(cx, &**value, msg, false);\n+        self.check_unused_parens_core(cx, &**value, msg, false);\n     }\n }\n \n@@ -1364,7 +1364,7 @@ impl MissingDoc {\n         *self.doc_hidden_stack.last().expect(\"empty doc_hidden_stack\")\n     }\n \n-    fn check_missing_doc_attrs(&self,\n+    fn check_missing_docs_attrs(&self,\n                                cx: &Context,\n                                id: Option<ast::NodeId>,\n                                attrs: &[ast::Attribute],\n@@ -1374,7 +1374,7 @@ impl MissingDoc {\n         // documentation is probably not really relevant right now.\n         if cx.sess().opts.test { return }\n \n-        // `#[doc(hidden)]` disables missing_doc check.\n+        // `#[doc(hidden)]` disables missing_docs check.\n         if self.doc_hidden() { return }\n \n         // Only check publicly-visible items, using the result from the privacy pass.\n@@ -1429,7 +1429,7 @@ impl LintPass for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &Context, krate: &ast::Crate) {\n-        self.check_missing_doc_attrs(cx, None, krate.attrs.as_slice(),\n+        self.check_missing_docs_attrs(cx, None, krate.attrs.as_slice(),\n                                      krate.span, \"crate\");\n     }\n \n@@ -1442,7 +1442,7 @@ impl LintPass for MissingDoc {\n             ast::ItemTrait(..) => \"a trait\",\n             _ => return\n         };\n-        self.check_missing_doc_attrs(cx, Some(it.id), it.attrs.as_slice(),\n+        self.check_missing_docs_attrs(cx, Some(it.id), it.attrs.as_slice(),\n                                      it.span, desc);\n     }\n \n@@ -1456,15 +1456,15 @@ impl LintPass for MissingDoc {\n \n                 // Otherwise, doc according to privacy. This will also check\n                 // doc for default methods defined on traits.\n-                self.check_missing_doc_attrs(cx, Some(m.id), m.attrs.as_slice(),\n+                self.check_missing_docs_attrs(cx, Some(m.id), m.attrs.as_slice(),\n                                              m.span, \"a method\");\n             }\n             _ => {}\n         }\n     }\n \n     fn check_ty_method(&mut self, cx: &Context, tm: &ast::TypeMethod) {\n-        self.check_missing_doc_attrs(cx, Some(tm.id), tm.attrs.as_slice(),\n+        self.check_missing_docs_attrs(cx, Some(tm.id), tm.attrs.as_slice(),\n                                      tm.span, \"a type method\");\n     }\n \n@@ -1473,7 +1473,7 @@ impl LintPass for MissingDoc {\n             ast::NamedField(_, vis) if vis == ast::Public => {\n                 let cur_struct_def = *self.struct_def_stack.last()\n                     .expect(\"empty struct_def_stack\");\n-                self.check_missing_doc_attrs(cx, Some(cur_struct_def),\n+                self.check_missing_docs_attrs(cx, Some(cur_struct_def),\n                                              sf.node.attrs.as_slice(), sf.span,\n                                              \"a struct field\")\n             }\n@@ -1482,7 +1482,7 @@ impl LintPass for MissingDoc {\n     }\n \n     fn check_variant(&mut self, cx: &Context, v: &ast::Variant, _: &ast::Generics) {\n-        self.check_missing_doc_attrs(cx, Some(v.node.id), v.node.attrs.as_slice(),\n+        self.check_missing_docs_attrs(cx, Some(v.node.id), v.node.attrs.as_slice(),\n                                      v.span, \"a variant\");\n     }\n }"}, {"sha": "a75b98a54706e9e427118e1891873095bcc128a5", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -261,14 +261,12 @@ impl LintStore {\n         match self.by_name.find_equiv(&lint_name) {\n             Some(&Id(lint_id)) => Some(lint_id),\n             Some(&Renamed(ref new_name, lint_id)) => {\n-                // NOTE(stage0): add the following code after the next snapshot\n-\n-                // let warning = format!(\"lint {} has been renamed to {}\",\n-                //                       lint_name, new_name);\n-                // match span {\n-                //     Some(span) => sess.span_warn(span, warning.as_slice()),\n-                //     None => sess.warn(warning.as_slice()),\n-                // };\n+                let warning = format!(\"lint {} has been renamed to {}\",\n+                                      lint_name, new_name);\n+                match span {\n+                    Some(span) => sess.span_warn(span, warning.as_slice()),\n+                    None => sess.warn(warning.as_slice()),\n+                };\n                 Some(lint_id)\n             }\n             None => None"}, {"sha": "0202aa185585c407e920837d4008781c637a8667", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -98,7 +98,7 @@ macro_rules! declare_lint (\n #[macro_export]\n macro_rules! lint_array ( ($( $lint:expr ),*) => (\n     {\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         static array: LintArray = &[ $( &$lint ),* ];\n         array\n     }"}, {"sha": "bc58097b8607286df5df5b2f0953eb00a3b53a44", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_camel_case_types, non_uppercase_statics)]\n+#![allow(non_camel_case_types, non_upper_case_globals)]\n \n use std::mem;\n use back::svh::Svh;"}, {"sha": "e126449b2481ed95e4db718d44b17d071a965503", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -1330,9 +1330,9 @@ pub fn get_missing_lang_items(cdata: Cmd)\n {\n     let items = reader::get_doc(rbml::Doc::new(cdata.data()), tag_lang_items);\n     let mut result = Vec::new();\n-    reader::tagged_docs(items, tag_lang_items_missing, |missing_doc| {\n+    reader::tagged_docs(items, tag_lang_items_missing, |missing_docs| {\n         let item: lang_items::LangItem =\n-            FromPrimitive::from_u32(reader::doc_as_u32(missing_doc)).unwrap();\n+            FromPrimitive::from_u32(reader::doc_as_u32(missing_docs)).unwrap();\n         result.push(item);\n         true\n     });"}, {"sha": "ad53560a4c2ae1cc5c64ff747bfa445543946fa0", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -2028,7 +2028,7 @@ fn encode_dylib_dependency_formats(rbml_w: &mut Encoder, ecx: &EncodeContext) {\n }\n \n // NB: Increment this as you change the metadata encoding version.\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't', 0, 0, 0, 1 ];\n \n pub fn encode_metadata(parms: EncodeParams, krate: &Crate) -> Vec<u8> {"}, {"sha": "9ebbdab03caa013f01f1265b65cf1871da55690f", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -83,7 +83,7 @@ impl Clone for MovePathIndex {\n     }\n }\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static InvalidMovePathIndex: MovePathIndex =\n     MovePathIndex(uint::MAX);\n \n@@ -97,7 +97,7 @@ impl MoveIndex {\n     }\n }\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static InvalidMoveIndex: MoveIndex =\n     MoveIndex(uint::MAX);\n "}, {"sha": "ad0040608ece86ed511a5f616b79315d4446ac0f", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(non_camel_case_types)]\n-#![allow(unsigned_negate)]\n+#![allow(unsigned_negation)]\n \n use metadata::csearch;\n use middle::astencode;"}, {"sha": "5f9d57488f47f7f01a92b5a31e371596abae735f", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -66,20 +66,20 @@ impl<E: Show> Show for Edge<E> {\n \n #[deriving(Clone, PartialEq, Show)]\n pub struct NodeIndex(pub uint);\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n \n #[deriving(PartialEq, Show)]\n pub struct EdgeIndex(pub uint);\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n #[deriving(Show)]\n pub struct Direction { repr: uint }\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const Outgoing: Direction = Direction { repr: 0 };\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const Incoming: Direction = Direction { repr: 1 };\n \n impl NodeIndex {"}, {"sha": "cccb6a388ae0079562b6a8c61df74cbfeed02374", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -3158,7 +3158,7 @@ impl<'a> Resolver<'a> {\n                                         (_, _) => {\n                                             search_module = module_def.clone();\n \n-                                            // track extern crates for unused_extern_crate lint\n+                                            // track extern crates for unused_extern_crates lint\n                                             match module_def.def_id.get() {\n                                                 Some(did) => {\n                                                     self.used_crates.insert(did.krate);"}, {"sha": "98d02dfb8d7a8ab474dfc2922b29889ef3b4c1ce", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -43,7 +43,7 @@\n  *   taken to it, implementing them for Rust seems difficult.\n  */\n \n-#![allow(unsigned_negate)]\n+#![allow(unsigned_negation)]\n \n use std::collections::Map;\n use std::num::Int;\n@@ -393,12 +393,12 @@ fn mk_cenum(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> Repr {\n fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntType {\n     debug!(\"range_to_inttype: {} {}\", hint, bounds);\n     // Lists of sizes to try.  u64 is always allowed as a fallback.\n-    #[allow(non_uppercase_statics)]\n+    #[allow(non_upper_case_globals)]\n     static choose_shortest: &'static[IntType] = &[\n         attr::UnsignedInt(ast::TyU8), attr::SignedInt(ast::TyI8),\n         attr::UnsignedInt(ast::TyU16), attr::SignedInt(ast::TyI16),\n         attr::UnsignedInt(ast::TyU32), attr::SignedInt(ast::TyI32)];\n-    #[allow(non_uppercase_statics)]\n+    #[allow(non_upper_case_globals)]\n     static at_least_32: &'static[IntType] = &[\n         attr::UnsignedInt(ast::TyU32), attr::SignedInt(ast::TyI32)];\n "}, {"sha": "2782970b975ae8274b16a0ff7e6e547819120a2c", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array};"}, {"sha": "5fe10d2d8e7ca95873a3633caac76add4eb5b572", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n use libc::c_uint;\n use std::cmp;"}, {"sha": "d9819ee729456195e1597bb7810f6861d0fe1f71", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n use llvm;\n use llvm::{Integer, Pointer, Float, Double};"}, {"sha": "c688749a38959b8b6ede9b3fdcddd1b1e95f122c", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -218,20 +218,20 @@ use syntax::parse::token::special_idents;\n \n static DW_LANG_RUST: c_uint = 0x9000;\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static DW_TAG_auto_variable: c_uint = 0x100;\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static DW_TAG_arg_variable: c_uint = 0x101;\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static DW_ATE_boolean: c_uint = 0x02;\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static DW_ATE_float: c_uint = 0x04;\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static DW_ATE_signed: c_uint = 0x05;\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static DW_ATE_unsigned: c_uint = 0x07;\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static DW_ATE_unsigned_char: c_uint = 0x08;\n \n static UNKNOWN_LINE_NUMBER: c_uint = 0;"}, {"sha": "906e9e8bfa0147a0302c89dc7141fc93f9b4c935", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n use llvm;\n use llvm::{SequentiallyConsistent, Acquire, Release, AtomicXchg, ValueRef};"}, {"sha": "0daa53e6fea872cb96bd4480f775800d8a729933", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n use llvm;\n use llvm::{TypeRef, Bool, False, True, TypeKind, ValueRef};"}, {"sha": "6defc594fb8b5b7001d7352c9482241f0e3ac078", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -2215,7 +2215,7 @@ macro_rules! def_type_content_sets(\n         mod $mname {\n             use middle::ty::TypeContents;\n             $(\n-                #[allow(non_uppercase_statics)]\n+                #[allow(non_upper_case_globals)]\n                 pub const $name: TypeContents = TypeContents { bits: $bits };\n              )+\n         }\n@@ -4670,7 +4670,7 @@ pub fn unboxed_closure_upvars(tcx: &ctxt, closure_id: ast::DefId, substs: &Subst\n }\n \n pub fn is_binopable(cx: &ctxt, ty: t, op: ast::BinOp) -> bool {\n-    #![allow(non_uppercase_statics)]\n+    #![allow(non_upper_case_globals)]\n     static tycat_other: int = 0;\n     static tycat_bool: int = 1;\n     static tycat_char: int = 2;"}, {"sha": "73f595dbedc2e52a5638cb569493eafd416921d5", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -46,7 +46,7 @@\n // future).  If you want to resolve everything but one type, you are\n // probably better off writing `resolve_all - resolve_ivar`.\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n use middle::ty::{FloatVar, FloatVid, IntVar, IntVid, RegionVid, TyVar, TyVid};\n use middle::ty::{IntType, UintType};"}, {"sha": "19dd6b8459f0424cc858472c337ead8d3f8794c3", "filename": "src/librustc_back/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc_back%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc_back%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fabi.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n pub const box_field_refcnt: uint = 0u;\n pub const box_field_drop_glue: uint = 1u;"}, {"sha": "06456a91e03f361cf655a4d990cb339e4c2b1155", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)]"}, {"sha": "3e8ebc00579e3b990b60f6c59147c2eff04f0be6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -212,7 +212,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main:\n     if lints {\n         prog.push_str(r\"\n #![deny(warnings)]\n-#![allow(unused_variable, dead_assignment, unused_mut, unused_attribute, dead_code)]\n+#![allow(unused_variables, unused_assignments, unused_mut, unused_attributes, dead_code)]\n \");\n     }\n "}, {"sha": "2932a3dd4a824cf86d446ffe7d2e4b6fef0034dc", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,7 +10,7 @@\n \n //! Unwind library interface\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)] // these are just bindings"}, {"sha": "14275d070f0c91c5a5190e2f371545348a2cc4a2", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -66,7 +66,7 @@ use task::{Task, LocalStorage};\n  */\n pub type Key<T> = &'static KeyValue<T>;\n \n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n pub enum KeyValue<T> { KeyValueKey }\n \n // The task-local-map stores all TLD information for the currently running"}, {"sha": "06d1efdcd704aeb886efa0e91ce1fa5aced289ef", "filename": "src/librustrt/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustrt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibrustrt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Futil.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -28,9 +28,9 @@ pub const ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) ||\n \n pub struct Stdio(libc::c_int);\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const Stdout: Stdio = Stdio(libc::STDOUT_FILENO);\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const Stderr: Stdio = Stdio(libc::STDERR_FILENO);\n \n impl fmt::FormatWriter for Stdio {"}, {"sha": "6663250b73b539e59bb73c769f71da6e1a67fe9c", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -12,7 +12,7 @@\n // Copyright (c) 2011 Google Inc.\n \n #![forbid(non_camel_case_types)]\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n /*!\n JSON parsing and serialization"}, {"sha": "97a1f68606f540cefa9a8a1ab49ae51c0eb6073f", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -258,7 +258,7 @@ macro_rules! bitflags {\n }\n \n #[cfg(test)]\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n mod tests {\n     use hash;\n     use option::{Some, None};"}, {"sha": "23cae2443c3a2def672f952d02f1e5bc8a45e52d", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -17,7 +17,7 @@ A simple wrapper over the platform's dynamic library facilities\n */\n \n #![experimental]\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use clone::Clone;\n use collections::MutableSeq;"}, {"sha": "06ed183e93679c92f0d4816ce75cb47ddb95c352", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,7 +10,7 @@\n \n //! Utility mixins that apply to all Readers and Writers\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n // FIXME: Not sure how this should be structured\n // FIXME: Iteration should probably be considered separately"}, {"sha": "6d6c0c0dd758bd06dd893a7e8762138667e956bc", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -1856,60 +1856,60 @@ bitflags! {\n         const ALL_PERMISSIONS = USER_RWX.bits | GROUP_RWX.bits | OTHER_RWX.bits,\n \n         // Deprecated names\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use USER_READ instead\"]\n         const UserRead     = USER_READ.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use USER_WRITE instead\"]\n         const UserWrite    = USER_WRITE.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use USER_EXECUTE instead\"]\n         const UserExecute  = USER_EXECUTE.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use GROUP_READ instead\"]\n         const GroupRead    = GROUP_READ.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use GROUP_WRITE instead\"]\n         const GroupWrite   = GROUP_WRITE.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use GROUP_EXECUTE instead\"]\n         const GroupExecute = GROUP_EXECUTE.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use OTHER_READ instead\"]\n         const OtherRead    = OTHER_READ.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use OTHER_WRITE instead\"]\n         const OtherWrite   = OTHER_WRITE.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use OTHER_EXECUTE instead\"]\n         const OtherExecute = OTHER_EXECUTE.bits,\n \n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use USER_RWX instead\"]\n         const UserRWX  = USER_RWX.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use GROUP_RWX instead\"]\n         const GroupRWX = GROUP_RWX.bits,\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use OTHER_RWX instead\"]\n         const OtherRWX = OTHER_RWX.bits,\n \n         #[doc = \"Deprecated: use `USER_FILE` instead.\"]\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use USER_FILE instead\"]\n         const UserFile = USER_FILE.bits,\n \n         #[doc = \"Deprecated: use `USER_DIR` instead.\"]\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use USER_DIR instead\"]\n         const UserDir  = USER_DIR.bits,\n         #[doc = \"Deprecated: use `USER_EXEC` instead.\"]\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use USER_EXEC instead\"]\n         const UserExec = USER_EXEC.bits,\n \n         #[doc = \"Deprecated: use `ALL_PERMISSIONS` instead\"]\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         #[deprecated = \"use ALL_PERMISSIONS instead\"]\n         const AllPermissions = ALL_PERMISSIONS.bits,\n     }"}, {"sha": "3c72f58b10d8fdf8918ad318f901e9997401d75b", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -17,7 +17,7 @@ getaddrinfo()\n \n */\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use iter::Iterator;\n use io::{IoResult, IoError};\n@@ -91,7 +91,7 @@ pub fn get_host_addresses(host: &str) -> IoResult<Vec<IpAddr>> {\n ///\n /// FIXME: this is not public because the `Hint` structure is not ready for public\n ///      consumption just yet.\n-#[allow(unused_variable)]\n+#[allow(unused_variables)]\n fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n           -> IoResult<Vec<Info>> {\n     let hint = hint.map(|Hint { family, socktype, protocol, flags }| {"}, {"sha": "e93af7446990a83b4ef0ca6d9f653065bbdb3acc", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -13,7 +13,7 @@\n //! This module contains functions useful for parsing, formatting, and\n //! manipulating IP addresses.\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use collections::Collection;\n use fmt;"}, {"sha": "8c7deadebea10279ae386389584eda0aa2664c47", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -22,7 +22,7 @@ instances as clients.\n \n */\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use prelude::*;\n "}, {"sha": "c77cffd561e66fdef30f609120bc8324e2efa5f5", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -13,7 +13,7 @@\n //! Currently these aren't particularly useful, there only exists bindings\n //! enough so that pipes can be created to child processes.\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use prelude::*;\n "}, {"sha": "4e5f8822acb40f097df7993627fef3e3fdeb423c", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n //! Bindings for executing child processes\n \n #![allow(experimental)]\n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n use prelude::*;\n "}, {"sha": "67080f4551f06661a6222095ca83f01f85bb9400", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -113,7 +113,7 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n \n #![reexport_test_harness_main = \"test_main\"]\n "}, {"sha": "0712719dd042d0c2f30c2ce88ca2f5512f423c2e", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -304,11 +304,11 @@ macro_rules! println(\n #[macro_export]\n macro_rules! local_data_key(\n     ($name:ident: $ty:ty) => (\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         static $name: ::std::local_data::Key<$ty> = &::std::local_data::KeyValueKey;\n     );\n     (pub $name:ident: $ty:ty) => (\n-        #[allow(non_uppercase_statics)]\n+        #[allow(non_upper_case_globals)]\n         pub static $name: ::std::local_data::Key<$ty> = &::std::local_data::KeyValueKey;\n     );\n )"}, {"sha": "0b2f17b8f93cc95f52476026a1f9c36578f28abf", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,8 +11,8 @@\n //! Operations and constants for 32-bits floats (`f32` type)\n \n #![experimental]\n-#![allow(missing_doc)]\n-#![allow(unsigned_negate)]\n+#![allow(missing_docs)]\n+#![allow(unsigned_negation)]\n #![doc(primitive = \"f32\")]\n \n use prelude::*;"}, {"sha": "35555b140815a8f04a472a325d10cf87c0be2042", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n //! Operations and constants for 64-bits floats (`f64` type)\n \n #![experimental]\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n #![doc(primitive = \"f64\")]\n \n use prelude::*;"}, {"sha": "ffe162cbc64fcc80b75251e9ea7eea553a9381b3", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -14,7 +14,7 @@\n //! u32, u64, uint, i8, i16, i32, i64, int, f32, f64}`.\n \n #![experimental]\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use option::Option;\n "}, {"sha": "f372cedecb601b87bcc616a30df03f5a1a2fd631", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,7 +10,7 @@\n //\n // ignore-lexer-test FIXME #15679\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use char;\n use clone::Clone;"}, {"sha": "c69c3ffa41c0e49c8e6ebdca4ffa294247243857", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n #![experimental]\n #![macro_escape]\n #![doc(hidden)]\n-#![allow(unsigned_negate)]\n+#![allow(unsigned_negation)]\n \n macro_rules! uint_module (($T:ty) => (\n "}, {"sha": "6e1eb82768cdbe4868de0e1a18b9ac7819ce9c89", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -28,7 +28,7 @@\n \n #![experimental]\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n #![allow(non_snake_case)]\n \n use clone::Clone;"}, {"sha": "0d7a467b313f2e9d201d159ff981bde566c5e156", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -457,9 +457,9 @@ fn normalize_helper<'a>(v: &'a [u8], is_abs: bool) -> Option<Vec<&'a [u8]>> {\n     }\n }\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static dot_static: &'static [u8] = b\".\";\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static dot_dot_static: &'static [u8] = b\"..\";\n \n #[cfg(test)]"}, {"sha": "bf5bdc8a308e39de711093969d99bfa70851f1f2", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -88,7 +88,7 @@ mod imp {\n     #[repr(C)]\n     struct SecRandom;\n \n-    #[allow(non_uppercase_statics)]\n+    #[allow(non_upper_case_globals)]\n     static kSecRandomDefault: *const SecRandom = 0 as *const SecRandom;\n \n     #[link(name = \"Security\", kind = \"framework\")]"}, {"sha": "b97e80d0dc1d06e778719e6138917d86e35ee83e", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -52,7 +52,7 @@ Several modules in `core` are clients of `rt`:\n #![experimental]\n \n // FIXME: this should not be here.\n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use failure;\n use rustrt;"}, {"sha": "be0af3a3f1ae320357b9528e1054232b46a7d2da", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -24,7 +24,7 @@\n  * ```\n  */\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use core::prelude::*;\n use core::mem::replace;"}, {"sha": "ffff32f04c488a4e2337d283f2d89c4682044d46", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -29,7 +29,7 @@\n \n #![feature(phase, globs, macro_rules, unsafe_destructor)]\n #![feature(import_shadowing)]\n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n #![no_std]\n \n #[phase(plugin, link)] extern crate core;"}, {"sha": "f75511ecbc2e42d87d4ed9394a3b524e345ad213", "filename": "src/libsync/mpmc_bounded_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmpmc_bounded_queue.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -26,7 +26,7 @@\n  */\n \n #![experimental]\n-#![allow(missing_doc, dead_code)]\n+#![allow(missing_docs, dead_code)]\n \n // http://www.1024cores.net/home/lock-free-algorithms/queues/bounded-mpmc-queue\n "}, {"sha": "dc41f3d9279578574429d9198e0b552af610dbf9", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -47,9 +47,9 @@ pub enum Architecture {\n     Mipsel\n }\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n const IntelBits: u32 = (1 << (X86 as uint)) | (1 << (X86_64 as uint));\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n const ArmBits: u32 = (1 << (Arm as uint));\n \n pub struct AbiData {\n@@ -72,7 +72,7 @@ pub enum AbiArchitecture {\n     Archs(u32)\n }\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n static AbiDatas: &'static [AbiData] = &[\n     // Platform-specific ABIs\n     AbiData {abi: Cdecl, name: \"cdecl\", abi_arch: Archs(IntelBits)},"}, {"sha": "8b0e1f32fd4c90dadaf277d4d3722cc39758b3df", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -291,7 +291,7 @@ pub fn operator_prec(op: ast::BinOp) -> uint {\n \n /// Precedence of the `as` operator, which is a binary operator\n /// not appearing in the prior table.\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub static as_prec: uint = 12u;\n \n pub fn empty_generics() -> Generics {"}, {"sha": "667255c22916907cbe84f2462f514b830bb0960e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -469,7 +469,7 @@ macro_rules! declare_special_idents_and_keywords {(\n     pub mod special_idents {\n         use ast;\n         $(\n-            #[allow(non_uppercase_statics)]\n+            #[allow(non_upper_case_globals)]\n             pub const $si_static: ast::Ident = ast::Ident {\n                 name: ast::Name($si_name),\n                 ctxt: 0,\n@@ -480,7 +480,7 @@ macro_rules! declare_special_idents_and_keywords {(\n     pub mod special_names {\n         use ast;\n         $(\n-            #[allow(non_uppercase_statics)]\n+            #[allow(non_upper_case_globals)]\n             pub const $si_static: ast::Name =  ast::Name($si_name);\n         )*\n     }"}, {"sha": "4f58637b7fea4577ee5a41503723450c8aaaa248", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -90,10 +90,10 @@ pub fn rust_printer_annotated<'a>(writer: Box<io::Writer+'static>,\n     }\n }\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const indent_unit: uint = 4u;\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const default_columns: uint = 78u;\n \n /// Requires you to pass an input filename and reader so that"}, {"sha": "02a2613d4818a498806d7e03b2ce7e05ef2e4f4d", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -52,7 +52,7 @@\n #![allow(unknown_features)]\n #![feature(macro_rules, phase, slicing_syntax)]\n \n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n \n #[phase(plugin, link)] extern crate log;\n "}, {"sha": "5a0f10ce5207245f126122e65d842a5c62081363", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -38,7 +38,7 @@ enum FormatState {\n }\n \n /// Types of parameters a capability can use\n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n #[deriving(Clone)]\n pub enum Param {\n     Words(String),"}, {"sha": "9eb7216fba0bfedea7a58cbdd764310a081b7ef9", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n //! ncurses-compatible compiled terminfo format parsing (term(5))\n "}, {"sha": "a39769d0fa4210563df9c19fb4bbe2cf446bbaf8", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_doc)]\n+#![allow(missing_docs)]\n \n use std::collections::hashmap;\n use std::collections::hashmap::{Occupied, Vacant};\n@@ -128,7 +128,7 @@ pub trait Stats <T: FloatMath + FromPrimitive>{\n \n /// Extracted collection of all the summary statistics of a sample set.\n #[deriving(Clone, PartialEq)]\n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n pub struct Summary<T> {\n     pub sum: T,\n     pub min: T,"}, {"sha": "5fe91a87056d42dd5e70bc654ecb1fd2e4a8dd5b", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,7 +10,7 @@\n \n // NOTE: The following code was generated by \"src/etc/unicode.py\", do not edit directly\n \n-#![allow(missing_doc, non_uppercase_statics, non_snake_case)]\n+#![allow(missing_docs, non_upper_case_globals, non_snake_case)]\n \n /// The version of [Unicode](http://www.unicode.org/)\n /// that the `UnicodeChar` and `UnicodeStrSlice` traits are based on."}, {"sha": "8f83c9ec94fbd86c0b60e8b931a5f17a38afe710", "filename": "src/test/compile-fail-fulldeps/syntax-extension-regex-unused-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused-static.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -15,9 +15,9 @@\n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n \n-#[deny(unused_variable)]\n+#[deny(unused_variables)]\n #[deny(dead_code)]\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n \n // Tests to make sure that extraneous dead code warnings aren't emitted from\n // the code generated by regex!."}, {"sha": "b4dda05f42d2b3e5820db2c16498bf22a89a9009", "filename": "src/test/compile-fail-fulldeps/syntax-extension-regex-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fsyntax-extension-regex-unused.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -15,7 +15,7 @@\n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n \n-#[deny(unused_variable)]\n+#[deny(unused_variables)]\n #[deny(dead_code)]\n \n // Tests to make sure that extraneous dead code warnings aren't emitted from"}, {"sha": "b29899e1940e24c1fe1de03e53e30c8a74ba6045", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(asm)]\n \n-#![allow(dead_code, non_uppercase_statics)]\n+#![allow(dead_code, non_upper_case_globals)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]"}, {"sha": "0b40a78425f6ee45c21eb30f55a14797b1c5b07e", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_variable)]\n-#![allow(dead_assignment)]\n+#![allow(unused_variables)]\n+#![allow(unused_assignments)]\n \n fn separate_arms() {\n     // Here both arms perform assignments, but only is illegal."}, {"sha": "0b335a526a4e372f6acecfd20b3a7d43b23431d4", "filename": "src/test/compile-fail/issue-10656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fissue-10656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fissue-10656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10656.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern: missing documentation for crate\n \n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n #![crate_type=\"lib\"]"}, {"sha": "9225889ef6348df7df644b98304b1b30162d4947", "filename": "src/test/compile-fail/issue-14309.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(ctypes)]\n+#![deny(improper_ctypes)]\n #![allow(dead_code)]\n \n struct A {"}, {"sha": "e3ad2dd1b067b5c6d0fefba3462089cf243bfbba", "filename": "src/test/compile-fail/issue-17999.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unused_variable)]\n+#![deny(unused_variables)]\n \n fn main() {\n     for _ in range(1i, 101) {"}, {"sha": "455cde63f272afa43f0e6e81de36575b9a3781a1", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(unreachable_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(dead_code)]\n \n fn fail_len(v: Vec<int> ) -> uint {"}, {"sha": "dea933085de4e0c098e6a5a0790f8b2e9c487fb2", "filename": "src/test/compile-fail/lint-ctypes-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(ctypes)]\n+#![deny(improper_ctypes)]\n #![allow(dead_code)]\n \n enum Z { }"}, {"sha": "1755a9a2481b4ef9a034785e8b3b1facf8d6c401", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(ctypes)]\n+#![deny(improper_ctypes)]\n \n extern crate libc;\n "}, {"sha": "1283c61e41a004a9cc83b88718b2c7e4eb8f7e74", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n #![no_std]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n #![deny(dead_code)]\n \n #![crate_type=\"lib\"]"}, {"sha": "c7199eec8a3e89ac120a1fe72aba1a32366e5403", "filename": "src/test/compile-fail/lint-dead-code-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![deny(dead_code)]\n \n struct Foo;"}, {"sha": "4ef76030bcc5414f6ec1b2cce602781ac065b39b", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n #![deny(dead_code)]\n "}, {"sha": "a698bf61f5894bc416d617a901c6904a9739639a", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(struct_variant)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n #![deny(dead_code)]\n "}, {"sha": "1f0d91dcb3cd93665731c6bfbba7ca410cd84af2", "filename": "src/test/compile-fail/lint-dead-code-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(struct_variant)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![deny(dead_code)]\n \n enum Enum1 {"}, {"sha": "efb284495648a548dac117905a788bd3e9cd03e5", "filename": "src/test/compile-fail/lint-directives-on-use-items-issue-10534.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-directives-on-use-items-issue-10534.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(unused_imports)]\n-#![allow(non_uppercase_statics)]\n+#![allow(non_upper_case_globals)]\n \n // The aim of this test is to ensure that deny/allow/warn directives\n // are applied to individual \"use\" statements instead of silently"}, {"sha": "18ea5a383f6b49e7ca8fd1e8dbf361d2855676c3", "filename": "src/test/compile-fail/lint-misplaced-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(unused_attribute)]\n+#![deny(unused_attributes)]\n \n mod a {\n     #![crate_type = \"bin\"] //~ ERROR unused attribute"}, {"sha": "f0b6abe28d37af117d09c423fa4412527ec17a68", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -12,7 +12,7 @@\n // injected intrinsics by the compiler.\n #![feature(struct_variant)]\n #![feature(globs)]\n-#![deny(missing_doc)]\n+#![deny(missing_docs)]\n #![allow(dead_code)]\n \n //! Some garbage docs for the crate here\n@@ -28,7 +28,7 @@ pub struct PubFoo { //~ ERROR: missing documentation\n     b: int,\n }\n \n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n pub struct PubFoo2 {\n     pub a: int,\n     pub c: int,\n@@ -41,7 +41,7 @@ pub mod pub_module_no_dox {} //~ ERROR: missing documentation\n pub fn foo() {}\n pub fn foo2() {} //~ ERROR: missing documentation\n fn foo3() {}\n-#[allow(missing_doc)] pub fn foo4() {}\n+#[allow(missing_docs)] pub fn foo4() {}\n \n /// dox\n pub trait A {\n@@ -50,7 +50,7 @@ pub trait A {\n     /// dox\n     fn foo_with_impl() {}\n }\n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n trait B {\n     fn foo();\n     fn foo_with_impl() {}\n@@ -59,7 +59,7 @@ pub trait C { //~ ERROR: missing documentation\n     fn foo(); //~ ERROR: missing documentation\n     fn foo_with_impl() {} //~ ERROR: missing documentation\n }\n-#[allow(missing_doc)] pub trait D {}\n+#[allow(missing_docs)] pub trait D {}\n \n impl Foo {\n     pub fn foo() {}\n@@ -71,10 +71,10 @@ impl PubFoo {\n     /// dox\n     pub fn foo1() {}\n     fn foo2() {}\n-    #[allow(missing_doc)] pub fn foo3() {}\n+    #[allow(missing_docs)] pub fn foo3() {}\n }\n \n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n trait F {\n     fn a();\n     fn b(&self);\n@@ -86,7 +86,7 @@ impl F for Foo {\n     fn b(&self) {}\n }\n \n-// It sure is nice if doc(hidden) implies allow(missing_doc), and that it\n+// It sure is nice if doc(hidden) implies allow(missing_docs), and that it\n // applies recursively\n #[doc(hidden)]\n mod a {\n@@ -121,7 +121,7 @@ pub enum PubBaz2 {\n     },\n }\n \n-#[allow(missing_doc)]\n+#[allow(missing_docs)]\n pub enum PubBaz3 {\n     PubBaz3A {\n         pub a: int,"}, {"sha": "7ff5cafd097a2d990629141b547637d3158b74bc", "filename": "src/test/compile-fail/lint-non-uppercase-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![forbid(non_uppercase_statics)]\n+#![forbid(non_upper_case_globals)]\n #![allow(dead_code)]\n \n static foo: int = 1; //~ ERROR static constant `foo` should have an uppercase name such as `FOO`"}, {"sha": "e4fd042d09845369a6226777abb947d308a0ee09", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(unused_attribute)]\n+#![deny(unused_attributes)]\n #![allow(dead_code)]\n \n #[abi=\"stdcall\"] extern {} //~ ERROR unused attribute"}, {"sha": "5ee16f0aa26e5687c394102f4b289a44677bb943", "filename": "src/test/compile-fail/lint-owned-heap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![forbid(owned_heap_memory)]\n+#![forbid(box_pointers)]\n \n \n struct Foo {"}, {"sha": "18a5a8ecc5d527d72fc7d2579bc45ba718f4002f", "filename": "src/test/compile-fail/lint-qualification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unnecessary_qualification)]\n+#![deny(unused_qualifications)]\n \n mod foo {\n     pub fn bar() {}"}, {"sha": "7ffec37772fe8587c6bbdccb3dc1b28be73f141d", "filename": "src/test/compile-fail/lint-renaming.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-renaming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-renaming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-renaming.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that lint deprecation works\n+\n+#[deny(unused_variable)] //~ warning: lint unused_variable has been renamed to unused_variables\n+pub fn main() {\n+    let x = 0u8; //~ error: unused variable:\n+}"}, {"sha": "47dc93dae13e9a8cbb7573f12fe74c3289e2436b", "filename": "src/test/compile-fail/lint-type-overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n //\n \n-#![deny(type_overflow)]\n+#![deny(overflowing_literals)]\n \n fn test(x: i8) {\n     println!(\"x {}\", x);\n }\n \n-#[allow(unused_variable)]\n+#[allow(unused_variables)]\n fn main() {\n     let x1: u8 = 255; // should be OK\n     let x1: u8 = 256; //~ error: literal out of range for its type"}, {"sha": "e4cb92477c2997b52ae26c97df6eb3b7c49b8313", "filename": "src/test/compile-fail/lint-unknown-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#![deny(unused_attribute)]\n+#![deny(unused_attributes)]\n \n #![mutable_doc] //~ ERROR unused attribute\n "}, {"sha": "b3cf8257b8f6efa42e6a2f0538e98d0b8a10f554", "filename": "src/test/compile-fail/lint-unnecessary-casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![forbid(unnecessary_typecast)]\n+#![forbid(unused_typecasts)]\n \n fn foo_i32(_: i32) {}\n "}, {"sha": "1c0401ec56b853bbbde4ced5ec2aef8f51b75ab3", "filename": "src/test/compile-fail/lint-unnecessary-import-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-import-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-import-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-import-braces.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unnecessary_import_braces)]\n+#![deny(unused_import_braces)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n "}, {"sha": "826a4ea5a8080d83a4e730100813f9b7c6ce2e41", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unnecessary_parens)]\n+#![deny(unused_parens)]\n #![feature(if_let,while_let)]\n \n #[deriving(Eq, PartialEq)]"}, {"sha": "8899d06804f1e88442f7f6bc45195b5dbbaf4f52", "filename": "src/test/compile-fail/lint-unsafe-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,12 +10,12 @@\n \n #![allow(unused_unsafe)]\n #![allow(dead_code)]\n-#![deny(unsafe_block)]\n+#![deny(unsafe_blocks)]\n #![feature(macro_rules)]\n \n unsafe fn allowed() {}\n \n-#[allow(unsafe_block)] fn also_allowed() { unsafe {} }\n+#[allow(unsafe_blocks)] fn also_allowed() { unsafe {} }\n \n macro_rules! unsafe_in_macro {\n     () => {"}, {"sha": "a63e8e913f4c429b5b75e128832b4112d85748bc", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n #![feature(globs)]\n-#![deny(unused_extern_crate)]\n-#![allow(unused_variable)]\n+#![deny(unused_extern_crates)]\n+#![allow(unused_variables)]\n \n extern crate libc; //~ ERROR: unused extern crate\n "}, {"sha": "370f664e4303304d0df03566c2f22fc954352d87", "filename": "src/test/compile-fail/lint-unused-mut-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n #![allow(dead_code)]\n #![deny(unused_mut)]\n "}, {"sha": "29b4686198be1fc8a91a539d3282ba4e5b3cef9d", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,8 +10,8 @@\n \n // Exercise the unused_mut attribute in some positive and negative cases\n \n-#![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n #![allow(dead_code)]\n #![deny(unused_mut)]\n "}, {"sha": "18baf7a9c3f75a8888d316e8c4338dde27f13168", "filename": "src/test/compile-fail/liveness-dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![deny(dead_assignment)]\n+#![deny(unused_assignments)]\n \n fn f1(x: &mut int) {\n     *x = 1; // no error"}, {"sha": "a747615199e6f6a4ad758591bce5251864c74f12", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unused_variable)]\n-#![deny(dead_assignment)]\n+#![deny(unused_variables)]\n+#![deny(unused_assignments)]\n #![allow(dead_code, non_camel_case_types)]\n \n fn f1(x: int) {\n@@ -20,7 +20,7 @@ fn f1b(x: &mut int) {\n     //~^ ERROR unused variable: `x`\n }\n \n-#[allow(unused_variable)]\n+#[allow(unused_variables)]\n fn f1c(x: int) {}\n \n fn f1d() {\n@@ -48,14 +48,14 @@ fn f3b() {\n     }\n }\n \n-#[allow(unused_variable)]\n+#[allow(unused_variables)]\n fn f3c() {\n     let mut z = 3i;\n     loop { z += 4i; }\n }\n \n-#[allow(unused_variable)]\n-#[allow(dead_assignment)]\n+#[allow(unused_variables)]\n+#[allow(unused_assignments)]\n fn f3d() {\n     let mut x = 3i;\n     x += 4i;"}, {"sha": "15a832aad89ad8af60baa74a9dd6b10e127de9ce", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,9 +11,9 @@\n // Issue #7526: lowercase static constants in patterns look like bindings\n \n #![allow(dead_code)]\n-#![deny(non_uppercase_statics)]\n+#![deny(non_upper_case_globals)]\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const a : int = 97;\n \n fn f() {\n@@ -26,7 +26,7 @@ fn f() {\n }\n \n mod m {\n-    #[allow(non_uppercase_statics)]\n+    #[allow(non_upper_case_globals)]\n     pub const aha : int = 7;\n }\n "}, {"sha": "4c90b1f0eeabfa9fbbdc05b8d5a2cae73c10e428", "filename": "src/test/compile-fail/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -17,7 +17,7 @@\n // lifetimes are sublifetimes of 'static.\n \n #![allow(dead_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct S;\n "}, {"sha": "87342352e9ae40b5fcffd8cd5fe12b18eb742abe", "filename": "src/test/compile-fail/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(unreachable_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn main() {\n   loop{}"}, {"sha": "e797c7eec5f5fcbdb0a268eb7191c7c2ee982810", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![deny(unused_attribute)]\n+#![deny(unused_attributes)]\n #![allow(dead_code, unused_imports)]\n \n #![foo] //~ ERROR unused attribute"}, {"sha": "1263d7c5710f60062d0208143bcebe58f1a9c7d8", "filename": "src/test/compile-fail/unused-result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-result.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unused_result, unused_must_use)]\n+#![deny(unused_results, unused_must_use)]\n #![allow(dead_code)]\n \n #[must_use]\n@@ -23,14 +23,14 @@ fn bar() -> int { return foo::<int>(); }\n fn baz() -> MustUse { return foo::<MustUse>(); }\n fn qux() -> MustUseMsg { return foo::<MustUseMsg>(); }\n \n-#[allow(unused_result)]\n+#[allow(unused_results)]\n fn test() {\n     foo::<int>();\n     foo::<MustUse>(); //~ ERROR: unused result which must be used\n     foo::<MustUseMsg>(); //~ ERROR: unused result which must be used: some message\n }\n \n-#[allow(unused_result, unused_must_use)]\n+#[allow(unused_results, unused_must_use)]\n fn test2() {\n     foo::<int>();\n     foo::<MustUse>();"}, {"sha": "5f7a2f69c4f918e27c510d61306e8ac1d5495c40", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![forbid(ctypes)]\n+#![forbid(improper_ctypes)]\n #![allow(dead_code)]\n \n mod xx {"}, {"sha": "b2f82493fa78d3a3b9575507aedc21df8c865989", "filename": "src/test/debuginfo/basic-types-globals-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-metadata.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -46,7 +46,7 @@\n // gdb-check:type = f64\n // gdb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(dead_code)]\n \n "}, {"sha": "d08feadefdac086a8ec204926468ee56739b6a41", "filename": "src/test/debuginfo/basic-types-globals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -52,7 +52,7 @@\n // gdb-check:$14 = 3.5\n // gdb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n static B: bool = false;\n static I: int = -1;"}, {"sha": "e46177c884481241843fc787a3e2a4a079c2144b", "filename": "src/test/debuginfo/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -49,7 +49,7 @@\n // gdb-check:[...]![...]_yyy([...])([...]);\n // gdb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn main() {\n     let unit: () = ();"}, {"sha": "241bfcd7510c8ec73977e8c2b4372c807de4ace9", "filename": "src/test/debuginfo/basic-types-mut-globals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-mut-globals.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -87,7 +87,7 @@\n // gdb-command:detach\n // gdb-command:quit\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n static mut B: bool = false;\n static mut I: int = -1;"}, {"sha": "525d71b560fc495093629d010dda631e1f5af5dc", "filename": "src/test/debuginfo/basic-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -89,7 +89,7 @@\n // lldb-command:print f64\n // lldb-check:[...]$12 = 3.5\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn main() {\n     let b: bool = false;"}, {"sha": "eac3652f163c0b4341e12dfca92aa3beb40f947d", "filename": "src/test/debuginfo/borrowed-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -110,7 +110,7 @@\n // lldb-command:print *f64_ref\n // lldb-check:[...]$12 = 3.5\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn main() {\n     let bool_val: bool = true;"}, {"sha": "b2431d7221fe8059de1be66f254b6836be8460b6", "filename": "src/test/debuginfo/borrowed-c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-c-style-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -42,7 +42,7 @@\n // lldb-command:print *the_c_ref\n // lldb-check:[...]$2 = TheC\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n enum ABC { TheA, TheB, TheC }\n "}, {"sha": "8b72f2538c556c1ca44ebde3b4106f2e24d8986c", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -41,7 +41,7 @@\n // lldb-command:print *univariant_ref\n // lldb-check:[...]$2 = TheOnlyCase(4820353753753434)\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![feature(struct_variant)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since"}, {"sha": "a9c5a59488f1840a32d3bcea7e0636957c117c39", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -65,7 +65,7 @@\n // lldb-command:print *unique_val_interior_ref_2\n // lldb-check:[...]$6 = 26.5\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct SomeStruct {\n     x: int,"}, {"sha": "f5afa008d2e80cd0967ece7ef6de62d6ce61a1a3", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -43,7 +43,7 @@\n // lldb-check:[...]$2 = (-17, -22)\n \n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn main() {\n     let stack_val: (i16, f32) = (-14, -19f32);"}, {"sha": "2592b166256630e384ae37cc0c9de452a9c01a43", "filename": "src/test/debuginfo/borrowed-unique-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -112,7 +112,7 @@\n // lldb-command:print *f64_ref\n // lldb-check:[...]$12 = 3.5\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n \n fn main() {"}, {"sha": "8075d9ab69d9fd3d2df15f9cb3d13089f816e287", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -33,7 +33,7 @@\n // lldb-command:print *b\n // lldb-check:[...]$1 = (2, 3.5)\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn main() {\n     let a = box 1i;"}, {"sha": "87eea49dd0c4baa4cdadafbbc983458f17346de7", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -36,7 +36,7 @@\n // lldb-command:print *unique_dtor\n // lldb-check:[...]$1 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct StructWithSomePadding {\n     x: i16,"}, {"sha": "ec385840d1df796c670ef895e97dbde03d63002b", "filename": "src/test/debuginfo/c-style-enum-in-composite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum-in-composite.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -66,7 +66,7 @@\n // lldb-command:print struct_with_drop\n // lldb-check:[...]$6 = (StructWithDrop { a: OneHundred, b: Vienna }, 9)\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n enum AnEnum {\n     OneHundred = 100,"}, {"sha": "9f80f6475e25235531596c8ab8c0e75ba652f025", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -101,7 +101,7 @@\n // lldb-command:print single_variant\n // lldb-check:[...]$6 = TheOnlyVariant\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(dead_code)]\n \n enum AutoDiscriminant {"}, {"sha": "993a1a55012df15ada5bbdb015eca76426ba0a02", "filename": "src/test/debuginfo/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -333,7 +333,7 @@\n // lldb-check:[...]$48 = 62\n // lldb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n \n struct Struct {"}, {"sha": "a16298349ed8538974c28c64e5754111f8e32bcd", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -245,7 +245,7 @@\n // lldb-check:[...]$42 = 56\n \n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct Struct {\n     a: i64,"}, {"sha": "66407d68aa6b42f48bc74490a86be84641d72ab2", "filename": "src/test/debuginfo/evec-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -53,7 +53,7 @@\n // lldb-command:print struct_padded_at_end\n // lldb-check:[...]$4 = StructPaddedAtEnd { x: [22, 23], y: [24, 25] }\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct NoPadding1 {\n     x: [u32, ..3],"}, {"sha": "ea9802afe94467fce21af8551303eca7bf3301a7", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -236,7 +236,7 @@\n \n \n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n \n "}, {"sha": "359d14d2a5009fc7fd9103abd5034745bafcd975", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -245,7 +245,7 @@\n // lldb-check:[...]$31 = 45\n // lldb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n #[no_stack_check]\n fn immediate_args(a: int, b: bool, c: f64) {"}, {"sha": "dbeb87fd44afe1662b80e4f646161e12b3789e02", "filename": "src/test/debuginfo/function-prologue-stepping-regular.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-regular.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -125,7 +125,7 @@\n // lldb-check:[...]$31 = 45\n // lldb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn immediate_args(a: int, b: bool, c: f64) {\n     ()"}, {"sha": "378b27b3597430800ef162a509d05d370ceec885", "filename": "src/test/debuginfo/include_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Finclude_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Finclude_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Finclude_string.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -37,7 +37,7 @@\n \n // lldb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n // This test case makes sure that debug info does not ICE when include_str is\n // used multiple times (see issue #11322)."}, {"sha": "191b1d2a09cbd0a4ffa8bf6bc4780f8aca8831da", "filename": "src/test/debuginfo/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -373,8 +373,8 @@\n // lldb-check:[...]$47 = 10\n // lldb-command:continue\n \n-#![allow(unused_variable)]\n-#![allow(dead_assignment)]\n+#![allow(unused_variables)]\n+#![allow(unused_assignments)]\n \n static mut MUT_INT: int = 0;\n "}, {"sha": "292e42ba30bbb0e8eebfc205c5f42e25000a6e77", "filename": "src/test/debuginfo/limited-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -31,7 +31,7 @@\n // gdb-command:continue\n \n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct Struct {\n     a: i64,"}, {"sha": "6bb2313100f8a14c692b2c0af9ab4f5120342cbe", "filename": "src/test/debuginfo/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -48,7 +48,7 @@\n // lldb-command:print abc\n // lldb-check:[...]$2 = 30303\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn function_one() {\n     let abc = 10101i;"}, {"sha": "58fe9d250c97df11a66bcaeda5adabc0affee9af", "filename": "src/test/debuginfo/multiple-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -48,7 +48,7 @@\n // lldb-command:print c\n // lldb-check:[...]$2 = 30303\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn function_one() {\n     let a = 10101i;"}, {"sha": "a0c726157536adefcf8d281ccad1b55a73020093", "filename": "src/test/debuginfo/nil-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fnil-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -24,7 +24,7 @@\n // gdb-command:print second\n // gdb-check:$2 = {<No data fields>}\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n enum ANilEnum {}\n enum AnotherNilEnum {}"}, {"sha": "a739c9ee5fae378c63c501a77c434466374d888a", "filename": "src/test/debuginfo/no-debug-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -25,7 +25,7 @@\n // gdb-check:abc = 10\n // gdb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn function_with_debuginfo() {\n     let abc = 10u;"}, {"sha": "438a771b7be9d14510f92cd147a0c2624b05440d", "filename": "src/test/debuginfo/packed-struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct-with-destructor.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -76,7 +76,7 @@\n // lldb-check:[...]$7 = DeeplyNested { a: PackedInPacked { a: 1, b: Packed { x: 2, y: 3, z: 4 }, c: 5, d: Packed { x: 6, y: 7, z: 8 } }, b: UnpackedInPackedWithDrop { a: 9, b: Unpacked { x: 10, y: 11, z: 12 }, c: Unpacked { x: 13, y: 14, z: 15 }, d: 16 }, c: PackedInUnpacked { a: 17, b: Packed { x: 18, y: 19, z: 20 }, c: 21, d: Packed { x: 22, y: 23, z: 24 } }, d: PackedInUnpackedWithDrop { a: 25, b: Packed { x: 26, y: 27, z: 28 }, c: 29, d: Packed { x: 30, y: 31, z: 32 } }, e: UnpackedInPacked { a: 33, b: Unpacked { x: 34, y: 35, z: 36 }, c: Unpacked { x: 37, y: 38, z: 39 }, d: 40 }, f: PackedInPackedWithDrop { a: 41, b: Packed { x: 42, y: 43, z: 44 }, c: 45, d: Packed { x: 46, y: 47, z: 48 } } }\n \n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n #[repr(packed)]\n struct Packed {"}, {"sha": "906a1f4685b5e97570630d16ca18706e1e4b9da3", "filename": "src/test/debuginfo/packed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpacked-struct.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -62,7 +62,7 @@\n // lldb-command:print sizeof(packedInPacked)\n // lldb-check:[...]$5 = 40\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n #[repr(packed)]\n struct Packed {"}, {"sha": "6d26e2eff7a468818eeec240f0c394cf06b71ccb", "filename": "src/test/debuginfo/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -18,7 +18,7 @@\n // Test whether compiling a recursive enum definition crashes debug info generation. The test case\n // is taken from issue #11083.\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n pub struct Window<'a> {\n     callbacks: WindowCallbacks<'a>"}, {"sha": "1e64dc3a031456564abe93055e5c254b09123f77", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -72,7 +72,7 @@\n \n // gdb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![feature(struct_variant)]\n \n enum Opt<T> {"}, {"sha": "d8854eb9084534d4163d6dad08cca9cc985f116c", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -44,7 +44,7 @@\n // gdb-command:continue\n \n #![allow(experimental)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n use std::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n "}, {"sha": "83f77b08b6830710df157df3025e62b792a4826f", "filename": "src/test/debuginfo/simple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-struct.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -99,7 +99,7 @@\n // lldb-command:print padding_at_end\n // lldb-check:[...]$5 = PaddingAtEnd { x: -10014, y: 10015 }\n \n-#![allow(unused_variable)];\n+#![allow(unused_variables)];\n #![allow(dead_code)];\n \n struct NoPadding16 {"}, {"sha": "26239f7f62b0b33a522713daeece89908eaf3db6", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -95,7 +95,7 @@\n // lldb-command:print paddingAtEnd\n // lldb-check:[...]$6 = (15, 16)\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(dead_code)]\n \n static mut NO_PADDING_8: (i8, u8) = (-50, 50);"}, {"sha": "5e2ae478d7db5641629f6f3c75d33dd257cdc11f", "filename": "src/test/debuginfo/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -43,7 +43,7 @@\n // lldb-command:print univariant\n // lldb-check:[...]$2 = TheOnlyCase(Struct { x: 123, y: 456, z: 789 })\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct Struct {\n     x: u32,"}, {"sha": "1e0b84f1ef1afb3cfcddd4e91996517737e81b12", "filename": "src/test/debuginfo/struct-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-struct.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -59,7 +59,7 @@\n // lldb-command:print tree\n // lldb-check:[...]$7 = Tree { x: Simple { x: 25 }, y: InternalPaddingParent { x: InternalPadding { x: 26, y: 27 }, y: InternalPadding { x: 28, y: 29 }, z: InternalPadding { x: 30, y: 31 } }, z: BagInBag { x: Bag { x: Simple { x: 32 } } } }\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct Simple {\n     x: i32"}, {"sha": "d23c65e71a0d0998128f127be6fae41d47a4e4b8", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -50,7 +50,7 @@\n // lldb-command:print univariant\n // lldb-check:[...]$3 = TheOnlyCase { a: -1 }\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![feature(struct_variant)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since"}, {"sha": "c2372da35aaa4c3efd76cd3719b57c3da6d9e19a", "filename": "src/test/debuginfo/struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-with-destructor.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -46,7 +46,7 @@\n // lldb-command:print nested\n // lldb-check:[...]$3 = NestedOuter { a: NestedInner { a: WithDestructor { x: 7890, y: 9870 } } }\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct NoDestructor {\n     x: i32,"}, {"sha": "de74a4d8f91a1d647be4cca6d25e43914782610b", "filename": "src/test/debuginfo/trait-pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -15,7 +15,7 @@\n // compile-flags:-g\n // gdb-command:run\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n \n trait Trait {"}, {"sha": "5a47b1646483728a1e6bcbbe7f5569cfa52f2ff9", "filename": "src/test/debuginfo/tuple-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-struct.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -42,7 +42,7 @@\n // gdb-command:print mixed_padding\n // gdb-check:$10 = {x = {{40, 41, 42}, {43, 44}}, y = {45, 46, 47, 48}}\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct NoPadding1 {\n     x: (i32, i32),"}, {"sha": "b7f4b0efe0ce1963d8a421df23b4f46bd3f665e7", "filename": "src/test/debuginfo/tuple-in-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -59,7 +59,7 @@\n // lldb-command:print padding_at_end2\n // lldb-check:[...]$6 = ((21, 22), 23)\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn main() {\n     let no_padding1: ((u32, u32), u32, u32) = ((0, 1), 2, 3);"}, {"sha": "1c933637e3e776621e0a879ee0a56cb37372d929", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -50,7 +50,7 @@\n // lldb-command:print univariant\n // lldb-check:[...]$3 = TheOnlyCase(-1)\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "33382542ef298560da79c3277f6c942c412dd715", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -43,7 +43,7 @@\n // lldb-command:print *univariant\n // lldb-check:[...]$2 = TheOnlyCase(123234)\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![feature(struct_variant)]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since"}, {"sha": "8f128c428e78978fc612b560d431bc3488353ee7", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -81,7 +81,7 @@\n // lldb-check:[...]$11 = 8\n // lldb-command:continue\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct Struct {\n     a: int,"}, {"sha": "da2726782e9a66b36edcb7118fa905bbaf4a9e6d", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -38,7 +38,7 @@\n // lldb-command:print *owned\n // lldb-check:[...]$2 = 5\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct Struct {\n     a: int,"}, {"sha": "5d484bbacc8b8e66e7586728255160ecd27aeb48", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -46,7 +46,7 @@\n // lldb-command:print *owned\n // lldb-check:[...]$4 = 6\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct Struct {\n     a: int,"}, {"sha": "6d56ed32c31ead701fc39368676f1bef6ee4126d", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -80,7 +80,7 @@\n // lldb-command:print padded_struct\n // lldb-check:[...]$5 = &[AStruct { x: 10, y: 11, z: 12 }, AStruct { x: 13, y: 14, z: 15 }]\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![feature(slicing_syntax)]\n \n struct AStruct {"}, {"sha": "872d66fdc88db8bbc4341905bb1310023d82b281", "filename": "src/test/debuginfo/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Fdebuginfo%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -32,7 +32,7 @@\n // lldb-command:print a\n // lldb-check:[...]$0 = [1, 2, 3]\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n static mut VECT: [i32, ..3] = [1, 2, 3];\n "}, {"sha": "ae6e72bdd4f3261d865bdf63c17bedcaf73f9786", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n \n // error-pattern:wooooo\n fn main() {"}, {"sha": "0846ba2e71a4f467d58cc094fbb66156f121bf06", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unnecessary_allocation)]\n+#![allow(unused_allocation)]\n #![allow(unreachable_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n \n // error-pattern:so long"}, {"sha": "e51e8d93eb0ca0771485b3eb7fffd33463f03c32", "filename": "src/test/run-fail/issue-948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:beep boop\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct Point { x: int, y: int }\n "}, {"sha": "2b1672ad4e53763e73e76fae51c8fc2e1e54ad9c", "filename": "src/test/run-fail/match-bot-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:explicit panic\n \n #![allow(unreachable_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn foo(s: String) { }\n "}, {"sha": "ff4040ded5f382722a9a1873f1a89f9e5050fe88", "filename": "src/test/run-fail/rhs-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Frhs-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00975e041d42b89b14b2655b2891e3348f3ad3f1/src%2Ftest%2Frun-fail%2Frhs-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frhs-type.rs?ref=00975e041d42b89b14b2655b2891e3348f3ad3f1", "patch": "@@ -13,7 +13,7 @@\n // error-pattern:bye\n \n #![allow(unreachable_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct T { t: String }\n "}]}