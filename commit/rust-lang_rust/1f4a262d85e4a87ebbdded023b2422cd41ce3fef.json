{"sha": "1f4a262d85e4a87ebbdded023b2422cd41ce3fef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNGEyNjJkODVlNGE4N2ViYmRkZWQwMjNiMjQyMmNkNDFjZTNmZWY=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2019-06-02T02:52:18Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2019-06-09T05:38:18Z"}, "message": "Put the docs on the methods instead of the impls\n\nSince simulacrum suggested (on Discord) they're better there.", "tree": {"sha": "383929a6a2b93c82258422793e51815da88ebcf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383929a6a2b93c82258422793e51815da88ebcf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4a262d85e4a87ebbdded023b2422cd41ce3fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4a262d85e4a87ebbdded023b2422cd41ce3fef", "html_url": "https://github.com/rust-lang/rust/commit/1f4a262d85e4a87ebbdded023b2422cd41ce3fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4a262d85e4a87ebbdded023b2422cd41ce3fef/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2da4f9ad5ed80bb1488377711699c5f320ae89db", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da4f9ad5ed80bb1488377711699c5f320ae89db", "html_url": "https://github.com/rust-lang/rust/commit/2da4f9ad5ed80bb1488377711699c5f320ae89db"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "79a36d7248df47e57416ce032bc45338fc40d9a5", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/1f4a262d85e4a87ebbdded023b2422cd41ce3fef/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4a262d85e4a87ebbdded023b2422cd41ce3fef/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=1f4a262d85e4a87ebbdded023b2422cd41ce3fef", "patch": "@@ -2707,35 +2707,35 @@ impl<T: fmt::Debug> fmt::Debug for VecDeque<T> {\n     }\n }\n \n-/// Turn a `Vec<T>` into a `VecDeque<T>`.\n-///\n-/// This avoids reallocating where possible, but the conditions for that are\n-/// strict, and subject to change, and so shouldn't be relied upon unless the\n-/// `Vec<T>` came from `From<VecDeque<T>>` has hasn't been reallocated.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::collections::VecDeque;\n-///\n-/// // Start with a `VecDeque<i32>`.\n-/// let deque: VecDeque<_> = (1..5).collect();\n-///\n-/// // Turn it into a `Vec<i32>` with no allocation needed.\n-/// let mut vec = Vec::from(deque);\n-///\n-/// // Modify it, being careful not to trigger reallocation.\n-/// vec.pop();\n-/// vec.push(100);\n-///\n-/// // Turn it back into a `VecDeque<i32>` with no allocation needed.\n-/// let ptr = vec.as_ptr();\n-/// let deque = VecDeque::from(vec);\n-/// assert_eq!(deque, [1, 2, 3, 100]);\n-/// assert_eq!(deque.as_slices().0.as_ptr(), ptr);\n-/// ```\n #[stable(feature = \"vecdeque_vec_conversions\", since = \"1.10.0\")]\n impl<T> From<Vec<T>> for VecDeque<T> {\n+    /// Turn a `Vec<T>` into a `VecDeque<T>`.\n+    ///\n+    /// This avoids reallocating where possible, but the conditions for that are\n+    /// strict, and subject to change, and so shouldn't be relied upon unless the\n+    /// `Vec<T>` came from `From<VecDeque<T>>` has hasn't been reallocated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// // Start with a `VecDeque<i32>`.\n+    /// let deque: VecDeque<_> = (1..5).collect();\n+    ///\n+    /// // Turn it into a `Vec<i32>` with no allocation needed.\n+    /// let mut vec = Vec::from(deque);\n+    ///\n+    /// // Modify it, being careful not to trigger reallocation.\n+    /// vec.pop();\n+    /// vec.push(100);\n+    ///\n+    /// // Turn it back into a `VecDeque<i32>` with no allocation needed.\n+    /// let ptr = vec.as_ptr();\n+    /// let deque = VecDeque::from(vec);\n+    /// assert_eq!(deque, [1, 2, 3, 100]);\n+    /// assert_eq!(deque.as_slices().0.as_ptr(), ptr);\n+    /// ```\n     fn from(mut other: Vec<T>) -> Self {\n         unsafe {\n             let other_buf = other.as_mut_ptr();\n@@ -2760,34 +2760,34 @@ impl<T> From<Vec<T>> for VecDeque<T> {\n     }\n }\n \n-/// Turn a `VecDeque<T>` into a `Vec<T>`.\n-///\n-/// This never needs to re-allocate, but does need to do O(n) data movement if\n-/// the circular buffer doesn't happen to be at the beginning of the allocation.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::collections::VecDeque;\n-///\n-/// // This one is O(1).\n-/// let deque: VecDeque<_> = (1..5).collect();\n-/// let ptr = deque.as_slices().0.as_ptr();\n-/// let vec = Vec::from(deque);\n-/// assert_eq!(vec, [1, 2, 3, 4]);\n-/// assert_eq!(vec.as_ptr(), ptr);\n-///\n-/// // This one needs data rearranging.\n-/// let mut deque: VecDeque<_> = (1..5).collect();\n-/// deque.push_front(9);\n-/// deque.push_front(8);\n-/// let ptr = deque.as_slices().1.as_ptr();\n-/// let vec = Vec::from(deque);\n-/// assert_eq!(vec, [8, 9, 1, 2, 3, 4]);\n-/// assert_eq!(vec.as_ptr(), ptr);\n-/// ```\n #[stable(feature = \"vecdeque_vec_conversions\", since = \"1.10.0\")]\n impl<T> From<VecDeque<T>> for Vec<T> {\n+    /// Turn a `VecDeque<T>` into a `Vec<T>`.\n+    ///\n+    /// This never needs to re-allocate, but does need to do O(n) data movement if\n+    /// the circular buffer doesn't happen to be at the beginning of the allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// // This one is O(1).\n+    /// let deque: VecDeque<_> = (1..5).collect();\n+    /// let ptr = deque.as_slices().0.as_ptr();\n+    /// let vec = Vec::from(deque);\n+    /// assert_eq!(vec, [1, 2, 3, 4]);\n+    /// assert_eq!(vec.as_ptr(), ptr);\n+    ///\n+    /// // This one needs data rearranging.\n+    /// let mut deque: VecDeque<_> = (1..5).collect();\n+    /// deque.push_front(9);\n+    /// deque.push_front(8);\n+    /// let ptr = deque.as_slices().1.as_ptr();\n+    /// let vec = Vec::from(deque);\n+    /// assert_eq!(vec, [8, 9, 1, 2, 3, 4]);\n+    /// assert_eq!(vec.as_ptr(), ptr);\n+    /// ```\n     fn from(other: VecDeque<T>) -> Self {\n         unsafe {\n             let buf = other.buf.ptr();"}]}