{"sha": "5e89312a22993c946f462aff0d0fa0447210762d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlODkzMTJhMjI5OTNjOTQ2ZjQ2MmFmZjBkMGZhMDQ0NzIxMDc2MmQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T16:54:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:32Z"}, "message": "Inline get_type", "tree": {"sha": "a06d2d2102865d6523e9bd4dc4d8b04b1163e218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06d2d2102865d6523e9bd4dc4d8b04b1163e218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e89312a22993c946f462aff0d0fa0447210762d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e89312a22993c946f462aff0d0fa0447210762d", "html_url": "https://github.com/rust-lang/rust/commit/5e89312a22993c946f462aff0d0fa0447210762d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e89312a22993c946f462aff0d0fa0447210762d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc27c2eb38164f89ad06c5e9645349fa3de38903", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc27c2eb38164f89ad06c5e9645349fa3de38903", "html_url": "https://github.com/rust-lang/rust/commit/fc27c2eb38164f89ad06c5e9645349fa3de38903"}], "stats": {"total": 103, "additions": 63, "deletions": 40}, "files": [{"sha": "a45e2f983102d215c08c55ffabe9c93c80419f10", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -20,7 +20,7 @@ use hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use hir::map::Map;\n use hir::ItemLocalId;\n use hir::LifetimeName;\n-use ty::{self, TyCtxt};\n+use ty::{self, TyCtxt, GenericParamDef};\n \n use errors::DiagnosticBuilder;\n use rustc::lint;\n@@ -1662,7 +1662,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             .params\n                             .iter()\n                             .filter_map(|param| {\n-                                param.get_type().and_then(|ty| Some(ty.object_lifetime_default))\n+                                match *param {\n+                                    GenericParamDef::Type(ty) => Some(ty.object_lifetime_default),\n+                                    GenericParamDef::Lifetime(_) => None,\n+                                }\n                             })\n                             .collect()\n                     })"}, {"sha": "ccaecdafa015ae766f83eadf856bd0d8e4951979", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -35,7 +35,7 @@ use infer::type_variable::TypeVariableOrigin;\n use std::fmt;\n use syntax::ast;\n use session::DiagnosticMessageId;\n-use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n+use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable, GenericParamDef};\n use ty::error::ExpectedFound;\n use ty::fast_reject;\n use ty::fold::TypeFolder;\n@@ -378,7 +378,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"_Self\".to_string(), Some(self.tcx.type_of(def.did).to_string())));\n         }\n \n-        for param in generics.params.iter().filter_map(|param| param.get_type()) {\n+        for param in generics.params.iter().filter_map(|param| {\n+            match *param {\n+                GenericParamDef::Type(ty) => Some(ty),\n+                GenericParamDef::Lifetime(_) => None,\n+            }\n+        }) {\n             let name = param.name.to_string();\n             let ty = trait_ref.substs.type_for_def(&param);\n             let ty_str = ty.to_string();"}, {"sha": "c84e03e35f4ef118dc0f97f4666d5c5d1b6631e6", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -254,10 +254,9 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == name => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => match generics.params.iter().find(|param| {\n-                        if let GenericParamDef::Type(ty) = param {\n-                            ty.name == s\n-                        } else {\n-                            false\n+                        match *param {\n+                            GenericParamDef::Type(ty) => ty.name == s,\n+                            GenericParamDef::Lifetime(_) => false,\n                         }\n                     }) {\n                         Some(_) => (),\n@@ -292,10 +291,11 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let trait_str = tcx.item_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);\n         let generic_map = generics.params.iter().filter_map(|param| {\n-            if let Some(ty) = param.get_type() {\n-                Some((ty.name.to_string(), trait_ref.substs.type_for_def(&ty).to_string()))\n-            } else {\n-                None\n+            match *param {\n+                GenericParamDef::Type(ty) => {\n+                    Some((ty.name.to_string(), trait_ref.substs.type_for_def(&ty).to_string()))\n+                },\n+                GenericParamDef::Lifetime(_) => None\n             }\n         }).collect::<FxHashMap<String, String>>();\n "}, {"sha": "37a6533fb61c2fed02a11515ae45d9f7da81cdc0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -777,13 +777,6 @@ impl GenericParamDef {\n             GenericParamDef::Type(ty) => ty.def_id,\n         }\n     }\n-\n-    pub fn get_type(&self) -> Option<TypeParamDef> {\n-        match *self {\n-            GenericParamDef::Type(ty) => Some(ty),\n-            _ => None,\n-        }\n-    }\n }\n \n pub struct GenericParamCount {\n@@ -834,7 +827,12 @@ impl<'a, 'gcx, 'tcx> Generics {\n     }\n \n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        if self.params.iter().any(|p| p.get_type().is_some()) {\n+        if self.params.iter().any(|param| {\n+            match *param {\n+                GenericParamDef::Type(_) => true,\n+                GenericParamDef::Lifetime(_) => false\n+            }\n+        }) {\n             return true;\n         }\n         if let Some(parent_def_id) = self.parent {"}, {"sha": "4f69776721ee45beeb4d00640f625d153896c6ed", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -243,12 +243,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n           FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         for def in &defs.params {\n             let param = match def {\n-                ty::GenericParamDef::Lifetime(ref lt) => {\n-                    mk_region(lt, substs).into()\n-                }\n-                ty::GenericParamDef::Type(ref ty) => {\n-                    mk_type(ty, substs).into()\n-                }\n+                ty::GenericParamDef::Lifetime(ref lt) => mk_region(lt, substs).into(),\n+                ty::GenericParamDef::Type(ref ty) => mk_type(ty, substs).into(),\n             };\n             assert_eq!(def.index() as usize, substs.len());\n             substs.push(param);"}, {"sha": "603e6e032465244d9e45b96888a4493d0310ed72", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -19,7 +19,7 @@ use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::{TyClosure, TyGenerator, TyGeneratorWitness, TyForeign, TyProjection, TyAnon};\n use ty::{TyDynamic, TyInt, TyUint, TyInfer};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount};\n+use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDef};\n use util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n@@ -337,7 +337,12 @@ impl PrintContext {\n \n             if !verbose {\n                 let mut type_params =\n-                    generics.params.iter().rev().filter_map(|param| param.get_type());\n+                    generics.params.iter().rev().filter_map(|param| {\n+                        match *param {\n+                            GenericParamDef::Type(ty) => Some(ty),\n+                            GenericParamDef::Lifetime(_) => None,\n+                        }\n+                    });\n                 if let Some(last_ty) = type_params.next() {\n                     if last_ty.has_default {\n                         if let Some(substs) = tcx.lift(&substs) {"}, {"sha": "da38081a6029890988cf65c84968ba17e1281c08", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::def_id::DefId;\n use rustc::traits::{FulfillmentContext, Normalized, ObligationCause};\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc::traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n-use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt, GenericParamDef};\n use rustc::ty::subst::Subst;\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -278,9 +278,13 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n     debug!(\"dtorck_constraint: {:?}\", def);\n \n     if def.is_phantom_data() {\n+        let type_param = match tcx.generics_of(def_id).params[0] {\n+            GenericParamDef::Type(ty) => ty,\n+            GenericParamDef::Lifetime(_) => unreachable!(),\n+        };\n         let result = DtorckConstraint {\n             outlives: vec![],\n-            dtorck_types: vec![tcx.mk_param_from_def(&tcx.generics_of(def_id).params[0].get_type().unwrap())],\n+            dtorck_types: vec![tcx.mk_param_from_def(&type_param)],\n             overflows: vec![],\n         };\n         debug!(\"dtorck_constraint: {:?} => {:?}\", def, result);"}, {"sha": "d1978ceb30bf3ed3a102219feda7b010c974b48f", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::hir::{self, ImplItemKind, TraitItemKind};\n use rustc::infer::{self, InferOk};\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, GenericParamDef};\n use rustc::ty::util::ExplicitSelf;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n@@ -728,8 +728,18 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut error_found = false;\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| param.get_type());\n-    let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| param.get_type());\n+    let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| {\n+        match *param {\n+            GenericParamDef::Type(ty) => Some(ty),\n+            GenericParamDef::Lifetime(_) => None,\n+        }\n+    });\n+    let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| {\n+        match *param {\n+            GenericParamDef::Type(ty) => Some(ty),\n+            GenericParamDef::Lifetime(_) => None,\n+        }\n+    });\n     for (impl_ty, trait_ty) in impl_m_type_params.zip(trait_m_type_params) {\n         if impl_ty.synthetic != trait_ty.synthetic {\n             let impl_node_id = tcx.hir.as_local_node_id(impl_ty.def_id).unwrap();"}, {"sha": "dc49cfcbc2b135331da20d852f229a5c9b8fa606", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -860,7 +860,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         ty.bounds.insert(0, TyParamBound::maybe_sized(self.cx));\n                     }\n                 }\n-                _ => {}\n+                GenericParamDef::Lifetime(_) => {}\n             }\n         }\n "}, {"sha": "cb48d790f6070d8ef1821051ffaba33e24165ab1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -1725,10 +1725,9 @@ pub enum GenericParamDef {\n \n impl GenericParamDef {\n     pub fn is_synthetic_type_param(&self) -> bool {\n-        if let GenericParamDef::Type(ref t) = *self {\n-            t.synthetic.is_some()\n-        } else {\n-            false\n+        match self {\n+            GenericParamDef::Type(ty) => ty.synthetic.is_some(),\n+            GenericParamDef::Lifetime(_) => false,\n         }\n     }\n }"}, {"sha": "21851e7b9dcb1fe69ad15ec5ca7fe39163f85529", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e89312a22993c946f462aff0d0fa0447210762d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5e89312a22993c946f462aff0d0fa0447210762d", "patch": "@@ -1437,8 +1437,11 @@ impl DocFolder for Cache {\n impl<'a> Cache {\n     fn generics(&mut self, generics: &clean::Generics) {\n         for param in &generics.params {\n-            if let clean::GenericParamDef::Type(ref typ) = *param {\n-                self.typarams.insert(typ.did, typ.name.clone());\n+            match *param {\n+                clean::GenericParamDef::Type(ref typ) => {\n+                    self.typarams.insert(typ.did, typ.name.clone());\n+                }\n+                clean::GenericParamDef::Lifetime(_) => {}\n             }\n         }\n     }"}]}