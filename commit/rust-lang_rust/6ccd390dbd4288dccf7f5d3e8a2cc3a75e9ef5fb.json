{"sha": "6ccd390dbd4288dccf7f5d3e8a2cc3a75e9ef5fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjY2QzOTBkYmQ0Mjg4ZGNjZjdmNWQzZThhMmNjM2E3NWU5ZWY1ZmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-12T17:30:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-19T00:22:17Z"}, "message": "rename `_lctx` to `lctx` where appropriate", "tree": {"sha": "caf349c1c8b6e143e6fd90f4ec34e8383c9e3c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf349c1c8b6e143e6fd90f4ec34e8383c9e3c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ccd390dbd4288dccf7f5d3e8a2cc3a75e9ef5fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ccd390dbd4288dccf7f5d3e8a2cc3a75e9ef5fb", "html_url": "https://github.com/rust-lang/rust/commit/6ccd390dbd4288dccf7f5d3e8a2cc3a75e9ef5fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ccd390dbd4288dccf7f5d3e8a2cc3a75e9ef5fb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6913ed0f3c42f37b2b46043305ebae2e81e33548", "url": "https://api.github.com/repos/rust-lang/rust/commits/6913ed0f3c42f37b2b46043305ebae2e81e33548", "html_url": "https://github.com/rust-lang/rust/commit/6913ed0f3c42f37b2b46043305ebae2e81e33548"}], "stats": {"total": 419, "additions": 210, "deletions": 209}, "files": [{"sha": "230fb93fd4d14ad20ef27a3654a7edead6498571", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 210, "deletions": 209, "changes": 419, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd390dbd4288dccf7f5d3e8a2cc3a75e9ef5fb/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd390dbd4288dccf7f5d3e8a2cc3a75e9ef5fb/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=6ccd390dbd4288dccf7f5d3e8a2cc3a75e9ef5fb", "patch": "@@ -138,17 +138,17 @@ impl<'a, 'hir> LoweringContext<'a> {\n     }\n }\n \n-pub fn lower_view_path(_lctx: &LoweringContext, view_path: &ViewPath) -> P<hir::ViewPath> {\n+pub fn lower_view_path(lctx: &LoweringContext, view_path: &ViewPath) -> P<hir::ViewPath> {\n     P(Spanned {\n         node: match view_path.node {\n             ViewPathSimple(ident, ref path) => {\n-                hir::ViewPathSimple(ident.name, lower_path(_lctx, path))\n+                hir::ViewPathSimple(ident.name, lower_path(lctx, path))\n             }\n             ViewPathGlob(ref path) => {\n-                hir::ViewPathGlob(lower_path(_lctx, path))\n+                hir::ViewPathGlob(lower_path(lctx, path))\n             }\n             ViewPathList(ref path, ref path_list_idents) => {\n-                hir::ViewPathList(lower_path(_lctx, path),\n+                hir::ViewPathList(lower_path(lctx, path),\n                                   path_list_idents.iter()\n                                                   .map(|path_list_ident| {\n                                                       Spanned {\n@@ -175,177 +175,177 @@ pub fn lower_view_path(_lctx: &LoweringContext, view_path: &ViewPath) -> P<hir::\n     })\n }\n \n-pub fn lower_arm(_lctx: &LoweringContext, arm: &Arm) -> hir::Arm {\n+pub fn lower_arm(lctx: &LoweringContext, arm: &Arm) -> hir::Arm {\n     hir::Arm {\n         attrs: arm.attrs.clone(),\n-        pats: arm.pats.iter().map(|x| lower_pat(_lctx, x)).collect(),\n-        guard: arm.guard.as_ref().map(|ref x| lower_expr(_lctx, x)),\n-        body: lower_expr(_lctx, &arm.body),\n+        pats: arm.pats.iter().map(|x| lower_pat(lctx, x)).collect(),\n+        guard: arm.guard.as_ref().map(|ref x| lower_expr(lctx, x)),\n+        body: lower_expr(lctx, &arm.body),\n     }\n }\n \n-pub fn lower_decl(_lctx: &LoweringContext, d: &Decl) -> P<hir::Decl> {\n+pub fn lower_decl(lctx: &LoweringContext, d: &Decl) -> P<hir::Decl> {\n     match d.node {\n         DeclLocal(ref l) => P(Spanned {\n-            node: hir::DeclLocal(lower_local(_lctx, l)),\n+            node: hir::DeclLocal(lower_local(lctx, l)),\n             span: d.span,\n         }),\n         DeclItem(ref it) => P(Spanned {\n-            node: hir::DeclItem(lower_item(_lctx, it)),\n+            node: hir::DeclItem(lower_item(lctx, it)),\n             span: d.span,\n         }),\n     }\n }\n \n-pub fn lower_ty_binding(_lctx: &LoweringContext, b: &TypeBinding) -> P<hir::TypeBinding> {\n+pub fn lower_ty_binding(lctx: &LoweringContext, b: &TypeBinding) -> P<hir::TypeBinding> {\n     P(hir::TypeBinding {\n         id: b.id,\n         name: b.ident.name,\n-        ty: lower_ty(_lctx, &b.ty),\n+        ty: lower_ty(lctx, &b.ty),\n         span: b.span,\n     })\n }\n \n-pub fn lower_ty(_lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n+pub fn lower_ty(lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n     P(hir::Ty {\n         id: t.id,\n         node: match t.node {\n             TyInfer => hir::TyInfer,\n-            TyVec(ref ty) => hir::TyVec(lower_ty(_lctx, ty)),\n-            TyPtr(ref mt) => hir::TyPtr(lower_mt(_lctx, mt)),\n+            TyVec(ref ty) => hir::TyVec(lower_ty(lctx, ty)),\n+            TyPtr(ref mt) => hir::TyPtr(lower_mt(lctx, mt)),\n             TyRptr(ref region, ref mt) => {\n-                hir::TyRptr(lower_opt_lifetime(_lctx, region), lower_mt(_lctx, mt))\n+                hir::TyRptr(lower_opt_lifetime(lctx, region), lower_mt(lctx, mt))\n             }\n             TyBareFn(ref f) => {\n                 hir::TyBareFn(P(hir::BareFnTy {\n-                    lifetimes: lower_lifetime_defs(_lctx, &f.lifetimes),\n-                    unsafety: lower_unsafety(_lctx, f.unsafety),\n+                    lifetimes: lower_lifetime_defs(lctx, &f.lifetimes),\n+                    unsafety: lower_unsafety(lctx, f.unsafety),\n                     abi: f.abi,\n-                    decl: lower_fn_decl(_lctx, &f.decl),\n+                    decl: lower_fn_decl(lctx, &f.decl),\n                 }))\n             }\n-            TyTup(ref tys) => hir::TyTup(tys.iter().map(|ty| lower_ty(_lctx, ty)).collect()),\n+            TyTup(ref tys) => hir::TyTup(tys.iter().map(|ty| lower_ty(lctx, ty)).collect()),\n             TyParen(ref ty) => {\n-                return lower_ty(_lctx, ty);\n+                return lower_ty(lctx, ty);\n             }\n             TyPath(ref qself, ref path) => {\n                 let qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n                     hir::QSelf {\n-                        ty: lower_ty(_lctx, ty),\n+                        ty: lower_ty(lctx, ty),\n                         position: position,\n                     }\n                 });\n-                hir::TyPath(qself, lower_path(_lctx, path))\n+                hir::TyPath(qself, lower_path(lctx, path))\n             }\n             TyObjectSum(ref ty, ref bounds) => {\n-                hir::TyObjectSum(lower_ty(_lctx, ty), lower_bounds(_lctx, bounds))\n+                hir::TyObjectSum(lower_ty(lctx, ty), lower_bounds(lctx, bounds))\n             }\n             TyFixedLengthVec(ref ty, ref e) => {\n-                hir::TyFixedLengthVec(lower_ty(_lctx, ty), lower_expr(_lctx, e))\n+                hir::TyFixedLengthVec(lower_ty(lctx, ty), lower_expr(lctx, e))\n             }\n             TyTypeof(ref expr) => {\n-                hir::TyTypeof(lower_expr(_lctx, expr))\n+                hir::TyTypeof(lower_expr(lctx, expr))\n             }\n             TyPolyTraitRef(ref bounds) => {\n-                hir::TyPolyTraitRef(bounds.iter().map(|b| lower_ty_param_bound(_lctx, b)).collect())\n+                hir::TyPolyTraitRef(bounds.iter().map(|b| lower_ty_param_bound(lctx, b)).collect())\n             }\n             TyMac(_) => panic!(\"TyMac should have been expanded by now.\"),\n         },\n         span: t.span,\n     })\n }\n \n-pub fn lower_foreign_mod(_lctx: &LoweringContext, fm: &ForeignMod) -> hir::ForeignMod {\n+pub fn lower_foreign_mod(lctx: &LoweringContext, fm: &ForeignMod) -> hir::ForeignMod {\n     hir::ForeignMod {\n         abi: fm.abi,\n-        items: fm.items.iter().map(|x| lower_foreign_item(_lctx, x)).collect(),\n+        items: fm.items.iter().map(|x| lower_foreign_item(lctx, x)).collect(),\n     }\n }\n \n-pub fn lower_variant(_lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n+pub fn lower_variant(lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n     P(Spanned {\n         node: hir::Variant_ {\n             name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n-            data: lower_variant_data(_lctx, &v.node.data),\n-            disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(_lctx, e)),\n+            data: lower_variant_data(lctx, &v.node.data),\n+            disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(lctx, e)),\n         },\n         span: v.span,\n     })\n }\n \n-pub fn lower_path(_lctx: &LoweringContext, p: &Path) -> hir::Path {\n+pub fn lower_path(lctx: &LoweringContext, p: &Path) -> hir::Path {\n     hir::Path {\n         global: p.global,\n         segments: p.segments\n                    .iter()\n                    .map(|&PathSegment { identifier, ref parameters }| {\n                        hir::PathSegment {\n                            identifier: identifier,\n-                           parameters: lower_path_parameters(_lctx, parameters),\n+                           parameters: lower_path_parameters(lctx, parameters),\n                        }\n                    })\n                    .collect(),\n         span: p.span,\n     }\n }\n \n-pub fn lower_path_parameters(_lctx: &LoweringContext,\n+pub fn lower_path_parameters(lctx: &LoweringContext,\n                              path_parameters: &PathParameters)\n                              -> hir::PathParameters {\n     match *path_parameters {\n         AngleBracketedParameters(ref data) =>\n-            hir::AngleBracketedParameters(lower_angle_bracketed_parameter_data(_lctx, data)),\n+            hir::AngleBracketedParameters(lower_angle_bracketed_parameter_data(lctx, data)),\n         ParenthesizedParameters(ref data) =>\n-            hir::ParenthesizedParameters(lower_parenthesized_parameter_data(_lctx, data)),\n+            hir::ParenthesizedParameters(lower_parenthesized_parameter_data(lctx, data)),\n     }\n }\n \n-pub fn lower_angle_bracketed_parameter_data(_lctx: &LoweringContext,\n+pub fn lower_angle_bracketed_parameter_data(lctx: &LoweringContext,\n                                             data: &AngleBracketedParameterData)\n                                             -> hir::AngleBracketedParameterData {\n     let &AngleBracketedParameterData { ref lifetimes, ref types, ref bindings } = data;\n     hir::AngleBracketedParameterData {\n-        lifetimes: lower_lifetimes(_lctx, lifetimes),\n-        types: types.iter().map(|ty| lower_ty(_lctx, ty)).collect(),\n-        bindings: bindings.iter().map(|b| lower_ty_binding(_lctx, b)).collect(),\n+        lifetimes: lower_lifetimes(lctx, lifetimes),\n+        types: types.iter().map(|ty| lower_ty(lctx, ty)).collect(),\n+        bindings: bindings.iter().map(|b| lower_ty_binding(lctx, b)).collect(),\n     }\n }\n \n-pub fn lower_parenthesized_parameter_data(_lctx: &LoweringContext,\n+pub fn lower_parenthesized_parameter_data(lctx: &LoweringContext,\n                                           data: &ParenthesizedParameterData)\n                                           -> hir::ParenthesizedParameterData {\n     let &ParenthesizedParameterData { ref inputs, ref output, span } = data;\n     hir::ParenthesizedParameterData {\n-        inputs: inputs.iter().map(|ty| lower_ty(_lctx, ty)).collect(),\n-        output: output.as_ref().map(|ty| lower_ty(_lctx, ty)),\n+        inputs: inputs.iter().map(|ty| lower_ty(lctx, ty)).collect(),\n+        output: output.as_ref().map(|ty| lower_ty(lctx, ty)),\n         span: span,\n     }\n }\n \n-pub fn lower_local(_lctx: &LoweringContext, l: &Local) -> P<hir::Local> {\n+pub fn lower_local(lctx: &LoweringContext, l: &Local) -> P<hir::Local> {\n     P(hir::Local {\n         id: l.id,\n-        ty: l.ty.as_ref().map(|t| lower_ty(_lctx, t)),\n-        pat: lower_pat(_lctx, &l.pat),\n-        init: l.init.as_ref().map(|e| lower_expr(_lctx, e)),\n+        ty: l.ty.as_ref().map(|t| lower_ty(lctx, t)),\n+        pat: lower_pat(lctx, &l.pat),\n+        init: l.init.as_ref().map(|e| lower_expr(lctx, e)),\n         span: l.span,\n     })\n }\n \n-pub fn lower_explicit_self_underscore(_lctx: &LoweringContext,\n+pub fn lower_explicit_self_underscore(lctx: &LoweringContext,\n                                       es: &ExplicitSelf_)\n                                       -> hir::ExplicitSelf_ {\n     match *es {\n         SelfStatic => hir::SelfStatic,\n         SelfValue(v) => hir::SelfValue(v.name),\n         SelfRegion(ref lifetime, m, ident) => {\n-            hir::SelfRegion(lower_opt_lifetime(_lctx, lifetime),\n-                            lower_mutability(_lctx, m),\n+            hir::SelfRegion(lower_opt_lifetime(lctx, lifetime),\n+                            lower_mutability(lctx, m),\n                             ident.name)\n         }\n         SelfExplicit(ref typ, ident) => {\n-            hir::SelfExplicit(lower_ty(_lctx, typ), ident.name)\n+            hir::SelfExplicit(lower_ty(lctx, typ), ident.name)\n         }\n     }\n }\n@@ -357,59 +357,59 @@ pub fn lower_mutability(_lctx: &LoweringContext, m: Mutability) -> hir::Mutabili\n     }\n }\n \n-pub fn lower_explicit_self(_lctx: &LoweringContext, s: &ExplicitSelf) -> hir::ExplicitSelf {\n+pub fn lower_explicit_self(lctx: &LoweringContext, s: &ExplicitSelf) -> hir::ExplicitSelf {\n     Spanned {\n-        node: lower_explicit_self_underscore(_lctx, &s.node),\n+        node: lower_explicit_self_underscore(lctx, &s.node),\n         span: s.span,\n     }\n }\n \n-pub fn lower_arg(_lctx: &LoweringContext, arg: &Arg) -> hir::Arg {\n+pub fn lower_arg(lctx: &LoweringContext, arg: &Arg) -> hir::Arg {\n     hir::Arg {\n         id: arg.id,\n-        pat: lower_pat(_lctx, &arg.pat),\n-        ty: lower_ty(_lctx, &arg.ty),\n+        pat: lower_pat(lctx, &arg.pat),\n+        ty: lower_ty(lctx, &arg.ty),\n     }\n }\n \n-pub fn lower_fn_decl(_lctx: &LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n+pub fn lower_fn_decl(lctx: &LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n     P(hir::FnDecl {\n-        inputs: decl.inputs.iter().map(|x| lower_arg(_lctx, x)).collect(),\n+        inputs: decl.inputs.iter().map(|x| lower_arg(lctx, x)).collect(),\n         output: match decl.output {\n-            Return(ref ty) => hir::Return(lower_ty(_lctx, ty)),\n+            Return(ref ty) => hir::Return(lower_ty(lctx, ty)),\n             DefaultReturn(span) => hir::DefaultReturn(span),\n             NoReturn(span) => hir::NoReturn(span),\n         },\n         variadic: decl.variadic,\n     })\n }\n \n-pub fn lower_ty_param_bound(_lctx: &LoweringContext, tpb: &TyParamBound) -> hir::TyParamBound {\n+pub fn lower_ty_param_bound(lctx: &LoweringContext, tpb: &TyParamBound) -> hir::TyParamBound {\n     match *tpb {\n         TraitTyParamBound(ref ty, modifier) => {\n-            hir::TraitTyParamBound(lower_poly_trait_ref(_lctx, ty),\n-                                   lower_trait_bound_modifier(_lctx, modifier))\n+            hir::TraitTyParamBound(lower_poly_trait_ref(lctx, ty),\n+                                   lower_trait_bound_modifier(lctx, modifier))\n         }\n         RegionTyParamBound(ref lifetime) => {\n-            hir::RegionTyParamBound(lower_lifetime(_lctx, lifetime))\n+            hir::RegionTyParamBound(lower_lifetime(lctx, lifetime))\n         }\n     }\n }\n \n-pub fn lower_ty_param(_lctx: &LoweringContext, tp: &TyParam) -> hir::TyParam {\n+pub fn lower_ty_param(lctx: &LoweringContext, tp: &TyParam) -> hir::TyParam {\n     hir::TyParam {\n         id: tp.id,\n         name: tp.ident.name,\n-        bounds: lower_bounds(_lctx, &tp.bounds),\n-        default: tp.default.as_ref().map(|x| lower_ty(_lctx, x)),\n+        bounds: lower_bounds(lctx, &tp.bounds),\n+        default: tp.default.as_ref().map(|x| lower_ty(lctx, x)),\n         span: tp.span,\n     }\n }\n \n-pub fn lower_ty_params(_lctx: &LoweringContext,\n+pub fn lower_ty_params(lctx: &LoweringContext,\n                        tps: &OwnedSlice<TyParam>)\n                        -> OwnedSlice<hir::TyParam> {\n-    tps.iter().map(|tp| lower_ty_param(_lctx, tp)).collect()\n+    tps.iter().map(|tp| lower_ty_param(lctx, tp)).collect()\n }\n \n pub fn lower_lifetime(_lctx: &LoweringContext, l: &Lifetime) -> hir::Lifetime {\n@@ -420,48 +420,48 @@ pub fn lower_lifetime(_lctx: &LoweringContext, l: &Lifetime) -> hir::Lifetime {\n     }\n }\n \n-pub fn lower_lifetime_def(_lctx: &LoweringContext, l: &LifetimeDef) -> hir::LifetimeDef {\n+pub fn lower_lifetime_def(lctx: &LoweringContext, l: &LifetimeDef) -> hir::LifetimeDef {\n     hir::LifetimeDef {\n-        lifetime: lower_lifetime(_lctx, &l.lifetime),\n-        bounds: lower_lifetimes(_lctx, &l.bounds),\n+        lifetime: lower_lifetime(lctx, &l.lifetime),\n+        bounds: lower_lifetimes(lctx, &l.bounds),\n     }\n }\n \n-pub fn lower_lifetimes(_lctx: &LoweringContext, lts: &Vec<Lifetime>) -> Vec<hir::Lifetime> {\n-    lts.iter().map(|l| lower_lifetime(_lctx, l)).collect()\n+pub fn lower_lifetimes(lctx: &LoweringContext, lts: &Vec<Lifetime>) -> Vec<hir::Lifetime> {\n+    lts.iter().map(|l| lower_lifetime(lctx, l)).collect()\n }\n \n-pub fn lower_lifetime_defs(_lctx: &LoweringContext,\n+pub fn lower_lifetime_defs(lctx: &LoweringContext,\n                            lts: &Vec<LifetimeDef>)\n                            -> Vec<hir::LifetimeDef> {\n-    lts.iter().map(|l| lower_lifetime_def(_lctx, l)).collect()\n+    lts.iter().map(|l| lower_lifetime_def(lctx, l)).collect()\n }\n \n-pub fn lower_opt_lifetime(_lctx: &LoweringContext,\n+pub fn lower_opt_lifetime(lctx: &LoweringContext,\n                           o_lt: &Option<Lifetime>)\n                           -> Option<hir::Lifetime> {\n-    o_lt.as_ref().map(|lt| lower_lifetime(_lctx, lt))\n+    o_lt.as_ref().map(|lt| lower_lifetime(lctx, lt))\n }\n \n-pub fn lower_generics(_lctx: &LoweringContext, g: &Generics) -> hir::Generics {\n+pub fn lower_generics(lctx: &LoweringContext, g: &Generics) -> hir::Generics {\n     hir::Generics {\n-        ty_params: lower_ty_params(_lctx, &g.ty_params),\n-        lifetimes: lower_lifetime_defs(_lctx, &g.lifetimes),\n-        where_clause: lower_where_clause(_lctx, &g.where_clause),\n+        ty_params: lower_ty_params(lctx, &g.ty_params),\n+        lifetimes: lower_lifetime_defs(lctx, &g.lifetimes),\n+        where_clause: lower_where_clause(lctx, &g.where_clause),\n     }\n }\n \n-pub fn lower_where_clause(_lctx: &LoweringContext, wc: &WhereClause) -> hir::WhereClause {\n+pub fn lower_where_clause(lctx: &LoweringContext, wc: &WhereClause) -> hir::WhereClause {\n     hir::WhereClause {\n         id: wc.id,\n         predicates: wc.predicates\n                       .iter()\n-                      .map(|predicate| lower_where_predicate(_lctx, predicate))\n+                      .map(|predicate| lower_where_predicate(lctx, predicate))\n                       .collect(),\n     }\n }\n \n-pub fn lower_where_predicate(_lctx: &LoweringContext,\n+pub fn lower_where_predicate(lctx: &LoweringContext,\n                              pred: &WherePredicate)\n                              -> hir::WherePredicate {\n     match *pred {\n@@ -470,9 +470,9 @@ pub fn lower_where_predicate(_lctx: &LoweringContext,\n                                                             ref bounds,\n                                                             span}) => {\n             hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n-                bound_lifetimes: lower_lifetime_defs(_lctx, bound_lifetimes),\n-                bounded_ty: lower_ty(_lctx, bounded_ty),\n-                bounds: bounds.iter().map(|x| lower_ty_param_bound(_lctx, x)).collect(),\n+                bound_lifetimes: lower_lifetime_defs(lctx, bound_lifetimes),\n+                bounded_ty: lower_ty(lctx, bounded_ty),\n+                bounds: bounds.iter().map(|x| lower_ty_param_bound(lctx, x)).collect(),\n                 span: span,\n             })\n         }\n@@ -481,8 +481,8 @@ pub fn lower_where_predicate(_lctx: &LoweringContext,\n                                                               span}) => {\n             hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                 span: span,\n-                lifetime: lower_lifetime(_lctx, lifetime),\n-                bounds: bounds.iter().map(|bound| lower_lifetime(_lctx, bound)).collect(),\n+                lifetime: lower_lifetime(lctx, lifetime),\n+                bounds: bounds.iter().map(|bound| lower_lifetime(lctx, bound)).collect(),\n             })\n         }\n         WherePredicate::EqPredicate(WhereEqPredicate{ id,\n@@ -491,219 +491,219 @@ pub fn lower_where_predicate(_lctx: &LoweringContext,\n                                                       span}) => {\n             hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n                 id: id,\n-                path: lower_path(_lctx, path),\n-                ty: lower_ty(_lctx, ty),\n+                path: lower_path(lctx, path),\n+                ty: lower_ty(lctx, ty),\n                 span: span,\n             })\n         }\n     }\n }\n \n-pub fn lower_variant_data(_lctx: &LoweringContext, vdata: &VariantData) -> hir::VariantData {\n+pub fn lower_variant_data(lctx: &LoweringContext, vdata: &VariantData) -> hir::VariantData {\n     match *vdata {\n         VariantData::Struct(ref fields, id) => {\n             hir::VariantData::Struct(fields.iter()\n-                                           .map(|f| lower_struct_field(_lctx, f))\n+                                           .map(|f| lower_struct_field(lctx, f))\n                                            .collect(),\n                                      id)\n         }\n         VariantData::Tuple(ref fields, id) => {\n             hir::VariantData::Tuple(fields.iter()\n-                                          .map(|f| lower_struct_field(_lctx, f))\n+                                          .map(|f| lower_struct_field(lctx, f))\n                                           .collect(),\n                                     id)\n         }\n         VariantData::Unit(id) => hir::VariantData::Unit(id),\n     }\n }\n \n-pub fn lower_trait_ref(_lctx: &LoweringContext, p: &TraitRef) -> hir::TraitRef {\n+pub fn lower_trait_ref(lctx: &LoweringContext, p: &TraitRef) -> hir::TraitRef {\n     hir::TraitRef {\n-        path: lower_path(_lctx, &p.path),\n+        path: lower_path(lctx, &p.path),\n         ref_id: p.ref_id,\n     }\n }\n \n-pub fn lower_poly_trait_ref(_lctx: &LoweringContext, p: &PolyTraitRef) -> hir::PolyTraitRef {\n+pub fn lower_poly_trait_ref(lctx: &LoweringContext, p: &PolyTraitRef) -> hir::PolyTraitRef {\n     hir::PolyTraitRef {\n-        bound_lifetimes: lower_lifetime_defs(_lctx, &p.bound_lifetimes),\n-        trait_ref: lower_trait_ref(_lctx, &p.trait_ref),\n+        bound_lifetimes: lower_lifetime_defs(lctx, &p.bound_lifetimes),\n+        trait_ref: lower_trait_ref(lctx, &p.trait_ref),\n         span: p.span,\n     }\n }\n \n-pub fn lower_struct_field(_lctx: &LoweringContext, f: &StructField) -> hir::StructField {\n+pub fn lower_struct_field(lctx: &LoweringContext, f: &StructField) -> hir::StructField {\n     Spanned {\n         node: hir::StructField_ {\n             id: f.node.id,\n-            kind: lower_struct_field_kind(_lctx, &f.node.kind),\n-            ty: lower_ty(_lctx, &f.node.ty),\n+            kind: lower_struct_field_kind(lctx, &f.node.kind),\n+            ty: lower_ty(lctx, &f.node.ty),\n             attrs: f.node.attrs.clone(),\n         },\n         span: f.span,\n     }\n }\n \n-pub fn lower_field(_lctx: &LoweringContext, f: &Field) -> hir::Field {\n+pub fn lower_field(lctx: &LoweringContext, f: &Field) -> hir::Field {\n     hir::Field {\n         name: respan(f.ident.span, f.ident.node.name),\n-        expr: lower_expr(_lctx, &f.expr),\n+        expr: lower_expr(lctx, &f.expr),\n         span: f.span,\n     }\n }\n \n-pub fn lower_mt(_lctx: &LoweringContext, mt: &MutTy) -> hir::MutTy {\n+pub fn lower_mt(lctx: &LoweringContext, mt: &MutTy) -> hir::MutTy {\n     hir::MutTy {\n-        ty: lower_ty(_lctx, &mt.ty),\n-        mutbl: lower_mutability(_lctx, mt.mutbl),\n+        ty: lower_ty(lctx, &mt.ty),\n+        mutbl: lower_mutability(lctx, mt.mutbl),\n     }\n }\n \n-pub fn lower_opt_bounds(_lctx: &LoweringContext,\n+pub fn lower_opt_bounds(lctx: &LoweringContext,\n                         b: &Option<OwnedSlice<TyParamBound>>)\n                         -> Option<OwnedSlice<hir::TyParamBound>> {\n-    b.as_ref().map(|ref bounds| lower_bounds(_lctx, bounds))\n+    b.as_ref().map(|ref bounds| lower_bounds(lctx, bounds))\n }\n \n-fn lower_bounds(_lctx: &LoweringContext, bounds: &TyParamBounds) -> hir::TyParamBounds {\n-    bounds.iter().map(|bound| lower_ty_param_bound(_lctx, bound)).collect()\n+fn lower_bounds(lctx: &LoweringContext, bounds: &TyParamBounds) -> hir::TyParamBounds {\n+    bounds.iter().map(|bound| lower_ty_param_bound(lctx, bound)).collect()\n }\n \n-pub fn lower_block(_lctx: &LoweringContext, b: &Block) -> P<hir::Block> {\n+pub fn lower_block(lctx: &LoweringContext, b: &Block) -> P<hir::Block> {\n     P(hir::Block {\n         id: b.id,\n-        stmts: b.stmts.iter().map(|s| lower_stmt(_lctx, s)).collect(),\n-        expr: b.expr.as_ref().map(|ref x| lower_expr(_lctx, x)),\n-        rules: lower_block_check_mode(_lctx, &b.rules),\n+        stmts: b.stmts.iter().map(|s| lower_stmt(lctx, s)).collect(),\n+        expr: b.expr.as_ref().map(|ref x| lower_expr(lctx, x)),\n+        rules: lower_block_check_mode(lctx, &b.rules),\n         span: b.span,\n     })\n }\n \n-pub fn lower_item_underscore(_lctx: &LoweringContext, i: &Item_) -> hir::Item_ {\n+pub fn lower_item_underscore(lctx: &LoweringContext, i: &Item_) -> hir::Item_ {\n     match *i {\n         ItemExternCrate(string) => hir::ItemExternCrate(string),\n         ItemUse(ref view_path) => {\n-            hir::ItemUse(lower_view_path(_lctx, view_path))\n+            hir::ItemUse(lower_view_path(lctx, view_path))\n         }\n         ItemStatic(ref t, m, ref e) => {\n-            hir::ItemStatic(lower_ty(_lctx, t),\n-                            lower_mutability(_lctx, m),\n-                            lower_expr(_lctx, e))\n+            hir::ItemStatic(lower_ty(lctx, t),\n+                            lower_mutability(lctx, m),\n+                            lower_expr(lctx, e))\n         }\n         ItemConst(ref t, ref e) => {\n-            hir::ItemConst(lower_ty(_lctx, t), lower_expr(_lctx, e))\n+            hir::ItemConst(lower_ty(lctx, t), lower_expr(lctx, e))\n         }\n         ItemFn(ref decl, unsafety, constness, abi, ref generics, ref body) => {\n-            hir::ItemFn(lower_fn_decl(_lctx, decl),\n-                        lower_unsafety(_lctx, unsafety),\n-                        lower_constness(_lctx, constness),\n+            hir::ItemFn(lower_fn_decl(lctx, decl),\n+                        lower_unsafety(lctx, unsafety),\n+                        lower_constness(lctx, constness),\n                         abi,\n-                        lower_generics(_lctx, generics),\n-                        lower_block(_lctx, body))\n+                        lower_generics(lctx, generics),\n+                        lower_block(lctx, body))\n         }\n-        ItemMod(ref m) => hir::ItemMod(lower_mod(_lctx, m)),\n-        ItemForeignMod(ref nm) => hir::ItemForeignMod(lower_foreign_mod(_lctx, nm)),\n+        ItemMod(ref m) => hir::ItemMod(lower_mod(lctx, m)),\n+        ItemForeignMod(ref nm) => hir::ItemForeignMod(lower_foreign_mod(lctx, nm)),\n         ItemTy(ref t, ref generics) => {\n-            hir::ItemTy(lower_ty(_lctx, t), lower_generics(_lctx, generics))\n+            hir::ItemTy(lower_ty(lctx, t), lower_generics(lctx, generics))\n         }\n         ItemEnum(ref enum_definition, ref generics) => {\n             hir::ItemEnum(hir::EnumDef {\n                               variants: enum_definition.variants\n                                                        .iter()\n-                                                       .map(|x| lower_variant(_lctx, x))\n+                                                       .map(|x| lower_variant(lctx, x))\n                                                        .collect(),\n                           },\n-                          lower_generics(_lctx, generics))\n+                          lower_generics(lctx, generics))\n         }\n         ItemStruct(ref struct_def, ref generics) => {\n-            let struct_def = lower_variant_data(_lctx, struct_def);\n-            hir::ItemStruct(struct_def, lower_generics(_lctx, generics))\n+            let struct_def = lower_variant_data(lctx, struct_def);\n+            hir::ItemStruct(struct_def, lower_generics(lctx, generics))\n         }\n         ItemDefaultImpl(unsafety, ref trait_ref) => {\n-            hir::ItemDefaultImpl(lower_unsafety(_lctx, unsafety),\n-                                 lower_trait_ref(_lctx, trait_ref))\n+            hir::ItemDefaultImpl(lower_unsafety(lctx, unsafety),\n+                                 lower_trait_ref(lctx, trait_ref))\n         }\n         ItemImpl(unsafety, polarity, ref generics, ref ifce, ref ty, ref impl_items) => {\n             let new_impl_items = impl_items.iter()\n-                                           .map(|item| lower_impl_item(_lctx, item))\n+                                           .map(|item| lower_impl_item(lctx, item))\n                                            .collect();\n-            let ifce = ifce.as_ref().map(|trait_ref| lower_trait_ref(_lctx, trait_ref));\n-            hir::ItemImpl(lower_unsafety(_lctx, unsafety),\n-                          lower_impl_polarity(_lctx, polarity),\n-                          lower_generics(_lctx, generics),\n+            let ifce = ifce.as_ref().map(|trait_ref| lower_trait_ref(lctx, trait_ref));\n+            hir::ItemImpl(lower_unsafety(lctx, unsafety),\n+                          lower_impl_polarity(lctx, polarity),\n+                          lower_generics(lctx, generics),\n                           ifce,\n-                          lower_ty(_lctx, ty),\n+                          lower_ty(lctx, ty),\n                           new_impl_items)\n         }\n         ItemTrait(unsafety, ref generics, ref bounds, ref items) => {\n-            let bounds = lower_bounds(_lctx, bounds);\n-            let items = items.iter().map(|item| lower_trait_item(_lctx, item)).collect();\n-            hir::ItemTrait(lower_unsafety(_lctx, unsafety),\n-                           lower_generics(_lctx, generics),\n+            let bounds = lower_bounds(lctx, bounds);\n+            let items = items.iter().map(|item| lower_trait_item(lctx, item)).collect();\n+            hir::ItemTrait(lower_unsafety(lctx, unsafety),\n+                           lower_generics(lctx, generics),\n                            bounds,\n                            items)\n         }\n         ItemMac(_) => panic!(\"Shouldn't still be around\"),\n     }\n }\n \n-pub fn lower_trait_item(_lctx: &LoweringContext, i: &TraitItem) -> P<hir::TraitItem> {\n+pub fn lower_trait_item(lctx: &LoweringContext, i: &TraitItem) -> P<hir::TraitItem> {\n     P(hir::TraitItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n         node: match i.node {\n             ConstTraitItem(ref ty, ref default) => {\n-                hir::ConstTraitItem(lower_ty(_lctx, ty),\n-                                    default.as_ref().map(|x| lower_expr(_lctx, x)))\n+                hir::ConstTraitItem(lower_ty(lctx, ty),\n+                                    default.as_ref().map(|x| lower_expr(lctx, x)))\n             }\n             MethodTraitItem(ref sig, ref body) => {\n-                hir::MethodTraitItem(lower_method_sig(_lctx, sig),\n-                                     body.as_ref().map(|x| lower_block(_lctx, x)))\n+                hir::MethodTraitItem(lower_method_sig(lctx, sig),\n+                                     body.as_ref().map(|x| lower_block(lctx, x)))\n             }\n             TypeTraitItem(ref bounds, ref default) => {\n-                hir::TypeTraitItem(lower_bounds(_lctx, bounds),\n-                                   default.as_ref().map(|x| lower_ty(_lctx, x)))\n+                hir::TypeTraitItem(lower_bounds(lctx, bounds),\n+                                   default.as_ref().map(|x| lower_ty(lctx, x)))\n             }\n         },\n         span: i.span,\n     })\n }\n \n-pub fn lower_impl_item(_lctx: &LoweringContext, i: &ImplItem) -> P<hir::ImplItem> {\n+pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> P<hir::ImplItem> {\n     P(hir::ImplItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n-        vis: lower_visibility(_lctx, i.vis),\n+        vis: lower_visibility(lctx, i.vis),\n         node: match i.node {\n             ImplItemKind::Const(ref ty, ref expr) => {\n-                hir::ImplItemKind::Const(lower_ty(_lctx, ty), lower_expr(_lctx, expr))\n+                hir::ImplItemKind::Const(lower_ty(lctx, ty), lower_expr(lctx, expr))\n             }\n             ImplItemKind::Method(ref sig, ref body) => {\n-                hir::ImplItemKind::Method(lower_method_sig(_lctx, sig), lower_block(_lctx, body))\n+                hir::ImplItemKind::Method(lower_method_sig(lctx, sig), lower_block(lctx, body))\n             }\n-            ImplItemKind::Type(ref ty) => hir::ImplItemKind::Type(lower_ty(_lctx, ty)),\n+            ImplItemKind::Type(ref ty) => hir::ImplItemKind::Type(lower_ty(lctx, ty)),\n             ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n         },\n         span: i.span,\n     })\n }\n \n-pub fn lower_mod(_lctx: &LoweringContext, m: &Mod) -> hir::Mod {\n+pub fn lower_mod(lctx: &LoweringContext, m: &Mod) -> hir::Mod {\n     hir::Mod {\n         inner: m.inner,\n-        items: m.items.iter().map(|x| lower_item(_lctx, x)).collect(),\n+        items: m.items.iter().map(|x| lower_item(lctx, x)).collect(),\n     }\n }\n \n-pub fn lower_crate(_lctx: &LoweringContext, c: &Crate) -> hir::Crate {\n+pub fn lower_crate(lctx: &LoweringContext, c: &Crate) -> hir::Crate {\n     hir::Crate {\n-        module: lower_mod(_lctx, &c.module),\n+        module: lower_mod(lctx, &c.module),\n         attrs: c.attrs.clone(),\n         config: c.config.clone(),\n         span: c.span,\n-        exported_macros: c.exported_macros.iter().map(|m| lower_macro_def(_lctx, m)).collect(),\n+        exported_macros: c.exported_macros.iter().map(|m| lower_macro_def(lctx, m)).collect(),\n     }\n }\n \n@@ -722,50 +722,50 @@ pub fn lower_macro_def(_lctx: &LoweringContext, m: &MacroDef) -> hir::MacroDef {\n }\n \n // fold one item into possibly many items\n-pub fn lower_item(_lctx: &LoweringContext, i: &Item) -> P<hir::Item> {\n-    P(lower_item_simple(_lctx, i))\n+pub fn lower_item(lctx: &LoweringContext, i: &Item) -> P<hir::Item> {\n+    P(lower_item_simple(lctx, i))\n }\n \n // fold one item into exactly one item\n-pub fn lower_item_simple(_lctx: &LoweringContext, i: &Item) -> hir::Item {\n-    let node = lower_item_underscore(_lctx, &i.node);\n+pub fn lower_item_simple(lctx: &LoweringContext, i: &Item) -> hir::Item {\n+    let node = lower_item_underscore(lctx, &i.node);\n \n     hir::Item {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n         node: node,\n-        vis: lower_visibility(_lctx, i.vis),\n+        vis: lower_visibility(lctx, i.vis),\n         span: i.span,\n     }\n }\n \n-pub fn lower_foreign_item(_lctx: &LoweringContext, i: &ForeignItem) -> P<hir::ForeignItem> {\n+pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> P<hir::ForeignItem> {\n     P(hir::ForeignItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n         node: match i.node {\n             ForeignItemFn(ref fdec, ref generics) => {\n-                hir::ForeignItemFn(lower_fn_decl(_lctx, fdec), lower_generics(_lctx, generics))\n+                hir::ForeignItemFn(lower_fn_decl(lctx, fdec), lower_generics(lctx, generics))\n             }\n             ForeignItemStatic(ref t, m) => {\n-                hir::ForeignItemStatic(lower_ty(_lctx, t), m)\n+                hir::ForeignItemStatic(lower_ty(lctx, t), m)\n             }\n         },\n-        vis: lower_visibility(_lctx, i.vis),\n+        vis: lower_visibility(lctx, i.vis),\n         span: i.span,\n     })\n }\n \n-pub fn lower_method_sig(_lctx: &LoweringContext, sig: &MethodSig) -> hir::MethodSig {\n+pub fn lower_method_sig(lctx: &LoweringContext, sig: &MethodSig) -> hir::MethodSig {\n     hir::MethodSig {\n-        generics: lower_generics(_lctx, &sig.generics),\n+        generics: lower_generics(lctx, &sig.generics),\n         abi: sig.abi,\n-        explicit_self: lower_explicit_self(_lctx, &sig.explicit_self),\n-        unsafety: lower_unsafety(_lctx, sig.unsafety),\n-        constness: lower_constness(_lctx, sig.constness),\n-        decl: lower_fn_decl(_lctx, &sig.decl),\n+        explicit_self: lower_explicit_self(lctx, &sig.explicit_self),\n+        unsafety: lower_unsafety(lctx, sig.unsafety),\n+        constness: lower_constness(lctx, sig.constness),\n+        decl: lower_fn_decl(lctx, &sig.decl),\n     }\n }\n \n@@ -817,57 +817,57 @@ pub fn lower_binop(_lctx: &LoweringContext, b: BinOp) -> hir::BinOp {\n     }\n }\n \n-pub fn lower_pat(_lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> {\n+pub fn lower_pat(lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> {\n     P(hir::Pat {\n         id: p.id,\n         node: match p.node {\n             PatWild => hir::PatWild,\n             PatIdent(ref binding_mode, pth1, ref sub) => {\n-                hir::PatIdent(lower_binding_mode(_lctx, binding_mode),\n+                hir::PatIdent(lower_binding_mode(lctx, binding_mode),\n                               pth1,\n-                              sub.as_ref().map(|x| lower_pat(_lctx, x)))\n+                              sub.as_ref().map(|x| lower_pat(lctx, x)))\n             }\n-            PatLit(ref e) => hir::PatLit(lower_expr(_lctx, e)),\n+            PatLit(ref e) => hir::PatLit(lower_expr(lctx, e)),\n             PatEnum(ref pth, ref pats) => {\n-                hir::PatEnum(lower_path(_lctx, pth),\n+                hir::PatEnum(lower_path(lctx, pth),\n                              pats.as_ref()\n-                                 .map(|pats| pats.iter().map(|x| lower_pat(_lctx, x)).collect()))\n+                                 .map(|pats| pats.iter().map(|x| lower_pat(lctx, x)).collect()))\n             }\n             PatQPath(ref qself, ref pth) => {\n                 let qself = hir::QSelf {\n-                    ty: lower_ty(_lctx, &qself.ty),\n+                    ty: lower_ty(lctx, &qself.ty),\n                     position: qself.position,\n                 };\n-                hir::PatQPath(qself, lower_path(_lctx, pth))\n+                hir::PatQPath(qself, lower_path(lctx, pth))\n             }\n             PatStruct(ref pth, ref fields, etc) => {\n-                let pth = lower_path(_lctx, pth);\n+                let pth = lower_path(lctx, pth);\n                 let fs = fields.iter()\n                                .map(|f| {\n                                    Spanned {\n                                        span: f.span,\n                                        node: hir::FieldPat {\n                                            name: f.node.ident.name,\n-                                           pat: lower_pat(_lctx, &f.node.pat),\n+                                           pat: lower_pat(lctx, &f.node.pat),\n                                            is_shorthand: f.node.is_shorthand,\n                                        },\n                                    }\n                                })\n                                .collect();\n                 hir::PatStruct(pth, fs, etc)\n             }\n-            PatTup(ref elts) => hir::PatTup(elts.iter().map(|x| lower_pat(_lctx, x)).collect()),\n-            PatBox(ref inner) => hir::PatBox(lower_pat(_lctx, inner)),\n+            PatTup(ref elts) => hir::PatTup(elts.iter().map(|x| lower_pat(lctx, x)).collect()),\n+            PatBox(ref inner) => hir::PatBox(lower_pat(lctx, inner)),\n             PatRegion(ref inner, mutbl) => {\n-                hir::PatRegion(lower_pat(_lctx, inner), lower_mutability(_lctx, mutbl))\n+                hir::PatRegion(lower_pat(lctx, inner), lower_mutability(lctx, mutbl))\n             }\n             PatRange(ref e1, ref e2) => {\n-                hir::PatRange(lower_expr(_lctx, e1), lower_expr(_lctx, e2))\n+                hir::PatRange(lower_expr(lctx, e1), lower_expr(lctx, e2))\n             }\n             PatVec(ref before, ref slice, ref after) => {\n-                hir::PatVec(before.iter().map(|x| lower_pat(_lctx, x)).collect(),\n-                            slice.as_ref().map(|x| lower_pat(_lctx, x)),\n-                            after.iter().map(|x| lower_pat(_lctx, x)).collect())\n+                hir::PatVec(before.iter().map(|x| lower_pat(lctx, x)).collect(),\n+                            slice.as_ref().map(|x| lower_pat(lctx, x)),\n+                            after.iter().map(|x| lower_pat(lctx, x)).collect())\n             }\n             PatMac(_) => panic!(\"Shouldn't exist here\"),\n         },\n@@ -1434,23 +1434,23 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n     })\n }\n \n-pub fn lower_stmt(_lctx: &LoweringContext, s: &Stmt) -> P<hir::Stmt> {\n+pub fn lower_stmt(lctx: &LoweringContext, s: &Stmt) -> P<hir::Stmt> {\n     match s.node {\n         StmtDecl(ref d, id) => {\n             P(Spanned {\n-                node: hir::StmtDecl(lower_decl(_lctx, d), id),\n+                node: hir::StmtDecl(lower_decl(lctx, d), id),\n                 span: s.span,\n             })\n         }\n         StmtExpr(ref e, id) => {\n             P(Spanned {\n-                node: hir::StmtExpr(lower_expr(_lctx, e), id),\n+                node: hir::StmtExpr(lower_expr(lctx, e), id),\n                 span: s.span,\n             })\n         }\n         StmtSemi(ref e, id) => {\n             P(Spanned {\n-                node: hir::StmtSemi(lower_expr(_lctx, e), id),\n+                node: hir::StmtSemi(lower_expr(lctx, e), id),\n                 span: s.span,\n             })\n         }\n@@ -1472,26 +1472,26 @@ pub fn lower_visibility(_lctx: &LoweringContext, v: Visibility) -> hir::Visibili\n     }\n }\n \n-pub fn lower_block_check_mode(_lctx: &LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n+pub fn lower_block_check_mode(lctx: &LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n     match *b {\n         DefaultBlock => hir::DefaultBlock,\n-        UnsafeBlock(u) => hir::UnsafeBlock(lower_unsafe_source(_lctx, u)),\n+        UnsafeBlock(u) => hir::UnsafeBlock(lower_unsafe_source(lctx, u)),\n     }\n }\n \n-pub fn lower_binding_mode(_lctx: &LoweringContext, b: &BindingMode) -> hir::BindingMode {\n+pub fn lower_binding_mode(lctx: &LoweringContext, b: &BindingMode) -> hir::BindingMode {\n     match *b {\n-        BindByRef(m) => hir::BindByRef(lower_mutability(_lctx, m)),\n-        BindByValue(m) => hir::BindByValue(lower_mutability(_lctx, m)),\n+        BindByRef(m) => hir::BindByRef(lower_mutability(lctx, m)),\n+        BindByValue(m) => hir::BindByValue(lower_mutability(lctx, m)),\n     }\n }\n \n-pub fn lower_struct_field_kind(_lctx: &LoweringContext,\n+pub fn lower_struct_field_kind(lctx: &LoweringContext,\n                                s: &StructFieldKind)\n                                -> hir::StructFieldKind {\n     match *s {\n-        NamedField(ident, vis) => hir::NamedField(ident.name, lower_visibility(_lctx, vis)),\n-        UnnamedField(vis) => hir::UnnamedField(lower_visibility(_lctx, vis)),\n+        NamedField(ident, vis) => hir::NamedField(ident.name, lower_visibility(lctx, vis)),\n+        UnnamedField(vis) => hir::UnnamedField(lower_visibility(lctx, vis)),\n     }\n }\n \n@@ -1734,11 +1734,12 @@ fn signal_block_expr(lctx: &LoweringContext,\n                      span: Span,\n                      rule: hir::BlockCheckMode)\n                      -> P<hir::Expr> {\n+    let id = lctx.next_id();\n     expr_block(lctx,\n                P(hir::Block {\n                    rules: rule,\n                    span: span,\n-                   id: lctx.next_id(),\n+                   id: id,\n                    stmts: stmts,\n                    expr: Some(expr),\n                }))"}]}