{"sha": "78cbda3bb2cdf80459892bed356553128ef80012", "node_id": "C_kwDOAAsO6NoAKDc4Y2JkYTNiYjJjZGY4MDQ1OTg5MmJlZDM1NjU1MzEyOGVmODAwMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-10T12:03:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-10T12:03:51Z"}, "message": "Auto merge of #2461 - RalfJung:frame-in-std, r=RalfJung\n\nadd special exception for std_miri_test crate to call std-only functions\n\nThese being the unit tests of std, they have their own copy of `std::sys` and `std::thread`, so the existing check says this is not std.  The check is correct but we want to allow this so we just hard-code the crate name.\n\nThe point of this `frame_in_std` check is to prevent people from directly interacting with shims that aren't really properly implemented, but it doesn't need to be 100% airtight. If someone really wants to call their crate `std_miri_test` in order to access some broken shims... they can keep the pieces.", "tree": {"sha": "c17c90dacc5ec73003b8970bffdfc327ab211a9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c17c90dacc5ec73003b8970bffdfc327ab211a9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78cbda3bb2cdf80459892bed356553128ef80012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78cbda3bb2cdf80459892bed356553128ef80012", "html_url": "https://github.com/rust-lang/rust/commit/78cbda3bb2cdf80459892bed356553128ef80012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78cbda3bb2cdf80459892bed356553128ef80012/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aef34c01627e4c6a21decca3f442910f173f187", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aef34c01627e4c6a21decca3f442910f173f187", "html_url": "https://github.com/rust-lang/rust/commit/5aef34c01627e4c6a21decca3f442910f173f187"}, {"sha": "353f7d539ae628a46ecfa1c316d963633e17e780", "url": "https://api.github.com/repos/rust-lang/rust/commits/353f7d539ae628a46ecfa1c316d963633e17e780", "html_url": "https://github.com/rust-lang/rust/commit/353f7d539ae628a46ecfa1c316d963633e17e780"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "7c9f8740eb420a26c857d1fd6797626d2384fff3", "filename": "src/helpers.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78cbda3bb2cdf80459892bed356553128ef80012/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cbda3bb2cdf80459892bed356553128ef80012/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=78cbda3bb2cdf80459892bed356553128ef80012", "patch": "@@ -803,7 +803,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Fall back to the instance of the function itself.\n         let instance = instance.unwrap_or(frame.instance);\n         // Now check if this is in the same crate as start_fn.\n-        this.tcx.def_path(instance.def_id()).krate == this.tcx.def_path(start_fn).krate\n+        // As a special exception we also allow unit tests from\n+        // <https://github.com/rust-lang/miri-test-libstd/tree/master/std_miri_test> to call these\n+        // shims.\n+        let frame_crate = this.tcx.def_path(instance.def_id()).krate;\n+        frame_crate == this.tcx.def_path(start_fn).krate\n+            || this.tcx.crate_name(frame_crate).as_str() == \"std_miri_test\"\n     }\n \n     /// Handler that should be called when unsupported functionality is encountered."}]}