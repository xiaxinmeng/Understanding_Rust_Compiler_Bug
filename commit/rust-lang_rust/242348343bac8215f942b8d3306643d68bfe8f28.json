{"sha": "242348343bac8215f942b8d3306643d68bfe8f28", "node_id": "C_kwDOAAsO6NoAKDI0MjM0ODM0M2JhYzgyMTVmOTQyYjhkMzMwNjY0M2Q2OGJmZThmMjg", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-07T11:59:26Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-07T11:59:38Z"}, "message": "Fix MIR inlining of asm_unwind", "tree": {"sha": "8eaf907ee2fd62817a19cdbb3ad4bd88f97cbd6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eaf907ee2fd62817a19cdbb3ad4bd88f97cbd6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/242348343bac8215f942b8d3306643d68bfe8f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/242348343bac8215f942b8d3306643d68bfe8f28", "html_url": "https://github.com/rust-lang/rust/commit/242348343bac8215f942b8d3306643d68bfe8f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/242348343bac8215f942b8d3306643d68bfe8f28/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01af5040fdada6ef8f1b749cda798d80a8590b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/01af5040fdada6ef8f1b749cda798d80a8590b2c", "html_url": "https://github.com/rust-lang/rust/commit/01af5040fdada6ef8f1b749cda798d80a8590b2c"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "780b91d9215d5e2c08c68d32c9a081efff1a66b6", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/242348343bac8215f942b8d3306643d68bfe8f28/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242348343bac8215f942b8d3306643d68bfe8f28/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=242348343bac8215f942b8d3306643d68bfe8f28", "patch": "@@ -977,6 +977,21 @@ impl Integrator<'_, '_> {\n         trace!(\"mapping block `{:?}` to `{:?}`\", block, new);\n         new\n     }\n+\n+    fn map_unwind(&self, unwind: Option<BasicBlock>) -> Option<BasicBlock> {\n+        if self.in_cleanup_block {\n+            if unwind.is_some() {\n+                bug!(\"cleanup on cleanup block\");\n+            }\n+            return unwind;\n+        }\n+\n+        match unwind {\n+            Some(target) => Some(self.map_block(target)),\n+            // Add an unwind edge to the original call's cleanup block\n+            None => self.cleanup_block,\n+        }\n+    }\n }\n \n impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n@@ -1085,35 +1100,17 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n             TerminatorKind::Drop { ref mut target, ref mut unwind, .. }\n             | TerminatorKind::DropAndReplace { ref mut target, ref mut unwind, .. } => {\n                 *target = self.map_block(*target);\n-                if let Some(tgt) = *unwind {\n-                    *unwind = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this drop is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *unwind = self.cleanup_block;\n-                }\n+                *unwind = self.map_unwind(*unwind);\n             }\n             TerminatorKind::Call { ref mut target, ref mut cleanup, .. } => {\n                 if let Some(ref mut tgt) = *target {\n                     *tgt = self.map_block(*tgt);\n                 }\n-                if let Some(tgt) = *cleanup {\n-                    *cleanup = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this call is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n-                }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n             TerminatorKind::Assert { ref mut target, ref mut cleanup, .. } => {\n                 *target = self.map_block(*target);\n-                if let Some(tgt) = *cleanup {\n-                    *cleanup = Some(self.map_block(tgt));\n-                } else if !self.in_cleanup_block {\n-                    // Unless this assert is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n-                }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n             TerminatorKind::Return => {\n                 terminator.kind = if let Some(tgt) = self.callsite.target {\n@@ -1141,11 +1138,8 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n             TerminatorKind::InlineAsm { ref mut destination, ref mut cleanup, .. } => {\n                 if let Some(ref mut tgt) = *destination {\n                     *tgt = self.map_block(*tgt);\n-                } else if !self.in_cleanup_block {\n-                    // Unless this inline asm is in a cleanup block, add an unwind edge to\n-                    // the original call's cleanup block\n-                    *cleanup = self.cleanup_block;\n                 }\n+                *cleanup = self.map_unwind(*cleanup);\n             }\n         }\n     }"}, {"sha": "eb1f9b9fbc3002a32b5bcf337176f2bd78b88131", "filename": "src/test/mir-opt/inline/asm-unwind.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/242348343bac8215f942b8d3306643d68bfe8f28/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242348343bac8215f942b8d3306643d68bfe8f28/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fasm-unwind.rs?ref=242348343bac8215f942b8d3306643d68bfe8f28", "patch": "@@ -0,0 +1,21 @@\n+// Tests inlining of `may_unwind` inline assembly.\n+//\n+// ignore-wasm32-bare compiled with panic=abort by default\n+#![feature(asm_unwind)]\n+\n+struct D;\n+\n+impl Drop for D {\n+    fn drop(&mut self) {}\n+}\n+\n+#[inline(always)]\n+fn foo() {\n+    let _d = D;\n+    unsafe { std::arch::asm!(\"\", options(may_unwind)) };\n+}\n+\n+// EMIT_MIR asm_unwind.main.Inline.diff\n+pub fn main() {\n+    foo();\n+}"}, {"sha": "717b2c1f9365186b4c1c062c4db499eaf0cca7e7", "filename": "src/test/mir-opt/inline/asm_unwind.main.Inline.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/242348343bac8215f942b8d3306643d68bfe8f28/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/242348343bac8215f942b8d3306643d68bfe8f28/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff?ref=242348343bac8215f942b8d3306643d68bfe8f28", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/asm-unwind.rs:+0:15: +0:15\n+      let _1: ();                          // in scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n++     scope 1 (inlined foo) {              // at $DIR/asm-unwind.rs:20:5: 20:10\n++         let _2: D;                       // in scope 1 at $DIR/asm-unwind.rs:14:9: 14:11\n++         scope 2 {\n++             debug _d => _2;              // in scope 2 at $DIR/asm-unwind.rs:14:9: 14:11\n++             scope 3 {\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n+-         _1 = foo() -> bb1;               // scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/asm-unwind.rs:20:5: 20:8\n+-                                          // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }\n++         StorageLive(_2);                 // scope 1 at $DIR/asm-unwind.rs:14:9: 14:11\n++         asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb3]; // scope 3 at $DIR/asm-unwind.rs:15:14: 15:54\n+      }\n+  \n+      bb1: {\n++         drop(_2) -> bb2;                 // scope 1 at $DIR/asm-unwind.rs:16:1: 16:2\n++     }\n++ \n++     bb2: {\n++         StorageDead(_2);                 // scope 1 at $DIR/asm-unwind.rs:16:1: 16:2\n+          StorageDead(_1);                 // scope 0 at $DIR/asm-unwind.rs:+1:10: +1:11\n+          _0 = const ();                   // scope 0 at $DIR/asm-unwind.rs:+0:15: +2:2\n+          return;                          // scope 0 at $DIR/asm-unwind.rs:+2:2: +2:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         drop(_2) -> bb4;                 // scope 1 at $DIR/asm-unwind.rs:16:1: 16:2\n++     }\n++ \n++     bb4 (cleanup): {\n++         resume;                          // scope 1 at $DIR/asm-unwind.rs:13:1: 16:2\n+      }\n+  }\n+  "}]}