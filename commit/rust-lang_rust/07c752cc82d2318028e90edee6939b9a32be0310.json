{"sha": "07c752cc82d2318028e90edee6939b9a32be0310", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Yzc1MmNjODJkMjMxODAyOGU5MGVkZWU2OTM5YjlhMzJiZTAzMTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-04T16:51:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-04T16:55:06Z"}, "message": "fix the block processing for the drop_in_place intrinsic", "tree": {"sha": "8671a2ddaf6a766427102078e41dbd9d4e743342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8671a2ddaf6a766427102078e41dbd9d4e743342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c752cc82d2318028e90edee6939b9a32be0310", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYHL1qAAoJEFbW7qD8Z6xGcdUP/ioaSgd3dv9WFbqYBp70N0qi\nbkFCbiIilahv+/frS3PBB0XBo1l2kgKPT58d4HTrvoZebz4D6w67hypj6W1pQYp2\nbWtGROaG+y67gNe8uVZrPgujut4FQv4DlAtjPgXhDAi92smsF3mHg1U5djEVbyMt\n5aVYV9IRXh+8oZghfmJGf5kFx0LZCbVIBoC/9LH6DEGMAQ5wVHCNdIUYyHdc/fsB\nN2KL9f+e72IiR6otSHtwFhDCngXxM5NPtI8OkAyrFE4BAvbqxtGiw0zwQ9vnCi+D\nZPgYYcoG7yK3aPovYNPpHT8CWBrRGsbF3LW+0Ny5Vo6lke1fV2gN58ndmq9apmSj\nxxB/q/UiuCMv2qXz7ezV5+ZIwqfslmdZGbAYExEkV/Jjxe0YABTUSOXHX9ciRF45\nxYjte5SycS4Uh3mo0nsHuL6/nIscRVVlZW+MkE9G4FpLqcCHYlXkuO0prEmDxxHv\n+Rov+p9kZMBA6IZBDiKyH0Zght+ovbwPpHhbeZzfVucnYPibrzgefKYr3kLdjkkm\nhvA8Dq/g2g9A6b6rAutE60sibNboWRfDtjhOyw72VRsqfpKTWKy+Bzk7SbMMZKni\nxqQDut0tPyH4bjO6pg1LSzOm8E+qzbuThpz062u6W60WjIzha2nQrSGzWBaDtHgq\n0a2oor72W7tucP5eA4u4\n=jOfM\n-----END PGP SIGNATURE-----", "payload": "tree 8671a2ddaf6a766427102078e41dbd9d4e743342\nparent 893f16389ec6e5bf117bed796738799a2c636519\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478278273 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478278506 +0100\n\nfix the block processing for the drop_in_place intrinsic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c752cc82d2318028e90edee6939b9a32be0310", "html_url": "https://github.com/rust-lang/rust/commit/07c752cc82d2318028e90edee6939b9a32be0310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c752cc82d2318028e90edee6939b9a32be0310/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "893f16389ec6e5bf117bed796738799a2c636519", "url": "https://api.github.com/repos/rust-lang/rust/commits/893f16389ec6e5bf117bed796738799a2c636519", "html_url": "https://github.com/rust-lang/rust/commit/893f16389ec6e5bf117bed796738799a2c636519"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "9161f6e35b4e1d8c4f2abd44217a5eab1a540348", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07c752cc82d2318028e90edee6939b9a32be0310/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c752cc82d2318028e90edee6939b9a32be0310/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=07c752cc82d2318028e90edee6939b9a32be0310", "patch": "@@ -18,6 +18,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n         dest_layout: &'tcx Layout,\n+        target: mir::BasicBlock,\n     ) -> EvalResult<'tcx, ()> {\n         let arg_vals: EvalResult<Vec<Value>> = args.iter()\n             .map(|arg| self.eval_operand(arg))\n@@ -137,7 +138,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 };\n                 let mut drops = Vec::new();\n                 self.drop(lvalue, ty, &mut drops)?;\n-                self.eval_drop_impls(drops)?;\n+                // need to change the block before pushing the drop impl stack frames\n+                // we could do this for all intrinsics before evaluating the intrinsics, but if\n+                // the evaluation fails, we should not have moved forward\n+                self.goto_block(target);\n+                return self.eval_drop_impls(drops);\n             }\n \n             \"fabsf32\" => {\n@@ -341,6 +346,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             name => return Err(EvalError::Unimplemented(format!(\"unimplemented intrinsic: {}\", name))),\n         }\n \n+        self.goto_block(target);\n+\n         // Since we pushed no stack frame, the main loop will act\n         // as if the call just completed and it's returning to the\n         // current frame."}, {"sha": "dcca791f66653a397d28134304d2a98cd7098482", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07c752cc82d2318028e90edee6939b9a32be0310/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c752cc82d2318028e90edee6939b9a32be0310/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=07c752cc82d2318028e90edee6939b9a32be0310", "patch": "@@ -187,8 +187,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let ty = fn_ty.sig.0.output;\n                 let layout = self.type_layout(ty);\n                 let (ret, target) = destination.unwrap();\n-                self.call_intrinsic(def_id, substs, arg_operands, ret, ty, layout)?;\n-                self.goto_block(target);\n+                self.call_intrinsic(def_id, substs, arg_operands, ret, ty, layout, target)?;\n                 Ok(())\n             }\n "}, {"sha": "ce56ca6a1cafdd5d589f76e6e7ee12b16a106327", "filename": "tests/run-pass/call_drop_through_trait_object_rc.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07c752cc82d2318028e90edee6939b9a32be0310/tests%2Frun-pass%2Fcall_drop_through_trait_object_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c752cc82d2318028e90edee6939b9a32be0310/tests%2Frun-pass%2Fcall_drop_through_trait_object_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_through_trait_object_rc.rs?ref=07c752cc82d2318028e90edee6939b9a32be0310", "patch": "@@ -0,0 +1,22 @@\n+trait Foo {}\n+\n+struct Bar;\n+\n+static mut DROP_CALLED: bool = false;\n+\n+impl Drop for Bar {\n+    fn drop(&mut self) {\n+        unsafe { DROP_CALLED = true; }\n+    }\n+}\n+\n+impl Foo for Bar {}\n+\n+use std::rc::Rc;\n+\n+fn main() {\n+    let b: Rc<Foo> = Rc::new(Bar);\n+    assert!(unsafe { !DROP_CALLED });\n+    drop(b);\n+    assert!(unsafe { DROP_CALLED });\n+}"}]}