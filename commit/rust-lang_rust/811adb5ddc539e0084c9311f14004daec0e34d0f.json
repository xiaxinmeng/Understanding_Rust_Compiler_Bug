{"sha": "811adb5ddc539e0084c9311f14004daec0e34d0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMWFkYjVkZGM1MzllMDA4NGM5MzExZjE0MDA0ZGFlYzBlMzRkMGY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-05T14:34:45Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-07T16:38:24Z"}, "message": "Remove private methods from TyCtxt impl block: rustc::middle::stability.", "tree": {"sha": "f09b76c0a4e7cd9652f969f4424201aca4dbb512", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f09b76c0a4e7cd9652f969f4424201aca4dbb512"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811adb5ddc539e0084c9311f14004daec0e34d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811adb5ddc539e0084c9311f14004daec0e34d0f", "html_url": "https://github.com/rust-lang/rust/commit/811adb5ddc539e0084c9311f14004daec0e34d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811adb5ddc539e0084c9311f14004daec0e34d0f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47256b8b7c78f188defaed8f5491ce01812622b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/47256b8b7c78f188defaed8f5491ce01812622b1", "html_url": "https://github.com/rust-lang/rust/commit/47256b8b7c78f188defaed8f5491ce01812622b1"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "f2474faa75e4402f8fe9c3245320bdf0968aaadf", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/811adb5ddc539e0084c9311f14004daec0e34d0f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811adb5ddc539e0084c9311f14004daec0e34d0f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=811adb5ddc539e0084c9311f14004daec0e34d0f", "patch": "@@ -245,35 +245,35 @@ pub enum EvalResult {\n     Unmarked,\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    // See issue #38412.\n-    fn skip_stability_check_due_to_privacy(self, mut def_id: DefId) -> bool {\n-        // Check if `def_id` is a trait method.\n-        match self.def_kind(def_id) {\n-            Some(DefKind::Method) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n-                if let ty::TraitContainer(trait_def_id) = self.associated_item(def_id).container {\n-                    // Trait methods do not declare visibility (even\n-                    // for visibility info in cstore). Use containing\n-                    // trait instead, so methods of `pub` traits are\n-                    // themselves considered `pub`.\n-                    def_id = trait_def_id;\n-                }\n+// See issue #38412.\n+fn skip_stability_check_due_to_privacy(tcx: TyCtxt<'_>, mut def_id: DefId) -> bool {\n+    // Check if `def_id` is a trait method.\n+    match tcx.def_kind(def_id) {\n+        Some(DefKind::Method) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n+            if let ty::TraitContainer(trait_def_id) = tcx.associated_item(def_id).container {\n+                // Trait methods do not declare visibility (even\n+                // for visibility info in cstore). Use containing\n+                // trait instead, so methods of `pub` traits are\n+                // themselves considered `pub`.\n+                def_id = trait_def_id;\n             }\n-            _ => {}\n         }\n+        _ => {}\n+    }\n \n-        let visibility = self.visibility(def_id);\n+    let visibility = tcx.visibility(def_id);\n \n-        match visibility {\n-            // Must check stability for `pub` items.\n-            ty::Visibility::Public => false,\n+    match visibility {\n+        // Must check stability for `pub` items.\n+        ty::Visibility::Public => false,\n \n-            // These are not visible outside crate; therefore\n-            // stability markers are irrelevant, if even present.\n-            ty::Visibility::Restricted(..) | ty::Visibility::Invisible => true,\n-        }\n+        // These are not visible outside crate; therefore\n+        // stability markers are irrelevant, if even present.\n+        ty::Visibility::Restricted(..) | ty::Visibility::Invisible => true,\n     }\n+}\n \n+impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates the stability of an item.\n     ///\n     /// Returns `EvalResult::Allow` if the item is stable, or unstable but the corresponding\n@@ -338,7 +338,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         // Issue #38412: private items lack stability markers.\n-        if self.skip_stability_check_due_to_privacy(def_id) {\n+        if skip_stability_check_due_to_privacy(self, def_id) {\n             return EvalResult::Allow;\n         }\n \n@@ -402,9 +402,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         }\n     }\n-}\n \n-impl<'tcx> TyCtxt<'tcx> {\n     pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> {\n         self.lookup_deprecation_entry(id).map(|depr| depr.attr)\n     }"}]}