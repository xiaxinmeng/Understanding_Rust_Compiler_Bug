{"sha": "90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYWE2MmExYmYwMGM1NTVhYmM4MzRhMjFlODRkOWU3ZTIwZGNmODY=", "commit": {"author": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-04-19T08:47:55Z"}, "committer": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-03T00:42:07Z"}, "message": "Implement RFC 2523, `#[cfg(version(..))]`", "tree": {"sha": "af38c569715072b4a34fc133a07c276365a0a446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af38c569715072b4a34fc133a07c276365a0a446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "html_url": "https://github.com/rust-lang/rust/commit/90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/comments", "author": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f05a5240440b3eaef1684a7965860fab40301947", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05a5240440b3eaef1684a7965860fab40301947", "html_url": "https://github.com/rust-lang/rust/commit/f05a5240440b3eaef1684a7965860fab40301947"}], "stats": {"total": 246, "additions": 227, "deletions": 19}, "files": [{"sha": "0fed32f4a9d0466f62799c7ba953fce2a2b64946", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -3593,6 +3593,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"serialize\",\n+ \"version_check\",\n ]\n \n [[package]]"}, {"sha": "2b1e50835b7676ace00a28da09b1fdf041113f07", "filename": "src/doc/unstable-book/src/language-features/cfg-version.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-version.md?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -0,0 +1,34 @@\n+# `cfg_version`\n+\n+The tracking issue for this feature is: [#64796]\n+\n+[#64796]: https://github.com/rust-lang/rust/issues/64796\n+\n+------------------------\n+\n+The `cfg_version` feature makes it possible to execute different code\n+depending on the compiler version.\n+\n+## Examples\n+\n+```rust\n+#![feature(cfg_version)]\n+\n+#[cfg(version(\"1.42\"))]\n+fn a() {\n+    // ...\n+}\n+\n+#[cfg(not(version(\"1.42\")))]\n+fn a() {\n+    // ...\n+}\n+\n+fn b() {\n+    if cfg!(version(\"1.42\")) {\n+        // ...\n+    } else {\n+        // ...\n+    }\n+}\n+```"}, {"sha": "ad97ac8ffd3d254388132591ac3558e2118cda4a", "filename": "src/librustc_attr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2FCargo.toml?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -19,3 +19,4 @@ rustc_feature = { path = \"../librustc_feature\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_ast = { path = \"../librustc_ast\" }\n+version_check = \"0.9\""}, {"sha": "c29d8c0e0feb6e6f06e67765e142e305451350bc", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -2,7 +2,7 @@\n \n use super::{find_by_name, mark_used};\n \n-use rustc_ast::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem};\n+use rustc_ast::ast::{self, Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n@@ -11,6 +11,7 @@ use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::hygiene::Transparency;\n use rustc_span::{symbol::sym, symbol::Symbol, Span};\n use std::num::NonZeroU32;\n+use version_check::Version;\n \n pub fn is_builtin_attr(attr: &Attribute) -> bool {\n     attr.is_doc_comment() || attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n@@ -568,11 +569,8 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<Symbol> {\n \n /// Tests if a cfg-pattern matches the cfg set\n pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) -> bool {\n-    eval_condition(cfg, sess, &mut |cfg| {\n-        let gate = find_gated_cfg(|sym| cfg.check_name(sym));\n-        if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n-            gate_cfg(&gated_cfg, cfg.span, sess, feats);\n-        }\n+    eval_condition(cfg, sess, features, &mut |cfg| {\n+        try_gate_cfg(cfg, sess, features);\n         let error = |span, msg| {\n             sess.span_diagnostic.span_err(span, msg);\n             true\n@@ -603,6 +601,13 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n     })\n }\n \n+fn try_gate_cfg(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) {\n+    let gate = find_gated_cfg(|sym| cfg.check_name(sym));\n+    if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n+        gate_cfg(&gated_cfg, cfg.span, sess, feats);\n+    }\n+}\n+\n fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &Features) {\n     let (cfg, feature, has_feature) = gated_cfg;\n     if !has_feature(features) && !cfg_span.allows_unstable(*feature) {\n@@ -616,9 +621,42 @@ fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &F\n pub fn eval_condition(\n     cfg: &ast::MetaItem,\n     sess: &ParseSess,\n+    features: Option<&Features>,\n     eval: &mut impl FnMut(&ast::MetaItem) -> bool,\n ) -> bool {\n     match cfg.kind {\n+        ast::MetaItemKind::List(ref mis) if cfg.name_or_empty() == sym::version => {\n+            try_gate_cfg(cfg, sess, features);\n+            let (min_version, span) = match &mis[..] {\n+                [NestedMetaItem::Literal(Lit { kind: LitKind::Str(sym, ..), span, .. })] => {\n+                    (sym, span)\n+                }\n+                [NestedMetaItem::Literal(Lit { span, .. })\n+                | NestedMetaItem::MetaItem(MetaItem { span, .. })] => {\n+                    sess.span_diagnostic\n+                        .struct_span_err(*span, &*format!(\"expected string literal\"))\n+                        .emit();\n+                    return false;\n+                }\n+                [..] => {\n+                    sess.span_diagnostic\n+                        .struct_span_err(cfg.span, \"expected single string literal\")\n+                        .emit();\n+                    return false;\n+                }\n+            };\n+            let min_version = match Version::parse(&min_version.as_str()) {\n+                Some(ver) => ver,\n+                None => {\n+                    sess.span_diagnostic.struct_span_err(*span, \"invalid version string\").emit();\n+                    return false;\n+                }\n+            };\n+            let version = option_env!(\"CFG_VERSION\").unwrap_or(\"unknown rustc version\");\n+            let version = Version::parse(version).unwrap();\n+\n+            version >= min_version\n+        }\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {\n                 if !mi.is_meta_item() {\n@@ -634,12 +672,12 @@ pub fn eval_condition(\n             // The unwraps below may look dangerous, but we've already asserted\n             // that they won't fail with the loop above.\n             match cfg.name_or_empty() {\n-                sym::any => {\n-                    mis.iter().any(|mi| eval_condition(mi.meta_item().unwrap(), sess, eval))\n-                }\n-                sym::all => {\n-                    mis.iter().all(|mi| eval_condition(mi.meta_item().unwrap(), sess, eval))\n-                }\n+                sym::any => mis\n+                    .iter()\n+                    .any(|mi| eval_condition(mi.meta_item().unwrap(), sess, features, eval)),\n+                sym::all => mis\n+                    .iter()\n+                    .all(|mi| eval_condition(mi.meta_item().unwrap(), sess, features, eval)),\n                 sym::not => {\n                     if mis.len() != 1 {\n                         struct_span_err!(\n@@ -652,7 +690,7 @@ pub fn eval_condition(\n                         return false;\n                     }\n \n-                    !eval_condition(mis[0].meta_item().unwrap(), sess, eval)\n+                    !eval_condition(mis[0].meta_item().unwrap(), sess, features, eval)\n                 }\n                 _ => {\n                     struct_span_err!("}, {"sha": "66c4495c5afc8fe81fffe8939c483c937a00479f", "filename": "src/librustc_attr/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_attr%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_attr%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Flib.rs?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -4,6 +4,8 @@\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n+#![feature(or_patterns)]\n+\n mod builtin;\n \n pub use builtin::*;"}, {"sha": "a1dd7a5ca5225ea471b66082c22ba6eebb5e9e32", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -562,6 +562,9 @@ declare_features! (\n     /// Allows the use of `#[target_feature]` on safe functions.\n     (active, target_feature_11, \"1.45.0\", Some(69098), None),\n \n+    /// Allow conditional compilation depending on rust version\n+    (active, cfg_version, \"1.45.0\", Some(64796), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "466b318bca7305386e02c705678e681b37ce6c5c", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -26,6 +26,7 @@ const GATED_CFGS: &[GatedCfg] = &[\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::sanitize, sym::cfg_sanitize, cfg_fn!(cfg_sanitize)),\n+    (sym::version, sym::cfg_version, cfg_fn!(cfg_version)),\n ];\n \n /// Find a gated cfg determined by the `pred`icate which is given the cfg's name."}, {"sha": "f194506e66069b6ba2d8a4eedcbfb2c1697caa62", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -192,6 +192,7 @@ symbols! {\n         cfg_target_has_atomic,\n         cfg_target_thread_local,\n         cfg_target_vendor,\n+        cfg_version,\n         char,\n         clippy,\n         clone,\n@@ -805,6 +806,7 @@ symbols! {\n         var,\n         vec,\n         Vec,\n+        version,\n         vis,\n         visible_private_types,\n         volatile,"}, {"sha": "3fbc0b7f08e5f1a52bdc2e975a582ca2b4eb0f54", "filename": "src/librustc_trait_selection/traits/on_unimplemented.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> OnUnimplementedDirective {\n                         None,\n                     )\n                 })?;\n-            attr::eval_condition(cond, &tcx.sess.parse_sess, &mut |_| true);\n+            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |_| true);\n             Some(cond.clone())\n         };\n \n@@ -208,11 +208,16 @@ impl<'tcx> OnUnimplementedDirective {\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n-                if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    c.ident().map_or(false, |ident| {\n-                        options.contains(&(ident.name, c.value_str().map(|s| s.to_string())))\n-                    })\n-                }) {\n+                if !attr::eval_condition(\n+                    condition,\n+                    &tcx.sess.parse_sess,\n+                    Some(tcx.features()),\n+                    &mut |c| {\n+                        c.ident().map_or(false, |ident| {\n+                            options.contains(&(ident.name, c.value_str().map(|s| s.to_string())))\n+                        })\n+                    },\n+                ) {\n                     debug!(\"evaluate: skipping {:?} due to condition\", command);\n                     continue;\n                 }"}, {"sha": "71b82b7f749e1ecf5c5c55035d5832d6dd203dda", "filename": "src/test/ui/feature-gates/feature-gate-cfg-version.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.rs?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -0,0 +1,28 @@\n+#[cfg(version(\"1.44\"))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn foo() -> bool { true }\n+#[cfg(not(version(\"1.44\")))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn foo() -> bool { false }\n+\n+#[cfg(version(\"1.43\", \"1.44\", \"1.45\"))] //~ ERROR: expected single string literal\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(false))] //~ ERROR: expected string literal\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(\"foo\"))] //~ ERROR: invalid version string\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(\"999\"))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool  { false }\n+#[cfg(version(\"0\"))]\n+//~^ ERROR `cfg(version)` is experimental and subject to change\n+fn bar() -> bool { true }\n+\n+fn main() {\n+    assert!(foo());\n+    assert!(bar());\n+    assert!(cfg!(version(\"1.42\"))); //~ ERROR `cfg(version)` is experimental and subject to change\n+}"}, {"sha": "48686dd4aebfe08f2f91b69db1476fb721f795cb", "filename": "src/test/ui/feature-gates/feature-gate-cfg-version.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90aa62a1bf00c555abc834a21e84d9e7e20dcf86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-version.stderr?ref=90aa62a1bf00c555abc834a21e84d9e7e20dcf86", "patch": "@@ -0,0 +1,93 @@\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:1:7\n+   |\n+LL | #[cfg(version(\"1.44\"))]\n+   |       ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:4:11\n+   |\n+LL | #[cfg(not(version(\"1.44\")))]\n+   |           ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:8:7\n+   |\n+LL | #[cfg(version(\"1.43\", \"1.44\", \"1.45\"))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: expected single string literal\n+  --> $DIR/feature-gate-cfg-version.rs:8:7\n+   |\n+LL | #[cfg(version(\"1.43\", \"1.44\", \"1.45\"))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:11:7\n+   |\n+LL | #[cfg(version(false))]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: expected string literal\n+  --> $DIR/feature-gate-cfg-version.rs:11:15\n+   |\n+LL | #[cfg(version(false))]\n+   |               ^^^^^\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:14:7\n+   |\n+LL | #[cfg(version(\"foo\"))]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: invalid version string\n+  --> $DIR/feature-gate-cfg-version.rs:14:15\n+   |\n+LL | #[cfg(version(\"foo\"))]\n+   |               ^^^^^\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:17:7\n+   |\n+LL | #[cfg(version(\"999\"))]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:20:7\n+   |\n+LL | #[cfg(version(\"0\"))]\n+   |       ^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(version)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-version.rs:27:18\n+   |\n+LL |     assert!(cfg!(version(\"1.42\")));\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64796 <https://github.com/rust-lang/rust/issues/64796> for more information\n+   = help: add `#![feature(cfg_version)]` to the crate attributes to enable\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}