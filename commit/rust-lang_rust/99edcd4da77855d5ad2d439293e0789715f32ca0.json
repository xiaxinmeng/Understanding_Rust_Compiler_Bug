{"sha": "99edcd4da77855d5ad2d439293e0789715f32ca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZWRjZDRkYTc3ODU1ZDVhZDJkNDM5MjkzZTA3ODk3MTVmMzJjYTA=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-09-30T12:47:15Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-10-01T05:02:12Z"}, "message": "lint to use self for this/my", "tree": {"sha": "f4361dc88f808adbbe5ed084fec2e290be0228e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4361dc88f808adbbe5ed084fec2e290be0228e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99edcd4da77855d5ad2d439293e0789715f32ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99edcd4da77855d5ad2d439293e0789715f32ca0", "html_url": "https://github.com/rust-lang/rust/commit/99edcd4da77855d5ad2d439293e0789715f32ca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99edcd4da77855d5ad2d439293e0789715f32ca0/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae164c02c6d6b66f4a34b572bcff0612929ce96", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae164c02c6d6b66f4a34b572bcff0612929ce96", "html_url": "https://github.com/rust-lang/rust/commit/cae164c02c6d6b66f4a34b572bcff0612929ce96"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "99ce351cbcf725273ccb7516b5cbf0f402d4c8e0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99edcd4da77855d5ad2d439293e0789715f32ca0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99edcd4da77855d5ad2d439293e0789715f32ca0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=99edcd4da77855d5ad2d439293e0789715f32ca0", "patch": "@@ -2981,13 +2981,13 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             // Make the base error.\n             let expected = source.descr_expected();\n             let path_str = names_to_string(path);\n+            let item_str = path[path.len() - 1];\n             let code = source.error_code(def.is_some());\n             let (base_msg, fallback_label, base_span) = if let Some(def) = def {\n                 (format!(\"expected {}, found {} `{}`\", expected, def.kind_name(), path_str),\n                  format!(\"not a {}\", expected),\n                  span)\n             } else {\n-                let item_str = path[path.len() - 1];\n                 let item_span = path[path.len() - 1].span;\n                 let (mod_prefix, mod_str) = if path.len() == 1 {\n                     (String::new(), \"this scope\".to_string())\n@@ -3010,6 +3010,20 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let code = DiagnosticId::Error(code.into());\n             let mut err = this.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n+            // Emit help message for fake-self from other languages like `this`(javascript)\n+            let fake_self: Vec<Ident> = [\"this\", \"my\"].iter().map(\n+                |s| Ident::from_str(*s)\n+            ).collect();\n+            if fake_self.contains(&item_str)\n+                && this.self_value_is_available(path[0].span, span) {\n+                err.span_suggestion_with_applicability(\n+                    span,\n+                    \"did you mean\",\n+                    \"self\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+\n             // Emit special messages for unresolved `Self` and `self`.\n             if is_self_type(path, ns) {\n                 __diagnostic_used!(E0411);"}]}