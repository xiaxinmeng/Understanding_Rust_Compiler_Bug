{"sha": "baa7b32d4b608392c62b54690fa431fc17860e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYTdiMzJkNGI2MDgzOTJjNjJiNTQ2OTBmYTQzMWZjMTc4NjBlMzI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-05-04T21:12:33Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-05-04T21:31:26Z"}, "message": "Mark lints with applicability", "tree": {"sha": "dce3058de0ed76cfe82ecc713a22fb120153b78f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dce3058de0ed76cfe82ecc713a22fb120153b78f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa7b32d4b608392c62b54690fa431fc17860e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa7b32d4b608392c62b54690fa431fc17860e32", "html_url": "https://github.com/rust-lang/rust/commit/baa7b32d4b608392c62b54690fa431fc17860e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa7b32d4b608392c62b54690fa431fc17860e32/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d34e8dd21264a0e23d87e12b6c0ec9bef835af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d34e8dd21264a0e23d87e12b6c0ec9bef835af3", "html_url": "https://github.com/rust-lang/rust/commit/9d34e8dd21264a0e23d87e12b6c0ec9bef835af3"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "175b44991fdfee4835ff0b4a1b38f6e32278fdb9", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/baa7b32d4b608392c62b54690fa431fc17860e32/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa7b32d4b608392c62b54690fa431fc17860e32/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=baa7b32d4b608392c62b54690fa431fc17860e32", "patch": "@@ -14,7 +14,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use errors::DiagnosticBuilder;\n+use errors::{Applicability, DiagnosticBuilder};\n use lint::{LintPass, LateLintPass, LintArray};\n use session::Session;\n use syntax::codemap::Span;\n@@ -341,15 +341,16 @@ impl BuiltinLintDiagnostics {\n         match self {\n             BuiltinLintDiagnostics::Normal => (),\n             BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n-                let sugg = match sess.codemap().span_to_snippet(span) {\n-                    Ok(ref s) if is_global => format!(\"dyn ({})\", s),\n-                    Ok(s) => format!(\"dyn {}\", s),\n-                    Err(_) => format!(\"dyn <type>\")\n+                let (sugg, app) = match sess.codemap().span_to_snippet(span) {\n+                    Ok(ref s) if is_global => (format!(\"dyn ({})\", s),\n+                                               Applicability::MachineApplicable),\n+                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n+                    Err(_) => (format!(\"dyn <type>\"), Applicability::HasPlaceholders)\n                 };\n-                db.span_suggestion(span, \"use `dyn`\", sugg);\n+                db.span_suggestion_with_applicability(span, \"use `dyn`\", sugg, app);\n             }\n             BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n-                let sugg = match sess.codemap().span_to_snippet(span) {\n+                let (sugg, app) = match sess.codemap().span_to_snippet(span) {\n                     Ok(ref s) => {\n                         // FIXME(Manishearth) ideally the emitting code\n                         // can tell us whether or not this is global\n@@ -359,11 +360,11 @@ impl BuiltinLintDiagnostics {\n                             \"::\"\n                         };\n \n-                        format!(\"crate{}{}\", opt_colon, s)\n+                        (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n                     }\n-                    Err(_) => format!(\"crate::<path>\")\n+                    Err(_) => (format!(\"crate::<path>\"), Applicability::HasPlaceholders)\n                 };\n-                db.span_suggestion(span, \"use `crate`\", sugg);\n+                db.span_suggestion_with_applicability(span, \"use `crate`\", sugg, app);\n             }\n         }\n     }"}, {"sha": "817abe2ceeb76f1a36686bef52aed105c601bf1d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/baa7b32d4b608392c62b54690fa431fc17860e32/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa7b32d4b608392c62b54690fa431fc17860e32/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=baa7b32d4b608392c62b54690fa431fc17860e32", "patch": "@@ -46,7 +46,7 @@ use syntax::attr;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n-use syntax::errors::DiagnosticBuilder;\n+use syntax::errors::{Applicability, DiagnosticBuilder};\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::FnKind;\n@@ -1300,7 +1300,19 @@ impl UnreachablePub {\n             } else {\n                 \"pub(crate)\"\n             }.to_owned();\n-            err.span_suggestion(pub_span, \"consider restricting its visibility\", replacement);\n+            let app = if span.ctxt().outer().expn_info().is_none() {\n+                // even if macros aren't involved the suggestion\n+                // may be incorrect -- the user may have mistakenly\n+                // hidden it behind a private module and this lint is\n+                // a helpful way to catch that. However, we're trying\n+                // not to change the nature of the code with this lint\n+                // so it's marked as machine applicable.\n+                Applicability::MachineApplicable\n+            } else {\n+                Applicability::MaybeIncorrect\n+            };\n+            err.span_suggestion_with_applicability(pub_span, \"consider restricting its visibility\",\n+                                                   replacement, app);\n             if exportable {\n                 err.help(\"or consider exporting it for use by other crates\");\n             }"}]}