{"sha": "1481af9f598c84d58fc1f720777a3e482d8a33c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODFhZjlmNTk4Yzg0ZDU4ZmMxZjcyMDc3N2EzZTQ4MmQ4YTMzYzE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T01:23:11Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T19:56:12Z"}, "message": "Take ItemType instead of TypeKind in record_extern_fqn", "tree": {"sha": "053100fd1831e9a34b874d7f474b25acbc22dc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/053100fd1831e9a34b874d7f474b25acbc22dc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1481af9f598c84d58fc1f720777a3e482d8a33c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1481af9f598c84d58fc1f720777a3e482d8a33c1", "html_url": "https://github.com/rust-lang/rust/commit/1481af9f598c84d58fc1f720777a3e482d8a33c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1481af9f598c84d58fc1f720777a3e482d8a33c1/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "484c61943f818272719bac81f6d5709fc5456438", "url": "https://api.github.com/repos/rust-lang/rust/commits/484c61943f818272719bac81f6d5709fc5456438", "html_url": "https://github.com/rust-lang/rust/commit/484c61943f818272719bac81f6d5709fc5456438"}], "stats": {"total": 133, "additions": 84, "deletions": 49}, "files": [{"sha": "1da062f5747e29e0c24160cad7105d302bbc6298", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1481af9f598c84d58fc1f720777a3e482d8a33c1", "patch": "@@ -15,7 +15,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind};\n+use crate::clean::{self, Attributes, GetDefId, ToSource};\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n@@ -56,36 +56,36 @@ crate fn try_inline(\n \n     let kind = match res {\n         Res::Def(DefKind::Trait, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Trait);\n+            record_extern_fqn(cx, did, ItemType::Trait);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::TraitItem(build_external_trait(cx, did))\n         }\n         Res::Def(DefKind::Fn, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Function);\n+            record_extern_fqn(cx, did, ItemType::Function);\n             clean::FunctionItem(build_external_function(cx, did))\n         }\n         Res::Def(DefKind::Struct, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Struct);\n+            record_extern_fqn(cx, did, ItemType::Struct);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::StructItem(build_struct(cx, did))\n         }\n         Res::Def(DefKind::Union, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Union);\n+            record_extern_fqn(cx, did, ItemType::Union);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::UnionItem(build_union(cx, did))\n         }\n         Res::Def(DefKind::TyAlias, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Typedef);\n+            record_extern_fqn(cx, did, ItemType::Typedef);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::TypedefItem(build_type_alias(cx, did), false)\n         }\n         Res::Def(DefKind::Enum, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Enum);\n+            record_extern_fqn(cx, did, ItemType::Enum);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::EnumItem(build_enum(cx, did))\n         }\n         Res::Def(DefKind::ForeignTy, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Foreign);\n+            record_extern_fqn(cx, did, ItemType::ForeignType);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::ForeignTypeItem\n         }\n@@ -95,24 +95,24 @@ crate fn try_inline(\n         // their constructors.\n         Res::Def(DefKind::Ctor(..), _) | Res::SelfCtor(..) => return Some(Vec::new()),\n         Res::Def(DefKind::Mod, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Module);\n+            record_extern_fqn(cx, did, ItemType::Module);\n             clean::ModuleItem(build_module(cx, did, visited))\n         }\n         Res::Def(DefKind::Static, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Static);\n+            record_extern_fqn(cx, did, ItemType::Static);\n             clean::StaticItem(build_static(cx, did, cx.tcx.is_mutable_static(did)))\n         }\n         Res::Def(DefKind::Const, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Const);\n+            record_extern_fqn(cx, did, ItemType::Constant);\n             clean::ConstantItem(build_const(cx, did))\n         }\n         Res::Def(DefKind::Macro(kind), did) => {\n             let mac = build_macro(cx, did, name);\n \n             let type_kind = match kind {\n-                MacroKind::Bang => TypeKind::Macro,\n-                MacroKind::Attr => TypeKind::Attr,\n-                MacroKind::Derive => TypeKind::Derive,\n+                MacroKind::Bang => ItemType::Macro,\n+                MacroKind::Attr => ItemType::ProcAttribute,\n+                MacroKind::Derive => ItemType::ProcDerive,\n             };\n             record_extern_fqn(cx, did, type_kind);\n             mac\n@@ -157,15 +157,15 @@ crate fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n ///\n /// These names are used later on by HTML rendering to generate things like\n /// source links back to the original item.\n-crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n+crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType) {\n     let crate_name = cx.tcx.crate_name(did.krate).to_string();\n \n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n         // extern blocks have an empty name\n         let s = elem.data.to_string();\n         if !s.is_empty() { Some(s) } else { None }\n     });\n-    let fqn = if let clean::TypeKind::Macro = kind {\n+    let fqn = if let ItemType::Macro = kind {\n         // Check to see if it is a macro 2.0 or built-in macro\n         if matches!(\n             cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())),"}, {"sha": "54be4ea9f6695f2218162e5c454adbd93a8f0471", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1481af9f598c84d58fc1f720777a3e482d8a33c1", "patch": "@@ -36,6 +36,7 @@ use std::{mem, vec};\n \n use crate::core::{self, DocContext, ImplTraitParam};\n use crate::doctree;\n+use crate::formats::item_type::ItemType;\n \n use utils::*;\n \n@@ -158,7 +159,7 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let (trait_ref, bounds) = *self;\n-        inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n+        inline::record_extern_fqn(cx, trait_ref.def_id, ItemType::Trait);\n         let path = external_path(\n             cx,\n             cx.tcx.item_name(trait_ref.def_id),\n@@ -913,8 +914,8 @@ impl Clean<PolyTrait> for hir::PolyTraitRef<'_> {\n     }\n }\n \n-impl Clean<TypeKind> for hir::def::DefKind {\n-    fn clean(&self, _: &mut DocContext<'_>) -> TypeKind {\n+impl Clean<ItemType> for hir::def::DefKind {\n+    fn clean(&self, _: &mut DocContext<'_>) -> ItemType {\n         (*self).into()\n     }\n }\n@@ -1453,16 +1454,16 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Adt(def, substs) => {\n                 let did = def.did;\n                 let kind = match def.adt_kind() {\n-                    AdtKind::Struct => TypeKind::Struct,\n-                    AdtKind::Union => TypeKind::Union,\n-                    AdtKind::Enum => TypeKind::Enum,\n+                    AdtKind::Struct => ItemType::Struct,\n+                    AdtKind::Union => ItemType::Union,\n+                    AdtKind::Enum => ItemType::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, cx.tcx.item_name(did), None, false, vec![], substs);\n                 ResolvedPath { path, param_names: None, did, is_generic: false }\n             }\n             ty::Foreign(did) => {\n-                inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n+                inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n                 let path = external_path(\n                     cx,\n                     cx.tcx.item_name(did),\n@@ -1487,7 +1488,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     _ => cx.tcx.intern_substs(&[]),\n                 };\n \n-                inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+                inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n                 let mut param_names = vec![];\n                 if let Some(b) = reg.clean(cx) {\n@@ -1497,7 +1498,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     let empty = cx.tcx.intern_substs(&[]);\n                     let path =\n                         external_path(cx, cx.tcx.item_name(did), Some(did), false, vec![], empty);\n-                    inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+                    inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     let bound = GenericBound::TraitBound(\n                         PolyTrait {\n                             trait_: ResolvedPath {"}, {"sha": "8569c87d314814146b141c25244c52378629e0eb", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1481af9f598c84d58fc1f720777a3e482d8a33c1", "patch": "@@ -1103,7 +1103,7 @@ impl GenericBound {\n         let did = cx.tcx.require_lang_item(LangItem::Sized, None);\n         let empty = cx.tcx.intern_substs(&[]);\n         let path = external_path(cx, cx.tcx.item_name(did), Some(did), false, vec![], empty);\n-        inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+        inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n             PolyTrait {\n                 trait_: ResolvedPath { path, param_names: None, did, is_generic: false },\n@@ -1455,8 +1455,6 @@ crate enum TypeKind {\n     Typedef,\n     Foreign,\n     Macro,\n-    Attr,\n-    Derive,\n     TraitAlias,\n     Primitive,\n }"}, {"sha": "7df8b442e5accdb7d79288c68e89705f414919ae", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=1481af9f598c84d58fc1f720777a3e482d8a33c1", "patch": "@@ -3,9 +3,9 @@ use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n     MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n-    TypeKind,\n };\n use crate::core::DocContext;\n+use crate::formats::item_type::ItemType;\n \n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -435,37 +435,37 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n     debug!(\"register_res({:?})\", res);\n \n     let (did, kind) = match res {\n-        Res::Def(DefKind::Fn, i) => (i, TypeKind::Function),\n-        Res::Def(DefKind::TyAlias, i) => (i, TypeKind::Typedef),\n-        Res::Def(DefKind::Enum, i) => (i, TypeKind::Enum),\n-        Res::Def(DefKind::Trait, i) => (i, TypeKind::Trait),\n+        Res::Def(DefKind::Fn, i) => (i, ItemType::Function),\n+        Res::Def(DefKind::TyAlias, i) => (i, ItemType::Typedef),\n+        Res::Def(DefKind::Enum, i) => (i, ItemType::Enum),\n+        Res::Def(DefKind::Trait, i) => (i, ItemType::Trait),\n         Res::Def(DefKind::AssocTy | DefKind::AssocFn | DefKind::AssocConst, i) => {\n-            (cx.tcx.parent(i).unwrap(), TypeKind::Trait)\n+            (cx.tcx.parent(i).unwrap(), ItemType::Trait)\n         }\n-        Res::Def(DefKind::Struct, i) => (i, TypeKind::Struct),\n-        Res::Def(DefKind::Union, i) => (i, TypeKind::Union),\n-        Res::Def(DefKind::Mod, i) => (i, TypeKind::Module),\n-        Res::Def(DefKind::ForeignTy, i) => (i, TypeKind::Foreign),\n-        Res::Def(DefKind::Const, i) => (i, TypeKind::Const),\n-        Res::Def(DefKind::Static, i) => (i, TypeKind::Static),\n+        Res::Def(DefKind::Struct, i) => (i, ItemType::Struct),\n+        Res::Def(DefKind::Union, i) => (i, ItemType::Union),\n+        Res::Def(DefKind::Mod, i) => (i, ItemType::Module),\n+        Res::Def(DefKind::ForeignTy, i) => (i, ItemType::ForeignType),\n+        Res::Def(DefKind::Const, i) => (i, ItemType::Constant),\n+        Res::Def(DefKind::Static, i) => (i, ItemType::Static),\n         Res::Def(DefKind::Variant, i) => {\n-            (cx.tcx.parent(i).expect(\"cannot get parent def id\"), TypeKind::Enum)\n+            (cx.tcx.parent(i).expect(\"cannot get parent def id\"), ItemType::Enum)\n         }\n         Res::Def(DefKind::Macro(mac_kind), i) => match mac_kind {\n-            MacroKind::Bang => (i, TypeKind::Macro),\n-            MacroKind::Attr => (i, TypeKind::Attr),\n-            MacroKind::Derive => (i, TypeKind::Derive),\n+            MacroKind::Bang => (i, ItemType::Macro),\n+            MacroKind::Attr => (i, ItemType::ProcAttribute),\n+            MacroKind::Derive => (i, ItemType::ProcDerive),\n         },\n-        Res::Def(DefKind::TraitAlias, i) => (i, TypeKind::TraitAlias),\n-        Res::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n+        Res::Def(DefKind::TraitAlias, i) => (i, ItemType::TraitAlias),\n+        Res::SelfTy(Some(def_id), _) => (def_id, ItemType::Trait),\n         Res::SelfTy(_, Some((impl_def_id, _))) => return impl_def_id,\n         _ => return res.def_id(),\n     };\n     if did.is_local() {\n         return did;\n     }\n     inline::record_extern_fqn(cx, did, kind);\n-    if let TypeKind::Trait = kind {\n+    if let ItemType::Trait = kind {\n         inline::record_extern_trait(cx, did);\n     }\n     did"}, {"sha": "588281292c159eb8a104d3806d987d006e8b843e", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1481af9f598c84d58fc1f720777a3e482d8a33c1/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=1481af9f598c84d58fc1f720777a3e482d8a33c1", "patch": "@@ -4,6 +4,7 @@ use std::fmt;\n \n use serde::{Serialize, Serializer};\n \n+use rustc_hir as hir;\n use rustc_span::hygiene::MacroKind;\n \n use crate::clean;\n@@ -116,14 +117,49 @@ impl From<clean::TypeKind> for ItemType {\n             clean::TypeKind::Typedef => ItemType::Typedef,\n             clean::TypeKind::Foreign => ItemType::ForeignType,\n             clean::TypeKind::Macro => ItemType::Macro,\n-            clean::TypeKind::Attr => ItemType::ProcAttribute,\n-            clean::TypeKind::Derive => ItemType::ProcDerive,\n             clean::TypeKind::TraitAlias => ItemType::TraitAlias,\n             clean::TypeKind::Primitive => ItemType::Primitive,\n         }\n     }\n }\n \n+impl From<hir::def::DefKind> for ItemType {\n+    fn from(other: hir::def::DefKind) -> Self {\n+        match other {\n+            hir::def::DefKind::Enum => Self::Enum,\n+            hir::def::DefKind::Fn => Self::Function,\n+            hir::def::DefKind::Mod => Self::Module,\n+            hir::def::DefKind::Const => Self::Constant,\n+            hir::def::DefKind::Static => Self::Static,\n+            hir::def::DefKind::Struct => Self::Struct,\n+            hir::def::DefKind::Union => Self::Union,\n+            hir::def::DefKind::Trait => Self::Trait,\n+            hir::def::DefKind::TyAlias => Self::Typedef,\n+            hir::def::DefKind::TraitAlias => Self::TraitAlias,\n+            hir::def::DefKind::Macro(_) => Self::Macro,\n+            hir::def::DefKind::ForeignTy\n+            | hir::def::DefKind::Variant\n+            | hir::def::DefKind::AssocTy\n+            | hir::def::DefKind::TyParam\n+            | hir::def::DefKind::ConstParam\n+            | hir::def::DefKind::Ctor(..)\n+            | hir::def::DefKind::AssocFn\n+            | hir::def::DefKind::AssocConst\n+            | hir::def::DefKind::ExternCrate\n+            | hir::def::DefKind::Use\n+            | hir::def::DefKind::ForeignMod\n+            | hir::def::DefKind::AnonConst\n+            | hir::def::DefKind::OpaqueTy\n+            | hir::def::DefKind::Field\n+            | hir::def::DefKind::LifetimeParam\n+            | hir::def::DefKind::GlobalAsm\n+            | hir::def::DefKind::Impl\n+            | hir::def::DefKind::Closure\n+            | hir::def::DefKind::Generator => Self::ForeignType,\n+        }\n+    }\n+}\n+\n impl ItemType {\n     crate fn as_str(&self) -> &'static str {\n         match *self {"}]}