{"sha": "e283c4ddffad0ac4e2ebace590849ff46336ca0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyODNjNGRkZmZhZDBhYzRlMmViYWNlNTkwODQ5ZmY0NjMzNmNhMGU=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-11T23:43:02Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:57Z"}, "message": "Add tests for task killing and blocking.", "tree": {"sha": "f2733fcb9237af9d7b840204641b6d5753527278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2733fcb9237af9d7b840204641b6d5753527278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e283c4ddffad0ac4e2ebace590849ff46336ca0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e283c4ddffad0ac4e2ebace590849ff46336ca0e", "html_url": "https://github.com/rust-lang/rust/commit/e283c4ddffad0ac4e2ebace590849ff46336ca0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e283c4ddffad0ac4e2ebace590849ff46336ca0e/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a093b5434a7110967d8597fb602588b299f9859e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a093b5434a7110967d8597fb602588b299f9859e", "html_url": "https://github.com/rust-lang/rust/commit/a093b5434a7110967d8597fb602588b299f9859e"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "94173b14f806b8f7138d32ef3b2be264620f51fa", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/e283c4ddffad0ac4e2ebace590849ff46336ca0e/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e283c4ddffad0ac4e2ebace590849ff46336ca0e/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=e283c4ddffad0ac4e2ebace590849ff46336ca0e", "patch": "@@ -464,6 +464,7 @@ impl Drop for Death {\n #[cfg(test)]\n mod test {\n     #[allow(unused_mut)];\n+    use cell::Cell;\n     use rt::test::*;\n     use super::*;\n     use util;\n@@ -599,4 +600,143 @@ mod test {\n             assert!(parent_inner.any_child_failed == false);\n         }\n     }\n+\n+    // Task killing tests\n+\n+    #[test]\n+    fn kill_basic() {\n+        do run_in_newsched_task {\n+            let mut handle = KillHandle::new();\n+            assert!(!handle.killed());\n+            assert!(handle.kill().is_none());\n+            assert!(handle.killed());\n+        }\n+    }\n+\n+    #[test]\n+    fn double_kill() {\n+        do run_in_newsched_task {\n+            let mut handle = KillHandle::new();\n+            assert!(!handle.killed());\n+            assert!(handle.kill().is_none());\n+            assert!(handle.killed());\n+            assert!(handle.kill().is_none());\n+            assert!(handle.killed());\n+        }\n+    }\n+\n+    #[test]\n+    fn unkillable_after_kill() {\n+        do run_in_newsched_task {\n+            let mut handle = KillHandle::new();\n+            assert!(handle.kill().is_none());\n+            assert!(handle.killed());\n+            let handle_cell = Cell::new(handle);\n+            let result = do spawntask_try {\n+                handle_cell.take().inhibit_kill(false);\n+            };\n+            assert!(result.is_err());\n+        }\n+    }\n+\n+    #[test]\n+    fn unkillable_during_kill() {\n+        do run_in_newsched_task {\n+            let mut handle = KillHandle::new();\n+            handle.inhibit_kill(false);\n+            assert!(handle.kill().is_none());\n+            assert!(!handle.killed());\n+            let handle_cell = Cell::new(handle);\n+            let result = do spawntask_try {\n+                handle_cell.take().allow_kill(false);\n+            };\n+            assert!(result.is_err());\n+        }\n+    }\n+\n+    #[test]\n+    fn unkillable_before_kill() {\n+        do run_in_newsched_task {\n+            let mut handle = KillHandle::new();\n+            handle.inhibit_kill(false);\n+            handle.allow_kill(false);\n+            assert!(handle.kill().is_none());\n+            assert!(handle.killed());\n+        }\n+    }\n+\n+    // Task blocking tests\n+\n+    #[test]\n+    fn block_and_wake() {\n+        do with_test_task |mut task| {\n+            BlockedTask::try_block(task).unwrap_right().wake().unwrap()\n+        }\n+    }\n+\n+    #[test]\n+    fn block_and_get_killed() {\n+        do with_test_task |mut task| {\n+            let mut handle = task.death.kill_handle.get_ref().clone();\n+            let result = BlockedTask::try_block(task).unwrap_right();\n+            let task = handle.kill().unwrap();\n+            assert!(result.wake().is_none());\n+            task\n+        }\n+    }\n+\n+    #[test]\n+    fn block_already_killed() {\n+        do with_test_task |mut task| {\n+            let mut handle = task.death.kill_handle.get_ref().clone();\n+            assert!(handle.kill().is_none());\n+            BlockedTask::try_block(task).unwrap_left()\n+        }\n+    }\n+\n+    #[test]\n+    fn block_unkillably_and_get_killed() {\n+        do with_test_task |mut task| {\n+            let mut handle = task.death.kill_handle.get_ref().clone();\n+            task.death.inhibit_kill(false);\n+            let result = BlockedTask::try_block(task).unwrap_right();\n+            assert!(handle.kill().is_none());\n+            let mut task = result.wake().unwrap();\n+            // This call wants to fail, but we can't have that happen since\n+            // we're not running in a newsched task, so we can't even use\n+            // spawntask_try. But the failing behaviour is already tested\n+            // above, in unkillable_during_kill(), so we punt on it here.\n+            task.death.allow_kill(true);\n+            task\n+        }\n+    }\n+\n+    #[test]\n+    fn block_on_pipe() {\n+        // Tests the \"killable\" path of casting to/from uint.\n+        do run_in_newsched_task {\n+            do with_test_task |mut task| {\n+                let result = BlockedTask::try_block(task).unwrap_right();\n+                let result = unsafe { result.cast_to_uint() };\n+                let result = unsafe { BlockedTask::cast_from_uint(result) };\n+                result.wake().unwrap()\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn block_unkillably_on_pipe() {\n+        // Tests the \"indestructible\" path of casting to/from uint.\n+        do run_in_newsched_task {\n+            do with_test_task |mut task| {\n+                task.death.inhibit_kill(false);\n+                let result = BlockedTask::try_block(task).unwrap_right();\n+                let result = unsafe { result.cast_to_uint() };\n+                let result = unsafe { BlockedTask::cast_from_uint(result) };\n+                let mut task = result.wake().unwrap();\n+                task.death.allow_kill(false);\n+                task\n+            }\n+        }\n+    }\n }"}]}