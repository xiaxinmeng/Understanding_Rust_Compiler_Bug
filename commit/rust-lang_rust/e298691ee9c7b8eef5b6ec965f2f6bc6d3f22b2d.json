{"sha": "e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOTg2OTFlZTljN2I4ZWVmNWI2ZWM5NjVmMmY2YmM2ZDNmMjJiMmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-26T08:05:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-26T08:05:48Z"}, "message": "Rollup merge of #59374 - faern:simplify-checked-duration-since, r=shepmaster\n\nSimplify checked_duration_since\n\nThis follows the same design as we updated to in #56490. Internally, all the system specific time implementations are checked, no panics. Then the panicking publicly exported API can just call the checked version of itself and make do with a single panic (`expect`) at the top.\n\nSince the internal sys implementations are now checked, this gets rid of the extra `if self >= &earlier` check in `checked_duration_since`. Except likely making the generated machine code simpler, it also reduces the algorithm from \"Check panic condition -> call possibly panicking method\" to just \"call non panicking method\".\n\nAdded two test cases:\n* Edge case: Make sure `checked_duration_since` on two equal `Instant`s produce a zero duration, not a `None`.\n* Most common/intended usage: Make sure `later.checked_duration_since(earlier)`, returns an expected value.", "tree": {"sha": "fce2466c1555c97c42037b02c35460b6c8ca3552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce2466c1555c97c42037b02c35460b6c8ca3552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcmd1dCRBK7hj4Ov3rIwAAdHIIADkYbS0kDODqKCUwqabbQaXf\n81uDwQ0AWtmAlah68PnkJRvZ6Xw/xmLmtC/zL0vRqcLBWyfcrv8Ye7PCSLnGicPp\ns0bmMTs9S3mqndGPQUZte9zKvDD1LCBwHGRwwGioUjvY42i7NWuTCtShtBWYc3Cg\nvdaruwZsEuxn3Jfbw5N2XX3W91yL55mG8TegYAFBEwvCnT/LWcvuKyBD5EBCBcP3\nOt/MsFpkDHvw/n1cuTD1Q6dNNWQ71BlT/jYaHzZSK93EMHDgxLdonQ3RUWETpmK1\nHuArTupxcWvvHk/t8mwmcEOFSWeszErYXD+8aR2vUNGZQz+9cLJtYkNXIu4E77s=\n=I6Dh\n-----END PGP SIGNATURE-----\n", "payload": "tree fce2466c1555c97c42037b02c35460b6c8ca3552\nparent 0616b73c2fbe019e3c9273ab10cdf2ef16a78df1\nparent 1ccad16231f58b09f127e679d54162acbc2f0dae\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553587548 +0100\ncommitter GitHub <noreply@github.com> 1553587548 +0100\n\nRollup merge of #59374 - faern:simplify-checked-duration-since, r=shepmaster\n\nSimplify checked_duration_since\n\nThis follows the same design as we updated to in #56490. Internally, all the system specific time implementations are checked, no panics. Then the panicking publicly exported API can just call the checked version of itself and make do with a single panic (`expect`) at the top.\n\nSince the internal sys implementations are now checked, this gets rid of the extra `if self >= &earlier` check in `checked_duration_since`. Except likely making the generated machine code simpler, it also reduces the algorithm from \"Check panic condition -> call possibly panicking method\" to just \"call non panicking method\".\n\nAdded two test cases:\n* Edge case: Make sure `checked_duration_since` on two equal `Instant`s produce a zero duration, not a `None`.\n* Most common/intended usage: Make sure `later.checked_duration_since(earlier)`, returns an expected value.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "html_url": "https://github.com/rust-lang/rust/commit/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0616b73c2fbe019e3c9273ab10cdf2ef16a78df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1", "html_url": "https://github.com/rust-lang/rust/commit/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1"}, {"sha": "1ccad16231f58b09f127e679d54162acbc2f0dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ccad16231f58b09f127e679d54162acbc2f0dae", "html_url": "https://github.com/rust-lang/rust/commit/1ccad16231f58b09f127e679d54162acbc2f0dae"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "49a234e1158044b4de1f4f76ea4e67ab30f86ca4", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "patch": "@@ -33,11 +33,9 @@ impl Instant {\n         Instant { t: 0 }\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n-        let diff = self.t\n-            .checked_sub(other.t)\n-            .expect(\"second instant is later than self\");\n-        Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32)\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        let diff = self.t.checked_sub(other.t)?;\n+        Some(Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32))\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "881ad5c0aeb14b849b1347e62b1005440567becb", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "patch": "@@ -137,10 +137,8 @@ impl Instant {\n         false\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n-        self.t.sub_timespec(&other.t).unwrap_or_else(|_| {\n-            panic!(\"specified instant was later than self\")\n-        })\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        self.t.sub_timespec(&other.t).ok()\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "4659f7ba71fe07a50ba895aa8bffc9236c258f56", "filename": "src/libstd/sys/sgx/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs?ref=e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "patch": "@@ -14,8 +14,8 @@ impl Instant {\n         Instant(usercalls::insecure_time())\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n-        self.0 - other.0\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        self.0.checked_sub(other.0)\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "6b5a89aee7d690e3229f79b165cd4e6c5f3344b6", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "patch": "@@ -149,12 +149,11 @@ mod inner {\n             true\n         }\n \n-        pub fn sub_instant(&self, other: &Instant) -> Duration {\n+        pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+            let diff = self.t.checked_sub(other.t)?;\n             let info = info();\n-            let diff = self.t.checked_sub(other.t)\n-                           .expect(\"second instant is later than self\");\n             let nanos = mul_div_u64(diff, info.numer as u64, info.denom as u64);\n-            Duration::new(nanos / NSEC_PER_SEC, (nanos % NSEC_PER_SEC) as u32)\n+            Some(Duration::new(nanos / NSEC_PER_SEC, (nanos % NSEC_PER_SEC) as u32))\n         }\n \n         pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n@@ -285,10 +284,8 @@ mod inner {\n             false // last clause, used so `||` is always trailing above\n         }\n \n-        pub fn sub_instant(&self, other: &Instant) -> Duration {\n-            self.t.sub_timespec(&other.t).unwrap_or_else(|_| {\n-                panic!(\"specified instant was later than self\")\n-            })\n+        pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+            self.t.sub_timespec(&other.t).ok()\n         }\n \n         pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "3f71461eea4872f2a422b2dc86085b30eb135bb9", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "patch": "@@ -22,8 +22,8 @@ impl Instant {\n         false\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n-        self.0 - other.0\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        self.0.checked_sub(other.0)\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "aa53f1194fdb43b8f8ff20a38aefe708252971d4", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "patch": "@@ -49,17 +49,17 @@ impl Instant {\n         Instant { t: Duration::from_secs(0) }\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n         // On windows there's a threshold below which we consider two timestamps\n         // equivalent due to measurement error. For more details + doc link,\n         // check the docs on epsilon.\n         let epsilon =\n             perf_counter::PerformanceCounterInstant::epsilon();\n         if other.t > self.t && other.t - self.t <= epsilon {\n-            return Duration::new(0, 0)\n+            Some(Duration::new(0, 0))\n+        } else {\n+            self.t.checked_sub(other.t)\n         }\n-        self.t.checked_sub(other.t)\n-              .expect(\"specified instant was later than self\")\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "ab1a43d6672e405296298262b05aa6fc6e169d1e", "filename": "src/libstd/time.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=e298691ee9c7b8eef5b6ec965f2f6bc6d3f22b2d", "patch": "@@ -212,7 +212,7 @@ impl Instant {\n     /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration_since(&self, earlier: Instant) -> Duration {\n-        self.0.sub_instant(&earlier.0)\n+        self.0.checked_sub_instant(&earlier.0).expect(\"supplied instant is later than self\")\n     }\n \n     /// Returns the amount of time elapsed from another instant to this one,\n@@ -233,11 +233,7 @@ impl Instant {\n     /// ```\n     #[unstable(feature = \"checked_duration_since\", issue = \"58402\")]\n     pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration> {\n-        if self >= &earlier {\n-            Some(self.0.sub_instant(&earlier.0))\n-        } else {\n-            None\n-        }\n+        self.0.checked_sub_instant(&earlier.0)\n     }\n \n     /// Returns the amount of time elapsed from another instant to this one,\n@@ -664,20 +660,23 @@ mod tests {\n \n     #[test]\n     #[should_panic]\n-    fn instant_duration_panic() {\n+    fn instant_duration_since_panic() {\n         let a = Instant::now();\n         (a - Duration::new(1, 0)).duration_since(a);\n     }\n \n     #[test]\n-    fn checked_instant_duration_nopanic() {\n-        let a = Instant::now();\n-        let ret = (a - Duration::new(1, 0)).checked_duration_since(a);\n-        assert_eq!(ret, None);\n+    fn instant_checked_duration_since_nopanic() {\n+        let now = Instant::now();\n+        let earlier = now - Duration::new(1, 0);\n+        let later = now + Duration::new(1, 0);\n+        assert_eq!(earlier.checked_duration_since(now), None);\n+        assert_eq!(later.checked_duration_since(now), Some(Duration::new(1, 0)));\n+        assert_eq!(now.checked_duration_since(now), Some(Duration::new(0, 0)));\n     }\n \n     #[test]\n-    fn saturating_instant_duration_nopanic() {\n+    fn instant_saturating_duration_since_nopanic() {\n         let a = Instant::now();\n         let ret = (a - Duration::new(1, 0)).saturating_duration_since(a);\n         assert_eq!(ret, Duration::new(0,0));"}]}