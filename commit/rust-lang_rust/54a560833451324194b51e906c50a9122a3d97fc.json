{"sha": "54a560833451324194b51e906c50a9122a3d97fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YTU2MDgzMzQ1MTMyNDE5NGI1MWU5MDZjNTBhOTEyMmEzZDk3ZmM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2020-10-09T21:25:28Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2020-10-09T21:56:45Z"}, "message": "Revert \"Assume slice len is bounded by allocation size\"\n\nhttps://github.com/rust-lang/rust/pull/77023#issuecomment-703987379\nsuggests that the original PR introduced a significant perf regression.\n\nThis reverts commit e44784b8750016a695361c990024750e037d8f9f / #77023.", "tree": {"sha": "0e07283da9b76047ee06f60c5bed1eed1753bafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e07283da9b76047ee06f60c5bed1eed1753bafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54a560833451324194b51e906c50a9122a3d97fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54a560833451324194b51e906c50a9122a3d97fc", "html_url": "https://github.com/rust-lang/rust/commit/54a560833451324194b51e906c50a9122a3d97fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54a560833451324194b51e906c50a9122a3d97fc/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ddef544fa26c5535376fa424baf30cb985f7cb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddef544fa26c5535376fa424baf30cb985f7cb1", "html_url": "https://github.com/rust-lang/rust/commit/5ddef544fa26c5535376fa424baf30cb985f7cb1"}], "stats": {"total": 48, "additions": 2, "deletions": 46}, "files": [{"sha": "c9a80b5bc7722c12472386cfc3e30976e2de7b45", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54a560833451324194b51e906c50a9122a3d97fc/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a560833451324194b51e906c50a9122a3d97fc/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=54a560833451324194b51e906c50a9122a3d97fc", "patch": "@@ -82,7 +82,6 @@\n #![feature(const_pin)]\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n-#![feature(const_assume)]\n #![cfg_attr(not(bootstrap), feature(const_impl_trait))]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]"}, {"sha": "d0d88c01f5b2ccb30c201ff04c6bbbb1b6ff6166", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/54a560833451324194b51e906c50a9122a3d97fc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a560833451324194b51e906c50a9122a3d97fc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=54a560833451324194b51e906c50a9122a3d97fc", "patch": "@@ -79,16 +79,6 @@ pub use index::check_range;\n #[lang = \"slice\"]\n #[cfg(not(test))]\n impl<T> [T] {\n-    /// The maximum, inclusive, length such that the slice is no larger than `isize::MAX` bytes.\n-    /// This constant is used in `len` below.\n-    const MAX_LEN_BOUND: usize = {\n-        if mem::size_of::<T>() == 0 {\n-            usize::MAX\n-        } else {\n-            isize::MAX as usize / mem::size_of::<T>()\n-        }\n-    };\n-\n     /// Returns the number of elements in the slice.\n     ///\n     /// # Examples\n@@ -101,20 +91,11 @@ impl<T> [T] {\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n-    #[allow_internal_unstable(const_fn_union, const_assume)]\n+    #[allow_internal_unstable(const_fn_union)]\n     pub const fn len(&self) -> usize {\n         // SAFETY: this is safe because `&[T]` and `FatPtr<T>` have the same layout.\n         // Only `std` can make this guarantee.\n-        let raw_len = unsafe { crate::ptr::Repr { rust: self }.raw.len };\n-\n-        // SAFETY: this assume asserts that `raw_len * size_of::<T>() <= isize::MAX`. All\n-        // references must point to one allocation with size at most isize::MAX. Note that we the\n-        // multiplication could appear to overflow until we have assumed the bound. This overflow\n-        // would make additional values appear 'valid' and then `n > 1` the range of permissible\n-        // length would no longer be the full or even a single range.\n-        unsafe { crate::intrinsics::assume(raw_len <= Self::MAX_LEN_BOUND) };\n-\n-        raw_len\n+        unsafe { crate::ptr::Repr { rust: self }.raw.len }\n     }\n \n     /// Returns `true` if the slice has a length of 0."}, {"sha": "bb74fc3b2752cf85257a6abbbf0d9443b114d38f", "filename": "src/test/codegen/len-is-bounded.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5ddef544fa26c5535376fa424baf30cb985f7cb1/src%2Ftest%2Fcodegen%2Flen-is-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddef544fa26c5535376fa424baf30cb985f7cb1/src%2Ftest%2Fcodegen%2Flen-is-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flen-is-bounded.rs?ref=5ddef544fa26c5535376fa424baf30cb985f7cb1", "patch": "@@ -1,24 +0,0 @@\n-// min-llvm-version: 11.0\n-// compile-flags: -O -C panic=abort\n-#![crate_type = \"lib\"]\n-\n-#[no_mangle]\n-pub fn len_range(a: &[u8], b: &[u8]) -> usize {\n-    // CHECK-NOT: panic\n-    a.len().checked_add(b.len()).unwrap()\n-}\n-\n-#[no_mangle]\n-pub fn len_range_on_non_byte(a: &[u16], b: &[u16]) -> usize {\n-    // CHECK-NOT: panic\n-    a.len().checked_add(b.len()).unwrap()\n-}\n-\n-pub struct Zst;\n-\n-#[no_mangle]\n-pub fn zst_range(a: &[Zst], b: &[Zst]) -> usize {\n-    // Zsts may be arbitrarily large.\n-    // CHECK: panic\n-    a.len().checked_add(b.len()).unwrap()\n-}"}]}