{"sha": "676953fde9120cda62e4ef2f75a804af7481d6af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3Njk1M2ZkZTkxMjBjZGE2MmU0ZWYyZjc1YTgwNGFmNzQ4MWQ2YWY=", "commit": {"author": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2019-08-10T08:52:04Z"}, "committer": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2019-08-10T08:52:04Z"}, "message": "Revert \"Simplify MIR generation for logical ops\"\n\nThis reverts commit e38e954a0d249f88d0a55504f70d6055e865a931.\n\nllvm were not able to optimize the code that well with the simplified mir.\n\nCloses: #62993", "tree": {"sha": "8c98600d6e5946a47cf773447eca87fb79092994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c98600d6e5946a47cf773447eca87fb79092994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/676953fde9120cda62e4ef2f75a804af7481d6af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/676953fde9120cda62e4ef2f75a804af7481d6af", "html_url": "https://github.com/rust-lang/rust/commit/676953fde9120cda62e4ef2f75a804af7481d6af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/676953fde9120cda62e4ef2f75a804af7481d6af/comments", "author": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8bbb06976c8065425b18e9cbe24a6d1d4e7515", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8bbb06976c8065425b18e9cbe24a6d1d4e7515", "html_url": "https://github.com/rust-lang/rust/commit/be8bbb06976c8065425b18e9cbe24a6d1d4e7515"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "02ab53fe8c1b1f50a3665603ab7e595315e979ff", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/676953fde9120cda62e4ef2f75a804af7481d6af/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676953fde9120cda62e4ef2f75a804af7481d6af/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=676953fde9120cda62e4ef2f75a804af7481d6af", "patch": "@@ -79,59 +79,66 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::LogicalOp { op, lhs, rhs } => {\n                 // And:\n                 //\n-                // [block: If(lhs)] -true-> [else_block: dest = (rhs)]\n-                //        | (false)\n-                //  [shortcurcuit_block: dest = false]\n+                // [block: If(lhs)] -true-> [else_block: If(rhs)] -true-> [true_block]\n+                //        |                          | (false)\n+                //        +----------false-----------+------------------> [false_block]\n                 //\n                 // Or:\n                 //\n-                // [block: If(lhs)] -false-> [else_block: dest = (rhs)]\n-                //        | (true)\n-                //  [shortcurcuit_block: dest = true]\n+                // [block: If(lhs)] -false-> [else_block: If(rhs)] -true-> [true_block]\n+                //        | (true)                   | (false)\n+                //  [true_block]               [false_block]\n \n-                let (shortcircuit_block, mut else_block, join_block) = (\n+                let (true_block, false_block, mut else_block, join_block) = (\n+                    this.cfg.start_new_block(),\n                     this.cfg.start_new_block(),\n                     this.cfg.start_new_block(),\n                     this.cfg.start_new_block(),\n                 );\n \n                 let lhs = unpack!(block = this.as_local_operand(block, lhs));\n                 let blocks = match op {\n-                    LogicalOp::And => (else_block, shortcircuit_block),\n-                    LogicalOp::Or => (shortcircuit_block, else_block),\n+                    LogicalOp::And => (else_block, false_block),\n+                    LogicalOp::Or => (true_block, else_block),\n                 };\n                 let term = TerminatorKind::if_(this.hir.tcx(), lhs, blocks.0, blocks.1);\n                 this.cfg.terminate(block, source_info, term);\n \n+                let rhs = unpack!(else_block = this.as_local_operand(else_block, rhs));\n+                let term = TerminatorKind::if_(this.hir.tcx(), rhs, true_block, false_block);\n+                this.cfg.terminate(else_block, source_info, term);\n+\n                 this.cfg.push_assign_constant(\n-                    shortcircuit_block,\n+                    true_block,\n                     source_info,\n                     destination,\n                     Constant {\n                         span: expr_span,\n                         ty: this.hir.bool_ty(),\n                         user_ty: None,\n-                        literal: match op {\n-                            LogicalOp::And => this.hir.false_literal(),\n-                            LogicalOp::Or => this.hir.true_literal(),\n-                        },\n+                        literal: this.hir.true_literal(),\n                     },\n                 );\n-                this.cfg.terminate(\n-                    shortcircuit_block,\n+\n+                this.cfg.push_assign_constant(\n+                    false_block,\n                     source_info,\n-                    TerminatorKind::Goto { target: join_block },\n+                    destination,\n+                    Constant {\n+                        span: expr_span,\n+                        ty: this.hir.bool_ty(),\n+                        user_ty: None,\n+                        literal: this.hir.false_literal(),\n+                    },\n                 );\n \n-                let rhs = unpack!(else_block = this.as_local_operand(else_block, rhs));\n-                this.cfg.push_assign(\n-                    else_block,\n+                this.cfg.terminate(\n+                    true_block,\n                     source_info,\n-                    destination,\n-                    Rvalue::Use(rhs),\n+                    TerminatorKind::Goto { target: join_block },\n                 );\n                 this.cfg.terminate(\n-                    else_block,\n+                    false_block,\n                     source_info,\n                     TerminatorKind::Goto { target: join_block },\n                 );"}]}