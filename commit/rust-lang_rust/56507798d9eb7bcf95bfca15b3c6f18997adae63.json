{"sha": "56507798d9eb7bcf95bfca15b3c6f18997adae63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTA3Nzk4ZDllYjdiY2Y5NWJmY2ExNWIzYzZmMTg5OTdhZGFlNjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-03T22:45:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T00:03:59Z"}, "message": "libcore: Remove mutable fields from repr", "tree": {"sha": "1b149a4f6699f2b0fef22e00b61fd76adb3c8363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b149a4f6699f2b0fef22e00b61fd76adb3c8363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56507798d9eb7bcf95bfca15b3c6f18997adae63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56507798d9eb7bcf95bfca15b3c6f18997adae63", "html_url": "https://github.com/rust-lang/rust/commit/56507798d9eb7bcf95bfca15b3c6f18997adae63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56507798d9eb7bcf95bfca15b3c6f18997adae63/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a44482b175a5486039fd5f2fd32f1051ce80e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a44482b175a5486039fd5f2fd32f1051ce80e50", "html_url": "https://github.com/rust-lang/rust/commit/6a44482b175a5486039fd5f2fd32f1051ce80e50"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "b75ac60ff28e29d699c78462252ae4d94b3c97e9", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 58, "deletions": 13, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/56507798d9eb7bcf95bfca15b3c6f18997adae63/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56507798d9eb7bcf95bfca15b3c6f18997adae63/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=56507798d9eb7bcf95bfca15b3c6f18997adae63", "patch": "@@ -144,28 +144,30 @@ enum VariantState {\n }\n \n pub struct ReprVisitor {\n-    mut ptr: *c_void,\n-    mut ptr_stk: ~[*c_void],\n-    mut var_stk: ~[VariantState],\n+    ptr: @mut *c_void,\n+    ptr_stk: @mut ~[*c_void],\n+    var_stk: @mut ~[VariantState],\n     writer: @Writer\n }\n pub fn ReprVisitor(ptr: *c_void, writer: @Writer) -> ReprVisitor {\n-    ReprVisitor { ptr: ptr,\n-                  ptr_stk: ~[],\n-                  var_stk: ~[],\n-                  writer: writer }\n+    ReprVisitor {\n+        ptr: @mut ptr,\n+        ptr_stk: @mut ~[],\n+        var_stk: @mut ~[],\n+        writer: writer,\n+    }\n }\n \n impl MovePtr for ReprVisitor {\n     #[inline(always)]\n     fn move_ptr(&self, adjustment: &fn(*c_void) -> *c_void) {\n-        self.ptr = adjustment(self.ptr);\n+        *self.ptr = adjustment(*self.ptr);\n     }\n     fn push_ptr(&self) {\n-        self.ptr_stk.push(self.ptr);\n+        self.ptr_stk.push(*self.ptr);\n     }\n     fn pop_ptr(&self) {\n-        self.ptr = self.ptr_stk.pop();\n+        *self.ptr = self.ptr_stk.pop();\n     }\n }\n \n@@ -176,14 +178,14 @@ pub impl ReprVisitor {\n     #[inline(always)]\n     fn get<T>(&self, f: &fn(&T)) -> bool {\n         unsafe {\n-            f(transmute::<*c_void,&T>(copy self.ptr));\n+            f(transmute::<*c_void,&T>(*self.ptr));\n         }\n         true\n     }\n \n     #[inline(always)]\n     fn visit_inner(&self, inner: *TyDesc) -> bool {\n-        self.visit_ptr_inner(self.ptr, inner)\n+        self.visit_ptr_inner(*self.ptr, inner)\n     }\n \n     #[inline(always)]\n@@ -482,8 +484,31 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+<<<<<<< HEAD\n     fn visit_enum_variant_field(&self, i: uint, _offset: uint, inner: *TyDesc) -> bool {\n         match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n+=======\n+    #[cfg(stage0)]\n+    fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool {\n+        match self.var_stk[vec::uniq_len(&const *self.var_stk) - 1] {\n+            Degenerate | TagMatch => {\n+                if i != 0 {\n+                    self.writer.write_str(\", \");\n+                }\n+                if ! self.visit_inner(inner) {\n+                    return false;\n+                }\n+            }\n+            TagMismatch => ()\n+        }\n+        true\n+    }\n+\n+    #[cfg(not(stage0))]\n+    fn visit_enum_variant_field(&self, i: uint, _: uint, inner: *TyDesc)\n+                                -> bool {\n+        match self.var_stk[vec::uniq_len(&const *self.var_stk) - 1] {\n+>>>>>>> libcore: Remove mutable fields from repr\n             Matched => {\n                 if i != 0 {\n                     self.writer.write_str(\", \");\n@@ -497,11 +522,31 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+<<<<<<< HEAD\n+=======\n+    #[cfg(stage0)]\n     fn visit_leave_enum_variant(&self, _variant: uint,\n                                 _disr_val: int,\n                                 n_fields: uint,\n                                 _name: &str) -> bool {\n-        match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n+        match self.var_stk[vec::uniq_len(&const *self.var_stk) - 1] {\n+            Degenerate | TagMatch => {\n+                if n_fields > 0 {\n+                    self.writer.write_char(')');\n+                }\n+            }\n+            TagMismatch => ()\n+        }\n+        true\n+    }\n+\n+    #[cfg(not(stage0))]\n+>>>>>>> libcore: Remove mutable fields from repr\n+    fn visit_leave_enum_variant(&self, _variant: uint,\n+                                _disr_val: int,\n+                                n_fields: uint,\n+                                _name: &str) -> bool {\n+        match self.var_stk[vec::uniq_len(&const *self.var_stk) - 1] {\n             Matched => {\n                 if n_fields > 0 {\n                     self.writer.write_char(')');"}]}