{"sha": "d43f60e5d4eb09666312d6e5cd238faa7564e52b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0M2Y2MGU1ZDRlYjA5NjY2MzEyZDZlNWNkMjM4ZmFhNzU2NGU1MmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-02T01:31:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-02T01:32:05Z"}, "message": "rustc: Fold --pretty and --typed-pretty into a single option with an optional argument", "tree": {"sha": "7a6128881a8e36cdac0ea89227de202130f7ef1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a6128881a8e36cdac0ea89227de202130f7ef1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43f60e5d4eb09666312d6e5cd238faa7564e52b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43f60e5d4eb09666312d6e5cd238faa7564e52b", "html_url": "https://github.com/rust-lang/rust/commit/d43f60e5d4eb09666312d6e5cd238faa7564e52b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43f60e5d4eb09666312d6e5cd238faa7564e52b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c3809afd06d81d99fc0c6b4efbf560732f95f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c3809afd06d81d99fc0c6b4efbf560732f95f20", "html_url": "https://github.com/rust-lang/rust/commit/8c3809afd06d81d99fc0c6b4efbf560732f95f20"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "2245da02046d753ee91f2a7432a642f881060590", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d43f60e5d4eb09666312d6e5cd238faa7564e52b/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43f60e5d4eb09666312d6e5cd238faa7564e52b/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=d43f60e5d4eb09666312d6e5cd238faa7564e52b", "patch": "@@ -29,10 +29,16 @@ import std::getopts;\n import std::getopts::optopt;\n import std::getopts::optmulti;\n import std::getopts::optflag;\n+import std::getopts::optflagopt;\n import std::getopts::opt_present;\n \n import back::link::output_type;\n \n+tag pp_mode {\n+    ppm_normal;\n+    ppm_typed;\n+}\n+\n fn default_environment(session::session sess,\n                        str argv0,\n                        str input) -> eval::env {\n@@ -112,19 +118,20 @@ fn compile_input(session::session sess,\n }\n \n fn pretty_print_input(session::session sess, eval::env env, str input,\n-                      bool typed) {\n+                      pp_mode ppm) {\n     auto def = tup(ast::local_crate, 0);\n     auto p = front::parser::new_parser(sess, env, def, input, 0u, 0u);\n     auto crate = front::parser::parse_crate_from_source_file(p);\n \n     auto mode;\n-    if (typed) {\n-        auto def_map = resolve::resolve_crate(sess, crate);\n-        auto ty_cx = ty::mk_ctxt(sess, def_map);\n-        typeck::check_crate(ty_cx, crate);\n-        mode = pprust::mo_typed(ty_cx);\n-    } else {\n-        mode = pprust::mo_untyped;\n+    alt (ppm) {\n+        case (ppm_typed) {\n+            auto def_map = resolve::resolve_crate(sess, crate);\n+            auto ty_cx = ty::mk_ctxt(sess, def_map);\n+            typeck::check_crate(ty_cx, crate);\n+            mode = pprust::mo_typed(ty_cx);\n+        }\n+        case (ppm_normal) { mode = pprust::mo_untyped; }\n     }\n \n     pprust::print_file(sess, crate.node.module, input, std::io::stdout(),\n@@ -150,8 +157,7 @@ options:\n     -o <filename>      write output to <filename>\n     --glue             generate glue.bc file\n     --shared           compile a shared-library crate\n-    --pretty           pretty-print the input instead of compiling\n-    --typed-pretty     pretty-print the input with types instead of compiling\n+    --pretty [type]    pretty-print the input instead of compiling\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n     --noverify         suppress LLVM verification step (slight speedup)\n@@ -304,12 +310,20 @@ fn build_session(@session::options sopts) -> session::session {\n     ret sess;\n }\n \n+fn parse_pretty(session::session sess, &str name) -> pp_mode {\n+    if (str::eq(name, \"normal\")) { ret ppm_normal; }\n+    else if (str::eq(name, \"typed\")) { ret ppm_typed; }\n+    else {\n+        sess.err(\"argument to `pretty` must be either `normal` or `typed`\");\n+    }\n+}\n+\n fn main(vec[str] args) {\n \n     auto opts = [optflag(\"h\"), optflag(\"help\"),\n                  optflag(\"v\"), optflag(\"version\"),\n                  optflag(\"glue\"), optflag(\"emit-llvm\"),\n-                 optflag(\"pretty\"), optflag(\"typed-pretty\"),\n+                 optflagopt(\"pretty\"),\n                  optflag(\"ls\"), optflag(\"parse-only\"),\n                  optflag(\"O\"), optopt(\"OptLevel\"),\n                  optflag(\"shared\"), optmulti(\"L\"),\n@@ -365,13 +379,19 @@ fn main(vec[str] args) {\n     auto ifile = match.free.(0);\n     let str saved_out_filename = \"\";\n     auto env = default_environment(sess, binary, ifile);\n-    auto pretty = opt_present(match, \"pretty\");\n-    auto typed_pretty = opt_present(match, \"typed-pretty\");\n+    auto pretty = option::map[str,pp_mode](bind parse_pretty(sess, _),\n+        getopts::opt_default(match, \"pretty\", \"normal\"));\n     auto ls = opt_present(match, \"ls\");\n-    if (pretty || typed_pretty) {\n-        pretty_print_input(sess, env, ifile, typed_pretty);\n-        ret;\n-    } else if (ls) {\n+\n+    alt (pretty) {\n+        case (some[pp_mode](?ppm)) {\n+            pretty_print_input(sess, env, ifile, ppm);\n+            ret;\n+        }\n+        case (none[pp_mode]) { /* continue */ }\n+    }\n+\n+    if (ls) {\n         front::creader::list_file_metadata(ifile, std::io::stdout());\n         ret;\n     } else {\n@@ -401,6 +421,8 @@ fn main(vec[str] args) {\n \n     // If the user wants an exe generated we need to invoke\n     // gcc to link the object file with some libs\n+    //\n+    // TODO: Factor this out of main.\n     if (sopts.output_type == link::output_type_exe) {\n \n         //FIXME: Should we make the 'stage3's variable here?"}]}