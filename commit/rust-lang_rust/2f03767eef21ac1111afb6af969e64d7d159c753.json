{"sha": "2f03767eef21ac1111afb6af969e64d7d159c753", "node_id": "C_kwDOAAsO6NoAKDJmMDM3NjdlZWYyMWFjMTExMWFmYjZhZjk2OWU2NGQ3ZDE1OWM3NTM", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-11T14:23:33Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-11T14:23:33Z"}, "message": "Remove inlining cost of `Deinit` statements", "tree": {"sha": "f8a9b95c183025b542fcad418c83ae6ca47613df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a9b95c183025b542fcad418c83ae6ca47613df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f03767eef21ac1111afb6af969e64d7d159c753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f03767eef21ac1111afb6af969e64d7d159c753", "html_url": "https://github.com/rust-lang/rust/commit/2f03767eef21ac1111afb6af969e64d7d159c753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f03767eef21ac1111afb6af969e64d7d159c753/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "html_url": "https://github.com/rust-lang/rust/commit/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2"}], "stats": {"total": 373, "additions": 264, "deletions": 109}, "files": [{"sha": "5e6dabeba6da2577498281561819211583d0a53e", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f03767eef21ac1111afb6af969e64d7d159c753/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f03767eef21ac1111afb6af969e64d7d159c753/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=2f03767eef21ac1111afb6af969e64d7d159c753", "patch": "@@ -369,6 +369,7 @@ impl<'tcx> Inliner<'tcx> {\n                 match stmt.kind {\n                     StatementKind::StorageLive(_)\n                     | StatementKind::StorageDead(_)\n+                    | StatementKind::Deinit(_)\n                     | StatementKind::Nop => {}\n                     _ => cost += INSTR_COST,\n                 }"}, {"sha": "4cdbaec7d2a2a0f2c219c24d1e51d493cac836fe", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 85, "deletions": 32, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/2f03767eef21ac1111afb6af969e64d7d159c753/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2f03767eef21ac1111afb6af969e64d7d159c753/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=2f03767eef21ac1111afb6af969e64d7d159c753", "patch": "@@ -15,15 +15,15 @@\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n           scope 2 {\n-              scope 5 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  debug residual => _8;    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let _10: i32;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _11: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  scope 6 {\n-                      debug e => _10;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-                      scope 7 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _12;  // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  scope 9 {\n+                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n@@ -34,25 +34,33 @@\n           scope 4 {\n           }\n       }\n+      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          scope 6 {\n+              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          }\n+          scope 7 {\n+              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          }\n+      }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n-          _3 = <Result<i32, i32> as Try>::branch(move _4) -> bb1; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                                           // mir::Constant\n-                                           // + span: $DIR/separate_const_switch.rs:29:8: 29:10\n-                                           // + literal: Const { ty: fn(Result<i32, i32>) -> ControlFlow<<Result<i32, i32> as Try>::Residual, <Result<i32, i32> as Try>::Output> {<Result<i32, i32> as Try>::branch}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-          _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-      }\n-  \n-      bb2: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n@@ -65,28 +73,73 @@\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n       }\n   \n-      bb3: {\n+      bb2: {\n           StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-          StorageLive(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _10 = move ((_8 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _12 = move _10;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _11 = move _12;                  // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_0);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _11; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n       }\n+  \n+      bb3: {\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+-         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         _5 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         switchInt(const 1_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+      }\n+  \n+      bb4: {\n+          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+      }\n+  \n+      bb5: {\n+          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+-         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         _5 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         switchInt(const 0_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+      }\n   }\n   "}, {"sha": "f4c526c6b1979265b907b2d21d892734603e1711", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "modified", "additions": 83, "deletions": 45, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/2f03767eef21ac1111afb6af969e64d7d159c753/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2f03767eef21ac1111afb6af969e64d7d159c753/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=2f03767eef21ac1111afb6af969e64d7d159c753", "patch": "@@ -6,82 +6,120 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n     let mut _2: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n     let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n     let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n-    let mut _5: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-    let _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-    let mut _7: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-    let _8: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+    let _5: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+    let mut _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+    let _7: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n     scope 1 {\n-        debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        debug residual => _5;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n         scope 2 {\n-            scope 5 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                debug residual => _7;    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let _9: i32;             // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _10: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _11: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                scope 6 {\n-                    debug e => _9;       // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-                    scope 7 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                        debug t => _11;  // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+            scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+                debug residual => _6;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _14: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _15: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _16: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                scope 9 {\n+                    debug e => _14;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                    scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                        debug t => _16;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                     }\n                 }\n             }\n         }\n     }\n     scope 3 {\n-        debug val => _8;                 // in scope 3 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        debug val => _7;                 // in scope 3 at $DIR/separate_const_switch.rs:29:8: 29:10\n         scope 4 {\n         }\n     }\n+    scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+        debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let mut _8: isize;               // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let _9: i32;                     // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let mut _10: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let mut _12: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let mut _13: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        scope 6 {\n+            debug v => _9;               // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        }\n+        scope 7 {\n+            debug e => _11;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        }\n+    }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n         _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n-        _3 = <Result<i32, i32> as Try>::branch(move _4) -> bb1; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                                         // mir::Constant\n-                                         // + span: $DIR/separate_const_switch.rs:29:8: 29:10\n-                                         // + literal: Const { ty: fn(Result<i32, i32>) -> ControlFlow<<Result<i32, i32> as Try>::Residual, <Result<i32, i32> as Try>::Output> {<Result<i32, i32> as Try>::branch}, val: Value(Scalar(<ZST>)) }\n+        StorageLive(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        _8 = discriminant(_4);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb1: {\n+        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _11 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _13 = move _11;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_12);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_12 as Err).0: i32) = move _13; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_12) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _12; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-    }\n-\n-    bb2: {\n-        StorageLive(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _8 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _2 = _8;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n-        ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n-        discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n+        StorageLive(_5);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        _5 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        StorageLive(_6);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        _6 = _5;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        StorageLive(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _14 = move ((_6 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _16 = move _14;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _15 = move _16;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageDead(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_0 as Err).0: i32) = move _15; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_6);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        StorageDead(_5);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n         StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n         return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n     }\n \n+    bb2: {\n+        unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n     bb3: {\n-        StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageLive(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _9 = move ((_7 as Err).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _9 = move ((_4 as Ok).0: i32);   // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _11 = move _9;                   // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _10 = move _11;                  // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_0);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_0 as Err).0: i32) = move _10; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_0) = 1;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _10 = move _9;                   // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_3 as Continue).0: i32) = move _10; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        _7 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        _2 = _7;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+        Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n+        ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n+        discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:29:5: 29:11\n         StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n         StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n         return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2"}, {"sha": "d94967072ba75c1ce4a21e7877c0cf78c88d8986", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 95, "deletions": 32, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/2f03767eef21ac1111afb6af969e64d7d159c753/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2f03767eef21ac1111afb6af969e64d7d159c753/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=2f03767eef21ac1111afb6af969e64d7d159c753", "patch": "@@ -15,15 +15,15 @@\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n           scope 2 {\n-              scope 5 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  debug residual => _8;    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let _10: i32;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _11: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  scope 6 {\n-                      debug e => _10;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-                      scope 7 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _12;  // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  scope 9 {\n+                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n@@ -34,25 +34,41 @@\n           scope 4 {\n           }\n       }\n+      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          scope 6 {\n+              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          }\n+          scope 7 {\n+              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          }\n+      }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n-          _3 = <Result<i32, i32> as Try>::branch(move _4) -> bb1; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                                           // mir::Constant\n-                                           // + span: $DIR/separate_const_switch.rs:29:8: 29:10\n-                                           // + literal: Const { ty: fn(Result<i32, i32>) -> ControlFlow<<Result<i32, i32> as Try>::Residual, <Result<i32, i32> as Try>::Output> {<Result<i32, i32> as Try>::branch}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-          _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-      }\n-  \n-      bb2: {\n+-         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+-         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+-         switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+-     }\n+- \n+-     bb2: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:29:8: 29:10\n@@ -65,28 +81,75 @@\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n       }\n   \n-      bb3: {\n+-     bb3: {\n++     bb2: {\n           StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-          StorageLive(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _10 = move ((_8 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _12 = move _10;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _11 = move _12;                  // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_0);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _11; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_10);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:30:1: 30:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:30:2: 30:2\n       }\n+  \n+-     bb4: {\n++     bb3: {\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n++         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+      }\n+  \n+-     bb5: {\n++     bb4: {\n+          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+      }\n+  \n+-     bb6: {\n++     bb5: {\n+          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n++         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+      }\n   }\n   "}]}