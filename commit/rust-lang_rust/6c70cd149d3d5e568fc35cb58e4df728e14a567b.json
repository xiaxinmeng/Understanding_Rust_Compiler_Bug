{"sha": "6c70cd149d3d5e568fc35cb58e4df728e14a567b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNzBjZDE0OWQzZDVlNTY4ZmMzNWNiNThlNGRmNzI4ZTE0YTU2N2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-11T17:54:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-11T17:54:18Z"}, "message": "Auto merge of #48599 - Mark-Simulacrum:rustbuild-updates-step-1, r=alexcrichton\n\nRemove ONLY_BUILD and ONLY_BUILD_TARGETS\n\nPrimarily removes `ONLY_BUILD` and `ONLY_BUILD_TARGETS`. These aren't actually needed in the new system since we can simply not take the relevant `host` and `target` fields if we don't want to run with them in `Step::make_run`.\n\nThis PR also includes a few other commits which generally clean up the state of rustbuild, but are not related to the `Step` changes.", "tree": {"sha": "1704c2af60ded0da0c60143a6fc55a5a109dd77d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1704c2af60ded0da0c60143a6fc55a5a109dd77d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c70cd149d3d5e568fc35cb58e4df728e14a567b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c70cd149d3d5e568fc35cb58e4df728e14a567b", "html_url": "https://github.com/rust-lang/rust/commit/6c70cd149d3d5e568fc35cb58e4df728e14a567b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c70cd149d3d5e568fc35cb58e4df728e14a567b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f2efb09358c1c43ff0f8be11c00948478777e23", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2efb09358c1c43ff0f8be11c00948478777e23", "html_url": "https://github.com/rust-lang/rust/commit/5f2efb09358c1c43ff0f8be11c00948478777e23"}, {"sha": "29a852970bf6ac9abee1a637727ed03d1888d582", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a852970bf6ac9abee1a637727ed03d1888d582", "html_url": "https://github.com/rust-lang/rust/commit/29a852970bf6ac9abee1a637727ed03d1888d582"}], "stats": {"total": 105, "additions": 46, "deletions": 59}, "files": [{"sha": "40e2ef41144f359c074d4fbffe33ee6290bfb4f9", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=6c70cd149d3d5e568fc35cb58e4df728e14a567b", "patch": "@@ -95,7 +95,7 @@ fn main() {\n     let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n     let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n     let mut dylib_path = bootstrap::util::dylib_path();\n-    dylib_path.insert(0, PathBuf::from(libdir));\n+    dylib_path.insert(0, PathBuf::from(&libdir));\n \n     let mut cmd = Command::new(rustc);\n     cmd.args(&args)\n@@ -107,7 +107,7 @@ fn main() {\n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option.\n-        cmd.arg(\"--sysroot\").arg(sysroot);\n+        cmd.arg(\"--sysroot\").arg(&sysroot);\n \n         // When we build Rust dylibs they're all intended for intermediate\n         // usage, so make sure we pass the -Cprefer-dynamic flag instead of\n@@ -280,6 +280,8 @@ fn main() {\n \n     if verbose > 1 {\n         eprintln!(\"rustc command: {:?}\", cmd);\n+        eprintln!(\"sysroot: {:?}\", sysroot);\n+        eprintln!(\"libdir: {:?}\", libdir);\n     }\n \n     // Actually run the compiler!"}, {"sha": "74b9978a8373c5e05b27149bb77651eb8867bfbf", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6c70cd149d3d5e568fc35cb58e4df728e14a567b", "patch": "@@ -60,12 +60,6 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// Run this rule for all hosts without cross compiling.\n     const ONLY_HOSTS: bool = false;\n \n-    /// Run this rule for all targets, but only with the native host.\n-    const ONLY_BUILD_TARGETS: bool = false;\n-\n-    /// Only run this step with the build triple as host and target.\n-    const ONLY_BUILD: bool = false;\n-\n     /// Primary function to execute this rule. Can call `builder.ensure(...)`\n     /// with other steps to run those.\n     fn run(self, builder: &Builder) -> Self::Output;\n@@ -101,8 +95,6 @@ pub struct RunConfig<'a> {\n struct StepDescription {\n     default: bool,\n     only_hosts: bool,\n-    only_build_targets: bool,\n-    only_build: bool,\n     should_run: fn(ShouldRun) -> ShouldRun,\n     make_run: fn(RunConfig),\n     name: &'static str,\n@@ -138,8 +130,6 @@ impl StepDescription {\n         StepDescription {\n             default: S::DEFAULT,\n             only_hosts: S::ONLY_HOSTS,\n-            only_build_targets: S::ONLY_BUILD_TARGETS,\n-            only_build: S::ONLY_BUILD,\n             should_run: S::should_run,\n             make_run: S::make_run,\n             name: unsafe { ::std::intrinsics::type_name::<S>() },\n@@ -155,18 +145,12 @@ impl StepDescription {\n                 self.name, builder.config.exclude);\n         }\n         let build = builder.build;\n-        let hosts = if self.only_build_targets || self.only_build {\n-            build.build_triple()\n-        } else {\n-            &build.hosts\n-        };\n+        let hosts = &build.hosts;\n \n         // Determine the targets participating in this rule.\n         let targets = if self.only_hosts {\n-            if build.config.run_host_only {\n-                &[]\n-            } else if self.only_build {\n-                build.build_triple()\n+            if !build.config.run_host_only {\n+                return; // don't run anything\n             } else {\n                 &build.hosts\n             }"}, {"sha": "eeafa6891cc875144f866a470bb989184a21bc0d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6c70cd149d3d5e568fc35cb58e4df728e14a567b", "patch": "@@ -347,7 +347,7 @@ impl Config {\n         config.keep_stage = flags.keep_stage;\n \n         // If --target was specified but --host wasn't specified, don't run any host-only tests.\n-        config.run_host_only = flags.host.is_empty() && !flags.target.is_empty();\n+        config.run_host_only = !(flags.host.is_empty() && !flags.target.is_empty());\n \n         let toml = file.map(|file| {\n             let mut f = t!(File::open(&file));"}, {"sha": "c3d8c9f8c010d4019e526f9886489479040176f4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6c70cd149d3d5e568fc35cb58e4df728e14a567b", "patch": "@@ -70,7 +70,6 @@ pub struct Docs {\n impl Step for Docs {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"src/doc\")\n@@ -271,7 +270,6 @@ pub struct Mingw {\n impl Step for Mingw {\n     type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.never()\n@@ -331,7 +329,6 @@ impl Step for Rustc {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"src/librustc\")\n@@ -561,15 +558,14 @@ pub struct Std {\n impl Step for Std {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"src/libstd\")\n     }\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Std {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -638,7 +634,6 @@ pub struct Analysis {\n impl Step for Analysis {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         let builder = run.builder;\n@@ -647,7 +642,7 @@ impl Step for Analysis {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Analysis {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -755,8 +750,6 @@ impl Step for Src {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"src\")\n@@ -851,8 +844,6 @@ impl Step for PlainSourceTarball {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         let builder = run.builder;\n@@ -1007,7 +998,6 @@ pub struct Cargo {\n \n impl Step for Cargo {\n     type Output = PathBuf;\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -1095,7 +1085,6 @@ pub struct Rls {\n \n impl Step for Rls {\n     type Output = Option<PathBuf>;\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -1177,7 +1166,6 @@ pub struct Rustfmt {\n \n impl Step for Rustfmt {\n     type Output = Option<PathBuf>;\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -1263,7 +1251,6 @@ pub struct Extended {\n impl Step for Extended {\n     type Output = ();\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -1274,7 +1261,7 @@ impl Step for Extended {\n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Extended {\n             stage: run.builder.top_stage,\n-            host: run.host,\n+            host: run.builder.build.build,\n             target: run.target,\n         });\n     }\n@@ -1692,9 +1679,7 @@ pub struct HashSign;\n \n impl Step for HashSign {\n     type Output = ();\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"hash-and-sign\")"}, {"sha": "17900fc35e0950be6990bc99ff6442e2a267696f", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=6c70cd149d3d5e568fc35cb58e4df728e14a567b", "patch": "@@ -161,7 +161,6 @@ macro_rules! install {\n         impl Step for $name {\n             type Output = ();\n             const DEFAULT: bool = true;\n-            const ONLY_BUILD_TARGETS: bool = true;\n             const ONLY_HOSTS: bool = $only_hosts;\n             $(const $c: bool = true;)*\n \n@@ -174,7 +173,7 @@ macro_rules! install {\n                 run.builder.ensure($name {\n                     stage: run.builder.top_stage,\n                     target: run.target,\n-                    host: run.host,\n+                    host: run.builder.build.build,\n                 });\n             }\n \n@@ -226,14 +225,39 @@ install!((self, builder, _config),\n         });\n         install_analysis(builder, self.stage, self.target);\n     };\n-    Src, \"src\", Self::should_build(_config) , only_hosts: true, {\n-        builder.ensure(dist::Src);\n-        install_src(builder, self.stage);\n-    }, ONLY_BUILD;\n     Rustc, \"src/librustc\", true, only_hosts: true, {\n         builder.ensure(dist::Rustc {\n             compiler: builder.compiler(self.stage, self.target),\n         });\n         install_rustc(builder, self.stage, self.target);\n     };\n );\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Src {\n+    pub stage: u32,\n+}\n+\n+impl Step for Src {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let config = &run.builder.config;\n+        let cond = config.extended &&\n+            config.tools.as_ref().map_or(true, |t| t.contains(\"src\"));\n+        run.path(\"src\").default_condition(cond)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Src {\n+            stage: run.builder.top_stage,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        builder.ensure(dist::Src);\n+        install_src(builder, self.stage);\n+    }\n+}"}, {"sha": "938237dd82d52cad9e0662aa01d2054dd7a10eea", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6c70cd149d3d5e568fc35cb58e4df728e14a567b", "patch": "@@ -113,7 +113,7 @@\n //! More documentation can be found in each respective module below, and you can\n //! also check out the `src/bootstrap/README.md` file for more information.\n \n-//#![deny(warnings)]\n+#![deny(warnings)]\n #![feature(core_intrinsics)]\n \n #[macro_use]"}, {"sha": "d5c837c1274980ddcb5650a73d4154393c9c846b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c70cd149d3d5e568fc35cb58e4df728e14a567b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=6c70cd149d3d5e568fc35cb58e4df728e14a567b", "patch": "@@ -505,27 +505,23 @@ impl Step for RustdocJS {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct Tidy {\n-    host: Interned<String>,\n-}\n+pub struct Tidy;\n \n impl Step for Tidy {\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n-    /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler.\n+    /// Runs the `tidy` tool.\n     ///\n     /// This tool in `src/tools` checks up on various bits and pieces of style and\n     /// otherwise just implements a few lint-like checks that are specific to the\n     /// compiler itself.\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n-        let host = self.host;\n \n         let _folder = build.fold_output(|| \"tidy\");\n-        println!(\"tidy check ({})\", host);\n+        println!(\"tidy check\");\n         let mut cmd = builder.tool_cmd(Tool::Tidy);\n         cmd.arg(build.src.join(\"src\"));\n         cmd.arg(&build.initial_cargo);\n@@ -543,9 +539,7 @@ impl Step for Tidy {\n     }\n \n     fn make_run(run: RunConfig) {\n-        run.builder.ensure(Tidy {\n-            host: run.builder.build.build,\n-        });\n+        run.builder.ensure(Tidy);\n     }\n }\n \n@@ -1610,7 +1604,6 @@ pub struct Distcheck;\n \n impl Step for Distcheck {\n     type Output = ();\n-    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"distcheck\")\n@@ -1676,7 +1669,6 @@ impl Step for Bootstrap {\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n     /// Test the build system itself\n     fn run(self, builder: &Builder) {"}]}