{"sha": "009d898a9422ac04c1aa60c0e9aff3abc5fa4672", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOWQ4OThhOTQyMmFjMDRjMWFhNjBjMGU5YWZmM2FiYzVmYTQ2NzI=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-25T23:31:46Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-25T23:37:19Z"}, "message": "De-realstd os::args\n\nWith the test runner using ::std::os::args(), and std::std::os now being\na re-export of realstd::os, there's no more need for realstd stuff\nmucking up rt::args.\n\nRemove the one test of os::args(), as it's not very useful and it won't\nwork anymore now that rt::args doesn't use realstd.", "tree": {"sha": "a460ca943e21d6cd34212fd823b0236c9c868a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a460ca943e21d6cd34212fd823b0236c9c868a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009d898a9422ac04c1aa60c0e9aff3abc5fa4672", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009d898a9422ac04c1aa60c0e9aff3abc5fa4672", "html_url": "https://github.com/rust-lang/rust/commit/009d898a9422ac04c1aa60c0e9aff3abc5fa4672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009d898a9422ac04c1aa60c0e9aff3abc5fa4672/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69070ac85fcf930b02e2c75bc161a75c5742e138", "url": "https://api.github.com/repos/rust-lang/rust/commits/69070ac85fcf930b02e2c75bc161a75c5742e138", "html_url": "https://github.com/rust-lang/rust/commit/69070ac85fcf930b02e2c75bc161a75c5742e138"}], "stats": {"total": 56, "additions": 8, "deletions": 48}, "files": [{"sha": "dbddee8fce28658291fd7a6cdd481ceecda286da", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/009d898a9422ac04c1aa60c0e9aff3abc5fa4672/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009d898a9422ac04c1aa60c0e9aff3abc5fa4672/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=009d898a9422ac04c1aa60c0e9aff3abc5fa4672", "patch": "@@ -918,17 +918,10 @@ extern \"system\" {\n ///\n /// The arguments are interpreted as utf-8, with invalid bytes replaced with \\uFFFD.\n /// See `str::from_utf8_lossy` for details.\n-#[cfg(not(test))]\n pub fn args() -> Vec<String> {\n     real_args()\n }\n \n-#[cfg(test)]\n-#[allow(missing_doc)]\n-pub fn args() -> ::realstd::vec::Vec<::realstd::string::String> {\n-    ::realstd::os::args()\n-}\n-\n /// Returns the arguments which this program was started with (normally passed\n /// via the command line) as byte vectors.\n pub fn args_as_bytes() -> Vec<Vec<u8>> {\n@@ -1507,7 +1500,7 @@ mod tests {\n     use prelude::*;\n     use c_str::ToCStr;\n     use option;\n-    use os::{env, getcwd, getenv, make_absolute, args};\n+    use os::{env, getcwd, getenv, make_absolute};\n     use os::{setenv, unsetenv};\n     use os;\n     use rand::Rng;\n@@ -1518,12 +1511,6 @@ mod tests {\n         debug!(\"{}\", os::last_os_error());\n     }\n \n-    #[test]\n-    pub fn test_args() {\n-        let a = args();\n-        assert!(a.len() >= 1);\n-    }\n-\n     fn make_rand_name() -> String {\n         let mut rng = rand::task_rng();\n         let n = format_strbuf!(\"TEST{}\", rng.gen_ascii_str(10u).as_slice());"}, {"sha": "e016c9da418e1ccab4c7b9ad80e8837b4b8cacd3", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/009d898a9422ac04c1aa60c0e9aff3abc5fa4672/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009d898a9422ac04c1aa60c0e9aff3abc5fa4672/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=009d898a9422ac04c1aa60c0e9aff3abc5fa4672", "patch": "@@ -22,47 +22,23 @@\n \n use option::Option;\n use vec::Vec;\n-#[cfg(test)] use option::{Some, None};\n-#[cfg(test)] use realstd;\n-#[cfg(test)] use realargs = realstd::rt::args;\n \n /// One-time global initialization.\n-#[cfg(not(test))]\n pub unsafe fn init(argc: int, argv: **u8) { imp::init(argc, argv) }\n-#[cfg(test)]\n-pub unsafe fn init(argc: int, argv: **u8) { realargs::init(argc, argv) }\n \n /// One-time global cleanup.\n-#[cfg(not(test))] pub unsafe fn cleanup() { imp::cleanup() }\n-#[cfg(test)]      pub unsafe fn cleanup() { realargs::cleanup() }\n+pub unsafe fn cleanup() { imp::cleanup() }\n \n /// Take the global arguments from global storage.\n-#[cfg(not(test))] pub fn take() -> Option<Vec<Vec<u8>>> { imp::take() }\n-#[cfg(test)]      pub fn take() -> Option<Vec<Vec<u8>>> {\n-    match realargs::take() {\n-        realstd::option::Some(v) => Some(unsafe{ ::mem::transmute(v) }),\n-        realstd::option::None => None,\n-    }\n-}\n+pub fn take() -> Option<Vec<Vec<u8>>> { imp::take() }\n \n /// Give the global arguments to global storage.\n ///\n /// It is an error if the arguments already exist.\n-#[cfg(not(test))] pub fn put(args: Vec<Vec<u8>>) { imp::put(args) }\n-#[cfg(test)]      pub fn put(args: Vec<Vec<u8>>) {\n-    realargs::put(unsafe {\n-        ::mem::transmute(args)\n-    })\n-}\n+pub fn put(args: Vec<Vec<u8>>) { imp::put(args) }\n \n /// Make a clone of the global arguments.\n-#[cfg(not(test))] pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n-#[cfg(test)]      pub fn clone() -> Option<Vec<Vec<u8>>> {\n-    match realargs::clone() {\n-        realstd::option::Some(v) => Some(unsafe { ::mem::transmute(v) }),\n-        realstd::option::None => None,\n-    }\n-}\n+pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"android\")]\n@@ -75,18 +51,16 @@ mod imp {\n     use unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n     use mem;\n     use vec::Vec;\n-    #[cfg(not(test))] use ptr::RawPtr;\n+    use ptr::RawPtr;\n \n     static mut global_args_ptr: uint = 0;\n     static mut lock: StaticNativeMutex = NATIVE_MUTEX_INIT;\n \n-    #[cfg(not(test))]\n     pub unsafe fn init(argc: int, argv: **u8) {\n         let args = load_argc_and_argv(argc, argv);\n         put(args);\n     }\n \n-    #[cfg(not(test))]\n     pub unsafe fn cleanup() {\n         rtassert!(take().is_some());\n         lock.destroy();\n@@ -127,7 +101,6 @@ mod imp {\n     }\n \n     // Copied from `os`.\n-    #[cfg(not(test))]\n     unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> Vec<Vec<u8>> {\n         use c_str::CString;\n         use ptr::RawPtr;\n@@ -173,8 +146,8 @@ mod imp {\n     }\n }\n \n-#[cfg(target_os = \"macos\", not(test))]\n-#[cfg(target_os = \"win32\", not(test))]\n+#[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"win32\")]\n mod imp {\n     use option::Option;\n     use vec::Vec;"}]}