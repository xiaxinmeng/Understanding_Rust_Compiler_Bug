{"sha": "cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMDAwZjA0MDhmM2Q5YzRlNjJkMmM3MWFhZTk3OWFiMDY3N2NhMGU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-01-29T13:38:48Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-02-15T13:27:51Z"}, "message": "Pointer metadata: add tracking issue number", "tree": {"sha": "09dcf678bfffca4a16115536c25dedcf4355769d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09dcf678bfffca4a16115536c25dedcf4355769d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "html_url": "https://github.com/rust-lang/rust/commit/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ade3fe32c8a742504aaddcbe0d6e498f8eae11d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d", "html_url": "https://github.com/rust-lang/rust/commit/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "3f065e08ddfa7c6f41a17c4a4790e5c4d7592d5a", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "patch": "@@ -52,8 +52,8 @@ impl<T: ?Sized> *const T {\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts`].\n     #[cfg(not(bootstrap))]\n-    #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n-    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n     pub const fn to_raw_parts(self) -> (*const (), <T as super::Pointee>::Metadata) {\n         (self.cast(), super::metadata(self))"}, {"sha": "7c7dce0ce74e2ba0f7ffb87017cdd1121f48c337", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#![unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n \n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n@@ -72,7 +72,7 @@ pub trait Pointee {\n ///     assert_eq!(std::mem::size_of::<&T>(), std::mem::size_of::<usize>())\n /// }\n /// ```\n-#[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n // NOTE: don\u2019t stabilize this before trait aliases are stable in the language?\n pub trait Thin = Pointee<Metadata = ()>;\n \n@@ -88,7 +88,7 @@ pub trait Thin = Pointee<Metadata = ()>;\n ///\n /// assert_eq!(std::ptr::metadata(\"foo\"), 3_usize);\n /// ```\n-#[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n #[inline]\n pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n     // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n@@ -104,8 +104,8 @@ pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n /// For trait objects, the metadata must come from a pointer to the same underlying ereased type.\n ///\n /// [`slice::from_raw_parts`]: crate::slice::from_raw_parts\n-#[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n-#[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+#[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n #[inline]\n pub const fn from_raw_parts<T: ?Sized>(\n     data_address: *const (),\n@@ -121,8 +121,8 @@ pub const fn from_raw_parts<T: ?Sized>(\n /// raw `*mut` pointer is returned, as opposed to a raw `*const` pointer.\n ///\n /// See the documentation of [`from_raw_parts`] for more details.\n-#[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n-#[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+#[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n #[inline]\n pub const fn from_raw_parts_mut<T: ?Sized>(\n     data_address: *mut (),"}, {"sha": "9c53430ce3556319da81f9619f757ca3f9e63956", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "patch": "@@ -87,7 +87,7 @@ mod metadata;\n #[cfg(not(bootstrap))]\n pub(crate) use metadata::PtrRepr;\n #[cfg(not(bootstrap))]\n-#[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n pub use metadata::{from_raw_parts, from_raw_parts_mut, metadata, DynMetadata, Pointee, Thin};\n \n mod non_null;"}, {"sha": "6651c3dd4e86bd90dd2657870f548f4c918411fb", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "patch": "@@ -51,8 +51,8 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts_mut`].\n     #[cfg(not(bootstrap))]\n-    #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n-    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n     pub const fn to_raw_parts(self) -> (*mut (), <T as super::Pointee>::Metadata) {\n         (self.cast(), super::metadata(self))"}, {"sha": "709c247f2961466138e8e7bf2ef8dc9d595b38dc", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf000f0408f3d9c4e62d2c71aae979ab0677ca0e/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=cf000f0408f3d9c4e62d2c71aae979ab0677ca0e", "patch": "@@ -182,8 +182,8 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts\n     #[cfg(not(bootstrap))]\n-    #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n-    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n     pub const fn from_raw_parts(\n         data_address: NonNull<()>,\n@@ -199,8 +199,8 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// The pointer can be later reconstructed with [`NonNull::from_raw_parts`].\n     #[cfg(not(bootstrap))]\n-    #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n-    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[inline]\n     pub const fn to_raw_parts(self) -> (NonNull<()>, <T as super::Pointee>::Metadata) {\n         (self.cast(), super::metadata(self.as_ptr()))"}]}