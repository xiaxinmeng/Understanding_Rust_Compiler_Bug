{"sha": "d27dea86b7dd4123f75ad176037b3c754eddfa65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyN2RlYTg2YjdkZDQxMjNmNzVhZDE3NjAzN2IzYzc1NGVkZGZhNjU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-03T10:08:08Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-04T15:44:27Z"}, "message": "Properly check assoc items lookup", "tree": {"sha": "ae11b6934630892583ea68031536d1d590f2b06e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae11b6934630892583ea68031536d1d590f2b06e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d27dea86b7dd4123f75ad176037b3c754eddfa65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d27dea86b7dd4123f75ad176037b3c754eddfa65", "html_url": "https://github.com/rust-lang/rust/commit/d27dea86b7dd4123f75ad176037b3c754eddfa65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d27dea86b7dd4123f75ad176037b3c754eddfa65/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63d83fa38584fa0537f896bee5d90709c1352030", "url": "https://api.github.com/repos/rust-lang/rust/commits/63d83fa38584fa0537f896bee5d90709c1352030", "html_url": "https://github.com/rust-lang/rust/commit/63d83fa38584fa0537f896bee5d90709c1352030"}], "stats": {"total": 119, "additions": 73, "deletions": 46}, "files": [{"sha": "0ba8198b54851bd22c500ca7056c0530152af968", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 60, "deletions": 45, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/d27dea86b7dd4123f75ad176037b3c754eddfa65/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d27dea86b7dd4123f75ad176037b3c754eddfa65/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=d27dea86b7dd4123f75ad176037b3c754eddfa65", "patch": "@@ -428,9 +428,8 @@ fn item_import_kind(item: ItemInNs) -> Option<ImportKind> {\n mod tests {\n     use base_db::{fixture::WithFixture, SourceDatabase, Upcast};\n     use expect_test::{expect, Expect};\n-    use stdx::format_to;\n \n-    use crate::{data::FunctionData, test_db::TestDB, AssocContainerId, Lookup};\n+    use crate::{test_db::TestDB, AssocContainerId, Lookup};\n \n     use super::*;\n \n@@ -447,46 +446,55 @@ mod tests {\n \n         let actual = search_dependencies(db.upcast(), krate, query)\n             .into_iter()\n-            .filter_map(|item| {\n-                let mark = match item {\n-                    ItemInNs::Types(ModuleDefId::FunctionId(_))\n-                    | ItemInNs::Values(ModuleDefId::FunctionId(_)) => \"f\",\n-                    ItemInNs::Types(_) => \"t\",\n-                    ItemInNs::Values(_) => \"v\",\n-                    ItemInNs::Macros(_) => \"m\",\n+            .filter_map(|dependency| {\n+                let dependency_krate = dependency.krate(db.upcast())?;\n+                let dependency_imports = db.import_map(dependency_krate);\n+\n+                let (path, mark) = match assoc_item_path(&db, &dependency_imports, dependency) {\n+                    Some(assoc_item_path) => (assoc_item_path, \"a\"),\n+                    None => (\n+                        dependency_imports.path_of(dependency)?.to_string(),\n+                        match dependency {\n+                            ItemInNs::Types(_) => \"t\",\n+                            ItemInNs::Values(_) => \"v\",\n+                            ItemInNs::Macros(_) => \"m\",\n+                        },\n+                    ),\n                 };\n-                item.krate(db.upcast()).map(|krate| {\n-                    let map = db.import_map(krate);\n-\n-                    let path = match assoc_to_trait(&db, item) {\n-                        Some(trait_) => {\n-                            let mut full_path = map.path_of(trait_).unwrap().to_string();\n-                            if let ItemInNs::Types(ModuleDefId::FunctionId(function_id))\n-                            | ItemInNs::Values(ModuleDefId::FunctionId(function_id)) = item\n-                            {\n-                                format_to!(\n-                                    full_path,\n-                                    \"::{}\",\n-                                    FunctionData::fn_data_query(&db, function_id).name,\n-                                );\n-                            }\n-                            full_path\n-                        }\n-                        None => map.path_of(item).unwrap().to_string(),\n-                    };\n-\n-                    format!(\n-                        \"{}::{} ({})\\n\",\n-                        crate_graph[krate].display_name.as_ref().unwrap(),\n-                        path,\n-                        mark\n-                    )\n-                })\n+\n+                Some(format!(\n+                    \"{}::{} ({})\\n\",\n+                    crate_graph[dependency_krate].display_name.as_ref()?,\n+                    path,\n+                    mark\n+                ))\n             })\n             .collect::<String>();\n         expect.assert_eq(&actual)\n     }\n \n+    fn assoc_item_path(\n+        db: &dyn DefDatabase,\n+        dependency_imports: &ImportMap,\n+        dependency: ItemInNs,\n+    ) -> Option<String> {\n+        let dependency_assoc_item_id = dependency.as_assoc_item_id()?;\n+        let trait_ = assoc_to_trait(db, dependency)?;\n+        if let ModuleDefId::TraitId(tr) = trait_.as_module_def_id()? {\n+            let trait_data = db.trait_data(tr);\n+            let assoc_item_name =\n+                trait_data.items.iter().find_map(|(assoc_item_name, assoc_item_id)| {\n+                    if &dependency_assoc_item_id == assoc_item_id {\n+                        Some(assoc_item_name)\n+                    } else {\n+                        None\n+                    }\n+                })?;\n+            return Some(format!(\"{}::{}\", dependency_imports.path_of(trait_)?, assoc_item_name));\n+        }\n+        None\n+    }\n+\n     fn assoc_to_trait(db: &dyn DefDatabase, item: ItemInNs) -> Option<ItemInNs> {\n         let assoc: AssocItemId = match item {\n             ItemInNs::Types(it) | ItemInNs::Values(it) => match it {\n@@ -745,13 +753,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn fuzzy_import_trait() {\n+    fn fuzzy_import_trait_and_assoc_items() {\n         let ra_fixture = r#\"\n         //- /main.rs crate:main deps:dep\n         //- /dep.rs crate:dep\n         pub mod fmt {\n             pub trait Display {\n-                fn format();\n+                type FmtTypeAlias;\n+                const FMT_CONST: bool;\n+\n+                fn format_function();\n+                fn format_method(&self);\n             }\n         }\n     \"#;\n@@ -763,7 +775,10 @@ mod tests {\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::fmt::Display (t)\n-                dep::fmt::Display::format (f)\n+                dep::fmt::Display::FMT_CONST (a)\n+                dep::fmt::Display::FmtTypeAlias (a)\n+                dep::fmt::Display::format_function (a)\n+                dep::fmt::Display::format_method (a)\n             \"#]],\n         );\n     }\n@@ -804,8 +819,8 @@ mod tests {\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n                 dep::fmt::Display (t)\n-                dep::fmt::Display::fmt (f)\n-                dep::format (f)\n+                dep::fmt::Display::fmt (a)\n+                dep::format (v)\n             \"#]],\n         );\n \n@@ -818,7 +833,7 @@ mod tests {\n                 dep::Fmt (t)\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n-                dep::fmt::Display::fmt (f)\n+                dep::fmt::Display::fmt (a)\n             \"#]],\n         );\n \n@@ -832,7 +847,7 @@ mod tests {\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n                 dep::fmt::Display (t)\n-                dep::fmt::Display::fmt (f)\n+                dep::fmt::Display::fmt (a)\n             \"#]],\n         );\n     }\n@@ -873,7 +888,7 @@ mod tests {\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n                 dep::fmt::Display (t)\n-                dep::fmt::Display::fmt (f)\n+                dep::fmt::Display::fmt (a)\n             \"#]],\n         );\n \n@@ -886,7 +901,7 @@ mod tests {\n                 dep::Fmt (t)\n                 dep::Fmt (v)\n                 dep::Fmt (m)\n-                dep::fmt::Display::fmt (f)\n+                dep::fmt::Display::fmt (a)\n             \"#]],\n         );\n     }"}, {"sha": "4da1c3ab0b0141610f66d16755905ed9f05d0575", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d27dea86b7dd4123f75ad176037b3c754eddfa65/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d27dea86b7dd4123f75ad176037b3c754eddfa65/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=d27dea86b7dd4123f75ad176037b3c754eddfa65", "patch": "@@ -10,11 +10,11 @@ use once_cell::sync::Lazy;\n use rustc_hash::{FxHashMap, FxHashSet};\n use test_utils::mark;\n \n-use crate::ModuleId;\n use crate::{\n     db::DefDatabase, per_ns::PerNs, visibility::Visibility, AdtId, BuiltinType, HasModule, ImplId,\n     LocalModuleId, Lookup, MacroDefId, ModuleDefId, TraitId,\n };\n+use crate::{AssocItemId, ModuleId};\n \n #[derive(Copy, Clone)]\n pub(crate) enum ImportType {\n@@ -349,6 +349,18 @@ impl ItemInNs {\n         }\n     }\n \n+    pub fn as_assoc_item_id(self) -> Option<AssocItemId> {\n+        match self {\n+            ItemInNs::Types(ModuleDefId::FunctionId(id))\n+            | ItemInNs::Values(ModuleDefId::FunctionId(id)) => Some(id.into()),\n+            ItemInNs::Types(ModuleDefId::ConstId(id))\n+            | ItemInNs::Values(ModuleDefId::ConstId(id)) => Some(id.into()),\n+            ItemInNs::Types(ModuleDefId::TypeAliasId(id))\n+            | ItemInNs::Values(ModuleDefId::TypeAliasId(id)) => Some(id.into()),\n+            _ => None,\n+        }\n+    }\n+\n     /// Returns the crate defining this item (or `None` if `self` is built-in).\n     pub fn krate(&self, db: &dyn DefDatabase) -> Option<CrateId> {\n         Some(match self {"}]}