{"sha": "f585767fba503a101396c59d43c9ad4c7aeac405", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ODU3NjdmYmE1MDNhMTAxMzk2YzU5ZDQzYzlhZDRjN2FlYWM0MDU=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-30T20:17:32Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-30T20:17:32Z"}, "message": "Revert \"Teach compiletest to use multiple --src-base's\"\n\nThis reverts commit 8a07f5708196dd72ec030018c2a215a4dd823b2e.", "tree": {"sha": "c9e946e31f85e34d7e570920fc2a198dd3106127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9e946e31f85e34d7e570920fc2a198dd3106127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f585767fba503a101396c59d43c9ad4c7aeac405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f585767fba503a101396c59d43c9ad4c7aeac405", "html_url": "https://github.com/rust-lang/rust/commit/f585767fba503a101396c59d43c9ad4c7aeac405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f585767fba503a101396c59d43c9ad4c7aeac405/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdcc415957d94fff921e10b234ec3803b13cd9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdcc415957d94fff921e10b234ec3803b13cd9bc", "html_url": "https://github.com/rust-lang/rust/commit/fdcc415957d94fff921e10b234ec3803b13cd9bc"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "3ae3600cf88c6a41759e1571b25a625f2fd163f8", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f585767fba503a101396c59d43c9ad4c7aeac405/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f585767fba503a101396c59d43c9ad4c7aeac405/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=f585767fba503a101396c59d43c9ad4c7aeac405", "patch": "@@ -36,7 +36,7 @@ pub struct config {\n     llvm_bin_path: Option<Path>,\n \n     // The directory containing the tests to run\n-    src_base: ~[Path],\n+    src_base: Path,\n \n     // The directory where programs should be built\n     build_base: Path,"}, {"sha": "8de79749b54f3f57053fd9db1c59709addeb7e14", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f585767fba503a101396c59d43c9ad4c7aeac405/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f585767fba503a101396c59d43c9ad4c7aeac405/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=f585767fba503a101396c59d43c9ad4c7aeac405", "patch": "@@ -19,7 +19,7 @@ use std::os;\n use std::f64;\n \n use extra::getopts;\n-use extra::getopts::groups::{optopt, optflag, reqopt, optmulti};\n+use extra::getopts::groups::{optopt, optflag, reqopt};\n use extra::test;\n \n use common::config;\n@@ -49,19 +49,19 @@ pub fn main() {\n pub fn parse_config(args: ~[~str]) -> config {\n \n     let groups : ~[getopts::groups::OptGroup] =\n-        ~[reqopt   (\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n-          reqopt   (\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n-          reqopt   (\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n-          optopt   (\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n-          optopt   (\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n-          optmulti (\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n-          reqopt   (\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n-          reqopt   (\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n-          reqopt   (\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n-          reqopt   (\"\", \"mode\", \"which sort of compile tests to run\",\n-                    \" (compile-fail|run-fail|run-pass|pretty|debug-info)\"),\n-          optflag  (\"\", \"ignored\", \"run tests marked as ignored / xfailed\"),\n-          optopt   (\"\", \"runtool\", \"supervisor program to run tests under \\\n+        ~[reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n+          reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n+          reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n+          optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n+          optopt(\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n+          reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n+          reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n+          reqopt(\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n+          reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n+          reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n+                 \"(compile-fail|run-fail|run-pass|pretty|debug-info)\"),\n+          optflag(\"\", \"ignored\", \"run tests marked as ignored / xfailed\"),\n+          optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n                                  (eg. emulator, valgrind)\", \"PROGRAM\"),\n           optopt(\"\", \"rustcflags\", \"flags to pass to rustc\", \"FLAGS\"),\n           optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n@@ -105,16 +105,14 @@ pub fn parse_config(args: ~[~str]) -> config {\n     fn opt_path(m: &getopts::Matches, nm: &str) -> Path {\n         Path(getopts::opt_str(m, nm))\n     }\n-    \n-    let src_base = getopts::opt_strs(matches, \"src-base\");\n \n     config {\n         compile_lib_path: getopts::opt_str(matches, \"compile-lib-path\"),\n         run_lib_path: getopts::opt_str(matches, \"run-lib-path\"),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n         clang_path: getopts::opt_maybe_str(matches, \"clang-path\").map_move(|s| Path(s)),\n         llvm_bin_path: getopts::opt_maybe_str(matches, \"llvm-bin-path\").map_move(|s| Path(s)),\n-        src_base: src_base.iter().map(|x| Path(x.clone())).collect(),\n+        src_base: opt_path(matches, \"src-base\"),\n         build_base: opt_path(matches, \"build-base\"),\n         aux_base: opt_path(matches, \"aux-base\"),\n         stage_id: getopts::opt_str(matches, \"stage-id\"),\n@@ -250,7 +248,7 @@ pub fn make_tests(config: &config) -> ~[test::TestDescAndFn] {\n     debug!(\"making tests from %s\",\n            config.src_base.to_str());\n     let mut tests = ~[];\n-    let dirs = config.src_base.iter().flat_map(|x| os::list_dir_path(x).move_iter()).to_owned_vec();\n+    let dirs = os::list_dir_path(&config.src_base);\n     for file in dirs.iter() {\n         let file = file.clone();\n         debug!(\"inspecting file %s\", file.to_str());"}]}