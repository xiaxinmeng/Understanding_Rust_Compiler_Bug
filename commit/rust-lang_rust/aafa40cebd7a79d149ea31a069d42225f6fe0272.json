{"sha": "aafa40cebd7a79d149ea31a069d42225f6fe0272", "node_id": "C_kwDOAAsO6NoAKGFhZmE0MGNlYmQ3YTc5ZDE0OWVhMzFhMDY5ZDQyMjI1ZjZmZTAyNzI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-14T21:07:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-14T21:07:41Z"}, "message": "Merge #11369\n\n11369: feat: Add type hint for keyword expression hovers r=Veykril a=danii\n\nAdds the return type of keywords to tool-tips where it makes sense. This applies to: `if`, `else`, `match`, `loop`, `unsafe` and `await`. Thanks to `@Veykril` for sharing the idea of putting return type highlighting on other keywords!\r\n![image](https://user-images.githubusercontent.com/39541871/151611737-12325c23-a1f9-4fca-ae48-279b374bdcdf.png)\r\n\r\nCloses #11359\n\nCo-authored-by: Daniel Conley <himself@danii.dev>", "tree": {"sha": "14b5c50aec79641699a81be0679fac66cbd5eb7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b5c50aec79641699a81be0679fac66cbd5eb7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aafa40cebd7a79d149ea31a069d42225f6fe0272", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiCsSdCRBK7hj4Ov3rIwAARJcIAA9S0MRAq4NEjmQnTni7w8ol\nEH2sZ0FJCVWO6P87sF0zHW+UtP3GuRPBXUz0I/85NSDtjA/QM+/rfucS+aXViw7J\nQTrHKZugpSd6Ci9YSM6cVlotdA81t1naguVuFNHwWe/pB8edPHIDIgcmKeVOH5YO\nPPVADsJDyLG6vTSiZnQ8n2NXq1SWmLapS8T3hk2JvbwVeYO0x6RL2q3lINjCYxnA\ny6x8sNjrbE/LcB10TFni5O0YM0nEq6DE29ztAVU9IOtB9YziHvBmdYGHlQiYw+AG\n/YqlNJMCmVxopGxuTHlxsjVJHkZlixcDfzzKdk8dHwujvvjdwSqG24EGjJeIrbc=\n=AKR8\n-----END PGP SIGNATURE-----\n", "payload": "tree 14b5c50aec79641699a81be0679fac66cbd5eb7d\nparent 014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2\nparent 768804f11d165a73bb56d87b284e86456913aef6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1644872861 +0000\ncommitter GitHub <noreply@github.com> 1644872861 +0000\n\nMerge #11369\n\n11369: feat: Add type hint for keyword expression hovers r=Veykril a=danii\n\nAdds the return type of keywords to tool-tips where it makes sense. This applies to: `if`, `else`, `match`, `loop`, `unsafe` and `await`. Thanks to `@Veykril` for sharing the idea of putting return type highlighting on other keywords!\r\n![image](https://user-images.githubusercontent.com/39541871/151611737-12325c23-a1f9-4fca-ae48-279b374bdcdf.png)\r\n\r\nCloses #11359\n\nCo-authored-by: Daniel Conley <himself@danii.dev>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aafa40cebd7a79d149ea31a069d42225f6fe0272", "html_url": "https://github.com/rust-lang/rust/commit/aafa40cebd7a79d149ea31a069d42225f6fe0272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aafa40cebd7a79d149ea31a069d42225f6fe0272/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "html_url": "https://github.com/rust-lang/rust/commit/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2"}, {"sha": "768804f11d165a73bb56d87b284e86456913aef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/768804f11d165a73bb56d87b284e86456913aef6", "html_url": "https://github.com/rust-lang/rust/commit/768804f11d165a73bb56d87b284e86456913aef6"}], "stats": {"total": 76, "additions": 67, "deletions": 9}, "files": [{"sha": "f94348ec581df33d1e1a4ef85043dbb504473175", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 67, "deletions": 9, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/aafa40cebd7a79d149ea31a069d42225f6fe0272/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafa40cebd7a79d149ea31a069d42225f6fe0272/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=aafa40cebd7a79d149ea31a069d42225f6fe0272", "patch": "@@ -239,22 +239,18 @@ pub(super) fn keyword(\n     }\n     let parent = token.parent()?;\n     let famous_defs = FamousDefs(sema, sema.scope(&parent).krate());\n-    let keyword_mod = if token.kind() == T![fn] && ast::FnPtrType::cast(parent).is_some() {\n-        // treat fn keyword inside function pointer type as primitive\n-        format!(\"prim_{}\", token.text())\n-    } else {\n-        // std exposes {}_keyword modules with docstrings on the root to document keywords\n-        format!(\"{}_keyword\", token.text())\n-    };\n+\n+    let KeywordHint { description, keyword_mod, actions } = keyword_hints(sema, token, parent);\n+\n     let doc_owner = find_std_module(&famous_defs, &keyword_mod)?;\n     let docs = doc_owner.attrs(sema.db).docs()?;\n     let markup = process_markup(\n         sema.db,\n         Definition::Module(doc_owner),\n-        &markup(Some(docs.into()), token.text().into(), None)?,\n+        &markup(Some(docs.into()), description, None)?,\n         config,\n     );\n-    Some(HoverResult { markup, actions: Default::default() })\n+    Some(HoverResult { markup, actions })\n }\n \n pub(super) fn try_for_lint(attr: &ast::Attr, token: &SyntaxToken) -> Option<HoverResult> {\n@@ -500,3 +496,65 @@ fn local(db: &RootDatabase, it: hir::Local) -> Option<Markup> {\n     };\n     markup(None, desc, None)\n }\n+\n+struct KeywordHint {\n+    description: String,\n+    keyword_mod: String,\n+    actions: Vec<HoverAction>,\n+}\n+\n+impl KeywordHint {\n+    fn new(description: String, keyword_mod: String) -> Self {\n+        Self { description, keyword_mod, actions: Vec::default() }\n+    }\n+}\n+\n+fn keyword_hints(\n+    sema: &Semantics<RootDatabase>,\n+    token: &SyntaxToken,\n+    parent: syntax::SyntaxNode,\n+) -> KeywordHint {\n+    match token.kind() {\n+        T![await] | T![loop] | T![match] | T![unsafe] | T![as] | T![try] | T![if] | T![else] => {\n+            let keyword_mod = format!(\"{}_keyword\", token.text());\n+\n+            match ast::Expr::cast(parent).and_then(|site| sema.type_of_expr(&site)) {\n+                // ignore the unit type ()\n+                Some(ty) if !ty.adjusted.as_ref().unwrap_or(&ty.original).is_unit() => {\n+                    let mut targets: Vec<hir::ModuleDef> = Vec::new();\n+                    let mut push_new_def = |item: hir::ModuleDef| {\n+                        if !targets.contains(&item) {\n+                            targets.push(item);\n+                        }\n+                    };\n+                    walk_and_push_ty(sema.db, &ty.original, &mut push_new_def);\n+\n+                    let ty = ty.adjusted();\n+                    let description = format!(\"{}: {}\", token.text(), ty.display(sema.db));\n+\n+                    KeywordHint {\n+                        description,\n+                        keyword_mod,\n+                        actions: vec![HoverAction::goto_type_from_targets(sema.db, targets)],\n+                    }\n+                }\n+                _ => KeywordHint {\n+                    description: token.text().to_string(),\n+                    keyword_mod,\n+                    actions: Vec::new(),\n+                },\n+            }\n+        }\n+\n+        T![fn] => {\n+            let module = match ast::FnPtrType::cast(parent) {\n+                // treat fn keyword inside function pointer type as primitive\n+                Some(_) => format!(\"prim_{}\", token.text()),\n+                None => format!(\"{}_keyword\", token.text()),\n+            };\n+            KeywordHint::new(token.text().to_string(), module)\n+        }\n+\n+        _ => KeywordHint::new(token.text().to_string(), format!(\"{}_keyword\", token.text())),\n+    }\n+}"}]}