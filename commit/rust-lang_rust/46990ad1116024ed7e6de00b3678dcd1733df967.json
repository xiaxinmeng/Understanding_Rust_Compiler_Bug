{"sha": "46990ad1116024ed7e6de00b3678dcd1733df967", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OTkwYWQxMTE2MDI0ZWQ3ZTZkZTAwYjM2NzhkY2QxNzMzZGY5Njc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-06T22:42:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-06T22:44:10Z"}, "message": "Use callee ID when kind-checking expressions that may be overloaded\n\nAnd fix up test cases that should have failed if not for this bug.\n\nCloses #2587", "tree": {"sha": "6c6272417250951d5c36e3567b1e4a45de8b3749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6272417250951d5c36e3567b1e4a45de8b3749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46990ad1116024ed7e6de00b3678dcd1733df967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46990ad1116024ed7e6de00b3678dcd1733df967", "html_url": "https://github.com/rust-lang/rust/commit/46990ad1116024ed7e6de00b3678dcd1733df967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46990ad1116024ed7e6de00b3678dcd1733df967/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e2cf2ee5b47a526b2eeebf26312fb184fcf7a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e2cf2ee5b47a526b2eeebf26312fb184fcf7a6", "html_url": "https://github.com/rust-lang/rust/commit/c5e2cf2ee5b47a526b2eeebf26312fb184fcf7a6"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "68cf5ab354c069cf1ef00c1deac6288d79785de5", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=46990ad1116024ed7e6de00b3678dcd1733df967", "patch": "@@ -241,17 +241,25 @@ fn check_arm(a: arm, cx: ctx, v: visit::vt<ctx>) {\n \n fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n     debug!(\"kind::check_expr(%s)\", expr_to_str(e, cx.tcx.sess.intr()));\n+    let id_to_use = match e.node {\n+        expr_index(*)|expr_assign_op(*)|\n+        expr_unary(*)|expr_binary(*) => e.callee_id,\n+        _ => e.id\n+    };\n \n     // Handle any kind bounds on type parameters\n-    do option::iter(cx.tcx.node_type_substs.find(e.id)) |ts| {\n+    do option::iter(cx.tcx.node_type_substs.find(id_to_use)) |ts| {\n         let bounds = match e.node {\n           expr_path(_) => {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(e.id));\n             ty::lookup_item_type(cx.tcx, did).bounds\n           }\n           _ => {\n-            // Type substitions should only occur on paths and\n+            // Type substitutions should only occur on paths and\n             // method calls, so this needs to be a method call.\n+\n+            // Even though the callee_id may have been the id with\n+            // node_type_substs, e.id is correct here.\n             ty::method_call_bounds(cx.tcx, cx.method_map, e.id).expect(\n                 ~\"non path/method call expr has type substs??\")\n           }\n@@ -265,7 +273,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n                       *bounds, (*bounds).len());\n         }\n         do vec::iter2(ts, *bounds) |ty, bound| {\n-            check_bounds(cx, e.id, e.span, ty, bound)\n+            check_bounds(cx, id_to_use, e.span, ty, bound)\n         }\n     }\n "}, {"sha": "091707065dc178465b4e7e7ddc3c0151dfee1cb4", "filename": "src/test/compile-fail/issue-2548.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=46990ad1116024ed7e6de00b3678dcd1733df967", "patch": "@@ -1,26 +1,28 @@\n // A test case for #2548.\n \n-// xfail-test\n-\n struct foo {\n     x: @mut int;\n \n-    new(x: @mut int) { self.x = x; }\n \n     drop {\n         io::println(\"Goodbye, World!\");\n         *self.x += 1;\n     }\n }\n \n+fn foo(x: @mut int) -> foo {\n+    foo { x: x }\n+}\n+\n fn main() {\n     let x = @mut 0;\n \n     {\n         let mut res = foo(x);\n         \n         let mut v = ~[mut];\n-        v <- ~[mut res] + v;\n+        v <- ~[mut res] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `owned`, missing `copy`)\n+        assert (v.len() == 2);\n     }\n \n     assert *x == 1;", "previous_filename": "src/test/run-pass/issue-2548.rs"}, {"sha": "d3f8c668edbf423bb4228fab2346f9851cb00829", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=46990ad1116024ed7e6de00b3678dcd1733df967", "patch": "@@ -1,9 +1,9 @@\n trait vec_monad<A> {\n-    fn bind<B>(f: fn(A) -> ~[B]) -> ~[B];\n+    fn bind<B: copy>(f: fn(A) -> ~[B]) -> ~[B];\n }\n \n impl<A> ~[A]: vec_monad<A> {\n-    fn bind<B>(f: fn(A) -> ~[B]) -> ~[B] {\n+    fn bind<B: copy>(f: fn(A) -> ~[B]) -> ~[B] {\n         let mut r = ~[];\n         for self.each |elt| { r += f(elt); }\n         r"}, {"sha": "f338dcef5771248402eafe7d5383ef3a923589c7", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=46990ad1116024ed7e6de00b3678dcd1733df967", "patch": "@@ -28,13 +28,13 @@ impl uint: uint_utils {\n trait vec_utils<T> {\n     fn length_() -> uint;\n     fn iter_(f: fn(T));\n-    fn map_<U>(f: fn(T) -> U) -> ~[U];\n+    fn map_<U: copy>(f: fn(T) -> U) -> ~[U];\n }\n \n impl<T> ~[T]: vec_utils<T> {\n     fn length_() -> uint { vec::len(self) }\n     fn iter_(f: fn(T)) { for self.each |x| { f(x); } }\n-    fn map_<U>(f: fn(T) -> U) -> ~[U] {\n+    fn map_<U: copy>(f: fn(T) -> U) -> ~[U] {\n         let mut r = ~[];\n         for self.each |elt| { r += ~[f(elt)]; }\n         r"}, {"sha": "95709971e03d28b14f641d5622304e9b9338c367", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46990ad1116024ed7e6de00b3678dcd1733df967/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=46990ad1116024ed7e6de00b3678dcd1733df967", "patch": "@@ -5,17 +5,17 @@ impl int: to_str {\n     fn to_str() -> ~str { int::str(self) }\n }\n impl ~str: to_str {\n-    fn to_str() -> ~str { self }\n+    fn to_str() -> ~str { copy self }\n }\n impl (): to_str {\n     fn to_str() -> ~str { ~\"()\" }\n }\n \n trait map<T> {\n-    fn map<U>(f: fn(T) -> U) -> ~[U];\n+    fn map<U: copy>(f: fn(T) -> U) -> ~[U];\n }\n impl<T> ~[T]: map<T> {\n-    fn map<U>(f: fn(T) -> U) -> ~[U] {\n+    fn map<U: copy>(f: fn(T) -> U) -> ~[U] {\n         let mut r = ~[];\n         for self.each |x| { r += ~[f(x)]; }\n         r"}]}