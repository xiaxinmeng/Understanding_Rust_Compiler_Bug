{"sha": "0da9721ab49d80bf74208e94a891b12c4a248507", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYTk3MjFhYjQ5ZDgwYmY3NDIwOGU5NGE4OTFiMTJjNGEyNDg1MDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-04T12:36:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-04T12:36:11Z"}, "message": "Auto merge of #42406 - bjorn3:patch-1, r=eddyb\n\nSome doc comments", "tree": {"sha": "ec54a3ba7899b1c3c87a0731eebd6c8309bcef32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec54a3ba7899b1c3c87a0731eebd6c8309bcef32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da9721ab49d80bf74208e94a891b12c4a248507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da9721ab49d80bf74208e94a891b12c4a248507", "html_url": "https://github.com/rust-lang/rust/commit/0da9721ab49d80bf74208e94a891b12c4a248507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da9721ab49d80bf74208e94a891b12c4a248507/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b17b4c0846d0e01544e90bb2aa2776576e825d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b17b4c0846d0e01544e90bb2aa2776576e825d1", "html_url": "https://github.com/rust-lang/rust/commit/0b17b4c0846d0e01544e90bb2aa2776576e825d1"}, {"sha": "18c46327ec227a5bdf21310fdd7b684d3b3350c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c46327ec227a5bdf21310fdd7b684d3b3350c7", "html_url": "https://github.com/rust-lang/rust/commit/18c46327ec227a5bdf21310fdd7b684d3b3350c7"}], "stats": {"total": 108, "additions": 55, "deletions": 53}, "files": [{"sha": "85a02953a91042a163270fd5ec7ee59ecf8ac00f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/0da9721ab49d80bf74208e94a891b12c4a248507/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da9721ab49d80bf74208e94a891b12c4a248507/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0da9721ab49d80bf74208e94a891b12c4a248507", "patch": "@@ -27,35 +27,35 @@ pub enum DepNode<D: Clone + Debug> {\n     // During compilation, it is always `DefId`, but when serializing\n     // it is mapped to `DefPath`.\n \n-    // Represents the `Krate` as a whole (the `hir::Krate` value) (as\n-    // distinct from the krate module). This is basically a hash of\n-    // the entire krate, so if you read from `Krate` (e.g., by calling\n-    // `tcx.hir.krate()`), we will have to assume that any change\n-    // means that you need to be recompiled. This is because the\n-    // `Krate` value gives you access to all other items. To avoid\n-    // this fate, do not call `tcx.hir.krate()`; instead, prefer\n-    // wrappers like `tcx.visit_all_items_in_krate()`.  If there is no\n-    // suitable wrapper, you can use `tcx.dep_graph.ignore()` to gain\n-    // access to the krate, but you must remember to add suitable\n-    // edges yourself for the individual items that you read.\n+    /// Represents the `Krate` as a whole (the `hir::Krate` value) (as\n+    /// distinct from the krate module). This is basically a hash of\n+    /// the entire krate, so if you read from `Krate` (e.g., by calling\n+    /// `tcx.hir.krate()`), we will have to assume that any change\n+    /// means that you need to be recompiled. This is because the\n+    /// `Krate` value gives you access to all other items. To avoid\n+    /// this fate, do not call `tcx.hir.krate()`; instead, prefer\n+    /// wrappers like `tcx.visit_all_items_in_krate()`.  If there is no\n+    /// suitable wrapper, you can use `tcx.dep_graph.ignore()` to gain\n+    /// access to the krate, but you must remember to add suitable\n+    /// edges yourself for the individual items that you read.\n     Krate,\n \n-    // Represents the HIR node with the given node-id\n+    /// Represents the HIR node with the given node-id\n     Hir(D),\n \n-    // Represents the body of a function or method. The def-id is that of the\n-    // function/method.\n+    /// Represents the body of a function or method. The def-id is that of the\n+    /// function/method.\n     HirBody(D),\n \n-    // Represents the metadata for a given HIR node, typically found\n-    // in an extern crate.\n+    /// Represents the metadata for a given HIR node, typically found\n+    /// in an extern crate.\n     MetaData(D),\n \n-    // Represents some piece of metadata global to its crate.\n+    /// Represents some piece of metadata global to its crate.\n     GlobalMetaData(D, GlobalMetaDataKind),\n \n-    // Represents some artifact that we save to disk. Note that these\n-    // do not have a def-id as part of their identifier.\n+    /// Represents some artifact that we save to disk. Note that these\n+    /// do not have a def-id as part of their identifier.\n     WorkProduct(Arc<WorkProductId>),\n \n     // Represents different phases in the compiler.\n@@ -114,13 +114,13 @@ pub enum DepNode<D: Clone + Debug> {\n     NeedsDrop(D),\n     Layout(D),\n \n-    // The set of impls for a given trait. Ultimately, it would be\n-    // nice to get more fine-grained here (e.g., to include a\n-    // simplified type), but we can't do that until we restructure the\n-    // HIR to distinguish the *header* of an impl from its body.  This\n-    // is because changes to the header may change the self-type of\n-    // the impl and hence would require us to be more conservative\n-    // than changes in the impl body.\n+    /// The set of impls for a given trait. Ultimately, it would be\n+    /// nice to get more fine-grained here (e.g., to include a\n+    /// simplified type), but we can't do that until we restructure the\n+    /// HIR to distinguish the *header* of an impl from its body.  This\n+    /// is because changes to the header may change the self-type of\n+    /// the impl and hence would require us to be more conservative\n+    /// than changes in the impl body.\n     TraitImpls(D),\n \n     AllLocalTraitImpls,\n@@ -133,35 +133,35 @@ pub enum DepNode<D: Clone + Debug> {\n     TraitItems(D),\n     ReprHints(D),\n \n-    // Trait selection cache is a little funny. Given a trait\n-    // reference like `Foo: SomeTrait<Bar>`, there could be\n-    // arbitrarily many def-ids to map on in there (e.g., `Foo`,\n-    // `SomeTrait`, `Bar`). We could have a vector of them, but it\n-    // requires heap-allocation, and trait sel in general can be a\n-    // surprisingly hot path. So instead we pick two def-ids: the\n-    // trait def-id, and the first def-id in the input types. If there\n-    // is no def-id in the input types, then we use the trait def-id\n-    // again. So for example:\n-    //\n-    // - `i32: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n-    // - `u32: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n-    // - `Clone: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n-    // - `Vec<i32>: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Vec }`\n-    // - `String: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: String }`\n-    // - `Foo: Trait<Bar>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n-    // - `Foo: Trait<i32>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n-    // - `(Foo, Bar): Trait` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n-    // - `i32: Trait<Foo>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n-    //\n-    // You can see that we map many trait refs to the same\n-    // trait-select node.  This is not a problem, it just means\n-    // imprecision in our dep-graph tracking.  The important thing is\n-    // that for any given trait-ref, we always map to the **same**\n-    // trait-select node.\n+    /// Trait selection cache is a little funny. Given a trait\n+    /// reference like `Foo: SomeTrait<Bar>`, there could be\n+    /// arbitrarily many def-ids to map on in there (e.g., `Foo`,\n+    /// `SomeTrait`, `Bar`). We could have a vector of them, but it\n+    /// requires heap-allocation, and trait sel in general can be a\n+    /// surprisingly hot path. So instead we pick two def-ids: the\n+    /// trait def-id, and the first def-id in the input types. If there\n+    /// is no def-id in the input types, then we use the trait def-id\n+    /// again. So for example:\n+    ///\n+    /// - `i32: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n+    /// - `u32: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n+    /// - `Clone: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n+    /// - `Vec<i32>: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Vec }`\n+    /// - `String: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: String }`\n+    /// - `Foo: Trait<Bar>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n+    /// - `Foo: Trait<i32>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n+    /// - `(Foo, Bar): Trait` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n+    /// - `i32: Trait<Foo>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n+    ///\n+    /// You can see that we map many trait refs to the same\n+    /// trait-select node.  This is not a problem, it just means\n+    /// imprecision in our dep-graph tracking.  The important thing is\n+    /// that for any given trait-ref, we always map to the **same**\n+    /// trait-select node.\n     TraitSelect { trait_def_id: D, input_def_id: D },\n \n-    // For proj. cache, we just keep a list of all def-ids, since it is\n-    // not a hotspot.\n+    /// For proj. cache, we just keep a list of all def-ids, since it is\n+    /// not a hotspot.\n     ProjectionCache { def_ids: Vec<D> },\n \n     ParamEnv(D),"}, {"sha": "bf224f89f0ddb41539b1b3b08b3733d7deb73dc8", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0da9721ab49d80bf74208e94a891b12c4a248507/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da9721ab49d80bf74208e94a891b12c4a248507/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=0da9721ab49d80bf74208e94a891b12c4a248507", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! The `DepGraphSafe` trait\n+\n use hir::BodyId;\n use hir::def_id::DefId;\n use syntax::ast::NodeId;"}]}