{"sha": "ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNjk3MGE2NWViZGMxNTNkNTNlOWI2YzJjY2IyMjRlZTcwNWFjOTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-27T22:12:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-28T19:01:14Z"}, "message": "librustc: Make overloaded operators with explicit self translate correctly", "tree": {"sha": "883d7bd463736587a47d4d86a559180960521c1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/883d7bd463736587a47d4d86a559180960521c1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "html_url": "https://github.com/rust-lang/rust/commit/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "082a88e42cdefce78a8f1f869971bbabd74ebca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/082a88e42cdefce78a8f1f869971bbabd74ebca2", "html_url": "https://github.com/rust-lang/rust/commit/082a88e42cdefce78a8f1f869971bbabd74ebca2"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "5745d2e84bff14a480bf3e874e34865b0e4576d0", "filename": "src/librustc/middle/borrowck.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "patch": "@@ -513,6 +513,16 @@ impl borrowck_ctxt {\n         cat_expr(self.tcx, self.method_map, expr)\n     }\n \n+    fn cat_expr_unadjusted(expr: @ast::expr) -> cmt {\n+        cat_expr_unadjusted(self.tcx, self.method_map, expr)\n+    }\n+\n+    fn cat_expr_autoderefd(expr: @ast::expr,\n+                           adj: @ty::AutoAdjustment)\n+                        -> cmt {\n+        cat_expr_autoderefd(self.tcx, self.method_map, expr, adj)\n+    }\n+\n     fn cat_def(id: ast::node_id,\n                span: span,\n                ty: ty::t,"}, {"sha": "03bd403bf461d92a5f01e2a728cb38143532293d", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "patch": "@@ -362,7 +362,12 @@ impl check_loan_ctxt {\n     }\n \n     fn check_assignment(at: assignment_type, ex: @ast::expr) {\n-        let cmt = self.bccx.cat_expr(ex);\n+        // We don't use cat_expr() here because we don't want to treat\n+        // auto-ref'd parameters in overloaded operators as rvalues.\n+        let cmt = match self.bccx.tcx.adjustments.find(ex.id) {\n+            None => self.bccx.cat_expr_unadjusted(ex),\n+            Some(adj) => self.bccx.cat_expr_autoderefd(ex, adj)\n+        };\n \n         debug!(\"check_assignment(cmt=%s)\",\n                self.bccx.cmt_to_repr(cmt));"}, {"sha": "9eafec930f6e4d7d67baf6e4615e37799872201e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "patch": "@@ -573,6 +573,29 @@ fn cat_expr(\n     return mcx.cat_expr(expr);\n }\n \n+fn cat_expr_unadjusted(\n+    tcx: ty::ctxt,\n+    method_map: typeck::method_map,\n+    expr: @ast::expr) -> cmt {\n+\n+    let mcx = &mem_categorization_ctxt {\n+        tcx: tcx, method_map: method_map\n+    };\n+    return mcx.cat_expr_unadjusted(expr);\n+}\n+\n+fn cat_expr_autoderefd(\n+    tcx: ty::ctxt,\n+    method_map: typeck::method_map,\n+    expr: @ast::expr,\n+    adj: @ty::AutoAdjustment) -> cmt {\n+\n+    let mcx = &mem_categorization_ctxt {\n+        tcx: tcx, method_map: method_map\n+    };\n+    return mcx.cat_expr_autoderefd(expr, adj);\n+}\n+\n fn cat_def(\n     tcx: ty::ctxt,\n     method_map: typeck::method_map,"}, {"sha": "4927d2773c1908d51ab716af4aeef528767fe333", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "patch": "@@ -1572,7 +1572,7 @@ fn trans_assign_op(bcx: block,\n     debug!(\"trans_assign_op(expr=%s)\", bcx.expr_to_str(expr));\n \n     // Evaluate LHS (destination), which should be an lvalue\n-    let dst_datum = unpack_datum!(bcx, trans_lvalue(bcx, dst));\n+    let dst_datum = unpack_datum!(bcx, trans_lvalue_unadjusted(bcx, dst));\n \n     // A user-defined operator method\n     if bcx.ccx().maps.method_map.find(expr.id).is_some() {"}, {"sha": "3b198078cf8279ecaff09f9727ac5bedb6202d92", "filename": "src/test/run-pass/operator-overloading-explicit-self.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6970a65ebdc153d53e9b6c2ccb224ee705ac94/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs?ref=ca6970a65ebdc153d53e9b6c2ccb224ee705ac94", "patch": "@@ -0,0 +1,16 @@\n+struct S {\n+    x: int\n+}\n+\n+impl S {\n+    pure fn add(&self, other: &S) -> S {\n+        S { x: self.x + other.x }\n+    }\n+}\n+\n+fn main() {\n+    let mut s = S { x: 1 };\n+    s += S { x: 2 };\n+    assert s.x == 3;\n+}\n+"}]}