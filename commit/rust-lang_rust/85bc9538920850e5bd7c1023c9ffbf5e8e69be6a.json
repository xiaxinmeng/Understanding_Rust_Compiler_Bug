{"sha": "85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YmM5NTM4OTIwODUwZTViZDdjMTAyM2M5ZmZiZjVlOGU2OWJlNmE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-11-18T12:55:35Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-11-18T13:16:35Z"}, "message": "Add tests for multi-segment paths in const generic arguments", "tree": {"sha": "0c54b65c3e1b4d437cfbb50bf1046020f584e34f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c54b65c3e1b4d437cfbb50bf1046020f584e34f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "html_url": "https://github.com/rust-lang/rust/commit/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "url": "https://api.github.com/repos/rust-lang/rust/commits/efcbf1b00bb8997f1e1ee0740640f67fbe32c615", "html_url": "https://github.com/rust-lang/rust/commit/efcbf1b00bb8997f1e1ee0740640f67fbe32c615"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "3c9d4c9b4700f24f96be6d2840f46b391b147ea3", "filename": "src/test/ui/const-generics/macro_rules-braces.full.stderr", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr?ref=85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "patch": "@@ -1,5 +1,16 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:54:17\n+  --> $DIR/macro_rules-braces.rs:49:17\n+   |\n+LL |     let _: baz!(m::P);\n+   |                 ^^^^\n+   |\n+help: enclose the `const` expression in braces\n+   |\n+LL |     let _: baz!({ m::P });\n+   |                 ^      ^\n+\n+error: expressions must be enclosed in braces to be used as const generic arguments\n+  --> $DIR/macro_rules-braces.rs:69:17\n    |\n LL |     let _: baz!(10 + 7);\n    |                 ^^^^^^\n@@ -10,7 +21,7 @@ LL |     let _: baz!({ 10 + 7 });\n    |                 ^        ^\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:10:13\n+  --> $DIR/macro_rules-braces.rs:16:13\n    |\n LL |             [u8; $x]\n    |             ^^^^^^^^\n@@ -22,7 +33,7 @@ LL |     let _: foo!({{ N }});\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:15:13\n+  --> $DIR/macro_rules-braces.rs:21:13\n    |\n LL |             [u8; { $x }]\n    |             ^^^^^^^^^^^^\n@@ -34,7 +45,7 @@ LL |     let _: bar!({ N });\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:20:13\n+  --> $DIR/macro_rules-braces.rs:26:13\n    |\n LL |             Foo<$x>\n    |             ^^^^^^^\n@@ -46,7 +57,7 @@ LL |     let _: baz!({{ N }});\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:25:13\n+  --> $DIR/macro_rules-braces.rs:31:13\n    |\n LL |             Foo<{ $x }>\n    |             ^^^^^^^^^^^\n@@ -57,5 +68,5 @@ LL |     let _: biz!({ N });\n    = note: this may fail depending on what value the parameter takes\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "c6425edc10f159f4ff559c8299447af79c756122", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "patch": "@@ -1,5 +1,16 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:54:17\n+  --> $DIR/macro_rules-braces.rs:49:17\n+   |\n+LL |     let _: baz!(m::P);\n+   |                 ^^^^\n+   |\n+help: enclose the `const` expression in braces\n+   |\n+LL |     let _: baz!({ m::P });\n+   |                 ^      ^\n+\n+error: expressions must be enclosed in braces to be used as const generic arguments\n+  --> $DIR/macro_rules-braces.rs:69:17\n    |\n LL |     let _: baz!(10 + 7);\n    |                 ^^^^^^\n@@ -10,36 +21,36 @@ LL |     let _: baz!({ 10 + 7 });\n    |                 ^        ^\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:31:20\n+  --> $DIR/macro_rules-braces.rs:37:20\n    |\n LL |     let _: foo!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:33:19\n+  --> $DIR/macro_rules-braces.rs:41:19\n    |\n LL |     let _: bar!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:36:20\n+  --> $DIR/macro_rules-braces.rs:46:20\n    |\n LL |     let _: baz!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:38:19\n+  --> $DIR/macro_rules-braces.rs:51:19\n    |\n LL |     let _: biz!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "c6b43bec243f4d46c6a85f805833840d14fed8aa", "filename": "src/test/ui/const-generics/macro_rules-braces.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs?ref=85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "patch": "@@ -3,6 +3,12 @@\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(min, feature(min_const_generics))]\n \n+mod m {\n+    pub const P: usize = 0;\n+}\n+\n+const Q: usize = 0;\n+\n fn test<const N: usize>() {\n     struct Foo<const M: usize>;\n     macro_rules! foo {\n@@ -29,13 +35,22 @@ fn test<const N: usize>() {\n     let _: foo!(N);\n     let _: foo!({ N });\n     let _: foo!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: foo!(Q);\n+    let _: foo!(m::P);\n     let _: bar!(N);\n     let _: bar!({ N }); //[min]~ ERROR generic parameters may not\n+    let _: bar!(Q);\n+    let _: bar!(m::P);\n     let _: baz!(N);\n     let _: baz!({ N });\n     let _: baz!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: baz!(Q);\n+    let _: baz!({ m::P });\n+    let _: baz!(m::P); //~ ERROR expressions must be enclosed in braces\n     let _: biz!(N);\n     let _: biz!({ N }); //[min]~ ERROR generic parameters may not\n+    let _: biz!(Q);\n+    let _: biz!(m::P);\n     let _: foo!(3);\n     let _: foo!({ 3 });\n     let _: foo!({{ 3 }});"}]}