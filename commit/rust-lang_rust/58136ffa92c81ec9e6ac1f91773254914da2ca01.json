{"sha": "58136ffa92c81ec9e6ac1f91773254914da2ca01", "node_id": "C_kwDOAAsO6NoAKDU4MTM2ZmZhOTJjODFlYzllNmFjMWY5MTc3MzI1NDkxNGRhMmNhMDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-26T21:41:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-26T21:41:17Z"}, "message": "Auto merge of #108440 - Zoxc:encoder-enum, r=cjgillot\n\nEmit the enum discriminant separately for the Encodable macro\n\nThis changes the `Encodable` proc macro to first emit the discriminant with a separate `match` statement, then emit the fields. LLVM can optimize down the first `match` to just a read of the enum discriminant. This avoids generating a `emit_usize` call per variant and enums with no fields now optimize down to just a single `emit_usize` call.\n\nThe no variant case is special cased to avoid warnings about unreachable code.\n\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe3 <b>clap</b>:check:unchanged</td><td align=\"right\">0.4676s</td><td align=\"right\">0.4640s</td><td align=\"right\"> -0.78%</td></tr><tr><td>\ud83d\udfe3 <b>hyper</b>:check:unchanged</td><td align=\"right\">0.1348s</td><td align=\"right\">0.1338s</td><td align=\"right\"> -0.75%</td></tr><tr><td>\ud83d\udfe3 <b>regex</b>:check:unchanged</td><td align=\"right\">0.3370s</td><td align=\"right\">0.3352s</td><td align=\"right\"> -0.54%</td></tr><tr><td>\ud83d\udfe3 <b>syn</b>:check:unchanged</td><td align=\"right\">0.6326s</td><td align=\"right\">0.6281s</td><td align=\"right\"> -0.71%</td></tr><tr><td>\ud83d\udfe3 <b>syntex_syntax</b>:check:unchanged</td><td align=\"right\">1.8561s</td><td align=\"right\">1.8589s</td><td align=\"right\"> 0.15%</td></tr><tr><td>Total</td><td align=\"right\">3.4282s</td><td align=\"right\">3.4200s</td><td align=\"right\"> -0.24%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">0.9947s</td><td align=\"right\"> -0.53%</td></tr></table>", "tree": {"sha": "cfcd31d6accd32903b81745d10b986231880824e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfcd31d6accd32903b81745d10b986231880824e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58136ffa92c81ec9e6ac1f91773254914da2ca01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58136ffa92c81ec9e6ac1f91773254914da2ca01", "html_url": "https://github.com/rust-lang/rust/commit/58136ffa92c81ec9e6ac1f91773254914da2ca01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58136ffa92c81ec9e6ac1f91773254914da2ca01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d962ea57899d64dc8a57040142c6b498a57c8064", "url": "https://api.github.com/repos/rust-lang/rust/commits/d962ea57899d64dc8a57040142c6b498a57c8064", "html_url": "https://github.com/rust-lang/rust/commit/d962ea57899d64dc8a57040142c6b498a57c8064"}, {"sha": "7de205ea3affa62d0f847380ab7313d465c4b2e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de205ea3affa62d0f847380ab7313d465c4b2e4", "html_url": "https://github.com/rust-lang/rust/commit/7de205ea3affa62d0f847380ab7313d465c4b2e4"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "8d017d149f62901fefa99176f30d39e1e653e6fc", "filename": "compiler/rustc_macros/src/serialize.rs", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/58136ffa92c81ec9e6ac1f91773254914da2ca01/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58136ffa92c81ec9e6ac1f91773254914da2ca01/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs?ref=58136ffa92c81ec9e6ac1f91773254914da2ca01", "patch": "@@ -42,6 +42,12 @@ fn decodable_body(\n     }\n     let ty_name = s.ast().ident.to_string();\n     let decode_body = match s.variants() {\n+        [] => {\n+            let message = format!(\"`{}` has no variants to decode\", ty_name);\n+            quote! {\n+                panic!(#message)\n+            }\n+        }\n         [vi] => vi.construct(|field, _index| decode_field(field)),\n         variants => {\n             let match_inner: TokenStream = variants\n@@ -139,6 +145,11 @@ fn encodable_body(\n     });\n \n     let encode_body = match s.variants() {\n+        [] => {\n+            quote! {\n+                match *self {}\n+            }\n+        }\n         [_] => {\n             let encode_inner = s.each_variant(|vi| {\n                 vi.bindings()\n@@ -160,6 +171,23 @@ fn encodable_body(\n             }\n         }\n         _ => {\n+            let disc = {\n+                let mut variant_idx = 0usize;\n+                let encode_inner = s.each_variant(|_| {\n+                    let result = quote! {\n+                        #variant_idx\n+                    };\n+                    variant_idx += 1;\n+                    result\n+                });\n+                quote! {\n+                    let disc = match *self {\n+                        #encode_inner\n+                    };\n+                    ::rustc_serialize::Encoder::emit_usize(__encoder, disc);\n+                }\n+            };\n+\n             let mut variant_idx = 0usize;\n             let encode_inner = s.each_variant(|vi| {\n                 let encode_fields: TokenStream = vi\n@@ -176,26 +204,11 @@ fn encodable_body(\n                         result\n                     })\n                     .collect();\n-\n-                let result = if !vi.bindings().is_empty() {\n-                    quote! {\n-                        ::rustc_serialize::Encoder::emit_enum_variant(\n-                            __encoder,\n-                            #variant_idx,\n-                            |__encoder| { #encode_fields }\n-                        )\n-                    }\n-                } else {\n-                    quote! {\n-                        ::rustc_serialize::Encoder::emit_fieldless_enum_variant::<#variant_idx>(\n-                            __encoder,\n-                        )\n-                    }\n-                };\n                 variant_idx += 1;\n-                result\n+                encode_fields\n             });\n             quote! {\n+                #disc\n                 match *self {\n                     #encode_inner\n                 }"}, {"sha": "567fe06109b781f2275233b2b8ce3cd987f9d268", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58136ffa92c81ec9e6ac1f91773254914da2ca01/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58136ffa92c81ec9e6ac1f91773254914da2ca01/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=58136ffa92c81ec9e6ac1f91773254914da2ca01", "patch": "@@ -43,25 +43,13 @@ pub trait Encoder {\n     fn emit_str(&mut self, v: &str);\n     fn emit_raw_bytes(&mut self, s: &[u8]);\n \n-    // Convenience for the derive macro:\n     fn emit_enum_variant<F>(&mut self, v_id: usize, f: F)\n     where\n         F: FnOnce(&mut Self),\n     {\n         self.emit_usize(v_id);\n         f(self);\n     }\n-\n-    // We put the field index in a const generic to allow the emit_usize to be\n-    // compiled into a more efficient form. In practice, the variant index is\n-    // known at compile-time, and that knowledge allows much more efficient\n-    // codegen than we'd otherwise get. LLVM isn't always able to make the\n-    // optimization that would otherwise be necessary here, likely due to the\n-    // multiple levels of inlining and const-prop that are needed.\n-    #[inline]\n-    fn emit_fieldless_enum_variant<const ID: usize>(&mut self) {\n-        self.emit_usize(ID)\n-    }\n }\n \n // Note: all the methods in this trait are infallible, which may be surprising."}]}