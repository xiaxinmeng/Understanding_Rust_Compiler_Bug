{"sha": "f321144a56aef246d430f5eea9316d8cc257a5a0", "node_id": "C_kwDOAAsO6NoAKGYzMjExNDRhNTZhZWYyNDZkNDMwZjVlZWE5MzE2ZDhjYzI1N2E1YTA", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-04T15:57:17Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-20T16:11:59Z"}, "message": "Add example for `Option::product` and `Result::product`", "tree": {"sha": "6d7230901a26c73504a1d379310f6f70de7c7820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d7230901a26c73504a1d379310f6f70de7c7820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f321144a56aef246d430f5eea9316d8cc257a5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f321144a56aef246d430f5eea9316d8cc257a5a0", "html_url": "https://github.com/rust-lang/rust/commit/f321144a56aef246d430f5eea9316d8cc257a5a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f321144a56aef246d430f5eea9316d8cc257a5a0/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d6c04875e102f00a7d66a16ea09567dc7bbd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d6c04875e102f00a7d66a16ea09567dc7bbd97", "html_url": "https://github.com/rust-lang/rust/commit/01d6c04875e102f00a7d66a16ea09567dc7bbd97"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "f9c7eb8f9383e24a7e5f50717fd396de866c32bd", "filename": "library/core/src/iter/traits/accum.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f321144a56aef246d430f5eea9316d8cc257a5a0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f321144a56aef246d430f5eea9316d8cc257a5a0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs?ref=f321144a56aef246d430f5eea9316d8cc257a5a0", "patch": "@@ -164,12 +164,13 @@ where\n     /// element is encountered:\n     ///\n     /// ```\n+    /// let f = |&x: &i32| if x < 0 { Err(\"Negative element found\") } else { Ok(x) };\n     /// let v = vec![1, 2];\n-    /// let res: Result<i32, &'static str> = v.iter().map(|&x: &i32|\n-    ///     if x < 0 { Err(\"Negative element found\") }\n-    ///     else { Ok(x) }\n-    /// ).sum();\n+    /// let res: Result<i32, _> = v.iter().map(f).sum();\n     /// assert_eq!(res, Ok(3));\n+    /// let v = vec![1, -2];\n+    /// let res: Result<i32, _> = v.iter().map(f).sum();\n+    /// assert_eq!(res, Err(\"Negative element found\"));\n     /// ```\n     fn sum<I>(iter: I) -> Result<T, E>\n     where\n@@ -187,6 +188,20 @@ where\n     /// Takes each element in the [`Iterator`]: if it is an [`Err`], no further\n     /// elements are taken, and the [`Err`] is returned. Should no [`Err`]\n     /// occur, the product of all elements is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This multiplies each number in a vector of strings,\n+    /// if a string could not be parsed the operation returns `Err`:\n+    ///\n+    /// ```\n+    /// let nums = vec![\"5\", \"10\", \"1\", \"2\"];\n+    /// let total: Result<usize, _> = nums.iter().map(|w| w.parse::<usize>()).product();\n+    /// assert_eq!(total, Ok(100));\n+    /// let nums = vec![\"5\", \"10\", \"one\", \"2\"];\n+    /// let total: Result<usize, _> = nums.iter().map(|w| w.parse::<usize>()).product();\n+    /// assert!(total.is_err());\n+    /// ```\n     fn product<I>(iter: I) -> Result<T, E>\n     where\n         I: Iterator<Item = Result<U, E>>,\n@@ -213,6 +228,9 @@ where\n     /// let words = vec![\"have\", \"a\", \"great\", \"day\"];\n     /// let total: Option<usize> = words.iter().map(|w| w.find('a')).sum();\n     /// assert_eq!(total, Some(5));\n+    /// let words = vec![\"have\", \"a\", \"good\", \"day\"];\n+    /// let total: Option<usize> = words.iter().map(|w| w.find('a')).sum();\n+    /// assert_eq!(total, None);\n     /// ```\n     fn sum<I>(iter: I) -> Option<T>\n     where\n@@ -230,6 +248,20 @@ where\n     /// Takes each element in the [`Iterator`]: if it is a [`None`], no further\n     /// elements are taken, and the [`None`] is returned. Should no [`None`]\n     /// occur, the product of all elements is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This multiplies each number in a vector of strings,\n+    /// if a string could not be parsed the operation returns `None`:\n+    ///\n+    /// ```\n+    /// let nums = vec![\"5\", \"10\", \"1\", \"2\"];\n+    /// let total: Option<usize> = nums.iter().map(|w| w.parse::<usize>().ok()).product();\n+    /// assert_eq!(total, Some(100));\n+    /// let nums = vec![\"5\", \"10\", \"one\", \"2\"];\n+    /// let total: Option<usize> = nums.iter().map(|w| w.parse::<usize>().ok()).product();\n+    /// assert_eq!(total, None);\n+    /// ```\n     fn product<I>(iter: I) -> Option<T>\n     where\n         I: Iterator<Item = Option<U>>,"}]}