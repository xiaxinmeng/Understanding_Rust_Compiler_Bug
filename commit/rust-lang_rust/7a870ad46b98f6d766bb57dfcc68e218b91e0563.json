{"sha": "7a870ad46b98f6d766bb57dfcc68e218b91e0563", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODcwYWQ0NmI5OGY2ZDc2NmJiNTdkZmNjNjhlMjE4YjkxZTA1NjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-16T07:42:56Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-16T07:42:56Z"}, "message": "Merge pull request #180 from birkenfeld/small_changes\n\nSmall changes", "tree": {"sha": "baaa1c593322697623364ba4781c10c61511ca3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baaa1c593322697623364ba4781c10c61511ca3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a870ad46b98f6d766bb57dfcc68e218b91e0563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a870ad46b98f6d766bb57dfcc68e218b91e0563", "html_url": "https://github.com/rust-lang/rust/commit/7a870ad46b98f6d766bb57dfcc68e218b91e0563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a870ad46b98f6d766bb57dfcc68e218b91e0563/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f494f14aa6aedf2abbe9e4876cf57fc55a42490e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f494f14aa6aedf2abbe9e4876cf57fc55a42490e", "html_url": "https://github.com/rust-lang/rust/commit/f494f14aa6aedf2abbe9e4876cf57fc55a42490e"}, {"sha": "64954283c12a5c0701fcd805454ca9282cafca51", "url": "https://api.github.com/repos/rust-lang/rust/commits/64954283c12a5c0701fcd805454ca9282cafca51", "html_url": "https://github.com/rust-lang/rust/commit/64954283c12a5c0701fcd805454ca9282cafca51"}], "stats": {"total": 138, "additions": 58, "deletions": 80}, "files": [{"sha": "cfd646765c9b3af72bafe137e2cd27053d52764d", "filename": "src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,12 +1,8 @@\n-use rustc::plugin::Registry;\n use rustc::lint::*;\n-use rustc::middle::const_eval::lookup_const_by_id;\n-use rustc::middle::def::*;\n use syntax::ast::*;\n-use syntax::ast_util::{is_comparison_binop, binop_to_string};\n-use syntax::ptr::P;\n use syntax::codemap::Span;\n use std::f64::consts as f64;\n+\n use utils::span_lint;\n \n declare_lint! {"}, {"sha": "3e451ac5edaf655cdda36836f42591b4a4ef7d6d", "filename": "src/attrs.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,11 +1,9 @@\n-/// checks for attributes\n+//! checks for attributes\n \n-use rustc::plugin::Registry;\n use rustc::lint::*;\n use syntax::ast::*;\n-use syntax::ptr::P;\n-use syntax::codemap::{Span, ExpnInfo};\n-use syntax::parse::token::InternedString;\n+use syntax::codemap::ExpnInfo;\n+\n use utils::{in_macro, match_path, span_lint};\n \n declare_lint! { pub INLINE_ALWAYS, Warn,\n@@ -103,7 +101,7 @@ fn check_attrs(cx: &Context, info: Option<&ExpnInfo>, ident: &Ident,\n                 span_lint(cx, INLINE_ALWAYS, attr.span, &format!(\n                     \"you have declared `#[inline(always)]` on `{}`. This \\\n                      is usually a bad idea. Are you sure?\",\n-                    ident.name.as_str()));\n+                    ident.name));\n             }\n         }\n     }"}, {"sha": "ec937dbab6cdc143415a759f84e61abe1d6c4a6b", "filename": "src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,11 +1,10 @@\n-use rustc::plugin::Registry;\n use rustc::lint::*;\n use rustc::middle::const_eval::lookup_const_by_id;\n use rustc::middle::def::*;\n use syntax::ast::*;\n-use syntax::ast_util::{is_comparison_binop, binop_to_string};\n-use syntax::ptr::P;\n+use syntax::ast_util::is_comparison_binop;\n use syntax::codemap::Span;\n+\n use utils::span_lint;\n \n declare_lint! {"}, {"sha": "0b6dfc19e6b5bd1d789b17f29f5bdddfabbfbaad", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -12,12 +12,10 @@\n //!\n //! This lint is **warn** by default\n \n-use rustc::plugin::Registry;\n use rustc::lint::*;\n-use rustc::middle::def::*;\n use syntax::ast::*;\n-use syntax::ptr::P;\n-use syntax::codemap::{Span, Spanned, ExpnInfo};\n+use syntax::codemap::{Spanned, ExpnInfo};\n+\n use utils::{in_macro, span_help_and_lint, snippet, snippet_block};\n \n declare_lint! {"}, {"sha": "50b61e233564e4165328d83ce9b934117a777730", "filename": "src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -3,6 +3,7 @@ use syntax::ast::*;\n use syntax::ast_util as ast_util;\n use syntax::ptr::P;\n use syntax::codemap as code;\n+\n use utils::span_lint;\n \n declare_lint! {"}, {"sha": "6712e7872783d3850a163c1640f499ea3ac68bc1", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,6 +1,5 @@\n+use rustc::lint::*;\n use syntax::ast::*;\n-use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n-use syntax::codemap::{Span, Spanned};\n use syntax::print::pprust::expr_to_string;\n \n use utils::span_lint;"}, {"sha": "18a475bb7374985f91edd63e6b9480617c71bb54", "filename": "src/identity_op.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,10 +1,7 @@\n-use rustc::plugin::Registry;\n use rustc::lint::*;\n use rustc::middle::const_eval::lookup_const_by_id;\n use rustc::middle::def::*;\n use syntax::ast::*;\n-use syntax::ast_util::{is_comparison_binop, binop_to_string};\n-use syntax::ptr::P;\n use syntax::codemap::Span;\n \n use utils::{span_lint, snippet};"}, {"sha": "073dcea582d652450184a0d72f7a45cd94d354b7", "filename": "src/len_zero.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,14 +1,9 @@\n-extern crate rustc_typeck as typeck;\n-\n-use std::rc::Rc;\n-use std::cell::RefCell;\n+use rustc::lint::*;\n+use syntax::ast::*;\n use syntax::ptr::P;\n-use rustc::lint::{Context, LintPass, LintArray, Lint};\n-use rustc::util::nodemap::DefIdMap;\n-use rustc::middle::ty::{self, TypeVariants, TypeAndMut, MethodTraitItemId, ImplOrTraitItemId};\n-use rustc::middle::def::{DefTy, DefStruct, DefTrait};\n use syntax::codemap::{Span, Spanned};\n-use syntax::ast::*;\n+use rustc::middle::ty::{self, MethodTraitItemId, ImplOrTraitItemId};\n+\n use utils::{span_lint, walk_ptrs_ty, snippet};\n \n declare_lint!(pub LEN_ZERO, Warn,\n@@ -55,7 +50,7 @@ fn check_trait_items(cx: &Context, item: &Item, trait_items: &[P<TraitItem>]) {\n     }\n \n     if !trait_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n-        //span_lint(cx, LEN_WITHOUT_IS_EMPTY, item.span, &format!(\"trait {}\", item.ident.as_str()));\n+        //span_lint(cx, LEN_WITHOUT_IS_EMPTY, item.span, &format!(\"trait {}\", item.ident));\n         for i in trait_items {\n             if is_named_self(i, \"len\") {\n                 span_lint(cx, LEN_WITHOUT_IS_EMPTY, i.span,\n@@ -122,7 +117,7 @@ fn has_is_empty(cx: &Context, expr: &Expr) -> bool {\n         if let &MethodTraitItemId(def_id) = id {\n             if let ty::MethodTraitItem(ref method) =\n                 cx.tcx.impl_or_trait_item(def_id) {\n-                    method.name.as_str() == \"is_empty\"\n+                    method.name == \"is_empty\"\n                         && method.fty.sig.skip_binder().inputs.len() == 1\n                 } else { false }\n         } else { false }"}, {"sha": "c45227f88f224f070b6b309b77c00c6377d0ef04", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,14 +1,14 @@\n #![feature(plugin_registrar, box_syntax)]\n-#![feature(rustc_private, collections)]\n+#![feature(rustc_private, core, collections)]\n #![feature(str_split_at)]\n-#![allow(unused_imports, unknown_lints)]\n \n #[macro_use]\n extern crate syntax;\n #[macro_use]\n extern crate rustc;\n \n // Only for the compile time checking of paths\n+extern crate core;\n extern crate collections;\n \n use rustc::plugin::Registry;"}, {"sha": "9d07df4a3ed21a5e7822326578907c08603ba585", "filename": "src/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,10 +1,10 @@\n use syntax::ast::*;\n-use rustc::lint::{Context, LintPass, LintArray, Lint};\n+use rustc::lint::*;\n use syntax::codemap::Span;\n-use syntax::visit::{Visitor, FnKind, walk_ty};\n-use utils::{in_external_macro, span_lint};\n+use syntax::visit::{Visitor, walk_ty};\n use std::collections::HashSet;\n-use std::iter::FromIterator;\n+\n+use utils::{in_external_macro, span_lint};\n \n declare_lint!(pub NEEDLESS_LIFETIMES, Warn,\n               \"using explicit lifetimes for references in function arguments when elision rules \\\n@@ -153,7 +153,7 @@ struct RefVisitor(Vec<RefLt>);\n impl RefVisitor {\n     fn record(&mut self, lifetime: &Option<Lifetime>) {\n         if let &Some(ref lt) = lifetime {\n-            if lt.name.as_str() == \"'static\" {\n+            if lt.name == \"'static\" {\n                 self.0.push(Static);\n             } else {\n                 self.0.push(Named(lt.name));"}, {"sha": "092b5ce1196c42a1e1ea4390e4bb16853edfccbb", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -36,13 +36,12 @@ impl LintPass for LoopsPass {\n                             span_lint(cx, NEEDLESS_RANGE_LOOP, expr.span, &format!(\n                                 \"the loop variable `{}` is used to index `{}`. Consider using \\\n                                  `for ({}, item) in {}.iter().enumerate()` or similar iterators.\",\n-                                ident.node.name.as_str(), indexed.as_str(),\n-                                ident.node.name.as_str(), indexed.as_str()));\n+                                ident.node.name, indexed, ident.node.name, indexed));\n                         } else {\n                             span_lint(cx, NEEDLESS_RANGE_LOOP, expr.span, &format!(\n                                 \"the loop variable `{}` is only used to index `{}`. \\\n                                  Consider using `for item in &{}` or similar iterators.\",\n-                                ident.node.name.as_str(), indexed.as_str(), indexed.as_str()));\n+                                ident.node.name, indexed, indexed));\n                         }\n                     }\n                 }\n@@ -52,7 +51,7 @@ impl LintPass for LoopsPass {\n             if let ExprMethodCall(ref method, _, ref args) = arg.node {\n                 // just the receiver, no arguments to iter() or iter_mut()\n                 if args.len() == 1 {\n-                    let method_name = method.node.name.as_str();\n+                    let method_name = method.node.name;\n                     if method_name == \"iter\" {\n                         let object = snippet(cx, args[0].span, \"_\");\n                         span_lint(cx, EXPLICIT_ITER_LOOP, expr.span, &format!("}, {"sha": "f2df736bebc1f5388b2ce8935f850af80c403963", "filename": "src/methods.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,5 +1,5 @@\n use syntax::ast::*;\n-use rustc::lint::{Context, LintPass, LintArray};\n+use rustc::lint::*;\n use rustc::middle::ty;\n \n use utils::{span_lint, match_def_path, walk_ptrs_ty};\n@@ -16,12 +16,19 @@ declare_lint!(pub STR_TO_STRING, Warn,\n declare_lint!(pub STRING_TO_STRING, Warn,\n               \"calling `String.to_string()` which is a no-op\");\n \n+#[allow(unused_imports)]\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED, STR_TO_STRING, STRING_TO_STRING)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        {\n+            // In case stuff gets moved around\n+            use core::option::Option;\n+            use core::result::Result;\n+            use collections::string::String;\n+        }\n         if let ExprMethodCall(ref ident, _, ref args) = expr.node {\n             let ref obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty;\n             if ident.node.name == \"unwrap\" {"}, {"sha": "1fc41cf486222941f2888a99ff400d5a32ef48e8", "filename": "src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,11 +1,11 @@\n+use rustc::lint::*;\n use syntax::ptr::P;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_util::{is_comparison_binop, binop_to_string};\n-use syntax::visit::{FnKind};\n-use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n-use rustc::middle::ty;\n use syntax::codemap::{Span, Spanned};\n+use syntax::visit::FnKind;\n+use rustc::middle::ty;\n use std::borrow::Cow;\n \n use utils::{match_path, snippet, snippet_block, span_lint, span_help_and_lint, walk_ptrs_ty};"}, {"sha": "fbcb70e17d39196b667c4aab9282f56055ba1934", "filename": "src/mut_mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,8 +1,8 @@\n-use syntax::ptr::P;\n+use rustc::lint::*;\n use syntax::ast::*;\n-use rustc::lint::{Context, LintPass, LintArray, Lint};\n-use rustc::middle::ty::{TypeVariants, TypeAndMut, TyRef};\n-use syntax::codemap::{BytePos, ExpnInfo, Span};\n+use syntax::codemap::ExpnInfo;\n+use rustc::middle::ty::{TypeAndMut, TyRef};\n+\n use utils::{in_macro, span_lint};\n \n declare_lint!(pub MUT_MUT, Warn,"}, {"sha": "18d98f1f0630a0ca2aaeb05d959bb3d21fedfdee", "filename": "src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -2,14 +2,9 @@\n //!\n //! This lint is **warn** by default\n \n-use rustc::plugin::Registry;\n use rustc::lint::*;\n-use rustc::middle::const_eval::lookup_const_by_id;\n-use rustc::middle::def::*;\n use syntax::ast::*;\n-use syntax::ast_util::{is_comparison_binop, binop_to_string};\n-use syntax::ptr::P;\n-use syntax::codemap::Span;\n+\n use utils::{de_p, span_lint, snippet};\n \n declare_lint! {"}, {"sha": "2748d187a4ed88b8d91b789ec2e9115f426b4cff", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -2,14 +2,10 @@\n //!\n //! This lint is **warn** by default\n \n-use rustc::plugin::Registry;\n use rustc::lint::*;\n-use rustc::middle::const_eval::lookup_const_by_id;\n-use rustc::middle::def::*;\n use syntax::ast::*;\n-use syntax::ast_util::{is_comparison_binop, binop_to_string};\n-use syntax::ptr::P;\n use syntax::codemap::Span;\n+\n use types::match_ty_unwrap;\n use utils::span_lint;\n "}, {"sha": "df0b93f301eae573a2923823a4d8730037229a2d", "filename": "src/returns.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,8 +1,7 @@\n-use syntax::ast;\n+use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::{Span, Spanned};\n use syntax::visit::FnKind;\n-use rustc::lint::{Context, LintPass, LintArray, Level};\n \n use utils::{span_lint, snippet, match_path};\n \n@@ -101,7 +100,7 @@ impl LintPass for ReturnPass {\n     }\n \n     fn check_fn(&mut self, cx: &Context, _: FnKind, _: &FnDecl,\n-                block: &Block, _: Span, _: ast::NodeId) {\n+                block: &Block, _: Span, _: NodeId) {\n         self.check_block_return(cx, block);\n         self.check_let_return(cx, block);\n     }"}, {"sha": "7981b7858501a295c9d685ccc7e341532cd479f8", "filename": "src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -6,9 +6,9 @@\n use rustc::lint::*;\n use rustc::middle::ty::TypeVariants::TyStruct;\n use syntax::ast::*;\n-use syntax::codemap::{Span, Spanned};\n+use syntax::codemap::Spanned;\n+\n use eq_op::is_exp_equal;\n-use types::match_ty_unwrap;\n use utils::{match_def_path, span_lint, walk_ptrs_ty, get_parent_expr};\n \n declare_lint! {"}, {"sha": "aa5f1d13471f806e42379c2253200f1bfb593ee5", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,9 +1,9 @@\n-use syntax::ptr::P;\n+use rustc::lint::*;\n use syntax::ast;\n use syntax::ast::*;\n+use syntax::ptr::P;\n use rustc::middle::ty;\n-use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n-use syntax::codemap::{ExpnInfo, Span};\n+use syntax::codemap::ExpnInfo;\n \n use utils::{in_macro, snippet, span_lint, span_help_and_lint};\n \n@@ -40,6 +40,7 @@ pub fn match_ty_unwrap<'a>(ty: &'a Ty, segments: &[&str]) -> Option<&'a [P<Ty>]>\n     }\n }\n \n+#[allow(unused_imports)]\n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BOX_VEC, LINKEDLIST)\n@@ -62,10 +63,8 @@ impl LintPass for TypePass {\n             // In case stuff gets moved around\n             use collections::linked_list::LinkedList as DL1;\n             use std::collections::linked_list::LinkedList as DL2;\n-            use std::collections::linked_list::LinkedList as DL3;\n         }\n         let dlists = [vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n-                      vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n                       vec![\"collections\",\"linked_list\",\"LinkedList\"]];\n         for path in &dlists {\n             if match_ty_unwrap(ty, &path[..]).is_some() {"}, {"sha": "ab48fd1bef2ddbbea9b888aa4debfe28cc5ee19d", "filename": "src/unicode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,6 +1,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::{BytePos, Span};\n+\n use utils::span_lint;\n \n declare_lint!{ pub ZERO_WIDTH_SPACE, Deny,"}, {"sha": "47e3a3456d68b7c674b5874fae362971b20cb810", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870ad46b98f6d766bb57dfcc68e218b91e0563/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=7a870ad46b98f6d766bb57dfcc68e218b91e0563", "patch": "@@ -1,11 +1,10 @@\n-use rustc::lint::{Context, Lint, Level};\n-use syntax::ast::{DefId, Expr, Name, NodeId, Path};\n+use rustc::lint::*;\n+use syntax::ast::*;\n use syntax::codemap::{ExpnInfo, Span};\n use syntax::ptr::P;\n use rustc::ast_map::Node::NodeExpr;\n use rustc::middle::ty;\n-use std::borrow::{Cow, IntoCow};\n-use std::convert::From;\n+use std::borrow::Cow;\n \n /// returns true if the macro that expanded the crate was outside of\n /// the current crate or was a compiler plugin\n@@ -35,14 +34,14 @@ pub fn in_external_macro(cx: &Context, span: Span) -> bool {\n /// `match_def_path(cx, id, &[\"core\", \"option\", \"Option\"])`\n pub fn match_def_path(cx: &Context, def_id: DefId, path: &[&str]) -> bool {\n     cx.tcx.with_path(def_id, |iter| iter.map(|elem| elem.name())\n-        .zip(path.iter()).all(|(nm, p)| &nm.as_str() == p))\n+        .zip(path.iter()).all(|(nm, p)| nm == p))\n }\n \n /// match a Path against a slice of segment string literals, e.g.\n /// `match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])`\n pub fn match_path(path: &Path, segments: &[&str]) -> bool {\n     path.segments.iter().rev().zip(segments.iter().rev()).all(\n-        |(a,b)| &a.identifier.name.as_str() == b)\n+        |(a, b)| &a.identifier.name == b)\n }\n \n /// convert a span to a code snippet if available, otherwise use default, e.g."}]}