{"sha": "dd9dda7a1c87170fe241345f6da88874921ec433", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOWRkYTdhMWM4NzE3MGZlMjQxMzQ1ZjZkYTg4ODc0OTIxZWM0MzM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-10-25T00:23:22Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-10-31T15:09:15Z"}, "message": "DSTify ToCStr", "tree": {"sha": "665d0d06c5827ab9ea2debff8799c198b9e61ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/665d0d06c5827ab9ea2debff8799c198b9e61ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd9dda7a1c87170fe241345f6da88874921ec433", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9dda7a1c87170fe241345f6da88874921ec433", "html_url": "https://github.com/rust-lang/rust/commit/dd9dda7a1c87170fe241345f6da88874921ec433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd9dda7a1c87170fe241345f6da88874921ec433/comments", "author": null, "committer": null, "parents": [{"sha": "82045ca3606dfe070fce99ca71fb6a9d39217b73", "url": "https://api.github.com/repos/rust-lang/rust/commits/82045ca3606dfe070fce99ca71fb6a9d39217b73", "html_url": "https://github.com/rust-lang/rust/commit/82045ca3606dfe070fce99ca71fb6a9d39217b73"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "92d8e4005bf8c87d7e1a63c114326fce3a191c67", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dd9dda7a1c87170fe241345f6da88874921ec433/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9dda7a1c87170fe241345f6da88874921ec433/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=dd9dda7a1c87170fe241345f6da88874921ec433", "patch": "@@ -74,7 +74,7 @@ fn main() {\n use collections::string::String;\n use collections::hash;\n use core::fmt;\n-use core::kinds::marker;\n+use core::kinds::{Sized, marker};\n use core::mem;\n use core::prelude::{Clone, Collection, Drop, Eq, ImmutableSlice, Iterator};\n use core::prelude::{MutableSlice, None, Option, Ordering, PartialEq};\n@@ -286,7 +286,7 @@ impl fmt::Show for CString {\n }\n \n /// A generic trait for converting a value to a CString.\n-pub trait ToCStr {\n+pub trait ToCStr for Sized? {\n     /// Copy the receiver into a CString.\n     ///\n     /// # Failure\n@@ -329,15 +329,7 @@ pub trait ToCStr {\n     }\n }\n \n-// FIXME (#12938): Until DST lands, we cannot decompose &str into &\n-// and str, so we cannot usefully take ToCStr arguments by reference\n-// (without forcing an additional & around &str). So we are instead\n-// temporarily adding an instance for ~str and String, so that we can\n-// take ToCStr as owned. When DST lands, the string instances should\n-// be revisited, and arguments bound by ToCStr should be passed by\n-// reference.\n-\n-impl<'a> ToCStr for &'a str {\n+impl ToCStr for str {\n     #[inline]\n     fn to_c_str(&self) -> CString {\n         self.as_bytes().to_c_str()\n@@ -384,10 +376,10 @@ impl ToCStr for String {\n // The length of the stack allocated buffer for `vec.with_c_str()`\n const BUF_LEN: uint = 128;\n \n-impl<'a> ToCStr for &'a [u8] {\n+impl ToCStr for [u8] {\n     fn to_c_str(&self) -> CString {\n         let mut cs = unsafe { self.to_c_str_unchecked() };\n-        check_for_null(*self, cs.as_mut_ptr());\n+        check_for_null(self, cs.as_mut_ptr());\n         cs\n     }\n \n@@ -403,11 +395,33 @@ impl<'a> ToCStr for &'a [u8] {\n     }\n \n     fn with_c_str<T>(&self, f: |*const libc::c_char| -> T) -> T {\n-        unsafe { with_c_str(*self, true, f) }\n+        unsafe { with_c_str(self, true, f) }\n+    }\n+\n+    unsafe fn with_c_str_unchecked<T>(&self, f: |*const libc::c_char| -> T) -> T {\n+        with_c_str(self, false, f)\n+    }\n+}\n+\n+impl<'a, Sized? T: ToCStr> ToCStr for &'a T {\n+    #[inline]\n+    fn to_c_str(&self) -> CString {\n+        (**self).to_c_str()\n+    }\n+\n+    #[inline]\n+    unsafe fn to_c_str_unchecked(&self) -> CString {\n+        (**self).to_c_str_unchecked()\n+    }\n+\n+    #[inline]\n+    fn with_c_str<T>(&self, f: |*const libc::c_char| -> T) -> T {\n+        (**self).with_c_str(f)\n     }\n \n+    #[inline]\n     unsafe fn with_c_str_unchecked<T>(&self, f: |*const libc::c_char| -> T) -> T {\n-        with_c_str(*self, false, f)\n+        (**self).with_c_str_unchecked(f)\n     }\n }\n "}, {"sha": "8a50ecc5ca6695d97eedc12d87c8e54831d117ce", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd9dda7a1c87170fe241345f6da88874921ec433/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9dda7a1c87170fe241345f6da88874921ec433/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=dd9dda7a1c87170fe241345f6da88874921ec433", "patch": "@@ -106,18 +106,6 @@ impl ToCStr for Path {\n     }\n }\n \n-impl<'a> ToCStr for &'a Path {\n-    #[inline]\n-    fn to_c_str(&self) -> CString {\n-        (*self).to_c_str()\n-    }\n-\n-    #[inline]\n-    unsafe fn to_c_str_unchecked(&self) -> CString {\n-        (*self).to_c_str_unchecked()\n-    }\n-}\n-\n impl<S: hash::Writer> hash::Hash<S> for Path {\n     #[inline]\n     fn hash(&self, state: &mut S) {"}, {"sha": "e4bead6d8ab8ff3e775a62d1deed779e472ea680", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd9dda7a1c87170fe241345f6da88874921ec433/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9dda7a1c87170fe241345f6da88874921ec433/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=dd9dda7a1c87170fe241345f6da88874921ec433", "patch": "@@ -130,18 +130,6 @@ impl ToCStr for Path {\n     }\n }\n \n-impl<'a> ToCStr for &'a Path {\n-    #[inline]\n-    fn to_c_str(&self) -> CString {\n-        (*self).to_c_str()\n-    }\n-\n-    #[inline]\n-    unsafe fn to_c_str_unchecked(&self) -> CString {\n-        (*self).to_c_str_unchecked()\n-    }\n-}\n-\n impl<S: hash::Writer> hash::Hash<S> for Path {\n     #[cfg(not(test))]\n     #[inline]"}]}