{"sha": "8b36867093fb774bcbd9f787cbc470a5f44c1310", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMzY4NjcwOTNmYjc3NGJjYmQ5Zjc4N2NiYzQ3MGE1ZjQ0YzEzMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-06T12:13:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-06T12:13:54Z"}, "message": "Auto merge of #61583 - Centril:rollup-ug2cbfd, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #61556 (librustc_errors: Rename AnnotateRs -> AnnotateSnippet)\n - #61557 (rustbuild: Include `rustfmt` in deduplicated dependencies)\n - #61571 (Escape HashMap with backticks in needs_drop docs)\n - #61582 (submodules: update clippy from 20da8f45 to 71be6f62)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9f022f65d4d0496722d8c7a80c0ee7a5d15f1a56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f022f65d4d0496722d8c7a80c0ee7a5d15f1a56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b36867093fb774bcbd9f787cbc470a5f44c1310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b36867093fb774bcbd9f787cbc470a5f44c1310", "html_url": "https://github.com/rust-lang/rust/commit/8b36867093fb774bcbd9f787cbc470a5f44c1310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b36867093fb774bcbd9f787cbc470a5f44c1310/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51dc52b9fe432a87ebbd5347fb64c1d9edc06b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/51dc52b9fe432a87ebbd5347fb64c1d9edc06b3e", "html_url": "https://github.com/rust-lang/rust/commit/51dc52b9fe432a87ebbd5347fb64c1d9edc06b3e"}, {"sha": "97a2acd0a02790fddf9955b9723d3551846778c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a2acd0a02790fddf9955b9723d3551846778c8", "html_url": "https://github.com/rust-lang/rust/commit/97a2acd0a02790fddf9955b9723d3551846778c8"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "83a897f1ab74f1373a0cdc4e5459e0a789bdf30e", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -84,6 +84,7 @@ impl Step for ToolBuild {\n                 | \"cargo\"\n                 | \"clippy-driver\"\n                 | \"miri\"\n+                | \"rustfmt\"\n                 => {}\n \n                 _ => return,"}, {"sha": "b43ba6ac34032da01596a867240bcded1d5b2f19", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -374,13 +374,13 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// will do a single needs_drop check for all the values.\n ///\n /// Types like Vec therefore just `drop_in_place(&mut self[..])` without using\n-/// needs_drop explicitly. Types like HashMap, on the other hand, have to drop\n+/// needs_drop explicitly. Types like `HashMap`, on the other hand, have to drop\n /// values one at a time and should use this API.\n ///\n ///\n /// # Examples\n ///\n-/// Here's an example of how a collection might make use of needs_drop:\n+/// Here's an example of how a collection might make use of `needs_drop`:\n ///\n /// ```\n /// use std::{mem, ptr};"}, {"sha": "003fdd501a35ab55e5fc04b54f1717b363e3cb46", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -2003,7 +2003,7 @@ pub fn build_session_options_and_crate_config(\n             None |\n             Some(\"human\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n             Some(\"human-annotate-rs\") => {\n-                ErrorOutputType::HumanReadable(HumanReadableErrorType::AnnotateRs(color))\n+                ErrorOutputType::HumanReadable(HumanReadableErrorType::AnnotateSnippet(color))\n             },\n             Some(\"json\") => ErrorOutputType::Json { pretty: false, json_rendered },\n             Some(\"pretty-json\") => ErrorOutputType::Json { pretty: true, json_rendered },\n@@ -2041,7 +2041,7 @@ pub fn build_session_options_and_crate_config(\n                 \"--error-format=pretty-json is unstable\",\n             );\n         }\n-        if let ErrorOutputType::HumanReadable(HumanReadableErrorType::AnnotateRs(_)) =\n+        if let ErrorOutputType::HumanReadable(HumanReadableErrorType::AnnotateSnippet(_)) =\n             error_format {\n             early_error(\n                 ErrorOutputType::Json { pretty: false, json_rendered },"}, {"sha": "d04b9ac083ce5b18d9f14c0b6d349e0c5c5ada81", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -24,7 +24,7 @@ use rustc_data_structures::sync::{\n use errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n-use errors::annotate_rs_emitter::{AnnotateRsEmitterWriter};\n+use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::ast::{self, NodeId};\n use syntax::edition::Edition;\n use syntax::feature_gate::{self, AttributeType};\n@@ -1034,8 +1034,8 @@ fn default_emitter(\n         (config::ErrorOutputType::HumanReadable(kind), dst) => {\n             let (short, color_config) = kind.unzip();\n \n-            if let HumanReadableErrorType::AnnotateRs(_) = kind {\n-                let emitter = AnnotateRsEmitterWriter::new(\n+            if let HumanReadableErrorType::AnnotateSnippet(_) = kind {\n+                let emitter = AnnotateSnippetEmitterWriter::new(\n                     Some(source_map.clone()),\n                     short,\n                 );"}, {"sha": "9f9c7588d977ba0447d9a50055b79a7cd06208a9", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -1,9 +1,9 @@\n-/// Emit diagnostics using the `annotate-snippets` library\n-///\n-/// This is the equivalent of `./emitter.rs` but making use of the\n-/// [`annotate-snippets`][annotate_snippets] library instead of building the output ourselves.\n-///\n-/// [annotate_snippets]: https://docs.rs/crate/annotate-snippets/\n+//! Emit diagnostics using the `annotate-snippets` library\n+//!\n+//! This is the equivalent of `./emitter.rs` but making use of the\n+//! [`annotate-snippets`][annotate_snippets] library instead of building the output ourselves.\n+//!\n+//! [annotate_snippets]: https://docs.rs/crate/annotate-snippets/\n \n use syntax_pos::{SourceFile, MultiSpan, Loc};\n use crate::{\n@@ -18,16 +18,16 @@ use annotate_snippets::display_list::DisplayList;\n use annotate_snippets::formatter::DisplayListFormatter;\n \n \n-/// Generates diagnostics using annotate-rs\n-pub struct AnnotateRsEmitterWriter {\n+/// Generates diagnostics using annotate-snippet\n+pub struct AnnotateSnippetEmitterWriter {\n     source_map: Option<Lrc<SourceMapperDyn>>,\n     /// If true, hides the longer explanation text\n     short_message: bool,\n     /// If true, will normalize line numbers with LL to prevent noise in UI test diffs.\n     ui_testing: bool,\n }\n \n-impl Emitter for AnnotateRsEmitterWriter {\n+impl Emitter for AnnotateSnippetEmitterWriter {\n     /// The entry point for the diagnostics generation\n     fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n         let primary_span = db.span.clone();\n@@ -158,7 +158,7 @@ impl<'a>  DiagnosticConverter<'a> {\n     }\n }\n \n-impl AnnotateRsEmitterWriter {\n+impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n         source_map: Option<Lrc<SourceMapperDyn>>,\n         short_message: bool", "previous_filename": "src/librustc_errors/annotate_rs_emitter.rs"}, {"sha": "3bf477efe35f91f05eb08e4bedb02ba8cb596ed9", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -24,7 +24,7 @@ use termcolor::{WriteColor, Color, Buffer};\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum HumanReadableErrorType {\n     Default(ColorConfig),\n-    AnnotateRs(ColorConfig),\n+    AnnotateSnippet(ColorConfig),\n     Short(ColorConfig),\n }\n \n@@ -34,7 +34,7 @@ impl HumanReadableErrorType {\n         match self {\n             HumanReadableErrorType::Default(cc) => (false, cc),\n             HumanReadableErrorType::Short(cc) => (true, cc),\n-            HumanReadableErrorType::AnnotateRs(cc) => (false, cc),\n+            HumanReadableErrorType::AnnotateSnippet(cc) => (false, cc),\n         }\n     }\n     pub fn new_emitter("}, {"sha": "1831d58e736071561604afc393e92d29954331b9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -33,7 +33,7 @@ use termcolor::{ColorSpec, Color};\n mod diagnostic;\n mod diagnostic_builder;\n pub mod emitter;\n-pub mod annotate_rs_emitter;\n+pub mod annotate_snippet_emitter_writer;\n mod snippet;\n pub mod registry;\n mod styled_buffer;"}, {"sha": "71be6f62fa920c0bd10cdf3a29aeb8c6719a8075", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -1 +1 @@\n-Subproject commit 20da8f45c601d0eec8af8c0897abd536ad57951f\n+Subproject commit 71be6f62fa920c0bd10cdf3a29aeb8c6719a8075"}, {"sha": "747200611224e74bb22a1fc4037be2c10dcc33e0", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8b36867093fb774bcbd9f787cbc470a5f44c1310/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=8b36867093fb774bcbd9f787cbc470a5f44c1310", "patch": "@@ -26,19 +26,22 @@ features = [\n   \"basetsd\",\n   \"consoleapi\",\n   \"errhandlingapi\",\n+  \"ioapiset\",\n   \"jobapi\",\n   \"jobapi2\",\n   \"knownfolders\",\n   \"lmcons\",\n   \"memoryapi\",\n   \"minschannel\",\n   \"minwinbase\",\n+  \"namedpipeapi\",\n+  \"ntdef\",\n   \"ntsecapi\",\n   \"ntstatus\",\n   \"objbase\",\n-  \"profileapi\",\n   \"processenv\",\n   \"processthreadsapi\",\n+  \"profileapi\",\n   \"psapi\",\n   \"schannel\",\n   \"securitybaseapi\",\n@@ -53,6 +56,10 @@ features = [\n   \"winbase\",\n   \"wincon\",\n   \"wincrypt\",\n+  \"winsock2\",\n+  \"ws2def\",\n+  \"ws2ipdef\",\n+  \"ws2tcpip\",\n ]\n \n [dependencies]"}]}