{"sha": "d4ad1cfc63ba5824196bfb2370451ddb5af2e020", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YWQxY2ZjNjNiYTU4MjQxOTZiZmIyMzcwNDUxZGRiNWFmMmUwMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-05T00:11:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-05T00:11:05Z"}, "message": "Auto merge of #87641 - HackAttack:expand-unknown-option-message, r=wesleywiser\n\nAllow more \"unknown argument\" strings from linker\n\nSome toolchains emit slightly different errors, e.g.\n\n    ppc-vle-gcc: error: unrecognized option '-no-pie'", "tree": {"sha": "18826c94b75bca701875c6690eb1ab654611fb33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18826c94b75bca701875c6690eb1ab654611fb33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ad1cfc63ba5824196bfb2370451ddb5af2e020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ad1cfc63ba5824196bfb2370451ddb5af2e020", "html_url": "https://github.com/rust-lang/rust/commit/d4ad1cfc63ba5824196bfb2370451ddb5af2e020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ad1cfc63ba5824196bfb2370451ddb5af2e020/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25b764849625cb090e8b81d12d2bb2295d073788", "url": "https://api.github.com/repos/rust-lang/rust/commits/25b764849625cb090e8b81d12d2bb2295d073788", "html_url": "https://github.com/rust-lang/rust/commit/25b764849625cb090e8b81d12d2bb2295d073788"}, {"sha": "32992357eb4564b8f1a044cee06dcb13d0531080", "url": "https://api.github.com/repos/rust-lang/rust/commits/32992357eb4564b8f1a044cee06dcb13d0531080", "html_url": "https://github.com/rust-lang/rust/commit/32992357eb4564b8f1a044cee06dcb13d0531080"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "76a71d8994dfa9c3fcac936c6986a368e1ce87ce", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4ad1cfc63ba5824196bfb2370451ddb5af2e020/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d4ad1cfc63ba5824196bfb2370451ddb5af2e020/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d4ad1cfc63ba5824196bfb2370451ddb5af2e020", "patch": "@@ -3649,6 +3649,7 @@ dependencies = [\n  \"libc\",\n  \"object 0.25.2\",\n  \"pathdiff\",\n+ \"regex\",\n  \"rustc_apfloat\",\n  \"rustc_ast\",\n  \"rustc_attr\","}, {"sha": "0e036a432ad399d99401926d74369ff840536d62", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4ad1cfc63ba5824196bfb2370451ddb5af2e020/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d4ad1cfc63ba5824196bfb2370451ddb5af2e020/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=d4ad1cfc63ba5824196bfb2370451ddb5af2e020", "patch": "@@ -16,6 +16,7 @@ jobserver = \"0.1.22\"\n tempfile = \"3.2\"\n pathdiff = \"0.2.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+regex = \"1.4\"\n \n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "f3eb1e04d07dcb0d594c681bc9f25ccdc0252aca", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4ad1cfc63ba5824196bfb2370451ddb5af2e020/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ad1cfc63ba5824196bfb2370451ddb5af2e020/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=d4ad1cfc63ba5824196bfb2370451ddb5af2e020", "patch": "@@ -32,6 +32,7 @@ use cc::windows_registry;\n use object::elf;\n use object::write::Object;\n use object::{Architecture, BinaryFormat, Endianness, FileFlags, SectionFlags, SectionKind};\n+use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n use std::ffi::OsString;\n@@ -672,6 +673,8 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     // Invoke the system linker\n     info!(\"{:?}\", &cmd);\n     let retry_on_segfault = env::var(\"RUSTC_RETRY_LINKER_ON_SEGFAULT\").is_ok();\n+    let unknown_arg_regex =\n+        Regex::new(r\"(unknown|unrecognized) (command line )?(option|argument)\").unwrap();\n     let mut prog;\n     let mut i = 0;\n     loop {\n@@ -688,16 +691,15 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         out.extend(&output.stdout);\n         let out = String::from_utf8_lossy(&out);\n \n-        // Check to see if the link failed with \"unrecognized command line option:\n-        // '-no-pie'\" for gcc or \"unknown argument: '-no-pie'\" for clang. If so,\n-        // reperform the link step without the -no-pie option. This is safe because\n-        // if the linker doesn't support -no-pie then it should not default to\n-        // linking executables as pie. Different versions of gcc seem to use\n-        // different quotes in the error message so don't check for them.\n+        // Check to see if the link failed with an error message that indicates it\n+        // doesn't recognize the -no-pie option. If so, reperform the link step\n+        // without it. This is safe because if the linker doesn't support -no-pie\n+        // then it should not default to linking executables as pie. Different\n+        // versions of gcc seem to use different quotes in the error message so\n+        // don't check for them.\n         if sess.target.linker_is_gnu\n             && flavor != LinkerFlavor::Ld\n-            && (out.contains(\"unrecognized command line option\")\n-                || out.contains(\"unknown argument\"))\n+            && unknown_arg_regex.is_match(&out)\n             && out.contains(\"-no-pie\")\n             && cmd.get_args().iter().any(|e| e.to_string_lossy() == \"-no-pie\")\n         {\n@@ -716,8 +718,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         // Fallback from '-static-pie' to '-static' in that case.\n         if sess.target.linker_is_gnu\n             && flavor != LinkerFlavor::Ld\n-            && (out.contains(\"unrecognized command line option\")\n-                || out.contains(\"unknown argument\"))\n+            && unknown_arg_regex.is_match(&out)\n             && (out.contains(\"-static-pie\") || out.contains(\"--no-dynamic-linker\"))\n             && cmd.get_args().iter().any(|e| e.to_string_lossy() == \"-static-pie\")\n         {"}]}