{"sha": "ad5bbf01c0106c9606ae7050b007e283899fdcd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNWJiZjAxYzAxMDZjOTYwNmFlNzA1MGIwMDdlMjgzODk5ZmRjZDY=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2019-03-28T01:15:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T01:15:27Z"}, "message": "Rollup merge of #59284 - RalfJung:maybe-uninit, r=sfackler\n\nadjust MaybeUninit API to discussions\n\nuninitialized -> uninit\ninto_initialized -> assume_init\nread_initialized -> read\nset -> write", "tree": {"sha": "37c597bfd26371e8f14825fe6d30b296be6bc087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c597bfd26371e8f14825fe6d30b296be6bc087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad5bbf01c0106c9606ae7050b007e283899fdcd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnCAvCRBK7hj4Ov3rIwAAdHIIAKicjD41RqXnGqeqP69S6PY6\nyGKq6wDBW64WUayUhvqBXKPcdqI0ik//q8VTTgJSLBdA1bxNrIbc8jFyGQyUJbJ2\nLYeEpWb2FSOGzf9EvnBr6P4rfMVtsREXTrPherCvH7sxGwxj7BhNibjcB0sNzqzp\nuslS4CZM1bYIRaOpO11lvLYWyxyppZfmFnyV9T46MMQ3iIGlwZ4ebhlZ/3u4Q9bm\nZAZhPwidAW9FbP5f2/907cxjmuaR+/w1v2wnO7C/ooAfMpUIInwt+1mADIJSLyAs\nNCan6TkmnmPauiQmEHIH6lLuu0wT5mM8s/tJGHDgY/Hxce9WZKVHQ/nME0xnmAQ=\n=y4Hb\n-----END PGP SIGNATURE-----\n", "payload": "tree 37c597bfd26371e8f14825fe6d30b296be6bc087\nparent c70cdc0ed487e5b24195ceedd65b458381c2b5c7\nparent 853ae8d931c3fe4cd303edf7d80271c1930b9654\nauthor Josh Stone <cuviper@gmail.com> 1553735727 -0700\ncommitter GitHub <noreply@github.com> 1553735727 -0700\n\nRollup merge of #59284 - RalfJung:maybe-uninit, r=sfackler\n\nadjust MaybeUninit API to discussions\n\nuninitialized -> uninit\ninto_initialized -> assume_init\nread_initialized -> read\nset -> write\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5bbf01c0106c9606ae7050b007e283899fdcd6", "html_url": "https://github.com/rust-lang/rust/commit/ad5bbf01c0106c9606ae7050b007e283899fdcd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad5bbf01c0106c9606ae7050b007e283899fdcd6/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c70cdc0ed487e5b24195ceedd65b458381c2b5c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70cdc0ed487e5b24195ceedd65b458381c2b5c7", "html_url": "https://github.com/rust-lang/rust/commit/c70cdc0ed487e5b24195ceedd65b458381c2b5c7"}, {"sha": "853ae8d931c3fe4cd303edf7d80271c1930b9654", "url": "https://api.github.com/repos/rust-lang/rust/commits/853ae8d931c3fe4cd303edf7d80271c1930b9654", "html_url": "https://github.com/rust-lang/rust/commit/853ae8d931c3fe4cd303edf7d80271c1930b9654"}], "stats": {"total": 183, "additions": 110, "deletions": 73}, "files": [{"sha": "581c66c7086a5b9f0270e3aee54e80e757bda764", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -109,7 +109,7 @@ impl<K, V> LeafNode<K, V> {\n             keys: uninitialized_array![_; CAPACITY],\n             vals: uninitialized_array![_; CAPACITY],\n             parent: ptr::null(),\n-            parent_idx: MaybeUninit::uninitialized(),\n+            parent_idx: MaybeUninit::uninit(),\n             len: 0\n         }\n     }\n@@ -129,7 +129,7 @@ unsafe impl Sync for NodeHeader<(), ()> {}\n // ever take a pointer past the first key.\n static EMPTY_ROOT_NODE: NodeHeader<(), ()> = NodeHeader {\n     parent: ptr::null(),\n-    parent_idx: MaybeUninit::uninitialized(),\n+    parent_idx: MaybeUninit::uninit(),\n     len: 0,\n     keys_start: [],\n };\n@@ -261,7 +261,7 @@ impl<K, V> Root<K, V> {\n             -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n         debug_assert!(!self.is_shared_root());\n         let mut new_node = Box::new(unsafe { InternalNode::new() });\n-        new_node.edges[0].set(unsafe { BoxedNode::from_ptr(self.node.as_ptr()) });\n+        new_node.edges[0].write(unsafe { BoxedNode::from_ptr(self.node.as_ptr()) });\n \n         self.node = BoxedNode::from_internal(new_node);\n         self.height += 1;\n@@ -737,7 +737,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n         unsafe {\n             ptr::write(self.keys_mut().get_unchecked_mut(idx), key);\n             ptr::write(self.vals_mut().get_unchecked_mut(idx), val);\n-            self.as_internal_mut().edges.get_unchecked_mut(idx + 1).set(edge.node);\n+            self.as_internal_mut().edges.get_unchecked_mut(idx + 1).write(edge.node);\n \n             (*self.as_leaf_mut()).len += 1;\n \n@@ -1080,7 +1080,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         let mut child = self.descend();\n         unsafe {\n             (*child.as_leaf_mut()).parent = ptr;\n-            (*child.as_leaf_mut()).parent_idx.set(idx);\n+            (*child.as_leaf_mut()).parent_idx.write(idx);\n         }\n     }\n "}, {"sha": "5f4c6f7b0a3f0a300bef7810bfc28b544e0e17b1", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -10,8 +10,8 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n-        let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninit();\n         // FIXME(#53491): Technically, this is calling `get_mut` on an uninitialized\n         // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n         // we decided whether that is valid or not.\n@@ -32,8 +32,8 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n {\n     unsafe {\n         // enough for f32 and f64\n-        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num,\n                                                  sign, precision, false, buf.get_mut(),\n@@ -71,8 +71,8 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n-        let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n                                                   *num, sign, precision,\n@@ -91,8 +91,8 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n {\n     unsafe {\n         // enough for f32 and f64\n-        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n                                                      *num, sign, (0, 0), upper,"}, {"sha": "e96dbcaa14416b984f1d32323f4b81bdb7f09d33", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -60,7 +60,7 @@ trait GenericRadix {\n             for byte in buf.iter_mut().rev() {\n                 let n = x % base;               // Get the current place value.\n                 x = x / base;                   // Deaccumulate the number.\n-                byte.set(Self::digit(n.to_u8())); // Store the digit in the buffer.\n+                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n@@ -72,7 +72,7 @@ trait GenericRadix {\n             for byte in buf.iter_mut().rev() {\n                 let n = zero - (x % base);      // Get the current place value.\n                 x = x / base;                   // Deaccumulate the number.\n-                byte.set(Self::digit(n.to_u8())); // Store the digit in the buffer.\n+                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate."}, {"sha": "ad8ce1af1f6a11830a193b32f9c6eeb9ab95c43e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -626,12 +626,12 @@ macro_rules! todo {\n #[macro_export]\n #[unstable(feature = \"maybe_uninit_array\", issue = \"53491\")]\n macro_rules! uninitialized_array {\n-    // This `into_initialized` is safe because an array of `MaybeUninit` does not\n+    // This `assume_init` is safe because an array of `MaybeUninit` does not\n     // require initialization.\n     // FIXME(#49147): Could be replaced by an array initializer, once those can\n     // be any const expression.\n     ($t:ty; $size:expr) => (unsafe {\n-        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninitialized().into_initialized()\n+        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninit().assume_init()\n     });\n }\n "}, {"sha": "66bcf1f7d0101c867d02e5b5cb56b526915062cc", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 72, "deletions": 38, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -622,7 +622,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// [copy_no]: ../intrinsics/fn.copy_nonoverlapping.html\n /// [`Drop`]: ../ops/trait.Drop.html\n #[inline]\n-#[rustc_deprecated(since = \"2.0.0\", reason = \"use `mem::MaybeUninit::uninitialized` instead\")]\n+#[rustc_deprecated(since = \"2.0.0\", reason = \"use `mem::MaybeUninit::uninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn uninitialized<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();\n@@ -1058,7 +1058,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n ///\n /// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior!\n /// // The equivalent code with `MaybeUninit<&i32>`:\n-/// let x: &i32 = unsafe { MaybeUninit::zeroed().into_initialized() }; // undefined behavior!\n+/// let x: &i32 = unsafe { MaybeUninit::zeroed().assume_init() }; // undefined behavior!\n /// ```\n ///\n /// This is exploited by the compiler for various optimizations, such as eliding\n@@ -1073,7 +1073,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n ///\n /// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior!\n /// // The equivalent code with `MaybeUninit<bool>`:\n-/// let b: bool = unsafe { MaybeUninit::uninitialized().into_initialized() }; // undefined behavior!\n+/// let b: bool = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior!\n /// ```\n ///\n /// Moreover, uninitialized memory is special in that the compiler knows that\n@@ -1087,7 +1087,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n ///\n /// let x: i32 = unsafe { mem::uninitialized() }; // undefined behavior!\n /// // The equivalent code with `MaybeUninit<i32>`:\n-/// let x: i32 = unsafe { MaybeUninit::uninitialized().into_initialized() }; // undefined behavior!\n+/// let x: i32 = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior!\n /// ```\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n@@ -1102,12 +1102,12 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n ///\n /// // Create an explicitly uninitialized reference. The compiler knows that data inside\n /// // a `MaybeUninit<T>` may be invalid, and hence this is not UB:\n-/// let mut x = MaybeUninit::<&i32>::uninitialized();\n+/// let mut x = MaybeUninit::<&i32>::uninit();\n /// // Set it to a valid value.\n-/// x.set(&0);\n+/// x.write(&0);\n /// // Extract the initialized data -- this is only allowed *after* properly\n /// // initializing `x`!\n-/// let x = unsafe { x.into_initialized() };\n+/// let x = unsafe { x.assume_init() };\n /// ```\n ///\n /// The compiler then knows to not make any incorrect assumptions or optimizations on this code.\n@@ -1148,10 +1148,19 @@ impl<T> MaybeUninit<T> {\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub const fn uninitialized() -> MaybeUninit<T> {\n+    pub const fn uninit() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n \n+    /// Deprecated before stabilization.\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    // FIXME: still used by stdsimd\n+    // #[rustc_deprecated(since = \"1.35.0\", reason = \"use `uninit` instead\")]\n+    pub const fn uninitialized() -> MaybeUninit<T> {\n+        Self::uninit()\n+    }\n+\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,\n@@ -1171,7 +1180,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let x = MaybeUninit::<(u8, bool)>::zeroed();\n-    /// let x = unsafe { x.into_initialized() };\n+    /// let x = unsafe { x.assume_init() };\n     /// assert_eq!(x, (0, false));\n     /// ```\n     ///\n@@ -1185,14 +1194,14 @@ impl<T> MaybeUninit<T> {\n     /// enum NotZero { One = 1, Two = 2 };\n     ///\n     /// let x = MaybeUninit::<(u8, NotZero)>::zeroed();\n-    /// let x = unsafe { x.into_initialized() };\n+    /// let x = unsafe { x.assume_init() };\n     /// // Inside a pair, we create a `NotZero` that does not have a valid discriminant.\n     /// // This is undefined behavior.\n     /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline]\n     pub fn zeroed() -> MaybeUninit<T> {\n-        let mut u = MaybeUninit::<T>::uninitialized();\n+        let mut u = MaybeUninit::<T>::uninit();\n         unsafe {\n             u.as_mut_ptr().write_bytes(0u8, 1);\n         }\n@@ -1205,13 +1214,21 @@ impl<T> MaybeUninit<T> {\n     /// reference to the (now safely initialized) contents of `self`.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub fn set(&mut self, val: T) -> &mut T {\n+    pub fn write(&mut self, val: T) -> &mut T {\n         unsafe {\n             self.value = ManuallyDrop::new(val);\n             self.get_mut()\n         }\n     }\n \n+    /// Deprecated before stabilization.\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    #[rustc_deprecated(since = \"1.35.0\", reason = \"use `write` instead\")]\n+    pub fn set(&mut self, val: T) -> &mut T {\n+        self.write(val)\n+    }\n+\n     /// Gets a pointer to the contained value. Reading from this pointer or turning it\n     /// into a reference is undefined behavior unless the `MaybeUninit<T>` is initialized.\n     ///\n@@ -1223,7 +1240,7 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n     /// unsafe { x.as_mut_ptr().write(vec![0,1,2]); }\n     /// // Create a reference into the `MaybeUninit<T>`. This is okay because we initialized it.\n     /// let x_vec = unsafe { &*x.as_ptr() };\n@@ -1236,7 +1253,7 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec = unsafe { &*x.as_ptr() };\n     /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n     /// ```\n@@ -1260,7 +1277,7 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n     /// unsafe { x.as_mut_ptr().write(vec![0,1,2]); }\n     /// // Create a reference into the `MaybeUninit<Vec<u32>>`.\n     /// // This is okay because we initialized it.\n@@ -1275,7 +1292,7 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n     /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n     /// ```\n@@ -1306,9 +1323,9 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let mut x = MaybeUninit::<bool>::uninitialized();\n+    /// let mut x = MaybeUninit::<bool>::uninit();\n     /// unsafe { x.as_mut_ptr().write(true); }\n-    /// let x_init = unsafe { x.into_initialized() };\n+    /// let x_init = unsafe { x.assume_init() };\n     /// assert_eq!(x_init, true);\n     /// ```\n     ///\n@@ -1318,21 +1335,30 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let x = MaybeUninit::<Vec<u32>>::uninitialized();\n-    /// let x_init = unsafe { x.into_initialized() };\n+    /// let x = MaybeUninit::<Vec<u32>>::uninit();\n+    /// let x_init = unsafe { x.assume_init() };\n     /// // `x` had not been initialized yet, so this last line caused undefined behavior.\n     /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub unsafe fn into_initialized(self) -> T {\n+    pub unsafe fn assume_init(self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n         ManuallyDrop::into_inner(self.value)\n     }\n \n+    /// Deprecated before stabilization.\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    // FIXME: still used by stdsimd\n+    // #[rustc_deprecated(since = \"1.35.0\", reason = \"use `assume_init` instead\")]\n+    pub unsafe fn into_initialized(self) -> T {\n+        self.assume_init()\n+    }\n+\n     /// Reads the value from the `MaybeUninit<T>` container. The resulting `T` is subject\n     /// to the usual drop handling.\n     ///\n-    /// Whenever possible, it is preferrable to use [`into_initialized`] instead, which\n+    /// Whenever possible, it is preferrable to use [`assume_init`] instead, which\n     /// prevents duplicating the content of the `MaybeUninit<T>`.\n     ///\n     /// # Safety\n@@ -1342,11 +1368,11 @@ impl<T> MaybeUninit<T> {\n     /// behavior.\n     ///\n     /// Moreover, this leaves a copy of the same data behind in the `MaybeUninit<T>`. When using\n-    /// multiple copies of the data (by calling `read_initialized` multiple times, or first\n-    /// calling `read_initialized` and then [`into_initialized`]), it is your responsibility\n+    /// multiple copies of the data (by calling `read` multiple times, or first\n+    /// calling `read` and then [`assume_init`]), it is your responsibility\n     /// to ensure that that data may indeed be duplicated.\n     ///\n-    /// [`into_initialized`]: #method.into_initialized\n+    /// [`assume_init`]: #method.assume_init\n     ///\n     /// # Examples\n     ///\n@@ -1356,18 +1382,18 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let mut x = MaybeUninit::<u32>::uninitialized();\n-    /// x.set(13);\n-    /// let x1 = unsafe { x.read_initialized() };\n+    /// let mut x = MaybeUninit::<u32>::uninit();\n+    /// x.write(13);\n+    /// let x1 = unsafe { x.read() };\n     /// // `u32` is `Copy`, so we may read multiple times.\n-    /// let x2 = unsafe { x.read_initialized() };\n+    /// let x2 = unsafe { x.read() };\n     /// assert_eq!(x1, x2);\n     ///\n-    /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninitialized();\n-    /// x.set(None);\n-    /// let x1 = unsafe { x.read_initialized() };\n+    /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninit();\n+    /// x.write(None);\n+    /// let x1 = unsafe { x.read() };\n     /// // Duplicating a `None` value is okay, so we may read multiple times.\n-    /// let x2 = unsafe { x.read_initialized() };\n+    /// let x2 = unsafe { x.read() };\n     /// assert_eq!(x1, x2);\n     /// ```\n     ///\n@@ -1377,20 +1403,28 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninitialized();\n-    /// x.set(Some(vec![0,1,2]));\n-    /// let x1 = unsafe { x.read_initialized() };\n-    /// let x2 = unsafe { x.read_initialized() };\n+    /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninit();\n+    /// x.write(Some(vec![0,1,2]));\n+    /// let x1 = unsafe { x.read() };\n+    /// let x2 = unsafe { x.read() };\n     /// // We now created two copies of the same vector, leading to a double-free when\n     /// // they both get dropped!\n     /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub unsafe fn read_initialized(&self) -> T {\n+    pub unsafe fn read(&self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n         self.as_ptr().read()\n     }\n \n+    /// Deprecated before stabilization.\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    #[rustc_deprecated(since = \"1.35.0\", reason = \"use `read` instead\")]\n+    pub unsafe fn read_initialized(&self) -> T {\n+        self.read()\n+    }\n+\n     /// Gets a reference to the contained value.\n     ///\n     /// # Safety"}, {"sha": "c29da758b3454ea960ea03c7e8681e7b4aaa35a9", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -296,7 +296,7 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     // Give ourselves some scratch space to work with.\n     // We do not have to worry about drops: `MaybeUninit` does nothing when dropped.\n-    let mut tmp = MaybeUninit::<T>::uninitialized();\n+    let mut tmp = MaybeUninit::<T>::uninit();\n \n     // Perform the swap\n     copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);\n@@ -388,7 +388,7 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     while i + block_size <= len {\n         // Create some uninitialized memory as scratch space\n         // Declaring `t` here avoids aligning the stack when this loop is unused\n-        let mut t = mem::MaybeUninit::<Block>::uninitialized();\n+        let mut t = mem::MaybeUninit::<Block>::uninit();\n         let t = t.as_mut_ptr() as *mut u8;\n         let x = x.add(i);\n         let y = y.add(i);\n@@ -403,7 +403,7 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n \n     if i < len {\n         // Swap any remaining bytes\n-        let mut t = mem::MaybeUninit::<UnalignedBlock>::uninitialized();\n+        let mut t = mem::MaybeUninit::<UnalignedBlock>::uninit();\n         let rem = len - i;\n \n         let t = t.as_mut_ptr() as *mut u8;\n@@ -571,9 +571,9 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n-    let mut tmp = MaybeUninit::<T>::uninitialized();\n+    let mut tmp = MaybeUninit::<T>::uninit();\n     copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-    tmp.into_initialized()\n+    tmp.assume_init()\n }\n \n /// Reads the value from `src` without moving it. This leaves the\n@@ -638,11 +638,11 @@ pub unsafe fn read<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n-    let mut tmp = MaybeUninit::<T>::uninitialized();\n+    let mut tmp = MaybeUninit::<T>::uninit();\n     copy_nonoverlapping(src as *const u8,\n                         tmp.as_mut_ptr() as *mut u8,\n                         mem::size_of::<T>());\n-    tmp.into_initialized()\n+    tmp.assume_init()\n }\n \n /// Overwrites a memory location with the given value without reading or"}, {"sha": "8f10c3576a787b45bd4ca9a0af4f1468fc301fcc", "filename": "src/libcore/slice/rotate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibcore%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Frotate.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -72,7 +72,7 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mid: *mut T, mut right: usize) {\n         }\n     }\n \n-    let mut rawarray = MaybeUninit::<RawArray<T>>::uninitialized();\n+    let mut rawarray = MaybeUninit::<RawArray<T>>::uninit();\n     let buf = &mut (*rawarray.as_mut_ptr()).typed as *mut [T; 2] as *mut T;\n \n     let dim = mid.sub(left).add(right);"}, {"sha": "5056e388112cedade9af31eb9f1bfd266019ff78", "filename": "src/libstd/sys/sgx/ext/arch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -28,7 +28,7 @@ const ENCLU_EGETKEY: u32 = 1;\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32> {\n     unsafe {\n-        let mut out = MaybeUninit::uninitialized();\n+        let mut out = MaybeUninit::uninit();\n         let error;\n \n         asm!(\n@@ -41,7 +41,7 @@ pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>\n         );\n \n         match error {\n-            0 => Ok(out.into_initialized()),\n+            0 => Ok(out.assume_init()),\n             err => Err(err),\n         }\n     }\n@@ -58,7 +58,7 @@ pub fn ereport(\n     reportdata: &Align128<[u8; 64]>,\n ) -> Align512<[u8; 432]> {\n     unsafe {\n-        let mut report = MaybeUninit::uninitialized();\n+        let mut report = MaybeUninit::uninit();\n \n         asm!(\n             \"enclu\"\n@@ -69,6 +69,6 @@ pub fn ereport(\n               \"{rdx}\"(report.as_mut_ptr())\n         );\n \n-        report.into_initialized()\n+        report.assume_init()\n     }\n }"}, {"sha": "7e2d13b9e24765865c2c5d8fe8eb99bb5839829d", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -280,7 +280,7 @@ mod tests {\n             let mut init = MaybeUninit::<RWLock>::zeroed();\n             rwlock_new(&mut init);\n             assert_eq!(\n-                mem::transmute::<_, [u8; 128]>(init.into_initialized()).as_slice(),\n+                mem::transmute::<_, [u8; 128]>(init.assume_init()).as_slice(),\n                 RWLOCK_INIT\n             )\n         };"}, {"sha": "37cbdcefcedcc6777eebdaa55026d9d5d9f5dc13", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -154,7 +154,7 @@ unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n     pub fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { inner: UnsafeCell::new(MaybeUninit::uninitialized()) }\n+        ReentrantMutex { inner: UnsafeCell::new(MaybeUninit::uninit()) }\n     }\n \n     pub unsafe fn init(&mut self) {"}, {"sha": "0dd67bb95ccaa5d500d2ef6157eedbfc933985d9", "filename": "src/test/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -12,5 +12,8 @@ pub fn box_uninitialized() -> Box<MaybeUninit<usize>> {\n     // CHECK-NOT: alloca\n     // CHECK-NOT: memcpy\n     // CHECK-NOT: memset\n-    Box::new(MaybeUninit::uninitialized())\n+    Box::new(MaybeUninit::uninit())\n }\n+\n+// FIXME: add a test for a bigger box. Currently broken, see\n+// https://github.com/rust-lang/rust/issues/58201."}, {"sha": "3f6e489bb83275f6f7b7bbee03806579e91ea459", "filename": "src/test/run-pass/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5bbf01c0106c9606ae7050b007e283899fdcd6/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs?ref=ad5bbf01c0106c9606ae7050b007e283899fdcd6", "patch": "@@ -36,7 +36,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<!>::uninitialized().into_initialized()\n+                mem::MaybeUninit::<!>::uninit().assume_init()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type !\"\n             })),\n@@ -63,7 +63,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Foo>::uninitialized().into_initialized()\n+                mem::MaybeUninit::<Foo>::uninit().assume_init()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type Foo\"\n             })),\n@@ -90,7 +90,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Bar>::uninitialized().into_initialized()\n+                mem::MaybeUninit::<Bar>::uninit().assume_init()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type Bar\"\n             })),"}]}