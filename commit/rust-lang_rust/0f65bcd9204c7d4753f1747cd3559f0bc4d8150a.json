{"sha": "0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "node_id": "C_kwDOAAsO6NoAKDBmNjViY2Q5MjA0YzdkNDc1M2YxNzQ3Y2QzNTU5ZjBiYzRkODE1MGE", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-13T11:08:58Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-05-24T19:53:37Z"}, "message": "Modify MIR building to drop `foo` in `[foo; 0]`", "tree": {"sha": "c88460c22389883bdb508ab751b066acde2ff45c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c88460c22389883bdb508ab751b066acde2ff45c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "html_url": "https://github.com/rust-lang/rust/commit/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222c5724ecc922fe67815f428c19f82c129d9386", "url": "https://api.github.com/repos/rust-lang/rust/commits/222c5724ecc922fe67815f428c19f82c129d9386", "html_url": "https://github.com/rust-lang/rust/commit/222c5724ecc922fe67815f428c19f82c129d9386"}], "stats": {"total": 215, "additions": 210, "deletions": 5}, "files": [{"sha": "2f9834df9d3351c2b33e3b3d2086b269c3afed9f", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "patch": "@@ -52,11 +52,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 })\n             }\n             ExprKind::Repeat { value, count } => {\n-                let value_operand = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[value], None, NeedsTemporary::No)\n-                );\n-                block.and(Rvalue::Repeat(value_operand, count))\n+                if Some(0) == count.try_eval_usize(this.tcx, this.param_env) {\n+                    this.build_zero_repeat(block, value, scope, source_info)\n+                } else {\n+                    let value_operand = unpack!(\n+                        block = this.as_operand(\n+                            block,\n+                            scope,\n+                            &this.thir[value],\n+                            None,\n+                            NeedsTemporary::No\n+                        )\n+                    );\n+                    block.and(Rvalue::Repeat(value_operand, count))\n+                }\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(\n@@ -515,6 +524,37 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    fn build_zero_repeat(\n+        &mut self,\n+        mut block: BasicBlock,\n+        value: ExprId,\n+        scope: Option<region::Scope>,\n+        outer_source_info: SourceInfo,\n+    ) -> BlockAnd<Rvalue<'tcx>> {\n+        let this = self;\n+        let value = &this.thir[value];\n+        let elem_ty = value.ty;\n+        if let Some(Category::Constant) = Category::of(&value.kind) {\n+            // Repeating a const does nothing\n+        } else {\n+            // For a non-const, we may need to generate an appropriate `Drop`\n+            let value_operand =\n+                unpack!(block = this.as_operand(block, scope, value, None, NeedsTemporary::No));\n+            if let Operand::Move(to_drop) = value_operand {\n+                let success = this.cfg.start_new_block();\n+                this.cfg.terminate(\n+                    block,\n+                    outer_source_info,\n+                    TerminatorKind::Drop { place: to_drop, target: success, unwind: None },\n+                );\n+                this.diverge_from(block);\n+                block = success;\n+            }\n+            this.record_operands_moved(&[value_operand]);\n+        }\n+        block.and(Rvalue::Aggregate(Box::new(AggregateKind::Array(elem_ty)), Vec::new()))\n+    }\n+\n     fn limit_capture_mutability(\n         &mut self,\n         upvar_span: Span,"}, {"sha": "a5f8a5847c2703eee2f802af4962f1c031fb87c6", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "patch": "@@ -1033,6 +1033,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.block_data(start).terminator().kind,\n                 TerminatorKind::Assert { .. }\n                     | TerminatorKind::Call { .. }\n+                    | TerminatorKind::Drop { .. }\n                     | TerminatorKind::DropAndReplace { .. }\n                     | TerminatorKind::FalseUnwind { .. }\n                     | TerminatorKind::InlineAsm { .. }"}, {"sha": "2e7855328ecbffa90e83ef9aaf333a38312b2ccb", "filename": "src/test/ui/drop/repeat-drop-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs?ref=0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "patch": "@@ -0,0 +1,15 @@\n+fn borrowck_catch() {\n+    let foo = String::new();\n+    let _bar = foo;\n+    let _baz = [foo; 0]; //~ ERROR use of moved value: `foo` [E0382]\n+}\n+\n+const _: [String; 0] = [String::new(); 0];\n+//~^ ERROR destructors cannot be evaluated at compile-time [E0493]\n+\n+fn must_be_init() {\n+    let x: u8;\n+    let _ = [x; 0]; //~ ERROR: use of possibly-uninitialized variable: `x`\n+}\n+\n+fn main() {}"}, {"sha": "cdc58180c37b40847bc0c6fbdbf496c0da5310fe", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "patch": "@@ -0,0 +1,29 @@\n+error[E0382]: use of moved value: `foo`\n+  --> $DIR/repeat-drop-2.rs:4:17\n+   |\n+LL |     let foo = String::new();\n+   |         --- move occurs because `foo` has type `String`, which does not implement the `Copy` trait\n+LL |     let _bar = foo;\n+   |                --- value moved here\n+LL |     let _baz = [foo; 0];\n+   |                 ^^^ value used here after move\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/repeat-drop-2.rs:7:25\n+   |\n+LL | const _: [String; 0] = [String::new(); 0];\n+   |                        -^^^^^^^^^^^^^----\n+   |                        ||\n+   |                        |constants cannot evaluate destructors\n+   |                        value is dropped here\n+\n+error[E0381]: use of possibly-uninitialized variable: `x`\n+  --> $DIR/repeat-drop-2.rs:12:14\n+   |\n+LL |     let _ = [x; 0];\n+   |              ^ use of possibly-uninitialized `x`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0381, E0382, E0493.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "03e832adb3b3b610612f12a2398f70913269078f", "filename": "src/test/ui/drop/repeat-drop.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs?ref=0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "patch": "@@ -0,0 +1,120 @@\n+// run-pass\n+// ignore-wasm32-bare no unwinding panic\n+// ignore-avr no unwinding panic\n+// ignore-nvptx64 no unwinding panic\n+\n+static mut CHECK: usize = 0;\n+\n+struct DropChecker(usize);\n+\n+impl Drop for DropChecker {\n+    fn drop(&mut self) {\n+        unsafe {\n+            if CHECK != self.0 - 1 {\n+                panic!(\"Found {}, should have found {}\", CHECK, self.0 - 1);\n+            }\n+            CHECK = self.0;\n+        }\n+    }\n+}\n+\n+macro_rules! check_drops {\n+    ($l:literal) => {\n+        unsafe { assert_eq!(CHECK, $l) }\n+    };\n+}\n+\n+struct DropPanic;\n+\n+impl Drop for DropPanic {\n+    fn drop(&mut self) {\n+        panic!()\n+    }\n+}\n+\n+fn value_zero() {\n+    unsafe { CHECK = 0 };\n+    let foo = DropChecker(1);\n+    let v: [DropChecker; 0] = [foo; 0];\n+    check_drops!(1);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+fn value_one() {\n+    unsafe { CHECK = 0 };\n+    let foo = DropChecker(1);\n+    let v: [DropChecker; 1] = [foo; 1];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+const DROP_CHECKER: DropChecker = DropChecker(1);\n+\n+fn const_zero() {\n+    unsafe { CHECK = 0 };\n+    let v: [DropChecker; 0] = [DROP_CHECKER; 0];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(0);\n+}\n+\n+fn const_one() {\n+    unsafe { CHECK = 0 };\n+    let v: [DropChecker; 1] = [DROP_CHECKER; 1];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+fn const_generic_zero<const N: usize>() {\n+    unsafe { CHECK = 0 };\n+    let v: [DropChecker; N] = [DROP_CHECKER; N];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(0);\n+}\n+\n+fn const_generic_one<const N: usize>() {\n+    unsafe { CHECK = 0 };\n+    let v: [DropChecker; N] = [DROP_CHECKER; N];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+// Make sure that things are allowed to promote as expected\n+\n+fn allow_promote() {\n+    unsafe { CHECK = 0 };\n+    let foo = DropChecker(1);\n+    let v: &'static [DropChecker; 0] = &[foo; 0];\n+    check_drops!(1);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+// Verify that unwinding in the drop causes the right things to drop in the right order\n+fn on_unwind() {\n+    unsafe { CHECK = 0 };\n+    std::panic::catch_unwind(|| {\n+        let panic = DropPanic;\n+        let _local = DropChecker(2);\n+        let _v = (DropChecker(1), [panic; 0]);\n+        std::process::abort();\n+    })\n+    .unwrap_err();\n+    check_drops!(2);\n+}\n+\n+fn main() {\n+    value_zero();\n+    value_one();\n+    const_zero();\n+    const_one();\n+    const_generic_zero::<0>();\n+    const_generic_one::<1>();\n+    allow_promote();\n+    on_unwind();\n+}"}]}