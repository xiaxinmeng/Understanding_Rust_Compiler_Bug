{"sha": "caff72361f9a3d9938032be703295ef7a0c0dd5d", "node_id": "C_kwDOAAsO6NoAKGNhZmY3MjM2MWY5YTNkOTkzODAzMmJlNzAzMjk1ZWY3YTBjMGRkNWQ", "commit": {"author": {"name": "joboet", "email": "jonas.boettiger@icloud.com", "date": "2022-06-07T09:06:19Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-06-15T12:01:31Z"}, "message": "std: relax memory orderings in `Parker`\n\nCo-authored-by: Tomoaki Kawada <kawada@kmckk.co.jp>", "tree": {"sha": "86ddcbfed6d73ed0cd6cd86144dcfb3b91002ceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ddcbfed6d73ed0cd6cd86144dcfb3b91002ceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caff72361f9a3d9938032be703295ef7a0c0dd5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmKpyi8ACgkQcE4BSbAZ\nSzxCiQ/+L9GYfTZ1spMxd7glblatZH8IpF5CoJhCWPIzhtAUMH+WkqnXesjEcSKh\nvkQkjetfFf7KDD436nPaF8ImL5xHjcSArnoghg5A2jGK5U1BDB9X21VWImm3pMfP\n7i9/zcCklMAfzQdqJG+PHcHc6C4YgFVI+HucEPoJ3B+qr0SErHaTUWq+O1LxUnE7\nAa1n6/rymeJraA/M2AxoiuPz8JzpLqMV/s9nwhz39MfAJUsB0J8LISrqcmjN/QiE\nWSqxJKly2n2mkD0Nt4A21ljUjG8RlxLaRFMQUPL0EiMx1SxklBwadGzZsUi3PNcP\nBeVRRNtp+Ccm4Un9G6c42aPpM8vZpE8Zxzlk8kO2tMa5PVKAxpIO0M7ZkY5R+K+Q\n/wMr+w6zR5TgZQv8s3pt/E7XgJYUtQ5g4x8M+yhTWQRpIxfjVI62pzatXSaXzb7R\nzm9ni2SrLVxEo9LpYXk2a3s/jEyTZqEU/Fl3JFM36oEz9DhjtcBFvMUzAOKtOpuP\njEkl8I9S1uOPiOgb7JHgyP/WW4ICRcH8mWGncq1VIqYlnWnep+/ih5M41lVGlqbm\nNbEBeV1aJUo7vWem/Z/FW5DnPv0yJaktpnTPme/PrsQPQz5PnXzIkTwZxneoEJjh\nCnX5+bc91/IJ6+RBNcDZbPIyJN3YzgHulQN2rb8TA+xVCjXY1A8=\n=YkUA\n-----END PGP SIGNATURE-----", "payload": "tree 86ddcbfed6d73ed0cd6cd86144dcfb3b91002ceb\nparent b9660de664cc491b3f22a5c1dadee5a03e506b2a\nauthor joboet <jonas.boettiger@icloud.com> 1654592779 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1655294491 +0200\n\nstd: relax memory orderings in `Parker`\n\nCo-authored-by: Tomoaki Kawada <kawada@kmckk.co.jp>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caff72361f9a3d9938032be703295ef7a0c0dd5d", "html_url": "https://github.com/rust-lang/rust/commit/caff72361f9a3d9938032be703295ef7a0c0dd5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caff72361f9a3d9938032be703295ef7a0c0dd5d/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9660de664cc491b3f22a5c1dadee5a03e506b2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9660de664cc491b3f22a5c1dadee5a03e506b2a", "html_url": "https://github.com/rust-lang/rust/commit/b9660de664cc491b3f22a5c1dadee5a03e506b2a"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "6561c186655a5cbbb61e1f9194394c22b6981211", "filename": "library/std/src/sys_common/thread_parker/wait_flag.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/caff72361f9a3d9938032be703295ef7a0c0dd5d/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caff72361f9a3d9938032be703295ef7a0c0dd5d/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs?ref=caff72361f9a3d9938032be703295ef7a0c0dd5d", "patch": "@@ -25,7 +25,7 @@\n \n use crate::pin::Pin;\n use crate::sync::atomic::AtomicI8;\n-use crate::sync::atomic::Ordering::{Relaxed, SeqCst};\n+use crate::sync::atomic::Ordering::{Acquire, Relaxed, Release};\n use crate::sys::wait_flag::WaitFlag;\n use crate::time::Duration;\n \n@@ -47,7 +47,7 @@ impl Parker {\n \n     // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n     pub unsafe fn park(self: Pin<&Self>) {\n-        match self.state.fetch_sub(1, SeqCst) {\n+        match self.state.fetch_sub(1, Acquire) {\n             // NOTIFIED => EMPTY\n             NOTIFIED => return,\n             // EMPTY => PARKED\n@@ -59,7 +59,7 @@ impl Parker {\n         loop {\n             self.wait_flag.wait();\n \n-            match self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, Relaxed) {\n+            match self.state.compare_exchange(NOTIFIED, EMPTY, Acquire, Relaxed) {\n                 Ok(_) => return,\n                 Err(PARKED) => (),\n                 Err(_) => panic!(\"inconsistent park state\"),\n@@ -69,7 +69,7 @@ impl Parker {\n \n     // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n     pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {\n-        match self.state.fetch_sub(1, SeqCst) {\n+        match self.state.fetch_sub(1, Acquire) {\n             NOTIFIED => return,\n             EMPTY => (),\n             _ => panic!(\"inconsistent park state\"),\n@@ -83,9 +83,8 @@ impl Parker {\n         // is protected against this by looping until the token is actually given, but\n         // here we cannot easily tell.\n \n-        // Use `swap` to provide acquire ordering (not strictly necessary, but all other\n-        // implementations do).\n-        match self.state.swap(EMPTY, SeqCst) {\n+        // Use `swap` to provide acquire ordering.\n+        match self.state.swap(EMPTY, Acquire) {\n             NOTIFIED => (),\n             PARKED => (),\n             _ => panic!(\"inconsistent park state\"),\n@@ -94,7 +93,7 @@ impl Parker {\n \n     // This implementation doesn't require `Pin`, but other implementations do.\n     pub fn unpark(self: Pin<&Self>) {\n-        let state = self.state.swap(NOTIFIED, SeqCst);\n+        let state = self.state.swap(NOTIFIED, Release);\n \n         if state == PARKED {\n             self.wait_flag.raise();"}]}