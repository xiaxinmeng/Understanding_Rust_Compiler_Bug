{"sha": "cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZGI5M2I2ZGUxYjViYTVhY2E1M2M1YzRjNzk4N2YzYzA5OTYyYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-30T18:14:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-30T18:14:16Z"}, "message": "Auto merge of #7400 - popzxc:restrict-locales, r=Manishearth\n\nNew lint: `disallowed_script_idents`\n\nThis PR implements a new lint to restrict locales that can be used in the code,\nas proposed in #7376.\n\nCurrent concerns / unresolved questions:\n\n- ~~Mixed usage of `script` (as a Unicode term) and `locale` (as something that is easier to understand for the broad audience). I'm not sure whether these terms are fully interchangeable and whether in the current form it is more confusing than helpful.~~ `script` is now used everywhere.\n- ~~Having to mostly copy-paste `AllowedScript`. Probably it's not a big problem, as the list of scripts is standardized and is unlikely to change, and even if we'd stick to the `unicode_script::Script`, we'll still have to implement custom deserialization, and I don't think that it will be shorter in terms of the amount of LoC.~~ `unicode::Script` is used together with a filtering deserialize function.\n- Should we stick to the list of \"recommended scripts\" from [UAX #31](http://www.unicode.org/reports/tr31/#Table_Recommended_Scripts) in the configuration?\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: ``[`disallowed_script_idents`]``\n\nr? `@Manishearth`", "tree": {"sha": "62005f68115f070d9ed6a3cf0a5a42da78d5df95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62005f68115f070d9ed6a3cf0a5a42da78d5df95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "html_url": "https://github.com/rust-lang/rust/commit/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3525a6b61acb442af5b08d70d1ced3c3ea3cf1c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3525a6b61acb442af5b08d70d1ced3c3ea3cf1c0", "html_url": "https://github.com/rust-lang/rust/commit/3525a6b61acb442af5b08d70d1ced3c3ea3cf1c0"}, {"sha": "018be41deedd086191b8ce45895164e0aa7046b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/018be41deedd086191b8ce45895164e0aa7046b0", "html_url": "https://github.com/rust-lang/rust/commit/018be41deedd086191b8ce45895164e0aa7046b0"}], "stats": {"total": 154, "additions": 152, "deletions": 2}, "files": [{"sha": "f3a8070323879ec8e9d1fb765ac47df1a74c3cb2", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "patch": "@@ -2487,6 +2487,7 @@ Released 2018-09-13\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n [`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n+[`disallowed_script_idents`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents\n [`disallowed_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_type\n [`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n [`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown"}, {"sha": "42cf7547f519459a6cb470ed8a963a181490d7fd", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "patch": "@@ -23,6 +23,7 @@ serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n+unicode-script = { version = \"0.5.3\", default-features = false }\n semver = \"0.11\"\n rustc-semver = \"1.1.0\"\n # NOTE: cargo requires serde feat in its url dep"}, {"sha": "12c525634c51d77b348c9612564fa1c27ba14855", "filename": "clippy_lints/src/disallowed_script_idents.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs?ref=cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "patch": "@@ -0,0 +1,112 @@\n+use clippy_utils::diagnostics::span_lint;\n+use rustc_ast::ast;\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_lint::{EarlyContext, EarlyLintPass, Level};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use unicode_script::{Script, UnicodeScript};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of unicode scripts other than those explicitly allowed\n+    /// by the lint config.\n+    ///\n+    /// This lint doesn't take into account non-text scripts such as `Unknown` and `Linear_A`.\n+    /// It also ignores the `Common` script type.\n+    /// While configuring, be sure to use official script name [aliases] from\n+    /// [the list of supported scripts][supported_scripts].\n+    ///\n+    /// See also: [`non_ascii_idents`].\n+    ///\n+    /// [aliases]: http://www.unicode.org/reports/tr24/tr24-31.html#Script_Value_Aliases\n+    /// [supported_scripts]: https://www.unicode.org/iso15924/iso15924-codes.html\n+    ///\n+    /// **Why is this bad?** It may be not desired to have many different scripts for\n+    /// identifiers in the codebase.\n+    ///\n+    /// Note that if you only want to allow plain English, you might want to use\n+    /// built-in [`non_ascii_idents`] lint instead.\n+    ///\n+    /// [`non_ascii_idents`]: https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#non-ascii-idents\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// // Assuming that `clippy.toml` contains the following line:\n+    /// // allowed-locales = [\"Latin\", \"Cyrillic\"]\n+    /// let counter = 10; // OK, latin is allowed.\n+    /// let \u0441\u0447\u0451\u0442\u0447\u0438\u043a = 10; // OK, cyrillic is allowed.\n+    /// let z\u00e4hler = 10; // OK, it's still latin.\n+    /// let \u30ab\u30a6\u30f3\u30bf = 10; // Will spawn the lint.\n+    /// ```\n+    pub DISALLOWED_SCRIPT_IDENTS,\n+    restriction,\n+    \"usage of non-allowed Unicode scripts\"\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct DisallowedScriptIdents {\n+    whitelist: FxHashSet<Script>,\n+}\n+\n+impl DisallowedScriptIdents {\n+    pub fn new(whitelist: &[String]) -> Self {\n+        let whitelist = whitelist\n+            .iter()\n+            .map(String::as_str)\n+            .filter_map(Script::from_full_name)\n+            .collect();\n+        Self { whitelist }\n+    }\n+}\n+\n+impl_lint_pass!(DisallowedScriptIdents => [DISALLOWED_SCRIPT_IDENTS]);\n+\n+impl EarlyLintPass for DisallowedScriptIdents {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n+        // Implementation is heavily inspired by the implementation of [`non_ascii_idents`] lint:\n+        // https://github.com/rust-lang/rust/blob/master/compiler/rustc_lint/src/non_ascii_idents.rs\n+\n+        let check_disallowed_script_idents = cx.builder.lint_level(DISALLOWED_SCRIPT_IDENTS).0 != Level::Allow;\n+        if !check_disallowed_script_idents {\n+            return;\n+        }\n+\n+        let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n+        // Sort by `Span` so that error messages make sense with respect to the\n+        // order of identifier locations in the code.\n+        let mut symbols: Vec<_> = symbols.iter().collect();\n+        symbols.sort_unstable_by_key(|k| k.1);\n+\n+        for (symbol, &span) in &symbols {\n+            // Note: `symbol.as_str()` is an expensive operation, thus should not be called\n+            // more than once for a single symbol.\n+            let symbol_str = symbol.as_str();\n+            if symbol_str.is_ascii() {\n+                continue;\n+            }\n+\n+            for c in symbol_str.chars() {\n+                // We want to iterate through all the scripts associated with this character\n+                // and check whether at least of one scripts is in the whitelist.\n+                let forbidden_script = c\n+                    .script_extension()\n+                    .iter()\n+                    .find(|script| !self.whitelist.contains(script));\n+                if let Some(script) = forbidden_script {\n+                    span_lint(\n+                        cx,\n+                        DISALLOWED_SCRIPT_IDENTS,\n+                        span,\n+                        &format!(\n+                            \"identifier `{}` has a Unicode script that is not allowed by configuration: {}\",\n+                            symbol_str,\n+                            script.full_name()\n+                        ),\n+                    );\n+                    // We don't want to spawn warning multiple times over a single identifier.\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "e0325738466bec902564ee0c4138862bfd4365d5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "patch": "@@ -192,6 +192,7 @@ mod default_numeric_fallback;\n mod dereference;\n mod derive;\n mod disallowed_method;\n+mod disallowed_script_idents;\n mod disallowed_type;\n mod doc;\n mod double_comparison;\n@@ -590,6 +591,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         derive::UNSAFE_DERIVE_DESERIALIZE,\n         disallowed_method::DISALLOWED_METHOD,\n+        disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS,\n         disallowed_type::DISALLOWED_TYPE,\n         doc::DOC_MARKDOWN,\n         doc::MISSING_ERRORS_DOC,\n@@ -1000,6 +1002,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(create_dir::CREATE_DIR),\n         LintId::of(dbg_macro::DBG_MACRO),\n         LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n+        LintId::of(disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS),\n         LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n         LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n         LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n@@ -2090,7 +2093,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box disallowed_type::DisallowedType::new(&disallowed_types));\n     let import_renames = conf.enforced_import_renames.clone();\n     store.register_late_pass(move || box missing_enforced_import_rename::ImportRename::new(import_renames.clone()));\n-\n+    let scripts = conf.allowed_scripts.clone();\n+    store.register_early_pass(move || box disallowed_script_idents::DisallowedScriptIdents::new(&scripts));\n }\n \n #[rustfmt::skip]"}, {"sha": "44d3d4563428d4f4de8a937a1e85263d70a4b558", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "patch": "@@ -212,6 +212,8 @@ define_Conf! {\n     (standard_macro_braces: Vec<crate::nonstandard_macro_braces::MacroMatcher> = Vec::new()),\n     /// Lint: MISSING_ENFORCED_IMPORT_RENAMES. The list of imports to always rename, a fully qualified path followed by the rename.\n     (enforced_import_renames: Vec<crate::utils::conf::Rename> = Vec::new()),\n+    /// Lint: RESTRICTED_SCRIPTS. The list of unicode scripts allowed to be used in the scope.\n+    (allowed_scripts: Vec<String> = vec![\"Latin\".to_string()]),\n }\n \n /// Search for the configuration file."}, {"sha": "e0029ebeb27ac4ad94966097b9c02f5914e9a4b5", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "cfdda35971fb617829cfd0bb8c2bc46c72efc7e6", "filename": "tests/ui/disallowed_script_idents.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/tests%2Fui%2Fdisallowed_script_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/tests%2Fui%2Fdisallowed_script_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdisallowed_script_idents.rs?ref=cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "patch": "@@ -0,0 +1,10 @@\n+#![deny(clippy::disallowed_script_idents)]\n+#![allow(dead_code)]\n+\n+fn main() {\n+    let counter = 10; // OK, latin is allowed.\n+    let z\u00e4hler = 10; // OK, it's still latin.\n+\n+    let \u0441\u0447\u0451\u0442\u0447\u0438\u043a = 10; // Cyrillic is not allowed by default.\n+    let \u30ab\u30a6\u30f3\u30bf = 10; // Same for japanese.\n+}"}, {"sha": "cc84dc1d43c59839d04b2497529344c85daa1f45", "filename": "tests/ui/disallowed_script_idents.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/tests%2Fui%2Fdisallowed_script_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8/tests%2Fui%2Fdisallowed_script_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdisallowed_script_idents.stderr?ref=cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "patch": "@@ -0,0 +1,20 @@\n+error: identifier `\u0441\u0447\u0451\u0442\u0447\u0438\u043a` has a Unicode script that is not allowed by configuration: Cyrillic\n+  --> $DIR/disallowed_script_idents.rs:8:9\n+   |\n+LL |     let \u0441\u0447\u0451\u0442\u0447\u0438\u043a = 10; // Cyrillic is not allowed by default.\n+   |         ^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/disallowed_script_idents.rs:1:9\n+   |\n+LL | #![deny(clippy::disallowed_script_idents)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: identifier `\u30ab\u30a6\u30f3\u30bf` has a Unicode script that is not allowed by configuration: Katakana\n+  --> $DIR/disallowed_script_idents.rs:9:9\n+   |\n+LL |     let \u30ab\u30a6\u30f3\u30bf = 10; // Same for japanese.\n+   |         ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}