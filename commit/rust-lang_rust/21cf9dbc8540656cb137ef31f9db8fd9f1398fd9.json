{"sha": "21cf9dbc8540656cb137ef31f9db8fd9f1398fd9", "node_id": "C_kwDOAAsO6NoAKDIxY2Y5ZGJjODU0MDY1NmNiMTM3ZWYzMWY5ZGI4ZmQ5ZjEzOThmZDk", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-27T10:43:38Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-27T10:43:38Z"}, "message": "Destructure format_options in make_format_spec.", "tree": {"sha": "5bfd8328582317d2e2b9ee7dc67b07086f64b596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bfd8328582317d2e2b9ee7dc67b07086f64b596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21cf9dbc8540656cb137ef31f9db8fd9f1398fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21cf9dbc8540656cb137ef31f9db8fd9f1398fd9", "html_url": "https://github.com/rust-lang/rust/commit/21cf9dbc8540656cb137ef31f9db8fd9f1398fd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21cf9dbc8540656cb137ef31f9db8fd9f1398fd9/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be69002dd704a918885de493355705a545fa908a", "url": "https://api.github.com/repos/rust-lang/rust/commits/be69002dd704a918885de493355705a545fa908a", "html_url": "https://github.com/rust-lang/rust/commit/be69002dd704a918885de493355705a545fa908a"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "e7dd0b18a03b9adc0743c423611b2f758414e3e9", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/21cf9dbc8540656cb137ef31f9db8fd9f1398fd9/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cf9dbc8540656cb137ef31f9db8fd9f1398fd9/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=21cf9dbc8540656cb137ef31f9db8fd9f1398fd9", "patch": "@@ -137,33 +137,43 @@ fn make_format_spec<'hir>(\n         }\n         Err(_) => ctx.expr(sp, hir::ExprKind::Err),\n     };\n-    let fill = ctx.expr_char(sp, placeholder.format_options.fill.unwrap_or(' '));\n+    let &FormatOptions {\n+        ref width,\n+        ref precision,\n+        alignment,\n+        fill,\n+        sign,\n+        alternate,\n+        zero_pad,\n+        debug_hex,\n+    } = &placeholder.format_options;\n+    let fill = ctx.expr_char(sp, fill.unwrap_or(' '));\n     let align = ctx.expr_lang_item_type_relative(\n         sp,\n         hir::LangItem::FormatAlignment,\n-        match placeholder.format_options.alignment {\n+        match alignment {\n             Some(FormatAlignment::Left) => sym::Left,\n             Some(FormatAlignment::Right) => sym::Right,\n             Some(FormatAlignment::Center) => sym::Center,\n             None => sym::Unknown,\n         },\n     );\n     // This needs to match `FlagV1` in library/core/src/fmt/mod.rs.\n-    let flags: u32 = ((placeholder.format_options.sign == Some(FormatSign::Plus)) as u32)\n-        | ((placeholder.format_options.sign == Some(FormatSign::Minus)) as u32) << 1\n-        | (placeholder.format_options.alternate as u32) << 2\n-        | (placeholder.format_options.zero_pad as u32) << 3\n-        | ((placeholder.format_options.debug_hex == Some(FormatDebugHex::Lower)) as u32) << 4\n-        | ((placeholder.format_options.debug_hex == Some(FormatDebugHex::Upper)) as u32) << 5;\n+    let flags: u32 = ((sign == Some(FormatSign::Plus)) as u32)\n+        | ((sign == Some(FormatSign::Minus)) as u32) << 1\n+        | (alternate as u32) << 2\n+        | (zero_pad as u32) << 3\n+        | ((debug_hex == Some(FormatDebugHex::Lower)) as u32) << 4\n+        | ((debug_hex == Some(FormatDebugHex::Upper)) as u32) << 5;\n     let flags = ctx.expr_u32(sp, flags);\n-    let prec = make_count(ctx, sp, &placeholder.format_options.precision, argmap);\n-    let width = make_count(ctx, sp, &placeholder.format_options.width, argmap);\n+    let precision = make_count(ctx, sp, &precision, argmap);\n+    let width = make_count(ctx, sp, &width, argmap);\n     let format_placeholder_new = ctx.arena.alloc(ctx.expr_lang_item_type_relative(\n         sp,\n         hir::LangItem::FormatPlaceholder,\n         sym::new,\n     ));\n-    let args = ctx.arena.alloc_from_iter([position, fill, align, flags, prec, width]);\n+    let args = ctx.arena.alloc_from_iter([position, fill, align, flags, precision, width]);\n     ctx.expr_call_mut(sp, format_placeholder_new, args)\n }\n "}]}