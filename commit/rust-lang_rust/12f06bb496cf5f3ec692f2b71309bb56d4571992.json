{"sha": "12f06bb496cf5f3ec692f2b71309bb56d4571992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZjA2YmI0OTZjZjVmM2VjNjkyZjJiNzEzMDliYjU2ZDQ1NzE5OTI=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-03-06T09:00:25Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-03-06T09:00:25Z"}, "message": "Finish de-implicit-selifizng libcore", "tree": {"sha": "6f732380151c44a2f086ebd95f70e06446538fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f732380151c44a2f086ebd95f70e06446538fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12f06bb496cf5f3ec692f2b71309bb56d4571992", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12f06bb496cf5f3ec692f2b71309bb56d4571992", "html_url": "https://github.com/rust-lang/rust/commit/12f06bb496cf5f3ec692f2b71309bb56d4571992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12f06bb496cf5f3ec692f2b71309bb56d4571992/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "959e483fb705e99097a85ce42371bd57b78bd180", "url": "https://api.github.com/repos/rust-lang/rust/commits/959e483fb705e99097a85ce42371bd57b78bd180", "html_url": "https://github.com/rust-lang/rust/commit/959e483fb705e99097a85ce42371bd57b78bd180"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "ccfeb0de0e76ca4e4f43ccefa8212f76fda197f2", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=12f06bb496cf5f3ec692f2b71309bb56d4571992", "patch": "@@ -50,7 +50,6 @@ Implicitly, all crates behave as if they included the following prologue:\n \n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n-#[allow(deprecated_self)];\n #[allow(deprecated_mutable_fields)];\n \n /* The Prelude. */"}, {"sha": "43daf5fa6a5daa2332d6830b77cd3e69399b4413", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=12f06bb496cf5f3ec692f2b71309bb56d4571992", "patch": "@@ -108,7 +108,7 @@ priv impl<A> DVec<A> {\n pub impl<A> DVec<A> {\n     // FIXME (#3758): This should not need to be public.\n     #[inline(always)]\n-    fn check_out<B>(f: &fn(v: ~[A]) -> B) -> B {\n+    fn check_out<B>(&self, f: &fn(v: ~[A]) -> B) -> B {\n         unsafe {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;"}, {"sha": "8f3f81d167e7fa78ce0a3199ecc74192a2eb6f90", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=12f06bb496cf5f3ec692f2b71309bb56d4571992", "patch": "@@ -68,7 +68,7 @@ pub trait Streaming {\n     fn input(&self, (&[const u8]));\n     // These can be refactored some when we have default methods.\n     fn result_bytes(&self) -> ~[u8];\n-    fn result_str() -> ~str;\n+    fn result_str(&self) -> ~str;\n     fn result_u64(&self) -> u64;\n     fn reset(&self);\n }\n@@ -349,8 +349,7 @@ impl Streaming for &SipState {\n         ]\n     }\n \n-    // IMPLICIT SELF WARNING: fix me!\n-    fn result_str() -> ~str {\n+    fn result_str(&self) -> ~str {\n         let r = self.result_bytes();\n         let mut s = ~\"\";\n         for vec::each(r) |b| {"}, {"sha": "8169b957898ef2e804e1291db4496ec02e2cad64", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=12f06bb496cf5f3ec692f2b71309bb56d4571992", "patch": "@@ -228,7 +228,7 @@ fn LittleLock() -> LittleLock {\n \n pub impl LittleLock {\n     #[inline(always)]\n-    unsafe fn lock<T>(f: fn() -> T) -> T {\n+    unsafe fn lock<T>(&self, f: fn() -> T) -> T {\n         struct Unlock {\n             l: rust_little_lock,\n             drop {\n@@ -280,7 +280,7 @@ pub impl<T:Owned> Exclusive<T> {\n     // accessing the provided condition variable) are prohibited while inside\n     // the exclusive. Supporting that is a work in progress.\n     #[inline(always)]\n-    unsafe fn with<U>(f: fn(x: &mut T) -> U) -> U {\n+    unsafe fn with<U>(&self, f: fn(x: &mut T) -> U) -> U {\n         unsafe {\n             let rec = get_shared_mutable_state(&self.x);\n             do (*rec).lock.lock {\n@@ -297,7 +297,7 @@ pub impl<T:Owned> Exclusive<T> {\n     }\n \n     #[inline(always)]\n-    unsafe fn with_imm<U>(f: fn(x: &T) -> U) -> U {\n+    unsafe fn with_imm<U>(&self, f: fn(x: &T) -> U) -> U {\n         do self.with |x| {\n             f(cast::transmute_immut(x))\n         }"}, {"sha": "32f9593d9a630386f4f5f44e204bd0482fc893a2", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f06bb496cf5f3ec692f2b71309bb56d4571992/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=12f06bb496cf5f3ec692f2b71309bb56d4571992", "patch": "@@ -253,7 +253,7 @@ pub fn error(msg: ~str) {\n }\n \n pub fn hash(data: ~str) -> ~str {\n-    let hasher = hash::default_state();\n+    let hasher = &hash::default_state();\n \n     hasher.write_str(data);\n     hasher.result_str()"}]}