{"sha": "96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmIyYzg2ZjJjZmUwM2FkODcwZDEyYjNiODM4ZThiNzVlYjE5Nzg=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-31T17:12:53Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-09-03T17:46:27Z"}, "message": "Add further tests and liberalize type checking", "tree": {"sha": "c68f17103ae8503e6352dd644bc44de79ed43436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68f17103ae8503e6352dd644bc44de79ed43436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "html_url": "https://github.com/rust-lang/rust/commit/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9187597a5e8ebcf17acba6b234884252b1a543", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9187597a5e8ebcf17acba6b234884252b1a543", "html_url": "https://github.com/rust-lang/rust/commit/8d9187597a5e8ebcf17acba6b234884252b1a543"}], "stats": {"total": 186, "additions": 139, "deletions": 47}, "files": [{"sha": "eb2207a0d675d46c10c63bf49d63a54ad8e6893b", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "patch": "@@ -445,15 +445,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             assert_ne!(bound, provided);\n             Err((bound as i32 - provided as i32, Some(err)))\n         };\n-        let emit_correct =\n-            |correct: Result<(), (_, Option<rustc_errors::DiagnosticBuilder<'_>>)>| match correct {\n-                Ok(()) => Ok(()),\n-                Err((_, None)) => Err(()),\n-                Err((_, Some(mut err))) => {\n-                    err.emit();\n-                    Err(())\n-                }\n-            };\n \n         let mut unexpected_spans = vec![];\n \n@@ -501,31 +492,41 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // Emit a help message if it's possible that a type could be surrounded in braces\n         if let Err((c_mismatch, Some(ref mut _const_err))) = const_count_correct {\n-            if let Err((t_mismatch, Some(ref mut type_err))) = type_count_correct {\n-                if c_mismatch == -t_mismatch && t_mismatch < 0 {\n-                    for i in 0..c_mismatch as usize {\n-                        let arg = &args.args[arg_counts.lifetimes + i];\n-                        match arg {\n-                            GenericArg::Type(hir::Ty {\n-                                kind: hir::TyKind::Path { .. }, ..\n-                            }) => {}\n-                            _ => continue,\n-                        }\n-                        let suggestions = vec![\n-                            (arg.span().shrink_to_lo(), String::from(\"{ \")),\n-                            (arg.span().shrink_to_hi(), String::from(\" }\")),\n-                        ];\n-                        type_err.multipart_suggestion(\n-                            \"If this generic argument was intended as a const parameter, \\\n-                            try surrounding it with braces:\",\n-                            suggestions,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n+            if let Err((_, Some(ref mut type_err))) = type_count_correct {\n+                let possible_matches = args.args[arg_counts.lifetimes..]\n+                    .iter()\n+                    .filter(|arg| {\n+                        matches!(\n+                            arg,\n+                            GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. })\n+                        )\n+                    })\n+                    .take(c_mismatch.max(0) as usize);\n+                for arg in possible_matches {\n+                    let suggestions = vec![\n+                        (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                        (arg.span().shrink_to_hi(), String::from(\" }\")),\n+                    ];\n+                    type_err.multipart_suggestion(\n+                        \"If this generic argument was intended as a const parameter, \\\n+                        try surrounding it with braces:\",\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n             }\n         }\n \n+        let emit_correct =\n+            |correct: Result<(), (_, Option<rustc_errors::DiagnosticBuilder<'_>>)>| match correct {\n+                Ok(()) => Ok(()),\n+                Err((_, None)) => Err(()),\n+                Err((_, Some(mut err))) => {\n+                    err.emit();\n+                    Err(())\n+                }\n+            };\n+\n         let arg_count_correct = emit_correct(lifetime_count_correct)\n             .and(emit_correct(const_count_correct))\n             .and(emit_correct(type_count_correct));"}, {"sha": "ceb188a0d3d340bb4866aa02e7d4fa3e004d530f", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "patch": "@@ -7,11 +7,33 @@ enum CompileFlag {\n   B,\n }\n \n-pub fn test<const CF: CompileFlag>() {}\n+pub fn test_1<const CF: CompileFlag>() {}\n+pub fn test_2<T, const CF: CompileFlag>(x: T) {}\n+pub struct Example<const CF: CompileFlag, T=u32>{\n+  x: T,\n+}\n+\n+impl<const CF: CompileFlag, T> Example<CF, T> {\n+  const ASSOC_FLAG: CompileFlag = CompileFlag::A;\n+}\n \n pub fn main() {\n-  test::<CompileFlag::A>();\n+  test_1::<CompileFlag::A>();\n+  //~^ ERROR: expected type, found variant\n+  //~| ERROR: wrong number of const arguments\n+  //~| ERROR: wrong number of type arguments\n+\n+  test_2::<_, CompileFlag::A>(0);\n   //~^ ERROR: expected type, found variant\n   //~| ERROR: wrong number of const arguments\n   //~| ERROR: wrong number of type arguments\n+\n+  let _: Example<CompileFlag::A, _> = Example { x: 0 };\n+  //~^ ERROR: expected type, found variant\n+  //~| ERROR: wrong number of const arguments\n+  //~| ERROR: wrong number of type arguments\n+\n+  let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n+  //~^ ERROR: wrong number of const arguments\n+  //~| ERROR: wrong number of type arguments\n }"}, {"sha": "965abbc9cb7b896acdc8c828d537cbb6e929d48b", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 84, "deletions": 15, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "patch": "@@ -1,30 +1,99 @@\n error[E0573]: expected type, found variant `CompileFlag::A`\n-  --> $DIR/invalid-enum.rs:13:10\n+  --> $DIR/invalid-enum.rs:21:12\n    |\n-LL |   test::<CompileFlag::A>();\n-   |          ^^^^^^^^^^^^^^\n-   |          |\n-   |          not a type\n-   |          help: try using the variant's enum: `CompileFlag`\n+LL |   test_1::<CompileFlag::A>();\n+   |            ^^^^^^^^^^^^^^\n+   |            |\n+   |            not a type\n+   |            help: try using the variant's enum: `CompileFlag`\n+\n+error[E0573]: expected type, found variant `CompileFlag::A`\n+  --> $DIR/invalid-enum.rs:26:15\n+   |\n+LL |   test_2::<_, CompileFlag::A>(0);\n+   |               ^^^^^^^^^^^^^^\n+   |               |\n+   |               not a type\n+   |               help: try using the variant's enum: `CompileFlag`\n+\n+error[E0573]: expected type, found variant `CompileFlag::A`\n+  --> $DIR/invalid-enum.rs:31:18\n+   |\n+LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n+   |                  ^^^^^^^^^^^^^^\n+   |                  |\n+   |                  not a type\n+   |                  help: try using the variant's enum: `CompileFlag`\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/invalid-enum.rs:31:10\n+   |\n+LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected at most 1, found 2\n+  --> $DIR/invalid-enum.rs:31:10\n+   |\n+LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 1 type argument\n+   |\n+help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n+   |                  ^                ^\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/invalid-enum.rs:36:10\n+   |\n+LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected at most 1, found 2\n+  --> $DIR/invalid-enum.rs:36:10\n+   |\n+LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 1 type argument\n+   |\n+help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n+   |                  ^                     ^\n \n error[E0107]: wrong number of const arguments: expected 1, found 0\n-  --> $DIR/invalid-enum.rs:13:3\n+  --> $DIR/invalid-enum.rs:21:3\n    |\n-LL |   test::<CompileFlag::A>();\n-   |   ^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+LL |   test_1::<CompileFlag::A>();\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/invalid-enum.rs:13:10\n+  --> $DIR/invalid-enum.rs:21:12\n+   |\n+LL |   test_1::<CompileFlag::A>();\n+   |            ^^^^^^^^^^^^^^ unexpected type argument\n+   |\n+help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL |   test_1::<{ CompileFlag::A }>();\n+   |            ^                ^\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/invalid-enum.rs:26:3\n+   |\n+LL |   test_2::<_, CompileFlag::A>(0);\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 2\n+  --> $DIR/invalid-enum.rs:26:15\n    |\n-LL |   test::<CompileFlag::A>();\n-   |          ^^^^^^^^^^^^^^ unexpected type argument\n+LL |   test_2::<_, CompileFlag::A>(0);\n+   |               ^^^^^^^^^^^^^^ unexpected type argument\n    |\n help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n    |\n-LL |   test::<{ CompileFlag::A }>();\n-   |          ^                ^\n+LL |   test_2::<_, { CompileFlag::A }>(0);\n+   |               ^                ^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0107, E0573.\n For more information about an error, try `rustc --explain E0107`."}]}