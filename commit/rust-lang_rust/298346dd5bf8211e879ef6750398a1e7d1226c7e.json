{"sha": "298346dd5bf8211e879ef6750398a1e7d1226c7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODM0NmRkNWJmODIxMWU4NzllZjY3NTAzOThhMWU3ZDEyMjZjN2U=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-31T04:25:49Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-03T23:39:08Z"}, "message": "Improve detection of unused imports", "tree": {"sha": "aabb811c879523775ab07282895be37d1d8fa0a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aabb811c879523775ab07282895be37d1d8fa0a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/298346dd5bf8211e879ef6750398a1e7d1226c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/298346dd5bf8211e879ef6750398a1e7d1226c7e", "html_url": "https://github.com/rust-lang/rust/commit/298346dd5bf8211e879ef6750398a1e7d1226c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/298346dd5bf8211e879ef6750398a1e7d1226c7e/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c1781a4c8aaaeb11285e0099edfff2043b62a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c1781a4c8aaaeb11285e0099edfff2043b62a5", "html_url": "https://github.com/rust-lang/rust/commit/18c1781a4c8aaaeb11285e0099edfff2043b62a5"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "1361fac5b161ba5f9bce27e7f887701926fd0b45", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -20,7 +20,7 @@ use front::map as ast_map;\n use session::Session;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n use middle::cstore::InlinedItem;\n-use middle::ty::{self, Ty};\n+use middle::ty;\n \n use std::cell::RefCell;\n use std::collections::hash_map::Entry;"}, {"sha": "2688d549d4facf19c73de213d5fe2e6d067e2b15", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -26,7 +26,6 @@ use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::{abi, ast};\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n-use syntax::ast::{TyIs, TyUs, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n \n use rustc_front::hir;\n use rustc_front::intravisit::{self, Visitor};"}, {"sha": "be1b69fb2b17999ff0896c2314f527d9a9354246", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -1249,7 +1249,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         // modules as we go.\n         while index < module_path_len {\n             let name = module_path[index];\n-            match self.resolve_name_in_module(search_module, name, TypeNS, false) {\n+            match self.resolve_name_in_module(search_module, name, TypeNS, false, true) {\n                 Failed(None) => {\n                     let segment_name = name.as_str();\n                     let module_name = module_to_string(search_module);\n@@ -1487,7 +1487,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             // Resolve the name in the parent module.\n-            match self.resolve_name_in_module(search_module, name, namespace, true) {\n+            match self.resolve_name_in_module(search_module, name, namespace, true, record_used) {\n                 Failed(Some((span, msg))) => {\n                     resolve_error(self, span, ResolutionError::FailedToResolve(&*msg));\n                 }\n@@ -1612,7 +1612,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                               module_: Module<'a>,\n                               name: Name,\n                               namespace: Namespace,\n-                              allow_private_imports: bool)\n+                              allow_private_imports: bool,\n+                              record_used: bool)\n                               -> ResolveResult<(Target<'a>, bool)> {\n         debug!(\"(resolving name in module) resolving `{}` in `{}`\",\n                name,\n@@ -1641,11 +1642,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     Some(target) => {\n                         debug!(\"(resolving name in module) resolved to import\");\n                         // track used imports and extern crates as well\n-                        let id = import_resolution.id;\n-                        self.used_imports.insert((id, namespace));\n-                        self.record_import_use(id, name);\n-                        if let Some(DefId{krate: kid, ..}) = target.target_module.def_id() {\n-                            self.used_crates.insert(kid);\n+                        if record_used {\n+                            let id = import_resolution.id;\n+                            self.used_imports.insert((id, namespace));\n+                            self.record_import_use(id, name);\n+                            if let Some(DefId{krate: kid, ..}) = target.target_module.def_id() {\n+                                self.used_crates.insert(kid);\n+                            }\n                         }\n                         return Success((target, true));\n                     }\n@@ -2967,7 +2970,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         let name = segments.last().unwrap().identifier.name;\n-        let def = match self.resolve_name_in_module(containing_module, name, namespace, false) {\n+        let result = self.resolve_name_in_module(containing_module, name, namespace, false, true);\n+        let def = match result {\n             Success((Target { binding, .. }, _)) => {\n                 let (def, lp) = binding.def_and_lp();\n                 (def, last_private.or(lp))\n@@ -3026,7 +3030,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         let name = segments.last().unwrap().identifier.name;\n-        match self.resolve_name_in_module(containing_module, name, namespace, false) {\n+        match self.resolve_name_in_module(containing_module, name, namespace, false, true) {\n             Success((Target { binding, .. }, _)) => {\n                 let (def, lp) = binding.def_and_lp();\n                 Some((def, last_private.or(lp)))\n@@ -3068,6 +3072,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if let Success((target, _)) = self.resolve_name_in_module(module,\n                                                                           ident.unhygienic_name,\n                                                                           namespace,\n+                                                                          true,\n                                                                           true) {\n                     if let Some(def) = target.binding.def() {\n                         return Some(LocalDef::from_def(def));"}, {"sha": "fe37006e5cf73931f0da76c34317a310e5003f6e", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -26,7 +26,7 @@ use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType};\n use middle::def_id::DefId;\n use middle::infer;\n use middle::pat_util;\n-use middle::subst::{self, Substs};\n+use middle::subst;\n use rustc::front::map as hir_map;\n use rustc_front::hir;\n use trans::{type_of, adt, machine, monomorphize};"}, {"sha": "9f20131f9aad1be24e9d7f9ad6a7b1fbb790c2f6", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -15,7 +15,7 @@ use super::namespace::crate_root_namespace;\n use trans::common::CrateContext;\n use middle::def_id::DefId;\n use middle::infer;\n-use middle::subst::{self, Substs};\n+use middle::subst;\n use middle::ty::{self, Ty};\n \n use rustc_front::hir;"}, {"sha": "64dbe66a88f1d69eddca885507eeb66d55e3a982", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -50,7 +50,6 @@ use middle::ty::cast::{CastKind, CastTy};\n use syntax::codemap::Span;\n use rustc_front::hir;\n use syntax::ast;\n-use syntax::ast::UintTy::TyU8;\n \n \n /// Reifies a cast check to be checked once we have full type information for"}, {"sha": "064259c171d91bb638192068bc2fbfd4e2a757b0", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -17,7 +17,7 @@ use astconv::AstConv;\n use check::{self, FnCtxt};\n use front::map as hir_map;\n use middle::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TypeFoldable};\n-use middle::cstore::{self, CrateStore, DefLike};\n+use middle::cstore::{self, CrateStore};\n use middle::def::Def;\n use middle::def_id::DefId;\n use middle::lang_items::FnOnceTraitLangItem;"}, {"sha": "9a0d6bc16411a553e8ea745254c6c2a823110684", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -92,7 +92,7 @@ use middle::infer;\n use middle::infer::{TypeOrigin, type_variable};\n use middle::pat_util::{self, pat_id_map};\n use middle::privacy::{AllPublic, LastMod};\n-use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace, TypeSpace};\n+use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace};\n use middle::traits::{self, report_fulfillment_errors};\n use middle::ty::{GenericPredicates, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};"}, {"sha": "080c5e400ac9d58a7bf2ce0588db688bf388fb8e", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298346dd5bf8211e879ef6750398a1e7d1226c7e/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=298346dd5bf8211e879ef6750398a1e7d1226c7e", "patch": "@@ -56,7 +56,10 @@ mod bar {\n         use foo::Point;\n         use foo::Square; //~ ERROR unused import\n         pub fn cc(_p: Point) -> super::Square {\n-            super::Square\n+            fn f() -> super::Square {\n+                super::Square\n+            }\n+            f()\n         }\n     }\n "}]}