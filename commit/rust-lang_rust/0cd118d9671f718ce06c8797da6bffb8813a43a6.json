{"sha": "0cd118d9671f718ce06c8797da6bffb8813a43a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZDExOGQ5NjcxZjcxOGNlMDZjODc5N2RhNmJmZmI4ODEzYTQzYTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-12T10:31:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-12T10:31:45Z"}, "message": "Rollup merge of #78916 - lcnr:const-generics-tests, r=varkor\n\nextend const generics test suite\n\nshould implement most of #78433, especially all parts of [the hackmd](https://hackmd.io/WnFmN4MjRCqAjGmYfYcu2A?view) which I did not explicitly mention in that issue.\n\nr? ``@varkor``", "tree": {"sha": "50668c94e93fca78c6fae8dc4d318f88cd3fd6ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50668c94e93fca78c6fae8dc4d318f88cd3fd6ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd118d9671f718ce06c8797da6bffb8813a43a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrQ8RCRBK7hj4Ov3rIwAAdHIIADxPxT4dga+7zDfEZn4T/v6b\nFby3pN4trWWxheH7iRLGdWN5uQJWTqrGpAX6SLCU1scLxKuNTMO8k0ruibrDeM0o\nWPdp5hSajdxGZYDWO7/FguRYXmJo/8C3VAGx6MMCBFiqZii6EOMWyFnMM93p5hjH\nSpJ2IRrU/xHbxIaFs6r/p6Vplri3alk4IWLx0kBfYEuGsco3XKyLtEopIaH4phbC\n1H+tEC2V2NI6XxEOZ7C/SYHrKDyd16GrSVWdViG6uuyXMryaa106ItHNfLUEpF2Y\n2MTPo88iD8INhZSejOV1yQ9k2+bZwF0rUVuZCeg4uZtEtoXH/wPv4oHcOpHA0as=\n=UyjY\n-----END PGP SIGNATURE-----\n", "payload": "tree 50668c94e93fca78c6fae8dc4d318f88cd3fd6ba\nparent 55794e43960ad3647e78ea5b0cb5ad0c5c0596a8\nparent a9eacf33b7517fa0b21a2aaab45ccc68cb85e06f\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1605177105 +0100\ncommitter GitHub <noreply@github.com> 1605177105 +0100\n\nRollup merge of #78916 - lcnr:const-generics-tests, r=varkor\n\nextend const generics test suite\n\nshould implement most of #78433, especially all parts of [the hackmd](https://hackmd.io/WnFmN4MjRCqAjGmYfYcu2A?view) which I did not explicitly mention in that issue.\n\nr? ``@varkor``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd118d9671f718ce06c8797da6bffb8813a43a6", "html_url": "https://github.com/rust-lang/rust/commit/0cd118d9671f718ce06c8797da6bffb8813a43a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd118d9671f718ce06c8797da6bffb8813a43a6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55794e43960ad3647e78ea5b0cb5ad0c5c0596a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/55794e43960ad3647e78ea5b0cb5ad0c5c0596a8", "html_url": "https://github.com/rust-lang/rust/commit/55794e43960ad3647e78ea5b0cb5ad0c5c0596a8"}, {"sha": "a9eacf33b7517fa0b21a2aaab45ccc68cb85e06f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9eacf33b7517fa0b21a2aaab45ccc68cb85e06f", "html_url": "https://github.com/rust-lang/rust/commit/a9eacf33b7517fa0b21a2aaab45ccc68cb85e06f"}], "stats": {"total": 1126, "additions": 1126, "deletions": 0}, "files": [{"sha": "97760cbf8fb5878ef000a36a5b2d13e1cd932081", "filename": "src/test/rustdoc-ui/error-in-impl-trait/const-generics.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fconst-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fconst-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fconst-generics.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+// edition:2018\n+#![feature(min_const_generics)]\n+trait ValidTrait {}\n+\n+/// This has docs\n+pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]> {\n+    loop {}\n+}\n+\n+pub trait Trait<const N: usize> {}\n+impl Trait<1> for u8 {}\n+impl Trait<2> for u8 {}\n+impl<const N: usize> Trait<N> for [u8; N] {}\n+\n+/// This also has docs\n+pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n+    loop {}\n+}\n+\n+/// Document all the functions\n+pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N> {\n+    loop {}\n+}"}, {"sha": "b8bd040f7a4b2feb62e241db0858e7af4209ac61", "filename": "src/test/rustdoc/const-generics/auxiliary/extern_crate.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+#![feature(min_const_generics)]\n+\n+pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]> {\n+    [[0; N]; N].iter().copied()\n+}\n+\n+pub struct ExternTy<const N: usize> {\n+    pub inner: [u8; N],\n+}\n+\n+pub type TyAlias<const N: usize> = ExternTy<N>;\n+\n+pub trait WTrait<const N: usize, const M: usize> {\n+    fn hey<const P: usize>() -> usize {\n+        N + M + P\n+    }\n+}"}, {"sha": "8dcba36600d26da5194630481ad11e3eefdc9ead", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,130 @@\n+// edition:2018\n+// aux-build: extern_crate.rs\n+#![feature(min_const_generics)]\n+#![crate_name = \"foo\"]\n+\n+extern crate extern_crate;\n+// @has foo/fn.extern_fn.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]>'\n+pub use extern_crate::extern_fn;\n+// @has foo/struct.ExternTy.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct ExternTy<const N: usize> {'\n+pub use extern_crate::ExternTy;\n+// @has foo/type.TyAlias.html '//pre[@class=\"rust typedef\"]' \\\n+//      'type TyAlias<const N: usize> = ExternTy<N>;'\n+pub use extern_crate::TyAlias;\n+// @has foo/trait.WTrait.html '//pre[@class=\"rust trait\"]' \\\n+//      'pub trait WTrait<const N: usize, const M: usize>'\n+// @has - '//*[@class=\"rust trait\"]' 'fn hey<const P: usize>() -> usize'\n+pub use extern_crate::WTrait;\n+\n+// @has foo/trait.Trait.html '//pre[@class=\"rust trait\"]' \\\n+//      'pub trait Trait<const N: usize>'\n+// @has - '//*[@id=\"impl-Trait%3C1_usize%3E-for-u8\"]//code' 'impl Trait<1_usize> for u8'\n+// @has - '//*[@id=\"impl-Trait%3C2_usize%3E-for-u8\"]//code' 'impl Trait<2_usize> for u8'\n+// @has - '//*[@id=\"impl-Trait%3C{1%20+%202}%3E-for-u8\"]//code' 'impl Trait<{1 + 2}> for u8'\n+// @has - '//*[@id=\"impl-Trait%3CN%3E-for-%5Bu8%3B%20N%5D\"]//code' \\\n+//      'impl<const N: usize> Trait<N> for [u8; N]'\n+pub trait Trait<const N: usize> {}\n+impl Trait<1> for u8 {}\n+impl Trait<2> for u8 {}\n+impl Trait<{1 + 2}> for u8 {}\n+impl<const N: usize> Trait<N> for [u8; N] {}\n+\n+// @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct Foo<const N: usize> where u8: Trait<N>'\n+pub struct Foo<const N: usize> where u8: Trait<N>;\n+// @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n+pub struct Bar<T, const N: usize>([T; N]);\n+\n+// @has foo/struct.Foo.html '//h3[@id=\"impl\"]/code' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n+impl<const M: usize> Foo<M> where u8: Trait<M> {\n+    // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n+    pub const FOO_ASSOC: usize = M + 13;\n+\n+    // @has - '//*[@id=\"method.hey\"]' 'pub fn hey<const N: usize>(&self) -> Bar<u8, N>'\n+    pub fn hey<const N: usize>(&self) -> Bar<u8, N> {\n+        Bar([0; N])\n+    }\n+}\n+\n+// @has foo/struct.Bar.html '//h3[@id=\"impl\"]/code' 'impl<const M: usize> Bar<u8, M>'\n+impl<const M: usize> Bar<u8, M> {\n+    // @has - '//*[@id=\"method.hey\"]' \\\n+    //      'pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N>'\n+    pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N> {\n+        Foo\n+    }\n+}\n+\n+// @has foo/fn.test.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N>'\n+pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n+    2u8\n+}\n+\n+// @has foo/fn.a_sink.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N>'\n+pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N> {\n+    v\n+}\n+\n+// @has foo/fn.b_sink.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub async fn b_sink<const N: usize>(__arg0: impl Trait<N>)'\n+// FIXME(const_generics): This should be `_` not `__arg0`.\n+pub async fn b_sink<const N: usize>(_: impl Trait<N>) {}\n+\n+// @has foo/fn.concrete.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub fn concrete() -> [u8; 22]'\n+pub fn concrete() -> [u8; 3 + std::mem::size_of::<u64>() << 1] {\n+    Default::default()\n+}\n+\n+// @has foo/type.Faz.html '//pre[@class=\"rust typedef\"]' \\\n+//      'type Faz<const N: usize> = [u8; N];'\n+pub type Faz<const N: usize> = [u8; N];\n+// @has foo/type.Fiz.html '//pre[@class=\"rust typedef\"]' \\\n+//      'type Fiz<const N: usize> = [[u8; N]; 48];'\n+pub type Fiz<const N: usize> = [[u8; N]; 3 << 4];\n+\n+macro_rules! define_me {\n+    ($t:tt<$q:tt>) => {\n+        pub struct $t<const $q: usize>([u8; $q]);\n+    }\n+}\n+\n+// @has foo/struct.Foz.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct Foz<const N: usize>(_);'\n+define_me!(Foz<N>);\n+\n+trait Q {\n+    const ASSOC: usize;\n+}\n+\n+impl<const N: usize> Q for [u8; N] {\n+    const ASSOC: usize = N;\n+}\n+\n+// @has foo/fn.q_user.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub fn q_user() -> [u8; 13]'\n+pub fn q_user() -> [u8; <[u8; 13] as Q>::ASSOC] {\n+    [0; <[u8; 13] as Q>::ASSOC]\n+}\n+\n+// @has foo/union.Union.html '//pre[@class=\"rust union\"]' \\\n+//      'pub union Union<const N: usize>'\n+pub union Union<const N: usize> {\n+    // @has - //pre \"pub arr: [u8; N]\"\n+    pub arr: [u8; N],\n+    // @has - //pre \"pub another_arr: [(); N]\"\n+    pub another_arr: [(); N],\n+}\n+\n+// @has foo/enum.Enum.html '//pre[@class=\"rust enum\"]' \\\n+//      'pub enum Enum<const N: usize>'\n+pub enum Enum<const N: usize> {\n+    // @has - //pre \"Variant([u8; N])\"\n+    Variant([u8; N]),\n+    // @has - //pre \"EmptyVariant\"\n+    EmptyVariant,\n+}"}, {"sha": "8ccbe5dee0e443795de5fc2a3d97f44e348b967a", "filename": "src/test/ui/const-generics/associated-type-bound-fail.full.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n+  --> $DIR/associated-type-bound-fail.rs:14:5\n+   |\n+LL |     type Assoc: Bar<N>;\n+   |                 ------ required by this bound in `Foo::Assoc`\n+...\n+LL |     type Assoc = u16;\n+   |     ^^^^^^^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `u16`\n+   |\n+   = help: the following implementations were found:\n+             <u16 as Bar<3_usize>>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8ccbe5dee0e443795de5fc2a3d97f44e348b967a", "filename": "src/test/ui/const-generics/associated-type-bound-fail.min.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n+  --> $DIR/associated-type-bound-fail.rs:14:5\n+   |\n+LL |     type Assoc: Bar<N>;\n+   |                 ------ required by this bound in `Foo::Assoc`\n+...\n+LL |     type Assoc = u16;\n+   |     ^^^^^^^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `u16`\n+   |\n+   = help: the following implementations were found:\n+             <u16 as Bar<3_usize>>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3440b1356c2424418ce914dbbf8b24f1f095d51e", "filename": "src/test/ui/const-generics/associated-type-bound-fail.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,17 @@\n+// revisions: full min\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+trait Bar<const N: usize> {}\n+\n+trait Foo<const N: usize> {\n+    type Assoc: Bar<N>;\n+}\n+\n+impl Bar<3> for u16 {}\n+impl<const N: usize> Foo<N> for i16 {\n+    type Assoc = u16; //~ ERROR the trait bound `u16: Bar<N>`\n+}\n+\n+fn main() {}"}, {"sha": "374a49194b1786189fd333c53eff9e55bfa9efcd", "filename": "src/test/ui/const-generics/associated-type-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+// revisions: full min\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+trait Bar<const N: usize> {}\n+\n+trait Foo<const N: usize> {\n+    type Assoc: Bar<N>;\n+}\n+\n+impl<const N: usize> Bar<N> for u8 {}\n+impl Bar<3> for u16 {}\n+\n+impl<const N: usize> Foo<N> for i8 {\n+    type Assoc = u8;\n+}\n+\n+impl Foo<3> for i16 {\n+    type Assoc = u16;\n+}\n+\n+fn main() {}"}, {"sha": "725005971e1e9aac1c6cc1211175e06332df1f66", "filename": "src/test/ui/const-generics/auxiliary/crayte.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+pub trait Foo<const N: usize> {}\n+struct Local;\n+impl<const N: usize> Foo<N> for Local {}\n+\n+pub fn out_foo<const N: usize>() -> impl Foo<N> { Local }\n+pub fn in_foo<const N: usize>(_: impl Foo<N>) {}\n+\n+pub async fn async_simple<const N: usize>(_: [u8; N]) {}\n+pub async fn async_out_foo<const N: usize>() -> impl Foo<N> { Local }\n+pub async fn async_in_foo<const N: usize>(_: impl Foo<N>) {}\n+\n+pub trait Bar<const N: usize> {\n+    type Assoc: Foo<N>;\n+}"}, {"sha": "7dfe250b78e00cd663f361cf3c2753214e8fc122", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,203 @@\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:14:23\n+   |\n+LL |     let _: [u8; foo::<T>()];\n+   |                       ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n+   |\n+LL |     let _: [u8; bar::<N>()];\n+   |                       ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:25:23\n+   |\n+LL |     let _ = [0; bar::<N>()];\n+   |                       ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:30:24\n+   |\n+LL |     let _: Foo<{ foo::<T>() }>;\n+   |                        ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:31:24\n+   |\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |                        ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:36:27\n+   |\n+LL |     let _ = Foo::<{ foo::<T>() }>;\n+   |                           ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:37:27\n+   |\n+LL |     let _ = Foo::<{ bar::<N>() }>;\n+   |                           ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n+   |\n+LL |     let _: [u8; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:17:23\n+   |\n+LL |     let _: [u8; baz::<'a>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n+   |\n+LL |     let _: [u8; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:19:23\n+   |\n+LL |     let _: [u8; baz::<'b>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n+   |\n+LL |     let _ = [0; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:27:23\n+   |\n+LL |     let _ = [0; baz::<'a>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n+   |\n+LL |     let _ = [0; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:29:23\n+   |\n+LL |     let _ = [0; baz::<'b>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:32:24\n+   |\n+LL |     let _: Foo<{ faz::<'a>(&()) }>;\n+   |                        ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:33:24\n+   |\n+LL |     let _: Foo<{ baz::<'a>(&()) }>;\n+   |                        ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:34:24\n+   |\n+LL |     let _: Foo<{ faz::<'b>(&()) }>;\n+   |                        ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n+   |\n+LL |     let _: Foo<{ baz::<'b>(&()) }>;\n+   |                        ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:38:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n+   |                           ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:39:27\n+   |\n+LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n+   |                           ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:40:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n+   |                           ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:41:27\n+   |\n+LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n+   |                           ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error: aborting due to 23 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9927538ef50c6209e023d5a4e5fbbc719602ea2f", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,44 @@\n+// revisions: min\n+// FIXME(const_generics): This test currently causes an ICE because\n+// we don't yet correctly deal with lifetimes, reenable this test once\n+// this is fixed.\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+const fn foo<T>() -> usize { std::mem::size_of::<T>() }\n+const fn bar<const N: usize>() -> usize { N }\n+const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+const fn baz<'a>(_: &'a ()) -> usize where &'a (): Sized { 13 }\n+\n+struct Foo<const N: usize>;\n+fn test<'a, 'b, T, const N: usize>() where &'b (): Sized {\n+    let _: [u8; foo::<T>()]; //~ ERROR generic parameters may not\n+    let _: [u8; bar::<N>()]; //~ ERROR generic parameters may not\n+    let _: [u8; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n+\n+    // NOTE: This can be a future compat warning instead of an error,\n+    // so we stop compilation before emitting this error in this test.\n+    let _ = [0; foo::<T>()];\n+\n+    let _ = [0; bar::<N>()]; //~ ERROR generic parameters may not\n+    let _ = [0; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _: Foo<{ foo::<T>() }>; //~ ERROR generic parameters may not\n+    let _: Foo<{ bar::<N>() }>; //~ ERROR generic parameters may not\n+    let _: Foo<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ foo::<T>() }>; //~ ERROR generic parameters may not\n+    let _ = Foo::<{ bar::<N>() }>; //~ ERROR generic parameters may not\n+    let _ = Foo::<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+}\n+\n+fn main() {}"}, {"sha": "c8cefc36732b278cde4c5171308e8b34dd2e330b", "filename": "src/test/ui/const-generics/const-param-hygiene.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-hygiene.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+macro_rules! bar {\n+    ($($t:tt)*) => { impl<const N: usize> $($t)* };\n+}\n+\n+macro_rules! baz {\n+    ($t:tt) => { fn test<const M: usize>(&self) -> usize { $t } };\n+}\n+\n+struct Foo<const N: usize>;\n+\n+bar!(Foo<N> { baz!{ M } });\n+\n+fn main() {\n+    assert_eq!(Foo::<7>.test::<3>(), 3);\n+}"}, {"sha": "e8601985287bd9c2e2105d3b0634272b395348dd", "filename": "src/test/ui/const-generics/const-param-in-async.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,35 @@\n+// edition:2018\n+// check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+async fn foo<const N: usize>(arg: [u8; N]) -> usize { arg.len() }\n+\n+async fn bar<const N: usize>() -> [u8; N] {\n+    [0; N]\n+}\n+\n+trait Trait<const N: usize> {\n+    fn fynn(&self) -> usize;\n+}\n+impl<const N: usize> Trait<N> for [u8; N] {\n+    fn fynn(&self) -> usize {\n+        N\n+    }\n+}\n+async fn baz<const N: usize>() -> impl Trait<N> {\n+    [0; N]\n+}\n+\n+async fn biz<const N: usize>(v: impl Trait<N>) -> usize {\n+    v.fynn()\n+}\n+\n+async fn user<const N: usize>() {\n+    let _ = foo::<N>(bar().await).await;\n+    let _ = biz(baz::<N>().await).await;\n+}\n+\n+fn main() { }"}, {"sha": "30749b8bc6d757bd5ddb3e0aac728022161e202e", "filename": "src/test/ui/const-generics/cross_crate_complex.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,28 @@\n+// aux-build:crayte.rs\n+// edition:2018\n+// run-pass\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+extern crate crayte;\n+\n+use crayte::*;\n+\n+async fn foo() {\n+    in_foo(out_foo::<3>());\n+    async_simple([0; 17]).await;\n+    async_in_foo(async_out_foo::<4>().await).await;\n+}\n+\n+struct Faz<const N: usize>;\n+\n+impl<const N: usize> Foo<N> for Faz<N> {}\n+impl<const N: usize> Bar<N> for Faz<N> {\n+    type Assoc = Faz<N>;\n+}\n+\n+fn main() {\n+    let _ = foo;\n+}"}, {"sha": "fdea1fb0c3ead2327e27d149329c08c397f48969", "filename": "src/test/ui/const-generics/exhaustive-value.full.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n+  --> $DIR/exhaustive-value.rs:267:5\n+   |\n+LL |     fn test() {}\n+   |     --------- required by `Foo::test`\n+...\n+LL |     <() as Foo<N>>::test()\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Foo<0_u8>>\n+             <() as Foo<100_u8>>\n+             <() as Foo<101_u8>>\n+             <() as Foo<102_u8>>\n+           and 252 others\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fdea1fb0c3ead2327e27d149329c08c397f48969", "filename": "src/test/ui/const-generics/exhaustive-value.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n+  --> $DIR/exhaustive-value.rs:267:5\n+   |\n+LL |     fn test() {}\n+   |     --------- required by `Foo::test`\n+...\n+LL |     <() as Foo<N>>::test()\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Foo<0_u8>>\n+             <() as Foo<100_u8>>\n+             <() as Foo<101_u8>>\n+             <() as Foo<102_u8>>\n+           and 252 others\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fce036b0da624dc09ac58982141cf37d14643ab8", "filename": "src/test/ui/const-generics/exhaustive-value.rs", "status": "added", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,272 @@\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+trait Foo<const N: u8> {\n+    fn test() {}\n+}\n+impl Foo<0> for () {}\n+impl Foo<1> for () {}\n+impl Foo<2> for () {}\n+impl Foo<3> for () {}\n+impl Foo<4> for () {}\n+impl Foo<5> for () {}\n+impl Foo<6> for () {}\n+impl Foo<7> for () {}\n+impl Foo<8> for () {}\n+impl Foo<9> for () {}\n+impl Foo<10> for () {}\n+impl Foo<11> for () {}\n+impl Foo<12> for () {}\n+impl Foo<13> for () {}\n+impl Foo<14> for () {}\n+impl Foo<15> for () {}\n+impl Foo<16> for () {}\n+impl Foo<17> for () {}\n+impl Foo<18> for () {}\n+impl Foo<19> for () {}\n+impl Foo<20> for () {}\n+impl Foo<21> for () {}\n+impl Foo<22> for () {}\n+impl Foo<23> for () {}\n+impl Foo<24> for () {}\n+impl Foo<25> for () {}\n+impl Foo<26> for () {}\n+impl Foo<27> for () {}\n+impl Foo<28> for () {}\n+impl Foo<29> for () {}\n+impl Foo<30> for () {}\n+impl Foo<31> for () {}\n+impl Foo<32> for () {}\n+impl Foo<33> for () {}\n+impl Foo<34> for () {}\n+impl Foo<35> for () {}\n+impl Foo<36> for () {}\n+impl Foo<37> for () {}\n+impl Foo<38> for () {}\n+impl Foo<39> for () {}\n+impl Foo<40> for () {}\n+impl Foo<41> for () {}\n+impl Foo<42> for () {}\n+impl Foo<43> for () {}\n+impl Foo<44> for () {}\n+impl Foo<45> for () {}\n+impl Foo<46> for () {}\n+impl Foo<47> for () {}\n+impl Foo<48> for () {}\n+impl Foo<49> for () {}\n+impl Foo<50> for () {}\n+impl Foo<51> for () {}\n+impl Foo<52> for () {}\n+impl Foo<53> for () {}\n+impl Foo<54> for () {}\n+impl Foo<55> for () {}\n+impl Foo<56> for () {}\n+impl Foo<57> for () {}\n+impl Foo<58> for () {}\n+impl Foo<59> for () {}\n+impl Foo<60> for () {}\n+impl Foo<61> for () {}\n+impl Foo<62> for () {}\n+impl Foo<63> for () {}\n+impl Foo<64> for () {}\n+impl Foo<65> for () {}\n+impl Foo<66> for () {}\n+impl Foo<67> for () {}\n+impl Foo<68> for () {}\n+impl Foo<69> for () {}\n+impl Foo<70> for () {}\n+impl Foo<71> for () {}\n+impl Foo<72> for () {}\n+impl Foo<73> for () {}\n+impl Foo<74> for () {}\n+impl Foo<75> for () {}\n+impl Foo<76> for () {}\n+impl Foo<77> for () {}\n+impl Foo<78> for () {}\n+impl Foo<79> for () {}\n+impl Foo<80> for () {}\n+impl Foo<81> for () {}\n+impl Foo<82> for () {}\n+impl Foo<83> for () {}\n+impl Foo<84> for () {}\n+impl Foo<85> for () {}\n+impl Foo<86> for () {}\n+impl Foo<87> for () {}\n+impl Foo<88> for () {}\n+impl Foo<89> for () {}\n+impl Foo<90> for () {}\n+impl Foo<91> for () {}\n+impl Foo<92> for () {}\n+impl Foo<93> for () {}\n+impl Foo<94> for () {}\n+impl Foo<95> for () {}\n+impl Foo<96> for () {}\n+impl Foo<97> for () {}\n+impl Foo<98> for () {}\n+impl Foo<99> for () {}\n+impl Foo<100> for () {}\n+impl Foo<101> for () {}\n+impl Foo<102> for () {}\n+impl Foo<103> for () {}\n+impl Foo<104> for () {}\n+impl Foo<105> for () {}\n+impl Foo<106> for () {}\n+impl Foo<107> for () {}\n+impl Foo<108> for () {}\n+impl Foo<109> for () {}\n+impl Foo<110> for () {}\n+impl Foo<111> for () {}\n+impl Foo<112> for () {}\n+impl Foo<113> for () {}\n+impl Foo<114> for () {}\n+impl Foo<115> for () {}\n+impl Foo<116> for () {}\n+impl Foo<117> for () {}\n+impl Foo<118> for () {}\n+impl Foo<119> for () {}\n+impl Foo<120> for () {}\n+impl Foo<121> for () {}\n+impl Foo<122> for () {}\n+impl Foo<123> for () {}\n+impl Foo<124> for () {}\n+impl Foo<125> for () {}\n+impl Foo<126> for () {}\n+impl Foo<127> for () {}\n+impl Foo<128> for () {}\n+impl Foo<129> for () {}\n+impl Foo<130> for () {}\n+impl Foo<131> for () {}\n+impl Foo<132> for () {}\n+impl Foo<133> for () {}\n+impl Foo<134> for () {}\n+impl Foo<135> for () {}\n+impl Foo<136> for () {}\n+impl Foo<137> for () {}\n+impl Foo<138> for () {}\n+impl Foo<139> for () {}\n+impl Foo<140> for () {}\n+impl Foo<141> for () {}\n+impl Foo<142> for () {}\n+impl Foo<143> for () {}\n+impl Foo<144> for () {}\n+impl Foo<145> for () {}\n+impl Foo<146> for () {}\n+impl Foo<147> for () {}\n+impl Foo<148> for () {}\n+impl Foo<149> for () {}\n+impl Foo<150> for () {}\n+impl Foo<151> for () {}\n+impl Foo<152> for () {}\n+impl Foo<153> for () {}\n+impl Foo<154> for () {}\n+impl Foo<155> for () {}\n+impl Foo<156> for () {}\n+impl Foo<157> for () {}\n+impl Foo<158> for () {}\n+impl Foo<159> for () {}\n+impl Foo<160> for () {}\n+impl Foo<161> for () {}\n+impl Foo<162> for () {}\n+impl Foo<163> for () {}\n+impl Foo<164> for () {}\n+impl Foo<165> for () {}\n+impl Foo<166> for () {}\n+impl Foo<167> for () {}\n+impl Foo<168> for () {}\n+impl Foo<169> for () {}\n+impl Foo<170> for () {}\n+impl Foo<171> for () {}\n+impl Foo<172> for () {}\n+impl Foo<173> for () {}\n+impl Foo<174> for () {}\n+impl Foo<175> for () {}\n+impl Foo<176> for () {}\n+impl Foo<177> for () {}\n+impl Foo<178> for () {}\n+impl Foo<179> for () {}\n+impl Foo<180> for () {}\n+impl Foo<181> for () {}\n+impl Foo<182> for () {}\n+impl Foo<183> for () {}\n+impl Foo<184> for () {}\n+impl Foo<185> for () {}\n+impl Foo<186> for () {}\n+impl Foo<187> for () {}\n+impl Foo<188> for () {}\n+impl Foo<189> for () {}\n+impl Foo<190> for () {}\n+impl Foo<191> for () {}\n+impl Foo<192> for () {}\n+impl Foo<193> for () {}\n+impl Foo<194> for () {}\n+impl Foo<195> for () {}\n+impl Foo<196> for () {}\n+impl Foo<197> for () {}\n+impl Foo<198> for () {}\n+impl Foo<199> for () {}\n+impl Foo<200> for () {}\n+impl Foo<201> for () {}\n+impl Foo<202> for () {}\n+impl Foo<203> for () {}\n+impl Foo<204> for () {}\n+impl Foo<205> for () {}\n+impl Foo<206> for () {}\n+impl Foo<207> for () {}\n+impl Foo<208> for () {}\n+impl Foo<209> for () {}\n+impl Foo<210> for () {}\n+impl Foo<211> for () {}\n+impl Foo<212> for () {}\n+impl Foo<213> for () {}\n+impl Foo<214> for () {}\n+impl Foo<215> for () {}\n+impl Foo<216> for () {}\n+impl Foo<217> for () {}\n+impl Foo<218> for () {}\n+impl Foo<219> for () {}\n+impl Foo<220> for () {}\n+impl Foo<221> for () {}\n+impl Foo<222> for () {}\n+impl Foo<223> for () {}\n+impl Foo<224> for () {}\n+impl Foo<225> for () {}\n+impl Foo<226> for () {}\n+impl Foo<227> for () {}\n+impl Foo<228> for () {}\n+impl Foo<229> for () {}\n+impl Foo<230> for () {}\n+impl Foo<231> for () {}\n+impl Foo<232> for () {}\n+impl Foo<233> for () {}\n+impl Foo<234> for () {}\n+impl Foo<235> for () {}\n+impl Foo<236> for () {}\n+impl Foo<237> for () {}\n+impl Foo<238> for () {}\n+impl Foo<239> for () {}\n+impl Foo<240> for () {}\n+impl Foo<241> for () {}\n+impl Foo<242> for () {}\n+impl Foo<243> for () {}\n+impl Foo<244> for () {}\n+impl Foo<245> for () {}\n+impl Foo<246> for () {}\n+impl Foo<247> for () {}\n+impl Foo<248> for () {}\n+impl Foo<249> for () {}\n+impl Foo<250> for () {}\n+impl Foo<251> for () {}\n+impl Foo<252> for () {}\n+impl Foo<253> for () {}\n+impl Foo<254> for () {}\n+impl Foo<255> for () {}\n+\n+fn foo<const N: u8>() {\n+    <() as Foo<N>>::test() //~ ERROR the trait bound `(): Foo<N>`\n+}\n+\n+fn main() {\n+    foo::<7>();\n+}"}, {"sha": "6befa9d1f6994a48e11b3d2424a9a552af286499", "filename": "src/test/ui/const-generics/generic-param-mismatch.full.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.full.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/generic-param-mismatch.rs:7:5\n+   |\n+LL | fn test<const N: usize, const M: usize>() -> [u8; M] {\n+   |                                              ------- expected `[u8; M]` because of return type\n+LL |     [0; N]\n+   |     ^^^^^^ expected `M`, found `N`\n+   |\n+   = note: expected array `[u8; M]`\n+              found array `[u8; N]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6befa9d1f6994a48e11b3d2424a9a552af286499", "filename": "src/test/ui/const-generics/generic-param-mismatch.min.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/generic-param-mismatch.rs:7:5\n+   |\n+LL | fn test<const N: usize, const M: usize>() -> [u8; M] {\n+   |                                              ------- expected `[u8; M]` because of return type\n+LL |     [0; N]\n+   |     ^^^^^^ expected `M`, found `N`\n+   |\n+   = note: expected array `[u8; M]`\n+              found array `[u8; N]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e409094eb734ca20bc19491e72c0a4cca4954a21", "filename": "src/test/ui/const-generics/generic-param-mismatch.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,10 @@\n+// revisions: full min\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+fn test<const N: usize, const M: usize>() -> [u8; M] {\n+    [0; N] //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "f6e9aabd907744151518f582e14cea8647072a41", "filename": "src/test/ui/const-generics/macro_rules-braces.full.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,61 @@\n+error: expressions must be enclosed in braces to be used as const generic arguments\n+  --> $DIR/macro_rules-braces.rs:34:17\n+   |\n+LL |     let _: baz!(N);\n+   |                 ^\n+   |\n+help: enclose the `const` expression in braces\n+   |\n+LL |     let _: baz!({ N });\n+   |                 ^   ^\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/macro_rules-braces.rs:10:13\n+   |\n+LL |             [u8; $x]\n+   |             ^^^^^^^^\n+...\n+LL |     let _: foo!({{ N }});\n+   |            ------------- in this macro invocation\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/macro_rules-braces.rs:15:13\n+   |\n+LL |             [u8; { $x }]\n+   |             ^^^^^^^^^^^^\n+...\n+LL |     let _: bar!({ N });\n+   |            ----------- in this macro invocation\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/macro_rules-braces.rs:20:13\n+   |\n+LL |             Foo<$x>\n+   |             ^^^^^^^\n+...\n+LL |     let _: baz!({{ N }});\n+   |            ------------- in this macro invocation\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/macro_rules-braces.rs:25:13\n+   |\n+LL |             Foo<{ $x }>\n+   |             ^^^^^^^^^^^\n+...\n+LL |     let _: biz!({ N });\n+   |            ----------- in this macro invocation\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "1fe18e3fc0231c03616aa291851476da25862647", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,45 @@\n+error: expressions must be enclosed in braces to be used as const generic arguments\n+  --> $DIR/macro_rules-braces.rs:34:17\n+   |\n+LL |     let _: baz!(N);\n+   |                 ^\n+   |\n+help: enclose the `const` expression in braces\n+   |\n+LL |     let _: baz!({ N });\n+   |                 ^   ^\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/macro_rules-braces.rs:31:20\n+   |\n+LL |     let _: foo!({{ N }});\n+   |                    ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/macro_rules-braces.rs:33:19\n+   |\n+LL |     let _: bar!({ N });\n+   |                   ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/macro_rules-braces.rs:36:20\n+   |\n+LL |     let _: baz!({{ N }});\n+   |                    ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/macro_rules-braces.rs:38:19\n+   |\n+LL |     let _: biz!({ N });\n+   |                   ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "c3e2c8ba20359ff020cc1f28059f583b5747b7ca", "filename": "src/test/ui/const-generics/macro_rules-braces.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,43 @@\n+// revisions: full min\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+fn test<const N: usize>() {\n+    struct Foo<const M: usize>;\n+    macro_rules! foo {\n+        ($x:expr) => {\n+            [u8; $x] //[full]~ ERROR constant expression depends\n+        }\n+    }\n+    macro_rules! bar {\n+        ($x:expr) => {\n+            [u8; { $x }] //[full]~ ERROR constant expression depends\n+        }\n+    }\n+    macro_rules! baz {\n+        ( $x:expr) => {\n+            Foo<$x> //[full]~ ERROR constant expression depends\n+        }\n+    }\n+    macro_rules! biz {\n+        ($x:expr) => {\n+            Foo<{ $x }> //[full]~ ERROR constant expression depends\n+        };\n+    }\n+\n+    let _: foo!(N);\n+    let _: foo!({ N });\n+    let _: foo!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: bar!(N);\n+    let _: bar!({ N }); //[min]~ ERROR generic parameters may not\n+    let _: baz!(N); //~ ERROR expressions must be enclosed in braces\n+    let _: baz!({ N });\n+    let _: baz!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: biz!(N);\n+    let _: biz!({ N }); //[min]~ ERROR generic parameters may not\n+}\n+\n+fn main() {\n+    test::<3>();\n+}"}, {"sha": "cdcaf25094240e586c4f3329eed37d38eb84b1ef", "filename": "src/test/ui/const-generics/where-clauses.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fwhere-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd118d9671f718ce06c8797da6bffb8813a43a6/src%2Ftest%2Fui%2Fconst-generics%2Fwhere-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwhere-clauses.rs?ref=0cd118d9671f718ce06c8797da6bffb8813a43a6", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+trait Bar<const N: usize> { fn bar() {} }\n+trait Foo<const N: usize>: Bar<N> {}\n+\n+fn test<T, const N: usize>() where T: Foo<N> {\n+    <T as Bar<N>>::bar();\n+}\n+\n+struct Faz<const N: usize>;\n+\n+impl<const N: usize> Faz<N> {\n+    fn test<T>() where T: Foo<N> {\n+        <T as Bar<N>>::bar()\n+    }\n+}\n+\n+trait Fiz<const N: usize> {\n+    fn fiz<T>() where T: Foo<N> {\n+        <T as Bar<N>>::bar();\n+    }\n+}\n+\n+impl<const N: usize> Bar<N> for u8 {}\n+impl<const N: usize> Foo<N> for u8 {}\n+impl<const N: usize> Fiz<N> for u8 {}\n+fn main() {\n+    test::<u8, 13>();\n+    Faz::<3>::test::<u8>();\n+    <u8 as Fiz<13>>::fiz::<u8>();\n+}"}]}