{"sha": "2469cba0b17b24d37c7bc4833c56ce027b8c1632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NjljYmEwYjE3YjI0ZDM3YzdiYzQ4MzNjNTZjZTAyN2I4YzE2MzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-17T18:00:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-17T18:00:50Z"}, "message": "Make auto-slice, auto-ptr not exclusive (fixes #3514)", "tree": {"sha": "1a0bad1c3200e60a379826113a539c0cbdf00b81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a0bad1c3200e60a379826113a539c0cbdf00b81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2469cba0b17b24d37c7bc4833c56ce027b8c1632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2469cba0b17b24d37c7bc4833c56ce027b8c1632", "html_url": "https://github.com/rust-lang/rust/commit/2469cba0b17b24d37c7bc4833c56ce027b8c1632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2469cba0b17b24d37c7bc4833c56ce027b8c1632/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527a6f60f14c6f38b524cfd5119c670aa0f9bef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/527a6f60f14c6f38b524cfd5119c670aa0f9bef9", "html_url": "https://github.com/rust-lang/rust/commit/527a6f60f14c6f38b524cfd5119c670aa0f9bef9"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "8eb8f06a3ef55a0ec710a9b74186b20e68d883fc", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2469cba0b17b24d37c7bc4833c56ce027b8c1632/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2469cba0b17b24d37c7bc4833c56ce027b8c1632/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=2469cba0b17b24d37c7bc4833c56ce027b8c1632", "patch": "@@ -168,8 +168,8 @@ impl LookupContext {\n                     // around newtype enums.  They can be further\n                     // deref'd, but they may also have intrinsic\n                     // methods hanging off of them with interior type.\n-                    match self.search_for_appr_autorefd_method(self_ty,\n-                                                               autoderefs) {\n+                    match self.search_for_any_autorefd_method(self_ty,\n+                                                              autoderefs) {\n                         Some(move mme) => { return Some(mme); }\n                         None => {}\n                     }\n@@ -186,7 +186,7 @@ impl LookupContext {\n             }\n         }\n \n-        self.search_for_appr_autorefd_method(self_ty, autoderefs)\n+        self.search_for_any_autorefd_method(self_ty, autoderefs)\n     }\n \n     fn deref(ty: ty::t, enum_dids: &DVec<ast::def_id>) -> Option<ty::t> {\n@@ -527,15 +527,13 @@ impl LookupContext {\n          * Attempts both auto-slice and auto-ptr, as appropriate.\n          */\n \n-        let tcx = self.tcx();\n-\n         match self.search_for_autosliced_method(self_ty, autoderefs) {\n-            Some(mme) => { return mme; }\n+            Some(move mme) => { return Some(move mme); }\n             None => {}\n         }\n \n         match self.search_for_autoptrd_method(self_ty, autoderefs) {\n-            Some(mme) => { return mme; }\n+            Some(move mme) => { return Some(move mme); }\n             None => {}\n         }\n \n@@ -553,6 +551,7 @@ impl LookupContext {\n          * Searches for a candidate by converting things like\n          * `~[]` to `&[]`. */\n \n+        let tcx = self.tcx();\n         match ty::get(self_ty).sty {\n             ty_evec(mt, vstore_box) |\n             ty_evec(mt, vstore_uniq) |\n@@ -593,6 +592,7 @@ impl LookupContext {\n          * appropriate mutability.\n          */\n \n+        let tcx = self.tcx();\n         match ty::get(self_ty).sty {\n             ty_box(*) | ty_uniq(*) | ty_rptr(*) => {\n                 // we should be fully autoderef'd"}, {"sha": "43d9fa5b14bc808845bf80bba803621af7c53458", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2469cba0b17b24d37c7bc4833c56ce027b8c1632/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2469cba0b17b24d37c7bc4833c56ce027b8c1632/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=2469cba0b17b24d37c7bc4833c56ce027b8c1632", "patch": "@@ -0,0 +1,16 @@\n+trait Pushable<T> {\n+    fn push_val(&mut self, +t: T);\n+}\n+\n+impl<T> ~[T]: Pushable<T> {\n+    fn push_val(&mut self, +t: T) {\n+        vec::push(*self, t);\n+    }\n+}\n+\n+fn main() {\n+    let mut v = ~[1];\n+    v.push_val(2);\n+    v.push_val(3);\n+    assert v == ~[1, 2, 3];\n+}\n\\ No newline at end of file"}]}