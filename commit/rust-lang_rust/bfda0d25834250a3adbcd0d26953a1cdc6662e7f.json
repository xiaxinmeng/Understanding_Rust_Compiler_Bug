{"sha": "bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZGEwZDI1ODM0MjUwYTNhZGJjZDBkMjY5NTNhMWNkYzY2NjJlN2Y=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-08-30T08:02:29Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-10-08T01:59:31Z"}, "message": "WIP: Command to open docs under cursor", "tree": {"sha": "439fa97a999360cb5fe4602e7ab26d66aa6a3662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439fa97a999360cb5fe4602e7ab26d66aa6a3662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "html_url": "https://github.com/rust-lang/rust/commit/bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95e666b106b2f63ab2b350e656c9e8b96441fa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95e666b106b2f63ab2b350e656c9e8b96441fa7", "html_url": "https://github.com/rust-lang/rust/commit/e95e666b106b2f63ab2b350e656c9e8b96441fa7"}], "stats": {"total": 180, "additions": 176, "deletions": 4}, "files": [{"sha": "6453695979364d661656e7f3d4f22d75ec719871", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -382,6 +382,14 @@ impl Analysis {\n         self.with_db(|db| hover::hover(db, position, links_in_hover, markdown))\n     }\n \n+    /// Return URL(s) for the documentation of the symbol under the cursor.\n+    pub fn get_doc_url(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancelable<Option<link_rewrite::DocumentationLink>> {\n+        self.with_db(|db| link_rewrite::get_doc_url(db, &position))\n+    }\n+\n     /// Computes parameter information for the given call expression.\n     pub fn call_info(&self, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n         self.with_db(|db| call_info::call_info(db, position))"}, {"sha": "80005c06edf105ee27c3b136262567466c8417bc", "filename": "crates/ide/src/link_rewrite.rs", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flink_rewrite.rs?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -8,6 +8,16 @@ use pulldown_cmark::{CowStr, Event, LinkType, Options, Parser, Tag};\n use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n use url::Url;\n \n+use crate::{FilePosition, Semantics};\n+use hir::{get_doc_link, resolve_doc_link};\n+use ide_db::{\n+    defs::{classify_name, classify_name_ref, Definition},\n+    RootDatabase,\n+};\n+use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n+\n+pub type DocumentationLink = String;\n+\n /// Rewrite documentation links in markdown to point to an online host (e.g. docs.rs)\n pub fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Definition) -> String {\n     let doc = Parser::new_with_broken_link_callback(\n@@ -80,6 +90,37 @@ pub fn remove_links(markdown: &str) -> String {\n     out\n }\n \n+pub fn get_doc_link<T: Resolvable + Clone>(db: &dyn HirDatabase, definition: &T) -> Option<String> {\n+    eprintln!(\"hir::doc_links::get_doc_link\");\n+    let module_def = definition.clone().try_into_module_def()?;\n+\n+    get_doc_link_impl(db, &module_def)\n+}\n+\n+// TODO:\n+// BUG: For Option\n+// Returns https://doc.rust-lang.org/nightly/core/prelude/v1/enum.Option.html#variant.Some\n+// Instead of https://doc.rust-lang.org/nightly/core/option/enum.Option.html\n+//\n+// BUG: For methods\n+// import_map.path_of(ns) fails, is not designed to resolve methods\n+fn get_doc_link_impl(db: &dyn HirDatabase, moddef: &ModuleDef) -> Option<String> {\n+    eprintln!(\"get_doc_link_impl: {:#?}\", moddef);\n+    let ns = ItemInNs::Types(moddef.clone().into());\n+\n+    let module = moddef.module(db)?;\n+    let krate = module.krate();\n+    let import_map = db.import_map(krate.into());\n+    let base = once(krate.display_name(db).unwrap())\n+        .chain(import_map.path_of(ns).unwrap().segments.iter().map(|name| format!(\"{}\", name)))\n+        .join(\"/\");\n+\n+    get_doc_url(db, &krate)\n+        .and_then(|url| url.join(&base).ok())\n+        .and_then(|url| get_symbol_filename(db, &moddef).as_deref().and_then(|f| url.join(f).ok()))\n+        .map(|url| url.into_string())\n+}\n+\n fn rewrite_intra_doc_link(\n     db: &RootDatabase,\n     def: Definition,\n@@ -138,7 +179,34 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n         .map(|url| url.into_string())\n }\n \n-// Rewrites a markdown document, resolving links using `callback` and additionally striping prefixes/suffixes on link titles.\n+// FIXME: This should either be moved, or the module should be renamed.\n+/// Retrieve a link to documentation for the given symbol.\n+pub fn get_doc_url(db: &RootDatabase, position: &FilePosition) -> Option<DocumentationLink> {\n+    let sema = Semantics::new(db);\n+    let file = sema.parse(position.file_id).syntax().clone();\n+    let token = pick_best(file.token_at_offset(position.offset))?;\n+    let token = sema.descend_into_macros(token);\n+\n+    let node = token.parent();\n+    let definition = match_ast! {\n+        match node {\n+            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition(sema.db)),\n+            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition(sema.db)),\n+            _ => None,\n+        }\n+    };\n+\n+    match definition? {\n+        Definition::Macro(t) => get_doc_link(db, &t),\n+        Definition::Field(t) => get_doc_link(db, &t),\n+        Definition::ModuleDef(t) => get_doc_link(db, &t),\n+        Definition::SelfType(t) => get_doc_link(db, &t),\n+        Definition::Local(t) => get_doc_link(db, &t),\n+        Definition::TypeParam(t) => get_doc_link(db, &t),\n+    }\n+}\n+\n+/// Rewrites a markdown document, applying 'callback' to each link.\n fn map_links<'e>(\n     events: impl Iterator<Item = Event<'e>>,\n     callback: impl Fn(&str, &str) -> (String, String),\n@@ -275,3 +343,15 @@ fn get_symbol_filename(db: &RootDatabase, definition: &ModuleDef) -> Option<Stri\n         ModuleDef::Static(s) => format!(\"static.{}.html\", s.name(db)?),\n     })\n }\n+\n+fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n+    return tokens.max_by_key(priority);\n+    fn priority(n: &SyntaxToken) -> usize {\n+        match n.kind() {\n+            IDENT | INT_NUMBER => 3,\n+            T!['('] | T![')'] => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        }\n+    }\n+}"}, {"sha": "ec8c8fecdd65819f190d93fb52afec57d322cc19", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -34,7 +34,7 @@ use crate::{\n     config::RustfmtConfig,\n     from_json, from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n-    lsp_ext::{self, InlayHint, InlayHintsParams},\n+    lsp_ext::{self, DocumentationLink, InlayHint, InlayHintsParams, OpenDocsParams},\n     to_proto, LspError, Result,\n };\n \n@@ -1310,6 +1310,19 @@ pub(crate) fn handle_semantic_tokens_range(\n     Ok(Some(semantic_tokens.into()))\n }\n \n+pub(crate) fn handle_open_docs(\n+    snap: GlobalStateSnapshot,\n+    params: OpenDocsParams,\n+) -> Result<DocumentationLink> {\n+    let _p = profile::span(\"handle_open_docs\");\n+    let position = from_proto::file_position(&snap, params.position)?;\n+\n+    // FIXME: Propogate or ignore this error instead of panicking.\n+    let remote = snap.analysis.get_doc_url(position)?.unwrap();\n+\n+    Ok(DocumentationLink { remote })\n+}\n+\n fn implementation_title(count: usize) -> String {\n     if count == 1 {\n         \"1 implementation\".into()"}, {"sha": "83a20802f655b638eebf371bc25444524fd59a17", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -347,3 +347,31 @@ pub struct CommandLink {\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub tooltip: Option<String>,\n }\n+\n+pub enum OpenDocs {}\n+\n+impl Request for OpenDocs {\n+    type Params = OpenDocsParams;\n+    type Result = DocumentationLink;\n+    const METHOD: &'static str = \"rust-analyzer/openDocs\";\n+}\n+\n+#[derive(Debug, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct OpenDocsParams {\n+    // TODO: I don't know the difference between these two methods of passing position.\n+    #[serde(flatten)]\n+    pub position: lsp_types::TextDocumentPositionParams,\n+    // pub textDocument: lsp_types::TextDocumentIdentifier,\n+    // pub position: lsp_types::Position,\n+}\n+\n+#[derive(Debug, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct DocumentationLink {\n+    pub remote: String, // TODO: Better API?\n+                        // #[serde(skip_serializing_if = \"Option::is_none\")]\n+                        // pub remote: Option<String>,\n+                        // #[serde(skip_serializing_if = \"Option::is_none\")]\n+                        // pub local: Option<String>\n+}"}, {"sha": "75f85011d9e8f93fcee17c3281983d1f8c163ce4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -384,6 +384,7 @@ impl GlobalState {\n             .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)?\n             .on::<lsp_ext::ResolveCodeActionRequest>(handlers::handle_resolve_code_action)?\n             .on::<lsp_ext::HoverRequest>(handlers::handle_hover)?\n+            .on::<lsp_ext::OpenDocs>(handlers::handle_open_docs)?\n             .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n             .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n             .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)?"}, {"sha": "4bd3117fc80660d47bc3e9b766854c0073c0fa26", "filename": "editors/code/package.json", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -182,6 +182,11 @@\n                 \"command\": \"rust-analyzer.toggleInlayHints\",\n                 \"title\": \"Toggle inlay hints\",\n                 \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.openDocs\",\n+                \"title\": \"Open docs under cursor\",\n+                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": [\n@@ -1044,6 +1049,10 @@\n                 {\n                     \"command\": \"rust-analyzer.toggleInlayHints\",\n                     \"when\": \"inRustProject\"\n+                },\n+                {\n+                    \"command\": \"rust-analyzer.openDocs\",\n+                    \"when\": \"inRustProject\"\n                 }\n             ]\n         }"}, {"sha": "b22cd450b0728b1523b023084546a7ab966dd92c", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -419,10 +419,31 @@ export function gotoLocation(ctx: Ctx): Cmd {\n     };\n }\n \n+export function openDocs(ctx: Ctx): Cmd {\n+    return async () => {\n+        console.log(\"running openDocs\");\n+\n+        const client = ctx.client;\n+        const editor = vscode.window.activeTextEditor;\n+        if (!editor || !client) {\n+            console.log(\"not yet ready\");\n+            return\n+        };\n+\n+        const position = editor.selection.active;\n+        const textDocument = { uri: editor.document.uri.toString() };\n+\n+        const doclink = await client.sendRequest(ra.openDocs, { position, textDocument });\n+\n+        vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(doclink.remote));\n+    };\n+\n+}\n+\n export function resolveCodeAction(ctx: Ctx): Cmd {\n     const client = ctx.client;\n-    return async (params: ra.ResolveCodeActionParams) => {\n-        const item: lc.WorkspaceEdit = await client.sendRequest(ra.resolveCodeAction, params);\n+    return async () => {\n+        const item: lc.WorkspaceEdit = await client.sendRequest(ra.resolveCodeAction, null);\n         if (!item) {\n             return;\n         }"}, {"sha": "569e747bd47cf4cedb095b39db8477db08411300", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -118,3 +118,14 @@ export interface CommandLinkGroup {\n     title?: string;\n     commands: CommandLink[];\n }\n+\n+export interface DocumentationLink {\n+    remote: string;\n+}\n+\n+export interface OpenDocsParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: lc.Position;\n+}\n+\n+export const openDocs = new lc.RequestType<OpenDocsParams, DocumentationLink, void>('rust-analyzer/openDocs');"}, {"sha": "09543e348a82805f36ba5797b1133dd92e556ee0", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bfda0d25834250a3adbcd0d26953a1cdc6662e7f/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=bfda0d25834250a3adbcd0d26953a1cdc6662e7f", "patch": "@@ -110,6 +110,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('run', commands.run);\n     ctx.registerCommand('debug', commands.debug);\n     ctx.registerCommand('newDebugConfig', commands.newDebugConfig);\n+    ctx.registerCommand('openDocs', commands.openDocs);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand('onEnter', commands.onEnter);"}]}