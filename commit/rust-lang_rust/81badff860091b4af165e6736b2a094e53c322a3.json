{"sha": "81badff860091b4af165e6736b2a094e53c322a3", "node_id": "C_kwDOAAsO6NoAKDgxYmFkZmY4NjAwOTFiNGFmMTY1ZTY3MzZiMmEwOTRlNTNjMzIyYTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-31T04:46:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:45Z"}, "message": "Add tests", "tree": {"sha": "a873f470a5180217421335740c5ac1cef53ea4d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a873f470a5180217421335740c5ac1cef53ea4d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81badff860091b4af165e6736b2a094e53c322a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81badff860091b4af165e6736b2a094e53c322a3", "html_url": "https://github.com/rust-lang/rust/commit/81badff860091b4af165e6736b2a094e53c322a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81badff860091b4af165e6736b2a094e53c322a3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8fa74ae45024d1120a73c15a3c21f675b25f1f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8fa74ae45024d1120a73c15a3c21f675b25f1f4", "html_url": "https://github.com/rust-lang/rust/commit/e8fa74ae45024d1120a73c15a3c21f675b25f1f4"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "de7966c66b057f085fa0bcbfb1c5ac16ede8c4ae", "filename": "src/test/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs?ref=81badff860091b4af165e6736b2a094e53c322a3", "patch": "@@ -0,0 +1,5 @@\n+trait Foo {\n+    fn bar() -> impl Sized; //~ ERROR `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+}\n+\n+fn main() {}"}, {"sha": "a41f5789fdbfaa7bf58939fcf80e004546c278fe", "filename": "src/test/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr?ref=81badff860091b4af165e6736b2a094e53c322a3", "patch": "@@ -0,0 +1,9 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:2:17\n+   |\n+LL |     fn bar() -> impl Sized;\n+   |                 ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "bb4e0d44f3eff2bd4fc001d11036f82ca11a9960", "filename": "src/test/ui/impl-trait/in-trait/doesnt-satisfy.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs?ref=81badff860091b4af165e6736b2a094e53c322a3", "patch": "@@ -0,0 +1,13 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn bar() -> impl std::fmt::Display;\n+}\n+\n+impl Foo for () {\n+    fn bar() -> () {}\n+    //~^ ERROR `()` doesn't implement `std::fmt::Display`\n+}\n+\n+fn main() {}"}, {"sha": "aa5492d285ed6f9ecbbbca71e40efcae6a4e3649", "filename": "src/test/ui/impl-trait/in-trait/doesnt-satisfy.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.stderr?ref=81badff860091b4af165e6736b2a094e53c322a3", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/doesnt-satisfy.rs:9:17\n+   |\n+LL |     fn bar() -> () {}\n+   |                 ^^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `Foo::bar::{opaque#0}`\n+  --> $DIR/doesnt-satisfy.rs:5:22\n+   |\n+LL |     fn bar() -> impl std::fmt::Display;\n+   |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::bar::{opaque#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3ac264e8ebac566251ab8df5a1db51d54f35019d", "filename": "src/test/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs?ref=81badff860091b4af165e6736b2a094e53c322a3", "patch": "@@ -0,0 +1,19 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Display;\n+\n+trait Foo {\n+    fn bar(&self) -> impl Display;\n+}\n+\n+impl Foo for () {\n+    fn bar(&self) -> impl Display {\n+        \"Hello, world\"\n+    }\n+}\n+\n+fn main() {\n+    let x: &str = ().bar();\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "15edda4834015f1d14ea21a1f9f97bb6ca0d49fa", "filename": "src/test/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.stderr?ref=81badff860091b4af165e6736b2a094e53c322a3", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/opaque-in-impl-is-opaque.rs:17:19\n+   |\n+LL |     fn bar(&self) -> impl Display {\n+   |                      ------------ the found opaque type\n+...\n+LL |     let x: &str = ().bar();\n+   |            ----   ^^^^^^^^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&str`\n+            found opaque type `impl std::fmt::Display`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a777cbcd529a6b251b5fd5ce401fe3d52a516a47", "filename": "src/test/ui/impl-trait/in-trait/opaque-in-impl.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs?ref=81badff860091b4af165e6736b2a094e53c322a3", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Display;\n+\n+trait Foo {\n+    fn bar(&self) -> impl Display;\n+}\n+\n+impl Foo for () {\n+    fn bar(&self) -> impl Display {\n+        \"Hello, world\"\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{}\", ().bar());\n+}"}, {"sha": "4cbe682b46f736d987f8c49baedad2560d708f6e", "filename": "src/test/ui/impl-trait/in-trait/success.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81badff860091b4af165e6736b2a094e53c322a3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs?ref=81badff860091b4af165e6736b2a094e53c322a3", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Display;\n+\n+trait Foo {\n+    fn bar(&self) -> impl Display;\n+}\n+\n+impl Foo for i32 {\n+    fn bar(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+impl Foo for &'static str {\n+    fn bar(&self) -> &'static str {\n+        *self\n+    }\n+}\n+\n+struct Yay;\n+\n+impl Foo for Yay {\n+    fn bar(&self) -> String {\n+        String::from(\":^)\")\n+    }\n+}\n+\n+fn foo_generically<T: Foo>(t: T) {\n+    println!(\"{}\", t.bar());\n+}\n+\n+fn main() {\n+    println!(\"{}\", \"Hello, world.\".bar());\n+    println!(\"The answer is {}!\", 42.bar());\n+    foo_generically(Yay);\n+}"}]}