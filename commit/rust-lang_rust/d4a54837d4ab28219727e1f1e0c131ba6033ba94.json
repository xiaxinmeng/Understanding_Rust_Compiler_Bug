{"sha": "d4a54837d4ab28219727e1f1e0c131ba6033ba94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YTU0ODM3ZDRhYjI4MjE5NzI3ZTFmMWUwYzEzMWJhNjAzM2JhOTQ=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-06T18:07:29Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-06T18:07:29Z"}, "message": "Add a test to check that badly written Ord impl do not cause double frees", "tree": {"sha": "4b77978544f2782f4aa3859cf91133c9dc487e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b77978544f2782f4aa3859cf91133c9dc487e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4a54837d4ab28219727e1f1e0c131ba6033ba94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a54837d4ab28219727e1f1e0c131ba6033ba94", "html_url": "https://github.com/rust-lang/rust/commit/d4a54837d4ab28219727e1f1e0c131ba6033ba94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4a54837d4ab28219727e1f1e0c131ba6033ba94/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eee86d4340668037c12cd4c69cc40daa6564f2fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee86d4340668037c12cd4c69cc40daa6564f2fb", "html_url": "https://github.com/rust-lang/rust/commit/eee86d4340668037c12cd4c69cc40daa6564f2fb"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "7bafb324dad04fc4e4629b218f2db9de12f00f6c", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4a54837d4ab28219727e1f1e0c131ba6033ba94/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a54837d4ab28219727e1f1e0c131ba6033ba94/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=d4a54837d4ab28219727e1f1e0c131ba6033ba94", "patch": "@@ -1043,6 +1043,27 @@ mod test_tim_sort {\n         tim_sort(arr);\n         fail ~\"Guarantee the fail\";\n     }\n+\n+    struct DVal { val: ~uint }\n+    impl DVal: Ord {\n+        pure fn lt(other: &DVal) -> bool { true }\n+        pure fn le(other: &DVal) -> bool { true }\n+        pure fn gt(other: &DVal) -> bool { true }\n+        pure fn ge(other: &DVal) -> bool { true }\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_bad_Ord_impl() {\n+        let rng = rand::Rng();\n+        let mut arr = do vec::from_fn(500) |_i| {\n+            let randVal = rng.gen_uint();\n+            DVal { val: ~randVal }\n+        };\n+\n+        tim_sort(arr);\n+        fail ~\"Guarantee the fail\";\n+    }\n }\n \n /*fn f<T: Ord>(array: &[mut T]) { array[0] <-> array[0] }"}]}