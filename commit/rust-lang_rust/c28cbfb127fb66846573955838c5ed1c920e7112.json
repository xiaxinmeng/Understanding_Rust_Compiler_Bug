{"sha": "c28cbfb127fb66846573955838c5ed1c920e7112", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOGNiZmIxMjdmYjY2ODQ2NTczOTU1ODM4YzVlZDFjOTIwZTcxMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-28T23:58:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-28T23:58:11Z"}, "message": "Auto merge of #42797 - arielb1:ex-falso-ice, r=nikomatsakis\n\navoid translating roots with predicates that do not hold\n\nFinally I got around to doing this.\n\nFixes #37725.\n\nr? @nikomatsakis", "tree": {"sha": "53f179b447500e49c1df2015e31d22a0b0c6fad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53f179b447500e49c1df2015e31d22a0b0c6fad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28cbfb127fb66846573955838c5ed1c920e7112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28cbfb127fb66846573955838c5ed1c920e7112", "html_url": "https://github.com/rust-lang/rust/commit/c28cbfb127fb66846573955838c5ed1c920e7112", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28cbfb127fb66846573955838c5ed1c920e7112/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c65d29615c391c958ebf75dd65258ec23e175c", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c65d29615c391c958ebf75dd65258ec23e175c", "html_url": "https://github.com/rust-lang/rust/commit/69c65d29615c391c958ebf75dd65258ec23e175c"}, {"sha": "a6ca302097ff30c0eb7746c5ef642fa4af4b6285", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ca302097ff30c0eb7746c5ef642fa4af4b6285", "html_url": "https://github.com/rust-lang/rust/commit/a6ca302097ff30c0eb7746c5ef642fa4af4b6285"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "249cf6b1e275ebb7bdef7786d7c4057d34116c67", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c28cbfb127fb66846573955838c5ed1c920e7112/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28cbfb127fb66846573955838c5ed1c920e7112/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=c28cbfb127fb66846573955838c5ed1c920e7112", "patch": "@@ -608,7 +608,7 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"normalize_and_test_predicates(predicates={:?})\",\n            predicates);\n \n-    tcx.infer_ctxt().enter(|infcx| {\n+    let result = tcx.infer_ctxt().enter(|infcx| {\n         let param_env = ty::ParamEnv::empty(Reveal::All);\n         let mut selcx = SelectionContext::new(&infcx);\n         let mut fulfill_cx = FulfillmentContext::new();\n@@ -624,7 +624,10 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         fulfill_cx.select_all_or_error(&infcx).is_ok()\n-    })\n+    });\n+    debug!(\"normalize_and_test_predicates(predicates={:?}) = {:?}\",\n+           predicates, result);\n+    result\n }\n \n /// Given a trait `trait_ref`, iterates the vtable entries"}, {"sha": "a76abcf7b49a69ab5e187c19bd9385f6ee344c05", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c28cbfb127fb66846573955838c5ed1c920e7112/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28cbfb127fb66846573955838c5ed1c920e7112/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=c28cbfb127fb66846573955838c5ed1c920e7112", "patch": "@@ -195,7 +195,7 @@ use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem};\n use rustc::traits;\n-use rustc::ty::subst::{Substs, Subst};\n+use rustc::ty::subst::Substs;\n use rustc::ty::{self, TypeFoldable, TyCtxt};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::mir::{self, Location};\n@@ -304,6 +304,11 @@ fn collect_roots<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         scx.tcx().hir.krate().visit_all_item_likes(&mut visitor);\n     }\n \n+    // We can only translate items that are instantiable - items all of\n+    // whose predicates hold. Luckily, items that aren't instantiable\n+    // can't actually be used, so we can just skip translating them.\n+    roots.retain(|root| root.is_instantiable(scx.tcx()));\n+\n     roots\n }\n \n@@ -937,14 +942,9 @@ fn create_trans_items_for_default_impls<'a, 'tcx>(scx: &SharedCrateContext<'a, '\n                     let instance =\n                         monomorphize::resolve(scx, method.def_id, callee_substs);\n \n-                    let predicates = tcx.predicates_of(instance.def_id()).predicates\n-                        .subst(tcx, instance.substs);\n-                    if !traits::normalize_and_test_predicates(tcx, predicates) {\n-                        continue;\n-                    }\n-\n-                    if should_trans_locally(tcx, &instance) {\n-                        output.push(create_fn_trans_item(instance));\n+                    let trans_item = create_fn_trans_item(instance);\n+                    if trans_item.is_instantiable(tcx) && should_trans_locally(tcx, &instance) {\n+                        output.push(trans_item);\n                     }\n                 }\n             }"}, {"sha": "2a6e7c5ace6cf0a8962960d08015c4f65208a37c", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c28cbfb127fb66846573955838c5ed1c920e7112/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28cbfb127fb66846573955838c5ed1c920e7112/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=c28cbfb127fb66846573955838c5ed1c920e7112", "patch": "@@ -25,8 +25,9 @@ use llvm;\n use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Subst, Substs};\n use syntax::ast::{self, NodeId};\n use syntax::attr;\n use syntax_pos::Span;\n@@ -250,6 +251,44 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         }\n     }\n \n+    /// Returns whether this instance is instantiable - whether it has no unsatisfied\n+    /// predicates.\n+    ///\n+    /// In order to translate an item, all of its predicates must hold, because\n+    /// otherwise the item does not make sense. Type-checking ensures that\n+    /// the predicates of every item that is *used by* a valid item *do*\n+    /// hold, so we can rely on that.\n+    ///\n+    /// However, we translate collector roots (reachable items) and functions\n+    /// in vtables when they are seen, even if they are not used, and so they\n+    /// might not be instantiable. For example, a programmer can define this\n+    /// public function:\n+    ///\n+    ///     pub fn foo<'a>(s: &'a mut ()) where &'a mut (): Clone {\n+    ///         <&mut () as Clone>::clone(&s);\n+    ///     }\n+    ///\n+    /// That function can't be translated, because the method `<&mut () as Clone>::clone`\n+    /// does not exist. Luckily for us, that function can't ever be used,\n+    /// because that would require for `&'a mut (): Clone` to hold, so we\n+    /// can just not emit any code, or even a linker reference for it.\n+    ///\n+    /// Similarly, if a vtable method has such a signature, and therefore can't\n+    /// be used, we can just not emit it and have a placeholder (a null pointer,\n+    /// which will never be accessed) in its place.\n+    pub fn is_instantiable(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n+        debug!(\"is_instantiable({:?})\", self);\n+        let (def_id, substs) = match *self {\n+            TransItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n+            TransItem::Static(node_id) => (tcx.hir.local_def_id(node_id), Substs::empty()),\n+            // global asm never has predicates\n+            TransItem::GlobalAsm(..) => return true\n+        };\n+\n+        let predicates = tcx.predicates_of(def_id).predicates.subst(tcx, substs);\n+        traits::normalize_and_test_predicates(tcx, predicates)\n+    }\n+\n     pub fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n         let hir_map = &tcx.hir;\n "}, {"sha": "5ed1295c85c76c69021fc7f89277adad71a30ee6", "filename": "src/test/run-pass/issue-37725.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c28cbfb127fb66846573955838c5ed1c920e7112/src%2Ftest%2Frun-pass%2Fissue-37725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28cbfb127fb66846573955838c5ed1c920e7112/src%2Ftest%2Frun-pass%2Fissue-37725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-37725.rs?ref=c28cbfb127fb66846573955838c5ed1c920e7112", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn foo<'a>(s: &'a mut ()) where &'a mut (): Clone {\n+    s.clone();\n+}\n+fn main() {}"}]}