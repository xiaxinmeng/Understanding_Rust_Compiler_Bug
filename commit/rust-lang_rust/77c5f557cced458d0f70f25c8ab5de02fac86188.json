{"sha": "77c5f557cced458d0f70f25c8ab5de02fac86188", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YzVmNTU3Y2NlZDQ1OGQwZjcwZjI1YzhhYjVkZTAyZmFjODYxODg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-26T01:50:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-26T01:50:17Z"}, "message": "Rollup merge of #60183 - tmandry:chalk-builtin-copy-clone, r=scalexm\n\nChalkify: Add builtin Copy/Clone\n\nr? @nikomatsakis", "tree": {"sha": "4163c927ad574cb88731819546ffa0807fa0037a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4163c927ad574cb88731819546ffa0807fa0037a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77c5f557cced458d0f70f25c8ab5de02fac86188", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcwmPZCRBK7hj4Ov3rIwAAdHIIABouKwbOikBtCg9XToqZts4k\nl6L+kApFPbpvx1IHVNjNlhuPNzOQFwMS6zWFIzqAws8VHvJbYY+r/tnrbWtLEwHY\nx8WYL+NB412K3xtQMiQIIvGm1Kzf0JcdbmPb6hIueO5W9MtyCUTR7oKRdanyLUPw\nF9uqH8YjsltNsvEP/z2Of/qJCN9twcgLx063Q4+0OJyDZOVoFIhoi3ciCNy40XM6\nZ97DdRcg7Xld4tQSfmA77PU8ZLjvkJBmKLxqTWacBGPldV99DM0xImzPlFVfmtNN\nqw1cISvDW6oxIqix5M6+XpJSCSJXSa/l/QIV60c72mH6GdkAt5VDe4QgUj2KQUE=\n=r7jW\n-----END PGP SIGNATURE-----\n", "payload": "tree 4163c927ad574cb88731819546ffa0807fa0037a\nparent 8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9\nparent 56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556243417 +0200\ncommitter GitHub <noreply@github.com> 1556243417 +0200\n\nRollup merge of #60183 - tmandry:chalk-builtin-copy-clone, r=scalexm\n\nChalkify: Add builtin Copy/Clone\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77c5f557cced458d0f70f25c8ab5de02fac86188", "html_url": "https://github.com/rust-lang/rust/commit/77c5f557cced458d0f70f25c8ab5de02fac86188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77c5f557cced458d0f70f25c8ab5de02fac86188/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9", "html_url": "https://github.com/rust-lang/rust/commit/8bdb91d9ffc9d5f008dae971faadcb06cf2a3bb9"}, {"sha": "56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8", "html_url": "https://github.com/rust-lang/rust/commit/56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8"}], "stats": {"total": 246, "additions": 208, "deletions": 38}, "files": [{"sha": "cf69885c3e07c13679fe21bcf7e8a892e94bd6c2", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77c5f557cced458d0f70f25c8ab5de02fac86188/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c5f557cced458d0f70f25c8ab5de02fac86188/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=77c5f557cced458d0f70f25c8ab5de02fac86188", "patch": "@@ -2505,16 +2505,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::Closure(def_id, substs) => {\n-                let trait_id = obligation.predicate.def_id();\n-                let is_copy_trait = Some(trait_id) == self.tcx().lang_items().copy_trait();\n-                let is_clone_trait = Some(trait_id) == self.tcx().lang_items().clone_trait();\n-                if is_copy_trait || is_clone_trait {\n-                    Where(ty::Binder::bind(\n-                        substs.upvar_tys(def_id, self.tcx()).collect(),\n-                    ))\n-                } else {\n-                    None\n-                }\n+                // (*) binder moved here\n+                Where(ty::Binder::bind(\n+                    substs.upvar_tys(def_id, self.tcx()).collect(),\n+                ))\n             }\n \n             ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {"}, {"sha": "27af8511915d1bce01d4604bbf9d997451c07ad5", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 141, "deletions": 27, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/77c5f557cced458d0f70f25c8ab5de02fac86188/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c5f557cced458d0f70f25c8ab5de02fac86188/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=77c5f557cced458d0f70f25c8ab5de02fac86188", "patch": "@@ -6,10 +6,42 @@ use rustc::traits::{\n };\n use rustc::ty;\n use rustc::ty::subst::{InternalSubsts, Subst};\n+use rustc::hir;\n use rustc::hir::def_id::DefId;\n use crate::lowering::Lower;\n use crate::generic_types;\n \n+/// Returns a predicate of the form\n+/// `Implemented(ty: Trait) :- Implemented(nested: Trait)...`\n+/// where `Trait` is specified by `trait_def_id`.\n+fn builtin_impl_clause(\n+    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    ty: ty::Ty<'tcx>,\n+    nested: &[ty::Ty<'tcx>],\n+    trait_def_id: DefId\n+) -> ProgramClause<'tcx> {\n+    ProgramClause {\n+        goal: ty::TraitPredicate {\n+            trait_ref: ty::TraitRef {\n+                def_id: trait_def_id,\n+                substs: tcx.mk_substs_trait(ty, &[]),\n+            },\n+        }.lower(),\n+        hypotheses: tcx.mk_goals(\n+            nested.iter()\n+                .cloned()\n+                .map(|nested_ty| ty::TraitRef {\n+                    def_id: trait_def_id,\n+                    substs: tcx.mk_substs_trait(nested_ty, &[]),\n+                })\n+                .map(|trait_ref| ty::TraitPredicate { trait_ref })\n+                .map(|pred| GoalKind::DomainGoal(pred.lower()))\n+                .map(|goal_kind| tcx.mk_goal(goal_kind))\n+        ),\n+        category: ProgramClauseCategory::Other,\n+    }\n+}\n+\n crate fn assemble_builtin_unsize_impls<'tcx>(\n     tcx: ty::TyCtxt<'_, '_, 'tcx>,\n     unsize_def_id: DefId,\n@@ -93,26 +125,7 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n     let mut push_builtin_impl = |ty: ty::Ty<'tcx>, nested: &[ty::Ty<'tcx>]| {\n-        let clause = ProgramClause {\n-            goal: ty::TraitPredicate {\n-                trait_ref: ty::TraitRef {\n-                    def_id: sized_def_id,\n-                    substs: tcx.mk_substs_trait(ty, &[]),\n-                },\n-            }.lower(),\n-            hypotheses: tcx.mk_goals(\n-                nested.iter()\n-                    .cloned()\n-                    .map(|nested_ty| ty::TraitRef {\n-                        def_id: sized_def_id,\n-                        substs: tcx.mk_substs_trait(nested_ty, &[]),\n-                    })\n-                    .map(|trait_ref| ty::TraitPredicate { trait_ref })\n-                    .map(|pred| GoalKind::DomainGoal(pred.lower()))\n-                    .map(|goal_kind| tcx.mk_goal(goal_kind))\n-            ),\n-            category: ProgramClauseCategory::Other,\n-        };\n+        let clause = builtin_impl_clause(tcx, ty, nested, sized_def_id);\n         // Bind innermost bound vars that may exist in `ty` and `nested`.\n         clauses.push(Clause::ForAll(ty::Binder::bind(clause)));\n     };\n@@ -124,6 +137,8 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n         ty::Int(..) |\n         ty::Uint(..) |\n         ty::Float(..) |\n+        ty::Infer(ty::IntVar(_)) |\n+        ty::Infer(ty::FloatVar(_)) |\n         ty::Error |\n         ty::Never => push_builtin_impl(ty, &[]),\n \n@@ -175,14 +190,11 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n             push_builtin_impl(adt, &sized_constraint);\n         }\n \n-        // Artificially trigger an ambiguity.\n-        ty::Infer(..) => {\n-            // Everybody can find at least two types to unify against:\n-            // general ty vars, int vars and float vars.\n+        // Artificially trigger an ambiguity by adding two possible types to\n+        // unify against.\n+        ty::Infer(ty::TyVar(_)) => {\n             push_builtin_impl(tcx.types.i32, &[]);\n-            push_builtin_impl(tcx.types.u32, &[]);\n             push_builtin_impl(tcx.types.f32, &[]);\n-            push_builtin_impl(tcx.types.f64, &[]);\n         }\n \n         ty::Projection(_projection_ty) => {\n@@ -203,6 +215,108 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n         ty::Opaque(..) => (),\n \n         ty::Bound(..) |\n-        ty::GeneratorWitness(..) => bug!(\"unexpected type {:?}\", ty),\n+        ty::GeneratorWitness(..) |\n+        ty::Infer(ty::FreshTy(_)) |\n+        ty::Infer(ty::FreshIntTy(_)) |\n+        ty::Infer(ty::FreshFloatTy(_)) => bug!(\"unexpected type {:?}\", ty),\n+    }\n+}\n+\n+crate fn assemble_builtin_copy_clone_impls<'tcx>(\n+    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    trait_def_id: DefId,\n+    ty: ty::Ty<'tcx>,\n+    clauses: &mut Vec<Clause<'tcx>>\n+) {\n+    let mut push_builtin_impl = |ty: ty::Ty<'tcx>, nested: &[ty::Ty<'tcx>]| {\n+        let clause = builtin_impl_clause(tcx, ty, nested, trait_def_id);\n+        // Bind innermost bound vars that may exist in `ty` and `nested`.\n+        clauses.push(Clause::ForAll(ty::Binder::bind(clause)));\n+    };\n+\n+    match &ty.sty {\n+        // Implementations provided in libcore.\n+        ty::Bool |\n+        ty::Char |\n+        ty::Int(..) |\n+        ty::Uint(..) |\n+        ty::Float(..) |\n+        ty::RawPtr(..) |\n+        ty::Never |\n+        ty::Ref(_, _, hir::MutImmutable) => (),\n+\n+        // Non parametric primitive types.\n+        ty::Infer(ty::IntVar(_)) |\n+        ty::Infer(ty::FloatVar(_)) |\n+        ty::Error => push_builtin_impl(ty, &[]),\n+\n+        // These implement `Copy`/`Clone` if their element types do.\n+        &ty::Array(_, length) => {\n+            let element_ty = generic_types::bound(tcx, 0);\n+            push_builtin_impl(tcx.mk_ty(ty::Array(element_ty, length)), &[element_ty]);\n+        }\n+        &ty::Tuple(type_list) => {\n+            let type_list = generic_types::type_list(tcx, type_list.len());\n+            push_builtin_impl(tcx.mk_ty(ty::Tuple(type_list)), &**type_list);\n+        }\n+        &ty::Closure(def_id, ..) => {\n+            let closure_ty = generic_types::closure(tcx, def_id);\n+            let upvar_tys: Vec<_> = match &closure_ty.sty {\n+                ty::Closure(_, substs) => substs.upvar_tys(def_id, tcx).collect(),\n+                _ => bug!(),\n+            };\n+            push_builtin_impl(closure_ty, &upvar_tys);\n+        }\n+\n+        // These ones are always `Clone`.\n+        ty::FnPtr(fn_ptr) => {\n+            let fn_ptr = fn_ptr.skip_binder();\n+            let fn_ptr = generic_types::fn_ptr(\n+                tcx,\n+                fn_ptr.inputs_and_output.len(),\n+                fn_ptr.c_variadic,\n+                fn_ptr.unsafety,\n+                fn_ptr.abi\n+            );\n+            push_builtin_impl(fn_ptr, &[]);\n+        }\n+        &ty::FnDef(def_id, ..) => {\n+            push_builtin_impl(generic_types::fn_def(tcx, def_id), &[]);\n+        }\n+\n+        // These depend on whatever user-defined impls might exist.\n+        ty::Adt(_, _) => (),\n+\n+        // Artificially trigger an ambiguity by adding two possible types to\n+        // unify against.\n+        ty::Infer(ty::TyVar(_)) => {\n+            push_builtin_impl(tcx.types.i32, &[]);\n+            push_builtin_impl(tcx.types.f32, &[]);\n+        }\n+\n+        ty::Projection(_projection_ty) => {\n+            // FIXME: add builtin impls from the associated type values found in\n+            // trait impls of `projection_ty.trait_ref(tcx)`.\n+        }\n+\n+        // The `Copy`/`Clone` bound can only come from the environment.\n+        ty::Param(..) |\n+        ty::Placeholder(..) |\n+        ty::UnnormalizedProjection(..) |\n+        ty::Opaque(..) => (),\n+\n+        // Definitely not `Copy`/`Clone`.\n+        ty::Dynamic(..) |\n+        ty::Foreign(..) |\n+        ty::Generator(..) |\n+        ty::Str |\n+        ty::Slice(..) |\n+        ty::Ref(_, _, hir::MutMutable) => (),\n+\n+        ty::Bound(..) |\n+        ty::GeneratorWitness(..) |\n+        ty::Infer(ty::FreshTy(_)) |\n+        ty::Infer(ty::FreshIntTy(_)) |\n+        ty::Infer(ty::FreshFloatTy(_)) => bug!(\"unexpected type {:?}\", ty),\n     }\n }"}, {"sha": "7feb63bb100691202dc720f9da5ea2289b75e0f3", "filename": "src/librustc_traits/chalk_context/program_clauses/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/77c5f557cced458d0f70f25c8ab5de02fac86188/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c5f557cced458d0f70f25c8ab5de02fac86188/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs?ref=77c5f557cced458d0f70f25c8ab5de02fac86188", "patch": "@@ -96,8 +96,27 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     );\n                 }\n \n+                if Some(trait_predicate.def_id()) == self.infcx.tcx.lang_items().copy_trait() {\n+                    assemble_builtin_copy_clone_impls(\n+                        self.infcx.tcx,\n+                        trait_predicate.def_id(),\n+                        trait_predicate.self_ty(),\n+                        &mut clauses\n+                    );\n+                }\n+\n+                if Some(trait_predicate.def_id()) == self.infcx.tcx.lang_items().clone_trait() {\n+                    // For all builtin impls, the conditions for `Copy` and\n+                    // `Clone` are the same.\n+                    assemble_builtin_copy_clone_impls(\n+                        self.infcx.tcx,\n+                        trait_predicate.def_id(),\n+                        trait_predicate.self_ty(),\n+                        &mut clauses\n+                    );\n+                }\n+\n                 // FIXME: we need to add special rules for other builtin impls:\n-                // * `Copy` / `Clone`\n                 // * `Generator`\n                 // * `FnOnce` / `FnMut` / `Fn`\n                 // * trait objects"}, {"sha": "4f69714bc747d7b3c5ebcf5d482716c1b809f111", "filename": "src/test/run-pass/chalkify/builtin-copy-clone.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/77c5f557cced458d0f70f25c8ab5de02fac86188/src%2Ftest%2Frun-pass%2Fchalkify%2Fbuiltin-copy-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c5f557cced458d0f70f25c8ab5de02fac86188/src%2Ftest%2Frun-pass%2Fchalkify%2Fbuiltin-copy-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchalkify%2Fbuiltin-copy-clone.rs?ref=77c5f557cced458d0f70f25c8ab5de02fac86188", "patch": "@@ -0,0 +1,43 @@\n+// compile-flags: -Z chalk\n+\n+// Test that `Clone` is correctly implemented for builtin types.\n+\n+#[derive(Copy, Clone)]\n+struct S(i32);\n+\n+fn test_clone<T: Clone>(arg: T) {\n+    let _ = arg.clone();\n+}\n+\n+fn test_copy<T: Copy>(arg: T) {\n+    let _ = arg;\n+    let _ = arg;\n+}\n+\n+fn test_copy_clone<T: Copy + Clone>(arg: T) {\n+    test_copy(arg);\n+    test_clone(arg);\n+}\n+\n+fn foo() { }\n+\n+fn main() {\n+    test_copy_clone(foo);\n+    let f: fn() = foo;\n+    test_copy_clone(f);\n+    // FIXME: add closures when they're considered WF\n+    test_copy_clone([1; 56]);\n+    test_copy_clone((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));\n+    test_copy_clone((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, true, 'a', 1.1));\n+    test_copy_clone(());\n+    test_copy_clone(((1, 1), (1, 1, 1), (1.1, 1, 1, 'a'), ()));\n+\n+    let a = (\n+        (S(1), S(0)),\n+        (\n+            (S(0), S(0), S(1)),\n+            S(0)\n+        )\n+    );\n+    test_copy_clone(a);\n+}"}]}