{"sha": "4753409f86bf21b8d0ba7bd83918aa951921c97c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NTM0MDlmODZiZjIxYjhkMGJhN2JkODM5MThhYTk1MTkyMWM5N2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-20T16:05:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-20T16:53:05Z"}, "message": "refactor TryConvWith similar to ConvWith", "tree": {"sha": "2932f72edeb02e053828447c408d940cdf1d0d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2932f72edeb02e053828447c408d940cdf1d0d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4753409f86bf21b8d0ba7bd83918aa951921c97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4753409f86bf21b8d0ba7bd83918aa951921c97c", "html_url": "https://github.com/rust-lang/rust/commit/4753409f86bf21b8d0ba7bd83918aa951921c97c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4753409f86bf21b8d0ba7bd83918aa951921c97c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ea4184fd107e5cc155b95a3cf058200c38d544d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea4184fd107e5cc155b95a3cf058200c38d544d", "html_url": "https://github.com/rust-lang/rust/commit/6ea4184fd107e5cc155b95a3cf058200c38d544d"}], "stats": {"total": 73, "additions": 27, "deletions": 46}, "files": [{"sha": "95c18d0e3df1c6c1d9f0683b7bc3a3d3271a762e", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4753409f86bf21b8d0ba7bd83918aa951921c97c/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4753409f86bf21b8d0ba7bd83918aa951921c97c/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=4753409f86bf21b8d0ba7bd83918aa951921c97c", "patch": "@@ -56,10 +56,7 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n             // but we do not want to duplicate possible\n             // extra newlines in the indent block\n             let text = indent.text();\n-            if text.starts_with(\"\\r\\n\") {\n-                buf.push_str(\"\\r\\n\");\n-                buf.push_str(text.trim_start_matches(\"\\r\\n\"));\n-            } else if text.starts_with('\\n') {\n+            if text.starts_with('\\n') {\n                 buf.push_str(\"\\n\");\n                 buf.push_str(text.trim_start_matches('\\n'));\n             } else {"}, {"sha": "1a70ec3a2e2ad9733ca36be444e26c4d18a210c2", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 26, "deletions": 42, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4753409f86bf21b8d0ba7bd83918aa951921c97c/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4753409f86bf21b8d0ba7bd83918aa951921c97c/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=4753409f86bf21b8d0ba7bd83918aa951921c97c", "patch": "@@ -25,10 +25,9 @@ pub trait ConvWith<CTX> {\n     fn conv_with(self, ctx: CTX) -> Self::Output;\n }\n \n-pub trait TryConvWith {\n-    type Ctx;\n+pub trait TryConvWith<CTX> {\n     type Output;\n-    fn try_conv_with(self, ctx: &Self::Ctx) -> Result<Self::Output>;\n+    fn try_conv_with(self, ctx: CTX) -> Result<Self::Output>;\n }\n \n impl Conv for SyntaxKind {\n@@ -235,48 +234,42 @@ impl<T: ConvWith<CTX>, CTX> ConvWith<CTX> for Option<T> {\n     }\n }\n \n-impl<'a> TryConvWith for &'a Url {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for &'_ Url {\n     type Output = FileId;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         world.uri_to_file_id(self)\n     }\n }\n \n-impl TryConvWith for FileId {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for FileId {\n     type Output = Url;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<Url> {\n         world.file_id_to_uri(self)\n     }\n }\n \n-impl<'a> TryConvWith for &'a TextDocumentItem {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for &'_ TextDocumentItem {\n     type Output = FileId;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         self.uri.try_conv_with(world)\n     }\n }\n \n-impl<'a> TryConvWith for &'a VersionedTextDocumentIdentifier {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for &'_ VersionedTextDocumentIdentifier {\n     type Output = FileId;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         self.uri.try_conv_with(world)\n     }\n }\n \n-impl<'a> TryConvWith for &'a TextDocumentIdentifier {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for &'_ TextDocumentIdentifier {\n     type Output = FileId;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         world.uri_to_file_id(&self.uri)\n     }\n }\n \n-impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for &'_ TextDocumentPositionParams {\n     type Output = FilePosition;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FilePosition> {\n         let file_id = self.text_document.try_conv_with(world)?;\n@@ -286,8 +279,7 @@ impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n     }\n }\n \n-impl<'a> TryConvWith for (&'a TextDocumentIdentifier, Range) {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for (&'_ TextDocumentIdentifier, Range) {\n     type Output = FileRange;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileRange> {\n         let file_id = self.0.try_conv_with(world)?;\n@@ -297,10 +289,9 @@ impl<'a> TryConvWith for (&'a TextDocumentIdentifier, Range) {\n     }\n }\n \n-impl<T: TryConvWith> TryConvWith for Vec<T> {\n-    type Ctx = <T as TryConvWith>::Ctx;\n-    type Output = Vec<<T as TryConvWith>::Output>;\n-    fn try_conv_with(self, ctx: &Self::Ctx) -> Result<Self::Output> {\n+impl<T: TryConvWith<CTX>, CTX: Copy> TryConvWith<CTX> for Vec<T> {\n+    type Output = Vec<<T as TryConvWith<CTX>>::Output>;\n+    fn try_conv_with(self, ctx: CTX) -> Result<Self::Output> {\n         let mut res = Vec::with_capacity(self.len());\n         for item in self {\n             res.push(item.try_conv_with(ctx)?);\n@@ -309,8 +300,7 @@ impl<T: TryConvWith> TryConvWith for Vec<T> {\n     }\n }\n \n-impl TryConvWith for SourceChange {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for SourceChange {\n     type Output = req::SourceChange;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<req::SourceChange> {\n         let cursor_position = match self.cursor_position {\n@@ -349,8 +339,7 @@ impl TryConvWith for SourceChange {\n     }\n }\n \n-impl TryConvWith for SourceFileEdit {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for SourceFileEdit {\n     type Output = TextDocumentEdit;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<TextDocumentEdit> {\n         let text_document = VersionedTextDocumentIdentifier {\n@@ -365,8 +354,7 @@ impl TryConvWith for SourceFileEdit {\n     }\n }\n \n-impl TryConvWith for FileSystemEdit {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for FileSystemEdit {\n     type Output = ResourceOp;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<ResourceOp> {\n         let res = match self {\n@@ -384,8 +372,7 @@ impl TryConvWith for FileSystemEdit {\n     }\n }\n \n-impl TryConvWith for &NavigationTarget {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for &NavigationTarget {\n     type Output = Location;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<Location> {\n         let line_index = world.analysis().file_line_index(self.file_id())?;\n@@ -394,8 +381,7 @@ impl TryConvWith for &NavigationTarget {\n     }\n }\n \n-impl TryConvWith for (FileId, RangeInfo<NavigationTarget>) {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for (FileId, RangeInfo<NavigationTarget>) {\n     type Output = LocationLink;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<LocationLink> {\n         let (src_file_id, target) = self;\n@@ -422,8 +408,7 @@ impl TryConvWith for (FileId, RangeInfo<NavigationTarget>) {\n     }\n }\n \n-impl TryConvWith for (FileId, RangeInfo<Vec<NavigationTarget>>) {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&'_ WorldSnapshot> for (FileId, RangeInfo<Vec<NavigationTarget>>) {\n     type Output = req::GotoDefinitionResponse;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<req::GotoTypeDefinitionResponse> {\n         let (file_id, RangeInfo { range, info: navs }) = self;\n@@ -488,22 +473,21 @@ where\n     }\n }\n \n-pub trait TryConvWithToVec<'a>: Sized + 'a {\n-    type Ctx;\n+pub trait TryConvWithToVec<CTX>: Sized {\n     type Output;\n \n-    fn try_conv_with_to_vec(self, ctx: &'a Self::Ctx) -> Result<Vec<Self::Output>>;\n+    fn try_conv_with_to_vec(self, ctx: CTX) -> Result<Vec<Self::Output>>;\n }\n \n-impl<'a, I> TryConvWithToVec<'a> for I\n+impl<I, CTX> TryConvWithToVec<CTX> for I\n where\n-    I: Iterator + 'a,\n-    I::Item: TryConvWith,\n+    I: Iterator,\n+    I::Item: TryConvWith<CTX>,\n+    CTX: Copy,\n {\n-    type Ctx = <I::Item as TryConvWith>::Ctx;\n-    type Output = <I::Item as TryConvWith>::Output;\n+    type Output = <I::Item as TryConvWith<CTX>>::Output;\n \n-    fn try_conv_with_to_vec(self, ctx: &'a Self::Ctx) -> Result<Vec<Self::Output>> {\n+    fn try_conv_with_to_vec(self, ctx: CTX) -> Result<Vec<Self::Output>> {\n         self.map(|it| it.try_conv_with(ctx)).collect()\n     }\n }"}]}