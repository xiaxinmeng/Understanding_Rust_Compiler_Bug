{"sha": "8562d6b7523b498f731f78dd740d0bc612983ffc", "node_id": "C_kwDOAAsO6NoAKDg1NjJkNmI3NTIzYjQ5OGY3MzFmNzhkZDc0MGQwYmM2MTI5ODNmZmM", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-01-26T04:40:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-02-23T05:38:24Z"}, "message": "rustc_errors: remove `struct_dummy`.", "tree": {"sha": "0b378484f5356cba9b466d0187adf1e3282a6098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b378484f5356cba9b466d0187adf1e3282a6098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8562d6b7523b498f731f78dd740d0bc612983ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8562d6b7523b498f731f78dd740d0bc612983ffc", "html_url": "https://github.com/rust-lang/rust/commit/8562d6b7523b498f731f78dd740d0bc612983ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8562d6b7523b498f731f78dd740d0bc612983ffc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4", "html_url": "https://github.com/rust-lang/rust/commit/d4fc5ae25cea1068fc2a3d96763d3ede3a6a14d4"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "34f52d78ec92920932dc692653edef27f5625e40", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=8562d6b7523b498f731f78dd740d0bc612983ffc", "patch": "@@ -622,14 +622,6 @@ impl Handler {\n         self.inner.borrow_mut().emit_stashed_diagnostics();\n     }\n \n-    /// Construct a dummy builder with `Level::Cancelled`.\n-    ///\n-    /// Using this will neither report anything to the user (e.g. a warning),\n-    /// nor will compilation cancel as a result.\n-    pub fn struct_dummy(&self) -> DiagnosticBuilder<'_> {\n-        DiagnosticBuilder::new(self, Level::Cancelled, \"\")\n-    }\n-\n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     ///\n     /// Attempting to `.emit()` the builder will only emit if either:"}, {"sha": "fc54d04d0f92bef87aef29254531c3be31e8cff7", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8562d6b7523b498f731f78dd740d0bc612983ffc", "patch": "@@ -1482,12 +1482,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let actual_ty = self.resolve_vars_if_possible(actual_ty);\n         debug!(\"type_error_struct_with_diag({:?}, {:?})\", sp, actual_ty);\n \n+        let mut err = mk_diag(self.ty_to_string(actual_ty));\n+\n         // Don't report an error if actual type is `Error`.\n         if actual_ty.references_error() {\n-            return self.tcx.sess.diagnostic().struct_dummy();\n+            err.downgrade_to_delayed_bug();\n         }\n \n-        mk_diag(self.ty_to_string(actual_ty))\n+        err\n     }\n \n     pub fn report_mismatched_types("}, {"sha": "48b2bf8477c929e9a0bcdb038040d14c78770d61", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=8562d6b7523b498f731f78dd740d0bc612983ffc", "patch": "@@ -1622,9 +1622,11 @@ impl<'a> Parser<'a> {\n                 };\n                 if let Some(expr) = expr {\n                     if matches!(expr.kind, ExprKind::Err) {\n-                        self.diagnostic()\n-                            .delay_span_bug(self.token.span, &\"invalid interpolated expression\");\n-                        return self.diagnostic().struct_dummy();\n+                        let mut err = self\n+                            .diagnostic()\n+                            .struct_span_err(self.token.span, &\"invalid interpolated expression\");\n+                        err.downgrade_to_delayed_bug();\n+                        return err;\n                     }\n                 }\n             }"}, {"sha": "8ac7b5ca464df2ed075b72156c410b9d2873bbcd", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8562d6b7523b498f731f78dd740d0bc612983ffc", "patch": "@@ -268,7 +268,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         (None, true) => \"variant\",\n                     }\n                 };\n-                let mut err = if !actual.references_error() {\n+                // FIXME(eddyb) this intendation is probably unnecessary.\n+                let mut err = {\n                     // Suggest clamping down the type if the method that is being attempted to\n                     // be used exists at all, and the type is an ambiguous numeric type\n                     // ({integer}/{float}).\n@@ -461,10 +462,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                         err\n                     }\n-                } else {\n-                    tcx.sess.diagnostic().struct_dummy()\n                 };\n \n+                if actual.references_error() {\n+                    err.downgrade_to_delayed_bug();\n+                }\n+\n                 if let Some(def) = actual.ty_adt_def() {\n                     if let Some(full_sp) = tcx.hir().span_if_local(def.did) {\n                         let def_sp = tcx.sess.source_map().guess_head_span(full_sp);"}, {"sha": "e2a91635a2d8b5f54bfee480833fde095e72824e", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=8562d6b7523b498f731f78dd740d0bc612983ffc", "patch": "@@ -139,11 +139,13 @@ pub use self::Expectation::*;\n #[macro_export]\n macro_rules! type_error_struct {\n     ($session:expr, $span:expr, $typ:expr, $code:ident, $($message:tt)*) => ({\n+        let mut err = rustc_errors::struct_span_err!($session, $span, $code, $($message)*);\n+\n         if $typ.references_error() {\n-            $session.diagnostic().struct_dummy()\n-        } else {\n-            rustc_errors::struct_span_err!($session, $span, $code, $($message)*)\n+            err.downgrade_to_delayed_bug();\n         }\n+\n+        err\n     })\n }\n "}, {"sha": "4e29dda777646dc16caddfedccdd00b0b2637744", "filename": "compiler/rustc_typeck/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=8562d6b7523b498f731f78dd740d0bc612983ffc", "patch": "@@ -21,15 +21,15 @@ impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx> {\n     }\n \n     fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx> {\n-        let mut err = if self.ty.references_error() {\n-            self.sess.diagnostic().struct_dummy()\n-        } else {\n-            self.sess.struct_span_fatal_with_code(\n-                self.span,\n-                &format!(\"can't pass `{}` to variadic function\", self.ty),\n-                self.code(),\n-            )\n-        };\n+        let mut err = self.sess.struct_span_fatal_with_code(\n+            self.span,\n+            &format!(\"can't pass `{}` to variadic function\", self.ty),\n+            self.code(),\n+        );\n+\n+        if self.ty.references_error() {\n+            err.downgrade_to_delayed_bug();\n+        }\n \n         if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.span) {\n             err.span_suggestion("}, {"sha": "a622f0ca95a6897b75d31f815d691f6d71a65bbd", "filename": "compiler/rustc_typeck/src/structured_errors/sized_unsized_cast.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8562d6b7523b498f731f78dd740d0bc612983ffc/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs?ref=8562d6b7523b498f731f78dd740d0bc612983ffc", "patch": "@@ -21,18 +21,20 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCast<'tcx> {\n     }\n \n     fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx> {\n+        let mut err = self.sess.struct_span_fatal_with_code(\n+            self.span,\n+            &format!(\n+                \"cannot cast thin pointer `{}` to fat pointer `{}`\",\n+                self.expr_ty, self.cast_ty\n+            ),\n+            self.code(),\n+        );\n+\n         if self.expr_ty.references_error() {\n-            self.sess.diagnostic().struct_dummy()\n-        } else {\n-            self.sess.struct_span_fatal_with_code(\n-                self.span,\n-                &format!(\n-                    \"cannot cast thin pointer `{}` to fat pointer `{}`\",\n-                    self.expr_ty, self.cast_ty\n-                ),\n-                self.code(),\n-            )\n+            err.downgrade_to_delayed_bug();\n         }\n+\n+        err\n     }\n \n     fn diagnostic_extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {"}]}