{"sha": "efcbca95595d31bb4c2c6782530d5a7a64a4191f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmY2JjYTk1NTk1ZDMxYmI0YzJjNjc4MjUzMGQ1YTdhNjRhNDE5MWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-22T20:48:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-22T20:48:41Z"}, "message": "Merge #1896\n\n1896: remove obsolete TOOD r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "43dfe5d4ddec13ba9eb9bd42862b58a82103d48f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43dfe5d4ddec13ba9eb9bd42862b58a82103d48f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efcbca95595d31bb4c2c6782530d5a7a64a4191f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdh94pCRBK7hj4Ov3rIwAAdHIIAChkOl5R+5HJI1g8RuXt0lmP\nHd+X9rUrWPeoWcITQEhRaVVDyxqCEMlxLMpWPpPgCIv2ReP3wkcgOQ7i0aP8qf4H\nR5bcTQXkVjjyY3Ng7dkvUl53Qp+xEB/8AAHGVX0W6RZE1CGWe6p0BAhJAhEkBhJc\nJxt88fZvl3tXoXfpxXy4oqlu16egKh8e7FzvAJ/2hrzZDUBqOpaLmC9RY5jkO6qw\nfIrMMvTv0u0CP8gH0iFFJg/ws7ODPGP7HnKvdu1NlIs3t/ag9SfQvDAUBVo+cKTw\nV6WlKnTyP3fhlyPvL8VgjaBXXF3pqoQsqg4MXaRbSTZaqgxVvwPdX2RotmRGUPg=\n=2Yd5\n-----END PGP SIGNATURE-----\n", "payload": "tree 43dfe5d4ddec13ba9eb9bd42862b58a82103d48f\nparent 6cc3559daa4358d0ac5d9cac23311544cdf67461\nparent 43da23401dad3d708b91e61003e8503a61f57c14\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1569185321 +0000\ncommitter GitHub <noreply@github.com> 1569185321 +0000\n\nMerge #1896\n\n1896: remove obsolete TOOD r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efcbca95595d31bb4c2c6782530d5a7a64a4191f", "html_url": "https://github.com/rust-lang/rust/commit/efcbca95595d31bb4c2c6782530d5a7a64a4191f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efcbca95595d31bb4c2c6782530d5a7a64a4191f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc3559daa4358d0ac5d9cac23311544cdf67461", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc3559daa4358d0ac5d9cac23311544cdf67461", "html_url": "https://github.com/rust-lang/rust/commit/6cc3559daa4358d0ac5d9cac23311544cdf67461"}, {"sha": "43da23401dad3d708b91e61003e8503a61f57c14", "url": "https://api.github.com/repos/rust-lang/rust/commits/43da23401dad3d708b91e61003e8503a61f57c14", "html_url": "https://github.com/rust-lang/rust/commit/43da23401dad3d708b91e61003e8503a61f57c14"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "a0904323cbb4949446314089581e7b2307fa37c8", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/efcbca95595d31bb4c2c6782530d5a7a64a4191f/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcbca95595d31bb4c2c6782530d5a7a64a4191f/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=efcbca95595d31bb4c2c6782530d5a7a64a4191f", "patch": "@@ -52,6 +52,9 @@ pub(crate) struct Rule {\n \n impl MacroRules {\n     pub fn parse(tt: &tt::Subtree) -> Result<MacroRules, ParseError> {\n+        // Note: this parsing can be implemented using mbe machinery itself, by\n+        // matching against `$($lhs:tt => $rhs:tt);*` pattern, but implementing\n+        // manually seems easier.\n         let mut src = TtIter::new(tt);\n         let mut rules = Vec::new();\n         while src.len() > 0 {\n@@ -64,6 +67,11 @@ impl MacroRules {\n                 break;\n             }\n         }\n+\n+        for rule in rules.iter() {\n+            validate(&rule.lhs)?;\n+        }\n+\n         Ok(MacroRules { rules })\n     }\n     pub fn expand(&self, tt: &tt::Subtree) -> Result<tt::Subtree, ExpandError> {\n@@ -77,7 +85,6 @@ impl Rule {\n             .expect_subtree()\n             .map_err(|()| ParseError::Expected(\"expected subtree\".to_string()))?\n             .clone();\n-        validate(&lhs)?;\n         lhs.delimiter = tt::Delimiter::None;\n         src.expect_char('=').map_err(|()| ParseError::Expected(\"expected `=`\".to_string()))?;\n         src.expect_char('>').map_err(|()| ParseError::Expected(\"expected `>`\".to_string()))?;"}, {"sha": "50b8011a909d28be5f71ff39dd298f3bdd3235b9", "filename": "crates/ra_mbe/src/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efcbca95595d31bb4c2c6782530d5a7a64a4191f/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcbca95595d31bb4c2c6782530d5a7a64a4191f/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fparser.rs?ref=efcbca95595d31bb4c2c6782530d5a7a64a4191f", "patch": "@@ -142,7 +142,6 @@ fn is_boolean_literal(lit: &tt::Literal) -> bool {\n     }\n }\n \n-///TOOD: impl for slice iter\n fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), ExpandError> {\n     let mut separator = Separator::Puncts(SmallVec::new());\n     for tt in src {"}, {"sha": "91b19c8f822a21c78fdb65263586923e4291476d", "filename": "crates/ra_tools/tests/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efcbca95595d31bb4c2c6782530d5a7a64a4191f/crates%2Fra_tools%2Ftests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcbca95595d31bb4c2c6782530d5a7a64a4191f/crates%2Fra_tools%2Ftests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Ftests%2Fcli.rs?ref=efcbca95595d31bb4c2c6782530d5a7a64a4191f", "patch": "@@ -34,7 +34,7 @@ fn no_todo() {\n             return;\n         }\n         let text = std::fs::read_to_string(e.path()).unwrap();\n-        if text.contains(\"TODO\") {\n+        if text.contains(\"TODO\") || text.contains(\"TOOD\") {\n             panic!(\n                 \"\\nTODO markers should not be commited to the master branch,\\n\\\n                  use FIXME instead\\n\\"}]}