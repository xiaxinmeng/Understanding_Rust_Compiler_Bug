{"sha": "3839696529213ceaa12eb0da28c3dad10c8b99e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Mzk2OTY1MjkyMTNjZWFhMTJlYjBkYTI4YzNkYWQxMGM4Yjk5ZTc=", "commit": {"author": {"name": "Julian Orth", "email": "ju.orth@gmail.com", "date": "2014-10-17T00:48:29Z"}, "committer": {"name": "Julian Orth", "email": "ju.orth@gmail.com", "date": "2014-10-19T23:47:33Z"}, "message": "Optimize BufferedReader::read for large buffers.\n\nThis optimizes `read` for the case in which the number of bytes\nrequested is larger than the internal buffer. Note that the first\ncomparison occurs again right afterwards and should thus be free. The\nsecond comparison occurs only in the cold branch.", "tree": {"sha": "fc6afd66c93af778d355cd1a2e6ffdae6aee5c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc6afd66c93af778d355cd1a2e6ffdae6aee5c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3839696529213ceaa12eb0da28c3dad10c8b99e7", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3839696529213ceaa12eb0da28c3dad10c8b99e7", "html_url": "https://github.com/rust-lang/rust/commit/3839696529213ceaa12eb0da28c3dad10c8b99e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3839696529213ceaa12eb0da28c3dad10c8b99e7/comments", "author": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1868a262f36a57fa6bac96c2f173129c57d4e62f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1868a262f36a57fa6bac96c2f173129c57d4e62f", "html_url": "https://github.com/rust-lang/rust/commit/1868a262f36a57fa6bac96c2f173129c57d4e62f"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "95c44e6a3fc89c94712e0611a12f3d42b534a521", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3839696529213ceaa12eb0da28c3dad10c8b99e7/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3839696529213ceaa12eb0da28c3dad10c8b99e7/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=3839696529213ceaa12eb0da28c3dad10c8b99e7", "patch": "@@ -104,6 +104,9 @@ impl<R: Reader> Buffer for BufferedReader<R> {\n \n impl<R: Reader> Reader for BufferedReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n+        if self.pos == self.cap && buf.len() >= self.buf.capacity() {\n+            return self.inner.read(buf);\n+        }\n         let nread = {\n             let available = try!(self.fill_buf());\n             let nread = cmp::min(available.len(), buf.len());\n@@ -409,13 +412,19 @@ mod test {\n \n     #[test]\n     fn test_buffered_reader() {\n-        let inner = MemReader::new(vec!(0, 1, 2, 3, 4));\n+        let inner = MemReader::new(vec!(5, 6, 7, 0, 1, 2, 3, 4));\n         let mut reader = BufferedReader::with_capacity(2, inner);\n \n         let mut buf = [0, 0, 0];\n         let nread = reader.read(buf);\n+        assert_eq!(Ok(3), nread);\n+        let b: &[_] = &[5, 6, 7];\n+        assert_eq!(buf.as_slice(), b);\n+\n+        let mut buf = [0, 0];\n+        let nread = reader.read(buf);\n         assert_eq!(Ok(2), nread);\n-        let b: &[_] = &[0, 1, 0];\n+        let b: &[_] = &[0, 1];\n         assert_eq!(buf.as_slice(), b);\n \n         let mut buf = [0];"}]}