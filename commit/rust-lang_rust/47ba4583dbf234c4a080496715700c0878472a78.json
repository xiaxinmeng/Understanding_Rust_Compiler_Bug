{"sha": "47ba4583dbf234c4a080496715700c0878472a78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YmE0NTgzZGJmMjM0YzRhMDgwNDk2NzE1NzAwYzA4Nzg0NzJhNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-16T02:19:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-16T02:19:21Z"}, "message": "auto merge of #7815 : blake2-ppc/rust/hashmap-iterators, r=huonw\n\nImplement set difference, sym. difference, intersection and union using Iterators.\r\n\r\nThe set methods are left since they are part of the Set trait. A grep over the tree indicates that the four hashset operations have no users at all.\r\n\r\nAlso remove HashMap::mutate_values since it is unused, replaced by .mut_iter(), and not part of a trait.", "tree": {"sha": "591fc2ded8a43849bef7dfba4817e07df680b148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/591fc2ded8a43849bef7dfba4817e07df680b148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47ba4583dbf234c4a080496715700c0878472a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47ba4583dbf234c4a080496715700c0878472a78", "html_url": "https://github.com/rust-lang/rust/commit/47ba4583dbf234c4a080496715700c0878472a78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47ba4583dbf234c4a080496715700c0878472a78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c16549cb8f709c5e744360e7b3a37dce9fa1de", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c16549cb8f709c5e744360e7b3a37dce9fa1de", "html_url": "https://github.com/rust-lang/rust/commit/98c16549cb8f709c5e744360e7b3a37dce9fa1de"}, {"sha": "750f32dbb5d550959d356821d757c03524367219", "url": "https://api.github.com/repos/rust-lang/rust/commits/750f32dbb5d550959d356821d757c03524367219", "html_url": "https://github.com/rust-lang/rust/commit/750f32dbb5d550959d356821d757c03524367219"}], "stats": {"total": 93, "additions": 70, "deletions": 23}, "files": [{"sha": "79c6c4fb21dcc21457017d38ee213be54768bd8b", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 70, "deletions": 23, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/47ba4583dbf234c4a080496715700c0878472a78/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ba4583dbf234c4a080496715700c0878472a78/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=47ba4583dbf234c4a080496715700c0878472a78", "patch": "@@ -16,9 +16,10 @@\n #[mutable_doc];\n \n use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n+use clone::Clone;\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use iterator::{Iterator, IteratorUtil, FromIterator};\n+use iterator::{Iterator, IteratorUtil, FromIterator, ChainIterator};\n use num;\n use option::{None, Option, Some};\n use rand::RngUtil;\n@@ -510,19 +511,6 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n         self.iter().advance(|(_, v)| blk(v))\n     }\n \n-    /// Iterate over the map and mutate the contained values\n-    pub fn mutate_values(&mut self, blk: &fn(&K, &mut V) -> bool) -> bool {\n-        for uint::range(0, self.buckets.len()) |i| {\n-            match self.buckets[i] {\n-              Some(Bucket{key: ref key, value: ref mut value, _}) => {\n-                if !blk(key, value) { return false; }\n-              }\n-              None => ()\n-            }\n-        }\n-        return true;\n-    }\n-\n     /// An iterator visiting all key-value pairs in arbitrary order.\n     /// Iterator element type is (&'a K, &'a V).\n     pub fn iter<'a>(&'a self) -> HashMapIterator<'a, K, V> {\n@@ -716,25 +704,24 @@ impl<T:Hash + Eq> Set<T> for HashSet<T> {\n \n     /// Visit the values representing the difference\n     fn difference(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.iter().advance(|v| other.contains(v) || f(v))\n+        self.difference_iter(other).advance(f)\n     }\n \n     /// Visit the values representing the symmetric difference\n     fn symmetric_difference(&self,\n                             other: &HashSet<T>,\n                             f: &fn(&T) -> bool) -> bool {\n-        self.difference(other, |t| f(t)) && other.difference(self, |t| f(t))\n+        self.symmetric_difference_iter(other).advance(f)\n     }\n \n     /// Visit the values representing the intersection\n     fn intersection(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.iter().advance(|v| !other.contains(v) || f(v))\n+        self.intersection_iter(other).advance(f)\n     }\n \n     /// Visit the values representing the union\n     fn union(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.iter().advance(|t| f(t)) &&\n-            other.iter().advance(|v| self.contains(v) || f(v))\n+        self.union_iter(other).advance(f)\n     }\n }\n \n@@ -789,6 +776,33 @@ impl<T:Hash + Eq> HashSet<T> {\n     pub fn iter<'a>(&'a self) -> HashSetIterator<'a, T> {\n         HashSetIterator { iter: self.map.buckets.iter() }\n     }\n+\n+    /// Visit the values representing the difference\n+    pub fn difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n+        -> SetAlgebraIter<'a, T> {\n+        EnvFilterIterator{iter: self.iter(), env: other,\n+                          filter: |elt, other| !other.contains(elt) }\n+    }\n+\n+    /// Visit the values representing the symmetric difference\n+    pub fn symmetric_difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n+        -> ChainIterator<&'a T, SetAlgebraIter<'a, T>, SetAlgebraIter<'a, T>> {\n+        self.difference_iter(other).chain_(other.difference_iter(self))\n+    }\n+\n+    /// Visit the values representing the intersection\n+    pub fn intersection_iter<'a>(&'a self, other: &'a HashSet<T>)\n+        -> SetAlgebraIter<'a, T> {\n+        EnvFilterIterator{iter: self.iter(), env: other,\n+                          filter: |elt, other| other.contains(elt) }\n+    }\n+\n+    /// Visit the values representing the union\n+    pub fn union_iter<'a>(&'a self, other: &'a HashSet<T>)\n+        -> ChainIterator<&'a T, HashSetIterator<'a, T>, SetAlgebraIter<'a, T>> {\n+        self.iter().chain_(other.difference_iter(self))\n+    }\n+\n }\n \n impl<K: Eq + Hash, T: Iterator<K>> FromIterator<K, T> for HashSet<K> {\n@@ -804,6 +818,39 @@ impl<K: Eq + Hash, T: Iterator<K>> FromIterator<K, T> for HashSet<K> {\n     }\n }\n \n+// FIXME #7814: use std::iterator::FilterIterator\n+/// Building block for Set operation iterators\n+pub struct EnvFilterIterator<A, Env, I> {\n+    priv env: Env,\n+    priv filter: &'static fn(&A, Env) -> bool,\n+    priv iter: I,\n+}\n+\n+impl<'self, A, Env: Clone, I: Iterator<&'self A>> Iterator<&'self A>\n+        for EnvFilterIterator<A, Env, I> {\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self A> {\n+        loop {\n+            match self.iter.next() {\n+                Some(elt) => if (self.filter)(elt, self.env.clone()) {\n+                    return Some(elt)\n+                },\n+                None => return None,\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper)\n+    }\n+}\n+\n+/// Set operations iterator\n+pub type SetAlgebraIter<'self, T> =\n+    EnvFilterIterator<T, &'self HashSet<T>, HashSetIterator<'self, T>>;\n+\n \n #[cfg(test)]\n mod test_map {\n@@ -1139,7 +1186,7 @@ mod test_set {\n \n         let mut i = 0;\n         let expected = [3, 5, 11, 77];\n-        for a.intersection(&b) |x| {\n+        for a.intersection_iter(&b).advance |x| {\n             assert!(expected.contains(x));\n             i += 1\n         }\n@@ -1162,7 +1209,7 @@ mod test_set {\n \n         let mut i = 0;\n         let expected = [1, 5, 11];\n-        for a.difference(&b) |x| {\n+        for a.difference_iter(&b).advance |x| {\n             assert!(expected.contains(x));\n             i += 1\n         }\n@@ -1188,7 +1235,7 @@ mod test_set {\n \n         let mut i = 0;\n         let expected = [-2, 1, 5, 11, 14, 22];\n-        for a.symmetric_difference(&b) |x| {\n+        for a.symmetric_difference_iter(&b).advance |x| {\n             assert!(expected.contains(x));\n             i += 1\n         }\n@@ -1218,7 +1265,7 @@ mod test_set {\n \n         let mut i = 0;\n         let expected = [-2, 1, 3, 5, 9, 11, 13, 16, 19, 24];\n-        for a.union(&b) |x| {\n+        for a.union_iter(&b).advance |x| {\n             assert!(expected.contains(x));\n             i += 1\n         }"}]}