{"sha": "4f07008419667eb7d9feea5ec391eda19d6d9338", "node_id": "C_kwDOAAsO6NoAKDRmMDcwMDg0MTk2NjdlYjdkOWZlZWE1ZWMzOTFlZGExOWQ2ZDkzMzg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-25T15:35:10Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-25T15:39:23Z"}, "message": "remove confusing comment\n\n`?0: CoerceUnsized<SomeTy>` can definitely apply because\n`?0` matches any type, same for `SomeTy: CoerceUnsized<?0>`", "tree": {"sha": "78f4b67d340d0dccd27f087f2d4225e8e101c002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f4b67d340d0dccd27f087f2d4225e8e101c002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f07008419667eb7d9feea5ec391eda19d6d9338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f07008419667eb7d9feea5ec391eda19d6d9338", "html_url": "https://github.com/rust-lang/rust/commit/4f07008419667eb7d9feea5ec391eda19d6d9338", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f07008419667eb7d9feea5ec391eda19d6d9338/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a215b7b4dfef1d8f4161416838a0cd6abb348216", "url": "https://api.github.com/repos/rust-lang/rust/commits/a215b7b4dfef1d8f4161416838a0cd6abb348216", "html_url": "https://github.com/rust-lang/rust/commit/a215b7b4dfef1d8f4161416838a0cd6abb348216"}], "stats": {"total": 24, "additions": 3, "deletions": 21}, "files": [{"sha": "e949f7ec34f8a8ffd4949182ab0bfb8c18639c36", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f07008419667eb7d9feea5ec391eda19d6d9338/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f07008419667eb7d9feea5ec391eda19d6d9338/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=4f07008419667eb7d9feea5ec391eda19d6d9338", "patch": "@@ -503,27 +503,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         target = self.shallow_resolve(target);\n         debug!(?source, ?target);\n \n-        // These 'if' statements require some explanation.\n-        // The `CoerceUnsized` trait is special - it is only\n-        // possible to write `impl CoerceUnsized<B> for A` where\n-        // A and B have 'matching' fields. This rules out the following\n-        // two types of blanket impls:\n-        //\n-        // `impl<T> CoerceUnsized<T> for SomeType`\n-        // `impl<T> CoerceUnsized<SomeType> for T`\n-        //\n-        // Both of these trigger a special `CoerceUnsized`-related error (E0376)\n-        //\n-        // We can take advantage of this fact to avoid performing unnecessary work.\n-        // If either `source` or `target` is a type variable, then any applicable impl\n-        // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)\n-        // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for\n-        // SomeType`).\n-        //\n-        // However, these are exactly the kinds of impls which are forbidden by\n-        // the compiler! Therefore, we can be sure that coercion will always fail\n-        // when either the source or target type is a type variable. This allows us\n-        // to skip performing any trait selection, and immediately bail out.\n+        // We don't apply any coercions incase either the source or target\n+        // aren't sufficiently well known but tend to instead just equate\n+        // them both.\n         if source.is_ty_var() {\n             debug!(\"coerce_unsized: source is a TyVar, bailing out\");\n             return Err(TypeError::Mismatch);"}]}