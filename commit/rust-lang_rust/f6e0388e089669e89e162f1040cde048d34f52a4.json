{"sha": "f6e0388e089669e89e162f1040cde048d34f52a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZTAzODhlMDg5NjY5ZTg5ZTE2MmYxMDQwY2RlMDQ4ZDM0ZjUyYTQ=", "commit": {"author": {"name": "Victor Korkin", "email": "victor.korkin@gmail.com", "date": "2018-05-29T15:56:38Z"}, "committer": {"name": "Victor Korkin", "email": "victor.korkin@gmail.com", "date": "2018-05-29T15:56:38Z"}, "message": "Change lint type to unique and add the suggestion.", "tree": {"sha": "40852579b02cce18bd9c864e18f02ea10eb25423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40852579b02cce18bd9c864e18f02ea10eb25423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e0388e089669e89e162f1040cde048d34f52a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e0388e089669e89e162f1040cde048d34f52a4", "html_url": "https://github.com/rust-lang/rust/commit/f6e0388e089669e89e162f1040cde048d34f52a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e0388e089669e89e162f1040cde048d34f52a4/comments", "author": {"login": "VKlayd", "id": 2850547, "node_id": "MDQ6VXNlcjI4NTA1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2850547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VKlayd", "html_url": "https://github.com/VKlayd", "followers_url": "https://api.github.com/users/VKlayd/followers", "following_url": "https://api.github.com/users/VKlayd/following{/other_user}", "gists_url": "https://api.github.com/users/VKlayd/gists{/gist_id}", "starred_url": "https://api.github.com/users/VKlayd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VKlayd/subscriptions", "organizations_url": "https://api.github.com/users/VKlayd/orgs", "repos_url": "https://api.github.com/users/VKlayd/repos", "events_url": "https://api.github.com/users/VKlayd/events{/privacy}", "received_events_url": "https://api.github.com/users/VKlayd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VKlayd", "id": 2850547, "node_id": "MDQ6VXNlcjI4NTA1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2850547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VKlayd", "html_url": "https://github.com/VKlayd", "followers_url": "https://api.github.com/users/VKlayd/followers", "following_url": "https://api.github.com/users/VKlayd/following{/other_user}", "gists_url": "https://api.github.com/users/VKlayd/gists{/gist_id}", "starred_url": "https://api.github.com/users/VKlayd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VKlayd/subscriptions", "organizations_url": "https://api.github.com/users/VKlayd/orgs", "repos_url": "https://api.github.com/users/VKlayd/repos", "events_url": "https://api.github.com/users/VKlayd/events{/privacy}", "received_events_url": "https://api.github.com/users/VKlayd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01be53f92939df92ac7cb48d8b2a9713744e7b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/01be53f92939df92ac7cb48d8b2a9713744e7b6e", "html_url": "https://github.com/rust-lang/rust/commit/01be53f92939df92ac7cb48d8b2a9713744e7b6e"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "96fa907ecb42edd30442f4a6b39654450873bc9f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6e0388e089669e89e162f1040cde048d34f52a4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e0388e089669e89e162f1040cde048d34f52a4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f6e0388e089669e89e162f1040cde048d34f52a4", "patch": "@@ -673,6 +673,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::UNIT_ARG,\n         types::UNIT_CMP,\n         types::UNNECESSARY_CAST,\n+        types::FN_TO_NUMERIC_CAST,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "9c33b91789a37ab3fd8e0a5e279088ba38e118ba", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f6e0388e089669e89e162f1040cde048d34f52a4/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e0388e089669e89e162f1040cde048d34f52a4/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f6e0388e089669e89e162f1040cde048d34f52a4", "patch": "@@ -679,6 +679,23 @@ declare_clippy_lint! {\n     \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n+/// **What it does:** Checks for casts function pointer to the numeric type.\n+///\n+/// **Why is this bad?** Cast pointer not to usize truncate value.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn test_fn() -> i16;\n+/// let _ = test_fn as i32\n+/// ```\n+declare_clippy_lint! {\n+    pub FN_TO_NUMERIC_CAST,\n+    correctness,\n+    \"cast function pointer to the numeric type\"\n+}\n+\n /// **What it does:** Checks for casts from a less-strictly-aligned pointer to a\n /// more-strictly-aligned pointer\n ///\n@@ -891,7 +908,8 @@ impl LintPass for CastPass {\n             CAST_POSSIBLE_WRAP,\n             CAST_LOSSLESS,\n             UNNECESSARY_CAST,\n-            CAST_PTR_ALIGNMENT\n+            CAST_PTR_ALIGNMENT,\n+            FN_TO_NUMERIC_CAST\n         )\n     }\n }\n@@ -980,11 +998,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                 ty::TyFnDef(..) |\n                 ty::TyFnPtr(..) => {\n                     if cast_to.is_numeric() && cast_to.sty != ty::TyUint(UintTy::Usize){\n-                        span_lint(\n+                        span_lint_and_sugg(\n                             cx,\n-                            UNNECESSARY_CAST,\n+                            FN_TO_NUMERIC_CAST,\n                             expr.span,\n-                            \"casting Fn not to usize may truncate the value\",\n+                            &format!(\"casting a Fn to {} may truncate the function address value.\", cast_to),\n+                            \"if you need address of function, use cast to `usize` instead:\",\n+                            format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n                         );\n                     }\n                 }"}, {"sha": "8f0b2c6452355a0599699d6b07a147f99204466d", "filename": "tests/ui/types_fn_to_int.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e0388e089669e89e162f1040cde048d34f52a4/tests%2Fui%2Ftypes_fn_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e0388e089669e89e162f1040cde048d34f52a4/tests%2Fui%2Ftypes_fn_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.stderr?ref=f6e0388e089669e89e162f1040cde048d34f52a4", "patch": "@@ -1,10 +1,14 @@\n-error: casting Fn not to usize may truncate the value\n+error: casting a Fn to i32 may truncate the function address value.\n  --> $DIR/types_fn_to_int.rs:8:13\n   |\n 8 |     let y = x as i32;\n   |             ^^^^^^^^\n   |\n-  = note: `-D unnecessary-cast` implied by `-D warnings`\n+  = note: #[deny(fn_to_numeric_cast)] on by default\n+help: if you need address of function, use cast to `usize` instead:\n+  |\n+8 |     let y = x as usize;\n+  |             ^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}