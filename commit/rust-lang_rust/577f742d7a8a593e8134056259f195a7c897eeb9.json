{"sha": "577f742d7a8a593e8134056259f195a7c897eeb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3N2Y3NDJkN2E4YTU5M2U4MTM0MDU2MjU5ZjE5NWE3Yzg5N2VlYjk=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-12-12T02:34:01Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-12-12T02:51:00Z"}, "message": "serialize: Avoid stray nul characters when auto-serializing char.\n\nFixes #19719.", "tree": {"sha": "80faca1546ad011dc090dd87cb5d8167224ab35b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80faca1546ad011dc090dd87cb5d8167224ab35b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/577f742d7a8a593e8134056259f195a7c897eeb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/577f742d7a8a593e8134056259f195a7c897eeb9", "html_url": "https://github.com/rust-lang/rust/commit/577f742d7a8a593e8134056259f195a7c897eeb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/577f742d7a8a593e8134056259f195a7c897eeb9/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "193390d0e48f6d8fb58acb7d0460c14acf907322", "url": "https://api.github.com/repos/rust-lang/rust/commits/193390d0e48f6d8fb58acb7d0460c14acf907322", "html_url": "https://github.com/rust-lang/rust/commit/193390d0e48f6d8fb58acb7d0460c14acf907322"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "e26366ce3a64a033cbe9a248eb947c73f61d6fe6", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/577f742d7a8a593e8134056259f195a7c897eeb9/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f742d7a8a593e8134056259f195a7c897eeb9/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=577f742d7a8a593e8134056259f195a7c897eeb9", "patch": "@@ -367,8 +367,8 @@ fn escape_str(writer: &mut io::Writer, v: &str) -> Result<(), io::IoError> {\n \n fn escape_char(writer: &mut io::Writer, v: char) -> Result<(), io::IoError> {\n     let mut buf = [0, .. 4];\n-    v.encode_utf8(&mut buf);\n-    escape_bytes(writer, &mut buf)\n+    let len = v.encode_utf8(&mut buf).unwrap();\n+    escape_bytes(writer, buf[mut ..len])\n }\n \n fn spaces(wr: &mut io::Writer, mut n: uint) -> Result<(), io::IoError> {\n@@ -2694,37 +2694,39 @@ mod tests {\n         );\n     }\n \n+    macro_rules! check_encoder_for_simple(\n+        ($value:expr, $expected:expr) => ({\n+            let s = with_str_writer(|writer| {\n+                let mut encoder = Encoder::new(writer);\n+                $value.encode(&mut encoder).unwrap();\n+            });\n+            assert_eq!(s, $expected);\n+\n+            let s = with_str_writer(|writer| {\n+                let mut encoder = PrettyEncoder::new(writer);\n+                $value.encode(&mut encoder).unwrap();\n+            });\n+            assert_eq!(s, $expected);\n+        })\n+    )\n+\n     #[test]\n     fn test_write_some() {\n-        let value = Some(\"jodhpurs\".into_string());\n-        let s = with_str_writer(|writer| {\n-            let mut encoder = Encoder::new(writer);\n-            value.encode(&mut encoder).unwrap();\n-        });\n-        assert_eq!(s, \"\\\"jodhpurs\\\"\");\n-\n-        let value = Some(\"jodhpurs\".into_string());\n-        let s = with_str_writer(|writer| {\n-            let mut encoder = PrettyEncoder::new(writer);\n-            value.encode(&mut encoder).unwrap();\n-        });\n-        assert_eq!(s, \"\\\"jodhpurs\\\"\");\n+        check_encoder_for_simple!(Some(\"jodhpurs\".to_string()), \"\\\"jodhpurs\\\"\");\n     }\n \n     #[test]\n     fn test_write_none() {\n-        let value: Option<string::String> = None;\n-        let s = with_str_writer(|writer| {\n-            let mut encoder = Encoder::new(writer);\n-            value.encode(&mut encoder).unwrap();\n-        });\n-        assert_eq!(s, \"null\");\n+        check_encoder_for_simple!(None::<string::String>, \"null\");\n+    }\n \n-        let s = with_str_writer(|writer| {\n-            let mut encoder = Encoder::new(writer);\n-            value.encode(&mut encoder).unwrap();\n-        });\n-        assert_eq!(s, \"null\");\n+    #[test]\n+    fn test_write_char() {\n+        check_encoder_for_simple!('a', \"\\\"a\\\"\");\n+        check_encoder_for_simple!('\\t', \"\\\"\\\\t\\\"\");\n+        check_encoder_for_simple!('\\u00a0', \"\\\"\\u00a0\\\"\");\n+        check_encoder_for_simple!('\\uabcd', \"\\\"\\uabcd\\\"\");\n+        check_encoder_for_simple!('\\U0010ffff', \"\\\"\\U0010ffff\\\"\");\n     }\n \n     #[test]"}]}