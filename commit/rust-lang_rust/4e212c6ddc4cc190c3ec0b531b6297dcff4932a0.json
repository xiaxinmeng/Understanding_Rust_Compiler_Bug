{"sha": "4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMjEyYzZkZGM0Y2MxOTBjM2VjMGI1MzFiNjI5N2RjZmY0OTMyYTA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-11T18:47:52Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-14T17:54:58Z"}, "message": "Avoid some unnecessary symbol interner operations", "tree": {"sha": "63f4cb75012fdfaf055e879fd5557cc8b385e04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63f4cb75012fdfaf055e879fd5557cc8b385e04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "html_url": "https://github.com/rust-lang/rust/commit/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be", "html_url": "https://github.com/rust-lang/rust/commit/8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "e3cd2948d7af5c12b82bafa1bae47c7fa0180d86", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "patch": "@@ -305,7 +305,7 @@ impl<'a> Resolver<'a> {\n                 }\n \n                 // Empty groups `a::b::{}` are turned into synthetic `self` imports\n-                // `a::b::c::{self as __dummy}`, so that their prefixes are correctly\n+                // `a::b::c::{self as _}`, so that their prefixes are correctly\n                 // resolved and checked for privacy/stability/etc.\n                 if items.is_empty() && !empty_for_self(&prefix) {\n                     let new_span = prefix[prefix.len() - 1].ident.span;\n@@ -314,7 +314,7 @@ impl<'a> Resolver<'a> {\n                             Ident::new(kw::SelfLower, new_span)\n                         ),\n                         kind: ast::UseTreeKind::Simple(\n-                            Some(Ident::from_str_and_span(\"__dummy\", new_span).gensym()),\n+                            Some(Ident::new(kw::Underscore, new_span)),\n                             ast::DUMMY_NODE_ID,\n                             ast::DUMMY_NODE_ID,\n                         ),"}, {"sha": "620d50bdc0230457a9bed4966a52e7a43f93e6fc", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "patch": "@@ -121,19 +121,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n         }\n     });\n \n-    let span = span.apply_mark(ecx.current_expansion.mark);\n-\n-    let name = Ident::from_str_and_span(&format!(\"__register_diagnostic_{}\", code), span).gensym();\n-\n-    MacEager::items(smallvec![\n-        ecx.item_mod(\n-            span,\n-            span,\n-            name,\n-            vec![],\n-            vec![],\n-        )\n-    ])\n+    MacEager::items(smallvec![])\n }\n \n #[allow(deprecated)]"}, {"sha": "b50a404d081700da21a088e19a595f6818ab5849", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "patch": "@@ -249,8 +249,9 @@ pub fn compile(\n     def: &ast::Item,\n     edition: Edition\n ) -> SyntaxExtension {\n-    let lhs_nm = ast::Ident::from_str(\"lhs\").gensym();\n-    let rhs_nm = ast::Ident::from_str(\"rhs\").gensym();\n+    let lhs_nm = ast::Ident::new(sym::lhs, def.span);\n+    let rhs_nm = ast::Ident::new(sym::rhs, def.span);\n+    let tt_spec = ast::Ident::new(sym::tt, def.span);\n \n     // Parse the macro_rules! invocation\n     let body = match def.node {\n@@ -266,9 +267,9 @@ pub fn compile(\n     let argument_gram = vec![\n         quoted::TokenTree::Sequence(DelimSpan::dummy(), Lrc::new(quoted::SequenceRepetition {\n             tts: vec![\n-                quoted::TokenTree::MetaVarDecl(def.span, lhs_nm, ast::Ident::from_str(\"tt\")),\n+                quoted::TokenTree::MetaVarDecl(def.span, lhs_nm, tt_spec),\n                 quoted::TokenTree::token(token::FatArrow, def.span),\n-                quoted::TokenTree::MetaVarDecl(def.span, rhs_nm, ast::Ident::from_str(\"tt\")),\n+                quoted::TokenTree::MetaVarDecl(def.span, rhs_nm, tt_spec),\n             ],\n             separator: Some(Token::new(\n                 if body.legacy { token::Semi } else { token::Comma }, def.span\n@@ -1115,10 +1116,9 @@ fn has_legal_fragment_specifier(sess: &ParseSess,\n                                 tok: &quoted::TokenTree) -> Result<(), String> {\n     debug!(\"has_legal_fragment_specifier({:?})\", tok);\n     if let quoted::TokenTree::MetaVarDecl(_, _, ref frag_spec) = *tok {\n-        let frag_name = frag_spec.as_str();\n         let frag_span = tok.span();\n-        if !is_legal_fragment_specifier(sess, features, attrs, &frag_name, frag_span) {\n-            return Err(frag_name.to_string());\n+        if !is_legal_fragment_specifier(sess, features, attrs, frag_spec.name, frag_span) {\n+            return Err(frag_spec.to_string());\n         }\n     }\n     Ok(())\n@@ -1127,7 +1127,7 @@ fn has_legal_fragment_specifier(sess: &ParseSess,\n fn is_legal_fragment_specifier(_sess: &ParseSess,\n                                _features: &Features,\n                                _attrs: &[ast::Attribute],\n-                               frag_name: &str,\n+                               frag_name: Symbol,\n                                _frag_span: Span) -> bool {\n     /*\n      * If new fragment specifiers are invented in nightly, `_sess`,\n@@ -1136,9 +1136,9 @@ fn is_legal_fragment_specifier(_sess: &ParseSess,\n      * this function.\n      */\n     match frag_name {\n-        \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" | \"lifetime\" |\n-        \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" | \"vis\" | \"literal\" |\n-        \"\" => true,\n+        sym::item | sym::block | sym::stmt | sym::expr | sym::pat |\n+        sym::lifetime | sym::path | sym::ty | sym::ident | sym::meta | sym::tt |\n+        sym::vis | sym::literal | kw::Invalid => true,\n         _ => false,\n     }\n }"}, {"sha": "cbaf12529c101c3d4d9a4561dd9f87e15b3aedc6", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "patch": "@@ -327,7 +327,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     //        }\n     let sp = ignored_span(cx, DUMMY_SP);\n     let ecx = &cx.ext_cx;\n-    let test_id = ecx.ident_of(\"test\").gensym();\n+    let test_id = Ident::with_empty_ctxt(sym::test);\n \n     // test::test_main_static(...)\n     let mut test_runner = cx.test_runner.clone().unwrap_or(\n@@ -350,7 +350,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     let test_extern_stmt = ecx.stmt_item(sp, ecx.item(sp,\n         test_id,\n         vec![],\n-        ast::ItemKind::ExternCrate(Some(sym::test))\n+        ast::ItemKind::ExternCrate(None)\n     ));\n \n     // pub fn main() { ... }"}, {"sha": "03dc113b89fc382bd3692b863ca86eb343728d98", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e212c6ddc4cc190c3ec0b531b6297dcff4932a0/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4e212c6ddc4cc190c3ec0b531b6297dcff4932a0", "patch": "@@ -347,6 +347,7 @@ symbols! {\n         label_break_value,\n         lang,\n         lang_items,\n+        lhs,\n         lib,\n         lifetime,\n         link,\n@@ -505,6 +506,7 @@ symbols! {\n         result,\n         Result,\n         Return,\n+        rhs,\n         rlib,\n         rt,\n         rtm_target_feature,"}]}