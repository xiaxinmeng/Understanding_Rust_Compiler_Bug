{"sha": "e3b1471acdfe6121a8e0f657d8caa27393703253", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYjE0NzFhY2RmZTYxMjFhOGUwZjY1N2Q4Y2FhMjczOTM3MDMyNTM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-10-18T16:06:53Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-10-18T16:06:53Z"}, "message": "Rewrite io::ByteBuf into a struct", "tree": {"sha": "734cb135c2176fb18822b5092a883fe28067bdb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734cb135c2176fb18822b5092a883fe28067bdb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3b1471acdfe6121a8e0f657d8caa27393703253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b1471acdfe6121a8e0f657d8caa27393703253", "html_url": "https://github.com/rust-lang/rust/commit/e3b1471acdfe6121a8e0f657d8caa27393703253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3b1471acdfe6121a8e0f657d8caa27393703253/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b18a15171bfbcde81c44967a865214389d6fd7ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b18a15171bfbcde81c44967a865214389d6fd7ad", "html_url": "https://github.com/rust-lang/rust/commit/b18a15171bfbcde81c44967a865214389d6fd7ad"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "676883394af25b02bdaaa0f1d0d9d6d505a6135d", "filename": "src/libcore/io.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e3b1471acdfe6121a8e0f657d8caa27393703253/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b1471acdfe6121a8e0f657d8caa27393703253/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=e3b1471acdfe6121a8e0f657d8caa27393703253", "patch": "@@ -297,39 +297,41 @@ pub fn file_reader(path: &Path) -> Result<Reader, ~str> {\n }\n \n \n-// Byte buffer readers\n-\n-pub type ByteBuf = {buf: &[const u8], mut pos: uint};\n+// Byte readers\n+pub struct BytesReader {\n+    bytes: &[u8],\n+    mut pos: uint\n+}\n \n-impl ByteBuf: Reader {\n-    fn read(buf: &[mut u8], len: uint) -> uint {\n-        let count = uint::min(len, self.buf.len() - self.pos);\n+impl BytesReader: Reader {\n+    fn read(bytes: &[mut u8], len: uint) -> uint {\n+        let count = uint::min(len, self.bytes.len() - self.pos);\n \n-        let view = vec::const_view(self.buf, self.pos, self.buf.len());\n-        vec::bytes::memcpy(buf, view, count);\n+        let view = vec::view(self.bytes, self.pos, self.bytes.len());\n+        vec::bytes::memcpy(bytes, view, count);\n \n         self.pos += count;\n \n         count\n     }\n     fn read_byte() -> int {\n-        if self.pos == self.buf.len() { return -1; }\n-        let b = self.buf[self.pos];\n+        if self.pos == self.bytes.len() { return -1; }\n+        let b = self.bytes[self.pos];\n         self.pos += 1u;\n         return b as int;\n     }\n     // FIXME (#2738): implement this\n     fn unread_byte(_byte: int) { error!(\"Unimplemented: unread_byte\"); fail; }\n-    fn eof() -> bool { self.pos == self.buf.len() }\n+    fn eof() -> bool { self.pos == self.bytes.len() }\n     fn seek(offset: int, whence: SeekStyle) {\n         let pos = self.pos;\n-        self.pos = seek_in_buf(offset, pos, self.buf.len(), whence);\n+        self.pos = seek_in_buf(offset, pos, self.bytes.len(), whence);\n     }\n     fn tell() -> uint { self.pos }\n }\n \n pub pure fn with_bytes_reader<t>(bytes: &[u8], f: fn(Reader) -> t) -> t {\n-    f({buf: bytes, mut pos: 0u} as Reader)\n+    f(BytesReader { bytes: bytes, pos: 0u } as Reader)\n }\n \n pub fn with_str_reader<T>(s: &str, f: fn(Reader) -> T) -> T {"}]}