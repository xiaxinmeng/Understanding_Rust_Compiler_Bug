{"sha": "044703435ba7e1338456f7a83393eb2c6fecf238", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NDcwMzQzNWJhN2UxMzM4NDU2ZjdhODMzOTNlYjJjNmZlY2YyMzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-16T01:06:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-19T00:00:35Z"}, "message": "Add a way to run the test suite with the new scheduler\n\nTESTARGS=--newrt make check-stage1-rpass\n\nConflicts:\n\tsrc/rt/rustrt.def.in", "tree": {"sha": "9edfdc6ab1ab28e4c7abcf3176b073bda939f88b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9edfdc6ab1ab28e4c7abcf3176b073bda939f88b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/044703435ba7e1338456f7a83393eb2c6fecf238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/044703435ba7e1338456f7a83393eb2c6fecf238", "html_url": "https://github.com/rust-lang/rust/commit/044703435ba7e1338456f7a83393eb2c6fecf238", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/044703435ba7e1338456f7a83393eb2c6fecf238/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a882554a785152c74c96cee036d252b071ed5ce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a882554a785152c74c96cee036d252b071ed5ce1", "html_url": "https://github.com/rust-lang/rust/commit/a882554a785152c74c96cee036d252b071ed5ce1"}], "stats": {"total": 117, "additions": 95, "deletions": 22}, "files": [{"sha": "36691380e17a12c3b6e3ded0874aaa0cd8f4e991", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=044703435ba7e1338456f7a83393eb2c6fecf238", "patch": "@@ -63,6 +63,9 @@ pub struct config {\n     // Run tests using the JIT\n     jit: bool,\n \n+    // Run tests using the new runtime\n+    newrt: bool,\n+\n     // Explain what's going on\n     verbose: bool\n "}, {"sha": "0c1f328ad09faaaf4496f39f8a7cd457c5334406", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=044703435ba7e1338456f7a83393eb2c6fecf238", "patch": "@@ -61,7 +61,8 @@ pub fn parse_config(args: ~[~str]) -> config {\n           getopts::optopt(~\"runtool\"), getopts::optopt(~\"rustcflags\"),\n           getopts::optflag(~\"verbose\"),\n           getopts::optopt(~\"logfile\"),\n-          getopts::optflag(~\"jit\")];\n+          getopts::optflag(~\"jit\"),\n+          getopts::optflag(~\"newrt\")];\n \n     fail_unless!(!args.is_empty());\n     let args_ = vec::tail(args);\n@@ -95,6 +96,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n         runtool: getopts::opt_maybe_str(matches, ~\"runtool\"),\n         rustcflags: getopts::opt_maybe_str(matches, ~\"rustcflags\"),\n         jit: getopts::opt_present(matches, ~\"jit\"),\n+        newrt: getopts::opt_present(matches, ~\"newrt\"),\n         verbose: getopts::opt_present(matches, ~\"verbose\")\n     }\n }\n@@ -114,6 +116,7 @@ pub fn log_config(config: config) {\n     logv(c, fmt!(\"runtool: %s\", opt_str(config.runtool)));\n     logv(c, fmt!(\"rustcflags: %s\", opt_str(config.rustcflags)));\n     logv(c, fmt!(\"jit: %b\", config.jit));\n+    logv(c, fmt!(\"newrt: %b\", config.newrt));\n     logv(c, fmt!(\"verbose: %b\", config.verbose));\n     logv(c, fmt!(\"\\n\"));\n }"}, {"sha": "736aa4eebf0cb45f5f8a0a20b3f52b10a8ad91b6", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=044703435ba7e1338456f7a83393eb2c6fecf238", "patch": "@@ -483,9 +483,17 @@ fn compile_test_(config: config, props: TestProps,\n \n fn exec_compiled_test(config: config, props: TestProps,\n                       testfile: &Path) -> ProcRes {\n+\n+    // If testing the new runtime then set the RUST_NEWRT env var\n+    let env = if config.newrt {\n+        props.exec_env + ~[(~\"RUST_NEWRT\", ~\"1\")]\n+    } else {\n+        props.exec_env\n+    };\n+\n     compose_and_run(config, testfile,\n                     make_run_args(config, props, testfile),\n-                    props.exec_env,\n+                    env,\n                     config.run_lib_path, None)\n }\n "}, {"sha": "f900747c996048360e17e57e46e1d4324bd619d9", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=044703435ba7e1338456f7a83393eb2c6fecf238", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use libc::c_char;\n \n // Some basic logging\n macro_rules! rtdebug_ (\n@@ -44,3 +45,33 @@ mod stack;\n mod context;\n mod thread;\n pub mod env;\n+\n+pub fn initialize() {\n+    unsafe { rust_initialize_global_state(); }\n+    extern {\n+        fn rust_initialize_global_state();\n+    }\n+}\n+\n+pub fn start(main: *u8, _argc: int, _argv: *c_char, _crate_map: *u8) -> int {\n+    use self::sched::{Scheduler, Task};\n+    use self::uvio::UvEventLoop;\n+\n+    // XXX: Would rather do this lazily in Scheduler\n+    initialize();\n+\n+    let loop_ = ~UvEventLoop::new();\n+    let mut sched = ~Scheduler::new(loop_);\n+    let main_task = ~do Task::new(&mut sched.stack_pool) {\n+        // XXX: Can't call a C function pointer from Rust yet\n+        unsafe { rust_call_nullary_fn(main) };\n+    };\n+    sched.task_queue.push_back(main_task);\n+    sched.run();\n+    return 0;\n+\n+    extern {\n+        fn rust_call_nullary_fn(f: *u8);\n+    }\n+}\n+"}, {"sha": "855c6b250ec0d0ad859e8e5f15628da534622e98", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=044703435ba7e1338456f7a83393eb2c6fecf238", "patch": "@@ -120,16 +120,25 @@ pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n #[lang=\"start\"]\n pub fn start(main: *u8, argc: int, argv: *c_char,\n              crate_map: *u8) -> int {\n+    use libc::getenv;\n+    use rt::start;\n+\n+    unsafe {\n+        let use_new_rt = do str::as_c_str(\"RUST_NEWRT\") |s| {\n+            getenv(s).is_null()\n+        };\n+        if use_new_rt {\n+            return rust_start(main as *c_void, argc as c_int, argv,\n+                              crate_map as *c_void) as int;\n+        } else {\n+            return start(main, argc, argv, crate_map);\n+        }\n+    }\n \n     extern {\n         fn rust_start(main: *c_void, argc: c_int, argv: *c_char,\n                       crate_map: *c_void) -> c_int;\n     }\n-\n-    unsafe {\n-        return rust_start(main as *c_void, argc as c_int, argv,\n-                          crate_map as *c_void) as int;\n-    }\n }\n \n // Local Variables:"}, {"sha": "803da32cbc8ac7cffa5c8c6631ce5fdc31b69bee", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=044703435ba7e1338456f7a83393eb2c6fecf238", "patch": "@@ -21,17 +21,6 @@\n \n void* global_crate_map = NULL;\n \n-#ifndef _WIN32\n-pthread_key_t sched_key;\n-#else\n-DWORD sched_key;\n-#endif\n-\n-extern \"C\" void*\n-rust_get_sched_tls_key() {\n-    return &sched_key;\n-}\n-\n /**\n    The runtime entrypoint. The (C ABI) main function generated by rustc calls\n    `rust_start`, providing the address of the Rust ABI main function, the\n@@ -41,10 +30,6 @@ rust_get_sched_tls_key() {\n extern \"C\" CDECL int\n rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n \n-#ifndef _WIN32\n-    pthread_key_create(&sched_key, NULL);\n-#endif\n-\n     // Load runtime configuration options from the environment.\n     // FIXME #1497: Should provide a way to get these from the command\n     // line as well."}, {"sha": "9349db17d569ea144582fcc4d6246e707ed4a42e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=044703435ba7e1338456f7a83393eb2c6fecf238", "patch": "@@ -882,6 +882,37 @@ rust_get_rt_env() {\n     return task->kernel->env;\n }\n \n+typedef void *(*nullary_fn)();\n+\n+extern \"C\" CDECL void\n+rust_call_nullary_fn(nullary_fn f) {\n+    f();\n+}\n+\n+\n+#ifndef _WIN32\n+pthread_key_t sched_key;\n+#else\n+DWORD sched_key;\n+#endif\n+\n+extern \"C\" void*\n+rust_get_sched_tls_key() {\n+    return &sched_key;\n+}\n+\n+extern \"C\" CDECL void\n+rust_initialize_global_state() {\n+\n+#ifndef _WIN32\n+    assert(!pthread_key_create(&sched_key, NULL));\n+#else\n+    sched_key = TlsAlloc();\n+    assert(sched_key != TLS_OUT_OF_INDEXES);\n+#endif\n+\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "59fd8991622c69c5e393ead5d47375683f1e89f9", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/044703435ba7e1338456f7a83393eb2c6fecf238/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=044703435ba7e1338456f7a83393eb2c6fecf238", "patch": "@@ -210,4 +210,7 @@ rust_uv_ip4_addrp\n rust_uv_ip6_addrp\n rust_uv_free_ip4_addr\n rust_uv_free_ip6_addr\n+rust_call_nullary_fn\n+rust_initialize_global_state\n+\n "}]}