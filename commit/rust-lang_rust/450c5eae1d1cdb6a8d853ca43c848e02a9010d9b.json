{"sha": "450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MGM1ZWFlMWQxY2RiNmE4ZDg1M2NhNDNjODQ4ZTAyYTkwMTBkOWI=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-20T21:46:34Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-20T21:46:34Z"}, "message": "Move StructType to clean, remove it from Unions, make JSON output whether something is a union", "tree": {"sha": "808e79abe9755e7de79600dd00f4490eae3f339d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/808e79abe9755e7de79600dd00f4490eae3f339d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmAIpLoACgkQfsyTL4ss\ncx405hAA1VWrWkFJr/wIMQHR/zTwRcuaCrPTZ+qAocPzNSNWEsew/t8ZfgDQrL6r\nlm87JxlgRyZmRABFdcwCIdiQnyV/ZzORMQsa+MEJ8cF4IHb/6XJABd5gHrBBPelI\nojlkb+GIqGpa+L5y9vqcXJm7d/AOrwwehdEtb3Hvgbqn7S6JiqeL1AtRypHbPsu+\nUahTSJOP+pjvolUSyN5zxM0Myw94Gh3r1P5b4egsfEUh4ZcPb9RS8D6Dxte2H5h0\nnyIArDYmCnOzFiuzL/cNg4NfCnuwY3Qp1gkX+VbeekO7RcHE3luZqr5cSjD+bvjq\n/t4zouI6aFA7SAUi4VzW+bBB0kL1LeLNjzTgpYIthz+2mdetYjIKkhLtCKEwqYgO\ncU9r9jZfBbhIPbWuszVjpalaeCTPN/3sF/f3dRUwY0q9kYIjJomQcXYaVOFpKkol\nYg6/K+xsZmRG3wgyn8Zw6m4klTV67SBdJSuz6bQofGRUy03KUmgUHwB66+Nr0HVL\nk0DSLCzcI+7W7vGfpPNmg3NjMSc6/SiCEvtjPlu6Cgo42PyPOSmrxu4MH7nSbyO8\nvvsd2lN6I6aVkGwCtVpCI4FlBEXfkNnngCntakAsEVXi+XqPtw+rdAbhpto5sIMT\nyE36h8SeCAL8biU2LBMlskUwEvt3JATGUCMSo0cVJDb1Kwzidrc=\n=hm5l\n-----END PGP SIGNATURE-----", "payload": "tree 808e79abe9755e7de79600dd00f4490eae3f339d\nparent a4cbb44ae2c80545db957763b502dc7f6ea22085\nauthor Rune Tynan <runetynan@gmail.com> 1611179194 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1611179194 -0500\n\nMove StructType to clean, remove it from Unions, make JSON output whether something is a union\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "html_url": "https://github.com/rust-lang/rust/commit/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cbb44ae2c80545db957763b502dc7f6ea22085", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cbb44ae2c80545db957763b502dc7f6ea22085", "html_url": "https://github.com/rust-lang/rust/commit/a4cbb44ae2c80545db957763b502dc7f6ea22085"}], "stats": {"total": 87, "additions": 40, "deletions": 47}, "files": [{"sha": "f2439af005325e4eb1e207b43e61bd3d63526a96", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "patch": "@@ -15,9 +15,8 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind};\n+use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind, StructType};\n use crate::core::DocContext;\n-use crate::doctree;\n \n use super::Clean;\n \n@@ -247,9 +246,9 @@ fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n \n     clean::Struct {\n         struct_type: match variant.ctor_kind {\n-            CtorKind::Fictive => doctree::Plain,\n-            CtorKind::Fn => doctree::Tuple,\n-            CtorKind::Const => doctree::Unit,\n+            CtorKind::Fictive => StructType::Plain,\n+            CtorKind::Fn => StructType::Tuple,\n+            CtorKind::Const => StructType::Unit,\n         },\n         generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n@@ -262,7 +261,6 @@ fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Union {\n-        struct_type: doctree::Plain,\n         generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,"}, {"sha": "4092ff5557533983932eb14bed0f0bf475863806", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "patch": "@@ -1824,10 +1824,19 @@ impl Clean<Visibility> for ty::Visibility {\n     }\n }\n \n+crate fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {\n+    use StructType::*;\n+    match *vdata {\n+        hir::VariantData::Struct(..) => Plain,\n+        hir::VariantData::Tuple(..) => Tuple,\n+        hir::VariantData::Unit(..) => Unit,\n+    }\n+}\n+\n impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> VariantStruct {\n         VariantStruct {\n-            struct_type: doctree::struct_type_from_def(self),\n+            struct_type: struct_type_from_def(self),\n             fields: self.fields().iter().map(|x| x.clean(cx)).collect(),\n             fields_stripped: false,\n         }\n@@ -1842,7 +1851,7 @@ impl Clean<Item> for ty::VariantDef {\n                 self.fields.iter().map(|f| cx.tcx.type_of(f.did).clean(cx)).collect(),\n             ),\n             CtorKind::Fictive => Variant::Struct(VariantStruct {\n-                struct_type: doctree::Plain,\n+                struct_type: StructType::Plain,\n                 fields_stripped: false,\n                 fields: self\n                     .fields\n@@ -1996,13 +2005,12 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                     bounds: bounds.clean(cx),\n                 }),\n                 ItemKind::Union(ref variant_data, ref generics) => UnionItem(Union {\n-                    struct_type: doctree::struct_type_from_def(&variant_data),\n                     generics: generics.clean(cx),\n                     fields: variant_data.fields().clean(cx),\n                     fields_stripped: false,\n                 }),\n                 ItemKind::Struct(ref variant_data, ref generics) => StructItem(Struct {\n-                    struct_type: doctree::struct_type_from_def(&variant_data),\n+                    struct_type: struct_type_from_def(&variant_data),\n                     generics: generics.clean(cx),\n                     fields: variant_data.fields().clean(cx),\n                     fields_stripped: false,"}, {"sha": "2e272aacd6b9ceeb2cf6747676b4b335387df56b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "patch": "@@ -37,7 +37,6 @@ use crate::clean::inline;\n use crate::clean::types::Type::{QPath, ResolvedPath};\n use crate::clean::Clean;\n use crate::core::DocContext;\n-use crate::doctree;\n use crate::formats::cache::cache;\n use crate::formats::item_type::ItemType;\n use crate::html::render::cache::ExternalLocation;\n@@ -1683,17 +1682,26 @@ impl Visibility {\n     }\n }\n \n+#[derive(Debug, Clone, Copy)]\n+crate enum StructType {\n+    /// A braced struct\n+    Plain,\n+    /// A tuple struct\n+    Tuple,\n+    /// A unit struct\n+    Unit,\n+}\n+\n #[derive(Clone, Debug)]\n crate struct Struct {\n-    crate struct_type: doctree::StructType,\n+    crate struct_type: StructType,\n     crate generics: Generics,\n     crate fields: Vec<Item>,\n     crate fields_stripped: bool,\n }\n \n #[derive(Clone, Debug)]\n crate struct Union {\n-    crate struct_type: doctree::StructType,\n     crate generics: Generics,\n     crate fields: Vec<Item>,\n     crate fields_stripped: bool,\n@@ -1704,7 +1712,7 @@ crate struct Union {\n /// only as a variant in an enum.\n #[derive(Clone, Debug)]\n crate struct VariantStruct {\n-    crate struct_type: doctree::StructType,\n+    crate struct_type: StructType,\n     crate fields: Vec<Item>,\n     crate fields_stripped: bool,\n }"}, {"sha": "645b2bb193ec258c3da5d58a6dceb0714c908b1a", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "patch": "@@ -1,7 +1,5 @@\n //! This module is used to store stuff from Rust's AST in a more convenient\n //! manner (and with prettier names) before cleaning.\n-crate use self::StructType::*;\n-\n use rustc_span::{self, Span, Symbol};\n \n use rustc_hir as hir;\n@@ -34,21 +32,3 @@ impl Module<'hir> {\n         }\n     }\n }\n-\n-#[derive(Debug, Clone, Copy)]\n-crate enum StructType {\n-    /// A braced struct\n-    Plain,\n-    /// A tuple struct\n-    Tuple,\n-    /// A unit struct\n-    Unit,\n-}\n-\n-crate fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {\n-    match *vdata {\n-        hir::VariantData::Struct(..) => Plain,\n-        hir::VariantData::Tuple(..) => Tuple,\n-        hir::VariantData::Unit(..) => Unit,\n-    }\n-}"}, {"sha": "29ded0b854ed1336327acc162503ad3ec1178e03", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "patch": "@@ -68,7 +68,6 @@ use serde::{Serialize, Serializer};\n use crate::clean::{self, AttributesExt, GetDefId, RenderedLink, SelfTy, TypeKind};\n use crate::config::{RenderInfo, RenderOptions};\n use crate::docfs::{DocFS, PathError};\n-use crate::doctree;\n use crate::error::Error;\n use crate::formats::cache::{cache, Cache};\n use crate::formats::item_type::ItemType;\n@@ -3101,7 +3100,7 @@ fn item_struct(\n             _ => None,\n         })\n         .peekable();\n-    if let doctree::Plain = s.struct_type {\n+    if let clean::StructType::Plain = s.struct_type {\n         if fields.peek().is_some() {\n             write!(\n                 w,\n@@ -3351,7 +3350,7 @@ fn render_struct(\n     w: &mut Buffer,\n     it: &clean::Item,\n     g: Option<&clean::Generics>,\n-    ty: doctree::StructType,\n+    ty: clean::StructType,\n     fields: &[clean::Item],\n     tab: &str,\n     structhead: bool,\n@@ -3368,7 +3367,7 @@ fn render_struct(\n         write!(w, \"{}\", g.print())\n     }\n     match ty {\n-        doctree::Plain => {\n+        clean::StructType::Plain => {\n             if let Some(g) = g {\n                 write!(w, \"{}\", WhereClause { gens: g, indent: 0, end_newline: true })\n             }\n@@ -3400,7 +3399,7 @@ fn render_struct(\n             }\n             write!(w, \"}}\");\n         }\n-        doctree::Tuple => {\n+        clean::StructType::Tuple => {\n             write!(w, \"(\");\n             for (i, field) in fields.iter().enumerate() {\n                 if i > 0 {\n@@ -3425,7 +3424,7 @@ fn render_struct(\n             }\n             write!(w, \";\");\n         }\n-        doctree::Unit => {\n+        clean::StructType::Unit => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n                 write!(w, \"{}\", WhereClause { gens: g, indent: 0, end_newline: false })\n@@ -4460,7 +4459,7 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n     let fields = get_struct_fields_name(&s.fields);\n \n     if !fields.is_empty() {\n-        if let doctree::Plain = s.struct_type {\n+        if let clean::StructType::Plain = s.struct_type {\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n                  <div class=\\\"sidebar-links\\\">{}</div>\","}, {"sha": "b872f94908775e7f7c8457bb68652cc43cbde1b1", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "patch": "@@ -9,7 +9,6 @@ use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_span::Pos;\n \n use crate::clean;\n-use crate::doctree;\n use crate::formats::item_type::ItemType;\n use crate::json::types::*;\n use crate::json::JsonRenderer;\n@@ -210,9 +209,9 @@ impl From<clean::Struct> for Struct {\n \n impl From<clean::Union> for Struct {\n     fn from(struct_: clean::Union) -> Self {\n-        let clean::Union { struct_type, generics, fields, fields_stripped } = struct_;\n+        let clean::Union { generics, fields, fields_stripped } = struct_;\n         Struct {\n-            struct_type: struct_type.into(),\n+            struct_type: StructType::Union,\n             generics: generics.into(),\n             fields_stripped,\n             fields: ids(fields),\n@@ -221,9 +220,9 @@ impl From<clean::Union> for Struct {\n     }\n }\n \n-impl From<doctree::StructType> for StructType {\n-    fn from(struct_type: doctree::StructType) -> Self {\n-        use doctree::StructType::*;\n+impl From<clean::StructType> for StructType {\n+    fn from(struct_type: clean::StructType) -> Self {\n+        use clean::StructType::*;\n         match struct_type {\n             Plain => StructType::Plain,\n             Tuple => StructType::Tuple,"}, {"sha": "268cbcc1aece0b8d0d84257db912a9e947de8ea7", "filename": "src/librustdoc/json/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fjson%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b/src%2Flibrustdoc%2Fjson%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Ftypes.rs?ref=450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "patch": "@@ -269,6 +269,7 @@ pub enum StructType {\n     Plain,\n     Tuple,\n     Unit,\n+    Union,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}]}