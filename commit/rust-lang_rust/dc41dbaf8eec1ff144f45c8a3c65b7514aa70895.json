{"sha": "dc41dbaf8eec1ff144f45c8a3c65b7514aa70895", "node_id": "C_kwDOAAsO6NoAKGRjNDFkYmFmOGVlYzFmZjE0NGY0NWM4YTNjNjViNzUxNGFhNzA4OTU", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-04-26T02:14:09Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-04-26T02:14:09Z"}, "message": "Update unop path, fix tests", "tree": {"sha": "dbdf2a7818ccba04f6237dd37ae14296c7ab8b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbdf2a7818ccba04f6237dd37ae14296c7ab8b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895", "html_url": "https://github.com/rust-lang/rust/commit/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d0fe27896294fd22854fdc76357bcef96e2005a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0fe27896294fd22854fdc76357bcef96e2005a", "html_url": "https://github.com/rust-lang/rust/commit/4d0fe27896294fd22854fdc76357bcef96e2005a"}], "stats": {"total": 145, "additions": 51, "deletions": 94}, "files": [{"sha": "1ae53a77adc566589bc4a489c78903e9a54549ef", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=dc41dbaf8eec1ff144f45c8a3c65b7514aa70895", "patch": "@@ -456,25 +456,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // the resulting predicate generates a more specific\n                         // suggestion for the user.\n                         let errors = self\n-                        .lookup_op_method(lhs_ty, &[rhs_ty], Op::Binary(op, is_assign))\n-                        .unwrap_err();\n-                    let predicates = errors\n-                        .into_iter()\n-                        .filter_map(|error| error.obligation.predicate.to_opt_poly_trait_pred())\n-                        .collect::<Vec<_>>();\n-                    if !predicates.is_empty() {\n-                        for pred in predicates {\n-                            self.infcx.suggest_restricting_param_bound(&mut err,\n-                                pred,\n-                                self.body_id,\n-                            );\n+                            .lookup_op_method(\n+                                lhs_ty,\n+                                Some(rhs_ty),\n+                                Some(rhs_expr),\n+                                Op::Binary(op, is_assign),\n+                            )\n+                            .unwrap_err();\n+                        let predicates = errors\n+                            .into_iter()\n+                            .filter_map(|error| error.obligation.predicate.to_opt_poly_trait_pred())\n+                            .collect::<Vec<_>>();\n+                        if !predicates.is_empty() {\n+                            for pred in predicates {\n+                                self.infcx.suggest_restricting_param_bound(\n+                                    &mut err,\n+                                    pred,\n+                                    self.body_id,\n+                                );\n+                            }\n+                        } else if *ty != lhs_ty {\n+                            // When we know that a missing bound is responsible, we don't show\n+                            // this note as it is redundant.\n+                            err.note(&format!(\n+                                \"the trait `{missing_trait}` is not implemented for `{lhs_ty}`\"\n+                            ));\n                         }\n-                     } else if *ty != lhs_ty {\n-                        // When we know that a missing bound is responsible, we don't show\n-                        // this note as it is redundant.\n-                        err.note(&format!(\n-                            \"the trait `{missing_trait}` is not implemented for `{lhs_ty}`\"\n-                        ));                    \n                     }\n                 }\n                 err.emit();\n@@ -663,24 +670,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ex.span,\n                         format!(\"cannot apply unary operator `{}`\", op.as_str()),\n                     );\n-                    let missing_trait = match op {\n-                        hir::UnOp::Deref => unreachable!(\"check unary op `-` or `!` only\"),\n-                        hir::UnOp::Not => \"std::ops::Not\",\n-                        hir::UnOp::Neg => \"std::ops::Neg\",\n-                    };\n+\n                     let mut visitor = TypeParamVisitor(vec![]);\n                     visitor.visit_ty(operand_ty);\n-                    if let [ty] = &visitor.0[..] && let ty::Param(p) = *operand_ty.kind() {\n-                        suggest_constraining_param(\n-                            self.tcx,\n-                            self.body_id,\n-                            &mut err,\n-                            *ty,\n-                            operand_ty,\n-                            missing_trait,\n-                            p,\n-                            true,\n-                        );\n+                    if let [_] = &visitor.0[..] && let ty::Param(_) = *operand_ty.kind() {\n+                        let predicates = errors\n+                            .iter()\n+                            .filter_map(|error| {\n+                                error.obligation.predicate.clone().to_opt_poly_trait_pred()\n+                            });\n+                        for pred in predicates {\n+                            self.infcx.suggest_restricting_param_bound(\n+                                &mut err,\n+                                pred,\n+                                self.body_id,\n+                            );\n+                        }\n                     }\n \n                     let sp = self.tcx.sess.source_map().start_point(ex.span);"}, {"sha": "8eddfe21e30fa2bccddeedabed31dacc270cbaf6", "filename": "src/test/ui/generic-associated-types/missing-bounds.fixed", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4d0fe27896294fd22854fdc76357bcef96e2005a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4d0fe27896294fd22854fdc76357bcef96e2005a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed?ref=4d0fe27896294fd22854fdc76357bcef96e2005a", "patch": "@@ -1,46 +0,0 @@\n-// run-rustfix\n-\n-use std::ops::Add;\n-\n-struct A<B>(B);\n-\n-impl<B> Add for A<B> where B: Add + Add<Output = B> {\n-    type Output = Self;\n-\n-    fn add(self, rhs: Self) -> Self {\n-        A(self.0 + rhs.0) //~ ERROR mismatched types\n-    }\n-}\n-\n-struct C<B>(B);\n-\n-impl<B: Add + Add<Output = B>> Add for C<B> {\n-    type Output = Self;\n-\n-    fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0) //~ ERROR mismatched types\n-    }\n-}\n-\n-struct D<B>(B);\n-\n-impl<B: std::ops::Add> Add for D<B> {\n-    type Output = Self;\n-\n-    fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0) //~ ERROR cannot add `B` to `B`\n-    }\n-}\n-\n-struct E<B>(B);\n-\n-impl<B: Add> Add for E<B> where B: Add<Output = B>, B: Add<Output = B> {\n-    //~^ ERROR equality constraints are not yet supported in `where` clauses\n-    type Output = Self;\n-\n-    fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0) //~ ERROR mismatched types\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "b3661ba3744eec99eb11d3495e79f9b6bd25325e", "filename": "src/test/ui/generic-associated-types/missing-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs?ref=dc41dbaf8eec1ff144f45c8a3c65b7514aa70895", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n use std::ops::Add;\n \n struct A<B>(B);"}, {"sha": "aaeec920527edfbc43ee3ceacc0a107d6790567e", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=dc41dbaf8eec1ff144f45c8a3c65b7514aa70895", "patch": "@@ -1,5 +1,5 @@\n error: equality constraints are not yet supported in `where` clauses\n-  --> $DIR/missing-bounds.rs:37:33\n+  --> $DIR/missing-bounds.rs:35:33\n    |\n LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^ not supported\n@@ -11,7 +11,7 @@ LL | impl<B: Add> Add for E<B> where B: Add<Output = B> {\n    |                                 ~~~~~~~~~~~~~~~~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/missing-bounds.rs:11:11\n+  --> $DIR/missing-bounds.rs:9:11\n    |\n LL | impl<B> Add for A<B> where B: Add {\n    |      - this type parameter\n@@ -24,7 +24,7 @@ LL |         A(self.0 + rhs.0)\n    = note: expected type parameter `B`\n              found associated type `<B as Add>::Output`\n note: tuple struct defined here\n-  --> $DIR/missing-bounds.rs:5:8\n+  --> $DIR/missing-bounds.rs:3:8\n    |\n LL | struct A<B>(B);\n    |        ^\n@@ -34,7 +34,7 @@ LL | impl<B> Add for A<B> where B: Add + Add<Output = B> {\n    |                                   +++++++++++++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/missing-bounds.rs:21:14\n+  --> $DIR/missing-bounds.rs:19:14\n    |\n LL | impl<B: Add> Add for C<B> {\n    |      - this type parameter\n@@ -47,7 +47,7 @@ LL |         Self(self.0 + rhs.0)\n    = note: expected type parameter `B`\n              found associated type `<B as Add>::Output`\n note: tuple struct defined here\n-  --> $DIR/missing-bounds.rs:15:8\n+  --> $DIR/missing-bounds.rs:13:8\n    |\n LL | struct C<B>(B);\n    |        ^\n@@ -57,7 +57,7 @@ LL | impl<B: Add + Add<Output = B>> Add for C<B> {\n    |             +++++++++++++++++\n \n error[E0369]: cannot add `B` to `B`\n-  --> $DIR/missing-bounds.rs:31:21\n+  --> $DIR/missing-bounds.rs:29:21\n    |\n LL |         Self(self.0 + rhs.0)\n    |              ------ ^ ----- B\n@@ -70,7 +70,7 @@ LL | impl<B: std::ops::Add> Add for D<B> {\n    |       +++++++++++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/missing-bounds.rs:42:14\n+  --> $DIR/missing-bounds.rs:40:14\n    |\n LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n    |      - this type parameter\n@@ -83,7 +83,7 @@ LL |         Self(self.0 + rhs.0)\n    = note: expected type parameter `B`\n              found associated type `<B as Add>::Output`\n note: tuple struct defined here\n-  --> $DIR/missing-bounds.rs:35:8\n+  --> $DIR/missing-bounds.rs:33:8\n    |\n LL | struct E<B>(B);\n    |        ^"}, {"sha": "2b58cd4180bd337dbe1587faa416e5a971f7601b", "filename": "src/test/ui/type/type-check/missing_trait_impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc41dbaf8eec1ff144f45c8a3c65b7514aa70895/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr?ref=dc41dbaf8eec1ff144f45c8a3c65b7514aa70895", "patch": "@@ -32,8 +32,8 @@ LL |     let y = -x;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn baz<T: std::ops::Neg<Output = T>>(x: T) {\n-   |         +++++++++++++++++++++++++++\n+LL | fn baz<T: std::ops::Neg>(x: T) {\n+   |         +++++++++++++++\n \n error[E0600]: cannot apply unary operator `!` to type `T`\n   --> $DIR/missing_trait_impl.rs:14:13\n@@ -43,8 +43,8 @@ LL |     let y = !x;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn baz<T: std::ops::Not<Output = T>>(x: T) {\n-   |         +++++++++++++++++++++++++++\n+LL | fn baz<T: std::ops::Not>(x: T) {\n+   |         +++++++++++++++\n \n error[E0614]: type `T` cannot be dereferenced\n   --> $DIR/missing_trait_impl.rs:15:13"}]}