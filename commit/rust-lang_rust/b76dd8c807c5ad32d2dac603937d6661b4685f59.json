{"sha": "b76dd8c807c5ad32d2dac603937d6661b4685f59", "node_id": "C_kwDOAAsO6NoAKGI3NmRkOGM4MDdjNWFkMzJkMmRhYzYwMzkzN2Q2NjYxYjQ2ODVmNTk", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-04-04T08:41:44Z"}, "committer": {"name": "julianknodt", "email": "julianknodt@gmail.com", "date": "2023-04-07T18:18:07Z"}, "message": "Add feature gate", "tree": {"sha": "f6ce7538611fd3bf08b3a6a84646273d6af103eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ce7538611fd3bf08b3a6a84646273d6af103eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b76dd8c807c5ad32d2dac603937d6661b4685f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b76dd8c807c5ad32d2dac603937d6661b4685f59", "html_url": "https://github.com/rust-lang/rust/commit/b76dd8c807c5ad32d2dac603937d6661b4685f59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b76dd8c807c5ad32d2dac603937d6661b4685f59/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "648a35e3279f98783aaa0f78b71f5aee2f247225", "url": "https://api.github.com/repos/rust-lang/rust/commits/648a35e3279f98783aaa0f78b71f5aee2f247225", "html_url": "https://github.com/rust-lang/rust/commit/648a35e3279f98783aaa0f78b71f5aee2f247225"}], "stats": {"total": 218, "additions": 200, "deletions": 18}, "files": [{"sha": "8fb8c9b1883f6af0e7daaa85cac0862ac1978f07", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -516,6 +516,8 @@ declare_features! (\n     /// Allows dyn upcasting trait objects via supertraits.\n     /// Dyn upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n     (active, trait_upcasting, \"1.56.0\", Some(65991), None),\n+    /// Allows for transmuting between arrays with sizes that contain generic consts.\n+    (active, transmute_generic_consts, \"CURRENT_RUSTC_VERSION\", Some(109929), None),\n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n     /// Allows inconsistent bounds in where clauses."}, {"sha": "bb1d3bb7a308eac5c7421f05e43c424cf947076e", "filename": "compiler/rustc_hir_typeck/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let Some(size) = size.try_eval_target_usize(tcx, self.param_env) {\n                     format!(\"{size} bytes\")\n                 } else {\n-                    format!(\"generic size\")\n+                    format!(\"generic size {size}\")\n                 }\n             }\n             Err(LayoutError::Unknown(bad)) => {"}, {"sha": "f52e785cd0ae7773303d53372fdcd731fd8661a7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -332,7 +332,9 @@ impl<'tcx> SizeSkeleton<'tcx> {\n                     ),\n                 }\n             }\n-            ty::Array(inner, len) if len.ty() == tcx.types.usize => {\n+            ty::Array(inner, len)\n+                if len.ty() == tcx.types.usize && tcx.features().transmute_generic_consts =>\n+            {\n                 match SizeSkeleton::compute(inner, tcx, param_env)? {\n                     // This may succeed because the multiplication of two types may overflow\n                     // but a single size of a nested array will not.\n@@ -483,17 +485,17 @@ fn mul_sorted_consts<'tcx>(\n     }\n     let mut k = 1;\n     let mut overflow = false;\n-    for _ in done.drain_filter(|c| {\n+    done.retain(|c| {\n         let Some(c) = c.try_eval_target_usize(tcx, param_env) else {\n-            return false;\n+            return true;\n         };\n         let Some(next) = c.checked_mul(k) else {\n             overflow = true;\n-            return true;\n+            return false;\n         };\n-        k *= next;\n-        true\n-    }) {}\n+        k = next;\n+        false\n+    });\n     if overflow {\n         return None;\n     }"}, {"sha": "bc2e9cbb8afe9d21b2655fedb00a3af393eee17b", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -1493,6 +1493,7 @@ symbols! {\n         trait_alias,\n         trait_upcasting,\n         transmute,\n+        transmute_generic_consts,\n         transmute_opts,\n         transmute_trait,\n         transparent,"}, {"sha": "d7bf1b47fb5a70686d4544744f1249e6e28a1801", "filename": "tests/ui/const-generics/transmute-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftransmute-fail.rs?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -1,3 +1,4 @@\n+#![feature(transmute_generic_consts)]\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n "}, {"sha": "41b098135e81e0c2bb9f47b1b9c08e54e9366661", "filename": "tests/ui/const-generics/transmute-fail.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -1,14 +1,14 @@\n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-fail.rs:6:5\n+  --> $DIR/transmute-fail.rs:7:5\n    |\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[[u32; H+1]; W]` (generic size)\n-   = note: target type: `[[u32; W+1]; H]` (generic size)\n+   = note: source type: `[[u32; H+1]; W]` (generic size [const expr])\n+   = note: target type: `[[u32; W+1]; H]` (generic size [const expr])\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-fail.rs:15:5\n+  --> $DIR/transmute-fail.rs:16:5\n    |\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -17,28 +17,28 @@ LL |     std::mem::transmute(v)\n    = note: target type: `[[u32; W]; H]` (size can vary because of [u32; W])\n \n error[E0308]: mismatched types\n-  --> $DIR/transmute-fail.rs:11:53\n+  --> $DIR/transmute-fail.rs:12:53\n    |\n LL | fn bar<const W: bool, const H: usize>(v: [[u32; H]; W]) -> [[u32; W]; H] {\n    |                                                     ^ expected `usize`, found `bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/transmute-fail.rs:11:67\n+  --> $DIR/transmute-fail.rs:12:67\n    |\n LL | fn bar<const W: bool, const H: usize>(v: [[u32; H]; W]) -> [[u32; W]; H] {\n    |                                                                   ^ expected `usize`, found `bool`\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-fail.rs:22:5\n+  --> $DIR/transmute-fail.rs:23:5\n    |\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[[u32; H]; W]` (generic size)\n-   = note: target type: `[u32; W * H * H]` (generic size)\n+   = note: source type: `[[u32; H]; W]` (generic size [const expr])\n+   = note: target type: `[u32; W * H * H]` (generic size [const expr])\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/transmute-fail.rs:29:5\n+  --> $DIR/transmute-fail.rs:30:5\n    |\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^"}, {"sha": "30560a95b5e1638524c27fff19eb68920b4539eb", "filename": "tests/ui/const-generics/transmute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftransmute.rs?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(generic_const_exprs)]\n+#![feature(transmute_generic_consts)]\n #![allow(incomplete_features)]\n \n fn transpose<const W: usize, const H: usize>(v: [[u32;H]; W]) -> [[u32; W]; H] {"}, {"sha": "e1ac44390a5f84532984d6ddbe7d16cc6d1f0d5e", "filename": "tests/ui/const-generics/transmute_no_gate.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute_no_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute_no_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftransmute_no_gate.rs?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -0,0 +1,91 @@\n+// gate-test-transmute_generic_consts\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn transpose<const W: usize, const H: usize>(v: [[u32;H]; W]) -> [[u32; W]; H] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn ident<const W: usize, const H: usize>(v: [[u32; H]; W]) -> [[u32; H]; W] {\n+  unsafe {\n+    std::mem::transmute(v)\n+  }\n+}\n+\n+fn flatten<const W: usize, const H: usize>(v: [[u32; H]; W]) -> [u32; W * H] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn coagulate<const W: usize, const H: usize>(v: [u32; H*W]) -> [[u32; W];H] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn flatten_3d<const W: usize, const H: usize, const D: usize>(\n+  v: [[[u32; D]; H]; W]\n+) -> [u32; D * W * H] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn flatten_somewhat<const W: usize, const H: usize, const D: usize>(\n+  v: [[[u32; D]; H]; W]\n+) -> [[u32; D * W]; H] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn known_size<const L: usize>(v: [u16; L]) -> [u8; L * 2] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn condense_bytes<const L: usize>(v: [u8; L * 2]) -> [u16; L] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn singleton_each<const L: usize>(v: [u8; L]) -> [[u8;1]; L] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn transpose_with_const<const W: usize, const H: usize>(\n+  v: [[u32; 2 * H]; W + W]\n+) -> [[u32; W + W]; 2 * H] {\n+  unsafe {\n+    std::mem::transmute(v)\n+    //~^ ERROR cannot transmute\n+  }\n+}\n+\n+fn main() {\n+  let _ = transpose([[0; 8]; 16]);\n+  let _ = transpose_with_const::<8,4>([[0; 8]; 16]);\n+  let _ = ident([[0; 8]; 16]);\n+  let _ = flatten([[0; 13]; 5]);\n+  let _: [[_; 5]; 13] = coagulate([0; 65]);\n+  let _ = flatten_3d([[[0; 3]; 13]; 5]);\n+  let _ = flatten_somewhat([[[0; 3]; 13]; 5]);\n+  let _ = known_size([16; 13]);\n+  let _: [u16; 5] = condense_bytes([16u8; 10]);\n+  let _ = singleton_each([16; 10]);\n+}"}, {"sha": "9c271b34849c0adf2287edeea4bbcef9cefa8657", "filename": "tests/ui/const-generics/transmute_no_gate.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute_no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76dd8c807c5ad32d2dac603937d6661b4685f59/tests%2Fui%2Fconst-generics%2Ftransmute_no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftransmute_no_gate.stderr?ref=b76dd8c807c5ad32d2dac603937d6661b4685f59", "patch": "@@ -0,0 +1,84 @@\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:7:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[[u32; H]; W]` (this type does not have a fixed size)\n+   = note: target type: `[[u32; W]; H]` (this type does not have a fixed size)\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:20:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[[u32; H]; W]` (this type does not have a fixed size)\n+   = note: target type: `[u32; W * H]` (this type does not have a fixed size)\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:27:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[u32; H*W]` (this type does not have a fixed size)\n+   = note: target type: `[[u32; W]; H]` (this type does not have a fixed size)\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:36:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[[[u32; D]; H]; W]` (this type does not have a fixed size)\n+   = note: target type: `[u32; D * W * H]` (this type does not have a fixed size)\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:45:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[[[u32; D]; H]; W]` (this type does not have a fixed size)\n+   = note: target type: `[[u32; D * W]; H]` (this type does not have a fixed size)\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:52:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[u16; L]` (this type does not have a fixed size)\n+   = note: target type: `[u8; L * 2]` (this type does not have a fixed size)\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:59:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[u8; L * 2]` (this type does not have a fixed size)\n+   = note: target type: `[u16; L]` (this type does not have a fixed size)\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:66:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[u8; L]` (this type does not have a fixed size)\n+   = note: target type: `[[u8; 1]; L]` (this type does not have a fixed size)\n+\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/transmute_no_gate.rs:75:5\n+   |\n+LL |     std::mem::transmute(v)\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[[u32; 2 * H]; W + W]` (this type does not have a fixed size)\n+   = note: target type: `[[u32; W + W]; 2 * H]` (this type does not have a fixed size)\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0512`."}]}