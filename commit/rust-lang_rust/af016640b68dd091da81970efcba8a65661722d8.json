{"sha": "af016640b68dd091da81970efcba8a65661722d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMDE2NjQwYjY4ZGQwOTFkYTgxOTcwZWZjYmE4YTY1NjYxNzIyZDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-13T17:12:44Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-13T17:12:44Z"}, "message": "Cleanup codegen_terminator_call a bit", "tree": {"sha": "4beabc1808f13a244033a448f7b12de08704951e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4beabc1808f13a244033a448f7b12de08704951e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af016640b68dd091da81970efcba8a65661722d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af016640b68dd091da81970efcba8a65661722d8", "html_url": "https://github.com/rust-lang/rust/commit/af016640b68dd091da81970efcba8a65661722d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af016640b68dd091da81970efcba8a65661722d8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bbae74458d42a475aa3ab728f67b576b6866a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbae74458d42a475aa3ab728f67b576b6866a5a", "html_url": "https://github.com/rust-lang/rust/commit/4bbae74458d42a475aa3ab728f67b576b6866a5a"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "3867cd38d38dc5bf0faca6789a888b477cf30d18", "filename": "src/abi/mod.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/af016640b68dd091da81970efcba8a65661722d8/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af016640b68dd091da81970efcba8a65661722d8/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=af016640b68dd091da81970efcba8a65661722d8", "patch": "@@ -435,14 +435,16 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     destination: Option<(Place<'tcx>, BasicBlock)>,\n ) {\n     let fn_ty = fx.monomorphize(&func.ty(fx.mir, fx.tcx));\n-    let sig = fx\n+    let fn_sig = fx\n         .tcx\n         .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_ty.fn_sig(fx.tcx));\n \n-    let destination = destination\n-        .map(|(place, bb)| (trans_place(fx, place), bb));\n+    // FIXME mark the current block as cold when calling a `#[cold]` function.\n+\n+    let destination = destination.map(|(place, bb)| (trans_place(fx, place), bb));\n \n-    if let ty::FnDef(def_id, substs) = fn_ty.kind {\n+    // Handle special calls like instrinsics and empty drop glue.\n+    let instance = if let ty::FnDef(def_id, substs) = fn_ty.kind {\n         let instance =\n             ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n \n@@ -469,24 +471,29 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 fx.bcx.ins().jump(ret_block, &[]);\n                 return;\n             }\n-            _ => {}\n+            _ => Some(instance)\n         }\n-    }\n+    } else {\n+        None\n+    };\n \n     // Unpack arguments tuple for closures\n-    let args = if sig.abi == Abi::RustCall {\n+    let args = if fn_sig.abi == Abi::RustCall {\n         assert_eq!(args.len(), 2, \"rust-call abi requires two arguments\");\n         let self_arg = trans_operand(fx, &args[0]);\n         let pack_arg = trans_operand(fx, &args[1]);\n-        let mut args = Vec::new();\n-        args.push(self_arg);\n-        match pack_arg.layout().ty.kind {\n+\n+        let tupled_arguments = match pack_arg.layout().ty.kind {\n             ty::Tuple(ref tupled_arguments) => {\n-                for (i, _) in tupled_arguments.iter().enumerate() {\n-                    args.push(pack_arg.value_field(fx, mir::Field::new(i)));\n-                }\n+                tupled_arguments\n             }\n             _ => bug!(\"argument to function with \\\"rust-call\\\" ABI is not a tuple\"),\n+        };\n+\n+        let mut args = Vec::with_capacity(1 + tupled_arguments.len());\n+        args.push(self_arg);\n+        for i in 0..tupled_arguments.len() {\n+            args.push(pack_arg.value_field(fx, mir::Field::new(i)));\n         }\n         args\n     } else {\n@@ -495,18 +502,6 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             .collect::<Vec<_>>()\n     };\n \n-    // FIXME mark the current block as cold when calling a `#[cold]` function.\n-    let fn_sig = fx\n-        .tcx\n-        .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_ty.fn_sig(fx.tcx));\n-\n-    let instance = match fn_ty.kind {\n-        ty::FnDef(def_id, substs) => {\n-            Some(Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap())\n-        }\n-        _ => None,\n-    };\n-\n     //   | indirect call target\n     //   |         | the first argument to be passed\n     //   v         v          v virtual calls are special cased below"}]}