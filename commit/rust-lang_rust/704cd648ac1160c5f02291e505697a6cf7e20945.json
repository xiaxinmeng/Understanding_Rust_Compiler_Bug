{"sha": "704cd648ac1160c5f02291e505697a6cf7e20945", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNGNkNjQ4YWMxMTYwYzVmMDIyOTFlNTA1Njk3YTZjZjdlMjA5NDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-06T17:27:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-06T18:01:16Z"}, "message": "Fix a bug with region-parameterized enums etc where trans considered\nthem to be non-monomorphic.  Merely having lifetime parameters\nis not enough to qualify for that status.  Fixes #5243.", "tree": {"sha": "995a32595772da7195fb50c8987369bffe4c3755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/995a32595772da7195fb50c8987369bffe4c3755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/704cd648ac1160c5f02291e505697a6cf7e20945", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/704cd648ac1160c5f02291e505697a6cf7e20945", "html_url": "https://github.com/rust-lang/rust/commit/704cd648ac1160c5f02291e505697a6cf7e20945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/704cd648ac1160c5f02291e505697a6cf7e20945/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67100ddb3519dedf8ab07371a381c7762f9fcc4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/67100ddb3519dedf8ab07371a381c7762f9fcc4f", "html_url": "https://github.com/rust-lang/rust/commit/67100ddb3519dedf8ab07371a381c7762f9fcc4f"}], "stats": {"total": 77, "additions": 56, "deletions": 21}, "files": [{"sha": "d13993bf5697a3a89bde264f4e2f6929c5f6d4d5", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=704cd648ac1160c5f02291e505697a6cf7e20945", "patch": "@@ -178,12 +178,14 @@ fn is_test_fn(i: @ast::item) -> bool {\n \n     fn has_test_signature(i: @ast::item) -> bool {\n         match &i.node {\n-          &ast::item_fn(ref decl, _, ref tps, _) => {\n+          &ast::item_fn(ref decl, _, ref generics, _) => {\n             let no_output = match decl.output.node {\n                 ast::ty_nil => true,\n                 _ => false\n             };\n-            decl.inputs.is_empty() && no_output && tps.is_empty()\n+            decl.inputs.is_empty()\n+                && no_output\n+                && !generics.is_parameterized()\n           }\n           _ => false\n         }"}, {"sha": "1031c3a82b03ce546b7ce44206cfcd54401e1b06", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=704cd648ac1160c5f02291e505697a6cf7e20945", "patch": "@@ -228,14 +228,16 @@ fn encode_type(ecx: @EncodeContext, ebml_w: writer::Encoder, typ: ty::t) {\n \n fn encode_symbol(ecx: @EncodeContext, ebml_w: writer::Encoder, id: node_id) {\n     ebml_w.start_tag(tag_items_data_item_symbol);\n-    let sym = match ecx.item_symbols.find(&id) {\n-      Some(ref x) => (/*bad*/copy *x),\n-      None => {\n-        ecx.diag.handler().bug(\n-            fmt!(\"encode_symbol: id not found %d\", id));\n-      }\n-    };\n-    ebml_w.writer.write(str::to_bytes(sym));\n+    match ecx.item_symbols.find(&id) {\n+        Some(ref x) => {\n+            debug!(\"encode_symbol(id=%?, str=%s)\", id, *x);\n+            ebml_w.writer.write(str::to_bytes(*x));\n+        }\n+        None => {\n+            ecx.diag.handler().bug(\n+                fmt!(\"encode_symbol: id not found %d\", id));\n+        }\n+    }\n     ebml_w.end_tag();\n }\n \n@@ -264,6 +266,8 @@ fn encode_enum_variant_info(ecx: @EncodeContext, ebml_w: writer::Encoder,\n                             path: &[ast_map::path_elt],\n                             index: @mut ~[entry<int>],\n                             generics: &ast::Generics) {\n+    debug!(\"encode_enum_variant_info(id=%?)\", id);\n+\n     let mut disr_val = 0;\n     let mut i = 0;\n     let vi = ty::enum_variants(ecx.tcx,"}, {"sha": "76eedca21318a5bfd726679e9b78c1e2acd6327c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=704cd648ac1160c5f02291e505697a6cf7e20945", "patch": "@@ -2079,15 +2079,15 @@ pub fn trans_item(ccx: @CrateContext, item: ast::item) {\n         _ => fail!(~\"trans_item\"),\n     };\n     match /*bad*/copy item.node {\n-      ast::item_fn(ref decl, purity, ref tps, ref body) => {\n+      ast::item_fn(ref decl, purity, ref generics, ref body) => {\n         if purity == ast::extern_fn  {\n             let llfndecl = get_item_val(ccx, item.id);\n             foreign::trans_foreign_fn(ccx,\n                                      vec::append(\n                                          /*bad*/copy *path,\n                                          ~[path_name(item.ident)]),\n                                       decl, body, llfndecl, item.id);\n-        } else if tps.is_empty() {\n+        } else if !generics.is_type_parameterized() {\n             let llfndecl = get_item_val(ccx, item.id);\n             trans_fn(ccx,\n                      vec::append(/*bad*/copy *path, ~[path_name(item.ident)]),\n@@ -2111,8 +2111,8 @@ pub fn trans_item(ccx: @CrateContext, item: ast::item) {\n       ast::item_mod(ref m) => {\n         trans_mod(ccx, m);\n       }\n-      ast::item_enum(ref enum_definition, ref tps) => {\n-        if tps.is_empty() {\n+      ast::item_enum(ref enum_definition, ref generics) => {\n+        if !generics.is_type_parameterized() {\n             let degen = (*enum_definition).variants.len() == 1u;\n             let vi = ty::enum_variants(ccx.tcx, local_def(item.id));\n             let mut i = 0;\n@@ -2128,8 +2128,8 @@ pub fn trans_item(ccx: @CrateContext, item: ast::item) {\n         };\n         foreign::trans_foreign_mod(ccx, foreign_mod, abi);\n       }\n-      ast::item_struct(struct_def, tps) => {\n-        if tps.is_empty() {\n+      ast::item_struct(struct_def, generics) => {\n+        if !generics.is_type_parameterized() {\n             trans_struct_def(ccx, struct_def, path, item.id);\n         }\n       }"}, {"sha": "95284e81003d03c83199cf72f040f5bc3392f568", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=704cd648ac1160c5f02291e505697a6cf7e20945", "patch": "@@ -861,7 +861,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: @ast::item)\n                 // like \"foo<X>\".  This is because otherwise ty_to_str will\n                 // print the name as merely \"foo\", as it has no way to\n                 // reconstruct the value of X.\n-                if !generics.is_empty() { t0 } else {\n+                if generics.is_parameterized() { t0 } else {\n                     ty::mk_with_id(tcx, t0, def_id)\n                 }\n             };"}, {"sha": "9c009a09ae90d319f7418d1fa96413904a6eefe1", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=704cd648ac1160c5f02291e505697a6cf7e20945", "patch": "@@ -315,7 +315,7 @@ fn check_main_fn_ty(ccx: @mut CrateCtxt,\n                 Some(ast_map::node_item(it,_)) => {\n                     match it.node {\n                         ast::item_fn(_, _, ref ps, _)\n-                        if !ps.is_empty() => {\n+                        if ps.is_parameterized() => {\n                             tcx.sess.span_err(\n                                 main_span,\n                                 ~\"main function is not allowed \\"}, {"sha": "1ec11501f334004d898eeda43c8a49799e95e363", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=704cd648ac1160c5f02291e505697a6cf7e20945", "patch": "@@ -161,8 +161,14 @@ pub struct Generics {\n }\n \n pub impl Generics {\n-    fn is_empty(&self) -> bool {\n-        self.lifetimes.len() + self.ty_params.len() == 0\n+    fn is_parameterized(&self) -> bool {\n+        self.lifetimes.len() + self.ty_params.len() > 0\n+    }\n+    fn is_lt_parameterized(&self) -> bool {\n+        self.lifetimes.len() > 0\n+    }\n+    fn is_type_parameterized(&self) -> bool {\n+        self.ty_params.len() > 0\n     }\n }\n "}, {"sha": "275f5a433979ac19669152111784f895acedbbee", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=704cd648ac1160c5f02291e505697a6cf7e20945", "patch": "@@ -567,7 +567,7 @@ pub fn print_item(s: @ps, &&item: @ast::item) {\n \n       ast::item_impl(ref generics, opt_trait, ty, ref methods) => {\n         head(s, visibility_qualified(item.vis, ~\"impl\"));\n-        if !generics.is_empty() {\n+        if generics.is_parameterized() {\n             print_generics(s, generics);\n             space(s.s);\n         }"}, {"sha": "9af2027ee7ed90de7096f26f7033f2aebff29612", "filename": "src/test/run-pass/issue-5243.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Ftest%2Frun-pass%2Fissue-5243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704cd648ac1160c5f02291e505697a6cf7e20945/src%2Ftest%2Frun-pass%2Fissue-5243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5243.rs?ref=704cd648ac1160c5f02291e505697a6cf7e20945", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that merely have lifetime parameters is not\n+// enough for trans to consider this as non-monomorphic,\n+// which led to various assertions and failures in turn.\n+\n+struct S<'self> {\n+    v: &'self int\n+}\n+\n+fn f<'lt>(_s: &S<'lt>) {}\n+\n+fn main() {\n+    f(& S { v: &42 });\n+}"}]}