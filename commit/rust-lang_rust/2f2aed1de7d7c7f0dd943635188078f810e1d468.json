{"sha": "2f2aed1de7d7c7f0dd943635188078f810e1d468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMmFlZDFkZTdkN2M3ZjBkZDk0MzYzNTE4ODA3OGY4MTBlMWQ0Njg=", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-09-08T16:24:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-08T16:24:14Z"}, "message": "Rollup merge of #86263 - fee1-dead:rustdoc-layout-variants, r=camelid\n\nRustdoc: Report Layout of enum variants\n\nFollowup of #83501, Fixes #86253.\n\ncc `@camelid`\n\n`@rustbot` label A-rustdoc", "tree": {"sha": "c0fcd9d2477776d42f6e9cf329c9ea3d5eb94b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0fcd9d2477776d42f6e9cf329c9ea3d5eb94b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f2aed1de7d7c7f0dd943635188078f810e1d468", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhOOOuCRBK7hj4Ov3rIwAA5r4IAKD4S1piNud3ZNeVaRQSotHv\nv8PeF3fTWBxK/2mh3FFnkt9d+cPh6X6aH5jS5te+yYlLRHd2JXwyjVdHkdCGBKjl\nmEqx74B7VVyrNaWq4vkyHPVXasCJgxH9jTylzq2KLDDAqhAwX7OJ31XKgQ6zLHBw\na7eXgzCgonxDWvcYCz+PRUbyzMwTSTVgrwCxrBNvpxSVABv1IrMkRY+RtqbICIh9\nz56q3zXYeyKnDb/mKC98O2IaoMUcjXLFTR43ULXOBLbdAnvInBQnQtjDhthtIMkU\nRBtKRtcReUawWOEOZH40MB6SirmyBV2HuTycPGBJI6Vbt8zpi8t/YBW4kzoOv1Q=\n=6kRl\n-----END PGP SIGNATURE-----\n", "payload": "tree c0fcd9d2477776d42f6e9cf329c9ea3d5eb94b57\nparent c9db3e0fbc84d8409285698486375f080d361ef3\nparent c0451f73b2094d7edccb77d7ea8be48f64887e67\nauthor Jack Huey <31162821+jackh726@users.noreply.github.com> 1631118254 -0400\ncommitter GitHub <noreply@github.com> 1631118254 -0400\n\nRollup merge of #86263 - fee1-dead:rustdoc-layout-variants, r=camelid\n\nRustdoc: Report Layout of enum variants\n\nFollowup of #83501, Fixes #86253.\n\ncc `@camelid`\n\n`@rustbot` label A-rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2aed1de7d7c7f0dd943635188078f810e1d468", "html_url": "https://github.com/rust-lang/rust/commit/2f2aed1de7d7c7f0dd943635188078f810e1d468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f2aed1de7d7c7f0dd943635188078f810e1d468/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9db3e0fbc84d8409285698486375f080d361ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9db3e0fbc84d8409285698486375f080d361ef3", "html_url": "https://github.com/rust-lang/rust/commit/c9db3e0fbc84d8409285698486375f080d361ef3"}, {"sha": "c0451f73b2094d7edccb77d7ea8be48f64887e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0451f73b2094d7edccb77d7ea8be48f64887e67", "html_url": "https://github.com/rust-lang/rust/commit/c0451f73b2094d7edccb77d7ea8be48f64887e67"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "470749ef7b3387759cc295e21533a43bab114636", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2f2aed1de7d7c7f0dd943635188078f810e1d468/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2aed1de7d7c7f0dd943635188078f810e1d468/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=2f2aed1de7d7c7f0dd943635188078f810e1d468", "patch": "@@ -8,10 +8,12 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::stability;\n+use rustc_middle::span_bug;\n use rustc_middle::ty::layout::LayoutError;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{Adt, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_target::abi::{Layout, Primitive, TagEncoding, Variants};\n \n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n@@ -1621,6 +1623,15 @@ fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n }\n \n fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n+    fn write_size_of_layout(w: &mut Buffer, layout: &Layout, tag_size: u64) {\n+        if layout.abi.is_unsized() {\n+            write!(w, \"(unsized)\");\n+        } else {\n+            let bytes = layout.size.bytes() - tag_size;\n+            write!(w, \"{size} byte{pl}\", size = bytes, pl = if bytes == 1 { \"\" } else { \"s\" },);\n+        }\n+    }\n+\n     if !cx.shared.show_type_layout {\n         return;\n     }\n@@ -1642,16 +1653,40 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n                  <a href=\\\"https://doc.rust-lang.org/reference/type-layout.html\\\">\u201cType Layout\u201d</a> \\\n                  chapter for details on type layout guarantees.</p></div>\"\n             );\n-            if ty_layout.layout.abi.is_unsized() {\n-                writeln!(w, \"<p><strong>Size:</strong> (unsized)</p>\");\n-            } else {\n-                let bytes = ty_layout.layout.size.bytes();\n-                writeln!(\n-                    w,\n-                    \"<p><strong>Size:</strong> {size} byte{pl}</p>\",\n-                    size = bytes,\n-                    pl = if bytes == 1 { \"\" } else { \"s\" },\n-                );\n+            w.write_str(\"<p><strong>Size:</strong> \");\n+            write_size_of_layout(w, ty_layout.layout, 0);\n+            writeln!(w, \"</p>\");\n+            if let Variants::Multiple { variants, tag, tag_encoding, .. } =\n+                &ty_layout.layout.variants\n+            {\n+                if !variants.is_empty() {\n+                    w.write_str(\n+                        \"<p><strong>Size for each variant:</strong></p>\\\n+                            <ul>\",\n+                    );\n+\n+                    let adt = if let Adt(adt, _) = ty_layout.ty.kind() {\n+                        adt\n+                    } else {\n+                        span_bug!(tcx.def_span(ty_def_id), \"not an adt\")\n+                    };\n+\n+                    let tag_size = if let TagEncoding::Niche { .. } = tag_encoding {\n+                        0\n+                    } else if let Primitive::Int(i, _) = tag.value {\n+                        i.size().bytes()\n+                    } else {\n+                        span_bug!(tcx.def_span(ty_def_id), \"tag is neither niche nor int\")\n+                    };\n+\n+                    for (index, layout) in variants.iter_enumerated() {\n+                        let ident = adt.variants[index].ident;\n+                        write!(w, \"<li><code>{name}</code>: \", name = ident);\n+                        write_size_of_layout(w, layout, tag_size);\n+                        writeln!(w, \"</li>\");\n+                    }\n+                    w.write_str(\"</ul>\");\n+                }\n             }\n         }\n         // This kind of layout error can occur with valid code, e.g. if you try to"}, {"sha": "0868486fa59cd017a7d16c6a0c8c275bb345d0e7", "filename": "src/test/rustdoc/type-layout.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f2aed1de7d7c7f0dd943635188078f810e1d468/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2aed1de7d7c7f0dd943635188078f810e1d468/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout.rs?ref=2f2aed1de7d7c7f0dd943635188078f810e1d468", "patch": "@@ -52,3 +52,21 @@ pub struct Unsized([u8]);\n \n // @!has type_layout/trait.MyTrait.html 'Size: '\n pub trait MyTrait {}\n+\n+// @has type_layout/enum.Variants.html 'Size: '\n+// @has - '2 bytes'\n+// @has - '<code>A</code>: 0 bytes'\n+// @has - '<code>B</code>: 1 byte'\n+pub enum Variants {\n+    A,\n+    B(u8),\n+}\n+\n+// @has type_layout/enum.WithNiche.html 'Size: '\n+// @has - //p '4 bytes'\n+// @has - '<code>None</code>: 0 bytes'\n+// @has - '<code>Some</code>: 4 bytes'\n+pub enum WithNiche {\n+    None,\n+    Some(std::num::NonZeroU32),\n+}"}]}