{"sha": "223fd2979c277cf402e4876d0e9a69257702f731", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyM2ZkMjk3OWMyNzdjZjQwMmU0ODc2ZDBlOWE2OTI1NzcwMmY3MzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T21:15:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-01T10:41:58Z"}, "message": "Introduce ModuleSource", "tree": {"sha": "cf0dfb8abd3082f3a787a834184bb89b4d07f389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf0dfb8abd3082f3a787a834184bb89b4d07f389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/223fd2979c277cf402e4876d0e9a69257702f731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/223fd2979c277cf402e4876d0e9a69257702f731", "html_url": "https://github.com/rust-lang/rust/commit/223fd2979c277cf402e4876d0e9a69257702f731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/223fd2979c277cf402e4876d0e9a69257702f731/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d685a9b564fe524865cda5713c527aaeb1ca6b1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d685a9b564fe524865cda5713c527aaeb1ca6b1d", "html_url": "https://github.com/rust-lang/rust/commit/d685a9b564fe524865cda5713c527aaeb1ca6b1d"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "22dbe71840b6f7ed8a2f623294315529bc6cd438", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/223fd2979c277cf402e4876d0e9a69257702f731/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223fd2979c277cf402e4876d0e9a69257702f731/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=223fd2979c277cf402e4876d0e9a69257702f731", "patch": "@@ -14,7 +14,9 @@ use crate::{\n     Cancelable, FileId, FileResolverImp,\n };\n \n-use super::{LinkData, LinkId, ModuleData, ModuleId, ModuleScope, ModuleTree, Problem};\n+use super::{\n+    LinkData, LinkId, ModuleData, ModuleId, ModuleScope, ModuleSource, ModuleTree, Problem,\n+};\n \n pub(crate) fn submodules(\n     db: &impl DescriptorDatabase,\n@@ -43,7 +45,7 @@ pub(crate) fn module_scope(\n     module_id: ModuleId,\n ) -> Cancelable<Arc<ModuleScope>> {\n     let tree = db.module_tree(source_root_id)?;\n-    let file_id = module_id.file_id(&tree);\n+    let ModuleSource::File(file_id) = module_id.source(&tree);\n     let syntax = db.file_syntax(file_id);\n     let res = ModuleScope::new(&syntax);\n     Ok(Arc::new(res))\n@@ -106,7 +108,7 @@ fn build_subtree(\n ) -> Cancelable<ModuleId> {\n     visited.insert(file_id);\n     let id = tree.push_mod(ModuleData {\n-        file_id,\n+        source: ModuleSource::File(file_id),\n         parent,\n         children: Vec::new(),\n     });"}, {"sha": "cbccdb2e27b48cc844185edc3dc859769e88135c", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/223fd2979c277cf402e4876d0e9a69257702f731/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223fd2979c277cf402e4876d0e9a69257702f731/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=223fd2979c277cf402e4876d0e9a69257702f731", "patch": "@@ -11,6 +11,13 @@ use crate::FileId;\n \n pub(crate) use self::scope::ModuleScope;\n \n+/// Phisically, rust source is organized as a set of files, but logically it is\n+/// organized as a tree of modules. Usually, a single file corresponds to a\n+/// single module, but it is not nessary the case.\n+///\n+/// Module encapsulate the logic of transitioning from the fuzzy world of files\n+/// (which can have multiple parents) to the precise world of modules (which\n+/// always have one parent).\n #[derive(Debug, PartialEq, Eq, Hash)]\n pub(crate) struct ModuleTree {\n     mods: Vec<ModuleData>,\n@@ -22,7 +29,7 @@ impl ModuleTree {\n         self.mods\n             .iter()\n             .enumerate()\n-            .filter(|(_idx, it)| it.file_id == file_id)\n+            .filter(|(_idx, it)| it.source.is_file(file_id))\n             .map(|(idx, _)| ModuleId(idx as u32))\n             .collect()\n     }\n@@ -50,8 +57,8 @@ pub enum Problem {\n }\n \n impl ModuleId {\n-    pub(crate) fn file_id(self, tree: &ModuleTree) -> FileId {\n-        tree.module(self).file_id\n+    pub(crate) fn source(self, tree: &ModuleTree) -> ModuleSource {\n+        tree.module(self).source\n     }\n     pub(crate) fn parent_link(self, tree: &ModuleTree) -> Option<LinkId> {\n         tree.module(self).parent\n@@ -110,11 +117,27 @@ impl LinkId {\n \n #[derive(Debug, PartialEq, Eq, Hash)]\n struct ModuleData {\n-    file_id: FileId,\n+    source: ModuleSource,\n     parent: Option<LinkId>,\n     children: Vec<LinkId>,\n }\n \n+/// `ModuleSource` is the syntax tree element that produced this module:\n+/// either a file, or an inlinde module.\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub(crate) enum ModuleSource {\n+    File(FileId),\n+    // Inline(SyntaxPtr),\n+}\n+\n+impl ModuleSource {\n+    fn is_file(self, file_id: FileId) -> bool {\n+        match self {\n+            ModuleSource::File(f) => f == file_id,\n+        }\n+    }\n+}\n+\n #[derive(Hash, Debug, PartialEq, Eq)]\n struct LinkData {\n     owner: ModuleId,"}, {"sha": "c1269025c8d1527eef4d32e2c8db13693168de3c", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/223fd2979c277cf402e4876d0e9a69257702f731/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223fd2979c277cf402e4876d0e9a69257702f731/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=223fd2979c277cf402e4876d0e9a69257702f731", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     db::{self, FileSyntaxQuery, SyntaxDatabase},\n     descriptors::{\n         function::{FnDescriptor, FnId},\n-        module::{ModuleTree, Problem},\n+        module::{ModuleSource, ModuleTree, Problem},\n         DeclarationDescriptor, DescriptorDatabase,\n     },\n     input::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE},\n@@ -222,7 +222,7 @@ impl AnalysisImpl {\n             .into_iter()\n             .filter_map(|module_id| {\n                 let link = module_id.parent_link(&module_tree)?;\n-                let file_id = link.owner(&module_tree).file_id(&module_tree);\n+                let ModuleSource::File(file_id) = link.owner(&module_tree).source(&module_tree);\n                 let syntax = self.db.file_syntax(file_id);\n                 let decl = link.bind_source(&module_tree, syntax.ast());\n \n@@ -243,7 +243,9 @@ impl AnalysisImpl {\n             .modules_for_file(file_id)\n             .into_iter()\n             .map(|it| it.root(&module_tree))\n-            .map(|it| it.file_id(&module_tree))\n+            .map(|it| match it.source(&module_tree) {\n+                ModuleSource::File(file_id) => file_id,\n+            })\n             .filter_map(|it| crate_graph.crate_id_for_crate_root(it))\n             .collect();\n \n@@ -533,7 +535,9 @@ impl AnalysisImpl {\n         };\n         module_id\n             .child(module_tree, name.as_str())\n-            .map(|it| it.file_id(module_tree))\n+            .map(|it| match it.source(&module_tree) {\n+                ModuleSource::File(file_id) => file_id,\n+            })\n             .into_iter()\n             .collect()\n     }"}]}