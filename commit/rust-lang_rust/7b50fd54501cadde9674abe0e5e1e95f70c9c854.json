{"sha": "7b50fd54501cadde9674abe0e5e1e95f70c9c854", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNTBmZDU0NTAxY2FkZGU5Njc0YWJlMGU1ZTFlOTVmNzBjOWM4NTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-18T13:07:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-18T13:07:24Z"}, "message": "Use <[T; N]>::map in Sharded instead of SmallVec and unsafe code\n\nThis results in a lot less assembly", "tree": {"sha": "41716e904a8b56a84d6fc5167ea332de35fbd9d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41716e904a8b56a84d6fc5167ea332de35fbd9d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b50fd54501cadde9674abe0e5e1e95f70c9c854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b50fd54501cadde9674abe0e5e1e95f70c9c854", "html_url": "https://github.com/rust-lang/rust/commit/7b50fd54501cadde9674abe0e5e1e95f70c9c854", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b50fd54501cadde9674abe0e5e1e95f70c9c854/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cdd42f9f8dd4e5e5ba0aa816bc4c99ab8b102f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cdd42f9f8dd4e5e5ba0aa816bc4c99ab8b102f9", "html_url": "https://github.com/rust-lang/rust/commit/6cdd42f9f8dd4e5e5ba0aa816bc4c99ab8b102f9"}], "stats": {"total": 20, "additions": 1, "deletions": 19}, "files": [{"sha": "417c61242a539d584e1aac62e7bad937b379b321", "filename": "compiler/rustc_data_structures/src/sharded.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b50fd54501cadde9674abe0e5e1e95f70c9c854/compiler%2Frustc_data_structures%2Fsrc%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b50fd54501cadde9674abe0e5e1e95f70c9c854/compiler%2Frustc_data_structures%2Fsrc%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsharded.rs?ref=7b50fd54501cadde9674abe0e5e1e95f70c9c854", "patch": "@@ -1,6 +1,5 @@\n use crate::fx::{FxHashMap, FxHasher};\n use crate::sync::{Lock, LockGuard};\n-use smallvec::SmallVec;\n use std::borrow::Borrow;\n use std::collections::hash_map::RawEntryMut;\n use std::hash::{Hash, Hasher};\n@@ -37,24 +36,7 @@ impl<T: Default> Default for Sharded<T> {\n impl<T> Sharded<T> {\n     #[inline]\n     pub fn new(mut value: impl FnMut() -> T) -> Self {\n-        // Create a vector of the values we want\n-        let mut values: SmallVec<[_; SHARDS]> =\n-            (0..SHARDS).map(|_| CacheAligned(Lock::new(value()))).collect();\n-\n-        // Create an uninitialized array\n-        let mut shards: mem::MaybeUninit<[CacheAligned<Lock<T>>; SHARDS]> =\n-            mem::MaybeUninit::uninit();\n-\n-        unsafe {\n-            // Copy the values into our array\n-            let first = shards.as_mut_ptr() as *mut CacheAligned<Lock<T>>;\n-            values.as_ptr().copy_to_nonoverlapping(first, SHARDS);\n-\n-            // Ignore the content of the vector\n-            values.set_len(0);\n-\n-            Sharded { shards: shards.assume_init() }\n-        }\n+        Sharded { shards: [(); SHARDS].map(|()| CacheAligned(Lock::new(value()))) }\n     }\n \n     /// The shard is selected by hashing `val` with `FxHasher`."}]}