{"sha": "15856139e4e1ebbbf0a2a2d90996dff7d837cdd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ODU2MTM5ZTRlMWViYmJmMGEyYTJkOTA5OTZkZmY3ZDgzN2NkZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-03T02:56:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-04T00:36:20Z"}, "message": "rustdoc: Enable the footnote markdown extension\n\nThis enables hoedown's footnote extension, and fixes all footnotes in the\nreference manual to use the new syntax.", "tree": {"sha": "378024d3074be0557911133c4cff553e13e9f344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/378024d3074be0557911133c4cff553e13e9f344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7", "html_url": "https://github.com/rust-lang/rust/commit/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9306e840f59ac22651c6177a89352bf5d607fcbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9306e840f59ac22651c6177a89352bf5d607fcbd", "html_url": "https://github.com/rust-lang/rust/commit/9306e840f59ac22651c6177a89352bf5d607fcbd"}], "stats": {"total": 96, "additions": 59, "deletions": 37}, "files": [{"sha": "4ddb607c8bcb552e156eaa38a30011328f62bf1c", "filename": "mk/tests.mk", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=15856139e4e1ebbbf0a2a2d90996dff7d837cdd7", "patch": "@@ -220,8 +220,8 @@ ALL_CS := $(wildcard $(S)src/rt/*.cpp \\\n                      $(S)src/rt/*/*/*.cpp \\\n                      $(S)src/rustllvm/*.cpp)\n ALL_CS := $(filter-out $(S)src/rt/miniz.cpp \\\n-\t\t       $(wildcard $(S)src/rt/sundown/src/*.c) \\\n-\t\t       $(wildcard $(S)src/rt/sundown/html/*.c) \\\n+\t\t       $(wildcard $(S)src/rt/hoedown/src/*.c) \\\n+\t\t       $(wildcard $(S)src/rt/hoedown/bin/*.c) \\\n \t,$(ALL_CS))\n ALL_HS := $(wildcard $(S)src/rt/*.h \\\n                      $(S)src/rt/*/*.h \\\n@@ -232,8 +232,8 @@ ALL_HS := $(filter-out $(S)src/rt/vg/valgrind.h \\\n                        $(S)src/rt/msvc/typeof.h \\\n                        $(S)src/rt/msvc/stdint.h \\\n                        $(S)src/rt/msvc/inttypes.h \\\n-\t\t       $(wildcard $(S)src/rt/sundown/src/*.h) \\\n-\t\t       $(wildcard $(S)src/rt/sundown/html/*.h) \\\n+\t\t       $(wildcard $(S)src/rt/hoedown/src/*.h) \\\n+\t\t       $(wildcard $(S)src/rt/hoedown/bin/*.h) \\\n \t,$(ALL_HS))\n \n # Run the tidy script in multiple parts to avoid huge 'echo' commands\n@@ -266,6 +266,7 @@ tidy:\n \t\t    -and -not -name '*.sh' \\\n \t\t| grep '^$(S)src/llvm' -v \\\n \t\t| grep '^$(S)src/libuv' -v \\\n+\t\t| grep '^$(S)src/rt/hoedown' -v \\\n \t\t| grep '^$(S)src/gyp' -v \\\n \t\t| grep '^$(S)src/etc' -v \\\n \t\t| grep '^$(S)src/doc' -v \\"}, {"sha": "11875560080a92cbdbdfc11f948987106641f43f", "filename": "src/doc/rust.md", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=15856139e4e1ebbbf0a2a2d90996dff7d837cdd7", "patch": "@@ -116,8 +116,12 @@ production. See [tokens](#tokens) for more information.\n Rust input is interpreted as a sequence of Unicode codepoints encoded in UTF-8,\n normalized to Unicode normalization form NFKC.\n Most Rust grammar rules are defined in terms of printable ASCII-range codepoints,\n-but a small number are defined in terms of Unicode properties or explicit codepoint lists.\n-^[Substitute definitions for the special Unicode productions are provided to the grammar verifier, restricted to ASCII range, when verifying the grammar in this document.]\n+but a small number are defined in terms of Unicode properties or explicit\n+codepoint lists. [^inputformat]\n+\n+[^inputformat]: Substitute definitions for the special Unicode productions are\n+    provided to the grammar verifier, restricted to ASCII range, when verifying\n+    the grammar in this document.\n \n ## Special Unicode Productions\n \n@@ -631,10 +635,13 @@ Semantic rules called \"dynamic semantics\" govern the behavior of programs at run\n A program that fails to compile due to violation of a compile-time rule has no defined dynamic semantics; the compiler should halt with an error report, and produce no executable artifact.\n \n The compilation model centres on artifacts called _crates_.\n-Each compilation processes a single crate in source form, and if successful, produces a single crate in binary form: either an executable or a library.^[A crate is somewhat\n-analogous to an *assembly* in the ECMA-335 CLI model, a *library* in the\n-SML/NJ Compilation Manager, a *unit* in the Owens and Flatt module system,\n-or a *configuration* in Mesa.]\n+Each compilation processes a single crate in source form, and if successful,\n+produces a single crate in binary form: either an executable or a\n+library.[^cratesourcefile]\n+\n+[^cratesourcefile]: A crate is somewhat analogous to an *assembly* in the\n+    ECMA-335 CLI model, a *library* in the SML/NJ Compilation Manager, a *unit*\n+    in the Owens and Flatt module system, or a *configuration* in Mesa.\n \n A _crate_ is a unit of compilation and linking, as well as versioning, distribution and runtime loading.\n A crate contains a _tree_ of nested [module](#modules) scopes.\n@@ -3246,12 +3253,17 @@ types. User-defined types have limited capabilities.\n \n The primitive types are the following:\n \n-* The \"unit\" type `()`, having the single \"unit\" value `()` (occasionally called \"nil\").\n-  ^[The \"unit\" value `()` is *not* a sentinel \"null pointer\" value for reference slots; the \"unit\" type is the implicit return type from functions otherwise lacking a return type, and can be used in other contexts (such as message-sending or type-parametric code) as a zero-size type.]\n+* The \"unit\" type `()`, having the single \"unit\" value `()` (occasionally called\n+  \"nil\"). [^unittype]\n * The boolean type `bool` with values `true` and `false`.\n * The machine types.\n * The machine-dependent integer and floating-point types.\n \n+[^unittype]: The \"unit\" value `()` is *not* a sentinel \"null pointer\" value for\n+    reference slots; the \"unit\" type is the implicit return type from functions\n+    otherwise lacking a return type, and can be used in other contexts (such as\n+    message-sending or type-parametric code) as a zero-size type.]\n+\n #### Machine types\n \n The machine types are the following:\n@@ -3270,16 +3282,19 @@ The machine types are the following:\n \n #### Machine-dependent integer types\n \n-The Rust type `uint`^[A Rust `uint` is analogous to a C99 `uintptr_t`.] is an\n+The Rust type `uint` [^rustuint] is an\n unsigned integer type with target-machine-dependent size. Its size, in\n bits, is equal to the number of bits required to hold any memory address on\n the target machine.\n \n-The Rust type `int`^[A Rust `int` is analogous to a C99 `intptr_t`.] is a\n+The Rust type `int` [^rustint]  is a\n two's complement signed integer type with target-machine-dependent size. Its\n size, in bits, is equal to the size of the rust type `uint` on the same target\n machine.\n \n+[^rustuint]: A Rust `uint` is analogous to a C99 `uintptr_t`.\n+[^rustint]: A Rust `int` is analogous to a C99 `intptr_t`.\n+\n ### Textual types\n \n The types `char` and `str` hold textual data.\n@@ -3352,10 +3367,12 @@ and access to a vector is always bounds-checked.\n \n ### Structure types\n \n-A `struct` *type* is a heterogeneous product of other types, called the *fields* of the type.\n-^[`struct` types are analogous `struct` types in C,\n-the *record* types of the ML family,\n-or the *structure* types of the Lisp family.]\n+A `struct` *type* is a heterogeneous product of other types, called the *fields*\n+of the type.[^structtype]\n+\n+[^structtype]: `struct` types are analogous `struct` types in C,\n+    the *record* types of the ML family,\n+    or the *structure* types of the Lisp family.\n \n New instances of a `struct` can be constructed with a [struct expression](#structure-expressions).\n \n@@ -3375,9 +3392,10 @@ is the only value that inhabits such a type.\n ### Enumerated types\n \n An *enumerated type* is a nominal, heterogeneous disjoint union type,\n-denoted by the name of an [`enum` item](#enumerations).\n-^[The `enum` type is analogous to a `data` constructor declaration in ML,\n-or a *pick ADT* in Limbo.]\n+denoted by the name of an [`enum` item](#enumerations). [^enumtype]\n+\n+[^enumtype]: The `enum` type is analogous to a `data` constructor declaration in\n+             ML, or a *pick ADT* in Limbo.\n \n An [`enum` item](#enumerations) declares both the type and a number of *variant constructors*,\n each of which is independently named and takes an optional tuple of arguments.\n@@ -3804,14 +3822,15 @@ By default, the scheduler chooses the number of threads based on\n the number of concurrent physical CPUs detected at startup.\n It's also possible to override this choice at runtime.\n When the number of tasks exceeds the number of threads &mdash; which is likely &mdash;\n-the scheduler multiplexes the tasks onto threads.^[\n-This is an M:N scheduler,\n-which is known to give suboptimal results for CPU-bound concurrency problems.\n-In such cases, running with the same number of threads and tasks can yield better results.\n-Rust has M:N scheduling in order to support very large numbers of tasks\n-in contexts where threads are too resource-intensive to use in large number.\n-The cost of threads varies substantially per operating system, and is sometimes quite low,\n-so this flexibility is not always worth exploiting.]\n+the scheduler multiplexes the tasks onto threads.[^mnscheduler]\n+\n+[^mnscheduler]: This is an M:N scheduler, which is known to give suboptimal\n+    results for CPU-bound concurrency problems.  In such cases, running with the\n+    same number of threads and tasks can yield better results.  Rust has M:N\n+    scheduling in order to support very large numbers of tasks in contexts where\n+    threads are too resource-intensive to use in large number.  The cost of\n+    threads varies substantially per operating system, and is sometimes quite\n+    low, so this flexibility is not always worth exploiting.\n \n ### Communication between tasks\n "}, {"sha": "9d6b0ec55170e28ad34c8d4773044fa05f3f7375", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15856139e4e1ebbbf0a2a2d90996dff7d837cdd7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=15856139e4e1ebbbf0a2a2d90996dff7d837cdd7", "patch": "@@ -51,6 +51,14 @@ static HOEDOWN_EXT_TABLES: libc::c_uint = 1 << 0;\n static HOEDOWN_EXT_FENCED_CODE: libc::c_uint = 1 << 1;\n static HOEDOWN_EXT_AUTOLINK: libc::c_uint = 1 << 3;\n static HOEDOWN_EXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n+static HOEDOWN_EXT_SUPERSCRIPT: libc::c_uint = 1 << 8;\n+static HOEDOWN_EXT_FOOTNOTES: libc::c_uint = 1 << 2;\n+\n+static HOEDOWN_EXTENSIONS: libc::c_uint =\n+    HOEDOWN_EXT_NO_INTRA_EMPHASIS | HOEDOWN_EXT_TABLES |\n+    HOEDOWN_EXT_FENCED_CODE | HOEDOWN_EXT_AUTOLINK |\n+    HOEDOWN_EXT_STRIKETHROUGH | HOEDOWN_EXT_SUPERSCRIPT |\n+    HOEDOWN_EXT_FOOTNOTES;\n \n type hoedown_document = libc::c_void;  // this is opaque to us\n \n@@ -236,9 +244,6 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n \n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n-        let extensions = HOEDOWN_EXT_NO_INTRA_EMPHASIS | HOEDOWN_EXT_TABLES |\n-                         HOEDOWN_EXT_FENCED_CODE | HOEDOWN_EXT_AUTOLINK |\n-                         HOEDOWN_EXT_STRIKETHROUGH;\n         let renderer = hoedown_html_renderer_new(0, 0);\n         let mut opaque = MyOpaque {\n             dfltblk: (*renderer).blockcode.unwrap(),\n@@ -248,7 +253,7 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n         (*renderer).blockcode = Some(block);\n         (*renderer).header = Some(header);\n \n-        let document = hoedown_document_new(renderer, extensions, 16);\n+        let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n         hoedown_document_render(document, ob, s.as_ptr(),\n                                 s.len() as libc::size_t);\n         hoedown_document_free(document);\n@@ -319,15 +324,12 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n \n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n-        let extensions = HOEDOWN_EXT_NO_INTRA_EMPHASIS | HOEDOWN_EXT_TABLES |\n-                         HOEDOWN_EXT_FENCED_CODE | HOEDOWN_EXT_AUTOLINK |\n-                         HOEDOWN_EXT_STRIKETHROUGH;\n         let renderer = hoedown_html_renderer_new(0, 0);\n         (*renderer).blockcode = Some(block);\n         (*renderer).header = Some(header);\n         (*(*renderer).opaque).opaque = tests as *mut _ as *mut libc::c_void;\n \n-        let document = hoedown_document_new(renderer, extensions, 16);\n+        let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n         hoedown_document_render(document, ob, doc.as_ptr(),\n                                 doc.len() as libc::size_t);\n         hoedown_document_free(document);"}]}