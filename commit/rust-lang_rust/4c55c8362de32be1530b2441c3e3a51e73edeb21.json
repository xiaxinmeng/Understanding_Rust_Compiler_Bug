{"sha": "4c55c8362de32be1530b2441c3e3a51e73edeb21", "node_id": "C_kwDOAAsO6NoAKDRjNTVjODM2MmRlMzJiZTE1MzBiMjQ0MWMzZTNhNTFlNzNlZGViMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-05T01:47:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-05T01:47:59Z"}, "message": "Auto merge of #93655 - matthiaskrgr:rollup-dm88b02, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #90132 (Stabilize `-Z instrument-coverage` as `-C instrument-coverage`)\n - #91589 (impl `Arc::unwrap_or_clone`)\n - #93495 (kmc-solid: Fix off-by-one error in `SystemTime::now`)\n - #93576 (Emit more valid HTML from rustdoc)\n - #93608 (Clean up `find_library_crate`)\n - #93612 (doc: use U+2212 for minus sign in integer MIN/MAX text)\n - #93615 (Fix `isize` optimization in `StableHasher` for big-endian architectures)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0b9d0dec4a247586b96230e86b1abc54e5513cdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b9d0dec4a247586b96230e86b1abc54e5513cdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c55c8362de32be1530b2441c3e3a51e73edeb21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c55c8362de32be1530b2441c3e3a51e73edeb21", "html_url": "https://github.com/rust-lang/rust/commit/4c55c8362de32be1530b2441c3e3a51e73edeb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c55c8362de32be1530b2441c3e3a51e73edeb21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71226d717a1fb57122e47e63b97295e703319cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/71226d717a1fb57122e47e63b97295e703319cb0", "html_url": "https://github.com/rust-lang/rust/commit/71226d717a1fb57122e47e63b97295e703319cb0"}, {"sha": "2d62bd00ff28302d323184e6e043511696c61fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d62bd00ff28302d323184e6e043511696c61fd9", "html_url": "https://github.com/rust-lang/rust/commit/2d62bd00ff28302d323184e6e043511696c61fd9"}], "stats": {"total": 746, "additions": 408, "deletions": 338}, "files": [{"sha": "58f391692c49c109bb59b7011109403a09625943", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -39,7 +39,7 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     // LLVM 12.\n     let version = coverageinfo::mapping_version();\n     if version < 4 {\n-        tcx.sess.fatal(\"rustc option `-Z instrument-coverage` requires LLVM 12 or higher.\");\n+        tcx.sess.fatal(\"rustc option `-C instrument-coverage` requires LLVM 12 or higher.\");\n     }\n \n     debug!(\"Generating coverage map for CodegenUnit: `{}`\", cx.codegen_unit.name());\n@@ -274,7 +274,7 @@ fn save_function_record(\n /// (functions referenced by other \"used\" or public items). Any other functions considered unused,\n /// or \"Unreachable\", were still parsed and processed through the MIR stage, but were not\n /// codegenned. (Note that `-Clink-dead-code` can force some unused code to be codegenned, but\n-/// that flag is known to cause other errors, when combined with `-Z instrument-coverage`; and\n+/// that flag is known to cause other errors, when combined with `-C instrument-coverage`; and\n /// `-Clink-dead-code` will not generate code for unused generic functions.)\n ///\n /// We can find the unused functions (including generic functions) by the set difference of all MIR"}, {"sha": "e77201cf0c800a144b0853b2010184f5533b48c9", "filename": "compiler/rustc_codegen_ssa/src/traits/coverageinfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -22,15 +22,15 @@ pub trait CoverageInfoMethods<'tcx>: BackendTypes {\n \n pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n     /// Returns true if the function source hash was added to the coverage map (even if it had\n-    /// already been added, for this instance). Returns false *only* if `-Z instrument-coverage` is\n+    /// already been added, for this instance). Returns false *only* if `-C instrument-coverage` is\n     /// not enabled (a coverage map is not being generated).\n     fn set_function_source_hash(\n         &mut self,\n         instance: Instance<'tcx>,\n         function_source_hash: u64,\n     ) -> bool;\n \n-    /// Returns true if the counter was added to the coverage map; false if `-Z instrument-coverage`\n+    /// Returns true if the counter was added to the coverage map; false if `-C instrument-coverage`\n     /// is not enabled (a coverage map is not being generated).\n     fn add_coverage_counter(\n         &mut self,\n@@ -40,7 +40,7 @@ pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n     ) -> bool;\n \n     /// Returns true if the expression was added to the coverage map; false if\n-    /// `-Z instrument-coverage` is not enabled (a coverage map is not being generated).\n+    /// `-C instrument-coverage` is not enabled (a coverage map is not being generated).\n     fn add_coverage_counter_expression(\n         &mut self,\n         instance: Instance<'tcx>,\n@@ -51,7 +51,7 @@ pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n         region: Option<CodeRegion>,\n     ) -> bool;\n \n-    /// Returns true if the region was added to the coverage map; false if `-Z instrument-coverage`\n+    /// Returns true if the region was added to the coverage map; false if `-C instrument-coverage`\n     /// is not enabled (a coverage map is not being generated).\n     fn add_coverage_unreachable(&mut self, instance: Instance<'tcx>, region: CodeRegion) -> bool;\n }"}, {"sha": "a121bbcedc8f70080eb633d78d7eb7d2f8f74070", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -133,18 +133,18 @@ impl Hasher for StableHasher {\n \n     #[inline]\n     fn write_isize(&mut self, i: isize) {\n-        // Always treat isize as i64 so we get the same results on 32 and 64 bit\n+        // Always treat isize as a 64-bit number so we get the same results on 32 and 64 bit\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example. Sign extending here is preferable as it means that the\n         // same negative number hashes the same on both 32 and 64 bit platforms.\n-        let value = (i as i64).to_le() as u64;\n+        let value = i as u64;\n \n         // Cold path\n         #[cold]\n         #[inline(never)]\n         fn hash_value(state: &mut SipHasher128, value: u64) {\n             state.write_u8(0xFF);\n-            state.write_u64(value);\n+            state.write_u64(value.to_le());\n         }\n \n         // `isize` values often seem to have a small (positive) numeric value in practice.\n@@ -161,6 +161,10 @@ impl Hasher for StableHasher {\n         // 8 bytes. Since this prefix cannot occur when we hash a single byte, when we hash two\n         // `isize`s that fit within a different amount of bytes, they should always produce a different\n         // byte stream for the hasher.\n+        //\n+        // To ensure that this optimization hashes the exact same bytes on both little-endian and\n+        // big-endian architectures, we compare the value with 0xFF before we convert the number\n+        // into a unified representation (little-endian).\n         if value < 0xFF {\n             self.state.write_u8(value as u8);\n         } else {"}, {"sha": "b0d66c32a07adc3f737623ebcb4f78b9aed5e567", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -159,4 +159,5 @@ fn test_isize_compression() {\n     check_hash(0xAAAA, 0xAAAAAA);\n     check_hash(0xAAAAAA, 0xAAAAAAAA);\n     check_hash(0xFF, 0xFFFFFFFFFFFFFFFF);\n+    check_hash(u64::MAX /* -1 */, 1);\n }"}, {"sha": "5e288187756359260e4facac9f48fca7bf1a34ae", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -575,6 +575,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(force_frame_pointers, Some(false));\n     tracked!(force_unwind_tables, Some(true));\n     tracked!(inline_threshold, Some(0xf007ba11));\n+    tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n     tracked!(linker_plugin_lto, LinkerPluginLto::LinkerPluginAuto);\n     tracked!(link_dead_code, Some(true));\n     tracked!(llvm_args, vec![String::from(\"1\"), String::from(\"2\")]);"}, {"sha": "550b22a2a3c657d376cecac2b51f167432388e3b", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 53, "deletions": 44, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -223,7 +223,7 @@ use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{struct_span_err, FatalError};\n use rustc_session::config::{self, CrateType};\n use rustc_session::cstore::{CrateSource, MetadataLoader};\n-use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n+use rustc_session::filesearch::FileSearch;\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::CanonicalizedPath;\n use rustc_session::Session;\n@@ -371,15 +371,20 @@ impl<'a> CrateLocator<'a> {\n         extra_prefix: &str,\n         seen_paths: &mut FxHashSet<PathBuf>,\n     ) -> Result<Option<Library>, CrateError> {\n-        // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n-        let dylib_prefix = format!(\"{}{}{}\", self.target.dll_prefix, self.crate_name, extra_prefix);\n-        let rlib_prefix = format!(\"lib{}{}\", self.crate_name, extra_prefix);\n+        let rmeta_prefix = &format!(\"lib{}{}\", self.crate_name, extra_prefix);\n+        let rlib_prefix = rmeta_prefix;\n+        let dylib_prefix =\n+            &format!(\"{}{}{}\", self.target.dll_prefix, self.crate_name, extra_prefix);\n         let staticlib_prefix =\n-            format!(\"{}{}{}\", self.target.staticlib_prefix, self.crate_name, extra_prefix);\n+            &format!(\"{}{}{}\", self.target.staticlib_prefix, self.crate_name, extra_prefix);\n+\n+        let rmeta_suffix = \".rmeta\";\n+        let rlib_suffix = \".rlib\";\n+        let dylib_suffix = &self.target.dll_suffix;\n+        let staticlib_suffix = &self.target.staticlib_suffix;\n \n         let mut candidates: FxHashMap<_, (FxHashMap<_, _>, FxHashMap<_, _>, FxHashMap<_, _>)> =\n             Default::default();\n-        let mut staticlibs = vec![];\n \n         // First, find all possible candidate rlibs and dylibs purely based on\n         // the name of the files themselves. We're trying to match against an\n@@ -394,46 +399,50 @@ impl<'a> CrateLocator<'a> {\n         // of the crate id (path/name/id).\n         //\n         // The goal of this step is to look at as little metadata as possible.\n-        self.filesearch.search(|spf, kind| {\n-            let file = match &spf.file_name_str {\n-                None => return FileDoesntMatch,\n-                Some(file) => file,\n-            };\n-            let (hash, found_kind) = if file.starts_with(&rlib_prefix) && file.ends_with(\".rlib\") {\n-                (&file[(rlib_prefix.len())..(file.len() - \".rlib\".len())], CrateFlavor::Rlib)\n-            } else if file.starts_with(&rlib_prefix) && file.ends_with(\".rmeta\") {\n-                (&file[(rlib_prefix.len())..(file.len() - \".rmeta\".len())], CrateFlavor::Rmeta)\n-            } else if file.starts_with(&dylib_prefix) && file.ends_with(&self.target.dll_suffix) {\n-                (\n-                    &file[(dylib_prefix.len())..(file.len() - self.target.dll_suffix.len())],\n-                    CrateFlavor::Dylib,\n-                )\n-            } else {\n-                if file.starts_with(&staticlib_prefix)\n-                    && file.ends_with(&self.target.staticlib_suffix)\n-                {\n-                    staticlibs\n-                        .push(CrateMismatch { path: spf.path.clone(), got: \"static\".to_string() });\n-                }\n-                return FileDoesntMatch;\n-            };\n+        // Unfortunately, the prefix-based matching sometimes is over-eager.\n+        // E.g. if `rlib_suffix` is `libstd` it'll match the file\n+        // `libstd_detect-8d6701fb958915ad.rlib` (incorrect) as well as\n+        // `libstd-f3ab5b1dea981f17.rlib` (correct). But this is hard to avoid\n+        // given that `extra_filename` comes from the `-C extra-filename`\n+        // option and thus can be anything, and the incorrect match will be\n+        // handled safely in `extract_one`.\n+        for search_path in self.filesearch.search_paths() {\n+            debug!(\"searching {}\", search_path.dir.display());\n+            for spf in search_path.files.iter() {\n+                debug!(\"testing {}\", spf.path.display());\n+\n+                let f = &spf.file_name_str;\n+                let (hash, kind) = if f.starts_with(rlib_prefix) && f.ends_with(rlib_suffix) {\n+                    (&f[rlib_prefix.len()..(f.len() - rlib_suffix.len())], CrateFlavor::Rlib)\n+                } else if f.starts_with(rmeta_prefix) && f.ends_with(rmeta_suffix) {\n+                    (&f[rmeta_prefix.len()..(f.len() - rmeta_suffix.len())], CrateFlavor::Rmeta)\n+                } else if f.starts_with(dylib_prefix) && f.ends_with(dylib_suffix) {\n+                    (&f[dylib_prefix.len()..(f.len() - dylib_suffix.len())], CrateFlavor::Dylib)\n+                } else {\n+                    if f.starts_with(staticlib_prefix) && f.ends_with(staticlib_suffix) {\n+                        self.crate_rejections.via_kind.push(CrateMismatch {\n+                            path: spf.path.clone(),\n+                            got: \"static\".to_string(),\n+                        });\n+                    }\n+                    continue;\n+                };\n \n-            info!(\"lib candidate: {}\", spf.path.display());\n+                info!(\"lib candidate: {}\", spf.path.display());\n \n-            let (rlibs, rmetas, dylibs) = candidates.entry(hash.to_string()).or_default();\n-            let path = fs::canonicalize(&spf.path).unwrap_or_else(|_| spf.path.clone());\n-            if seen_paths.contains(&path) {\n-                return FileDoesntMatch;\n-            };\n-            seen_paths.insert(path.clone());\n-            match found_kind {\n-                CrateFlavor::Rlib => rlibs.insert(path, kind),\n-                CrateFlavor::Rmeta => rmetas.insert(path, kind),\n-                CrateFlavor::Dylib => dylibs.insert(path, kind),\n-            };\n-            FileMatches\n-        });\n-        self.crate_rejections.via_kind.extend(staticlibs);\n+                let (rlibs, rmetas, dylibs) = candidates.entry(hash.to_string()).or_default();\n+                let path = fs::canonicalize(&spf.path).unwrap_or_else(|_| spf.path.clone());\n+                if seen_paths.contains(&path) {\n+                    continue;\n+                };\n+                seen_paths.insert(path.clone());\n+                match kind {\n+                    CrateFlavor::Rlib => rlibs.insert(path, search_path.kind),\n+                    CrateFlavor::Rmeta => rmetas.insert(path, search_path.kind),\n+                    CrateFlavor::Dylib => dylibs.insert(path, search_path.kind),\n+                };\n+            }\n+        }\n \n         // We have now collected all known libraries into a set of candidates\n         // keyed of the filename hash listed. For each filename, we also have a"}, {"sha": "33fb1e570b1c0cb85e588267c49acc53d74f28a1", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1577,7 +1577,7 @@ pub enum StatementKind<'tcx> {\n     /// - `Bivariant` -- no effect\n     AscribeUserType(Box<(Place<'tcx>, UserTypeProjection)>, ty::Variance),\n \n-    /// Marks the start of a \"coverage region\", injected with '-Zinstrument-coverage'. A\n+    /// Marks the start of a \"coverage region\", injected with '-Cinstrument-coverage'. A\n     /// `Coverage` statement carries metadata about the coverage region, used to inject a coverage\n     /// map into the binary. If `Coverage::kind` is a `Counter`, the statement also generates\n     /// executable code, to increment a counter variable at runtime, each time the code region is"}, {"sha": "4b8eb3fbd96075193bbda54bf49245f041b5ce5b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -390,7 +390,7 @@ pub struct DestructuredConst<'tcx> {\n }\n \n /// Coverage information summarized from a MIR if instrumented for source code coverage (see\n-/// compiler option `-Zinstrument-coverage`). This information is generated by the\n+/// compiler option `-Cinstrument-coverage`). This information is generated by the\n /// `InstrumentCoverage` MIR pass and can be retrieved via the `coverageinfo` query.\n #[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable)]\n pub struct CoverageInfo {"}, {"sha": "e0448c3fe1c43f98410bd3e248ad80ee6b365523", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -384,7 +384,7 @@ rustc_queries! {\n     }\n \n     /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n-    /// MIR pass (assuming the -Zinstrument-coverage option is enabled).\n+    /// MIR pass (assuming the -Cinstrument-coverage option is enabled).\n     query coverageinfo(key: ty::InstanceDef<'tcx>) -> mir::CoverageInfo {\n         desc { |tcx| \"retrieving coverage info from MIR for `{}`\", tcx.def_path_str(key.def_id()) }\n         storage(ArenaCacheSelector<'tcx>)"}, {"sha": "62e060c8e0c6c547cbca88dbbc47961e63840a63", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -3,7 +3,7 @@\n //!\n //! To enable coverage, include the rustc command line option:\n //!\n-//!   * `-Z instrument-coverage`\n+//!   * `-C instrument-coverage`\n //!\n //! MIR Dump Files, with additional `CoverageGraph` graphviz and `CoverageSpan` spanview\n //! ------------------------------------------------------------------------------------"}, {"sha": "4651e1f4ed059de70a5c4977bcd610972f7fefdf", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -303,7 +303,7 @@ pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n /// evaluation: `if false { ... }`.\n ///\n /// Those statements are bypassed by redirecting paths in the CFG around the\n-/// `dead blocks`; but with `-Z instrument-coverage`, the dead blocks usually\n+/// `dead blocks`; but with `-C instrument-coverage`, the dead blocks usually\n /// include `Coverage` statements representing the Rust source code regions to\n /// be counted at runtime. Without these `Coverage` statements, the regions are\n /// lost, and the Rust source code will show no coverage information."}, {"sha": "8630ffec241f947199a4ae56131823180174bc2f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -127,16 +127,16 @@ pub enum MirSpanview {\n     Block,\n }\n \n-/// The different settings that the `-Z instrument-coverage` flag can have.\n+/// The different settings that the `-C instrument-coverage` flag can have.\n ///\n-/// Coverage instrumentation now supports combining `-Z instrument-coverage`\n+/// Coverage instrumentation now supports combining `-C instrument-coverage`\n /// with compiler and linker optimization (enabled with `-O` or `-C opt-level=1`\n /// and higher). Nevertheless, there are many variables, depending on options\n /// selected, code structure, and enabled attributes. If errors are encountered,\n /// either while compiling or when generating `llvm-cov show` reports, consider\n /// lowering the optimization level, including or excluding `-C link-dead-code`,\n-/// or using `-Z instrument-coverage=except-unused-functions` or `-Z\n-/// instrument-coverage=except-unused-generics`.\n+/// or using `-Zunstable-options -C instrument-coverage=except-unused-functions`\n+/// or `-Zunstable-options -C instrument-coverage=except-unused-generics`.\n ///\n /// Note that `ExceptUnusedFunctions` means: When `mapgen.rs` generates the\n /// coverage map, it will not attempt to generate synthetic functions for unused\n@@ -148,13 +148,13 @@ pub enum MirSpanview {\n /// unless the function has type parameters.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum InstrumentCoverage {\n-    /// Default `-Z instrument-coverage` or `-Z instrument-coverage=statement`\n+    /// Default `-C instrument-coverage` or `-C instrument-coverage=statement`\n     All,\n-    /// `-Z instrument-coverage=except-unused-generics`\n+    /// `-Zunstable-options -C instrument-coverage=except-unused-generics`\n     ExceptUnusedGenerics,\n-    /// `-Z instrument-coverage=except-unused-functions`\n+    /// `-Zunstable-options -C instrument-coverage=except-unused-functions`\n     ExceptUnusedFunctions,\n-    /// `-Z instrument-coverage=off` (or `no`, etc.)\n+    /// `-C instrument-coverage=off` (or `no`, etc.)\n     Off,\n }\n \n@@ -2195,18 +2195,44 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         _ => {}\n     }\n \n-    if debugging_opts.instrument_coverage.is_some()\n-        && debugging_opts.instrument_coverage != Some(InstrumentCoverage::Off)\n-    {\n+    // Handle both `-Z instrument-coverage` and `-C instrument-coverage`; the latter takes\n+    // precedence.\n+    match (cg.instrument_coverage, debugging_opts.instrument_coverage) {\n+        (Some(ic_c), Some(ic_z)) if ic_c != ic_z => {\n+            early_error(\n+                error_format,\n+                \"incompatible values passed for `-C instrument-coverage` \\\n+                and `-Z instrument-coverage`\",\n+            );\n+        }\n+        (Some(InstrumentCoverage::Off | InstrumentCoverage::All), _) => {}\n+        (Some(_), _) if !debugging_opts.unstable_options => {\n+            early_error(\n+                error_format,\n+                \"`-C instrument-coverage=except-*` requires `-Z unstable-options`\",\n+            );\n+        }\n+        (None, None) => {}\n+        (None, ic) => {\n+            early_warn(\n+                error_format,\n+                \"`-Z instrument-coverage` is deprecated; use `-C instrument-coverage`\",\n+            );\n+            cg.instrument_coverage = ic;\n+        }\n+        _ => {}\n+    }\n+\n+    if cg.instrument_coverage.is_some() && cg.instrument_coverage != Some(InstrumentCoverage::Off) {\n         if cg.profile_generate.enabled() || cg.profile_use.is_some() {\n             early_error(\n                 error_format,\n-                \"option `-Z instrument-coverage` is not compatible with either `-C profile-use` \\\n+                \"option `-C instrument-coverage` is not compatible with either `-C profile-use` \\\n                 or `-C profile-generate`\",\n             );\n         }\n \n-        // `-Z instrument-coverage` implies `-C symbol-mangling-version=v0` - to ensure consistent\n+        // `-C instrument-coverage` implies `-C symbol-mangling-version=v0` - to ensure consistent\n         // and reversible name mangling. Note, LLVM coverage tools can analyze coverage over\n         // multiple runs, including some changes to source code; so mangled names must be consistent\n         // across compilations.\n@@ -2215,7 +2241,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             Some(SymbolManglingVersion::Legacy) => {\n                 early_warn(\n                     error_format,\n-                    \"-Z instrument-coverage requires symbol mangling version `v0`, \\\n+                    \"-C instrument-coverage requires symbol mangling version `v0`, \\\n                     but `-C symbol-mangling-version=legacy` was specified\",\n                 );\n             }"}, {"sha": "9200be363addec569720abb729430f2e64ce633f", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,13 +1,11 @@\n //! A module for searching for libraries\n \n-pub use self::FileMatch::*;\n-\n use std::env;\n use std::fs;\n use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n-use crate::search_paths::{PathKind, SearchPath, SearchPathFile};\n+use crate::search_paths::{PathKind, SearchPath};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use tracing::debug;\n \n@@ -43,36 +41,6 @@ impl<'a> FileSearch<'a> {\n         self.get_lib_path().join(\"self-contained\")\n     }\n \n-    pub fn search<F>(&self, mut pick: F)\n-    where\n-        F: FnMut(&SearchPathFile, PathKind) -> FileMatch,\n-    {\n-        for search_path in self.search_paths() {\n-            debug!(\"searching {}\", search_path.dir.display());\n-            fn is_rlib(spf: &SearchPathFile) -> bool {\n-                if let Some(f) = &spf.file_name_str { f.ends_with(\".rlib\") } else { false }\n-            }\n-            // Reading metadata out of rlibs is faster, and if we find both\n-            // an rlib and a dylib we only read one of the files of\n-            // metadata, so in the name of speed, bring all rlib files to\n-            // the front of the search list.\n-            let files1 = search_path.files.iter().filter(|spf| is_rlib(&spf));\n-            let files2 = search_path.files.iter().filter(|spf| !is_rlib(&spf));\n-            for spf in files1.chain(files2) {\n-                debug!(\"testing {}\", spf.path.display());\n-                let maybe_picked = pick(spf, search_path.kind);\n-                match maybe_picked {\n-                    FileMatches => {\n-                        debug!(\"picked {}\", spf.path.display());\n-                    }\n-                    FileDoesntMatch => {\n-                        debug!(\"rejected {}\", spf.path.display());\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     pub fn new(\n         sysroot: &'a Path,\n         triple: &'a str,"}, {"sha": "90eba3d688e437f82a7deb1be5ba9658640c51a1", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -109,17 +109,16 @@ impl Options {\n     }\n \n     pub fn instrument_coverage(&self) -> bool {\n-        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n-            != InstrumentCoverage::Off\n+        self.cg.instrument_coverage.unwrap_or(InstrumentCoverage::Off) != InstrumentCoverage::Off\n     }\n \n     pub fn instrument_coverage_except_unused_generics(&self) -> bool {\n-        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n+        self.cg.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n             == InstrumentCoverage::ExceptUnusedGenerics\n     }\n \n     pub fn instrument_coverage_except_unused_functions(&self) -> bool {\n-        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n+        self.cg.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n             == InstrumentCoverage::ExceptUnusedFunctions\n     }\n }\n@@ -1031,6 +1030,14 @@ options! {\n         \"enable incremental compilation\"),\n     inline_threshold: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"set the threshold for inlining a function\"),\n+    instrument_coverage: Option<InstrumentCoverage> = (None, parse_instrument_coverage, [TRACKED],\n+        \"instrument the generated code to support LLVM source-based code coverage \\\n+        reports (note, the compiler build config must include `profiler = true`); \\\n+        implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\"),\n     link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n     link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],"}, {"sha": "b6bde28233d243bc2ad86c0e5619111f3bc1d6d7", "filename": "compiler/rustc_session/src/search_paths.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -15,22 +15,15 @@ pub struct SearchPath {\n /// doable, but very slow, because it involves calls to `file_name` and\n /// `extension` that are themselves slow.\n ///\n-/// This type augments the `PathBuf` with an `Option<String>` containing the\n+/// This type augments the `PathBuf` with an `String` containing the\n /// `PathBuf`'s filename. The prefix and suffix checking is much faster on the\n-/// `Option<String>` than the `PathBuf`. (It's an `Option` because\n-/// `Path::file_name` can fail; if that happens then all subsequent checking\n-/// will also fail, which is fine.)\n+/// `String` than the `PathBuf`. (The filename must be valid UTF-8. If it's\n+/// not, the entry should be skipped, because all Rust output files are valid\n+/// UTF-8, and so a non-UTF-8 filename couldn't be one we're looking for.)\n #[derive(Clone, Debug)]\n pub struct SearchPathFile {\n     pub path: PathBuf,\n-    pub file_name_str: Option<String>,\n-}\n-\n-impl SearchPathFile {\n-    fn new(path: PathBuf) -> SearchPathFile {\n-        let file_name_str = path.file_name().and_then(|f| f.to_str()).map(|s| s.to_string());\n-        SearchPathFile { path, file_name_str }\n-    }\n+    pub file_name_str: String,\n }\n \n #[derive(PartialEq, Clone, Copy, Debug, Hash, Eq, Encodable, Decodable)]\n@@ -85,7 +78,14 @@ impl SearchPath {\n         // Get the files within the directory.\n         let files = match std::fs::read_dir(&dir) {\n             Ok(files) => files\n-                .filter_map(|e| e.ok().map(|e| SearchPathFile::new(e.path())))\n+                .filter_map(|e| {\n+                    e.ok().and_then(|e| {\n+                        e.file_name().to_str().map(|s| SearchPathFile {\n+                            path: e.path(),\n+                            file_name_str: s.to_string(),\n+                        })\n+                    })\n+                })\n                 .collect::<Vec<_>>(),\n             Err(..) => vec![],\n         };"}, {"sha": "98688ca65b7e29d28db104da044bcd5b37858214", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -289,7 +289,7 @@ changelog-seen = 2\n #sanitizers = false\n \n # Build the profiler runtime (required when compiling with options that depend\n-# on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n+# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n #profiler = false\n \n # Indicates whether the native libraries linked into Cargo will be statically\n@@ -671,7 +671,7 @@ changelog-seen = 2\n #sanitizers = build.sanitizers (bool)\n \n # Build the profiler runtime for this target(required when compiling with options that depend\n-# on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n+# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n # This option will override the same option under [build] section.\n #profiler = build.profiler (bool)\n "}, {"sha": "3065169e5e2cbcc296c2fe748b9849d22f7b6c8c", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1203,6 +1203,41 @@ impl<T: Clone> Rc<T> {\n         // reference to the allocation.\n         unsafe { &mut this.ptr.as_mut().value }\n     }\n+\n+    /// If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\n+    /// clone.\n+    ///\n+    /// Assuming `rc_t` is of type `Rc<T>`, this function is functionally equivalent to\n+    /// `(*rc_t).clone()`, but will avoid cloning the inner value where possible.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_unwrap_or_clone)]\n+    /// # use std::{ptr, rc::Rc};\n+    /// let inner = String::from(\"test\");\n+    /// let ptr = inner.as_ptr();\n+    ///\n+    /// let rc = Rc::new(inner);\n+    /// let inner = Rc::unwrap_or_clone(rc);\n+    /// // The inner value was not cloned\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    ///\n+    /// let rc = Rc::new(inner);\n+    /// let rc2 = rc.clone();\n+    /// let inner = Rc::unwrap_or_clone(rc);\n+    /// // Because there were 2 references, we had to clone the inner value.\n+    /// assert!(!ptr::eq(ptr, inner.as_ptr()));\n+    /// // `rc2` is the last reference, so when we unwrap it we get back\n+    /// // the original `String`.\n+    /// let inner = Rc::unwrap_or_clone(rc2);\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_unwrap_or_clone\", issue = \"93610\")]\n+    pub fn unwrap_or_clone(this: Self) -> T {\n+        Rc::try_unwrap(this).unwrap_or_else(|rc| (*rc).clone())\n+    }\n }\n \n impl Rc<dyn Any> {"}, {"sha": "7e7670aad6425fc1bc6476687a60c48ab6396961", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1477,6 +1477,41 @@ impl<T: Clone> Arc<T> {\n         // either unique to begin with, or became one upon cloning the contents.\n         unsafe { Self::get_mut_unchecked(this) }\n     }\n+\n+    /// If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\n+    /// clone.\n+    ///\n+    /// Assuming `arc_t` is of type `Arc<T>`, this function is functionally equivalent to\n+    /// `(*arc_t).clone()`, but will avoid cloning the inner value where possible.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_unwrap_or_clone)]\n+    /// # use std::{ptr, sync::Arc};\n+    /// let inner = String::from(\"test\");\n+    /// let ptr = inner.as_ptr();\n+    ///\n+    /// let arc = Arc::new(inner);\n+    /// let inner = Arc::unwrap_or_clone(arc);\n+    /// // The inner value was not cloned\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    ///\n+    /// let arc = Arc::new(inner);\n+    /// let arc2 = arc.clone();\n+    /// let inner = Arc::unwrap_or_clone(arc);\n+    /// // Because there were 2 references, we had to clone the inner value.\n+    /// assert!(!ptr::eq(ptr, inner.as_ptr()));\n+    /// // `arc2` is the last reference, so when we unwrap it we get back\n+    /// // the original `String`.\n+    /// let inner = Arc::unwrap_or_clone(arc2);\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_unwrap_or_clone\", issue = \"93610\")]\n+    pub fn unwrap_or_clone(this: Self) -> T {\n+        Arc::try_unwrap(this).unwrap_or_else(|arc| (*arc).clone())\n+    }\n }\n \n impl<T: ?Sized> Arc<T> {"}, {"sha": "9949ecf0d36a1e4d42569aff4b786f0f68b53a64", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -4,7 +4,7 @@ macro_rules! int_impl {\n      $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n      $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n         /// The smallest value that can be represented by this integer type,\n-        #[doc = concat!(\"-2<sup>\", $BITS_MINUS_ONE, \"</sup>.\")]\n+        #[doc = concat!(\"&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>.\")]\n         ///\n         /// # Examples\n         ///\n@@ -17,7 +17,7 @@ macro_rules! int_impl {\n         pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n \n         /// The largest value that can be represented by this integer type,\n-        #[doc = concat!(\"2<sup>\", $BITS_MINUS_ONE, \"</sup> - 1.\")]\n+        #[doc = concat!(\"2<sup>\", $BITS_MINUS_ONE, \"</sup> &minus; 1.\")]\n         ///\n         /// # Examples\n         ///"}, {"sha": "555e121f9d05737ffefcc3391b456b482c88882c", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -17,7 +17,7 @@ macro_rules! uint_impl {\n         pub const MIN: Self = 0;\n \n         /// The largest value that can be represented by this integer type,\n-        #[doc = concat!(\"2<sup>\", $BITS, \"</sup> - 1.\")]\n+        #[doc = concat!(\"2<sup>\", $BITS, \"</sup> &minus; 1.\")]\n         ///\n         /// # Examples\n         ///"}, {"sha": "ab988be24442a0ad774e5a250c283cc22d3ecb1b", "filename": "library/std/src/sys/solid/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -21,7 +21,7 @@ impl SystemTime {\n                 tm_min: rtc.tm_min,\n                 tm_hour: rtc.tm_hour,\n                 tm_mday: rtc.tm_mday,\n-                tm_mon: rtc.tm_mon,\n+                tm_mon: rtc.tm_mon - 1,\n                 tm_year: rtc.tm_year,\n                 tm_wday: rtc.tm_wday,\n                 tm_yday: 0,"}, {"sha": "2fc94005b80f840d5687f6b667de7082d9c449d2", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -26,6 +26,7 @@\n     - [Custom Targets](targets/custom.md)\n     - [Known Issues](targets/known-issues.md)\n - [Profile-guided Optimization](profile-guided-optimization.md)\n+- [Instrumentation-based Code Coverage](instrument-coverage.md)\n - [Linker-plugin based LTO](linker-plugin-lto.md)\n - [Exploit Mitigations](exploit-mitigations.md)\n - [Contributing to `rustc`](contributing.md)"}, {"sha": "3b0cf92bbb763d1450443947a5792ea71b83f02e", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -177,6 +177,15 @@ The default depends on the [opt-level](#opt-level):\n | s         | 75 |\n | z         | 25 |\n \n+## instrument-coverage\n+\n+This option enables instrumentation-based code coverage support. See the\n+chapter on [instrumentation-based code coverage] for more information.\n+\n+Note that while the `-C instrument-coverage` option is stable, the profile data\n+format produced by the resulting instrumentation may change, and may not work\n+with coverage tools other than those built and shipped with the compiler.\n+\n ## link-arg\n \n This flag lets you append a single extra argument to the linker invocation.\n@@ -597,5 +606,6 @@ effective only for x86 targets.\n \n [option-emit]: ../command-line-arguments.md#option-emit\n [option-o-optimize]: ../command-line-arguments.md#option-o-optimize\n+[instrumentation-based code coverage]: ../instrument-coverage.md\n [profile-guided optimization]: ../profile-guided-optimization.md\n [option-g-debug]: ../command-line-arguments.md#option-g-debug"}, {"sha": "b94989161ccfc6bc7099f018d275e545954b8e79", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "renamed", "additions": 40, "deletions": 56, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,23 +1,17 @@\n # `instrument-coverage`\n \n-The tracking issue for this feature is: [#79121].\n-\n-[#79121]: https://github.com/rust-lang/rust/issues/79121\n-\n----\n-\n ## Introduction\n \n The Rust compiler includes two code coverage implementations:\n \n -   A GCC-compatible, gcov-based coverage implementation, enabled with `-Z profile`, which derives coverage data based on DebugInfo.\n--   A source-based code coverage implementation, enabled with `-Z instrument-coverage`, which uses LLVM's native, efficient coverage instrumentation to generate very precise coverage data.\n+-   A source-based code coverage implementation, enabled with `-C instrument-coverage`, which uses LLVM's native, efficient coverage instrumentation to generate very precise coverage data.\n \n-This document describes how to enable and use the LLVM instrumentation-based coverage, via the `-Z instrument-coverage` compiler flag.\n+This document describes how to enable and use the LLVM instrumentation-based coverage, via the `-C instrument-coverage` compiler flag.\n \n ## How it works\n \n-When `-Z instrument-coverage` is enabled, the Rust compiler enhances rust-based libraries and binaries by:\n+When `-C instrument-coverage` is enabled, the Rust compiler enhances rust-based libraries and binaries by:\n \n -   Automatically injecting calls to an LLVM intrinsic ([`llvm.instrprof.increment`]), at functions and branches in compiled code, to increment counters when conditional sections of code are executed.\n -   Embedding additional information in the data section of each library and binary (using the [LLVM Code Coverage Mapping Format] _Version 5_, if compiling with LLVM 12, or _Version 6_, if compiling with LLVM 13 or higher), to define the code regions (start and end positions in the source code) being counted.\n@@ -27,21 +21,21 @@ When running a coverage-instrumented program, the counter values are written to\n [`llvm.instrprof.increment`]: https://llvm.org/docs/LangRef.html#llvm-instrprof-increment-intrinsic\n [llvm code coverage mapping format]: https://llvm.org/docs/CoverageMappingFormat.html\n \n-> **Note**: `-Z instrument-coverage` also automatically enables `-C symbol-mangling-version=v0` (tracking issue [#60705]). The `v0` symbol mangler is strongly recommended, but be aware that this demangler is also experimental. The `v0` demangler can be overridden by explicitly adding `-Z unstable-options -C symbol-mangling-version=legacy`.\n+> **Note**: `-C instrument-coverage` also automatically enables `-C symbol-mangling-version=v0` (tracking issue [#60705]). The `v0` symbol mangler is strongly recommended. The `v0` demangler can be overridden by explicitly adding `-Z unstable-options -C symbol-mangling-version=legacy`.\n \n [#60705]: https://github.com/rust-lang/rust/issues/60705\n \n ## Enable coverage profiling in the Rust compiler\n \n-Rust's source-based code coverage requires the Rust \"profiler runtime\". Without it, compiling with `-Z instrument-coverage` generates an error that the profiler runtime is missing.\n+Rust's source-based code coverage requires the Rust \"profiler runtime\". Without it, compiling with `-C instrument-coverage` generates an error that the profiler runtime is missing.\n \n The Rust `nightly` distribution channel includes the profiler runtime, by default.\n \n > **Important**: If you are building the Rust compiler from the source distribution, the profiler runtime is _not_ enabled in the default `config.toml.example`. Edit your `config.toml` file and ensure the `profiler` feature is set it to `true` (either under the `[build]` section, or under the settings for an individual `[target.<triple>]`):\n >\n > ```toml\n > # Build the profiler runtime (required when compiling with options that depend\n-> # on this runtime, such as `-C profile-generate` or `-Z  instrument-coverage`).\n+> # on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n > profiler = true\n > ```\n \n@@ -65,9 +59,9 @@ $ ./x.py build rust-demangler\n \n ## Compiling with coverage enabled\n \n-Set the `-Z instrument-coverage` compiler flag in order to enable LLVM source-based code coverage profiling.\n+Set the `-C instrument-coverage` compiler flag in order to enable LLVM source-based code coverage profiling.\n \n-The default option generates coverage for all functions, including unused (never called) functions and generics. The compiler flag supports an optional value to tailor this behavior. (See [`-Z instrument-coverage=<options>`](#-z-instrument-coverageoptions), below.)\n+The default option generates coverage for all functions, including unused (never called) functions and generics. The compiler flag supports an optional value to tailor this behavior. (See [`-C instrument-coverage=<options>`](#-c-instrument-coverageoptions), below.)\n \n With `cargo`, you can instrument your program binary _and_ dependencies at the same time.\n \n@@ -76,18 +70,18 @@ For example (if your project's Cargo.toml builds a binary by default):\n ```shell\n $ cd your-project\n $ cargo clean\n-$ RUSTFLAGS=\"-Z instrument-coverage\" cargo build\n+$ RUSTFLAGS=\"-C instrument-coverage\" cargo build\n ```\n \n If `cargo` is not configured to use your `profiler`-enabled version of `rustc`, set the path explicitly via the `RUSTC` environment variable. Here is another example, using a `stage1` build of `rustc` to compile an `example` binary (from the [`json5format`] crate):\n \n ```shell\n $ RUSTC=$HOME/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc \\\n-    RUSTFLAGS=\"-Z instrument-coverage\" \\\n+    RUSTFLAGS=\"-C instrument-coverage\" \\\n     cargo build --example formatjson5\n ```\n \n-> **Note**: that some compiler options, combined with `-Z instrument-coverage`, can produce LLVM IR and/or linked binaries that are incompatible with LLVM coverage maps. For example, coverage requires references to actual functions in LLVM IR. If any covered function is optimized out, the coverage tools may not be able to process the coverage results. If you need to pass additional options, with coverage enabled, test them early, to confirm you will get the coverage results you expect.\n+> **Note**: that some compiler options, combined with `-C instrument-coverage`, can produce LLVM IR and/or linked binaries that are incompatible with LLVM coverage maps. For example, coverage requires references to actual functions in LLVM IR. If any covered function is optimized out, the coverage tools may not be able to process the coverage results. If you need to pass additional options, with coverage enabled, test them early, to confirm you will get the coverage results you expect.\n \n ## Running the instrumented binary to generate raw coverage profiling data\n \n@@ -123,31 +117,23 @@ If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing\n \n ## Installing LLVM coverage tools\n \n-LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 12 or higher. (`llvm-cov --version` typically shows the tool's LLVM version number.):\n+LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 12 or higher, and processing the *raw* data may require exactly the LLVM version used by the compiler. (`llvm-cov --version` typically shows the tool's LLVM version number, and `rustc --verbose --version` shows the version of LLVM used by the Rust compiler.)\n \n--   The LLVM tools may be installed (or installable) directly to your OS (such as via `apt-get`, for Linux).\n+-   You can install compatible versions of these tools via the `rustup` component `llvm-tools-preview`. This component is the recommended path, though the specific tools available and their interface is not currently subject to Rust's usual stability guarantees. In this case, you may also find `cargo-binutils` useful as a wrapper around these tools.\n+-   You can install a compatible version of LLVM tools from your operating system distribution, or from your distribution of LLVM.\n -   If you are building the Rust compiler from source, you can optionally use the bundled LLVM tools, built from source. Those tool binaries can typically be found in your build platform directory at something like: `rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-*`.\n--   You can install compatible versions of these tools via `rustup`.\n-\n-The `rustup` option is guaranteed to install a compatible version of the LLVM tools, but they can be hard to find. We recommend [`cargo-binutils`], which installs Rust-specific wrappers around these and other LLVM tools, so you can invoke them via `cargo` commands!\n-\n-```shell\n-$ rustup component add llvm-tools-preview\n-$ cargo install cargo-binutils\n-$ cargo profdata -- --help  # note the additional \"--\" preceding the tool-specific arguments\n-```\n \n-[`cargo-binutils`]: https://crates.io/crates/cargo-binutils\n+The examples in this document show how to use the llvm tools directly.\n \n ## Creating coverage reports\n \n-Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`] (or `cargo profdata -- merge`), which can combine multiple raw profiles and index them at the same time:\n+Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`], which can combine multiple raw profiles and index them at the same time:\n \n ```shell\n $ llvm-profdata merge -sparse formatjson5.profraw -o formatjson5.profdata\n ```\n \n-Finally, the `.profdata` file is used, in combination with the coverage map (from the program binary) to generate coverage reports using [`llvm-cov report`] (or `cargo cov -- report`), for a coverage summaries; and [`llvm-cov show`] (or `cargo cov -- show`), to see detailed coverage of lines and regions (character ranges) overlaid on the original source code.\n+Finally, the `.profdata` file is used, in combination with the coverage map (from the program binary) to generate coverage reports using [`llvm-cov report`], for a coverage summaries; and [`llvm-cov show`], to see detailed coverage of lines and regions (character ranges) overlaid on the original source code.\n \n These commands have several display and filtering options. For example:\n \n@@ -176,7 +162,7 @@ Some of the more notable options in this example include:\n \n > **Note**: Coverage can also be disabled on an individual function by annotating the function with the [`no_coverage` attribute] (which requires the feature flag `#![feature(no_coverage)]`).\n \n-[`no_coverage` attribute]: ../language-features/no-coverage.md\n+[`no_coverage` attribute]: ../unstable-book/language-features/no-coverage.html\n \n ## Interpreting reports\n \n@@ -195,10 +181,10 @@ A typical use case for coverage analysis is test coverage. Rust's source-based c\n \n The following example (using the [`json5format`] crate, for demonstration purposes) show how to generate and analyze coverage results for all tests in a crate.\n \n-Since `cargo test` both builds and runs the tests, we set both the additional `RUSTFLAGS`, to add the `-Z instrument-coverage` flag, and `LLVM_PROFILE_FILE`, to set a custom filename for the raw profiling data generated during the test runs. Since there may be more than one test binary, apply `%m` in the filename pattern. This generates unique names for each test binary. (Otherwise, each executed test binary would overwrite the coverage results from the previous binary.)\n+Since `cargo test` both builds and runs the tests, we set both the additional `RUSTFLAGS`, to add the `-C instrument-coverage` flag, and `LLVM_PROFILE_FILE`, to set a custom filename for the raw profiling data generated during the test runs. Since there may be more than one test binary, apply `%m` in the filename pattern. This generates unique names for each test binary. (Otherwise, each executed test binary would overwrite the coverage results from the previous binary.)\n \n ```shell\n-$ RUSTFLAGS=\"-Z instrument-coverage\" \\\n+$ RUSTFLAGS=\"-C instrument-coverage\" \\\n     LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test --tests\n ```\n@@ -224,19 +210,18 @@ test result: ok. 31 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n You should have one or more `.profraw` files now, one for each test binary. Run the `profdata` tool to merge them:\n \n ```shell\n-$ cargo profdata -- merge \\\n-    -sparse json5format-*.profraw -o json5format.profdata\n+$ llvm-profdata merge -sparse json5format-*.profraw -o json5format.profdata\n ```\n \n Then run the `cov` tool, with the `profdata` file and all test binaries:\n \n ```shell\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     --use-color --ignore-filename-regex='/.cargo/registry' \\\n     --instr-profile=json5format.profdata \\\n     --object target/debug/deps/lib-30768f9c53506dc5 \\\n     --object target/debug/deps/json5format-fececd4653271682\n-$ cargo cov -- show \\\n+$ llvm-cov show \\\n     --use-color --ignore-filename-regex='/.cargo/registry' \\\n     --instr-profile=json5format.profdata \\\n     --object target/debug/deps/lib-30768f9c53506dc5 \\\n@@ -252,11 +237,11 @@ $ cargo cov -- show \\\n For `bash` users, one suggested way to automatically complete the `cov` command with the list of binaries is with a command like:\n \n ```bash\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     $( \\\n       for file in \\\n         $( \\\n-          RUSTFLAGS=\"-Z instrument-coverage\" \\\n+          RUSTFLAGS=\"-C instrument-coverage\" \\\n             cargo test --tests --no-run --message-format=json \\\n               | jq -r \"select(.profile.test == true) | .filenames[]\" \\\n               | grep -v dSYM - \\\n@@ -280,28 +265,27 @@ for each listed test binary.\n The previous examples run `cargo test` with `--tests`, which excludes doc tests.[^79417]\n \n To include doc tests in the coverage results, drop the `--tests` flag, and apply the\n-`-Z instrument-coverage` flag, and some doc-test-specific options in the\n-`RUSTDOCFLAGS` environment variable. (The `cargo profdata` command does not change.)\n+`-C instrument-coverage` flag, and some doc-test-specific options in the\n+`RUSTDOCFLAGS` environment variable. (The `llvm-profdata` command does not change.)\n \n ```bash\n-$ RUSTFLAGS=\"-Z instrument-coverage\" \\\n-  RUSTDOCFLAGS=\"-Z instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n+$ RUSTFLAGS=\"-C instrument-coverage\" \\\n+  RUSTDOCFLAGS=\"-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n   LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test\n-$ cargo profdata -- merge \\\n-    -sparse json5format-*.profraw -o json5format.profdata\n+$ llvm-profdata merge -sparse json5format-*.profraw -o json5format.profdata\n ```\n \n The `-Z unstable-options --persist-doctests` flag is required, to save the test binaries\n (with their coverage maps) for `llvm-cov`.\n \n ```bash\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     $( \\\n       for file in \\\n         $( \\\n-          RUSTFLAGS=\"-Z instrument-coverage\" \\\n-          RUSTDOCFLAGS=\"-Z instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n+          RUSTFLAGS=\"-C instrument-coverage\" \\\n+          RUSTDOCFLAGS=\"-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n             cargo test --no-run --message-format=json \\\n               | jq -r \"select(.profile.test == true) | .filenames[]\" \\\n               | grep -v dSYM - \\\n@@ -314,8 +298,8 @@ $ cargo cov -- report \\\n   --instr-profile=json5format.profdata --summary-only # and/or other options\n ```\n \n-> **Note**: The differences in this `cargo cov` command, compared with the version without\n-> doc tests, include:\n+> **Note**: The differences in this `llvm-cov` invocation, compared with the\n+> version without doc tests, include:\n \n -   The `cargo test ... --no-run` command is updated with the same environment variables\n     and flags used to _build_ the tests, _including_ the doc tests. (`LLVM_PROFILE_FILE`\n@@ -331,12 +315,12 @@ $ cargo cov -- report \\\n     [(#79417)](https://github.com/rust-lang/rust/issues/79417) that doc test coverage\n     generates incorrect source line numbers in `llvm-cov show` results.\n \n-## `-Z instrument-coverage=<options>`\n+## `-C instrument-coverage=<options>`\n \n--   `-Z instrument-coverage=all`: Instrument all functions, including unused functions and unused generics. (This is the same as `-Z instrument-coverage`, with no value.)\n--   `-Z instrument-coverage=except-unused-generics`: Instrument all functions except unused generics.\n--   `-Z instrument-coverage=except-unused-functions`: Instrument only used (called) functions and instantiated generic functions.\n--   `-Z instrument-coverage=off`: Do not instrument any functions. (This is the same as simply not including the `-Z instrument-coverage` option.)\n+-   `-C instrument-coverage=all`: Instrument all functions, including unused functions and unused generics. (This is the same as `-C instrument-coverage`, with no value.)\n+-   `-C instrument-coverage=off`: Do not instrument any functions. (This is the same as simply not including the `-C instrument-coverage` option.)\n+-   `-Zunstable-options -C instrument-coverage=except-unused-generics`: Instrument all functions except unused generics.\n+-   `-Zunstable-options -C instrument-coverage=except-unused-functions`: Instrument only used (called) functions and instantiated generic functions.\n \n ## Other references\n ", "previous_filename": "src/doc/unstable-book/src/compiler-flags/instrument-coverage.md"}, {"sha": "cb65978e0a07e6dd6a27a2b54d6cf985be4911fd", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71226d717a1fb57122e47e63b97295e703319cb0/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/71226d717a1fb57122e47e63b97295e703319cb0/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=71226d717a1fb57122e47e63b97295e703319cb0", "patch": "@@ -1,5 +0,0 @@\n-# `source-based-code-coverage`\n-\n-See compiler flag [`-Z instrument-coverage`].\n-\n-[`-z instrument-coverage`]: ./instrument-coverage.html"}, {"sha": "d16383723f56373a8f12a80ef75996e281e5438a", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -659,7 +659,7 @@ crate fn make_test(\n     } else {\n         let returns_result = everything_else.trim_end().ends_with(\"(())\");\n         // Give each doctest main function a unique name.\n-        // This is for example needed for the tooling around `-Z instrument-coverage`.\n+        // This is for example needed for the tooling around `-C instrument-coverage`.\n         let inner_fn_name = if let Some(test_id) = test_id {\n             format!(\"_doctest_main_{}\", test_id)\n         } else {\n@@ -684,7 +684,7 @@ crate fn make_test(\n         };\n         // Note on newlines: We insert a line/newline *before*, and *after*\n         // the doctest and adjust the `line_offset` accordingly.\n-        // In the case of `-Z instrument-coverage`, this means that the generated\n+        // In the case of `-C instrument-coverage`, this means that the generated\n         // inner `main` function spans from the doctest opening codeblock to the\n         // closing one. For example\n         // /// ``` <- start of the inner main"}, {"sha": "f3e65df6b14977d55045ea7567ac0f7727988f00", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1265,7 +1265,7 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n                         if out.is_empty() {\n                             write!(\n                                 &mut out,\n-                                \"<div class=\\\"notable\\\">Notable traits for {}</div>\\\n+                                \"<span class=\\\"notable\\\">Notable traits for {}</span>\\\n                              <code class=\\\"content\\\">\",\n                                 impl_.for_.print(cx)\n                             );\n@@ -1297,9 +1297,9 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n         out.insert_str(\n             0,\n             \"<span class=\\\"notable-traits\\\"><span class=\\\"notable-traits-tooltip\\\">\u24d8\\\n-            <div class=\\\"notable-traits-tooltiptext\\\"><span class=\\\"docblock\\\">\",\n+            <span class=\\\"notable-traits-tooltiptext\\\"><span class=\\\"docblock\\\">\",\n         );\n-        out.push_str(\"</code></span></div></span></span>\");\n+        out.push_str(\"</code></span></span></span></span>\");\n     }\n \n     out.into_inner()\n@@ -1431,7 +1431,7 @@ fn render_impl(\n                         .map(|item| format!(\"{}.{}\", item.type_(), name));\n                     write!(\n                         w,\n-                        \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n+                        \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                         id, item_type, in_trait_class,\n                     );\n                     render_rightside(w, cx, item, containing_item, render_mode);\n@@ -1446,15 +1446,15 @@ fn render_impl(\n                         render_mode,\n                     );\n                     w.write_str(\"</h4>\");\n-                    w.write_str(\"</div>\");\n+                    w.write_str(\"</section>\");\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let source_id = format!(\"{}.{}\", ItemType::AssocType, name);\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n                     w,\n-                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n+                    \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n@@ -1469,14 +1469,14 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</h4>\");\n-                w.write_str(\"</div>\");\n+                w.write_str(\"</section>\");\n             }\n             clean::AssocConstItem(ref ty, _) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n                     w,\n-                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n+                    \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n                 render_rightside(w, cx, item, containing_item, render_mode);\n@@ -1491,12 +1491,12 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</h4>\");\n-                w.write_str(\"</div>\");\n+                w.write_str(\"</section>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<div id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n+                write!(w, \"<section id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                 assoc_type(\n@@ -1509,7 +1509,7 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</h4>\");\n-                w.write_str(\"</div>\");\n+                w.write_str(\"</section>\");\n             }\n             clean::StrippedItem(..) => return,\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name),\n@@ -1668,21 +1668,23 @@ fn render_rightside(\n         RenderMode::ForDeref { .. } => (None, None),\n     };\n \n-    write!(w, \"<div class=\\\"rightside\\\">\");\n+    let mut rightside = Buffer::new();\n     let has_stability = render_stability_since_raw(\n-        w,\n+        &mut rightside,\n         item.stable_since(tcx),\n         const_stability,\n         containing_item.stable_since(tcx),\n         const_stable_since,\n     );\n-    let mut tmp_buf = Buffer::empty_from(w);\n-    write_srclink(cx, item, &mut tmp_buf);\n-    if has_stability && !tmp_buf.is_empty() {\n-        w.write_str(\" \u00b7 \");\n+    let mut srclink = Buffer::empty_from(w);\n+    write_srclink(cx, item, &mut srclink);\n+    if has_stability && !srclink.is_empty() {\n+        rightside.write_str(\" \u00b7 \");\n+    }\n+    rightside.push_buffer(srclink);\n+    if !rightside.is_empty() {\n+        write!(w, \"<span class=\\\"rightside\\\">{}</span>\", rightside.into_inner());\n     }\n-    w.push_buffer(tmp_buf);\n-    w.write_str(\"</div>\");\n }\n \n pub(crate) fn render_impl_summary(\n@@ -1713,7 +1715,7 @@ pub(crate) fn render_impl_summary(\n     } else {\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n-    write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n+    write!(w, \"<section id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n     render_rightside(w, cx, &i.impl_item, containing_item, RenderMode::Normal);\n     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n     write!(w, \"<h3 class=\\\"code-header in-band\\\">\");\n@@ -1737,11 +1739,11 @@ pub(crate) fn render_impl_summary(\n     let is_trait = i.inner_impl().trait_.is_some();\n     if is_trait {\n         if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-            write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n+            write!(w, \"<span class=\\\"item-info\\\">{}</span>\", portability);\n         }\n     }\n \n-    w.write_str(\"</div>\");\n+    w.write_str(\"</section>\");\n }\n \n fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n@@ -1802,19 +1804,9 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n     // to navigate the documentation (though slightly inefficiently).\n \n     if !it.is_mod() {\n-        buffer.write_str(\"<h2 class=\\\"location\\\">In \");\n-        for (i, name) in cx.current.iter().take(parentlen).enumerate() {\n-            if i > 0 {\n-                buffer.write_str(\"::<wbr>\");\n-            }\n-            write!(\n-                buffer,\n-                \"<a href=\\\"{}index.html\\\">{}</a>\",\n-                &cx.root_path()[..(cx.current.len() - i - 1) * 3],\n-                *name\n-            );\n-        }\n-        buffer.write_str(\"</h2>\");\n+        let path: String = cx.current.iter().map(|s| s.as_str()).intersperse(\"::\").collect();\n+\n+        write!(buffer, \"<h2 class=\\\"location\\\"><a href=\\\"index.html\\\">In {}</a></h2>\", path);\n     }\n \n     // Sidebar refers to the enclosing module, not this module."}, {"sha": "a431bb63f63e00fe8c9f5077fff9fda124b33863", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1336,6 +1336,7 @@ h3.variant {\n \tmargin-bottom: 13px;\n \tfont-size: 1.1875rem;\n \tfont-weight: 600;\n+\tdisplay: block;\n }\n \n .notable-traits .docblock code.content{"}, {"sha": "09403bb3a7926675c9134740abf8a073728b196f", "filename": "src/test/mir-opt/coverage_graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,9 +1,9 @@\n-// Test that `-Z instrument-coverage` with `-Z dump-mir-graphviz` generates a graphviz (.dot file)\n+// Test that `-C instrument-coverage` with `-Z dump-mir-graphviz` generates a graphviz (.dot file)\n // rendering of the `BasicCoverageBlock` coverage control flow graph, with counters and\n // expressions.\n \n // needs-profiler-support\n-// compile-flags: -Z instrument-coverage -Z dump-mir-graphviz\n+// compile-flags: -C instrument-coverage -Z dump-mir-graphviz\n // EMIT_MIR coverage_graphviz.main.InstrumentCoverage.0.dot\n // EMIT_MIR coverage_graphviz.bar.InstrumentCoverage.0.dot\n fn main() {"}, {"sha": "a748f2c5ccc9b54346df5557be2e3fe9658349f7", "filename": "src/test/mir-opt/instrument_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,9 +1,9 @@\n-// Test that `-Z instrument-coverage` injects Coverage statements. The Coverage Counter statements\n+// Test that `-C instrument-coverage` injects Coverage statements. The Coverage Counter statements\n // are later converted into LLVM instrprof.increment intrinsics, during codegen.\n \n // needs-profiler-support\n // ignore-windows\n-// compile-flags: -Z instrument-coverage --remap-path-prefix={{src-base}}=/the/src\n+// compile-flags: -C instrument-coverage --remap-path-prefix={{src-base}}=/the/src\n \n // EMIT_MIR instrument_coverage.main.InstrumentCoverage.diff\n // EMIT_MIR instrument_coverage.bar.InstrumentCoverage.diff"}, {"sha": "fbe0a5cb1bb8cac13f2c93e09aebf1e00c92f0cb", "filename": "src/test/run-make-fulldeps/coverage-llvmir/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -57,7 +57,7 @@ all: test_llvm_ir\n test_llvm_ir:\n \t# Compile the test program with non-experimental coverage instrumentation, and generate LLVM IR\n \t$(RUSTC) $(BASEDIR)/testprog.rs \\\n-\t\t\t-Zinstrument-coverage \\\n+\t\t\t-Cinstrument-coverage \\\n \t\t\t--emit=llvm-ir\n \n \tcat \"$(TMPDIR)\"/testprog.ll | \\"}, {"sha": "1e2ecc2fbb1cc5f8e6e5748d1a630abaaef95c31", "filename": "src/test/run-make-fulldeps/coverage-llvmir/filecheck.testprog.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,5 +1,5 @@\n # Check for metadata, variables, declarations, and function definitions injected\n-# into LLVM IR when compiling with -Zinstrument-coverage.\n+# into LLVM IR when compiling with -Cinstrument-coverage.\n \n WINDOWS:      $__llvm_profile_runtime_user = comdat any\n "}, {"sha": "78723e78e772f52f496b5e0c7733f48161c2d7c5", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -81,13 +81,13 @@ endif\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/lib/$@.rs ) \\\n-\t\t\t--crate-type rlib -Zinstrument-coverage\n+\t\t\t--crate-type rlib -Cinstrument-coverage\n \n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n-\t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage\n+\t\t\t-L \"$(TMPDIR)\" -Cinstrument-coverage\n \n \t# Run it in order to generate some profiling data,\n \t# with `LLVM_PROFILE_FILE=<profdata_file>` environment variable set to\n@@ -109,7 +109,7 @@ endif\n \tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p-%m.profraw \\\n \t\t\t$(RUSTDOC) --crate-name workaround_for_79771 --test $(SOURCEDIR)/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n-\t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage \\\n+\t\t\t-L \"$(TMPDIR)\" -Cinstrument-coverage \\\n \t\t\t-Z unstable-options --persist-doctests=$(TMPDIR)/rustdoc-$@\n \n \t# Postprocess the profiling data so it can be used by the llvm-cov tool"}, {"sha": "1aa4a22c33e1803f7d9b55e719f8ac37b7d9a8b6", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.issue-85461.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -11,7 +11,7 @@\n    10|      1|}\n \n ../coverage/lib/inline_always_with_dead_code.rs:\n-    1|       |// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n+    1|       |// compile-flags: -Cinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n     2|       |\n     3|       |#![allow(dead_code)]\n     4|       |"}, {"sha": "55a49548cb5e03f9a6d749be26a4fcbef8cbd558", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -125,7 +125,7 @@\n    78|       |// generic functions with:\n    79|       |//\n    80|       |// ```shell\n-   81|       |// $ `rustc -Z instrument-coverage=except-unused-generics ...`\n+   81|       |// $ `rustc -Zunstable-options -C instrument-coverage=except-unused-generics ...`\n    82|       |// ```\n    83|       |//\n    84|       |// Even though this function is used by `uses_crate.rs` (and"}, {"sha": "2b21dee6ccff63e8c461e3e341cd54852df712fe", "filename": "src/test/run-make-fulldeps/coverage/lib/inline_always_with_dead_code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n+// compile-flags: -Cinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n \n #![allow(dead_code)]\n "}, {"sha": "8b8b1f7f351fd7d9a1905562450313b2354efaaa", "filename": "src/test/run-make-fulldeps/coverage/lib/used_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -78,7 +78,7 @@ fn use_this_lib_crate() {\n // generic functions with:\n //\n // ```shell\n-// $ `rustc -Z instrument-coverage=except-unused-generics ...`\n+// $ `rustc -Zunstable-options -C instrument-coverage=except-unused-generics ...`\n // ```\n //\n // Even though this function is used by `uses_crate.rs` (and"}, {"sha": "0277501de097f956517d1ae6c14d33d89ea0e30f", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -77,12 +77,12 @@ struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n \n impl Foo {\n     // @has async_fn/struct.Foo.html\n-    // @has - '//div[@class=\"method has-srclink\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    // @has - '//*[@class=\"method has-srclink\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n     pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n     // taken from `tokio` as an example of a method that was particularly bad before\n-    // @has - '//div[@class=\"method has-srclink\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n+    // @has - '//*[@class=\"method has-srclink\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n     pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()> {}\n-    // @has - '//div[@class=\"method has-srclink\"]' \"pub async fn mut_self(&mut self)\"\n+    // @has - '//*[@class=\"method has-srclink\"]' \"pub async fn mut_self(&mut self)\"\n     pub async fn mut_self(&mut self) {}\n }\n "}, {"sha": "a047c76b637d4cdf6a2c69d58e104e6bcf8dea20", "filename": "src/test/rustdoc/auto_aliases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fauto_aliases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fauto_aliases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauto_aliases.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,6 +1,6 @@\n #![feature(auto_traits)]\n \n-// @has auto_aliases/trait.Bar.html '//div[@data-aliases=\"auto_aliases::Foo\"]' 'impl Bar for Foo'\n+// @has auto_aliases/trait.Bar.html '//*[@data-aliases=\"auto_aliases::Foo\"]' 'impl Bar for Foo'\n pub struct Foo;\n \n pub auto trait Bar {}"}, {"sha": "4c686730b1152b1fd877601e9f39d83cc724106b", "filename": "src/test/rustdoc/blanket-reexport-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.S.html '//div[@id=\"impl-Into%3CU%3E\"]//h3[@class=\"code-header in-band\"]' 'impl<T, U> Into<U> for T'\n+// @has foo/struct.S.html '//*[@id=\"impl-Into%3CU%3E\"]//h3[@class=\"code-header in-band\"]' 'impl<T, U> Into<U> for T'\n pub struct S2 {}\n mod m {\n     pub struct S {}"}, {"sha": "e3f5d074783044cfe8b615d3b25301346d0a3767", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -49,19 +49,19 @@ pub const unsafe fn bar_not_gated() -> u32 { 42 }\n pub struct Foo;\n \n impl Foo {\n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/h4[@class=\"code-header\"]' 'pub fn gated() -> u32'\n+    // @has 'foo/struct.Foo.html' '//*[@id=\"method.gated\"]/h4[@class=\"code-header\"]' 'pub fn gated() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const fn gated() -> u32 { 42 }\n \n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated_unsafe\"]/h4[@class=\"code-header\"]' 'pub unsafe fn gated_unsafe() -> u32'\n+    // @has 'foo/struct.Foo.html' '//*[@id=\"method.gated_unsafe\"]/h4[@class=\"code-header\"]' 'pub unsafe fn gated_unsafe() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const unsafe fn gated_unsafe() -> u32 { 42 }\n \n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.stable_impl\"]/h4[@class=\"code-header\"]' 'pub const fn stable_impl() -> u32'\n+    // @has 'foo/struct.Foo.html' '//*[@id=\"method.stable_impl\"]/h4[@class=\"code-header\"]' 'pub const fn stable_impl() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"rust1\", since = \"1.2.0\")]"}, {"sha": "e54f9a57ae4ee8abd1ed97139d7dbe5a340e75f0", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -7,7 +7,7 @@ pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }\n \n-// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//div/h3[@class=\"code-header in-band\"]' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n+// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header in-band\"]' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n impl Add for Simd<u8, 16> {\n     type Output = Self;\n "}, {"sha": "4279de91f56c1420bab481156484d54cdd9fe939", "filename": "src/test/rustdoc/const-generics/const-generic-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -5,7 +5,7 @@ pub trait Array {\n }\n \n // @has foo/trait.Array.html\n-// @has - '//div[@class=\"impl has-srclink\"]' 'impl<T, const N: usize> Array for [T; N]'\n-impl <T, const N: usize> Array for [T; N] {\n+// @has - '//*[@class=\"impl has-srclink\"]' 'impl<T, const N: usize> Array for [T; N]'\n+impl<T, const N: usize> Array for [T; N] {\n     type Item = T;\n }"}, {"sha": "fc3a2731089eb406381f6ff37add7f4555b02f87", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -36,7 +36,7 @@ pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n-// @has foo/struct.Foo.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n+// @has foo/struct.Foo.html '//*[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n impl<const M: usize> Foo<M> where u8: Trait<M> {\n     // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n     pub const FOO_ASSOC: usize = M + 13;\n@@ -47,7 +47,7 @@ impl<const M: usize> Foo<M> where u8: Trait<M> {\n     }\n }\n \n-// @has foo/struct.Bar.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Bar<u8, M>'\n+// @has foo/struct.Bar.html '//*[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Bar<u8, M>'\n impl<const M: usize> Bar<u8, M> {\n     // @has - '//*[@id=\"method.hey\"]' \\\n     //      'pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N>'"}, {"sha": "a3ef084165a8a580213d830c74f6e4360d79576d", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,7 +1,5 @@\n #![allow(incomplete_features)]\n-\n #![feature(adt_const_params)]\n-\n #![crate_name = \"foo\"]\n \n #[derive(PartialEq, Eq)]\n@@ -11,20 +9,20 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//div[@id=\"impl-Send\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//div[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-Send\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }\n \n-// @has foo/struct.VSet.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Sorted }>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Sorted }>'\n impl<T> VSet<T, { Order::Sorted }> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n     }\n }\n \n-// @has foo/struct.VSet.html '//div[@id=\"impl-1\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Unsorted }>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-1\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, { Order::Unsorted }>'\n impl<T> VSet<T, { Order::Unsorted }> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n@@ -33,7 +31,7 @@ impl<T> VSet<T, { Order::Unsorted }> {\n \n pub struct Escape<const S: &'static str>;\n \n-// @has foo/struct.Escape.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl Escape<r#\"<script>alert(\"Escape\");</script>\"#>'\n+// @has foo/struct.Escape.html '//*[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl Escape<r#\"<script>alert(\"Escape\");</script>\"#>'\n impl Escape<r#\"<script>alert(\"Escape\");</script>\"#> {\n     pub fn f() {}\n }"}, {"sha": "d18f404212fa1bc9b63045b15022c6ca11c50047", "filename": "src/test/rustdoc/empty-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fempty-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impls.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,19 +1,19 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Foo.html\n-// @has - '//div[@id=\"synthetic-implementations-list\"]/div[@id=\"impl-Send\"]' 'impl Send for Foo'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]/*[@id=\"impl-Send\"]' 'impl Send for Foo'\n pub struct Foo;\n \n pub trait EmptyTrait {}\n \n-// @has - '//div[@id=\"trait-implementations-list\"]/div[@id=\"impl-EmptyTrait\"]' 'impl EmptyTrait for Foo'\n+// @has - '//div[@id=\"trait-implementations-list\"]/*[@id=\"impl-EmptyTrait\"]' 'impl EmptyTrait for Foo'\n impl EmptyTrait for Foo {}\n \n pub trait NotEmpty {\n     fn foo(&self);\n }\n \n-// @has - '//div[@id=\"trait-implementations-list\"]/details/summary/div[@id=\"impl-NotEmpty\"]' 'impl NotEmpty for Foo'\n+// @has - '//div[@id=\"trait-implementations-list\"]/details/summary/*[@id=\"impl-NotEmpty\"]' 'impl NotEmpty for Foo'\n impl NotEmpty for Foo {\n     fn foo(&self) {}\n }"}, {"sha": "9f8b0277e76b0a7c8dd2329ae3a687332a3c6e38", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -2,5 +2,5 @@\n \n // This test ensures that the [src] link is present on traits items.\n \n-// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"source\"\n+// @has foo/trait.Iterator.html '//*[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"source\"\n pub use std::iter::Iterator;"}, {"sha": "93cf16346b6f7fcd50c3ba887c513128d6c58b38", "filename": "src/test/rustdoc/extern-default-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fextern-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fextern-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-default-method.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -4,6 +4,6 @@\n extern crate rustdoc_extern_default_method as ext;\n \n // @count extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]' 1\n-// @has extern_default_method/struct.Struct.html '//div[@id=\"method.provided\"]//a[@class=\"fnname\"]/@href' #method.provided\n-// @has extern_default_method/struct.Struct.html '//div[@id=\"method.provided\"]//a[@class=\"anchor\"]/@href' #method.provided\n+// @has extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]//a[@class=\"fnname\"]/@href' #method.provided\n+// @has extern_default_method/struct.Struct.html '//*[@id=\"method.provided\"]//a[@class=\"anchor\"]/@href' #method.provided\n pub use ext::Struct;"}, {"sha": "0f6cba93f956923e0b91bde31efc39e5f9b2bce3", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -2,10 +2,10 @@\n \n use std::fmt;\n \n-// @!has foo/struct.Bar.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n+// @!has foo/struct.Bar.html '//*[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n pub struct Bar;\n \n-// @has foo/struct.Foo.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n+// @has foo/struct.Foo.html '//*[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n pub struct Foo;\n // @has foo/struct.Foo.html '//div[@class=\"sidebar-links\"]/a[@href=\"#impl-ToString\"]' 'ToString'\n "}, {"sha": "490d7e51e321d5663a4398c99ad35eaa3a4d3d4c", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -5,12 +5,14 @@ pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//div[@id='implementors-list']//div[@id='impl-MyTrait']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for T where T: Debug\"\n-impl<T> MyTrait for T where T: fmt::Debug {\n+// @has - \"//div[@id='implementors-list']//*[@id='impl-MyTrait']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for T where T: Debug\"\n+impl<T> MyTrait for T\n+where\n+    T: fmt::Debug,\n+{\n     fn my_string(&self) -> String {\n         format!(\"{:?}\", self)\n     }\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "1e4791e01253df01edcb4aa0c7fdaa5816c6d812", "filename": "src/test/rustdoc/issue-33302.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33302.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,7 +1,6 @@\n // Ensure constant and array length values are not taken from source\n // code, which wreaks havoc with macros.\n \n-\n macro_rules! make {\n     ($n:expr) => {\n         pub struct S;\n@@ -23,30 +22,30 @@ macro_rules! make {\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//div[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n+        //        '//*[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C\"]' 'const C: [i32; 16]'\n         // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n         impl T<[i32; ($n * $n)]> for S {\n             const C: [i32; ($n * $n)] = [0; ($n * $n)];\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//div[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n+        //        '//*[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C-1\"]' 'const C: (i32,)'\n         // @has - '//*[@id=\"associatedconstant.D-1\"]' 'const D: i32'\n         impl T<(i32,)> for S {\n             const C: (i32,) = ($n,);\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//div[@class=\"impl has-srclink\"]' 'impl T<(i32, i32)> for S'\n+        //        '//*[@class=\"impl has-srclink\"]' 'impl T<(i32, i32)> for S'\n         // @has - '//*[@id=\"associatedconstant.C-2\"]' 'const C: (i32, i32)'\n         // @has - '//*[@id=\"associatedconstant.D-2\"]' 'const D: i32'\n         impl T<(i32, i32)> for S {\n             const C: (i32, i32) = ($n, $n);\n             const D: i32 = ($n / $n);\n         }\n-    }\n+    };\n }\n \n make!(4);"}, {"sha": "c68ffd52186482da0ffe81389f01305b5522ca09", "filename": "src/test/rustdoc/issue-53812.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53812.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,5 +1,4 @@\n-pub trait MyIterator {\n-}\n+pub trait MyIterator {}\n \n pub struct MyStruct<T>(T);\n \n@@ -13,9 +12,9 @@ macro_rules! array_impls {\n }\n \n // @has issue_53812/trait.MyIterator.html\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][1]' 'MyStruct<[T; 0]>'\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][2]' 'MyStruct<[T; 1]>'\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][3]' 'MyStruct<[T; 2]>'\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][4]' 'MyStruct<[T; 3]>'\n-// @has - '//*[@id=\"implementors-list\"]/div[@class=\"impl has-srclink\"][5]' 'MyStruct<[T; 10]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][1]' 'MyStruct<[T; 0]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][2]' 'MyStruct<[T; 1]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][3]' 'MyStruct<[T; 2]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][4]' 'MyStruct<[T; 3]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][5]' 'MyStruct<[T; 10]>'\n array_impls! { 10 3 2 1 0 }"}, {"sha": "ef15946ec50459ea288ad38506dc365de751d2d5", "filename": "src/test/rustdoc/issue-86620.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fissue-86620.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fissue-86620.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-86620.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -4,6 +4,6 @@ extern crate issue_86620_1;\n \n use issue_86620_1::*;\n \n-// @!has issue_86620/struct.S.html '//div[@id=\"method.vzip\"]//a[@class=\"fnname\"]/@href' #tymethod.vzip\n-// @has issue_86620/struct.S.html '//div[@id=\"method.vzip\"]//a[@class=\"anchor\"]/@href' #method.vzip\n+// @!has issue_86620/struct.S.html '//*[@id=\"method.vzip\"]//a[@class=\"fnname\"]/@href' #tymethod.vzip\n+// @has issue_86620/struct.S.html '//*[@id=\"method.vzip\"]//a[@class=\"anchor\"]/@href' #method.vzip\n pub struct S;"}, {"sha": "28adff84c7032c91aca8ad25ec776d7b024272f9", "filename": "src/test/rustdoc/primitive/primitive-generic-impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,8 +1,7 @@\n #![feature(rustdoc_internals)]\n-\n #![crate_name = \"foo\"]\n \n-// @has foo/primitive.i32.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n+// @has foo/primitive.i32.html '//*[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n \n #[doc(primitive = \"i32\")]\n /// Some useless docs, wouhou!"}, {"sha": "63e486b8834e41f96846226837f2f41b908ca219", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -6,9 +6,9 @@\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n-// @has - '//div[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header in-band\"]' 'impl Foo for u32'\n+// @has - '//*[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header in-band\"]' 'impl Foo for u32'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n-// @has - '//div[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header in-band\"]' \"impl<'a> Foo for &'a str\"\n+// @has - '//*[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header in-band\"]' \"impl<'a> Foo for &'a str\"\n pub trait Foo {}\n \n impl Foo for u32 {}"}, {"sha": "252a81260369ab8898c197d3d3228f005b7eabdf", "filename": "src/test/rustdoc/sized_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsized_trait.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,17 +1,17 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Bar.html\n-// @!has - '//div[@id=\"impl-Sized\"]'\n+// @!has - '//*[@id=\"impl-Sized\"]'\n pub struct Bar {\n     a: u16,\n }\n \n // @has foo/struct.Foo.html\n-// @!has - '//div[@id=\"impl-Sized\"]'\n+// @!has - '//*[@id=\"impl-Sized\"]'\n pub struct Foo<T: ?Sized>(T);\n \n // @has foo/struct.Unsized.html\n-// @has - '//div[@id=\"impl-Sized\"]//h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n+// @has - '//*[@id=\"impl-Sized\"]//h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "14580373b3b051284d3eb844c9c26a989508f98c", "filename": "src/test/rustdoc/source-version-separator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsource-version-separator.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -6,7 +6,7 @@\n // @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0 \u00b7 source \u00b7 '\n #[stable(feature = \"bar\", since = \"1.0\")]\n pub trait Bar {\n-    // @has - '//div[@id=\"tymethod.foo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n+    // @has - '//*[@id=\"tymethod.foo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n     #[stable(feature = \"foobar\", since = \"3.0\")]\n     fn foo();\n }\n@@ -19,7 +19,7 @@ pub trait Bar {\n pub struct Foo;\n \n impl Foo {\n-    // @has - '//div[@id=\"method.foofoo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n+    // @has - '//*[@id=\"method.foofoo\"]/*[@class=\"rightside\"]' '3.0 \u00b7 source'\n     #[stable(feature = \"foobar\", since = \"3.0\")]\n     pub fn foofoo() {}\n }"}, {"sha": "5245789212d8c9e777f6984e7e999eea18415c81", "filename": "src/test/rustdoc/spotlight-from-dependency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -3,7 +3,7 @@\n use std::iter::Iterator;\n \n // @has foo/struct.Odd.html\n-// @has - '//div[@id=\"method.new\"]//span[@class=\"notable-traits\"]//code/span' 'impl Iterator for Odd'\n+// @has - '//*[@id=\"method.new\"]//span[@class=\"notable-traits\"]//code/span' 'impl Iterator for Odd'\n pub struct Odd {\n     current: usize,\n }"}, {"sha": "0f461a1185b6e1c4868e21cacc5f2cc126c6007e", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,12 +1,12 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Unsized.html\n-// @has - '//div[@id=\"impl-Sized\"]/h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n-// @!has - '//div[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' 'source'\n-// @has - '//div[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl Sync for Unsized'\n-// @!has - '//div[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' 'source'\n-// @has - '//div[@id=\"impl-Any\"]/h3[@class=\"code-header in-band\"]' 'impl<T> Any for T'\n-// @has - '//div[@id=\"impl-Any\"]//a[@class=\"srclink\"]' 'source'\n+// @has - '//*[@id=\"impl-Sized\"]/h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n+// @!has - '//*[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' 'source'\n+// @has - '//*[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl Sync for Unsized'\n+// @!has - '//*[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' 'source'\n+// @has - '//*[@id=\"impl-Any\"]/h3[@class=\"code-header in-band\"]' 'impl<T> Any for T'\n+// @has - '//*[@id=\"impl-Any\"]//a[@class=\"srclink\"]' 'source'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "b5a97c610daeac7ca9efe9575efbdf6add7faf16", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -7,52 +7,52 @@ pub trait MyTrait {\n }\n \n impl MyTrait for String {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-1\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-1\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-1\n     type Assoc = ();\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-1\n     const VALUE: u32 = 5;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-1\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-1\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-1\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-1\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-1\n     fn defaulted_override(&self) {}\n }\n \n impl MyTrait for Vec<u8> {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-2\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-2\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-2\n     type Assoc = ();\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-2\n     const VALUE: u32 = 5;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-1\"]//a[@class=\"anchor\"]/@href' #method.trait_function-1\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.trait_function-1\"]//a[@class=\"anchor\"]/@href' #method.trait_function-1\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-2\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-2\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-2\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-2\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"method.defaulted_override-2\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-2\n     fn defaulted_override(&self) {}\n }\n \n impl MyTrait for MyStruct {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"associatedtype\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedtype.Assoc\"]//a[@class=\"associatedtype\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n     type Assoc = bool;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//*[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n     const VALUE: u32 = 20;\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n     fn defaulted_override(&self) {}\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted\"]//a[@class=\"anchor\"]/@href' #method.defaulted\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//*[@id=\"method.defaulted\"]//a[@class=\"anchor\"]/@href' #method.defaulted\n }\n \n pub struct MyStruct;"}, {"sha": "ae866deba1ef039e488b75b5863f4d8a8e4d5b8e", "filename": "src/test/rustdoc/version-separator-without-source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -16,8 +16,8 @@ pub fn foo() {}\n pub struct Bar;\n \n impl Bar {\n-    // @has - '//div[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0'\n-    // @!has - '//div[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0 \u00b7'\n+    // @has - '//*[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0'\n+    // @!has - '//*[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0 \u00b7'\n     #[stable(feature = \"foobar\", since = \"2.0\")]\n     pub fn bar() {}\n }"}, {"sha": "3150a8ea05f41f321dde58bbe2dded183deead48", "filename": "src/test/rustdoc/where-clause-order.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,15 +1,19 @@\n #![crate_name = \"foo\"]\n \n pub trait SomeTrait<Rhs = Self>\n-where Rhs: ?Sized\n-{}\n+where\n+    Rhs: ?Sized,\n+{\n+}\n \n // @has 'foo/trait.SomeTrait.html'\n-// @has - \"//div[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n-impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where\n+// @has - \"//*[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n+impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)\n+where\n     A: PartialOrd<A> + PartialEq<A>,\n     B: PartialOrd<B> + PartialEq<B>,\n     C: PartialOrd<C> + PartialEq<C>,\n     D: PartialOrd<D> + PartialEq<D>,\n-    E: PartialOrd<E> + PartialEq<E> + ?Sized\n-{}\n+    E: PartialOrd<E> + PartialEq<E> + ?Sized,\n+{\n+}"}, {"sha": "9655108876f19f0c8a937ef96c0ca170361e540b", "filename": "src/test/ui/issues/issue-85461.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55c8362de32be1530b2441c3e3a51e73edeb21/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs?ref=4c55c8362de32be1530b2441c3e3a51e73edeb21", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 --crate-type dylib -Copt-level=0\n+// compile-flags: -Cinstrument-coverage -Ccodegen-units=4 --crate-type dylib -Copt-level=0\n // build-pass\n // needs-profiler-support\n "}]}