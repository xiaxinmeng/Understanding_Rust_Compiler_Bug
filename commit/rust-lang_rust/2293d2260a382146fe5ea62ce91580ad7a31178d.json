{"sha": "2293d2260a382146fe5ea62ce91580ad7a31178d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOTNkMjI2MGEzODIxNDZmZTVlYTYyY2U5MTU4MGFkN2EzMTE3OGQ=", "commit": {"author": {"name": "benaryorg", "email": "binary@benary.org", "date": "2019-03-03T14:21:52Z"}, "committer": {"name": "benaryorg", "email": "binary@benary.org", "date": "2019-03-03T19:53:50Z"}, "message": "race condition in thread local storage example\n\nThe example had a potential race condition that would still pass the test.\nIf the thread which was supposed to modify it's own thread local was slower than the instruction to\nmodify in the main thread, then the test would pass even in case of a failure.\nThis is would be minor if the child thread was waited for since it check using an `assert_eq` for\nthe same thing, but vice versa.\nHowever, if the `assert_eq` failed this would trigger a panic, which is not at all caught by the\nexample since the thread is not waited on.\n\nSigned-off-by: benaryorg <binary@benary.org>", "tree": {"sha": "2b8e0151321cc14443046e40859cdeaa93de03ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b8e0151321cc14443046e40859cdeaa93de03ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2293d2260a382146fe5ea62ce91580ad7a31178d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRmaFQ3Sl2IQ3+ka0R6BnJOWwDlRgUCXHwwzgAKCRB6BnJOWwDl\nRsPzAPwJ/BwtCcFXVZGNIBdDvna73e/09hee9TlrZhYyvGklGwD/ehvvC2P1/Jwj\nIja9WLzJBI36yYCQJUpQqlmz0Vrnvwo=\n=rJir\n-----END PGP SIGNATURE-----", "payload": "tree 2b8e0151321cc14443046e40859cdeaa93de03ac\nparent f565cdd6144a72dc81032081d7790f38a4af26b8\nauthor benaryorg <binary@benary.org> 1551622912 +0100\ncommitter benaryorg <binary@benary.org> 1551642830 +0100\n\nrace condition in thread local storage example\n\nThe example had a potential race condition that would still pass the test.\nIf the thread which was supposed to modify it's own thread local was slower than the instruction to\nmodify in the main thread, then the test would pass even in case of a failure.\nThis is would be minor if the child thread was waited for since it check using an `assert_eq` for\nthe same thing, but vice versa.\nHowever, if the `assert_eq` failed this would trigger a panic, which is not at all caught by the\nexample since the thread is not waited on.\n\nSigned-off-by: benaryorg <binary@benary.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2293d2260a382146fe5ea62ce91580ad7a31178d", "html_url": "https://github.com/rust-lang/rust/commit/2293d2260a382146fe5ea62ce91580ad7a31178d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2293d2260a382146fe5ea62ce91580ad7a31178d/comments", "author": {"login": "benaryorg", "id": 6145260, "node_id": "MDQ6VXNlcjYxNDUyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6145260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benaryorg", "html_url": "https://github.com/benaryorg", "followers_url": "https://api.github.com/users/benaryorg/followers", "following_url": "https://api.github.com/users/benaryorg/following{/other_user}", "gists_url": "https://api.github.com/users/benaryorg/gists{/gist_id}", "starred_url": "https://api.github.com/users/benaryorg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benaryorg/subscriptions", "organizations_url": "https://api.github.com/users/benaryorg/orgs", "repos_url": "https://api.github.com/users/benaryorg/repos", "events_url": "https://api.github.com/users/benaryorg/events{/privacy}", "received_events_url": "https://api.github.com/users/benaryorg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "benaryorg", "id": 6145260, "node_id": "MDQ6VXNlcjYxNDUyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6145260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benaryorg", "html_url": "https://github.com/benaryorg", "followers_url": "https://api.github.com/users/benaryorg/followers", "following_url": "https://api.github.com/users/benaryorg/following{/other_user}", "gists_url": "https://api.github.com/users/benaryorg/gists{/gist_id}", "starred_url": "https://api.github.com/users/benaryorg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benaryorg/subscriptions", "organizations_url": "https://api.github.com/users/benaryorg/orgs", "repos_url": "https://api.github.com/users/benaryorg/repos", "events_url": "https://api.github.com/users/benaryorg/events{/privacy}", "received_events_url": "https://api.github.com/users/benaryorg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f565cdd6144a72dc81032081d7790f38a4af26b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f565cdd6144a72dc81032081d7790f38a4af26b8", "html_url": "https://github.com/rust-lang/rust/commit/f565cdd6144a72dc81032081d7790f38a4af26b8"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "7ad6b124e3a384c1f57543d2230e4b0f513421de", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2293d2260a382146fe5ea62ce91580ad7a31178d/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2293d2260a382146fe5ea62ce91580ad7a31178d/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=2293d2260a382146fe5ea62ce91580ad7a31178d", "patch": "@@ -40,13 +40,16 @@ use crate::mem;\n /// });\n ///\n /// // each thread starts out with the initial value of 1\n-/// thread::spawn(move|| {\n+/// let t = thread::spawn(move|| {\n ///     FOO.with(|f| {\n ///         assert_eq!(*f.borrow(), 1);\n ///         *f.borrow_mut() = 3;\n ///     });\n /// });\n ///\n+/// // wait for the thread to complete and bail out on panic\n+/// t.join().unwrap();\n+///\n /// // we retain our original value of 2 despite the child thread\n /// FOO.with(|f| {\n ///     assert_eq!(*f.borrow(), 2);"}]}