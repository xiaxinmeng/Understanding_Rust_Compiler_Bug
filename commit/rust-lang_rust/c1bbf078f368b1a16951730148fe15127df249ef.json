{"sha": "c1bbf078f368b1a16951730148fe15127df249ef", "node_id": "C_kwDOAAsO6NoAKGMxYmJmMDc4ZjM2OGIxYTE2OTUxNzMwMTQ4ZmUxNTEyN2RmMjQ5ZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-27T14:02:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-27T14:02:02Z"}, "message": "Auto merge of #2040 - RalfJung:pnvi, r=RalfJung\n\nensure that -Zmiri-check-number-validity detects integers with provenance\n\nThis actually currently *fails* for the non-array case; I will have to fix this on the rustc side.", "tree": {"sha": "e68563e40b6367340244ed74126dbc019a889db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68563e40b6367340244ed74126dbc019a889db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1bbf078f368b1a16951730148fe15127df249ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bbf078f368b1a16951730148fe15127df249ef", "html_url": "https://github.com/rust-lang/rust/commit/c1bbf078f368b1a16951730148fe15127df249ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1bbf078f368b1a16951730148fe15127df249ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80fe3b12460a0d86881e90eecebb94eaf921b0f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/80fe3b12460a0d86881e90eecebb94eaf921b0f2", "html_url": "https://github.com/rust-lang/rust/commit/80fe3b12460a0d86881e90eecebb94eaf921b0f2"}, {"sha": "f3c35d51050a1d89da252734ff5fc8b9ba0b9937", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c35d51050a1d89da252734ff5fc8b9ba0b9937", "html_url": "https://github.com/rust-lang/rust/commit/f3c35d51050a1d89da252734ff5fc8b9ba0b9937"}], "stats": {"total": 164, "additions": 96, "deletions": 68}, "files": [{"sha": "2497974aa7ea1cc5900247bfc3b979bc99aaad11", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -1 +1 @@\n-d2df372bca13bb60979c909660e69f2451630e81\n+100f12d17026fccfc5d80527b5976dd66b228b13"}, {"sha": "9c763149ffa21f0e527158b55dccc4663a667781", "filename": "src/machine.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -10,13 +10,14 @@ use std::time::Instant;\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n+use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::{\n     mir,\n     ty::{\n         self,\n         layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout},\n-        Instance, TyCtxt,\n+        Instance, TyCtxt, TypeAndMut,\n     },\n };\n use rustc_span::def_id::{CrateNum, DefId};\n@@ -269,19 +270,23 @@ pub struct PrimitiveLayouts<'tcx> {\n     pub u32: TyAndLayout<'tcx>,\n     pub usize: TyAndLayout<'tcx>,\n     pub bool: TyAndLayout<'tcx>,\n+    pub mut_raw_ptr: TyAndLayout<'tcx>,\n }\n \n impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n     fn new(layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Result<Self, LayoutError<'tcx>> {\n+        let tcx = layout_cx.tcx;\n+        let mut_raw_ptr = tcx.mk_ptr(TypeAndMut { ty: tcx.types.unit, mutbl: Mutability::Mut });\n         Ok(Self {\n-            unit: layout_cx.layout_of(layout_cx.tcx.mk_unit())?,\n-            i8: layout_cx.layout_of(layout_cx.tcx.types.i8)?,\n-            i32: layout_cx.layout_of(layout_cx.tcx.types.i32)?,\n-            isize: layout_cx.layout_of(layout_cx.tcx.types.isize)?,\n-            u8: layout_cx.layout_of(layout_cx.tcx.types.u8)?,\n-            u32: layout_cx.layout_of(layout_cx.tcx.types.u32)?,\n-            usize: layout_cx.layout_of(layout_cx.tcx.types.usize)?,\n-            bool: layout_cx.layout_of(layout_cx.tcx.types.bool)?,\n+            unit: layout_cx.layout_of(tcx.mk_unit())?,\n+            i8: layout_cx.layout_of(tcx.types.i8)?,\n+            i32: layout_cx.layout_of(tcx.types.i32)?,\n+            isize: layout_cx.layout_of(tcx.types.isize)?,\n+            u8: layout_cx.layout_of(tcx.types.u8)?,\n+            u32: layout_cx.layout_of(tcx.types.u32)?,\n+            usize: layout_cx.layout_of(tcx.types.usize)?,\n+            bool: layout_cx.layout_of(tcx.types.bool)?,\n+            mut_raw_ptr: layout_cx.layout_of(mut_raw_ptr)?,\n         })\n     }\n }"}, {"sha": "6a8a9553e93639a875c773619398c5984d4b5ab0", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -1,7 +1,7 @@\n use crate::*;\n use rustc_ast::ast::Mutability;\n use rustc_middle::ty::layout::LayoutOf as _;\n-use rustc_middle::ty::{self, Instance, TypeAndMut};\n+use rustc_middle::ty::{self, Instance};\n use rustc_span::{BytePos, Loc, Symbol};\n use rustc_target::{abi::Size, spec::abi::Abi};\n use std::convert::TryInto as _;\n@@ -71,8 +71,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let len: u64 = ptrs.len().try_into().unwrap();\n \n-        let ptr_ty = tcx.mk_ptr(TypeAndMut { ty: tcx.types.unit, mutbl: Mutability::Mut });\n-\n+        let ptr_ty = this.machine.layouts.mut_raw_ptr.ty;\n         let array_layout = this.layout_of(tcx.mk_array(ptr_ty, len)).unwrap();\n \n         match flags {"}, {"sha": "c2050647abca2a3d9535399a483e30ae134d96b0", "filename": "src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -440,7 +440,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else {\n             // No `environ` allocated yet, let's do that.\n             // This is memory backing an extern static, hence `ExternStatic`, not `Env`.\n-            let layout = this.machine.layouts.usize;\n+            let layout = this.machine.layouts.mut_raw_ptr;\n             let place = this.allocate(layout, MiriMemoryKind::ExternStatic.into())?;\n             this.machine.env_vars.environ = Some(place);\n         }\n@@ -452,8 +452,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         vars.push(Pointer::null());\n         // Make an array with all these pointers inside Miri.\n         let tcx = this.tcx;\n-        let vars_layout =\n-            this.layout_of(tcx.mk_array(tcx.types.usize, u64::try_from(vars.len()).unwrap()))?;\n+        let vars_layout = this.layout_of(\n+            tcx.mk_array(this.machine.layouts.mut_raw_ptr.ty, u64::try_from(vars.len()).unwrap()),\n+        )?;\n         let vars_place = this.allocate(vars_layout, MiriMemoryKind::Runtime.into())?;\n         for (idx, var) in vars.into_iter().enumerate() {\n             let place = this.mplace_field(&vars_place, idx)?;"}, {"sha": "7a1ae2f3c9a11432b6903800673357f46ad24280", "filename": "tests/compile-fail/ptr_integer_array_transmute.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Fcompile-fail%2Fptr_integer_array_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Fcompile-fail%2Fptr_integer_array_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_integer_array_transmute.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Zmiri-check-number-validity\n+\n+fn main() {\n+    let r = &mut 42;\n+    let _i: [usize; 1] = unsafe { std::mem::transmute(r) }; //~ ERROR encountered a pointer, but expected plain (non-pointer) bytes\n+}"}, {"sha": "e15a15763757583966198443608ce1532c2cc5dc", "filename": "tests/compile-fail/ptr_integer_transmute.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Fcompile-fail%2Fptr_integer_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Fcompile-fail%2Fptr_integer_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_integer_transmute.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Zmiri-check-number-validity\n+\n+fn main() {\n+    let r = &mut 42;\n+    let _i: usize = unsafe { std::mem::transmute(r) }; //~ ERROR expected initialized plain (non-pointer) bytes\n+}"}, {"sha": "58d073c85acc51641c259462aa96ab3f3db373cb", "filename": "tests/run-pass/concurrency/channels.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fchannels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fchannels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fchannels.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -0,0 +1,57 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+// compile-flags: -Zmiri-disable-isolation\n+\n+use std::sync::mpsc::{channel, sync_channel};\n+use std::thread;\n+\n+// Check if channels are working.\n+\n+/// The test taken from the Rust documentation.\n+fn simple_send() {\n+    let (tx, rx) = channel();\n+    thread::spawn(move || {\n+        tx.send(10).unwrap();\n+    });\n+    assert_eq!(rx.recv().unwrap(), 10);\n+}\n+\n+/// The test taken from the Rust documentation.\n+fn multiple_send() {\n+    let (tx, rx) = channel();\n+    for i in 0..10 {\n+        let tx = tx.clone();\n+        thread::spawn(move || {\n+            tx.send(i).unwrap();\n+        });\n+    }\n+\n+    let mut sum = 0;\n+    for _ in 0..10 {\n+        let j = rx.recv().unwrap();\n+        assert!(0 <= j && j < 10);\n+        sum += j;\n+    }\n+    assert_eq!(sum, 45);\n+}\n+\n+/// The test taken from the Rust documentation.\n+fn send_on_sync() {\n+    let (sender, receiver) = sync_channel(1);\n+\n+    // this returns immediately\n+    sender.send(1).unwrap();\n+\n+    thread::spawn(move || {\n+        // this will block until the previous message has been received\n+        sender.send(2).unwrap();\n+    });\n+\n+    assert_eq!(receiver.recv().unwrap(), 1);\n+    assert_eq!(receiver.recv().unwrap(), 2);\n+}\n+\n+fn main() {\n+    simple_send();\n+    multiple_send();\n+    send_on_sync();\n+}"}, {"sha": "03676519d4f1c052581dee9227a650c2a4b8d782", "filename": "tests/run-pass/concurrency/channels.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fchannels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fchannels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fchannels.stderr?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -0,0 +1,2 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+"}, {"sha": "c659cfbc3fdc226982d2ca0fa76edaf97355bdb0", "filename": "tests/run-pass/concurrency/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsimple.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n+// compile-flags: -Zmiri-check-number-validity\n \n use std::thread;\n "}, {"sha": "35f5f10274c95b95a195dcceec46f7d4ab40d162", "filename": "tests/run-pass/concurrency/simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -1,5 +1,5 @@\n warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n \n-thread '<unnamed>' panicked at 'Hello!', $DIR/simple.rs:54:9\n+thread '<unnamed>' panicked at 'Hello!', $DIR/simple.rs:55:9\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-thread 'childthread' panicked at 'Hello, world!', $DIR/simple.rs:64:9\n+thread 'childthread' panicked at 'Hello, world!', $DIR/simple.rs:65:9"}, {"sha": "d47aa2a8d234a4c6a4a5d7d9763cf1c56bec0496", "filename": "tests/run-pass/concurrency/sync.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsync.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -1,7 +1,6 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-isolation -Zmiri-check-number-validity\n \n-use std::sync::mpsc::{channel, sync_channel};\n use std::sync::{Arc, Barrier, Condvar, Mutex, Once, RwLock};\n use std::thread;\n use std::time::{Duration, Instant};\n@@ -181,52 +180,6 @@ fn check_rwlock_read_no_deadlock() {\n     handle.join().unwrap();\n }\n \n-// Check if channels are working.\n-\n-/// The test taken from the Rust documentation.\n-fn simple_send() {\n-    let (tx, rx) = channel();\n-    thread::spawn(move || {\n-        tx.send(10).unwrap();\n-    });\n-    assert_eq!(rx.recv().unwrap(), 10);\n-}\n-\n-/// The test taken from the Rust documentation.\n-fn multiple_send() {\n-    let (tx, rx) = channel();\n-    for i in 0..10 {\n-        let tx = tx.clone();\n-        thread::spawn(move || {\n-            tx.send(i).unwrap();\n-        });\n-    }\n-\n-    let mut sum = 0;\n-    for _ in 0..10 {\n-        let j = rx.recv().unwrap();\n-        assert!(0 <= j && j < 10);\n-        sum += j;\n-    }\n-    assert_eq!(sum, 45);\n-}\n-\n-/// The test taken from the Rust documentation.\n-fn send_on_sync() {\n-    let (sender, receiver) = sync_channel(1);\n-\n-    // this returns immediately\n-    sender.send(1).unwrap();\n-\n-    thread::spawn(move || {\n-        // this will block until the previous message has been received\n-        sender.send(2).unwrap();\n-    });\n-\n-    assert_eq!(receiver.recv().unwrap(), 1);\n-    assert_eq!(receiver.recv().unwrap(), 2);\n-}\n-\n // Check if Rust once statics are working.\n \n static mut VAL: usize = 0;\n@@ -353,9 +306,6 @@ fn main() {\n     check_mutex();\n     check_rwlock_write();\n     check_rwlock_read_no_deadlock();\n-    simple_send();\n-    multiple_send();\n-    send_on_sync();\n     check_once();\n     check_rwlock_unlock_bug1();\n     check_rwlock_unlock_bug2();"}, {"sha": "0fd4a9f1372dc30f94536913f82ffc0b072d349e", "filename": "tests/run-pass/concurrency/thread_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbf078f368b1a16951730148fe15127df249ef/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs?ref=c1bbf078f368b1a16951730148fe15127df249ef", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n+// compile-flags: -Zmiri-check-number-validity\n \n //! The main purpose of this test is to check that if we take a pointer to\n //! thread's `t1` thread-local `A` and send it to another thread `t2`,"}]}