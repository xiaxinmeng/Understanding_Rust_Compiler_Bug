{"sha": "603f2034a512317c530473c8c229f8685ed18bd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwM2YyMDM0YTUxMjMxN2M1MzA0NzNjOGMyMjlmODY4NWVkMThiZDk=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-02T09:31:40Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-02T09:31:40Z"}, "message": "Format type casts", "tree": {"sha": "34e21258cdd6e9cfd8fb57c9c861f0eff1152256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e21258cdd6e9cfd8fb57c9c861f0eff1152256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/603f2034a512317c530473c8c229f8685ed18bd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/603f2034a512317c530473c8c229f8685ed18bd9", "html_url": "https://github.com/rust-lang/rust/commit/603f2034a512317c530473c8c229f8685ed18bd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/603f2034a512317c530473c8c229f8685ed18bd9/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff0be2f821847ee8ca9c24d44cca19725034304", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff0be2f821847ee8ca9c24d44cca19725034304", "html_url": "https://github.com/rust-lang/rust/commit/fff0be2f821847ee8ca9c24d44cca19725034304"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "ecc9477321124fcd49e9096e92d0022a53e9aa93", "filename": "src/expr.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/603f2034a512317c530473c8c229f8685ed18bd9/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/603f2034a512317c530473c8c229f8685ed18bd9/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=603f2034a512317c530473c8c229f8685ed18bd9", "patch": "@@ -177,12 +177,14 @@ impl Rewrite for ast::Expr {\n                 rewrite_unary_prefix(context, \"box \", expr, width, offset)\n             }\n             ast::Expr_::ExprAddrOf(mutability, ref expr) => {\n-                rewrite_expr_addrof(context, mutability, &expr, width, offset)\n+                rewrite_expr_addrof(context, mutability, expr, width, offset)\n+            }\n+            ast::Expr_::ExprCast(ref expr, ref ty) => {\n+                rewrite_cast(expr, ty, context, width, offset)\n             }\n             // We do not format these expressions yet, but they should still\n             // satisfy our width restrictions.\n             ast::Expr_::ExprInPlace(..) |\n-            ast::Expr_::ExprCast(..) |\n             ast::Expr_::ExprIndex(..) |\n             ast::Expr_::ExprInlineAsm(..) |\n             ast::Expr_::ExprRepeat(..) => {\n@@ -195,6 +197,38 @@ impl Rewrite for ast::Expr {\n     }\n }\n \n+fn rewrite_cast(expr: &ast::Expr,\n+                ty: &ast::Ty,\n+                context: &RewriteContext,\n+                width: usize,\n+                offset: Indent)\n+                -> Option<String> {\n+    let max_width = try_opt!(width.checked_sub(\" as \".len()));\n+\n+    binary_search(1,\n+                  max_width,\n+                  |expr_budget| {\n+                      let expr_str = match expr.rewrite(context, expr_budget, offset) {\n+                          Some(result) => result,\n+                          None => return Err(Ordering::Greater),\n+                      };\n+\n+                      let last_line_width = last_line_width(&expr_str);\n+                      let ty_budget = match max_width.checked_sub(last_line_width) {\n+                          Some(b) => b,\n+                          None => return Err(Ordering::Less),\n+                      };\n+                      let ty_indent = offset + last_line_width;\n+\n+                      let ty_str = match ty.rewrite(context, ty_budget, ty_indent) {\n+                          Some(result) => result,\n+                          None => return Err(Ordering::Less),\n+                      };\n+\n+                      Ok(format!(\"{} as {}\", expr_str, ty_str))\n+                  })\n+}\n+\n pub fn rewrite_array<'a, I>(expr_iter: I,\n                             span: Span,\n                             context: &RewriteContext,"}, {"sha": "544a566cee9b338f53afc2288fbb5bd681a9816f", "filename": "tests/source/expr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/603f2034a512317c530473c8c229f8685ed18bd9/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/603f2034a512317c530473c8c229f8685ed18bd9/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=603f2034a512317c530473c8c229f8685ed18bd9", "patch": "@@ -184,3 +184,16 @@ fn addrof() {\n     &    mut(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n     &    (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n }\n+\n+fn casts() {\n+    fn unpack(packed: u32) -> [u16; 2] {\n+        [\n+            (packed >> 16) as u16,\n+            (packed >>  0) as u16,\n+        ]\n+    }\n+\n+    let some_trait_xxx = xxxxxxxxxxx + xxxxxxxxxxxxx\n+        as SomeTraitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n+    let slightly_longer_trait = yyyyyyyyy + yyyyyyyyyyy as SomeTraitYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY;\n+}"}, {"sha": "c23b0b050c87dbc8083f9ed25ecaa8d99797ad92", "filename": "tests/target/expr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/603f2034a512317c530473c8c229f8685ed18bd9/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/603f2034a512317c530473c8c229f8685ed18bd9/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=603f2034a512317c530473c8c229f8685ed18bd9", "patch": "@@ -198,3 +198,13 @@ fn addrof() {\n     &(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n       bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n }\n+\n+fn casts() {\n+    fn unpack(packed: u32) -> [u16; 2] {\n+        [(packed >> 16) as u16, (packed >> 0) as u16]\n+    }\n+\n+    let some_trait_xxx = xxxxxxxxxxx + xxxxxxxxxxxxx as SomeTraitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n+    let slightly_longer_trait = yyyyyyyyy +\n+                                yyyyyyyyyyy as SomeTraitYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY;\n+}"}]}