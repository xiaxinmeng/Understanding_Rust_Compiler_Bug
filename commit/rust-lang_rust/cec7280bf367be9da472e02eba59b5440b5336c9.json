{"sha": "cec7280bf367be9da472e02eba59b5440b5336c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzcyODBiZjM2N2JlOWRhNDcyZTAyZWJhNTliNTQ0MGI1MzM2Yzk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-01-08T19:40:13Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-01-12T14:24:52Z"}, "message": "debug instrumentation (can remove)", "tree": {"sha": "d59304053518407f63c29a9a7959e2657a51fa21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59304053518407f63c29a9a7959e2657a51fa21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec7280bf367be9da472e02eba59b5440b5336c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec7280bf367be9da472e02eba59b5440b5336c9", "html_url": "https://github.com/rust-lang/rust/commit/cec7280bf367be9da472e02eba59b5440b5336c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec7280bf367be9da472e02eba59b5440b5336c9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965b0bfefe27b0a487b7243cb1a0a6f36a2be70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/965b0bfefe27b0a487b7243cb1a0a6f36a2be70b", "html_url": "https://github.com/rust-lang/rust/commit/965b0bfefe27b0a487b7243cb1a0a6f36a2be70b"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "f46a7ea67b5f23aa7aadb72d978806d1163a9ce3", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=cec7280bf367be9da472e02eba59b5440b5336c9", "patch": "@@ -1760,6 +1760,9 @@ fn mk_binding_alloca<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n     let lvalue = Lvalue::new_with_hint(caller_name, bcx, p_id, HintKind::DontZeroJustUse);\n     let datum = Datum::new(llval, var_ty, lvalue);\n \n+    debug!(\"mk_binding_alloca cleanup_scope={:?} llval={} var_ty={:?}\",\n+           cleanup_scope, bcx.ccx().tn().val_to_string(llval), var_ty);\n+\n     // Subtle: be sure that we *populate* the memory *before*\n     // we schedule the cleanup.\n     call_lifetime_start(bcx, llval);"}, {"sha": "d22d619b9622754002c18d29f3b14a9c8eb92bee", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=cec7280bf367be9da472e02eba59b5440b5336c9", "patch": "@@ -1281,7 +1281,11 @@ pub fn trans_drop_flag_ptr<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             let scratch = unpack_datum!(bcx, datum::lvalue_scratch_datum(\n                 bcx, tcx.dtor_type(), \"drop_flag\",\n                 InitAlloca::Uninit(\"drop flag itself has no dtor\"),\n-                cleanup::CustomScope(custom_cleanup_scope), (), |_, bcx, _| bcx\n+                cleanup::CustomScope(custom_cleanup_scope), (), |_, bcx, _| {\n+                    debug!(\"no-op populate call for trans_drop_flag_ptr on dtor_type={:?}\",\n+                           tcx.dtor_type());\n+                    bcx\n+                }\n             ));\n             bcx = fold_variants(bcx, r, val, |variant_cx, st, value| {\n                 let ptr = struct_field_ptr(variant_cx, st, MaybeSizedValue::sized(value),"}, {"sha": "1e5c60609b0b86d0999c42082e314974fc67b9dd", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=cec7280bf367be9da472e02eba59b5440b5336c9", "patch": "@@ -1689,6 +1689,8 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n     let fcx = bcx.fcx;\n     let arg_scope_id = cleanup::CustomScope(arg_scope);\n \n+    debug!(\"create_datums_for_fn_args\");\n+\n     // Return an array wrapping the ValueRefs that we get from `get_param` for\n     // each argument into datums.\n     //\n@@ -1723,6 +1725,9 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n                 unpack_datum!(bcx, datum::lvalue_scratch_datum(bcx, arg_ty, \"\", uninit_reason,\n                                                         arg_scope_id, (data, extra),\n                                                         |(data, extra), bcx, dst| {\n+                    debug!(\"populate call for create_datum_for_fn_args \\\n+                            early fat arg, on arg[{}] ty={:?}\", i, arg_ty);\n+\n                     Store(bcx, data, expr::get_dataptr(bcx, dst));\n                     Store(bcx, extra, expr::get_meta(bcx, dst));\n                     bcx\n@@ -1738,7 +1743,13 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n                                                           uninit_reason,\n                                                           arg_scope_id,\n                                                           tmp,\n-                                                          |tmp, bcx, dst| tmp.store_to(bcx, dst)))\n+                                                          |tmp, bcx, dst| {\n+\n+                        debug!(\"populate call for create_datum_for_fn_args \\\n+                                early thin arg, on arg[{}] ty={:?}\", i, arg_ty);\n+\n+                                                              tmp.store_to(bcx, dst)\n+                                                          }))\n             }\n         } else {\n             // FIXME(pcwalton): Reduce the amount of code bloat this is responsible for.\n@@ -1753,7 +1764,9 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n                                                               (),\n                                                               |(),\n                                                                mut bcx,\n-                                                               llval| {\n+                                                              llval| {\n+                        debug!(\"populate call for create_datum_for_fn_args \\\n+                                tupled_args, on arg[{}] ty={:?}\", i, arg_ty);\n                         for (j, &tupled_arg_ty) in\n                                     tupled_arg_tys.iter().enumerate() {\n                             let lldest = StructGEP(bcx, llval, j);"}, {"sha": "6a033602adabafccbfdc4034584e45e5f7e26760", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=cec7280bf367be9da472e02eba59b5440b5336c9", "patch": "@@ -311,6 +311,8 @@ pub fn lvalue_scratch_datum<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n     // Very subtle: potentially initialize the scratch memory at point where it is alloca'ed.\n     // (See discussion at Issue 30530.)\n     let scratch = alloc_ty_init(bcx, ty, zero, name);\n+    debug!(\"lvalue_scratch_datum scope={:?} scratch={} ty={:?}\",\n+           scope, bcx.ccx().tn().val_to_string(scratch), ty);\n \n     // Subtle. Populate the scratch memory *before* scheduling cleanup.\n     let bcx = populate(arg, bcx, scratch);\n@@ -349,6 +351,8 @@ fn add_rvalue_clean<'a, 'tcx>(mode: RvalueMode,\n                               scope: cleanup::ScopeId,\n                               val: ValueRef,\n                               ty: Ty<'tcx>) {\n+    debug!(\"add_rvalue_clean scope={:?} val={} ty={:?}\",\n+           scope, fcx.ccx.tn().val_to_string(val), ty);\n     match mode {\n         ByValue => { fcx.schedule_drop_immediate(scope, val, ty); }\n         ByRef => {\n@@ -507,6 +511,8 @@ impl<'tcx> Datum<'tcx, Rvalue> {\n                 lvalue_scratch_datum(\n                     bcx, self.ty, name, InitAlloca::Dropped, scope, self,\n                     |this, bcx, llval| {\n+                        debug!(\"populate call for Datum::to_lvalue_datum_in_scope \\\n+                                self.ty={:?}\", this.ty);\n                         call_lifetime_start(bcx, llval);\n                         let bcx = this.store_to(bcx, llval);\n                         bcx.fcx.schedule_lifetime_end(scope, llval);"}, {"sha": "57afd0b580f177d40906cf3022e3d2e62b955638", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7280bf367be9da472e02eba59b5440b5336c9/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=cec7280bf367be9da472e02eba59b5440b5336c9", "patch": "@@ -1487,6 +1487,8 @@ pub fn trans_adt<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n     };\n \n+    debug!(\"trans_adt\");\n+\n     // This scope holds intermediates that must be cleaned should\n     // panic occur before the ADT as a whole is ready.\n     let custom_cleanup_scope = fcx.push_custom_cleanup_scope();"}]}