{"sha": "f60a8734e088f3383512b0ffc12a9a909d2163b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MGE4NzM0ZTA4OGYzMzgzNTEyYjBmZmMxMmE5YTkwOWQyMTYzYjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T07:41:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T07:41:43Z"}, "message": "remove unused peekable", "tree": {"sha": "05e1bbfc7b9cb55b90e5945ef0e6bb4ab4617504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e1bbfc7b9cb55b90e5945ef0e6bb4ab4617504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f60a8734e088f3383512b0ffc12a9a909d2163b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f60a8734e088f3383512b0ffc12a9a909d2163b4", "html_url": "https://github.com/rust-lang/rust/commit/f60a8734e088f3383512b0ffc12a9a909d2163b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f60a8734e088f3383512b0ffc12a9a909d2163b4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "538437e829fd1bdaaf5104f7750327cfdeed29bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/538437e829fd1bdaaf5104f7750327cfdeed29bf", "html_url": "https://github.com/rust-lang/rust/commit/538437e829fd1bdaaf5104f7750327cfdeed29bf"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "8cb85bdef762fe023d3120c98e6aa8f50048d679", "filename": "src/libsyntax/ext/mbe/quoted.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f60a8734e088f3383512b0ffc12a9a909d2163b4/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60a8734e088f3383512b0ffc12a9a909d2163b4/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs?ref=f60a8734e088f3383512b0ffc12a9a909d2163b4", "patch": "@@ -10,7 +10,6 @@ use crate::tokenstream;\n use syntax_pos::Span;\n \n use rustc_data_structures::sync::Lrc;\n-use std::iter::Peekable;\n \n /// Takes a `tokenstream::TokenStream` and returns a `Vec<self::TokenTree>`. Specifically, this\n /// takes a generic `TokenStream`, such as is used in the rest of the compiler, and returns a\n@@ -43,7 +42,7 @@ pub(super) fn parse(\n \n     // For each token tree in `input`, parse the token into a `self::TokenTree`, consuming\n     // additional trees if need be.\n-    let mut trees = input.trees().peekable();\n+    let mut trees = input.trees();\n     while let Some(tree) = trees.next() {\n         // Given the parsed tree, if there is a metavar and we are expecting matchers, actually\n         // parse out the matcher (i.e., in `$id:ident` this would parse the `:` and `ident`).\n@@ -99,7 +98,7 @@ pub(super) fn parse(\n ///   unstable features or not.\n fn parse_tree(\n     tree: tokenstream::TokenTree,\n-    trees: &mut Peekable<impl Iterator<Item = tokenstream::TokenTree>>,\n+    trees: &mut impl Iterator<Item = tokenstream::TokenTree>,\n     expect_matchers: bool,\n     sess: &ParseSess,\n ) -> TokenTree {\n@@ -222,7 +221,7 @@ fn parse_kleene_op(\n /// operator and separator, then a tuple with `(separator, KleeneOp)` is returned. Otherwise, an\n /// error with the appropriate span is emitted to `sess` and a dummy value is returned.\n fn parse_sep_and_kleene_op(\n-    input: &mut Peekable<impl Iterator<Item = tokenstream::TokenTree>>,\n+    input: &mut impl Iterator<Item = tokenstream::TokenTree>,\n     span: Span,\n     sess: &ParseSess,\n ) -> (Option<Token>, KleeneToken) {"}]}