{"sha": "e0fe271d3459d04af9e1580c396b4698063e1999", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZmUyNzFkMzQ1OWQwNGFmOWUxNTgwYzM5NmI0Njk4MDYzZTE5OTk=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-01T18:13:00Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-04T16:35:13Z"}, "message": "Add support for looking up a name introduced by a 'use'.\n\nWith this we go from \"error: unresolved name: foo\" to\n\"unimplemented definition variant for: foo\" in\n\nuse foo;\nfn main(vec[str] args) {\n   foo.bar();\n}", "tree": {"sha": "ab869f8a2779d8c5819c1493881225cdc863d043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab869f8a2779d8c5819c1493881225cdc863d043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0fe271d3459d04af9e1580c396b4698063e1999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0fe271d3459d04af9e1580c396b4698063e1999", "html_url": "https://github.com/rust-lang/rust/commit/e0fe271d3459d04af9e1580c396b4698063e1999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0fe271d3459d04af9e1580c396b4698063e1999/comments", "author": null, "committer": null, "parents": [{"sha": "5fd3d2ca5516cfe5087d802c1b207943a64653da", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3d2ca5516cfe5087d802c1b207943a64653da", "html_url": "https://github.com/rust-lang/rust/commit/5fd3d2ca5516cfe5087d802c1b207943a64653da"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "15c0e4994a5673dc047420d74f6ee148821eef2c", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0fe271d3459d04af9e1580c396b4698063e1999/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0fe271d3459d04af9e1580c396b4698063e1999/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=e0fe271d3459d04af9e1580c396b4698063e1999", "patch": "@@ -35,6 +35,7 @@ tag def {\n     def_ty(def_id);\n     def_ty_arg(def_id);\n     def_binding(def_id);\n+    def_use(def_id);\n }\n \n type crate = spanned[crate_];\n@@ -212,20 +213,23 @@ type _obj = rec(vec[obj_field] fields,\n \n \n tag mod_index_entry {\n+    mie_use(uint);\n     mie_item(uint);\n     mie_tag_variant(uint /* tag item index */, uint /* variant index */);\n }\n \n-type _mod = rec(vec[@item] items,\n-                hashmap[ident,mod_index_entry] index);\n+type mod_index = hashmap[ident,mod_index_entry];\n+type _mod = rec(vec[@view_item] view_items,\n+                vec[@item] items,\n+                mod_index index);\n \n type variant_arg = rec(@ty ty, def_id id);\n type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n \n type view_item = spanned[view_item_];\n tag view_item_ {\n-    view_item_use(ident, vec[@meta_item]);\n-    view_item_import(vec[ident]);\n+    view_item_use(ident, vec[@meta_item], def_id);\n+    view_item_import(vec[ident], def_id);\n }\n \n type item = spanned[item_];"}, {"sha": "8c3db0e10ba308013ae817e7bf2f4263d8911e1c", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e0fe271d3459d04af9e1580c396b4698063e1999/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0fe271d3459d04af9e1580c396b4698063e1999/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=e0fe271d3459d04af9e1580c396b4698063e1999", "patch": "@@ -1405,11 +1405,10 @@ impure fn parse_item_obj(parser p, ast.layer lyr) -> @ast.item {\n }\n \n impure fn parse_mod_items(parser p, token.token term) -> ast._mod {\n-    parse_view(p);\n-\n-    let vec[@ast.item] items = vec();\n     auto index = new_str_hash[ast.mod_index_entry]();\n+    auto view_items = parse_view(p, index);\n     let uint u = 0u;\n+    let vec[@ast.item] items = vec();\n     while (p.peek() != term) {\n         auto item = parse_item(p);\n         items += vec(item);\n@@ -1443,7 +1442,7 @@ impure fn parse_mod_items(parser p, token.token term) -> ast._mod {\n \n         u += 1u;\n     }\n-    ret rec(items=items, index=index);\n+    ret rec(view_items=view_items, items=items, index=index);\n  }\n \n impure fn parse_item_const(parser p) -> @ast.item {\n@@ -1669,7 +1668,7 @@ impure fn parse_use(parser p) -> @ast.view_item {\n     auto ident = parse_ident(p);\n     auto metadata = parse_optional_meta(p);\n     expect(p, token.SEMI);\n-    auto use_decl = ast.view_item_use(ident, metadata);\n+    auto use_decl = ast.view_item_use(ident, metadata, p.next_def_id());\n     ret @spanned(lo, hi, use_decl);\n }\n \n@@ -1684,7 +1683,7 @@ impure fn parse_rest_import_name(parser p, ast.ident id) -> @ast.view_item {\n         identifiers += i;\n     }\n     p.bump();\n-    auto import_decl = ast.view_item_import(identifiers);\n+    auto import_decl = ast.view_item_import(identifiers, p.next_def_id());\n     ret @spanned(lo, hi, import_decl);\n }\n \n@@ -1744,11 +1743,21 @@ fn is_use_or_import(token.token t) -> bool {\n     ret false;\n }\n \n-impure fn parse_view(parser p) -> vec[@ast.view_item] {\n+impure fn parse_view(parser p, ast.mod_index index) -> vec[@ast.view_item] {\n     let vec[@ast.view_item] items = vec();\n+    let uint u = 0u;\n     while (is_use_or_import(p.peek())) {\n         auto item = parse_use_or_import(p);\n         items += vec(item);\n+        alt (item.node) {\n+            case(ast.view_item_use(?id, _, _)) {\n+                index.insert(id, ast.mie_use(u));\n+            }\n+            case(ast.view_item_import(?ids,_)) {\n+                // FIXME\n+            }\n+        }\n+        u = u + 1u;\n     }\n     ret items;\n }"}, {"sha": "551993dda8b7991721e386900e812a46196097d6", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0fe271d3459d04af9e1580c396b4698063e1999/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0fe271d3459d04af9e1580c396b4698063e1999/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=e0fe271d3459d04af9e1580c396b4698063e1999", "patch": "@@ -67,10 +67,24 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n         ret none[def];\n     }\n \n+    fn found_def_view(@ast.view_item i) -> option.t[def] {\n+        alt (i.node) {\n+            case (ast.view_item_use(_, _, ?id)) {\n+                ret some[def](ast.def_use(id));\n+            }\n+            case (ast.view_item_import(_,?id)) {\n+                fail;\n+            }\n+        }\n+    }\n+\n     fn check_mod(ast.ident i, ast._mod m) -> option.t[def] {\n         alt (m.index.find(i)) {\n             case (some[ast.mod_index_entry](?ent)) {\n                 alt (ent) {\n+                    case (ast.mie_use(?ix)) {\n+                        ret found_def_view(m.view_items.(ix));\n+                    }\n                     case (ast.mie_item(?ix)) {\n                         ret found_def_item(m.items.(ix));\n                     }"}]}