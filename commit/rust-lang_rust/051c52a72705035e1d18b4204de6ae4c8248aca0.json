{"sha": "051c52a72705035e1d18b4204de6ae4c8248aca0", "node_id": "C_kwDOAAsO6NoAKDA1MWM1MmE3MjcwNTAzNWUxZDE4YjQyMDRkZTZhZTRjODI0OGFjYTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-20T07:51:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-20T07:51:16Z"}, "message": "Rollup merge of #105935 - Ezrashaw:add-test+docs-for-e0377, r=GuillaumeGomez\n\ndocs/test: add UI test and long-form error docs for `E0377`", "tree": {"sha": "ad2d635b80da4eb1e6b1a722fba64d9115bb4ab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad2d635b80da4eb1e6b1a722fba64d9115bb4ab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051c52a72705035e1d18b4204de6ae4c8248aca0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjoWl0CRBK7hj4Ov3rIwAAMpkIAC2JO6fN2IPe7dPcWGuU2P3Q\nMu+NEt7UUQ9Q3aLdkCSKc+6LrRUb8Ydt0xgOs+FKfiI5GQ617NhFOVyzI89CRy6d\nD6b12SNfOhSYwiT7f4R93vw86weU4L/uB8IsZtqAFrHix3hYB1abu6zIKWDTym4h\ngz1JXDEOPNUQavuSJvMJjEPPMq6VoYp7ZyPrxz6XNyePNHOkb/9XN4ph7Z5E4BF9\nHn7dDWguv7VSj4kbptPgAyQOgBeUX3J7gU8x4z25XY6cRj+I37JvbFawbmiAiBqn\npKuSHkga2WctdrBOCPmB/RLj/3/lNYu31IJDrEij8sT7+L2/Gb0M0Xr7TghJo48=\n=dNSu\n-----END PGP SIGNATURE-----\n", "payload": "tree ad2d635b80da4eb1e6b1a722fba64d9115bb4ab8\nparent 9888ef77c584d2950296a44e9abb15156f1305de\nparent e798fdf7befc40255ce46caa37a0e6c1e8756b6c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671522676 +0100\ncommitter GitHub <noreply@github.com> 1671522676 +0100\n\nRollup merge of #105935 - Ezrashaw:add-test+docs-for-e0377, r=GuillaumeGomez\n\ndocs/test: add UI test and long-form error docs for `E0377`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051c52a72705035e1d18b4204de6ae4c8248aca0", "html_url": "https://github.com/rust-lang/rust/commit/051c52a72705035e1d18b4204de6ae4c8248aca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051c52a72705035e1d18b4204de6ae4c8248aca0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9888ef77c584d2950296a44e9abb15156f1305de", "url": "https://api.github.com/repos/rust-lang/rust/commits/9888ef77c584d2950296a44e9abb15156f1305de", "html_url": "https://github.com/rust-lang/rust/commit/9888ef77c584d2950296a44e9abb15156f1305de"}, {"sha": "e798fdf7befc40255ce46caa37a0e6c1e8756b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e798fdf7befc40255ce46caa37a0e6c1e8756b6c", "html_url": "https://github.com/rust-lang/rust/commit/e798fdf7befc40255ce46caa37a0e6c1e8756b6c"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "4e149fc2b9973c1aed2ba0c20a6051fa71203d74", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/051c52a72705035e1d18b4204de6ae4c8248aca0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051c52a72705035e1d18b4204de6ae4c8248aca0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=051c52a72705035e1d18b4204de6ae4c8248aca0", "patch": "@@ -184,6 +184,7 @@ E0373: include_str!(\"./error_codes/E0373.md\"),\n E0374: include_str!(\"./error_codes/E0374.md\"),\n E0375: include_str!(\"./error_codes/E0375.md\"),\n E0376: include_str!(\"./error_codes/E0376.md\"),\n+E0377: include_str!(\"./error_codes/E0377.md\"),\n E0378: include_str!(\"./error_codes/E0378.md\"),\n E0379: include_str!(\"./error_codes/E0379.md\"),\n E0380: include_str!(\"./error_codes/E0380.md\"),\n@@ -579,8 +580,6 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0315, // cannot invoke closure outside of its lifetime\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n-    E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n-           // between structures with the same definition\n //  E0385, // {} in an aliasable location\n //  E0402, // cannot use an outer type parameter in this context\n //  E0406, // merged into 420"}, {"sha": "b1d36406332bdb08bc071867da0d3791d72f2028", "filename": "compiler/rustc_error_codes/src/error_codes/E0377.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/051c52a72705035e1d18b4204de6ae4c8248aca0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0377.md", "raw_url": "https://github.com/rust-lang/rust/raw/051c52a72705035e1d18b4204de6ae4c8248aca0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0377.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0377.md?ref=051c52a72705035e1d18b4204de6ae4c8248aca0", "patch": "@@ -0,0 +1,29 @@\n+The trait `CoerceUnsized` may only be implemented for a coercion between\n+structures with the same definition.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0377\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+pub struct Foo<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+pub struct Bar<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+// error: the trait `CoerceUnsized` may only be implemented for a coercion\n+//        between structures with the same definition\n+impl<T, U> CoerceUnsized<Bar<U>> for Foo<T> where T: CoerceUnsized<U> {}\n+```\n+\n+When attempting to implement `CoerceUnsized`, the `impl` signature must look\n+like: `impl CoerceUnsized<Type<U>> for Type<T> where T: CoerceUnsized<U>`;\n+the *implementer* and *`CoerceUnsized` type parameter* must be the same\n+type. In this example, `Bar` and `Foo` (even though structurally identical)\n+are *not* the same type and are rejected. Learn more about the `CoerceUnsized`\n+trait and DST coercion in\n+[the `CoerceUnsized` docs](../std/ops/trait.CoerceUnsized.html)."}, {"sha": "6da2c20956adb7c66d8df9e0add3706bed3d32cf", "filename": "src/test/ui/error-codes/E0377.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/051c52a72705035e1d18b4204de6ae4c8248aca0/src%2Ftest%2Fui%2Ferror-codes%2FE0377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051c52a72705035e1d18b4204de6ae4c8248aca0/src%2Ftest%2Fui%2Ferror-codes%2FE0377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0377.rs?ref=051c52a72705035e1d18b4204de6ae4c8248aca0", "patch": "@@ -0,0 +1,14 @@\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+pub struct Foo<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+pub struct Bar<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+impl<T, U> CoerceUnsized<Bar<U>> for Foo<T> where T: CoerceUnsized<U> {} //~ ERROR E0377\n+\n+fn main() {}"}, {"sha": "bf7d8c8d39d2a09259ba6921f801e8010e556558", "filename": "src/test/ui/error-codes/E0377.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051c52a72705035e1d18b4204de6ae4c8248aca0/src%2Ftest%2Fui%2Ferror-codes%2FE0377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/051c52a72705035e1d18b4204de6ae4c8248aca0/src%2Ftest%2Fui%2Ferror-codes%2FE0377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0377.stderr?ref=051c52a72705035e1d18b4204de6ae4c8248aca0", "patch": "@@ -0,0 +1,9 @@\n+error[E0377]: the trait `CoerceUnsized` may only be implemented for a coercion between structures with the same definition; expected `Foo`, found `Bar`\n+  --> $DIR/E0377.rs:12:1\n+   |\n+LL | impl<T, U> CoerceUnsized<Bar<U>> for Foo<T> where T: CoerceUnsized<U> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0377`."}, {"sha": "1b119e4113e32bf9543255aae9810fd742b437da", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051c52a72705035e1d18b4204de6ae4c8248aca0/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051c52a72705035e1d18b4204de6ae4c8248aca0/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=051c52a72705035e1d18b4204de6ae4c8248aca0", "patch": "@@ -11,8 +11,8 @@ use regex::Regex;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0519\", \"E0523\",\n-    \"E0554\", \"E0640\", \"E0717\", \"E0729\", \"E0789\",\n+    \"E0313\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0519\", \"E0523\", \"E0554\",\n+    \"E0640\", \"E0717\", \"E0729\", \"E0789\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}