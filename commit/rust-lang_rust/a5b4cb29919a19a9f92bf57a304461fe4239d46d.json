{"sha": "a5b4cb29919a19a9f92bf57a304461fe4239d46d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YjRjYjI5OTE5YTE5YTlmOTJiZjU3YTMwNDQ2MWZlNDIzOWQ0NmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-18T15:07:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-18T20:00:34Z"}, "message": "remove \"approx env bounds\" if we already know from trait", "tree": {"sha": "353e64a47ea25baaba444aa33288a33fa7a9db7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/353e64a47ea25baaba444aa33288a33fa7a9db7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5b4cb29919a19a9f92bf57a304461fe4239d46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b4cb29919a19a9f92bf57a304461fe4239d46d", "html_url": "https://github.com/rust-lang/rust/commit/a5b4cb29919a19a9f92bf57a304461fe4239d46d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5b4cb29919a19a9f92bf57a304461fe4239d46d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "485397e49a02a3b7ff77c17e4a3f16c653925cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/485397e49a02a3b7ff77c17e4a3f16c653925cb3", "html_url": "https://github.com/rust-lang/rust/commit/485397e49a02a3b7ff77c17e4a3f16c653925cb3"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "ab75a914d9c80509520bcc587848e7c20350d9d5", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a5b4cb29919a19a9f92bf57a304461fe4239d46d/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b4cb29919a19a9f92bf57a304461fe4239d46d/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=a5b4cb29919a19a9f92bf57a304461fe4239d46d", "patch": "@@ -389,22 +389,38 @@ where\n         // rule might not apply (but another rule might). For now, we err\n         // on the side of adding too few edges into the graph.\n \n+        // Compute the bounds we can derive from the trait definition.\n+        // These are guaranteed to apply, no matter the inference\n+        // results.\n+        let trait_bounds: Vec<_> = self.verify_bound\n+            .projection_declared_bounds_from_trait(projection_ty)\n+            .collect();\n+\n         // Compute the bounds we can derive from the environment. This\n         // is an \"approximate\" match -- in some cases, these bounds\n         // may not apply.\n-        let approx_env_bounds = self.verify_bound\n+        let mut approx_env_bounds = self.verify_bound\n             .projection_approx_declared_bounds_from_env(projection_ty);\n         debug!(\n             \"projection_must_outlive: approx_env_bounds={:?}\",\n             approx_env_bounds\n         );\n \n-        // Compute the bounds we can derive from the trait definition.\n-        // These are guaranteed to apply, no matter the inference\n-        // results.\n-        let trait_bounds: Vec<_> = self.verify_bound\n-            .projection_declared_bounds_from_trait(projection_ty)\n-            .collect();\n+        // Remove outlives bounds that we get from the environment but\n+        // which are also deducable from the trait. This arises (cc\n+        // #55756) in cases where you have e.g. `<T as Foo<'a>>::Item:\n+        // 'a` in the environment but `trait Foo<'b> { type Item: 'b\n+        // }` in the trait definition.\n+        approx_env_bounds.retain(|bound| {\n+            match bound.0.sty {\n+                ty::Projection(projection_ty) => {\n+                    self.verify_bound.projection_declared_bounds_from_trait(projection_ty)\n+                        .all(|r| r != bound.1)\n+                }\n+\n+                _ => panic!(\"expected only projection types from env, not {:?}\", bound.0),\n+            }\n+        });\n \n         // If declared bounds list is empty, the only applicable rule is\n         // OutlivesProjectionComponent. If there are inference variables,"}, {"sha": "cda3915849e2d686853992c4fdde2d91f674b50f", "filename": "src/test/ui/nll/ty-outlives/issue-55756.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a5b4cb29919a19a9f92bf57a304461fe4239d46d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-55756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b4cb29919a19a9f92bf57a304461fe4239d46d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-55756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-55756.rs?ref=a5b4cb29919a19a9f92bf57a304461fe4239d46d", "patch": "@@ -0,0 +1,37 @@\n+// Regression test for #55756.\n+//\n+// In this test, the result of `self.callee` is a projection `<D as\n+// Database<'?0>>::Guard`. As it may contain a destructor, the dropck\n+// rules require that this type outlivess the scope of `state`. Unfortunately,\n+// our region inference is not smart enough to figure out how to\n+// translate a requirement like\n+//\n+//     <D as Database<'0>>::guard: 'r\n+//\n+// into a requirement that `'0: 'r` -- in particular, it fails to do\n+// so because it *also* knows that `<D as Database<'a>>::Guard: 'a`\n+// from the trait definition. Faced with so many choices, the current\n+// solver opts to do nothing.\n+//\n+// Fixed by tweaking the solver to recognize that the constraint from\n+// the environment duplicates one from the trait.\n+//\n+// compile-pass\n+\n+#![crate_type=\"lib\"]\n+\n+pub trait Database<'a> {\n+    type Guard: 'a;\n+}\n+\n+pub struct Stateful<'a, D: 'a>(&'a D);\n+\n+impl<'b, D: for <'a> Database<'a>> Stateful<'b, D> {\n+    pub fn callee<'a>(&'a self) -> <D as Database<'a>>::Guard {\n+        unimplemented!()\n+    }\n+    pub fn caller<'a>(&'a self) -> <D as Database<'a>>::Guard {\n+        let state = self.callee();\n+        unimplemented!()\n+    }\n+}"}]}