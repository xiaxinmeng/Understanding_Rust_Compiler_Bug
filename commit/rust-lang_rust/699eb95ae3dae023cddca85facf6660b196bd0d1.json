{"sha": "699eb95ae3dae023cddca85facf6660b196bd0d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OWViOTVhZTNkYWUwMjNjZGRjYTg1ZmFjZjY2NjBiMTk2YmQwZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-21T18:42:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-21T18:42:41Z"}, "message": "Auto merge of #50039 - ExpHP:quick-50002, r=alexcrichton\n\nsmaller PR just to fix #50002\n\nI pulled this out of #50010 to make it easier to backport to beta if necessary, considering that inclusive range syntax is stabilizing soon (?).\n\nIt fixes a bug in `<str>::index_mut` with `(..=end)` ranges (#50002), which prior to this fix was not only unusable but also UB in the cases where it \"worked\" (it gave improperly truncated UTF-8).\n\n(not that I can imagine why anybody would *use* `<str>::index_mut`... but I'm not here to judge)", "tree": {"sha": "3832605aa9880861a33e4c5b86e4c7398d9a4337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3832605aa9880861a33e4c5b86e4c7398d9a4337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/699eb95ae3dae023cddca85facf6660b196bd0d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/699eb95ae3dae023cddca85facf6660b196bd0d1", "html_url": "https://github.com/rust-lang/rust/commit/699eb95ae3dae023cddca85facf6660b196bd0d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/699eb95ae3dae023cddca85facf6660b196bd0d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2577ca1ec1449bd83d05e540c57447574ccaa28", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2577ca1ec1449bd83d05e540c57447574ccaa28", "html_url": "https://github.com/rust-lang/rust/commit/d2577ca1ec1449bd83d05e540c57447574ccaa28"}, {"sha": "90b361b3a748e9fb01cd9aec7b83edca2d9e996e", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b361b3a748e9fb01cd9aec7b83edca2d9e996e", "html_url": "https://github.com/rust-lang/rust/commit/90b361b3a748e9fb01cd9aec7b83edca2d9e996e"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "a03b61ec97e51c71210cc43ef10487266f3ca2e0", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/699eb95ae3dae023cddca85facf6660b196bd0d1/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699eb95ae3dae023cddca85facf6660b196bd0d1/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=699eb95ae3dae023cddca85facf6660b196bd0d1", "patch": "@@ -401,6 +401,36 @@ fn test_str_get_maxinclusive() {\n     }\n }\n \n+#[test]\n+fn test_str_slice_rangetoinclusive_ok() {\n+    let s = \"abc\u03b1\u03b2\u03b3\";\n+    assert_eq!(&s[..=2], \"abc\");\n+    assert_eq!(&s[..=4], \"abc\u03b1\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slice_rangetoinclusive_notok() {\n+    let s = \"abc\u03b1\u03b2\u03b3\";\n+    &s[..=3];\n+}\n+\n+#[test]\n+fn test_str_slicemut_rangetoinclusive_ok() {\n+    let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n+    let s: &mut str = &mut s;\n+    assert_eq!(&mut s[..=2], \"abc\");\n+    assert_eq!(&mut s[..=4], \"abc\u03b1\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slicemut_rangetoinclusive_notok() {\n+    let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n+    let s: &mut str = &mut s;\n+    &mut s[..=3];\n+}\n+\n #[test]\n fn test_is_char_boundary() {\n     let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam \u03b2-release \ud83d\udc31123\";"}, {"sha": "5b52119d0310abccd0035239fe33f5c427e7db4d", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/699eb95ae3dae023cddca85facf6660b196bd0d1/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699eb95ae3dae023cddca85facf6660b196bd0d1/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=699eb95ae3dae023cddca85facf6660b196bd0d1", "patch": "@@ -2100,18 +2100,13 @@ mod traits {\n         fn index(self, slice: &str) -> &Self::Output {\n             assert!(self.end != usize::max_value(),\n                 \"attempted to index str up to maximum usize\");\n-            let end = self.end + 1;\n-            self.get(slice).unwrap_or_else(|| super::slice_error_fail(slice, 0, end))\n+            (..self.end+1).index(slice)\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n             assert!(self.end != usize::max_value(),\n                 \"attempted to index str up to maximum usize\");\n-            if slice.is_char_boundary(self.end) {\n-                unsafe { self.get_unchecked_mut(slice) }\n-            } else {\n-                super::slice_error_fail(slice, 0, self.end + 1)\n-            }\n+            (..self.end+1).index_mut(slice)\n         }\n     }\n "}]}