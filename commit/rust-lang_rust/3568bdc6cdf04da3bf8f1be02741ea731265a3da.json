{"sha": "3568bdc6cdf04da3bf8f1be02741ea731265a3da", "node_id": "C_kwDOAAsO6NoAKDM1NjhiZGM2Y2RmMDRkYTNiZjhmMWJlMDI3NDFlYTczMTI2NWEzZGE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-26T10:43:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-26T14:49:28Z"}, "message": "Revert \"add `DefId` to unsafety violations and display function path in E0133\"\n\nThis reverts commit 8b8f6653cfd54525714f02efe7af0a0f830e185c.", "tree": {"sha": "f0b01b7b7588baf7c0cf525b12a77525d4113e53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b01b7b7588baf7c0cf525b12a77525d4113e53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3568bdc6cdf04da3bf8f1be02741ea731265a3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3568bdc6cdf04da3bf8f1be02741ea731265a3da", "html_url": "https://github.com/rust-lang/rust/commit/3568bdc6cdf04da3bf8f1be02741ea731265a3da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3568bdc6cdf04da3bf8f1be02741ea731265a3da/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c988cfa0b7f4d3bc5b1cb40dc5002f5adbfb9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c988cfa0b7f4d3bc5b1cb40dc5002f5adbfb9ad", "html_url": "https://github.com/rust-lang/rust/commit/1c988cfa0b7f4d3bc5b1cb40dc5002f5adbfb9ad"}], "stats": {"total": 338, "additions": 171, "deletions": 167}, "files": [{"sha": "4d4eed179ca9decda55a9e01beaab400cffa4f26", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -12,7 +12,6 @@ use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use smallvec::SmallVec;\n-use std::borrow::Cow;\n use std::cell::Cell;\n use std::fmt::{self, Debug};\n \n@@ -29,7 +28,7 @@ pub enum UnsafetyViolationKind {\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationDetails {\n-    CallToUnsafeFunction(Option<DefId>),\n+    CallToUnsafeFunction,\n     UseOfInlineAssembly,\n     InitializingTypeWith,\n     CastOfPointerToInt,\n@@ -40,95 +39,66 @@ pub enum UnsafetyViolationDetails {\n     AccessToUnionField,\n     MutationOfLayoutConstrainedField,\n     BorrowOfLayoutConstrainedField,\n-    CallToFunctionWith(DefId),\n+    CallToFunctionWith,\n }\n \n impl UnsafetyViolationDetails {\n-    pub fn simple_description(&self) -> &'static str {\n-        use UnsafetyViolationDetails::*;\n-\n-        match self {\n-            CallToUnsafeFunction(..) => \"call to unsafe function\",\n-            UseOfInlineAssembly => \"use of inline assembly\",\n-            InitializingTypeWith => \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n-            CastOfPointerToInt => \"cast of pointer to int\",\n-            UseOfMutableStatic => \"use of mutable static\",\n-            UseOfExternStatic => \"use of extern static\",\n-            DerefOfRawPointer => \"dereference of raw pointer\",\n-            AssignToDroppingUnionField => \"assignment to union field that might need dropping\",\n-            AccessToUnionField => \"access to union field\",\n-            MutationOfLayoutConstrainedField => \"mutation of layout constrained field\",\n-            BorrowOfLayoutConstrainedField => {\n-                \"borrow of layout constrained field with interior mutability\"\n-            }\n-            CallToFunctionWith(..) => \"call to function with `#[target_feature]`\",\n-        }\n-    }\n-\n-    pub fn description_and_note(&self, tcx: TyCtxt<'_>) -> (Cow<'static, str>, &'static str) {\n+    pub fn description_and_note(&self) -> (&'static str, &'static str) {\n         use UnsafetyViolationDetails::*;\n         match self {\n-            CallToUnsafeFunction(did) => (\n-                if let Some(did) = did {\n-                    Cow::from(format!(\"call to unsafe function `{}`\", tcx.def_path_str(*did)))\n-                } else {\n-                    Cow::Borrowed(self.simple_description())\n-                },\n+            CallToUnsafeFunction => (\n+                \"call to unsafe function\",\n                 \"consult the function's documentation for information on how to avoid undefined \\\n                  behavior\",\n             ),\n             UseOfInlineAssembly => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"use of inline assembly\",\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n             ),\n             InitializingTypeWith => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n                 \"initializing a layout restricted type's field with a value outside the valid \\\n                  range is undefined behavior\",\n             ),\n-            CastOfPointerToInt => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"casting pointers to integers in constants\",\n-            ),\n+            CastOfPointerToInt => {\n+                (\"cast of pointer to int\", \"casting pointers to integers in constants\")\n+            }\n             UseOfMutableStatic => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"use of mutable static\",\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n                  races will cause undefined behavior\",\n             ),\n             UseOfExternStatic => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"use of extern static\",\n                 \"extern statics are not controlled by the Rust type system: invalid data, \\\n                  aliasing violations or data races will cause undefined behavior\",\n             ),\n             DerefOfRawPointer => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"dereference of raw pointer\",\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n             AssignToDroppingUnionField => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"assignment to union field that might need dropping\",\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),\n             AccessToUnionField => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"access to union field\",\n                 \"the field may not be properly initialized: using uninitialized data will cause \\\n                  undefined behavior\",\n             ),\n             MutationOfLayoutConstrainedField => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"mutation of layout constrained field\",\n                 \"mutating layout constrained fields cannot statically be checked for valid values\",\n             ),\n             BorrowOfLayoutConstrainedField => (\n-                Cow::Borrowed(self.simple_description()),\n+                \"borrow of layout constrained field with interior mutability\",\n                 \"references to fields of layout constrained fields lose the constraints. Coupled \\\n                  with interior mutability, the field can be changed to invalid values\",\n             ),\n-            CallToFunctionWith(did) => (\n-                Cow::from(format!(\n-                    \"call to function `{}` with `#[target_feature]`\",\n-                    tcx.def_path_str(*did)\n-                )),\n+            CallToFunctionWith => (\n+                \"call to function with `#[target_feature]`\",\n                 \"can only be called if the required target features are available\",\n             ),\n         }"}, {"sha": "dde79214b16470e16b942d08992448172c2e1874", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\n                         UnsafetyViolationKind::General,\n-                        UnsafetyViolationDetails::CallToUnsafeFunction(func_id.copied()),\n+                        UnsafetyViolationDetails::CallToUnsafeFunction,\n                     )\n                 }\n \n@@ -381,7 +381,7 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n             self.require_unsafe(\n                 UnsafetyViolationKind::General,\n-                UnsafetyViolationDetails::CallToFunctionWith(func_did),\n+                UnsafetyViolationDetails::CallToFunctionWith,\n             )\n         }\n     }\n@@ -580,8 +580,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let UnsafetyCheckResult { violations, unused_unsafes, .. } = tcx.unsafety_check_result(def_id);\n \n     for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n-        let (description, note) =\n-            ty::print::with_no_trimmed_paths!(details.description_and_note(tcx));\n+        let (description, note) = details.description_and_note();\n \n         // Report an error.\n         let unsafe_fn_msg =\n@@ -598,7 +597,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     description,\n                     unsafe_fn_msg,\n                 )\n-                .span_label(source_info.span, details.simple_description())\n+                .span_label(source_info.span, description)\n                 .note(note)\n                 .emit();\n             }"}, {"sha": "2114fb59ba3a629048cea13bead38b92a544a017", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.mir.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,29 +1,29 @@\n-error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:17:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:23:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:24:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function"}, {"sha": "c941dc27aa307dcf2f9d4b9c1e31fd483bf83d2f", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -11,11 +11,15 @@ impl S {\n async unsafe fn f() {}\n \n async fn g() {\n-    S::f(); //~ ERROR call to unsafe function `S::f` is unsafe\n-    f(); //~ ERROR call to unsafe function `f` is unsafe\n+    S::f();\n+    //[mir]~^ ERROR call to unsafe function is unsafe\n+    //[thir]~^^ ERROR call to unsafe function `S::f` is unsafe\n+    f();\n+    //[mir]~^ ERROR call to unsafe function is unsafe\n+    //[thir]~^^ ERROR call to unsafe function `f` is unsafe\n }\n \n fn main() {\n-    S::f(); //[mir]~ ERROR call to unsafe function `S::f` is unsafe\n-    f(); //[mir]~ ERROR call to unsafe function `f` is unsafe\n+    S::f(); //[mir]~ ERROR call to unsafe function is unsafe\n+    f(); //[mir]~ ERROR call to unsafe function is unsafe\n }"}, {"sha": "68d97d3fd7d5fd178bd33564686378920e0f821d", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -7,7 +7,7 @@ LL |     S::f();\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:17:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function"}, {"sha": "a60100ddaeaeb1b40e282202cbc8b03e212a0b26", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `std::pin::Pin::<P>::new_unchecked` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };"}, {"sha": "4cd0fd2eaf76d035a9225cb8f6728f17bac3d437", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,13 +1,13 @@\n-error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];\n    |                 ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:12:5\n    |\n LL |     foo();\n    |     ^^^^^ call to unsafe function"}, {"sha": "afe645ae8815c69be70f111f3c91b5f9034cbc27", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -7,7 +7,8 @@ const unsafe extern \"C\" fn foo() -> usize { 5 }\n \n fn main() {\n     let a: [u8; foo()];\n-    //~^ ERROR call to unsafe function `foo` is unsafe and requires unsafe function or block\n+    //[mir]~^ call to unsafe function is unsafe and requires unsafe function or block\n+    //[thir]~^^ call to unsafe function `foo` is unsafe and requires unsafe function or block\n     foo();\n-    //[mir]~^ ERROR call to unsafe function `foo` is unsafe and requires unsafe function or block\n+    //[mir]~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n }"}, {"sha": "b11d5e2c2fc729092954da02bf092c3edde49202", "filename": "src/test/ui/error-codes/E0133.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/E0133.rs:7:5\n    |\n LL |     f();"}, {"sha": "d3cf5d84fdd98be1457cf37de3bc8e034b48e678", "filename": "src/test/ui/foreign-unsafe-fn-called.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `test::free` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();"}, {"sha": "67302ea1bcddb04c35d98c4277038552f1b383f6", "filename": "src/test/ui/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -9,5 +9,6 @@ mod test {\n \n fn main() {\n     test::free();\n-    //~^ ERROR call to unsafe function `test::free` is unsafe\n+    //[mir]~^ ERROR call to unsafe function is unsafe\n+    //[thir]~^^ ERROR call to unsafe function `test::free` is unsafe\n }"}, {"sha": "26b2f9f2713118988be3b6db66c55bde479a9e80", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,20 +1,20 @@\n-error[E0133]: call to unsafe function `std::intrinsics::unchecked_add` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function `std::intrinsics::unchecked_sub` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function `std::intrinsics::unchecked_mul` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);"}, {"sha": "1d470fb5e0f00b41904244964b096fafb4954039", "filename": "src/test/ui/issues/issue-28776.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `std::ptr::write` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);"}, {"sha": "f395c30b8155a54554e9d97e871e73c7b6529365", "filename": "src/test/ui/issues/issue-3080.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `X::with` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();"}, {"sha": "6134d6889ff6cb7f2dbae943a469f935dc6f8747", "filename": "src/test/ui/issues/issue-5844.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `issue_5844_aux::rand` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();"}, {"sha": "0ef7b8b09f11fd8db36d0d868e38834da722fb42", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,77 +1,77 @@\n-error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:24:5\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:26:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:25:5\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:29:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:30:5\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:36:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:31:5\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:39:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:36:5\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:46:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:37:5\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:49:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:38:5\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:52:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:44:5\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:60:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:47:18\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:65:18\n    |\n LL | const name: () = sse2();\n    |                  ^^^^^^ call to function with `#[target_feature]`"}, {"sha": "cebc6f947840459fce5f103c60c5b1f5a4d5883e", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -20,30 +20,50 @@ impl Quux {\n }\n \n fn foo() {\n-    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n-    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n+    sse2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n+    avx_bmi2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"sse2\")]\n fn bar() {\n-    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n+    avx_bmi2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"avx\")]\n fn baz() {\n-    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n-    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n+    sse2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n+    avx_bmi2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"avx\")]\n #[target_feature(enable = \"bmi2\")]\n fn qux() {\n-    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n+    sse2();\n+    //[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+    //[thir]~^^ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n }\n \n-const name: () = sse2(); //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n+const name: () = sse2();\n+//[mir]~^ ERROR call to function with `#[target_feature]` is unsafe\n+//[thir]~^^ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n \n fn main() {}"}, {"sha": "c75ac6e8b9ae0c9561a60837bd4c03f3de2a10b2", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -7,71 +7,71 @@ LL |     sse2();\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:24:5\n+  --> $DIR/safe-calls.rs:26:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:25:5\n+  --> $DIR/safe-calls.rs:29:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:30:5\n+  --> $DIR/safe-calls.rs:36:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:31:5\n+  --> $DIR/safe-calls.rs:39:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:36:5\n+  --> $DIR/safe-calls.rs:46:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:37:5\n+  --> $DIR/safe-calls.rs:49:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:38:5\n+  --> $DIR/safe-calls.rs:52:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:44:5\n+  --> $DIR/safe-calls.rs:60:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:47:18\n+  --> $DIR/safe-calls.rs:65:18\n    |\n LL | const name: () = sse2();\n    |                  ^^^^^^ call to function with `#[target_feature]`"}, {"sha": "1e21a6b37a991eff5e7c01dda28a5c6b04f47fb0", "filename": "src/test/ui/threads-sendsync/issue-43733.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,12 +1,12 @@\n-error[E0133]: call to unsafe function `std::thread::$LOCALKEYINNER::<T>::get` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/issue-43733.rs:21:5\n    |\n LL |     __KEY.get(Default::default)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function `std::thread::LocalKey::<T>::new` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/issue-43733.rs:26:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);"}, {"sha": "0ac6f588fb1d9976f9bd7b84fdb776d0f6be3f97", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -19,13 +19,13 @@ static __KEY: std::thread::__OsLocalKeyInner<Foo> = std::thread::__OsLocalKeyInn\n \n fn __getit(_: Option<&mut Option<RefCell<String>>>) -> std::option::Option<&'static Foo> {\n     __KEY.get(Default::default)\n-    //[mir]~^ ERROR call to unsafe function `std::thread::\n+    //[mir]~^ ERROR call to unsafe function is unsafe\n     //[thir]~^^ ERROR call to unsafe function `__\n }\n \n static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n-//[mir]~^ ERROR call to unsafe function `std::thread::LocalKey::<T>::new` is unsafe\n-//[thir]~^^ ERROR call to unsafe function `LocalKey::<T>::new` is unsafe\n+//[mir]~^ ERROR call to unsafe function is unsafe\n+//[thir]~^^ ERROR call to unsafe function `LocalKey::<T>::new`\n \n fn main() {\n     FOO.with(|foo| println!(\"{}\", foo.borrow()));"}, {"sha": "8baef433410096b71e50b9665355e9572ec33367", "filename": "src/test/ui/threads-sendsync/tls-dtors-are-run-in-a-static-binary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // no-prefer-dynamic\n // ignore-emscripten no threads support\n+\n static mut HIT: bool = false;\n \n struct Foo;"}, {"sha": "fd58e1b1ebe37908ac070d9c28c6168a85027ee4", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,8 +1,8 @@\n-error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function `unsf`\n+   |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n@@ -12,23 +12,23 @@ LL | #![deny(unsafe_op_in_unsafe_fn)]\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:14:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:15:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:16:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:17:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:19:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:20:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n@@ -39,50 +39,50 @@ note: the lint level is defined here\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n-error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:28:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function `unsf`\n+   |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:8\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:29:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:33:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:33:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:35:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:47:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:49:5\n    |\n LL |     unsafe { unsafe { unsf() } }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:58:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:60:5\n    |\n LL | unsafe fn allow_level() {\n    | ----------------------- because it's nested under this `unsafe` fn\n@@ -92,13 +92,13 @@ LL |     unsafe { unsf() }\n    |\n    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:51:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:53:9\n    |\n LL | #[allow(unsafe_op_in_unsafe_fn)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:70:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:72:9\n    |\n LL | unsafe fn nested_allow_level() {\n    | ------------------------------ because it's nested under this `unsafe` fn\n@@ -108,21 +108,21 @@ LL |         unsafe { unsf() }\n    |\n    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:63:13\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:65:13\n    |\n LL |     #[allow(unsafe_op_in_unsafe_fn)]\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n+error[E0133]: call to unsafe function is unsafe and requires unsafe block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:83:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function"}, {"sha": "30b072340341bbfa2c9b2032bd997ecf2cfee49a", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -10,7 +10,8 @@ static mut VOID: () = ();\n \n unsafe fn deny_level() {\n     unsf();\n-    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n+    //[mir]~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //[thir]~^^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     *PTR;\n     //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n@@ -25,7 +26,8 @@ unsafe fn deny_level() {\n #[deny(warnings)]\n unsafe fn warning_level() {\n     unsf();\n-    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n+    //[mir]~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //[thir]~^^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     *PTR;\n     //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n@@ -74,10 +76,12 @@ unsafe fn nested_allow_level() {\n \n fn main() {\n     unsf();\n-    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n+    //[mir]~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //[thir]~^^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     #[allow(unsafe_op_in_unsafe_fn)]\n     {\n         unsf();\n-        //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe function or block\n+        //[mir]~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+        //[thir]~^^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe function or block\n     }\n }"}, {"sha": "2ba6a72930df802455becb8a2e37820f13ddb862", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -12,23 +12,23 @@ LL | #![deny(unsafe_op_in_unsafe_fn)]\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:14:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:15:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:16:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:17:5\n    |\n LL |     VOID = ();\n    |     ^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:19:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:20:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n@@ -40,51 +40,51 @@ LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:28:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:8\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:29:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:33:5\n    |\n LL |     VOID = ();\n    |     ^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:33:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:35:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:47:14\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:49:14\n    |\n LL |     unsafe { unsafe { unsf() } }\n    |     ------   ^^^^^^ unnecessary `unsafe` block\n    |     |\n    |     because it's nested under this `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:58:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:60:5\n    |\n LL | unsafe fn allow_level() {\n    | ----------------------- because it's nested under this `unsafe` fn\n@@ -93,7 +93,7 @@ LL |     unsafe { unsf() }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:70:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:72:9\n    |\n LL | unsafe fn nested_allow_level() {\n    | ------------------------------ because it's nested under this `unsafe` fn\n@@ -102,15 +102,15 @@ LL |         unsafe { unsf() }\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:83:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function"}, {"sha": "3031be720f02e8dbdd4514b290ee7052013f73ae", "filename": "src/test/ui/unsafe/unsafe-const-fn.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `dummy` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);"}, {"sha": "1d6fa4cbf407d9357793be3e4901c35fa23a9d6f", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n    |\n LL |     f();"}, {"sha": "55072dcc6c314e1f1a3bb382c4ece9282074d5d7", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -4,5 +4,7 @@\n unsafe fn f() { return; }\n \n fn main() {\n-    f(); //~ ERROR call to unsafe function `f` is unsafe\n+    f();\n+    //[mir]~^ ERROR call to unsafe function is unsafe\n+    //[thir]~^^ ERROR call to unsafe function `f` is unsafe\n }"}, {"sha": "b08a7109dda57566934650b12c64157305f6a3fb", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();"}, {"sha": "9517598c7ce57e20a2987f0bc7c92ea7ce3e2ffc", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3568bdc6cdf04da3bf8f1be02741ea731265a3da/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs?ref=3568bdc6cdf04da3bf8f1be02741ea731265a3da", "patch": "@@ -5,5 +5,7 @@ unsafe fn f() { return; }\n \n fn main() {\n     let x = f;\n-    x(); //~ ERROR call to unsafe function `f` is unsafe\n+    x();\n+    //[mir]~^ ERROR call to unsafe function is unsafe\n+    //[thir]~^^ ERROR call to unsafe function `f` is unsafe\n }"}]}