{"sha": "4cc6b4f9bf056e49127eee470a3585250c19a87c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYzZiNGY5YmYwNTZlNDkxMjdlZWU0NzBhMzU4NTI1MGMxOWE4N2M=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-28T20:46:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-28T20:47:25Z"}, "message": "Fix many clippy warnings", "tree": {"sha": "09d79b5bef37843c92992ebf396d080ee13aeb65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09d79b5bef37843c92992ebf396d080ee13aeb65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cc6b4f9bf056e49127eee470a3585250c19a87c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc6b4f9bf056e49127eee470a3585250c19a87c", "html_url": "https://github.com/rust-lang/rust/commit/4cc6b4f9bf056e49127eee470a3585250c19a87c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cc6b4f9bf056e49127eee470a3585250c19a87c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5103a258aa806b4072c7081c6cb71a102979852e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5103a258aa806b4072c7081c6cb71a102979852e", "html_url": "https://github.com/rust-lang/rust/commit/5103a258aa806b4072c7081c6cb71a102979852e"}], "stats": {"total": 197, "additions": 88, "deletions": 109}, "files": [{"sha": "01073d26e832a98fd68cf6ac7463c6fe17abde98", "filename": "src/abi/comments.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -11,9 +11,9 @@ use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, impl Module>) {\n-    fx.add_global_comment(format!(\n-        \"kind  loc.idx   param    pass mode                            ty\"\n-    ));\n+    fx.add_global_comment(\n+        \"kind  loc.idx   param    pass mode                            ty\".to_string(),\n+    );\n }\n \n pub(super) fn add_arg_comment<'tcx>(\n@@ -56,9 +56,9 @@ pub(super) fn add_arg_comment<'tcx>(\n \n pub(super) fn add_locals_header_comment(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     fx.add_global_comment(String::new());\n-    fx.add_global_comment(format!(\n-        \"kind  local ty                              size align (abi,pref)\"\n-    ));\n+    fx.add_global_comment(\n+        \"kind  local ty                              size align (abi,pref)\".to_string(),\n+    );\n }\n \n pub(super) fn add_local_place_comments<'tcx>("}, {"sha": "1fa36b944f721c27589173afd543b7c5ed2b6dfb", "filename": "src/abi/mod.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -300,7 +300,7 @@ impl<'tcx, M: Module> FunctionCx<'_, 'tcx, M> {\n         return_ty: Ty<'tcx>,\n     ) -> CValue<'tcx> {\n         let (input_tys, args): (Vec<_>, Vec<_>) = args\n-            .into_iter()\n+            .iter()\n             .map(|arg| {\n                 (\n                     self.clif_type(arg.layout().ty).unwrap(),\n@@ -421,34 +421,31 @@ pub(crate) fn codegen_fn_prelude<'tcx>(\n \n         // While this is normally an optimization to prevent an unnecessary copy when an argument is\n         // not mutated by the current function, this is necessary to support unsized arguments.\n-        match arg_kind {\n-            ArgKind::Normal(Some(val)) => {\n-                if let Some((addr, meta)) = val.try_to_ptr() {\n-                    let local_decl = &fx.mir.local_decls[local];\n-                    //                       v this ! is important\n-                    let internally_mutable = !val.layout().ty.is_freeze(\n-                        fx.tcx.at(local_decl.source_info.span),\n-                        ParamEnv::reveal_all(),\n-                    );\n-                    if local_decl.mutability == mir::Mutability::Not && !internally_mutable {\n-                        // We wont mutate this argument, so it is fine to borrow the backing storage\n-                        // of this argument, to prevent a copy.\n-\n-                        let place = if let Some(meta) = meta {\n-                            CPlace::for_ptr_with_extra(addr, meta, val.layout())\n-                        } else {\n-                            CPlace::for_ptr(addr, val.layout())\n-                        };\n-\n-                        #[cfg(debug_assertions)]\n-                        self::comments::add_local_place_comments(fx, place, local);\n-\n-                        assert_eq!(fx.local_map.push(place), local);\n-                        continue;\n-                    }\n+        if let ArgKind::Normal(Some(val)) = arg_kind {\n+            if let Some((addr, meta)) = val.try_to_ptr() {\n+                let local_decl = &fx.mir.local_decls[local];\n+                //                       v this ! is important\n+                let internally_mutable = !val.layout().ty.is_freeze(\n+                    fx.tcx.at(local_decl.source_info.span),\n+                    ParamEnv::reveal_all(),\n+                );\n+                if local_decl.mutability == mir::Mutability::Not && !internally_mutable {\n+                    // We wont mutate this argument, so it is fine to borrow the backing storage\n+                    // of this argument, to prevent a copy.\n+\n+                    let place = if let Some(meta) = meta {\n+                        CPlace::for_ptr_with_extra(addr, meta, val.layout())\n+                    } else {\n+                        CPlace::for_ptr(addr, val.layout())\n+                    };\n+\n+                    #[cfg(debug_assertions)]\n+                    self::comments::add_local_place_comments(fx, place, local);\n+\n+                    assert_eq!(fx.local_map.push(place), local);\n+                    continue;\n                 }\n             }\n-            _ => {}\n         }\n \n         let place = make_local_place(fx, local, layout, is_ssa);\n@@ -568,7 +565,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         }\n         args\n     } else {\n-        args.into_iter()\n+        args.iter()\n             .map(|arg| trans_operand(fx, arg))\n             .collect::<Vec<_>>()\n     };"}, {"sha": "6c5916550ff639f52a99c14bd8ce34c0321f4da0", "filename": "src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -123,15 +123,15 @@ fn codegen_inner(\n         .unwrap();\n \n     let mut ctx = Context::new();\n-    ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig.clone());\n+    ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n     {\n         let mut func_ctx = FunctionBuilderContext::new();\n         let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n \n         let block = bcx.create_block();\n         bcx.switch_to_block(block);\n         let args = (&[usize_ty, usize_ty])\n-            .into_iter()\n+            .iter()\n             .map(|&ty| bcx.append_block_param(block, ty))\n             .collect::<Vec<Value>>();\n "}, {"sha": "9a970efbcfd0b6c653e936a7de28aed4426d129a", "filename": "src/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -132,7 +132,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             }\n \n             // ok, don't skip this\n-            return false;\n+            false\n         })\n     }\n "}, {"sha": "2f0157c257b98cb74ad02b18ab1e02b2ed5d629a", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -7,7 +7,7 @@ use crate::prelude::*;\n \n #[cfg(all(feature = \"jit\", unix))]\n #[no_mangle]\n-pub static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n+static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n     libc::PTHREAD_MUTEX_INITIALIZER;\n \n pub(crate) fn init_global_lock("}, {"sha": "aac37b376dc356fcc06bc1acef7a48433ee12ae2", "filename": "src/backend.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -73,7 +73,7 @@ impl WriteDebugInfo for ObjectProduct {\n         // FIXME use SHT_X86_64_UNWIND for .eh_frame\n         let section_id = self.object.add_section(\n             segment,\n-            name.clone(),\n+            name,\n             if id == SectionId::EhFrame {\n                 SectionKind::ReadOnlyData\n             } else {\n@@ -201,6 +201,5 @@ pub(crate) fn make_module(sess: &Session, name: String) -> ObjectModule {\n     if std::env::var(\"CG_CLIF_FUNCTION_SECTIONS\").is_ok() {\n         builder.per_function_section(true);\n     }\n-    let module = ObjectModule::new(builder);\n-    module\n+    ObjectModule::new(builder)\n }"}, {"sha": "3e455dbc0e201172caac728dbe4a7d7c805d5ed0", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -753,7 +753,7 @@ fn trans_stmt<'tcx>(\n                 }\n                 Rvalue::Aggregate(kind, operands) => match **kind {\n                     AggregateKind::Array(_ty) => {\n-                        for (i, operand) in operands.into_iter().enumerate() {\n+                        for (i, operand) in operands.iter().enumerate() {\n                             let operand = trans_operand(fx, operand);\n                             let index = fx.bcx.ins().iconst(fx.pointer_type, i as i64);\n                             let to = lval.place_index(fx, index);\n@@ -938,7 +938,7 @@ pub(crate) fn trans_place<'tcx>(\n                         let ptr = cplace.to_ptr();\n                         cplace = CPlace::for_ptr(\n                             ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * (from as i64)),\n-                            fx.layout_of(fx.tcx.mk_array(elem_ty, u64::from(to) - u64::from(from))),\n+                            fx.layout_of(fx.tcx.mk_array(elem_ty, to - from)),\n                         );\n                     }\n                     ty::Slice(elem_ty) => {"}, {"sha": "57204de1135be435c524b2fbbb3ce69d608da6ff", "filename": "src/cast.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -181,12 +181,10 @@ pub(crate) fn clif_int_or_float_cast(\n                 fx.bcx.ins().select(has_overflow, max_val, val)\n             };\n             fx.bcx.ins().ireduce(to_ty, val)\n+        } else if to_signed {\n+            fx.bcx.ins().fcvt_to_sint_sat(to_ty, from)\n         } else {\n-            if to_signed {\n-                fx.bcx.ins().fcvt_to_sint_sat(to_ty, from)\n-            } else {\n-                fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n-            }\n+            fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n         }\n     } else if from_ty.is_float() && to_ty.is_float() {\n         // float -> float"}, {"sha": "d6a38bdafc9ba36c413b4a302af57884d1ad9a60", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -21,9 +21,9 @@ pub(crate) fn maybe_codegen<'tcx>(\n     match bin_op {\n         BinOp::BitAnd | BinOp::BitOr | BinOp::BitXor => {\n             assert!(!checked);\n-            return None;\n+            None\n         }\n-        BinOp::Add | BinOp::Sub if !checked => return None,\n+        BinOp::Add | BinOp::Sub if !checked => None,\n         BinOp::Add => {\n             let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n             return Some(if is_signed {\n@@ -57,7 +57,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 };\n                 fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty)\n             };\n-            return Some(res);\n+            Some(res)\n         }\n         BinOp::Div => {\n             assert!(!checked);\n@@ -77,7 +77,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n         }\n         BinOp::Lt | BinOp::Le | BinOp::Eq | BinOp::Ge | BinOp::Gt | BinOp::Ne => {\n             assert!(!checked);\n-            return None;\n+            None\n         }\n         BinOp::Shl | BinOp::Shr => {\n             let is_overflow = if checked {"}, {"sha": "bdf9ccba62afb9668f57cb6477544bcefe21d974", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -188,7 +188,7 @@ pub(crate) fn trans_const_value<'tcx>(\n             match x {\n                 Scalar::Raw { data, size } => {\n                     assert_eq!(u64::from(size), layout.size.bytes());\n-                    return CValue::const_val(fx, layout, data);\n+                    CValue::const_val(fx, layout, data)\n                 }\n                 Scalar::Ptr(ptr) => {\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n@@ -232,7 +232,7 @@ pub(crate) fn trans_const_value<'tcx>(\n                     } else {\n                         base_addr\n                     };\n-                    return CValue::by_val(val, layout);\n+                    CValue::by_val(val, layout)\n                 }\n             }\n         }\n@@ -293,14 +293,12 @@ fn data_id_for_static(\n     let rlinkage = tcx.codegen_fn_attrs(def_id).linkage;\n     let linkage = if definition {\n         crate::linkage::get_static_linkage(tcx, def_id)\n+    } else if rlinkage == Some(rustc_middle::mir::mono::Linkage::ExternalWeak)\n+        || rlinkage == Some(rustc_middle::mir::mono::Linkage::WeakAny)\n+    {\n+        Linkage::Preemptible\n     } else {\n-        if rlinkage == Some(rustc_middle::mir::mono::Linkage::ExternalWeak)\n-            || rlinkage == Some(rustc_middle::mir::mono::Linkage::WeakAny)\n-        {\n-            Linkage::Preemptible\n-        } else {\n-            Linkage::Import\n-        }\n+        Linkage::Import\n     };\n \n     let instance = Instance::mono(tcx, def_id).polymorphize(tcx);"}, {"sha": "f6f795e45615c9d39c898f89e1eac52b68a3fcd9", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -195,9 +195,7 @@ impl Writer for WriterRelocate {\n                     });\n                     self.write_udata(0, size)\n                 }\n-                _ => {\n-                    return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe));\n-                }\n+                _ => Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe)),\n             },\n         }\n     }"}, {"sha": "d226755d85de0eb631ce6f5978dd5251c74c5434", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -49,7 +49,7 @@ fn osstr_as_utf8_bytes(path: &OsStr) -> &[u8] {\n \n pub(crate) const MD5_LEN: usize = 16;\n \n-pub fn make_file_info(hash: SourceFileHash) -> Option<FileInfo> {\n+pub(crate) fn make_file_info(hash: SourceFileHash) -> Option<FileInfo> {\n     if hash.kind == SourceFileHashAlgorithm::Md5 {\n         let mut buf = [0u8; MD5_LEN];\n         buf.copy_from_slice(hash.hash_bytes());\n@@ -190,7 +190,7 @@ impl<'tcx> DebugContext<'tcx> {\n             if current_file_changed {\n                 let file_id = line_program_add_file(line_program, line_strings, &file);\n                 line_program.row().file = file_id;\n-                last_file = Some(file.clone());\n+                last_file = Some(file);\n             }\n \n             line_program.row().line = line;"}, {"sha": "3f47df7d844b326dc47cc4a7dfd12bae2da29cf0", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -94,7 +94,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n     let args = std::iter::once(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string())\n-        .chain(args.split(\" \"))\n+        .chain(args.split(' '))\n         .map(|arg| CString::new(arg).unwrap())\n         .collect::<Vec<_>>();\n     let mut argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n@@ -151,7 +151,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n             }\n             let dlsym_name = if cfg!(target_os = \"macos\") {\n                 // On macOS `dlsym` expects the name without leading `_`.\n-                assert!(name.starts_with(\"_\"), \"{:?}\", name);\n+                assert!(name.starts_with('_'), \"{:?}\", name);\n                 &name[1..]\n             } else {\n                 &name"}, {"sha": "171445f2d71b62840204f24837e835ea7c3712ee", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n         llvm.x86.sse2.cmp.ps | llvm.x86.sse2.cmp.pd, (c x, c y, o kind) {\n             let kind_const = crate::constant::mir_operand_get_const_val(fx, kind).expect(\"llvm.x86.sse2.cmp.* kind not const\");\n-            let flt_cc = match kind_const.val.try_to_bits(Size::from_bytes(1)).expect(&format!(\"kind not scalar: {:?}\", kind_const)) {\n+            let flt_cc = match kind_const.val.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind_const)) {\n                 0 => FloatCC::Equal,\n                 1 => FloatCC::LessThan,\n                 2 => FloatCC::LessThanOrEqual,\n@@ -84,7 +84,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         llvm.x86.sse2.psrli.d, (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).expect(&format!(\"imm8 not scalar: {:?}\", imm8)) {\n+                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n                 };\n@@ -94,7 +94,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         llvm.x86.sse2.pslli.d, (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).expect(&format!(\"imm8 not scalar: {:?}\", imm8)) {\n+                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n                 };"}, {"sha": "2e31c4669e25bb16be06813d419695493377566e", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -127,7 +127,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 );\n             };\n \n-            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).expect(&format!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (_lane_type, lane_count) = lane_type_and_count(fx.tcx, base.layout());\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n@@ -149,7 +149,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 );\n             };\n \n-            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).expect(&format!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (_lane_type, lane_count) = lane_type_and_count(fx.tcx, v.layout());\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));"}, {"sha": "7daff2a24b959fcbab6b8dba63d5c5ecdc24cfab", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -9,6 +9,7 @@\n )]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n+#![warn(unreachable_pub)]\n \n #[cfg(feature = \"jit\")]\n extern crate libc;"}, {"sha": "dc1e2107ce712d2cf51032434ddbbfe77316e3a6", "filename": "src/linkage.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinkage.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -25,11 +25,9 @@ pub(crate) fn get_static_linkage(tcx: TyCtxt<'_>, def_id: DefId) -> Linkage {\n             RLinkage::ExternalWeak | RLinkage::WeakAny => Linkage::Preemptible,\n             _ => panic!(\"{:?}\", linkage),\n         }\n+    } else if tcx.is_reachable_non_generic(def_id) {\n+        Linkage::Export\n     } else {\n-        if tcx.is_reachable_non_generic(def_id) {\n-            Linkage::Export\n-        } else {\n-            Linkage::Hidden\n-        }\n+        Linkage::Hidden\n     }\n }"}, {"sha": "10f515e38ead279f1a080d3b94511e10fe10a4f6", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -76,7 +76,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             .unwrap();\n \n         let mut ctx = Context::new();\n-        ctx.func = Function::with_name_signature(ExternalName::user(0, 0), cmain_sig.clone());\n+        ctx.func = Function::with_name_signature(ExternalName::user(0, 0), cmain_sig);\n         {\n             let mut func_ctx = FunctionBuilderContext::new();\n             let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);"}, {"sha": "cda2a187ff9b7c1f4ac0b3f3755c7f9429db90e0", "filename": "src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -29,7 +29,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n                         .expect(\"Rlib metadata file too big to load into memory.\"),\n                 );\n                 ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n                 return Ok(rustc_erase_owner!(buf.map_owner_box()));\n             }\n         }\n@@ -47,7 +47,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n             .data()\n             .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))?\n             .to_owned();\n-        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n         Ok(rustc_erase_owner!(buf.map_owner_box()))\n     }\n }"}, {"sha": "3c939d5a58639869e2dc22dc8b0ec1dd602a51df", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -228,7 +228,8 @@ pub(super) fn optimize_function(\n             match *potential_stores {\n                 [] => {\n                     #[cfg(debug_assertions)]\n-                    clif_comments.add_comment(load, format!(\"[BUG?] Reading uninitialized memory\"));\n+                    clif_comments\n+                        .add_comment(load, \"[BUG?] Reading uninitialized memory\".to_string());\n                 }\n                 [store]\n                     if spatial_overlap(&opt_ctx.ctx.func, store, load) == SpatialOverlap::Full"}, {"sha": "ff878af7f5eef9049199acd55e2c4a8405b7b8d6", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -131,11 +131,11 @@ impl FuncWriter for &'_ CommentWriter {\n             if !comment.is_empty() {\n                 writeln!(w, \"; {}\", comment)?;\n             } else {\n-                writeln!(w, \"\")?;\n+                writeln!(w)?;\n             }\n         }\n         if !self.global_comments.is_empty() {\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n         }\n \n         self.super_preamble(w, func, reg_info)\n@@ -153,7 +153,7 @@ impl FuncWriter for &'_ CommentWriter {\n         if let Some(comment) = self.entity_comments.get(&entity) {\n             writeln!(w, \" ; {}\", comment.replace('\\n', \"\\n; \"))\n         } else {\n-            writeln!(w, \"\")\n+            writeln!(w)\n         }\n     }\n \n@@ -261,7 +261,7 @@ pub(crate) fn write_clif_file<'tcx>(\n         writeln!(file, \"set is_pic\")?;\n         writeln!(file, \"set enable_simd\")?;\n         writeln!(file, \"target {} haswell\", target_triple)?;\n-        writeln!(file, \"\")?;\n+        writeln!(file)?;\n         file.write_all(clif.as_bytes())?;\n     };\n     if let Err(err) = res {"}, {"sha": "9a2470ba40d34af150a29592c554b00c2ac3781f", "filename": "src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -27,10 +27,10 @@ fn codegen_field<'tcx>(\n             return simple(fx);\n         }\n         match field_layout.ty.kind() {\n-            ty::Slice(..) | ty::Str | ty::Foreign(..) => return simple(fx),\n+            ty::Slice(..) | ty::Str | ty::Foreign(..) => simple(fx),\n             ty::Adt(def, _) if def.repr.packed() => {\n                 assert_eq!(layout.align.abi.bytes(), 1);\n-                return simple(fx);\n+                simple(fx)\n             }\n             _ => {\n                 // We have to align the offset for DST's\n@@ -237,15 +237,12 @@ impl<'tcx> CValue<'tcx> {\n \n         let clif_ty = fx.clif_type(layout.ty).unwrap();\n \n-        match layout.ty.kind() {\n-            ty::Bool => {\n-                assert!(\n-                    const_val == 0 || const_val == 1,\n-                    \"Invalid bool 0x{:032X}\",\n-                    const_val\n-                );\n-            }\n-            _ => {}\n+        if let ty::Bool = layout.ty.kind() {\n+            assert!(\n+                const_val == 0 || const_val == 1,\n+                \"Invalid bool 0x{:032X}\",\n+                const_val\n+            );\n         }\n \n         let val = match layout.ty.kind() {"}, {"sha": "238abc0d8bdfa557ecd65611a91af4063383d8c8", "filename": "src/vtable.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc6b4f9bf056e49127eee470a3585250c19a87c/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=4cc6b4f9bf056e49127eee470a3585250c19a87c", "patch": "@@ -108,14 +108,14 @@ fn build_vtable<'tcx>(\n         (&[]).iter()\n     };\n     let methods = methods.cloned().map(|opt_mth| {\n-        opt_mth.map_or(None, |(def_id, substs)| {\n-            Some(import_function(\n+        opt_mth.map(|(def_id, substs)| {\n+            import_function(\n                 tcx,\n                 &mut fx.cx.module,\n                 Instance::resolve_for_vtable(tcx, ParamEnv::reveal_all(), def_id, substs)\n                     .unwrap()\n                     .polymorphize(fx.tcx),\n-            ))\n+            )\n         })\n     });\n     components.extend(methods);\n@@ -137,15 +137,7 @@ fn build_vtable<'tcx>(\n         }\n     }\n \n-    data_ctx.set_align(\n-        fx.tcx\n-            .data_layout\n-            .pointer_align\n-            .pref\n-            .bytes()\n-            .try_into()\n-            .unwrap(),\n-    );\n+    data_ctx.set_align(fx.tcx.data_layout.pointer_align.pref.bytes());\n \n     let data_id = fx\n         .cx"}]}