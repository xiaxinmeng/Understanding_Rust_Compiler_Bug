{"sha": "5442a473624f9d463a21508a5dbdd5a5ec326c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NDJhNDczNjI0ZjlkNDYzYTIxNTA4YTVkYmRkNWE1ZWMzMjZjMTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T06:36:31Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:44Z"}, "message": "std::rand: remove seed_task_rng and RUST_SEED.", "tree": {"sha": "0a62edca8bdc9dcb0b3cb55144337e7a529d2185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a62edca8bdc9dcb0b3cb55144337e7a529d2185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5442a473624f9d463a21508a5dbdd5a5ec326c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5442a473624f9d463a21508a5dbdd5a5ec326c15", "html_url": "https://github.com/rust-lang/rust/commit/5442a473624f9d463a21508a5dbdd5a5ec326c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5442a473624f9d463a21508a5dbdd5a5ec326c15/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62fededd8e9cfd85197f224123a057df43a6feab", "url": "https://api.github.com/repos/rust-lang/rust/commits/62fededd8e9cfd85197f224123a057df43a6feab", "html_url": "https://github.com/rust-lang/rust/commit/62fededd8e9cfd85197f224123a057df43a6feab"}], "stats": {"total": 85, "additions": 9, "deletions": 76}, "files": [{"sha": "aa4b496338d943522bc633a031cfc857b26507f7", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 9, "deletions": 76, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5442a473624f9d463a21508a5dbdd5a5ec326c15/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5442a473624f9d463a21508a5dbdd5a5ec326c15/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=5442a473624f9d463a21508a5dbdd5a5ec326c15", "patch": "@@ -28,13 +28,6 @@ from an operating-system source of randomness, e.g. `/dev/urandom` on\n Unix systems, and will automatically reseed itself from this source\n after generating 32 KiB of random data.\n \n-It can be explicitly seeded on a per-task basis with `seed_task_rng`;\n-this only affects the task-local generator in the task in which it is\n-called. It can be seeded globally using the `RUST_SEED` environment\n-variable, which should be an integer. Setting `RUST_SEED` will seed\n-every task-local RNG with the same seed. Using either of these will\n-disable the automatic reseeding.\n-\n # Examples\n \n ```rust\n@@ -67,7 +60,6 @@ use prelude::*;\n use str;\n use u64;\n use vec;\n-use os::getenv;\n \n pub use self::isaac::{IsaacRng, Isaac64Rng};\n pub use self::os::OSRng;\n@@ -673,25 +665,11 @@ impl XorShiftRng {\n }\n \n /// Controls how the task-local RNG is reseeded.\n-enum TaskRngReseeder {\n-    /// Reseed using the StdRng::new() function, i.e. reading new\n-    /// randomness.\n-    WithNew,\n-    /// Don't reseed at all, e.g. when it has been explicitly seeded\n-    /// by the user.\n-    DontReseed\n-}\n-\n-impl Default for TaskRngReseeder {\n-    fn default() -> TaskRngReseeder { WithNew }\n-}\n+struct TaskRngReseeder;\n \n impl reseeding::Reseeder<StdRng> for TaskRngReseeder {\n     fn reseed(&mut self, rng: &mut StdRng) {\n-        match *self {\n-            WithNew => *rng = StdRng::new(),\n-            DontReseed => {}\n-        }\n+        *rng = StdRng::new();\n     }\n }\n static TASK_RNG_RESEED_THRESHOLD: uint = 32_768;\n@@ -706,61 +684,26 @@ local_data_key!(TASK_RNG_KEY: @mut TaskRng)\n /// chaining style, e.g. `task_rng().gen::<int>()`.\n ///\n /// The RNG provided will reseed itself from the operating system\n-/// after generating a certain amount of randomness, unless it was\n-/// explicitly seeded either by `seed_task_rng` or by setting the\n-/// `RUST_SEED` environmental variable to some integer.\n+/// after generating a certain amount of randomness.\n ///\n-/// The internal RNG used is platform and architecture dependent, so\n-/// may yield differing sequences on different computers, even when\n-/// explicitly seeded with `seed_task_rng`. If absolute consistency is\n-/// required, explicitly select an RNG, e.g. `IsaacRng` or\n-/// `Isaac64Rng`.\n+/// The internal RNG used is platform and architecture dependent, even\n+/// if the operating system random number generator is rigged to give\n+/// the same sequence always. If absolute consistency is required,\n+/// explicitly select an RNG, e.g. `IsaacRng` or `Isaac64Rng`.\n pub fn task_rng() -> @mut TaskRng {\n     let r = local_data::get(TASK_RNG_KEY, |k| k.map(|&k| *k));\n     match r {\n         None => {\n-            // check the environment\n-            let (sub_rng, reseeder) = match getenv(\"RUST_SEED\") {\n-                None => (StdRng::new(), WithNew),\n-\n-                Some(s) => match from_str::<uint>(s) {\n-                    None => fail2!(\"`RUST_SEED` is `{}`, should be a positive integer.\", s),\n-                    // explicitly seeded, so don't overwrite the seed later.\n-                    Some(seed) => (SeedableRng::from_seed(&[seed]), DontReseed),\n-                }\n-            };\n-\n-            let rng = @mut reseeding::ReseedingRng::new(sub_rng,\n+            let rng = @mut reseeding::ReseedingRng::new(StdRng::new(),\n                                                         TASK_RNG_RESEED_THRESHOLD,\n-                                                        reseeder);\n+                                                        TaskRngReseeder);\n             local_data::set(TASK_RNG_KEY, rng);\n             rng\n         }\n         Some(rng) => rng\n     }\n }\n \n-/// Explicitly seed (or reseed) the task-local random number\n-/// generator. This stops the RNG from automatically reseeding itself.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::rand;\n-///\n-/// fn main() {\n-///     rand::seed_task_rng(&[10u]);\n-///     println!(\"Same every time: {}\", rand::random::<uint>());\n-///\n-///     rand::seed_task_rng(&[1u, 2, 3, 4, 5, 6, 7, 8]);\n-///     println!(\"Same every time: {}\", rand::random::<float>());\n-/// }\n-/// ```\n-pub fn seed_task_rng(seed: &[uint]) {\n-    let t_r = task_rng();\n-    (*t_r).reseed((DontReseed, seed));\n-}\n-\n // Allow direct chaining with `task_rng`\n impl<R: Rng> Rng for @mut R {\n     #[inline]\n@@ -996,16 +939,6 @@ mod test {\n         let string2 = r.gen_ascii_str(100);\n         assert_eq!(string1, string2);\n     }\n-\n-    #[test]\n-    fn test_seed_task_rng() {\n-        seed_task_rng([1]);\n-        let first = random::<uint>();\n-\n-        seed_task_rng([1]);\n-        let second = random::<uint>();\n-        assert_eq!(first, second);\n-    }\n }\n \n #[cfg(test)]"}]}