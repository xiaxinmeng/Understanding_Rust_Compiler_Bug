{"sha": "627f473dd426497972cce58ba64e8b0ff2409078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyN2Y0NzNkZDQyNjQ5Nzk3MmNjZTU4YmE2NGU4YjBmZjI0MDkwNzg=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-10T12:07:42Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-10T14:40:10Z"}, "message": "suggest await before try when performing trait selection", "tree": {"sha": "a5f960742b5befc1fa32710807f97b8b46383ba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f960742b5befc1fa32710807f97b8b46383ba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/627f473dd426497972cce58ba64e8b0ff2409078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/627f473dd426497972cce58ba64e8b0ff2409078", "html_url": "https://github.com/rust-lang/rust/commit/627f473dd426497972cce58ba64e8b0ff2409078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/627f473dd426497972cce58ba64e8b0ff2409078/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114cd006f52272618bd64382213cd08eaa313136", "url": "https://api.github.com/repos/rust-lang/rust/commits/114cd006f52272618bd64382213cd08eaa313136", "html_url": "https://github.com/rust-lang/rust/commit/114cd006f52272618bd64382213cd08eaa313136"}], "stats": {"total": 102, "additions": 92, "deletions": 10}, "files": [{"sha": "ef748bcee6e2d82e5164f3d31d3651d0b8b99e7b", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/627f473dd426497972cce58ba64e8b0ff2409078/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627f473dd426497972cce58ba64e8b0ff2409078/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=627f473dd426497972cce58ba64e8b0ff2409078", "patch": "@@ -25,7 +25,7 @@\n     )\n )]\n #[doc(alias = \"?\")]\n- #[cfg_attr(not(bootstrap), lang = \"try_trait\")]\n+#[cfg_attr(not(bootstrap), lang = \"try_trait\")]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "272827cfef83024604dc419043c635528a47b716", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/627f473dd426497972cce58ba64e8b0ff2409078/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627f473dd426497972cce58ba64e8b0ff2409078/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=627f473dd426497972cce58ba64e8b0ff2409078", "patch": "@@ -400,6 +400,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n+                        //self.sugggest_await_before_try(&mut err, &obligation, &trait_ref);\n+                        debug!(\n+                            \"suggest_await_befor_try: trait_predicate={:?} obligation={:?}, trait_ref={:?}\",\n+                            trait_predicate, obligation, trait_ref\n+                        );\n+                        self.suggest_await_befor_try(\n+                            &mut err,\n+                            &obligation,\n+                            trait_ref.self_ty(),\n+                            span,\n+                        );\n                         if self.suggest_impl_trait(&mut err, span, &obligation, &trait_ref) {\n                             err.emit();\n                             return;"}, {"sha": "d0b39d6016af2d54d19fdef6e184e16fa894aadd", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/627f473dd426497972cce58ba64e8b0ff2409078/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627f473dd426497972cce58ba64e8b0ff2409078/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=627f473dd426497972cce58ba64e8b0ff2409078", "patch": "@@ -1,8 +1,10 @@\n use super::{\n     EvaluationResult, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation,\n+    SelectionContext,\n };\n \n use crate::infer::InferCtxt;\n+use crate::traits::normalize_projection_type;\n \n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_hir as hir;\n@@ -150,6 +152,15 @@ pub trait InferCtxtExt<'tcx> {\n         T: fmt::Display;\n \n     fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>);\n+\n+    /// Suggest to await before try: future? => future.await?\n+    fn suggest_await_befor_try(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        obligation: &PredicateObligation<'tcx>,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -1765,6 +1776,75 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             suggested_limit, self.tcx.crate_name,\n         ));\n     }\n+\n+    fn suggest_await_befor_try(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        obligation: &PredicateObligation<'tcx>,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+    ) {\n+        debug!(\"suggest_await_befor_try: obligation={:?}, span={:?}\", obligation, span);\n+        let body_hir_id = obligation.cause.body_id;\n+        let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n+        if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(item_id) {\n+            let body = self.tcx.hir().body(body_id);\n+            if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n+                // Check for `Future` implementations by constructing a predicate to\n+                // prove: `<T as Future>::Output == U`\n+                let future_trait = self.tcx.lang_items().future_trait().unwrap();\n+                let item_def_id = self\n+                    .tcx\n+                    .associated_items(future_trait)\n+                    .in_definition_order()\n+                    .next()\n+                    .unwrap()\n+                    .def_id;\n+                // `<T as Future>::Output`\n+                let projection_ty = ty::ProjectionTy {\n+                    // `T`\n+                    substs: self\n+                        .tcx\n+                        .mk_substs_trait(ty, self.fresh_substs_for_item(span, item_def_id)),\n+                    // `Future::Output`\n+                    item_def_id,\n+                };\n+\n+                let cause = ObligationCause::misc(span, body_hir_id);\n+                let mut selcx = SelectionContext::new(self);\n+\n+                let mut obligations = vec![];\n+                let normalized_ty = normalize_projection_type(\n+                    &mut selcx,\n+                    obligation.param_env,\n+                    projection_ty,\n+                    obligation.cause.clone(),\n+                    0,\n+                    &mut obligations,\n+                );\n+\n+                debug!(\"suggest_await_befor_try: normalized_projection_type {:?}\", normalized_ty);\n+                let try_trait_ref_id = self.tcx.lang_items().try_trait().unwrap();\n+                if let Some(try_trait_ref) = self.tcx.impl_trait_ref(try_trait_ref_id) {\n+                    let try_predicate = try_trait_ref.without_const().to_predicate();\n+                    let try_obligation =\n+                        Obligation::new(cause, obligation.param_env, try_predicate);\n+                    debug!(\"suggest_await_befor_try: try_trait_obligation {:?}\", try_obligation);\n+                    if self.predicate_may_hold(&try_obligation) {\n+                        debug!(\"try_obligation holds\");\n+                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                            err.span_suggestion(\n+                                span,\n+                                \"consider using `.await` here\",\n+                                format!(\"{}.await\", snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "c142e88b7de55bef18660b4f3878d7bec60cd371", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/627f473dd426497972cce58ba64e8b0ff2409078/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627f473dd426497972cce58ba64e8b0ff2409078/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=627f473dd426497972cce58ba64e8b0ff2409078", "patch": "@@ -5317,15 +5317,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     item_def_id,\n                 };\n \n-                let cause = traits::ObligationCause::misc(sp, self.body_id);\n-                let normalized_ty = self.fulfillment_cx.borrow_mut().normalize_projection_type(\n-                    &self.infcx,\n-                    self.param_env,\n-                    projection_ty,\n-                    cause,\n-                );\n-                debug!(\"suggest_missing_await: projection_type {:?}\", normalized_ty);\n-\n                 let predicate =\n                     ty::Predicate::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n                         projection_ty,"}]}