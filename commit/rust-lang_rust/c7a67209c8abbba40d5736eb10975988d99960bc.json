{"sha": "c7a67209c8abbba40d5736eb10975988d99960bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YTY3MjA5YzhhYmJiYTQwZDU3MzZlYjEwOTc1OTg4ZDk5OTYwYmM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-23T14:25:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-23T14:25:44Z"}, "message": "Rollup merge of #79287 - jonas-schievink:const-trait-impl, r=oli-obk\n\nAllow using generic trait methods in `const fn`\n\nNext step for https://github.com/rust-lang/rust/issues/67792, this now also allows code like the following:\n\n```rust\nstruct S;\n\nimpl const PartialEq for S {\n    fn eq(&self, _: &S) -> bool {\n        true\n    }\n}\n\nconst fn equals_self<T: PartialEq>(t: &T) -> bool {\n    *t == *t\n}\n\npub const EQ: bool = equals_self(&S);\n```\n\nThis works by threading const-ness of trait predicates through trait selection, in particular through `ParamCandidate`, and exposing it in the resulting `ImplSource`.\n\nSince this change makes two bounds `T: Trait` and `T: ?const Trait` that only differ in their const-ness be treated like different bounds, candidate winnowing has been changed to drop the `?const` candidate in favor of the const candidate, to avoid ambiguities when both a const and a non-const bound is present.", "tree": {"sha": "ca9b89360981cd5e633c353465552a07ade4cbe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca9b89360981cd5e633c353465552a07ade4cbe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7a67209c8abbba40d5736eb10975988d99960bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfu8ZoCRBK7hj4Ov3rIwAAdHIIAFAHxPNQzMoKcBlPlBMJp01g\nF1PVntUk18jNCbjcImsRt68p+gT+XTFbOnIFOhG+Yo87zPsKqSRHr1EJw4AWTRkF\nEgV4UzjUhIkC4kw7hJWl4oj40GIhkkgWubRvvUHMwfvgl2xQZ0ugjYFOzBNhXZaG\npJE6PQChBlwLTpKA/8snGX7C9aTJmqCIudvhxkJS08TvxhNeLVTSP0ZmQApVOxQB\n9LeigsAcpSUq+0Vt35vwJ0rddudZZdSmhaa6x2wYq8wga2suHgjniJdBKUScXu68\nrhikf/RdA9YtgW5KP7WTr+f4qT5+y5SOGNPzAxa9yxMvOlX/MoEnpFycOC5Js1E=\n=K7SS\n-----END PGP SIGNATURE-----\n", "payload": "tree ca9b89360981cd5e633c353465552a07ade4cbe2\nparent c58c245e2cc550b69f14595ffe9e967de12411c7\nparent cb406848eccc3665dfadb241d94fe27137bd0dcb\nauthor Jonas Schievink <jonasschievink@gmail.com> 1606141544 +0100\ncommitter GitHub <noreply@github.com> 1606141544 +0100\n\nRollup merge of #79287 - jonas-schievink:const-trait-impl, r=oli-obk\n\nAllow using generic trait methods in `const fn`\n\nNext step for https://github.com/rust-lang/rust/issues/67792, this now also allows code like the following:\n\n```rust\nstruct S;\n\nimpl const PartialEq for S {\n    fn eq(&self, _: &S) -> bool {\n        true\n    }\n}\n\nconst fn equals_self<T: PartialEq>(t: &T) -> bool {\n    *t == *t\n}\n\npub const EQ: bool = equals_self(&S);\n```\n\nThis works by threading const-ness of trait predicates through trait selection, in particular through `ParamCandidate`, and exposing it in the resulting `ImplSource`.\n\nSince this change makes two bounds `T: Trait` and `T: ?const Trait` that only differ in their const-ness be treated like different bounds, candidate winnowing has been changed to drop the `?const` candidate in favor of the const candidate, to avoid ambiguities when both a const and a non-const bound is present.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a67209c8abbba40d5736eb10975988d99960bc", "html_url": "https://github.com/rust-lang/rust/commit/c7a67209c8abbba40d5736eb10975988d99960bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7a67209c8abbba40d5736eb10975988d99960bc/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58c245e2cc550b69f14595ffe9e967de12411c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c58c245e2cc550b69f14595ffe9e967de12411c7", "html_url": "https://github.com/rust-lang/rust/commit/c58c245e2cc550b69f14595ffe9e967de12411c7"}, {"sha": "cb406848eccc3665dfadb241d94fe27137bd0dcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb406848eccc3665dfadb241d94fe27137bd0dcb", "html_url": "https://github.com/rust-lang/rust/commit/cb406848eccc3665dfadb241d94fe27137bd0dcb"}], "stats": {"total": 263, "additions": 230, "deletions": 33}, "files": [{"sha": "8273c2d291d096020ede192b4f10f6c7a2e257e0", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -309,7 +309,7 @@ impl<'tcx, I: Iterator<Item = PredicateObligation<'tcx>>> Iterator for FilterToT\n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n         while let Some(obligation) = self.base_iterator.next() {\n             if let Some(data) = obligation.predicate.to_opt_poly_trait_ref() {\n-                return Some(data);\n+                return Some(data.value);\n             }\n         }\n         None"}, {"sha": "1902a97e21c013a4b84f2b534245110f7d08b7e2", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -16,6 +16,7 @@ use crate::ty::{self, AdtKind, Ty, TyCtxt};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::Constness;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n@@ -457,7 +458,7 @@ pub enum ImplSource<'tcx, N> {\n     /// for some type parameter. The `Vec<N>` represents the\n     /// obligations incurred from normalizing the where-clause (if\n     /// any).\n-    Param(Vec<N>),\n+    Param(Vec<N>, Constness),\n \n     /// Virtual calls through an object.\n     Object(ImplSourceObjectData<'tcx, N>),\n@@ -487,7 +488,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn nested_obligations(self) -> Vec<N> {\n         match self {\n             ImplSource::UserDefined(i) => i.nested,\n-            ImplSource::Param(n) => n,\n+            ImplSource::Param(n, _) => n,\n             ImplSource::Builtin(i) => i.nested,\n             ImplSource::AutoImpl(d) => d.nested,\n             ImplSource::Closure(c) => c.nested,\n@@ -502,7 +503,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn borrow_nested_obligations(&self) -> &[N] {\n         match &self {\n             ImplSource::UserDefined(i) => &i.nested[..],\n-            ImplSource::Param(n) => &n[..],\n+            ImplSource::Param(n, _) => &n[..],\n             ImplSource::Builtin(i) => &i.nested[..],\n             ImplSource::AutoImpl(d) => &d.nested[..],\n             ImplSource::Closure(c) => &c.nested[..],\n@@ -524,7 +525,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                 substs: i.substs,\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSource::Param(n) => ImplSource::Param(n.into_iter().map(f).collect()),\n+            ImplSource::Param(n, ct) => ImplSource::Param(n.into_iter().map(f).collect(), ct),\n             ImplSource::Builtin(i) => ImplSource::Builtin(ImplSourceBuiltinData {\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),"}, {"sha": "e056240f9415045ae2f18f600a9ea62f5dec8f71", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -101,7 +101,7 @@ pub enum SelectionCandidate<'tcx> {\n         /// `false` if there are no *further* obligations.\n         has_nested: bool,\n     },\n-    ParamCandidate(ty::PolyTraitRef<'tcx>),\n+    ParamCandidate(ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>),\n     ImplCandidate(DefId),\n     AutoImplCandidate(DefId),\n "}, {"sha": "5a17d38c73460bacbb994669ba118171ed4050d8", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -21,7 +21,9 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n \n             super::ImplSource::Object(ref d) => write!(f, \"{:?}\", d),\n \n-            super::ImplSource::Param(ref n) => write!(f, \"ImplSourceParamData({:?})\", n),\n+            super::ImplSource::Param(ref n, ct) => {\n+                write!(f, \"ImplSourceParamData({:?}, {:?})\", n, ct)\n+            }\n \n             super::ImplSource::Builtin(ref d) => write!(f, \"{:?}\", d),\n "}, {"sha": "a6f91278a3bc4a58c0f718f9b671e29a1173a283", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -42,7 +42,9 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate};\n+use rustc_hir::{\n+    Constness, HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate,\n+};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n@@ -1635,6 +1637,8 @@ nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n // This is the impl for `&'a InternalSubsts<'a>`.\n nop_list_lift! {substs; GenericArg<'a> => GenericArg<'tcx>}\n \n+CloneLiftImpls! { for<'tcx> { Constness, } }\n+\n pub mod tls {\n     use super::{ptr_eq, GlobalCtxt, TyCtxt};\n "}, {"sha": "5d8edcf70bfd3329eff91af509afa157cbf3a37a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -1503,9 +1503,11 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n-    pub fn to_opt_poly_trait_ref(self) -> Option<PolyTraitRef<'tcx>> {\n+    pub fn to_opt_poly_trait_ref(self) -> Option<ConstnessAnd<PolyTraitRef<'tcx>>> {\n         match self.skip_binders() {\n-            PredicateAtom::Trait(t, _) => Some(ty::Binder::bind(t.trait_ref)),\n+            PredicateAtom::Trait(t, constness) => {\n+                Some(ConstnessAnd { constness, value: ty::Binder::bind(t.trait_ref) })\n+            }\n             PredicateAtom::Projection(..)\n             | PredicateAtom::Subtype(..)\n             | PredicateAtom::RegionOutlives(..)\n@@ -1947,7 +1949,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n pub struct ConstnessAnd<T> {\n     pub constness: Constness,\n     pub value: T,"}, {"sha": "d00038f345c9950ee022273b7436475c117043fa", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -4,16 +4,18 @@ use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt, TypeAndMut,\n };\n+use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n-use rustc_trait_selection::traits::{self, TraitEngine};\n+use rustc_trait_selection::traits::{self, SelectionContext, TraitEngine};\n \n use std::mem;\n use std::ops::Deref;\n@@ -765,9 +767,39 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     }\n                 };\n \n-                // Resolve a trait method call to its concrete implementation, which may be in a\n-                // `const` trait impl.\n-                if self.tcx.features().const_trait_impl {\n+                // Attempting to call a trait method?\n+                if let Some(trait_id) = tcx.trait_of_item(callee) {\n+                    if !self.tcx.features().const_trait_impl {\n+                        self.check_op(ops::FnCallNonConst(callee));\n+                        return;\n+                    }\n+\n+                    let trait_ref = TraitRef::from_method(tcx, trait_id, substs);\n+                    let obligation = Obligation::new(\n+                        ObligationCause::dummy(),\n+                        param_env,\n+                        Binder::bind(TraitPredicate {\n+                            trait_ref: TraitRef::from_method(tcx, trait_id, substs),\n+                        }),\n+                    );\n+\n+                    let implsrc = tcx.infer_ctxt().enter(|infcx| {\n+                        let mut selcx = SelectionContext::new(&infcx);\n+                        selcx.select(&obligation).unwrap()\n+                    });\n+\n+                    // If the method is provided via a where-clause that does not use the `?const`\n+                    // opt-out, the call is allowed.\n+                    if let Some(ImplSource::Param(_, hir::Constness::Const)) = implsrc {\n+                        debug!(\n+                            \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n+                            trait_ref, param_env\n+                        );\n+                        return;\n+                    }\n+\n+                    // Resolve a trait method call to its concrete implementation, which may be in a\n+                    // `const` trait impl.\n                     let instance = Instance::resolve(tcx, param_env, callee, substs);\n                     debug!(\"Resolving ({:?}) -> {:?}\", callee, instance);\n                     if let Ok(Some(func)) = instance {"}, {"sha": "ca3369b8f1e9d2d2c313f16d3d782faa6efdd752", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -350,11 +350,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Micro-optimization: filter out predicates relating to different traits.\n         let matching_bounds =\n-            all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());\n+            all_bounds.filter(|p| p.value.def_id() == stack.obligation.predicate.def_id());\n \n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         for bound in matching_bounds {\n-            let wc = self.evaluate_where_clause(stack, bound)?;\n+            let wc = self.evaluate_where_clause(stack, bound.value)?;\n             if wc.may_apply() {\n                 candidates.vec.push(ParamCandidate(bound));\n             }"}, {"sha": "a42c8021346496fc6a30b3f2c67e56efa4a24722", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -8,6 +8,7 @@\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n+use rustc_hir::Constness;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n@@ -55,8 +56,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ParamCandidate(param) => {\n-                let obligations = self.confirm_param_candidate(obligation, param);\n-                Ok(ImplSource::Param(obligations))\n+                let obligations = self.confirm_param_candidate(obligation, param.value);\n+                Ok(ImplSource::Param(obligations, param.constness))\n             }\n \n             ImplCandidate(impl_def_id) => {\n@@ -70,7 +71,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             ProjectionCandidate(idx) => {\n                 let obligations = self.confirm_projection_candidate(obligation, idx)?;\n-                Ok(ImplSource::Param(obligations))\n+                // FIXME(jschievink): constness\n+                Ok(ImplSource::Param(obligations, Constness::NotConst))\n             }\n \n             ObjectCandidate(idx) => {\n@@ -106,7 +108,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // This indicates something like `Trait + Send: Send`. In this case, we know that\n                 // this holds because that's what the object type is telling us, and there's really\n                 // no additional obligations to prove and no types in particular to unify, etc.\n-                Ok(ImplSource::Param(Vec::new()))\n+                Ok(ImplSource::Param(Vec::new(), Constness::NotConst))\n             }\n \n             BuiltinUnsizeCandidate => {\n@@ -151,7 +153,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.extend(self.infcx.commit_if_ok(|_| {\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate)\n+                    .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate.value)\n                     .map(|InferOk { obligations, .. }| obligations)\n                     .map_err(|_| Unimplemented)\n             })?);"}, {"sha": "4189a81632aaae2ca2d48b3ab797019f500024cc", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -31,6 +31,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::Constness;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fast_reject;\n@@ -1335,7 +1336,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate, _) => true,\n             (_, BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate) => false,\n \n-            (ParamCandidate(..), ParamCandidate(..)) => false,\n+            (ParamCandidate(other), ParamCandidate(victim)) => {\n+                if other.value == victim.value && victim.constness == Constness::NotConst {\n+                    // Drop otherwise equivalent non-const candidates in favor of const candidates.\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n \n             // Global bounds from the where clause should be ignored\n             // here (see issue #50825). Otherwise, we have a where\n@@ -1354,11 +1362,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | TraitAliasCandidate(..)\n                 | ObjectCandidate(_)\n                 | ProjectionCandidate(_),\n-            ) => !is_global(cand),\n+            ) => !is_global(&cand.value),\n             (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(cand)\n+                is_global(&cand.value)\n             }\n             (\n                 ImplCandidate(_)\n@@ -1373,7 +1381,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(cand) && other.evaluation.must_apply_modulo_regions()\n+                is_global(&cand.value) && other.evaluation.must_apply_modulo_regions()\n             }\n \n             (ProjectionCandidate(i), ProjectionCandidate(j))"}, {"sha": "0133a961c11a7a343f2b89ef857c89f8e8642835", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -498,8 +498,8 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String>\n \n     for (p, _) in predicates {\n         if let Some(poly_trait_ref) = p.to_opt_poly_trait_ref() {\n-            if Some(poly_trait_ref.def_id()) == sized_trait {\n-                types_without_default_bounds.remove(poly_trait_ref.self_ty().skip_binder());\n+            if Some(poly_trait_ref.value.def_id()) == sized_trait {\n+                types_without_default_bounds.remove(poly_trait_ref.value.self_ty().skip_binder());\n                 continue;\n             }\n         }"}, {"sha": "ab4a81c7d152edcc9bcd28e70fbf5d31c9dd7883", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n         let items = predicates.predicates.iter().rev().filter_map(|(pred, span)| {\n             pred.subst_supertrait(tcx, &trait_ref)\n                 .to_opt_poly_trait_ref()\n-                .map(|trait_ref| item.clone_and_push(trait_ref, *span))\n+                .map(|trait_ref| item.clone_and_push(trait_ref.value, *span))\n         });\n         debug!(\"expand_trait_aliases: items={:?}\", items.clone());\n \n@@ -182,7 +182,7 @@ impl Iterator for SupertraitDefIds<'tcx> {\n                 .predicates\n                 .iter()\n                 .filter_map(|(pred, _)| pred.to_opt_poly_trait_ref())\n-                .map(|trait_ref| trait_ref.def_id())\n+                .map(|trait_ref| trait_ref.value.def_id())\n                 .filter(|&super_def_id| visited.insert(super_def_id)),\n         );\n         Some(def_id)"}, {"sha": "5bcb16d21e09c6789326ef4f40b08a763de5ba9e", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -294,7 +294,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n             let mut cause = cause.clone();\n             if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_ref() {\n                 let derived_cause = traits::DerivedObligationCause {\n-                    parent_trait_ref,\n+                    parent_trait_ref: parent_trait_ref.value,\n                     parent_code: Rc::new(obligation.cause.code.clone()),\n                 };\n                 cause.make_mut().code ="}, {"sha": "b011e26d64b9a34c56f9c87181d09c304a60014c", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -1364,7 +1364,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             || {\n                 traits::transitive_bounds(\n                     tcx,\n-                    predicates.iter().filter_map(|(p, _)| p.to_opt_poly_trait_ref()),\n+                    predicates.iter().filter_map(|(p, _)| {\n+                        p.to_opt_poly_trait_ref().map(|trait_ref| trait_ref.value)\n+                    }),\n                 )\n             },\n             || param_name.to_string(),"}, {"sha": "6a511f4ed3ed8492c146ac20153ffb32e60a4dbe", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -0,0 +1,27 @@\n+//! Basic test for calling methods on generic type parameters in `const fn`.\n+\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl const PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+const fn equals_self_wrapper<T: PartialEq>(t: &T) -> bool {\n+    equals_self(t)\n+}\n+\n+pub const EQ: bool = equals_self_wrapper(&S);\n+\n+fn main() {}"}, {"sha": "b39d27779f45f72f5f546e2370d01e61881c37a5", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl const PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+// This duplicate bound should not result in ambiguities. It should be equivalent to a single const\n+// bound.\n+const fn equals_self<T: PartialEq + ?const PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+fn main() {}"}, {"sha": "6d4bfe722dee72058dffbb2f411d6ee6d68f7daf", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+pub const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n+    *t == *t\n+    //~^ ERROR calls in constant functions are limited to constant functions\n+}\n+\n+fn main() {}"}, {"sha": "4b2fc56aaa78a944791f288eeb42035c050ff00e", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/call-generic-method-fail.rs:7:5\n+   |\n+LL |     *t == *t\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "f0e321422215440ea8e090ecf1434f1d277529c0", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst-opt-out.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n+    true\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+// Calling `equals_self` with a type that only has a non-const impl is fine, because we opted out.\n+\n+fn main() {}"}, {"sha": "2c8f6354dc60f652036275c5393197e49e32cda8", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -0,0 +1,26 @@\n+// FIXME(jschievink): this is not rejected correctly (only when the non-const impl is actually used)\n+// ignore-test\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    true\n+}\n+\n+// Calling `equals_self` with something that has a non-const impl should throw an error, despite\n+// it not using the impl.\n+\n+pub const EQ: bool = equals_self(&S);\n+//~^ ERROR\n+\n+fn main() {}"}, {"sha": "e968e6ec7bb80ef33114e1845fd68e46ef1509ac", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -0,0 +1,23 @@\n+//! Basic test for calling methods on generic type parameters in `const fn`.\n+\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl const PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+fn main() {}"}, {"sha": "f9697afe405257aaab6a1e9341bce83cce7a364d", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a67209c8abbba40d5736eb10975988d99960bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=c7a67209c8abbba40d5736eb10975988d99960bc", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             for &(p, _span) in preds {\n                 let p = p.subst(cx.tcx, subst);\n                 if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n-                    if Some(trait_ref.def_id()) == cx.tcx.lang_items().future_trait() {\n+                    if Some(trait_ref.value.def_id()) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;\n                         break;\n                     }"}]}