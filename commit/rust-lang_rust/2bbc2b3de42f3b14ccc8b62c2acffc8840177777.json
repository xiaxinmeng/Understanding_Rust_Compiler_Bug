{"sha": "2bbc2b3de42f3b14ccc8b62c2acffc8840177777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYmMyYjNkZTQyZjNiMTRjY2M4YjYyYzJhY2ZmYzg4NDAxNzc3Nzc=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-25T09:18:53Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-25T10:00:04Z"}, "message": "Document the static keyword", "tree": {"sha": "e80cdcfac9b250f6c994e033d90f21634bae0e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80cdcfac9b250f6c994e033d90f21634bae0e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bbc2b3de42f3b14ccc8b62c2acffc8840177777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbc2b3de42f3b14ccc8b62c2acffc8840177777", "html_url": "https://github.com/rust-lang/rust/commit/2bbc2b3de42f3b14ccc8b62c2acffc8840177777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bbc2b3de42f3b14ccc8b62c2acffc8840177777/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67100f61e62a86f2bf9e38552ee138e231eddc74", "url": "https://api.github.com/repos/rust-lang/rust/commits/67100f61e62a86f2bf9e38552ee138e231eddc74", "html_url": "https://github.com/rust-lang/rust/commit/67100f61e62a86f2bf9e38552ee138e231eddc74"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "746165beab8f5097569f892c9ee4b74ee8fb46e2", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2bbc2b3de42f3b14ccc8b62c2acffc8840177777/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbc2b3de42f3b14ccc8b62c2acffc8840177777/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=2bbc2b3de42f3b14ccc8b62c2acffc8840177777", "patch": "@@ -1030,9 +1030,85 @@ mod self_upper_keyword {}\n //\n /// A place that is valid for the duration of a program.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// A `static` item is similar to a [`const`] item in that it lives for the\n+/// entire duration of the program and need to have its type explicited, with a\n+/// `static` lifetime, outliving any other lifetime. Added to that, `static`\n+/// items represent a precise memory location.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// Static items do not call [`drop`] at the end of the program.\n+///\n+/// There are two types of `static` items: those declared in association with\n+/// the [`mut`] keyword and those without.\n+///\n+/// # Simple `static`s\n+///\n+/// Non-[`mut`] `static` items that contain a type that is not interior mutable\n+/// may be placed in read-only memory. All access to a `static` item are\n+/// considered safe but some restrictions apply. See the [Reference] for more\n+/// information.\n+///\n+/// ```rust\n+/// static FOO: [i32; 5] = [1, 2, 3, 4, 5];\n+///\n+/// let r1 = &FOO as *const _;\n+/// let r2 = &FOO as *const _;\n+/// // With a strictly read-only static, references will have the same adress\n+/// assert_eq!(r1, r2);\n+/// ```\n+///\n+/// # Mutable `static`s\n+///\n+/// If a `static` item is declared with the [`mut`] keyword, then it is allowed\n+/// to be modified by the program. To make concurrency bugs hard to run into,\n+/// all access to a `static mut` require an [`unsafe`] block. Care should be\n+/// taken to ensure access (both read and write) are thread-safe.\n+///\n+/// Despite their unsafety, mutable `static`s are very useful: they can be used\n+/// to represent global state shared by the whole program or be used in\n+/// [`extern`] blocks to bind to variables from C libraries.\n+///\n+/// As global state:\n+///\n+/// ```rust\n+/// # #![allow(unused_variables)]\n+/// # fn main() {}\n+/// # fn atomic_add(_: &mut u32, _: u32) -> u32 { 2 }\n+/// static mut LEVELS: u32 = 0;\n+///\n+/// // This violates the idea of no shared state, and this doesn't internally\n+/// // protect against races, so this function is `unsafe`\n+/// unsafe fn bump_levels_unsafe1() -> u32 {\n+///     let ret = LEVELS;\n+///     LEVELS += 1;\n+///     return ret;\n+/// }\n+///\n+/// // Assuming that we have an atomic_add function which returns the old value,\n+/// // this function is \"safe\" but the meaning of the return value may not be\n+/// // what callers expect, so it's still marked as `unsafe`\n+/// unsafe fn bump_levels_unsafe2() -> u32 {\n+///     return atomic_add(&mut LEVELS, 1);\n+/// }\n+/// ```\n+///\n+/// In an [`extern`] block:\n+///\n+/// ```rust,no_run\n+/// # #![allow(dead_code)]\n+/// extern \"C\" {\n+///     static mut ERROR_MESSAGE: *mut std::os::raw::c_char;\n+/// }\n+/// ```\n+///\n+/// Mutable `static`s, just like simple `static`s, have some restrictions that\n+/// apply to them. See the [Reference] for more information.\n+///\n+/// [`const`]: keyword.const.html\n+/// [`extern`]: keyword.extern.html\n+/// [`mut`]: keyword.mut.html\n+/// [`unsafe`]: keyword.unsafe.html\n+/// [`drop`]: mem/fn.drop.html\n+/// [Reference]: ../reference/items/static-items.html#static-items\n mod static_keyword {}\n \n #[doc(keyword = \"struct\")]"}]}