{"sha": "1db8515c08b76aaf0d10002f6d574a75465fc252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjg1MTVjMDhiNzZhYWYwZDEwMDAyZjZkNTc0YTc1NDY1ZmMyNTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-13T19:03:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-13T19:03:13Z"}, "message": "Merge remote-tracking branch 'erickt/master' into incoming", "tree": {"sha": "6c4c03e117d8476d95b2927a7183544fa383d10e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4c03e117d8476d95b2927a7183544fa383d10e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db8515c08b76aaf0d10002f6d574a75465fc252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db8515c08b76aaf0d10002f6d574a75465fc252", "html_url": "https://github.com/rust-lang/rust/commit/1db8515c08b76aaf0d10002f6d574a75465fc252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db8515c08b76aaf0d10002f6d574a75465fc252/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f95c79b95319a8d91de2a5e361eab8d71375d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f95c79b95319a8d91de2a5e361eab8d71375d05", "html_url": "https://github.com/rust-lang/rust/commit/6f95c79b95319a8d91de2a5e361eab8d71375d05"}, {"sha": "78daa1540c62d9264816b344b429e6a63db7971a", "url": "https://api.github.com/repos/rust-lang/rust/commits/78daa1540c62d9264816b344b429e6a63db7971a", "html_url": "https://github.com/rust-lang/rust/commit/78daa1540c62d9264816b344b429e6a63db7971a"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "5ddd11d2786852531fdd850330f5f22acf8d678f", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1db8515c08b76aaf0d10002f6d574a75465fc252/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db8515c08b76aaf0d10002f6d574a75465fc252/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=1db8515c08b76aaf0d10002f6d574a75465fc252", "patch": "@@ -557,8 +557,8 @@ fn load_source_info(c: cargo, src: source) {\n     if !os::path_exists(srcfile) { ret; }\n     let srcstr = io::read_whole_file_str(srcfile);\n     alt json::from_str(result::get(srcstr)) {\n-        ok(json::dict(_s)) {\n-            let o = parse_source(src.name, json::dict(_s));\n+        ok(json::dict(s)) {\n+            let o = parse_source(src.name, json::dict(s));\n \n             src.key = o.key;\n             src.keyfp = o.keyfp;\n@@ -635,7 +635,7 @@ fn build_cargo_options(argv: [str]) -> options {\n \n fn configure(opts: options) -> cargo {\n     let home = alt get_cargo_root() {\n-        ok(_home) { _home }\n+        ok(home) { home }\n         err(_err) { result::get(get_cargo_sysroot()) }\n     };\n \n@@ -647,11 +647,11 @@ fn configure(opts: options) -> cargo {\n \n     let p = result::get(get_cargo_dir());\n \n-    let sources = map::str_hash::<source>();\n+    let sources = map::str_hash();\n     try_parse_sources(path::connect(home, \"sources.json\"), sources);\n     try_parse_sources(path::connect(home, \"local-sources.json\"), sources);\n \n-    let dep_cache = map::str_hash::<bool>();\n+    let dep_cache = map::str_hash();\n \n     let mut c = {\n         pgp: pgp::supported(),\n@@ -668,9 +668,9 @@ fn configure(opts: options) -> cargo {\n     };\n \n     need_dir(c.root);\n+    need_dir(c.installdir);\n     need_dir(c.sourcedir);\n     need_dir(c.workdir);\n-    need_dir(c.installdir);\n     need_dir(c.libdir);\n     need_dir(c.bindir);\n \n@@ -799,7 +799,7 @@ fn install_source(c: cargo, path: str) {\n \n                     let wd_base = c.workdir + path::path_sep();\n                     let wd = alt tempfile::mkdtemp(wd_base, \"\") {\n-                        some(_wd) { _wd }\n+                        some(wd) { wd }\n                         none { fail #fmt(\"needed temp dir: %s\", wd_base); }\n                     };\n \n@@ -819,8 +819,8 @@ fn install_source(c: cargo, path: str) {\n \n fn install_git(c: cargo, wd: str, url: str, ref: option<str>) {\n     run::program_output(\"git\", [\"clone\", url, wd]);\n-    if option::is_some::<str>(ref) {\n-        let r = option::get::<str>(ref);\n+    if option::is_some(ref) {\n+        let r = option::get(ref);\n         os::change_dir(wd);\n         run::run_program(\"git\", [\"checkout\", r]);\n     }\n@@ -1021,8 +1021,8 @@ fn cmd_uninstall(c: cargo) {\n \n fn install_query(c: cargo, wd: str, target: str) {\n     alt c.dep_cache.find(target) {\n-        some(_inst) {\n-            if _inst {\n+        some(inst) {\n+            if inst {\n                 ret;\n             }\n         }\n@@ -1082,7 +1082,7 @@ fn install_query(c: cargo, wd: str, target: str) {\n fn cmd_install(c: cargo) unsafe {\n     let wd_base = c.workdir + path::path_sep();\n     let wd = alt tempfile::mkdtemp(wd_base, \"\") {\n-        some(_wd) { _wd }\n+        some(wd) { wd }\n         none { fail #fmt(\"needed temp dir: %s\", wd_base); }\n     };\n \n@@ -1536,7 +1536,7 @@ fn cmd_search(c: cargo) {\n fn install_to_dir(srcfile: str, destdir: str) {\n     let newfile = path::connect(destdir, path::basename(srcfile));\n \n-    let status = run::run_program(\"cp\", [srcfile, newfile]);\n+    let status = run::run_program(\"cp\", [\"-r\", srcfile, newfile]);\n     if status == 0 {\n         info(#fmt[\"installed: '%s'\", newfile]);\n     } else {"}, {"sha": "a5a5ac310354009aa7b65ffc844bb69239689cd3", "filename": "src/libstd/json.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1db8515c08b76aaf0d10002f6d574a75465fc252/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db8515c08b76aaf0d10002f6d574a75465fc252/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=1db8515c08b76aaf0d10002f6d574a75465fc252", "patch": "@@ -510,6 +510,14 @@ impl of to_json for json {\n     fn to_json() -> json { self }\n }\n \n+impl of to_json for @json {\n+    fn to_json() -> json { *self }\n+}\n+\n+impl of to_json for int {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n impl of to_json for i8 {\n     fn to_json() -> json { num(self as float) }\n }\n@@ -526,6 +534,10 @@ impl of to_json for i64 {\n     fn to_json() -> json { num(self as float) }\n }\n \n+impl of to_json for uint {\n+    fn to_json() -> json { num(self as float) }\n+}\n+\n impl of to_json for u8 {\n     fn to_json() -> json { num(self as float) }\n }"}]}