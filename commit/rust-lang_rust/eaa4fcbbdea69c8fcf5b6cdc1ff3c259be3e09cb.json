{"sha": "eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTRmY2JiZGVhNjljOGZjZjViNmNkYzFmZjNjMjU5YmUzZTA5Y2I=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-20T22:17:09Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-21T09:45:37Z"}, "message": "Less reallocations", "tree": {"sha": "23e0c63b041a1a172dab72e7979c8d6dae180248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e0c63b041a1a172dab72e7979c8d6dae180248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb", "html_url": "https://github.com/rust-lang/rust/commit/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec731e19df6444b2113c273fc740fd3d5c866b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec731e19df6444b2113c273fc740fd3d5c866b18", "html_url": "https://github.com/rust-lang/rust/commit/ec731e19df6444b2113c273fc740fd3d5c866b18"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "4f0ef52ca04faf7b0aa02cb02d52588c4c4475c9", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb", "patch": "@@ -72,7 +72,6 @@ pub(crate) fn replace_derive_with_manual_impl(\n         items_locator::AssocItemSearch::Exclude,\n         Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n-    .into_iter()\n     .filter_map(|item| match ModuleDef::from(item.as_module_def_id()?) {\n         ModuleDef::Trait(trait_) => Some(trait_),\n         _ => None,"}, {"sha": "5ac1cb48d49a2ee6eed419e04000cbe03bbd37d0", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb", "patch": "@@ -161,7 +161,6 @@ pub fn resolve_completion_edits(\n         items_locator::AssocItemSearch::Include,\n         Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n-    .into_iter()\n     .filter_map(|candidate| {\n         current_module\n             .find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)"}, {"sha": "1881c746f691e91001c13144c8c4ba19c03eb62a", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb", "patch": "@@ -267,7 +267,6 @@ fn path_applicable_imports(\n                 AssocItemSearch::Exclude,\n                 Some(DEFAULT_QUERY_SEARCH_LIMIT),\n             )\n-            .into_iter()\n             .filter_map(|item| {\n                 let mod_path = mod_path(item)?;\n                 Some(LocatedImport::new(mod_path.clone(), item, item, Some(mod_path)))\n@@ -285,7 +284,6 @@ fn path_applicable_imports(\n                 AssocItemSearch::Include,\n                 Some(DEFAULT_QUERY_SEARCH_LIMIT),\n             )\n-            .into_iter()\n             .filter_map(|item| {\n                 import_for_item(\n                     sema.db,\n@@ -430,7 +428,6 @@ fn trait_applicable_items(\n         AssocItemSearch::AssocItemsOnly,\n         Some(DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n-    .into_iter()\n     .filter_map(|input| item_as_assoc(db, input))\n     .filter_map(|assoc| {\n         let assoc_item_trait = assoc.containing_trait(db)?;"}, {"sha": "9af94b86c2dd3747d2e3a828c4303bc423d92f94", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=eaa4fcbbdea69c8fcf5b6cdc1ff3c259be3e09cb", "patch": "@@ -15,7 +15,6 @@ use crate::{\n     symbol_index::{self, FileSymbol},\n     RootDatabase,\n };\n-use rustc_hash::FxHashSet;\n \n /// A value to use, when uncertain which limit to pick.\n pub const DEFAULT_QUERY_SEARCH_LIMIT: usize = 40;\n@@ -32,13 +31,13 @@ pub enum AssocItemSearch {\n }\n \n /// Searches for importable items with the given name in the crate and its dependencies.\n-pub fn items_with_name(\n-    sema: &Semantics<'_, RootDatabase>,\n+pub fn items_with_name<'a>(\n+    sema: &'a Semantics<'_, RootDatabase>,\n     krate: Crate,\n     name: NameToImport,\n     assoc_item_search: AssocItemSearch,\n     limit: Option<usize>,\n-) -> FxHashSet<ItemInNs> {\n+) -> impl Iterator<Item = ItemInNs> + 'a {\n     let _p = profile::span(\"items_with_name\").detail(|| {\n         format!(\n             \"Name: {} ({:?}), crate: {:?}, limit: {:?}\",\n@@ -94,13 +93,13 @@ pub fn items_with_name(\n     find_items(sema, krate, assoc_item_search, local_query, external_query)\n }\n \n-fn find_items(\n-    sema: &Semantics<'_, RootDatabase>,\n+fn find_items<'a>(\n+    sema: &'a Semantics<'_, RootDatabase>,\n     krate: Crate,\n     assoc_item_search: AssocItemSearch,\n     local_query: symbol_index::Query,\n     external_query: import_map::Query,\n-) -> FxHashSet<ItemInNs> {\n+) -> impl Iterator<Item = ItemInNs> + 'a {\n     let _p = profile::span(\"find_items\");\n     let db = sema.db;\n \n@@ -115,21 +114,18 @@ fn find_items(\n     // Query the local crate using the symbol index.\n     let local_results = symbol_index::crate_symbols(db, krate.into(), local_query)\n         .into_iter()\n-        .filter_map(|local_candidate| get_name_definition(sema, &local_candidate))\n+        .filter_map(move |local_candidate| get_name_definition(sema, &local_candidate))\n         .filter_map(|name_definition_to_import| match name_definition_to_import {\n             Definition::ModuleDef(module_def) => Some(ItemInNs::from(module_def)),\n             Definition::Macro(macro_def) => Some(ItemInNs::from(macro_def)),\n             _ => None,\n         });\n \n-    external_importables\n-        .chain(local_results)\n-        .filter(move |&item| match assoc_item_search {\n-            AssocItemSearch::Include => true,\n-            AssocItemSearch::Exclude => !is_assoc_item(item, sema.db),\n-            AssocItemSearch::AssocItemsOnly => is_assoc_item(item, sema.db),\n-        })\n-        .collect()\n+    external_importables.chain(local_results).filter(move |&item| match assoc_item_search {\n+        AssocItemSearch::Include => true,\n+        AssocItemSearch::Exclude => !is_assoc_item(item, sema.db),\n+        AssocItemSearch::AssocItemsOnly => is_assoc_item(item, sema.db),\n+    })\n }\n \n fn get_name_definition("}]}