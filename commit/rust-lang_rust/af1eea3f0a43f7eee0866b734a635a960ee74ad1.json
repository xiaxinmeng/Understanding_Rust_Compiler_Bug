{"sha": "af1eea3f0a43f7eee0866b734a635a960ee74ad1", "node_id": "C_kwDOAAsO6NoAKGFmMWVlYTNmMGE0M2Y3ZWVlMDg2NmI3MzRhNjM1YTk2MGVlNzRhZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-17T22:12:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-17T22:12:34Z"}, "message": "Auto merge of #89841 - cormacrelf:let-else-typed, r=nagisa\n\nImplement let-else type annotations natively\n\nTracking issue: #87335\n\nFixes #89688, fixes #89807, edit: fixes  #89960 as well\n\nAs explained in https://github.com/rust-lang/rust/issues/89688#issuecomment-940405082, the previous desugaring moved the let-else scrutinee into a dummy variable, which meant if you wanted to refer to it again in the else block, it had moved.\n\nThis introduces a new hir type, ~~`hir::LetExpr`~~ `hir::Let`, which takes over all the fields of `hir::ExprKind::Let(...)` and adds an optional type annotation. The `hir::Let` is then treated like a `hir::Local` when type checking a function body, specifically:\n\n* `GatherLocalsVisitor` overrides a new `Visitor::visit_let_expr` and does pretty much exactly what it does for `visit_local`, assigning a local type to the `hir::Let` ~~(they could be deduplicated but they are right next to each other, so at least we know they're the same)~~\n* It reuses the code in `check_decl_local` to typecheck the `hir::Let`, simply returning 'bool' for the expression type after doing that.\n\n* ~~`FnCtxt::check_expr_let` passes this local type in to `demand_scrutinee_type`, and then imitates check_decl_local's pattern checking~~\n* ~~`demand_scrutinee_type` (the blindest change for me, please give this extra scrutiny) uses this local type instead of of creating a new one~~\n    * ~~Just realised the `check_expr_with_needs` was passing NoExpectation further down, need to pass the type there too. And apparently this Expectation API already exists.~~\n\nSome other misc notes:\n\n* ~~Is the clippy code supposed to be autoformatted? I tried not to give huge diffs but maybe some rustfmt changes simply haven't hit it yet.~~\n* in `rustc_ast_lowering/src/block.rs`, I noticed some existing `self.alias_attrs()` calls in `LoweringContext::lower_stmts` seem to be copying attributes from the lowered locals/etc to the statements. Is that right? I'm new at this, I don't know.", "tree": {"sha": "9f8cc77f66d02aaaed38efa615f02fdf8dff8e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8cc77f66d02aaaed38efa615f02fdf8dff8e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af1eea3f0a43f7eee0866b734a635a960ee74ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af1eea3f0a43f7eee0866b734a635a960ee74ad1", "html_url": "https://github.com/rust-lang/rust/commit/af1eea3f0a43f7eee0866b734a635a960ee74ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af1eea3f0a43f7eee0866b734a635a960ee74ad1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece0946d7f60bdee8b9544753a3f1a3acddcb1f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece0946d7f60bdee8b9544753a3f1a3acddcb1f7", "html_url": "https://github.com/rust-lang/rust/commit/ece0946d7f60bdee8b9544753a3f1a3acddcb1f7"}, {"sha": "17c1ff9faa9748557fed92d5406eae5a6b17701b", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c1ff9faa9748557fed92d5406eae5a6b17701b", "html_url": "https://github.com/rust-lang/rust/commit/17c1ff9faa9748557fed92d5406eae5a6b17701b"}], "stats": {"total": 87, "additions": 56, "deletions": 31}, "files": [{"sha": "06d128f5527b5d8ba3d965b65853c1a0507cf153", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -67,20 +67,20 @@ fn is_structural_partial_eq(cx: &LateContext<'tcx>, ty: Ty<'tcx>, other: Ty<'tcx\n impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if_chain! {\n-            if let ExprKind::Let(pat, exp, _) = expr.kind;\n-            if unary_pattern(pat);\n-            let exp_ty = cx.typeck_results().expr_ty(exp);\n-            let pat_ty = cx.typeck_results().pat_ty(pat);\n+            if let ExprKind::Let(let_expr) = expr.kind;\n+            if unary_pattern(let_expr.pat);\n+            let exp_ty = cx.typeck_results().expr_ty(let_expr.init);\n+            let pat_ty = cx.typeck_results().pat_ty(let_expr.pat);\n             if is_structural_partial_eq(cx, exp_ty, pat_ty);\n             then {\n \n                 let mut applicability = Applicability::MachineApplicable;\n-                let pat_str = match pat.kind {\n+                let pat_str = match let_expr.pat.kind {\n                     PatKind::Struct(..) => format!(\n                         \"({})\",\n-                        snippet_with_context(cx, pat.span, expr.span.ctxt(), \"..\", &mut applicability).0,\n+                        snippet_with_context(cx, let_expr.pat.span, expr.span.ctxt(), \"..\", &mut applicability).0,\n                     ),\n-                    _ => snippet_with_context(cx, pat.span, expr.span.ctxt(), \"..\", &mut applicability).0.to_string(),\n+                    _ => snippet_with_context(cx, let_expr.pat.span, expr.span.ctxt(), \"..\", &mut applicability).0.to_string(),\n                 };\n                 span_lint_and_sugg(\n                     cx,\n@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n                     \"try\",\n                     format!(\n                         \"{} == {}\",\n-                        snippet_with_context(cx, exp.span, expr.span.ctxt(), \"..\", &mut applicability).0,\n+                        snippet_with_context(cx, let_expr.init.span, expr.span.ctxt(), \"..\", &mut applicability).0,\n                         pat_str,\n                     ),\n                     applicability,"}, {"sha": "a3aa6be6afd645ccd94a717d431c481af8c1ed5d", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -115,12 +115,12 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Unary(_, e)\n         | ExprKind::Cast(e, _)\n         | ExprKind::Type(e, _)\n-        | ExprKind::Let(_, e, _)\n         | ExprKind::Field(e, _)\n         | ExprKind::AddrOf(_, _, e)\n         | ExprKind::Struct(_, _, Some(e))\n         | ExprKind::Repeat(e, _)\n         | ExprKind::DropTemps(e) => never_loop_expr(e, main_loop_id),\n+        ExprKind::Let(let_expr) => never_loop_expr(let_expr.init, main_loop_id),\n         ExprKind::Array(es) | ExprKind::MethodCall(_, _, es, _) | ExprKind::Tup(es) => {\n             never_loop_expr_all(&mut es.iter(), main_loop_id)\n         },"}, {"sha": "5a2a965716cc6bc457454f304ae9157db0970b9a", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -50,7 +50,7 @@ impl LateLintPass<'_> for ManualAssert {\n                 ..\n             } = &expr;\n             if is_expn_of(stmt.span, \"panic\").is_some();\n-            if !matches!(cond.kind, ExprKind::Let(_, _, _));\n+            if !matches!(cond.kind, ExprKind::Let(_));\n             if let StmtKind::Semi(semi) = stmt.kind;\n             if !cx.tcx.sess.source_map().is_multiline(cond.span);\n "}, {"sha": "be319ee110d24e94538dabc37a08ddda763a4b4b", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::{\n-    intravisit, Body, Expr, ExprKind, FnDecl, HirId, LocalSource, Mutability, Pat, PatKind, Stmt, StmtKind,\n+    intravisit, Body, Expr, ExprKind, FnDecl, HirId, Let, LocalSource, Mutability, Pat, PatKind, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -104,8 +104,8 @@ impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n                 }\n             }\n         }\n-        if let ExprKind::Let(let_pat, ..) = expr.kind {\n-            apply_lint(cx, let_pat, DerefPossible::Possible);\n+        if let ExprKind::Let(Let { pat, .. }) = expr.kind {\n+            apply_lint(cx, pat, DerefPossible::Possible);\n         }\n     }\n "}, {"sha": "c1b811c2174405ca3c11e7bd68e90d545999b26f", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -373,11 +373,18 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         }\n \n         match expr.value.kind {\n-            ExprKind::Let(pat, expr, _) => {\n-                bind!(self, pat, expr);\n-                kind!(\"Let({pat}, {expr}, _)\");\n-                self.pat(pat);\n-                self.expr(expr);\n+            ExprKind::Let(let_expr) => {\n+                bind!(self, let_expr);\n+                kind!(\"Let({let_expr})\");\n+                self.pat(field!(let_expr.pat));\n+                // Does what ExprKind::Cast does, only adds a clause for the type\n+                // if it's a path\n+                if let Some(TyKind::Path(ref qpath)) = let_expr.value.ty.as_ref().map(|ty| &ty.kind) {\n+                    bind!(self, qpath);\n+                    out!(\"if let TyKind::Path(ref {qpath}) = {let_expr}.ty.kind;\");\n+                    self.qpath(qpath);\n+                }\n+                self.expr(field!(let_expr.init));\n             },\n             ExprKind::Box(inner) => {\n                 bind!(self, inner);"}, {"sha": "abf4826a06917bc5991b4d2514e025ac90d30f20", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -142,9 +142,12 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 print_expr(cx, arg, indent + 1);\n             }\n         },\n-        hir::ExprKind::Let(pat, expr, _) => {\n+        hir::ExprKind::Let(hir::Let { pat, init, ty, .. }) => {\n             print_pat(cx, pat, indent + 1);\n-            print_expr(cx, expr, indent + 1);\n+            if let Some(ty) = ty {\n+                println!(\"{}  type annotation: {:?}\", ind, ty);\n+            }\n+            print_expr(cx, init, indent + 1);\n         },\n         hir::ExprKind::MethodCall(path, _, args, _) => {\n             println!(\"{}MethodCall\", ind);"}, {"sha": "c764c35d444fb4ec1c96512a7a5969283e054838", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -101,7 +101,12 @@ impl<'hir> IfLet<'hir> {\n     pub fn hir(cx: &LateContext<'_>, expr: &Expr<'hir>) -> Option<Self> {\n         if let ExprKind::If(\n             Expr {\n-                kind: ExprKind::Let(let_pat, let_expr, _),\n+                kind:\n+                    ExprKind::Let(hir::Let {\n+                        pat: let_pat,\n+                        init: let_expr,\n+                        ..\n+                    }),\n                 ..\n             },\n             if_then,\n@@ -368,7 +373,12 @@ impl<'hir> WhileLet<'hir> {\n                         kind:\n                             ExprKind::If(\n                                 Expr {\n-                                    kind: ExprKind::Let(let_pat, let_expr, _),\n+                                    kind:\n+                                        ExprKind::Let(hir::Let {\n+                                            pat: let_pat,\n+                                            init: let_expr,\n+                                            ..\n+                                        }),\n                                     ..\n                                 },\n                                 if_then,"}, {"sha": "ad50759effaf85d2f65d2ee330986631b674abe9", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n     BinOpKind, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n-    InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n+    InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n     StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lexer::{tokenize, TokenKind};\n@@ -234,7 +234,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::If(lc, lt, ref le), &ExprKind::If(rc, rt, ref re)) => {\n                 self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n-            (&ExprKind::Let(lp, le, _), &ExprKind::Let(rp, re, _)) => self.eq_pat(lp, rp) && self.eq_expr(le, re),\n+            (&ExprKind::Let(l), &ExprKind::Let(r)) => {\n+                self.eq_pat(l.pat, r.pat) && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) && self.eq_expr(l.init, r.init)\n+            },\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n             (&ExprKind::Loop(lb, ref ll, ref lls, _), &ExprKind::Loop(rb, ref rl, ref rls, _)) => {\n                 lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.name == r.ident.name)\n@@ -668,8 +670,11 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n             },\n-            ExprKind::Let(pat, expr, _) => {\n-                self.hash_expr(expr);\n+            ExprKind::Let(Let { pat, init, ty, .. }) => {\n+                self.hash_expr(init);\n+                if let Some(ty) = ty {\n+                    self.hash_ty(ty);\n+                }\n                 self.hash_pat(pat);\n             },\n             ExprKind::LlvmInlineAsm(..) | ExprKind::Err => {},"}, {"sha": "7e054a54c3c02c55dffa84ffe2aed159856d7616", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -870,8 +870,8 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n                         capture_expr_ty = e;\n                     }\n                 },\n-                ExprKind::Let(pat, ..) => {\n-                    let mutability = match pat_capture_kind(cx, pat) {\n+                ExprKind::Let(let_expr) => {\n+                    let mutability = match pat_capture_kind(cx, let_expr.pat) {\n                         CaptureKind::Value => Mutability::Not,\n                         CaptureKind::Ref(m) => m,\n                     };"}, {"sha": "8d92849b3668f4ea410eadcf293e93bbb1db1632", "filename": "tests/ui/author/if.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af1eea3f0a43f7eee0866b734a635a960ee74ad1/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/af1eea3f0a43f7eee0866b734a635a960ee74ad1/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=af1eea3f0a43f7eee0866b734a635a960ee74ad1", "patch": "@@ -32,11 +32,11 @@ if_chain! {\n }\n if_chain! {\n     if let ExprKind::If(cond, then, Some(else_expr)) = expr.kind;\n-    if let ExprKind::Let(pat, expr1, _) = cond.kind;\n-    if let PatKind::Lit(lit_expr) = pat.kind;\n+    if let ExprKind::Let(let_expr) = cond.kind;\n+    if let PatKind::Lit(lit_expr) = let_expr.pat.kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Bool(true) = lit.node;\n-    if let ExprKind::Path(ref qpath) = expr1.kind;\n+    if let ExprKind::Path(ref qpath) = let_expr.init.kind;\n     if match_qpath(qpath, &[\"a\"]);\n     if let ExprKind::Block(block, None) = then.kind;\n     if block.stmts.is_empty();"}]}