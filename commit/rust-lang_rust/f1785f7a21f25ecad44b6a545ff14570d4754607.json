{"sha": "f1785f7a21f25ecad44b6a545ff14570d4754607", "node_id": "C_kwDOAAsO6NoAKGYxNzg1ZjdhMjFmMjVlY2FkNDRiNmE1NDVmZjE0NTcwZDQ3NTQ2MDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-23T07:25:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-23T07:25:42Z"}, "message": "Auto merge of #13828 - nyurik:rm-dup-clone, r=lnicola\n\nRemove non-needed clones\n\nI am not certain if this will improve performance, but it seems having a .clone() without any need should be removed.\n\nThis was done with clippy, and manually reviewed:\n\n```\ncargo clippy --fix -- -A clippy::all -D clippy::redundant_clone\n```", "tree": {"sha": "86bd8793962e27c289c909a18aeafcdb0a909540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86bd8793962e27c289c909a18aeafcdb0a909540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1785f7a21f25ecad44b6a545ff14570d4754607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1785f7a21f25ecad44b6a545ff14570d4754607", "html_url": "https://github.com/rust-lang/rust/commit/f1785f7a21f25ecad44b6a545ff14570d4754607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1785f7a21f25ecad44b6a545ff14570d4754607/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a06525517b0b69cd97f2c39a4012d96f44bf0776", "url": "https://api.github.com/repos/rust-lang/rust/commits/a06525517b0b69cd97f2c39a4012d96f44bf0776", "html_url": "https://github.com/rust-lang/rust/commit/a06525517b0b69cd97f2c39a4012d96f44bf0776"}, {"sha": "1d59c7b667b411c8938c3c5cfe58770f050fd926", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d59c7b667b411c8938c3c5cfe58770f050fd926", "html_url": "https://github.com/rust-lang/rust/commit/1d59c7b667b411c8938c3c5cfe58770f050fd926"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "1cd42500c080531348807f16397c5650c9e1bbc5", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -1345,7 +1345,7 @@ impl DefCollector<'_> {\n                     // Missing proc macros are non-fatal, so they are handled specially.\n                     DefDiagnostic::unresolved_proc_macro(module_id, loc.kind.clone(), loc.def.krate)\n                 }\n-                _ => DefDiagnostic::macro_error(module_id, loc.kind.clone(), err.to_string()),\n+                _ => DefDiagnostic::macro_error(module_id, loc.kind, err.to_string()),\n             };\n \n             self.def_map.diagnostics.push(diag);"}, {"sha": "48581d4e0a41e3df075510998e95cb1ad709cb17", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -577,10 +577,9 @@ pub fn callable_sig_from_fnonce(\n     let fn_once =\n         TyBuilder::trait_ref(db, fn_once_trait).push(self_ty.clone()).push(args.clone()).build();\n     let projection =\n-        TyBuilder::assoc_type_projection(db, output_assoc_type, Some(fn_once.substitution.clone()))\n-            .build();\n+        TyBuilder::assoc_type_projection(db, output_assoc_type, Some(fn_once.substitution)).build();\n \n     let ret_ty = db.normalize_projection(projection, env);\n \n-    Some(CallableSig::from_params_and_return(params, ret_ty.clone(), false, Safety::Safe))\n+    Some(CallableSig::from_params_and_return(params, ret_ty, false, Safety::Safe))\n }"}, {"sha": "752a3caceb44a0a0935a776be0cfa4dc5eb5c223", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -1983,7 +1983,7 @@ fn fallback_bound_vars<T: TypeFoldable<Interner> + HasInterner<Interner = Intern\n             if bound.index_if_innermost().map_or(true, is_allowed) {\n                 bound.shifted_in_from(binders).to_const(Interner, ty)\n             } else {\n-                unknown_const(ty.clone())\n+                unknown_const(ty)\n             }\n         },\n     )"}, {"sha": "76c1963e2eedc2198a9611cb13ea83e0dc227cd2", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -847,7 +847,7 @@ impl<'db> SemanticsImpl<'db> {\n                         }\n                     };\n                     process_expansion_for_token(&mut stack, file_id, None, token.as_ref())\n-                } else if let Some(meta) = ast::Meta::cast(parent.clone()) {\n+                } else if let Some(meta) = ast::Meta::cast(parent) {\n                     // attribute we failed expansion for earlier, this might be a derive invocation\n                     // or derive helper attribute\n                     let attr = meta.parent_attr()?;"}, {"sha": "e2fa1d5cabe1a270cfc8c0d72eac273b65ab8173", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -118,7 +118,7 @@ impl SourceAnalyzer {\n     fn expr_id(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<ExprId> {\n         let src = match expr {\n             ast::Expr::MacroExpr(expr) => {\n-                self.expand_expr(db, InFile::new(self.file_id, expr.macro_call()?.clone()))?\n+                self.expand_expr(db, InFile::new(self.file_id, expr.macro_call()?))?\n             }\n             _ => InFile::new(self.file_id, expr.clone()),\n         };"}, {"sha": "f0ed3c4fe6f50f397168365a2a0afe876e6a84b7", "filename": "crates/ide-assists/src/handlers/replace_or_with_or_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -75,7 +75,7 @@ fn into_closure(param: &Expr) -> Expr {\n     (|| {\n         if let ast::Expr::CallExpr(call) = param {\n             if call.arg_list()?.args().count() == 0 {\n-                Some(call.expr()?.clone())\n+                Some(call.expr()?)\n             } else {\n                 None\n             }\n@@ -151,7 +151,7 @@ fn into_call(param: &Expr) -> Expr {\n     (|| {\n         if let ast::Expr::ClosureExpr(closure) = param {\n             if closure.param_list()?.params().count() == 0 {\n-                Some(closure.body()?.clone())\n+                Some(closure.body()?)\n             } else {\n                 None\n             }"}, {"sha": "ba5afde19bcf75ec4a798e1894886aab94be5f26", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -494,7 +494,7 @@ impl Completions {\n             pattern_ctx,\n             path_ctx,\n             variant,\n-            local_name.clone(),\n+            local_name,\n             None,\n         ));\n     }"}, {"sha": "31ec9d9f6396b63d6ac0d0990fc365b3385710a8", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -224,7 +224,7 @@ fn include_references(initial_element: &ast::Expr) -> (ast::Expr, ast::Expr) {\n \n     if let Some(first_ref_expr) = resulting_element.syntax().parent().and_then(ast::RefExpr::cast) {\n         if let Some(expr) = first_ref_expr.expr() {\n-            resulting_element = expr.clone();\n+            resulting_element = expr;\n         }\n \n         while let Some(parent_ref_element) =\n@@ -571,7 +571,7 @@ fn main() { ControlFlow::Break('\\\\\\\\') }\n         );\n \n         check_edit_with_config(\n-            config.clone(),\n+            config,\n             \"break\",\n             r#\"\n //- minicore: try"}, {"sha": "c412fd575c9de16cb47f91bcc1c28fe3dc9de70e", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -286,7 +286,7 @@ fn analyze(\n         ast::NameLike::NameRef(name_ref) => {\n             let parent = name_ref.syntax().parent()?;\n             let (nameref_ctx, qualifier_ctx) =\n-                classify_name_ref(sema, &original_file, name_ref, parent.clone())?;\n+                classify_name_ref(sema, &original_file, name_ref, parent)?;\n             qual_ctx = qualifier_ctx;\n             CompletionAnalysis::NameRef(nameref_ctx)\n         }\n@@ -585,11 +585,7 @@ fn classify_name_ref(\n                 original_file,\n                 &record_field.parent_record_pat(),\n             ),\n-            ..pattern_context_for(\n-                sema,\n-                original_file,\n-                record_field.parent_record_pat().clone().into(),\n-            )\n+            ..pattern_context_for(sema, original_file, record_field.parent_record_pat().into())\n         });\n         return Some(make_res(kind));\n     }"}, {"sha": "c3ffc6d50743b8088e46ef83b42a77ca0c246edb", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -131,7 +131,7 @@ pub(crate) fn render_field(\n     item.detail(ty.display(ctx.db()).to_string())\n         .set_documentation(field.docs(ctx.db()))\n         .set_deprecated(is_deprecated)\n-        .lookup_by(name.clone());\n+        .lookup_by(name);\n     item.insert_text(field_with_receiver(receiver.as_ref(), &escaped_name));\n     if let Some(receiver) = &dot_access.receiver {\n         if let Some(original) = ctx.completion.sema.original_ast_node(receiver.clone()) {"}, {"sha": "70b19988ca73384f6db8ff2db1a65d5deae4ab60", "filename": "crates/ide-completion/src/render/const_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -16,7 +16,7 @@ fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem>\n     let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let detail = const_.display(db).to_string();\n \n-    let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());\n+    let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name);\n     item.set_documentation(ctx.docs(const_))\n         .set_deprecated(ctx.is_deprecated(const_) || ctx.is_deprecated_assoc_item(const_))\n         .detail(detail)"}, {"sha": "64dab02f7c5ce4e2190f335998aa935bd9eeae45", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -84,7 +84,7 @@ fn render(\n         }\n         _ => RenderedLiteral {\n             literal: escaped_qualified_name.clone(),\n-            detail: escaped_qualified_name.clone(),\n+            detail: escaped_qualified_name,\n         },\n     };\n "}, {"sha": "fbe120d2ac9491434f1b7c0ef153f9d6e746a271", "filename": "crates/ide-completion/src/render/type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -40,7 +40,7 @@ fn render(\n     };\n     let detail = type_alias.display(db).to_string();\n \n-    let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), name.clone());\n+    let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), name);\n     item.set_documentation(ctx.docs(type_alias))\n         .set_deprecated(ctx.is_deprecated(type_alias) || ctx.is_deprecated_assoc_item(type_alias))\n         .detail(detail)"}, {"sha": "5e9011f9e8aa7d431039c527dc3023ede4438672", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -86,7 +86,7 @@ pub(crate) fn completion_list_no_kw(ra_fixture: &str) -> String {\n }\n \n pub(crate) fn completion_list_no_kw_with_private_editable(ra_fixture: &str) -> String {\n-    let mut config = TEST_CONFIG.clone();\n+    let mut config = TEST_CONFIG;\n     config.enable_private_editable = true;\n     completion_list_with_config(config, ra_fixture, false, None)\n }"}, {"sha": "e8df6dcf285d07cc0a37e8c4a0d4e0574f6e5ed8", "filename": "crates/ide-diagnostics/src/handlers/json_is_not_rust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -125,7 +125,7 @@ pub(crate) fn json_in_items(\n                         .severity(Severity::WeakWarning)\n                         .with_fixes(Some(vec![{\n                             let mut scb = SourceChangeBuilder::new(file_id);\n-                            let scope = match import_scope.clone() {\n+                            let scope = match import_scope {\n                                 ImportScope::File(it) => ImportScope::File(scb.make_mut(it)),\n                                 ImportScope::Module(it) => ImportScope::Module(scb.make_mut(it)),\n                                 ImportScope::Block(it) => ImportScope::Block(scb.make_mut(it)),"}, {"sha": "355ededb5a43eebe16348392ba3b35cdcb871455", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -81,7 +81,7 @@ fn should_not_display_type_hint(\n \n     if config.hide_closure_initialization_hints {\n         if let Some(parent) = bind_pat.syntax().parent() {\n-            if let Some(it) = ast::LetStmt::cast(parent.clone()) {\n+            if let Some(it) = ast::LetStmt::cast(parent) {\n                 if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n                     if closure_has_block_body(&closure) {\n                         return true;"}, {"sha": "d9929beaac0c247bb258962067ba40e01fc2bd48", "filename": "crates/ide/src/inlay_hints/closure_ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -32,7 +32,7 @@ pub(super) fn hints(\n \n     let param_list = closure.param_list()?;\n \n-    let closure = sema.descend_node_into_attributes(closure.clone()).pop()?;\n+    let closure = sema.descend_node_into_attributes(closure).pop()?;\n     let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure))?.adjusted();\n     let callable = ty.as_callable(sema.db)?;\n     let ty = callable.return_type();"}, {"sha": "b48921f19177f64503a9567ace0471eb2556f567", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -57,7 +57,7 @@ impl<'a> LexedStr<'a> {\n         let mut conv = Converter::new(text);\n         conv.extend_token(&token.kind, text);\n         match &*conv.res.kind {\n-            [kind] => Some((*kind, conv.res.error.pop().map(|it| it.msg.clone()))),\n+            [kind] => Some((*kind, conv.res.error.pop().map(|it| it.msg))),\n             _ => None,\n         }\n     }"}, {"sha": "5b8aca4d8164e887290e15cf4a3e17f77a229b2b", "filename": "crates/proc-macro-srv/src/abis/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -117,7 +117,7 @@ impl Abi {\n                 let inner = unsafe { Abi_1_63::from_lib(lib, symbol_name) }?;\n                 Ok(Abi::Abi1_63(inner))\n             }\n-            _ => Err(LoadProcMacroDylibError::UnsupportedABI(info.version_string.clone())),\n+            _ => Err(LoadProcMacroDylibError::UnsupportedABI(info.version_string)),\n         }\n     }\n "}, {"sha": "2d443231b4ed301b4f5413c6ef7b5612e88110c3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -561,10 +561,7 @@ impl GlobalState {\n                     flycheck::Progress::DidCheckCrate(target) => (Progress::Report, Some(target)),\n                     flycheck::Progress::DidCancel => (Progress::End, None),\n                     flycheck::Progress::DidFailToRestart(err) => {\n-                        self.show_and_log_error(\n-                            \"cargo check failed\".to_string(),\n-                            Some(err.to_string()),\n-                        );\n+                        self.show_and_log_error(\"cargo check failed\".to_string(), Some(err));\n                         return;\n                     }\n                     flycheck::Progress::DidFinish(result) => {"}, {"sha": "9bbce70ec0a8f3d7cde29b1a11dfafd6a1641df1", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1785f7a21f25ecad44b6a545ff14570d4754607/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=f1785f7a21f25ecad44b6a545ff14570d4754607", "patch": "@@ -461,7 +461,7 @@ impl GlobalState {\n             flycheck::InvocationStrategy::Once => vec![FlycheckHandle::spawn(\n                 0,\n                 Box::new(move |msg| sender.send(msg).unwrap()),\n-                config.clone(),\n+                config,\n                 self.config.root_path().clone(),\n             )],\n             flycheck::InvocationStrategy::PerWorkspace => {"}]}