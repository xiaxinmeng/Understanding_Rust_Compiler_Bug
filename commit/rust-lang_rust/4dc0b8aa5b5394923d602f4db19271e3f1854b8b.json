{"sha": "4dc0b8aa5b5394923d602f4db19271e3f1854b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzBiOGFhNWI1Mzk0OTIzZDYwMmY0ZGIxOTI3MWUzZjE4NTRiOGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T11:34:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-13T11:34:29Z"}, "message": "Rollup merge of #65069 - crgl:clone-from-vec-deque, r=bluss\n\nImplement Clone::clone_from for VecDeque\n\nSee #28481. For simple data types with the target much longer than the source, this implementation can be significantly slower than the default (probably due to the use of truncate). However, it should be substantially faster when cloning from nested data structures with similar shapes or when cloning from VecDeques with similar lengths, hopefully more common use cases for clone_from.", "tree": {"sha": "e8eec97b323d33a16759af9283226f8c66590fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8eec97b323d33a16759af9283226f8c66590fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc0b8aa5b5394923d602f4db19271e3f1854b8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdowvFCRBK7hj4Ov3rIwAAdHIIAKZOcVXIVSZkpz6vIASxtpRl\nHbc1jpmpjYXlpY2CTFxHNpCadP6ONwvwwMZ9dL3qowmyuPlklo3G00Fe7+FIDbSX\neHvgGGSaDs1ROWynFJWB2GLo1Xlswrc7N1e4/wjajcTJTfv1bqYzDW+t/DCcEQcx\nDHMHm5Fu5QOb7kBn+inw9VFzOTh05N2HhC+eHwpaCPP7wsrm7FeAPuR+/NkjHFnG\nfF3l+MsoNduMtJFWnG6bxCFqej+/aHCh+aBC60gZg2+wlqMz8Ag6Kt0dMu1NokDx\n4z9BFcq1sFE78k5hftQm8DpxoNdYnJTx40FGC756JD+UJNgNmGpT9/c1AHXEKc4=\n=Ar8Y\n-----END PGP SIGNATURE-----\n", "payload": "tree e8eec97b323d33a16759af9283226f8c66590fce\nparent d0f8bd6e26c40d3940d5d1c942c0e25ef0dd3ba4\nparent d21eeb110c64d677652a03e858db1833ddf7761b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570966469 +0200\ncommitter GitHub <noreply@github.com> 1570966469 +0200\n\nRollup merge of #65069 - crgl:clone-from-vec-deque, r=bluss\n\nImplement Clone::clone_from for VecDeque\n\nSee #28481. For simple data types with the target much longer than the source, this implementation can be significantly slower than the default (probably due to the use of truncate). However, it should be substantially faster when cloning from nested data structures with similar shapes or when cloning from VecDeques with similar lengths, hopefully more common use cases for clone_from.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc0b8aa5b5394923d602f4db19271e3f1854b8b", "html_url": "https://github.com/rust-lang/rust/commit/4dc0b8aa5b5394923d602f4db19271e3f1854b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc0b8aa5b5394923d602f4db19271e3f1854b8b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f8bd6e26c40d3940d5d1c942c0e25ef0dd3ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8bd6e26c40d3940d5d1c942c0e25ef0dd3ba4", "html_url": "https://github.com/rust-lang/rust/commit/d0f8bd6e26c40d3940d5d1c942c0e25ef0dd3ba4"}, {"sha": "d21eeb110c64d677652a03e858db1833ddf7761b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21eeb110c64d677652a03e858db1833ddf7761b", "html_url": "https://github.com/rust-lang/rust/commit/d21eeb110c64d677652a03e858db1833ddf7761b"}], "stats": {"total": 124, "additions": 122, "deletions": 2}, "files": [{"sha": "0bf573f5e2539fc8d84ddbc2a1c295c1fdb36626", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 99, "deletions": 2, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/4dc0b8aa5b5394923d602f4db19271e3f1854b8b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc0b8aa5b5394923d602f4db19271e3f1854b8b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=4dc0b8aa5b5394923d602f4db19271e3f1854b8b", "patch": "@@ -10,8 +10,8 @@\n use core::array::LengthAtMost32;\n use core::cmp::{self, Ordering};\n use core::fmt;\n-use core::iter::{repeat_with, FromIterator, FusedIterator};\n-use core::mem;\n+use core::iter::{once, repeat_with, FromIterator, FusedIterator};\n+use core::mem::{self, replace};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{Index, IndexMut, RangeBounds, Try};\n use core::ptr::{self, NonNull};\n@@ -57,11 +57,88 @@ pub struct VecDeque<T> {\n     buf: RawVec<T>,\n }\n \n+/// PairSlices pairs up equal length slice parts of two deques\n+///\n+/// For example, given deques \"A\" and \"B\" with the following division into slices:\n+///\n+/// A: [0 1 2] [3 4 5]\n+/// B: [a b] [c d e]\n+///\n+/// It produces the following sequence of matching slices:\n+///\n+/// ([0 1], [a b])\n+/// ([2], [c])\n+/// ([3 4], [d e])\n+///\n+/// and the uneven remainder of either A or B is skipped.\n+struct PairSlices<'a, 'b, T> {\n+    a0: &'a mut [T],\n+    a1: &'a mut [T],\n+    b0: &'b [T],\n+    b1: &'b [T],\n+}\n+\n+impl<'a, 'b, T> PairSlices<'a, 'b, T> {\n+    fn from(to: &'a mut VecDeque<T>, from: &'b VecDeque<T>) -> Self {\n+        let (a0, a1) = to.as_mut_slices();\n+        let (b0, b1) = from.as_slices();\n+        PairSlices { a0, a1, b0, b1 }\n+    }\n+\n+    fn has_remainder(&self) -> bool {\n+        !self.b0.is_empty()\n+    }\n+\n+    fn remainder(self) -> impl Iterator<Item=&'b [T]> {\n+        once(self.b0).chain(once(self.b1))\n+    }\n+}\n+\n+impl<'a, 'b, T> Iterator for PairSlices<'a, 'b, T>\n+{\n+    type Item = (&'a mut [T], &'b [T]);\n+    fn next(&mut self) -> Option<Self::Item> {\n+        // Get next part length\n+        let part = cmp::min(self.a0.len(), self.b0.len());\n+        if part == 0 {\n+            return None;\n+        }\n+        let (p0, p1) = replace(&mut self.a0, &mut []).split_at_mut(part);\n+        let (q0, q1) = self.b0.split_at(part);\n+\n+        // Move a1 into a0, if it's empty (and b1, b0 the same way).\n+        self.a0 = p1;\n+        self.b0 = q1;\n+        if self.a0.is_empty() {\n+            self.a0 = replace(&mut self.a1, &mut []);\n+        }\n+        if self.b0.is_empty() {\n+            self.b0 = replace(&mut self.b1, &[]);\n+        }\n+        Some((p0, q0))\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for VecDeque<T> {\n     fn clone(&self) -> VecDeque<T> {\n         self.iter().cloned().collect()\n     }\n+\n+    fn clone_from(&mut self, other: &Self) {\n+        self.truncate(other.len());\n+\n+        let mut iter = PairSlices::from(self, other);\n+        while let Some((dst, src)) = iter.next() {\n+            dst.clone_from_slice(&src);\n+        }\n+\n+        if iter.has_remainder() {\n+            for remainder in iter.remainder() {\n+                self.extend(remainder.iter().cloned());\n+            }\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2209,6 +2286,16 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         final_res\n     }\n \n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        if n >= count(self.tail, self.head, self.ring.len()) {\n+            self.tail = self.head;\n+            None\n+        } else {\n+            self.tail = wrap_index(self.tail.wrapping_add(n), self.ring.len());\n+            self.next()\n+        }\n+    }\n+\n     #[inline]\n     fn last(mut self) -> Option<&'a T> {\n         self.next_back()\n@@ -2327,6 +2414,16 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n         back.iter_mut().fold(accum, &mut f)\n     }\n \n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        if n >= count(self.tail, self.head, self.ring.len()) {\n+            self.tail = self.head;\n+            None\n+        } else {\n+            self.tail = wrap_index(self.tail.wrapping_add(n), self.ring.len());\n+            self.next()\n+        }\n+    }\n+\n     #[inline]\n     fn last(mut self) -> Option<&'a mut T> {\n         self.next_back()"}, {"sha": "d578ee0dac493fa922bd7d6d72f7c36f8d3184f8", "filename": "src/liballoc/collections/vec_deque/tests.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4dc0b8aa5b5394923d602f4db19271e3f1854b8b/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc0b8aa5b5394923d602f4db19271e3f1854b8b/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=4dc0b8aa5b5394923d602f4db19271e3f1854b8b", "patch": "@@ -361,6 +361,29 @@ fn test_vec_from_vecdeque() {\n     }\n }\n \n+#[test]\n+fn test_clone_from() {\n+    let m = vec![1; 8];\n+    let n = vec![2; 12];\n+    for pfv in 0..8 {\n+        for pfu in 0..8 {\n+            for longer in 0..2 {\n+                let (vr, ur) = if longer == 0 { (&m, &n) } else { (&n, &m) };\n+                let mut v = VecDeque::from(vr.clone());\n+                for _ in 0..pfv {\n+                    v.push_front(1);\n+                }\n+                let mut u = VecDeque::from(ur.clone());\n+                for _ in 0..pfu {\n+                    u.push_front(2);\n+                }\n+                v.clone_from(&u);\n+                assert_eq!(&v, &u);\n+            }\n+        }\n+    }\n+}\n+\n #[test]\n fn issue_53529() {\n     use crate::boxed::Box;"}]}