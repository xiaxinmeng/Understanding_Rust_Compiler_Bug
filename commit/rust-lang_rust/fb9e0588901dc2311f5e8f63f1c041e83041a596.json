{"sha": "fb9e0588901dc2311f5e8f63f1c041e83041a596", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOWUwNTg4OTAxZGMyMzExZjVlOGY2M2YxYzA0MWU4MzA0MWE1OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-06T15:17:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-06T15:17:13Z"}, "message": "Auto merge of #50474 - sinkuu:fix_assert_ice, r=alexcrichton\n\nFix ICE in assertion macro\n\nFixes #50471. Needs beta-backport (stable-to-beta/nightly regression).\n\n* `panic` with single argument does not need escaping `{` and `}`\n* Instead of unescaping `\\u{...}` manually, just use `escape_debug` in pprust", "tree": {"sha": "b9a3c4902618105f94df39d71087d2681ca9343d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a3c4902618105f94df39d71087d2681ca9343d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9e0588901dc2311f5e8f63f1c041e83041a596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9e0588901dc2311f5e8f63f1c041e83041a596", "html_url": "https://github.com/rust-lang/rust/commit/fb9e0588901dc2311f5e8f63f1c041e83041a596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9e0588901dc2311f5e8f63f1c041e83041a596/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2416032bb79ede22388b3be10a7a8b94dccd5109", "url": "https://api.github.com/repos/rust-lang/rust/commits/2416032bb79ede22388b3be10a7a8b94dccd5109", "html_url": "https://github.com/rust-lang/rust/commit/2416032bb79ede22388b3be10a7a8b94dccd5109"}, {"sha": "39df2231bb7d3de171b6a7117bb76bbee5a4597f", "url": "https://api.github.com/repos/rust-lang/rust/commits/39df2231bb7d3de171b6a7117bb76bbee5a4597f", "html_url": "https://github.com/rust-lang/rust/commit/39df2231bb7d3de171b6a7117bb76bbee5a4597f"}], "stats": {"total": 82, "additions": 24, "deletions": 58}, "files": [{"sha": "b8ddb063d98751fc94cead427f1527712adace3c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e0588901dc2311f5e8f63f1c041e83041a596/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e0588901dc2311f5e8f63f1c041e83041a596/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fb9e0588901dc2311f5e8f63f1c041e83041a596", "patch": "@@ -656,7 +656,7 @@ pub trait PrintState<'a> {\n                     style: ast::StrStyle) -> io::Result<()> {\n         let st = match style {\n             ast::StrStyle::Cooked => {\n-                (format!(\"\\\"{}\\\"\", st.escape_default()))\n+                (format!(\"\\\"{}\\\"\", st.escape_debug()))\n             }\n             ast::StrStyle::Raw(n) => {\n                 (format!(\"r{delim}\\\"{string}\\\"{delim}\","}, {"sha": "754f04a26e7ee038ed2eeaa5186841e6ae0850fd", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 4, "deletions": 57, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e0588901dc2311f5e8f63f1c041e83041a596/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e0588901dc2311f5e8f63f1c041e83041a596/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=fb9e0588901dc2311f5e8f63f1c041e83041a596", "patch": "@@ -42,16 +42,13 @@ pub fn expand_assert<'cx>(\n         tts: if let Some(ts) = custom_msg_args {\n             ts.into()\n         } else {\n-            // `expr_to_string` escapes the string literals with `.escape_default()`\n-            // which escapes all non-ASCII characters with `\\u`.\n-            let escaped_expr = escape_format_string(&unescape_printable_unicode(\n-                &pprust::expr_to_string(&cond_expr),\n-            ));\n-\n             TokenStream::from(TokenTree::Token(\n                 DUMMY_SP,\n                 token::Literal(\n-                    token::Lit::Str_(Name::intern(&format!(\"assertion failed: {}\", escaped_expr))),\n+                    token::Lit::Str_(Name::intern(&format!(\n+                        \"assertion failed: {}\",\n+                        pprust::expr_to_string(&cond_expr).escape_debug()\n+                    ))),\n                     None,\n                 ),\n             )).into()\n@@ -71,53 +68,3 @@ pub fn expand_assert<'cx>(\n     );\n     MacEager::expr(if_expr)\n }\n-\n-/// Escapes a string for use as a formatting string.\n-fn escape_format_string(s: &str) -> String {\n-    let mut res = String::with_capacity(s.len());\n-    for c in s.chars() {\n-        res.extend(c.escape_debug());\n-        match c {\n-            '{' | '}' => res.push(c),\n-            _ => {}\n-        }\n-    }\n-    res\n-}\n-\n-#[test]\n-fn test_escape_format_string() {\n-    assert!(escape_format_string(r\"foo{}\\\") == r\"foo{{}}\\\\\");\n-}\n-\n-/// Unescapes the escaped unicodes (`\\u{...}`) that are printable.\n-fn unescape_printable_unicode(mut s: &str) -> String {\n-    use std::{char, u32};\n-\n-    let mut res = String::with_capacity(s.len());\n-\n-    loop {\n-        if let Some(start) = s.find(r\"\\u{\") {\n-            res.push_str(&s[0..start]);\n-            s = &s[start..];\n-            s.find('}')\n-                .and_then(|end| {\n-                    let v = u32::from_str_radix(&s[3..end], 16).ok()?;\n-                    let c = char::from_u32(v)?;\n-                    // Escape unprintable characters.\n-                    res.extend(c.escape_debug());\n-                    s = &s[end + 1..];\n-                    Some(())\n-                })\n-                .expect(\"lexer should have rejected invalid escape sequences\");\n-        } else {\n-            res.push_str(s);\n-            return res;\n-        }\n-    }\n-}\n-\n-#[test]\n-fn test_unescape_printable_unicode() {\n-    assert!(unescape_printable_unicode(r\"\\u{2603}\\n\\u{0}\") == r\"\u2603\\n\\u{0}\");\n-}"}, {"sha": "ce2947144af45f9aa0600a9d5510cd8d74a91ea4", "filename": "src/test/compile-fail/issue-50471.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e0588901dc2311f5e8f63f1c041e83041a596/src%2Ftest%2Fcompile-fail%2Fissue-50471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e0588901dc2311f5e8f63f1c041e83041a596/src%2Ftest%2Fcompile-fail%2Fissue-50471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50471.rs?ref=fb9e0588901dc2311f5e8f63f1c041e83041a596", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+fn main() {\n+    assert!({false});\n+\n+    assert!(r\"\\u{41}\" == \"A\");\n+\n+    assert!(r\"\\u{\".is_empty());\n+}"}]}