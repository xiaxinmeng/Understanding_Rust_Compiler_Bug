{"sha": "460ecd288a34f73f9178acc723a459cbfe77607a", "node_id": "C_kwDOAAsO6NoAKDQ2MGVjZDI4OGEzNGY3M2Y5MTc4YWNjNzIzYTQ1OWNiZmU3NzYwN2E", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-16T10:05:09Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T12:08:17Z"}, "message": "Eagerly intern and check CrateNum/StableCrateId collisions", "tree": {"sha": "20b47f47d57d3815249f4bf8f8072a12eafccd52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b47f47d57d3815249f4bf8f8072a12eafccd52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460ecd288a34f73f9178acc723a459cbfe77607a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460ecd288a34f73f9178acc723a459cbfe77607a", "html_url": "https://github.com/rust-lang/rust/commit/460ecd288a34f73f9178acc723a459cbfe77607a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460ecd288a34f73f9178acc723a459cbfe77607a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18e305dfca6dfef07478378cb9a673fdba6ac3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e305dfca6dfef07478378cb9a673fdba6ac3b3", "html_url": "https://github.com/rust-lang/rust/commit/18e305dfca6dfef07478378cb9a673fdba6ac3b3"}], "stats": {"total": 94, "additions": 33, "deletions": 61}, "files": [{"sha": "aa4d79ed261170270d32a0f936f92195e73aacf0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/460ecd288a34f73f9178acc723a459cbfe77607a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/460ecd288a34f73f9178acc723a459cbfe77607a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=460ecd288a34f73f9178acc723a459cbfe77607a", "patch": "@@ -5294,6 +5294,7 @@ name = \"rustc_span\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg-if\",\n+ \"indexmap\",\n  \"md-5\",\n  \"rustc_arena\",\n  \"rustc_data_structures\","}, {"sha": "538e61c9851043edb5f0f0290c3d947227c0f46c", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 21, "deletions": 54, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=460ecd288a34f73f9178acc723a459cbfe77607a", "patch": "@@ -6,11 +6,11 @@ use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_ast::{self as ast, *};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{MappedReadGuard, MappedWriteGuard, ReadGuard, WriteGuard};\n use rustc_expand::base::SyntaxExtension;\n-use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, StableCrateIdMap, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::TyCtxt;\n@@ -46,9 +46,8 @@ pub struct CStore {\n     /// This crate has a `#[alloc_error_handler]` item.\n     has_alloc_error_handler: bool,\n \n-    /// This map is used to verify we get no hash conflicts between\n-    /// `StableCrateId` values.\n-    pub(crate) stable_crate_ids: FxHashMap<StableCrateId, CrateNum>,\n+    /// The interned [StableCrateId]s.\n+    pub(crate) stable_crate_ids: StableCrateIdMap,\n \n     /// Unused externs of the crate\n     unused_externs: Vec<Symbol>,\n@@ -144,9 +143,21 @@ impl CStore {\n         })\n     }\n \n-    fn alloc_new_crate_num(&mut self) -> CrateNum {\n-        self.metas.push(None);\n-        CrateNum::new(self.metas.len() - 1)\n+    fn intern_stable_crate_id(&mut self, root: &CrateRoot) -> Result<CrateNum, CrateError> {\n+        assert_eq!(self.metas.len(), self.stable_crate_ids.len());\n+        let num = CrateNum::new(self.stable_crate_ids.len());\n+        if let Some(&existing) = self.stable_crate_ids.get(&root.stable_crate_id()) {\n+            let crate_name0 = root.name();\n+            if let Some(crate_name1) = self.metas[existing].as_ref().map(|data| data.name()) {\n+                Err(CrateError::StableCrateIdCollision(crate_name0, crate_name1))\n+            } else {\n+                Err(CrateError::SymbolConflictsCurrent(crate_name0))\n+            }\n+        } else {\n+            self.metas.push(None);\n+            self.stable_crate_ids.insert(root.stable_crate_id(), num);\n+            Ok(num)\n+        }\n     }\n \n     pub fn has_crate_data(&self, cnum: CrateNum) -> bool {\n@@ -247,7 +258,7 @@ impl CStore {\n     }\n \n     pub fn new(sess: &Session) -> CStore {\n-        let mut stable_crate_ids = FxHashMap::default();\n+        let mut stable_crate_ids = StableCrateIdMap::default();\n         stable_crate_ids.insert(sess.local_stable_crate_id(), LOCAL_CRATE);\n         CStore {\n             // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n@@ -342,42 +353,6 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n         None\n     }\n \n-    fn verify_no_symbol_conflicts(&self, root: &CrateRoot) -> Result<(), CrateError> {\n-        // Check for (potential) conflicts with the local crate\n-        if self.sess.local_stable_crate_id() == root.stable_crate_id() {\n-            return Err(CrateError::SymbolConflictsCurrent(root.name()));\n-        }\n-\n-        // Check for conflicts with any crate loaded so far\n-        for (_, other) in self.cstore.iter_crate_data() {\n-            // Same stable crate id but different SVH\n-            if other.stable_crate_id() == root.stable_crate_id() && other.hash() != root.hash() {\n-                bug!(\n-                    \"Previously returned E0523 here. \\\n-                     See https://github.com/rust-lang/rust/pull/100599 for additional discussion.\\\n-                     root.name() = {}.\",\n-                    root.name()\n-                );\n-            }\n-        }\n-\n-        Ok(())\n-    }\n-\n-    fn verify_no_stable_crate_id_hash_conflicts(\n-        &mut self,\n-        root: &CrateRoot,\n-        cnum: CrateNum,\n-    ) -> Result<(), CrateError> {\n-        if let Some(existing) = self.cstore.stable_crate_ids.insert(root.stable_crate_id(), cnum) {\n-            let crate_name0 = root.name();\n-            let crate_name1 = self.cstore.get_crate_data(existing).name();\n-            return Err(CrateError::StableCrateIdCollision(crate_name0, crate_name1));\n-        }\n-\n-        Ok(())\n-    }\n-\n     fn register_crate(\n         &mut self,\n         host_lib: Option<Library>,\n@@ -396,7 +371,7 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n             self.sess.opts.externs.get(name.as_str()).map_or(false, |e| e.is_private_dep);\n \n         // Claim this crate number and cache it\n-        let cnum = self.cstore.alloc_new_crate_num();\n+        let cnum = self.cstore.intern_stable_crate_id(&crate_root)?;\n \n         info!(\n             \"register crate `{}` (cnum = {}. private_dep = {})\",\n@@ -432,14 +407,6 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n             None\n         };\n \n-        // Perform some verification *after* resolve_crate_deps() above is\n-        // known to have been successful. It seems that - in error cases - the\n-        // cstore can be in a temporarily invalid state between cnum allocation\n-        // and dependency resolution and the verification code would produce\n-        // ICEs in that case (see #83045).\n-        self.verify_no_symbol_conflicts(&crate_root)?;\n-        self.verify_no_stable_crate_id_hash_conflicts(&crate_root, cnum)?;\n-\n         let crate_metadata = CrateMetadata::new(\n             self.sess,\n             &self.cstore,"}, {"sha": "cabc144077fd518987c2f14ff6cf06c2ff8fc825", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=460ecd288a34f73f9178acc723a459cbfe77607a", "patch": "@@ -1709,10 +1709,6 @@ impl CrateMetadata {\n         self.root.name\n     }\n \n-    pub(crate) fn stable_crate_id(&self) -> StableCrateId {\n-        self.root.stable_crate_id\n-    }\n-\n     pub(crate) fn hash(&self) -> Svh {\n         self.root.hash\n     }"}, {"sha": "e0f1435ccb3ae1e3a5ac40523b2e72b4048ed2d4", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=460ecd288a34f73f9178acc723a459cbfe77607a", "patch": "@@ -615,7 +615,10 @@ impl CrateStore for CStore {\n     }\n \n     fn stable_crate_id_to_crate_num(&self, stable_crate_id: StableCrateId) -> CrateNum {\n-        self.stable_crate_ids[&stable_crate_id]\n+        *self\n+            .stable_crate_ids\n+            .get(&stable_crate_id)\n+            .unwrap_or_else(|| bug!(\"uninterned StableCrateId: {stable_crate_id:?}\"))\n     }\n \n     /// Returns the `DefKey` for a given `DefId`. This indicates the"}, {"sha": "98d6e0ab117a3968a4eb80d2b93adc4d95b017ed", "filename": "compiler/rustc_span/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_span%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_span%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2FCargo.toml?ref=460ecd288a34f73f9178acc723a459cbfe77607a", "patch": "@@ -18,3 +18,4 @@ tracing = \"0.1\"\n sha1 = \"0.10.0\"\n sha2 = \"0.10.1\"\n md5 = { package = \"md-5\", version = \"0.10.0\" }\n+indexmap = { version = \"1.9.1\" }"}, {"sha": "b2c58caff2ec440ded5130858e41866b906e9d26", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ecd288a34f73f9178acc723a459cbfe77607a/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=460ecd288a34f73f9178acc723a459cbfe77607a", "patch": "@@ -1,13 +1,17 @@\n use crate::{HashStableContext, Symbol};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_data_structures::unhash::Unhasher;\n use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::borrow::Borrow;\n use std::fmt;\n-use std::hash::{Hash, Hasher};\n+use std::hash::{BuildHasherDefault, Hash, Hasher};\n+\n+pub type StableCrateIdMap =\n+    indexmap::IndexMap<StableCrateId, CrateNum, BuildHasherDefault<Unhasher>>;\n \n rustc_index::newtype_index! {\n     #[custom_encodable]"}, {"sha": "fc180ccfe28e2448844e50f6aa32fc9cc22c2235", "filename": "tests/run-make-fulldeps/issue-83045/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460ecd288a34f73f9178acc723a459cbfe77607a/tests%2Frun-make-fulldeps%2Fissue-83045%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/460ecd288a34f73f9178acc723a459cbfe77607a/tests%2Frun-make-fulldeps%2Fissue-83045%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fissue-83045%2FMakefile?ref=460ecd288a34f73f9178acc723a459cbfe77607a", "patch": "@@ -29,5 +29,5 @@ all:\n \t\t\t\t  --crate-type=rlib \\\n \t\t\t\t  --edition=2018 \\\n \t\t\t\t  c.rs 2>&1 | tee $(TMPDIR)/output.txt || exit 0\n-\t$(CGREP) E0463 < $(TMPDIR)/output.txt\n+\t$(CGREP) E0519 < $(TMPDIR)/output.txt\n \t$(CGREP) -v \"internal compiler error\" < $(TMPDIR)/output.txt"}]}