{"sha": "54b5d30f2981736156e75d49e39632875dad5f73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjVkMzBmMjk4MTczNjE1NmU3NWQ0OWUzOTYzMjg3NWRhZDVmNzM=", "commit": {"author": {"name": "Tom Dohrmann", "email": "erbse.13@gmx.de", "date": "2020-04-10T19:15:10Z"}, "committer": {"name": "Tom Dohrmann", "email": "erbse.13@gmx.de", "date": "2020-04-10T19:15:10Z"}, "message": "fix target & runtool args order", "tree": {"sha": "6301f925313589fb9c236321a9335a089f7a538f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6301f925313589fb9c236321a9335a089f7a538f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b5d30f2981736156e75d49e39632875dad5f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b5d30f2981736156e75d49e39632875dad5f73", "html_url": "https://github.com/rust-lang/rust/commit/54b5d30f2981736156e75d49e39632875dad5f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b5d30f2981736156e75d49e39632875dad5f73/comments", "author": {"login": "Freax13", "id": 14952658, "node_id": "MDQ6VXNlcjE0OTUyNjU4", "avatar_url": "https://avatars.githubusercontent.com/u/14952658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Freax13", "html_url": "https://github.com/Freax13", "followers_url": "https://api.github.com/users/Freax13/followers", "following_url": "https://api.github.com/users/Freax13/following{/other_user}", "gists_url": "https://api.github.com/users/Freax13/gists{/gist_id}", "starred_url": "https://api.github.com/users/Freax13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Freax13/subscriptions", "organizations_url": "https://api.github.com/users/Freax13/orgs", "repos_url": "https://api.github.com/users/Freax13/repos", "events_url": "https://api.github.com/users/Freax13/events{/privacy}", "received_events_url": "https://api.github.com/users/Freax13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Freax13", "id": 14952658, "node_id": "MDQ6VXNlcjE0OTUyNjU4", "avatar_url": "https://avatars.githubusercontent.com/u/14952658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Freax13", "html_url": "https://github.com/Freax13", "followers_url": "https://api.github.com/users/Freax13/followers", "following_url": "https://api.github.com/users/Freax13/following{/other_user}", "gists_url": "https://api.github.com/users/Freax13/gists{/gist_id}", "starred_url": "https://api.github.com/users/Freax13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Freax13/subscriptions", "organizations_url": "https://api.github.com/users/Freax13/orgs", "repos_url": "https://api.github.com/users/Freax13/repos", "events_url": "https://api.github.com/users/Freax13/events{/privacy}", "received_events_url": "https://api.github.com/users/Freax13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167510f776891f2b0b18d1168ed42377a63493a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/167510f776891f2b0b18d1168ed42377a63493a7", "html_url": "https://github.com/rust-lang/rust/commit/167510f776891f2b0b18d1168ed42377a63493a7"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "fbbe172afb81f2abded48c31bf56b96899641f6a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54b5d30f2981736156e75d49e39632875dad5f73/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b5d30f2981736156e75d49e39632875dad5f73/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=54b5d30f2981736156e75d49e39632875dad5f73", "patch": "@@ -263,7 +263,12 @@ fn run_test(\n     if no_run && !compile_fail {\n         compiler.arg(\"--emit=metadata\");\n     }\n-    compiler.arg(\"--target\").arg(target.to_string());\n+    compiler.arg(\"--target\").arg(match target {\n+        TargetTriple::TargetTriple(s) => s,\n+        TargetTriple::TargetPath(path) => {\n+            path.to_str().expect(\"target path must be valid unicode\").to_string()\n+        }\n+    });\n \n     compiler.arg(\"-\");\n     compiler.stdin(Stdio::piped());\n@@ -312,8 +317,8 @@ fn run_test(\n \n     if let Some(tool) = runtool {\n         cmd = Command::new(tool);\n-        cmd.arg(output_file);\n         cmd.args(runtool_args);\n+        cmd.arg(output_file);\n     } else {\n         cmd = Command::new(output_file);\n     }"}]}