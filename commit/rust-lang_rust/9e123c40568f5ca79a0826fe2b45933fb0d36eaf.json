{"sha": "9e123c40568f5ca79a0826fe2b45933fb0d36eaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMTIzYzQwNTY4ZjVjYTc5YTA4MjZmZTJiNDU5MzNmYjBkMzZlYWY=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-06-12T10:13:25Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-09T22:51:58Z"}, "message": "libsyntax: Remove uses of advance.", "tree": {"sha": "d438f1482ecb3ef1890240e26b25990d310ad58c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d438f1482ecb3ef1890240e26b25990d310ad58c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e123c40568f5ca79a0826fe2b45933fb0d36eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e123c40568f5ca79a0826fe2b45933fb0d36eaf", "html_url": "https://github.com/rust-lang/rust/commit/9e123c40568f5ca79a0826fe2b45933fb0d36eaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e123c40568f5ca79a0826fe2b45933fb0d36eaf/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb9552ef00a986a6aed947b0399a1b620b74e096", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9552ef00a986a6aed947b0399a1b620b74e096", "html_url": "https://github.com/rust-lang/rust/commit/bb9552ef00a986a6aed947b0399a1b620b74e096"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "8b01002831b7e69634dbd6b53bc0e8c23acdf0b3", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e123c40568f5ca79a0826fe2b45933fb0d36eaf/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e123c40568f5ca79a0826fe2b45933fb0d36eaf/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=9e123c40568f5ca79a0826fe2b45933fb0d36eaf", "patch": "@@ -87,24 +87,9 @@ static AbiDatas: &'static [AbiData] = &[\n     AbiData {abi: RustIntrinsic, name: \"rust-intrinsic\", abi_arch: RustArch},\n ];\n \n-/// Iterates through each of the defined ABIs.\n-fn each_abi(op: |abi: Abi| -> bool) -> bool {\n-    AbiDatas.iter().advance(|abi_data| op(abi_data.abi))\n-}\n-\n /// Returns the ABI with the given name (if any).\n pub fn lookup(name: &str) -> Option<Abi> {\n-    let mut res = None;\n-\n-    each_abi(|abi| {\n-        if name == abi.data().name {\n-            res = Some(abi);\n-            false\n-        } else {\n-            true\n-        }\n-    });\n-    res\n+    AbiDatas.iter().find(|abi_data| name == abi_data.name).map(|&x| x.abi)\n }\n \n pub fn all_names() -> Vec<&'static str> {"}, {"sha": "cd38c9b3e98c1aa22bbf75c52eeef7cae6f47fb2", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e123c40568f5ca79a0826fe2b45933fb0d36eaf/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e123c40568f5ca79a0826fe2b45933fb0d36eaf/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=9e123c40568f5ca79a0826fe2b45933fb0d36eaf", "patch": "@@ -611,18 +611,18 @@ pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n     match pat.node {\n         PatIdent(_, _, Some(ref p)) => walk_pat(&**p, it),\n         PatStruct(_, ref fields, _) => {\n-            fields.iter().advance(|f| walk_pat(&*f.pat, |p| it(p)))\n+            fields.iter().all(|field| walk_pat(&*field.pat, |p| it(p)))\n         }\n         PatEnum(_, Some(ref s)) | PatTup(ref s) => {\n-            s.iter().advance(|p| walk_pat(&**p, |p| it(p)))\n+            s.iter().all(|p| walk_pat(&**p, |p| it(p)))\n         }\n         PatBox(ref s) | PatRegion(ref s) => {\n             walk_pat(&**s, it)\n         }\n         PatVec(ref before, ref slice, ref after) => {\n-            before.iter().advance(|p| walk_pat(&**p, |p| it(p))) &&\n-                slice.iter().advance(|p| walk_pat(&**p, |p| it(p))) &&\n-                after.iter().advance(|p| walk_pat(&**p, |p| it(p)))\n+            before.iter().all(|p| walk_pat(&**p, |p| it(p))) &&\n+            slice.iter().all(|p| walk_pat(&**p, |p| it(p))) &&\n+            after.iter().all(|p| walk_pat(&**p, |p| it(p)))\n         }\n         PatMac(_) => fail!(\"attempted to analyze unexpanded pattern\"),\n         PatWild | PatWildMulti | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |"}]}