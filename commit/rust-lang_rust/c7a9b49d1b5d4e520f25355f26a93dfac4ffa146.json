{"sha": "c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YTliNDlkMWI1ZDRlNTIwZjI1MzU1ZjI2YTkzZGZhYzRmZmExNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-08T12:12:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-08T12:12:23Z"}, "message": "auto merge of #19560 : sfackler/rust/should-fail-reason, r=alexcrichton\n\nThe test harness will make sure that the panic message contains the\r\nspecified string. This is useful to help make `#[should_fail]` tests a\r\nbit less brittle by decreasing the chance that the test isn't\r\n\"accidentally\" passing due to a panic occurring earlier than expected.\r\nThe behavior is in some ways similar to JUnit's `expected` feature:\r\n`@Test(expected=NullPointerException.class)`.\r\n\r\nWithout the message assertion, this test would pass even though it's not\r\nactually reaching the intended part of the code:\r\n```rust\r\n#[test]\r\n#[should_fail(message = \"out of bounds\")]\r\nfn test_oob_array_access() {\r\n    let idx: uint = from_str(\"13o\").unwrap(); // oops, this will panic\r\n    [1i32, 2, 3][idx];\r\n}\r\n```", "tree": {"sha": "7a2a559658447be5fe71de276b7e8296b2999770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a2a559658447be5fe71de276b7e8296b2999770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "html_url": "https://github.com/rust-lang/rust/commit/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0b4e068227dd33fa15f3ffe24f29e0535d197f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0b4e068227dd33fa15f3ffe24f29e0535d197f", "html_url": "https://github.com/rust-lang/rust/commit/cf0b4e068227dd33fa15f3ffe24f29e0535d197f"}, {"sha": "a20926a51add66ab67053843e244efb1a4d7ad76", "url": "https://api.github.com/repos/rust-lang/rust/commits/a20926a51add66ab67053843e244efb1a4d7ad76", "html_url": "https://github.com/rust-lang/rust/commit/a20926a51add66ab67053843e244efb1a4d7ad76"}], "stats": {"total": 194, "additions": 165, "deletions": 29}, "files": [{"sha": "47ab675aff9347f95e99d1e7a2ce80a31abf940d", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -346,7 +346,7 @@ pub fn make_test(config: &Config, testfile: &Path, f: || -> test::TestFn)\n         desc: test::TestDesc {\n             name: make_test_name(config, testfile),\n             ignore: header::is_test_ignored(config, testfile),\n-            should_fail: false\n+            should_fail: test::ShouldFail::No,\n         },\n         testfn: f(),\n     }"}, {"sha": "f7cf5e5ac0019c9dd6e847625a2d8024b0e92d90", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -89,6 +89,21 @@ fn test_out_of_bounds_failure() {\n }\n ~~~\n \n+`#[should_fail]` tests can be fragile as it's hard to guarantee that the test\n+didn't fail for an unexpected reason. To help with this, an optional `expected`\n+parameter can be added to the `should_fail` attribute. The test harness will\n+make sure that the failure message contains the provided text. A safer version\n+of the example above would be:\n+\n+~~~test_harness\n+#[test]\n+#[should_fail(expected = \"index out of bounds\")]\n+fn test_out_of_bounds_failure() {\n+    let v: &[int] = &[];\n+    v[0];\n+}\n+~~~\n+\n A test runner built with the `--test` flag supports a limited set of\n arguments to control which tests are run:\n "}, {"sha": "5759adf32440ee90ed0753674e4fda87621d5b78", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -280,7 +280,7 @@ impl Collector {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name),\n                 ignore: should_ignore,\n-                should_fail: false, // compiler failures are test failures\n+                should_fail: testing::ShouldFail::No, // compiler failures are test failures\n             },\n             testfn: testing::DynTestFn(proc() {\n                 runtest(test.as_slice(),"}, {"sha": "ca2f190ce76be103d77930c3cab5e1750fa0f4d1", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -37,12 +37,17 @@ use {ast, ast_util};\n use ptr::P;\n use util::small_vector::SmallVector;\n \n+enum ShouldFail {\n+    No,\n+    Yes(Option<InternedString>),\n+}\n+\n struct Test {\n     span: Span,\n     path: Vec<ast::Ident> ,\n     bench: bool,\n     ignore: bool,\n-    should_fail: bool\n+    should_fail: ShouldFail\n }\n \n struct TestCtxt<'a> {\n@@ -360,8 +365,16 @@ fn is_ignored(i: &ast::Item) -> bool {\n     i.attrs.iter().any(|attr| attr.check_name(\"ignore\"))\n }\n \n-fn should_fail(i: &ast::Item) -> bool {\n-    attr::contains_name(i.attrs.as_slice(), \"should_fail\")\n+fn should_fail(i: &ast::Item) -> ShouldFail {\n+    match i.attrs.iter().find(|attr| attr.check_name(\"should_fail\")) {\n+        Some(attr) => {\n+            let msg = attr.meta_item_list()\n+                .and_then(|list| list.iter().find(|mi| mi.check_name(\"expected\")))\n+                .and_then(|mi| mi.value_str());\n+            ShouldFail::Yes(msg)\n+        }\n+        None => ShouldFail::No,\n+    }\n }\n \n /*\n@@ -550,7 +563,20 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n                                   vec![name_expr]);\n \n     let ignore_expr = ecx.expr_bool(span, test.ignore);\n-    let fail_expr = ecx.expr_bool(span, test.should_fail);\n+    let should_fail_path = |name| {\n+        ecx.path(span, vec![self_id, test_id, ecx.ident_of(\"ShouldFail\"), ecx.ident_of(name)])\n+    };\n+    let fail_expr = match test.should_fail {\n+        ShouldFail::No => ecx.expr_path(should_fail_path(\"No\")),\n+        ShouldFail::Yes(ref msg) => {\n+            let path = should_fail_path(\"Yes\");\n+            let arg = match *msg {\n+                Some(ref msg) => ecx.expr_some(span, ecx.expr_str(span, msg.clone())),\n+                None => ecx.expr_none(span),\n+            };\n+            ecx.expr_call(span, ecx.expr_path(path), vec![arg])\n+        }\n+    };\n \n     // self::test::TestDesc { ... }\n     let desc_expr = ecx.expr_struct("}, {"sha": "06105ca61ca66264e5a98e41b03ccc9766d423a9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 70, "deletions": 23, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -47,6 +47,7 @@ use self::TestEvent::*;\n use self::NamePadding::*;\n use self::OutputLocation::*;\n \n+use std::any::{Any, AnyRefExt};\n use std::collections::TreeMap;\n use stats::Stats;\n use getopts::{OptGroup, optflag, optopt};\n@@ -78,7 +79,7 @@ pub mod test {\n              MetricChange, Improvement, Regression, LikelyNoise,\n              StaticTestFn, StaticTestName, DynTestName, DynTestFn,\n              run_test, test_main, test_main_static, filter_tests,\n-             parse_opts, StaticBenchFn};\n+             parse_opts, StaticBenchFn, ShouldFail};\n }\n \n pub mod stats;\n@@ -184,13 +185,19 @@ pub struct Bencher {\n     pub bytes: u64,\n }\n \n+#[deriving(Clone, Show, PartialEq, Eq, Hash)]\n+pub enum ShouldFail {\n+    No,\n+    Yes(Option<&'static str>)\n+}\n+\n // The definition of a single test. A test runner will run a list of\n // these.\n #[deriving(Clone, Show, PartialEq, Eq, Hash)]\n pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n-    pub should_fail: bool,\n+    pub should_fail: ShouldFail,\n }\n \n #[deriving(Show)]\n@@ -346,7 +353,7 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n \n fn usage(binary: &str) {\n     let message = format!(\"Usage: {} [OPTIONS] [FILTER]\", binary);\n-    println!(r\"{usage}\n+    println!(r#\"{usage}\n \n The FILTER regex is tested against the name of all tests to run, and\n only those tests that match are run.\n@@ -366,10 +373,12 @@ Test Attributes:\n                      function takes one argument (test::Bencher).\n     #[should_fail] - This function (also labeled with #[test]) will only pass if\n                      the code causes a failure (an assertion failure or panic!)\n+                     A message may be provided, which the failure string must\n+                     contain: #[should_fail(expected = \"foo\")].\n     #[ignore]      - When applied to a function which is already attributed as a\n                      test, then the test runner will ignore these tests during\n                      normal test runs. Running with --ignored will run these\n-                     tests.\",\n+                     tests.\"#,\n              usage = getopts::usage(message.as_slice(),\n                                     optgroups().as_slice()));\n }\n@@ -902,13 +911,13 @@ fn should_sort_failures_before_printing_them() {\n     let test_a = TestDesc {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n-        should_fail: false\n+        should_fail: ShouldFail::No\n     };\n \n     let test_b = TestDesc {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n-        should_fail: false\n+        should_fail: ShouldFail::No\n     };\n \n     let mut st = ConsoleTestState {\n@@ -1114,7 +1123,7 @@ pub fn run_test(opts: &TestOpts,\n \n             let stdout = reader.read_to_end().unwrap().into_iter().collect();\n             let task_result = result_future.into_inner();\n-            let test_result = calc_result(&desc, task_result.is_ok());\n+            let test_result = calc_result(&desc, task_result);\n             monitor_ch.send((desc.clone(), test_result, stdout));\n         })\n     }\n@@ -1148,13 +1157,17 @@ pub fn run_test(opts: &TestOpts,\n     }\n }\n \n-fn calc_result(desc: &TestDesc, task_succeeded: bool) -> TestResult {\n-    if task_succeeded {\n-        if desc.should_fail { TrFailed }\n-        else { TrOk }\n-    } else {\n-        if desc.should_fail { TrOk }\n-        else { TrFailed }\n+fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any+Send>>) -> TestResult {\n+    match (&desc.should_fail, task_result) {\n+        (&ShouldFail::No, Ok(())) |\n+        (&ShouldFail::Yes(None), Err(_)) => TrOk,\n+        (&ShouldFail::Yes(Some(msg)), Err(ref err))\n+            if err.downcast_ref::<String>()\n+                .map(|e| &**e)\n+                .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n+                .map(|e| e.contains(msg))\n+                .unwrap_or(false) => TrOk,\n+        _ => TrFailed,\n     }\n }\n \n@@ -1437,7 +1450,7 @@ mod tests {\n                TestDesc, TestDescAndFn, TestOpts, run_test,\n                Metric, MetricMap, MetricAdded, MetricRemoved,\n                Improvement, Regression, LikelyNoise,\n-               StaticTestName, DynTestName, DynTestFn};\n+               StaticTestName, DynTestName, DynTestFn, ShouldFail};\n     use std::io::TempDir;\n \n     #[test]\n@@ -1447,7 +1460,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: true,\n-                should_fail: false\n+                should_fail: ShouldFail::No,\n             },\n             testfn: DynTestFn(proc() f()),\n         };\n@@ -1464,7 +1477,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: true,\n-                should_fail: false\n+                should_fail: ShouldFail::No,\n             },\n             testfn: DynTestFn(proc() f()),\n         };\n@@ -1481,7 +1494,24 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_fail: true\n+                should_fail: ShouldFail::Yes(None)\n+            },\n+            testfn: DynTestFn(proc() f()),\n+        };\n+        let (tx, rx) = channel();\n+        run_test(&TestOpts::new(), false, desc, tx);\n+        let (_, res, _) = rx.recv();\n+        assert!(res == TrOk);\n+    }\n+\n+    #[test]\n+    fn test_should_fail_good_message() {\n+        fn f() { panic!(\"an error message\"); }\n+        let desc = TestDescAndFn {\n+            desc: TestDesc {\n+                name: StaticTestName(\"whatever\"),\n+                ignore: false,\n+                should_fail: ShouldFail::Yes(Some(\"error message\"))\n             },\n             testfn: DynTestFn(proc() f()),\n         };\n@@ -1491,14 +1521,31 @@ mod tests {\n         assert!(res == TrOk);\n     }\n \n+    #[test]\n+    fn test_should_fail_bad_message() {\n+        fn f() { panic!(\"an error message\"); }\n+        let desc = TestDescAndFn {\n+            desc: TestDesc {\n+                name: StaticTestName(\"whatever\"),\n+                ignore: false,\n+                should_fail: ShouldFail::Yes(Some(\"foobar\"))\n+            },\n+            testfn: DynTestFn(proc() f()),\n+        };\n+        let (tx, rx) = channel();\n+        run_test(&TestOpts::new(), false, desc, tx);\n+        let (_, res, _) = rx.recv();\n+        assert!(res == TrFailed);\n+    }\n+\n     #[test]\n     fn test_should_fail_but_succeeds() {\n         fn f() { }\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_fail: true\n+                should_fail: ShouldFail::Yes(None)\n             },\n             testfn: DynTestFn(proc() f()),\n         };\n@@ -1544,15 +1591,15 @@ mod tests {\n                 desc: TestDesc {\n                     name: StaticTestName(\"1\"),\n                     ignore: true,\n-                    should_fail: false,\n+                    should_fail: ShouldFail::No,\n                 },\n                 testfn: DynTestFn(proc() {}),\n             },\n             TestDescAndFn {\n                 desc: TestDesc {\n                     name: StaticTestName(\"2\"),\n                     ignore: false,\n-                    should_fail: false\n+                    should_fail: ShouldFail::No,\n                 },\n                 testfn: DynTestFn(proc() {}),\n             });\n@@ -1588,7 +1635,7 @@ mod tests {\n                     desc: TestDesc {\n                         name: DynTestName((*name).clone()),\n                         ignore: false,\n-                        should_fail: false\n+                        should_fail: ShouldFail::No,\n                     },\n                     testfn: DynTestFn(testfn),\n                 };\n@@ -1629,7 +1676,7 @@ mod tests {\n                 desc: TestDesc {\n                     name: DynTestName(name.to_string()),\n                     ignore: false,\n-                    should_fail: false\n+                    should_fail: ShouldFail::No,\n                 },\n                 testfn: DynTestFn(test_fn)\n             }"}, {"sha": "76a5022e3be81e67f08513771f70abe41d9b83c8", "filename": "src/test/run-fail/test-should-fail-bad-message.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check-stdout\n+// error-pattern:task 'test_foo' panicked at\n+// compile-flags: --test\n+// ignore-pretty: does not work well with `--test`\n+\n+#[test]\n+#[should_fail(expected = \"foobar\")]\n+fn test_foo() {\n+    panic!(\"blah\")\n+}\n+\n+"}, {"sha": "dcb2fe6dfc07660a78be9646655e93b5df4bf3c8", "filename": "src/test/run-pass/test-should-fail-good-message.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+// ignore-pretty: does not work well with `--test`\n+\n+#[test]\n+#[should_fail(expected = \"foo\")]\n+fn test_foo() {\n+    panic!(\"foo bar\")\n+}\n+\n+#[test]\n+#[should_fail(expected = \"foo\")]\n+fn test_foo_dynamic() {\n+    panic!(\"{} bar\", \"foo\")\n+}\n+\n+"}]}