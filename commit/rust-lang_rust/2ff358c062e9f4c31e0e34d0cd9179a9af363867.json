{"sha": "2ff358c062e9f4c31e0e34d0cd9179a9af363867", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZjM1OGMwNjJlOWY0YzMxZTBlMzRkMGNkOTE3OWE5YWYzNjM4Njc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-17T23:46:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-17T23:46:40Z"}, "message": "auto merge of #11618 : alexcrichton/rust/force-host, r=brson\n\nThe new macro loading infrastructure needs the ability to force a\r\nprocedural-macro crate to be built with the host architecture rather than the\r\ntarget architecture (because the compiler is just about to dlopen it).", "tree": {"sha": "a05d1b013d45d581cef4685f8d229aeec9607232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a05d1b013d45d581cef4685f8d229aeec9607232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ff358c062e9f4c31e0e34d0cd9179a9af363867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff358c062e9f4c31e0e34d0cd9179a9af363867", "html_url": "https://github.com/rust-lang/rust/commit/2ff358c062e9f4c31e0e34d0cd9179a9af363867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ff358c062e9f4c31e0e34d0cd9179a9af363867/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa67e13498936c42581f70daaf3b6d028426dde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa67e13498936c42581f70daaf3b6d028426dde6", "html_url": "https://github.com/rust-lang/rust/commit/aa67e13498936c42581f70daaf3b6d028426dde6"}, {"sha": "bd469341ebd1d0a0053507b0f012601d09b55d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd469341ebd1d0a0053507b0f012601d09b55d76", "html_url": "https://github.com/rust-lang/rust/commit/bd469341ebd1d0a0053507b0f012601d09b55d76"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "58f9ee2e81537818a329a0585db3062511df1a00", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ff358c062e9f4c31e0e34d0cd9179a9af363867/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2ff358c062e9f4c31e0e34d0cd9179a9af363867/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=2ff358c062e9f4c31e0e34d0cd9179a9af363867", "patch": "@@ -626,9 +626,10 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n         --aux-base $$(S)src/test/auxiliary/                 \\\n         --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n         --target $(2)                                       \\\n+        --host $(3)                                       \\\n         --adb-path=$(CFG_ADB)                          \\\n         --adb-test-dir=$(CFG_ADB_TEST_DIR)                  \\\n-        --rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) --target=$(2)\" \\\n+        --rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS)\" \\\n         $$(CTEST_TESTARGS)\n \n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)"}, {"sha": "4cf224cf404a14e61c9da3bcfb96d602ac772115", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=2ff358c062e9f4c31e0e34d0cd9179a9af363867", "patch": "@@ -86,6 +86,9 @@ pub struct config {\n     // Target system to be tested\n     target: ~str,\n \n+    // Host triple for the compiler being invoked\n+    host: ~str,\n+\n     // Extra parameter to run adb on arm-linux-androideabi\n     adb_path: ~str,\n "}, {"sha": "502f71ce837463cd8c5b8d5dd72b5a8151ded63a", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=2ff358c062e9f4c31e0e34d0cd9179a9af363867", "patch": "@@ -73,6 +73,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n                  \"percent change in metrics to consider noise\", \"N\"),\n           optflag(\"\", \"jit\", \"run tests under the JIT\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n+          optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n           optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n           optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n           optopt(\"\", \"test-shard\", \"run shard A, of B shards, worth of the testsuite\", \"A.B\"),\n@@ -134,6 +135,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n         rustcflags: matches.opt_str(\"rustcflags\"),\n         jit: matches.opt_present(\"jit\"),\n         target: opt_str2(matches.opt_str(\"target\")).to_str(),\n+        host: opt_str2(matches.opt_str(\"host\")).to_str(),\n         adb_path: opt_str2(matches.opt_str(\"adb-path\")).to_str(),\n         adb_test_dir:\n             opt_str2(matches.opt_str(\"adb-test-dir\")).to_str(),\n@@ -167,6 +169,7 @@ pub fn log_config(config: &config) {\n     logv(c, format!(\"rustcflags: {}\", opt_str(&config.rustcflags)));\n     logv(c, format!(\"jit: {}\", config.jit));\n     logv(c, format!(\"target: {}\", config.target));\n+    logv(c, format!(\"host: {}\", config.host));\n     logv(c, format!(\"adb_path: {}\", config.adb_path));\n     logv(c, format!(\"adb_test_dir: {}\", config.adb_test_dir));\n     logv(c, format!(\"adb_device_status: {}\", config.adb_device_status));"}, {"sha": "54d99151233ea27489f0436782b099185945c503", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=2ff358c062e9f4c31e0e34d0cd9179a9af363867", "patch": "@@ -28,6 +28,8 @@ pub struct TestProps {\n     debugger_cmds: ~[~str],\n     // Lines to check if they appear in the expected debugger output\n     check_lines: ~[~str],\n+    // Flag to force a crate to be built with the host architecture\n+    force_host: bool,\n }\n \n // Load any test directives embedded in the file\n@@ -39,6 +41,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut pp_exact = None;\n     let mut debugger_cmds = ~[];\n     let mut check_lines = ~[];\n+    let mut force_host = false;\n     iter_header(testfile, |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n@@ -53,6 +56,10 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n \n+        if !force_host {\n+            force_host = parse_force_host(ln);\n+        }\n+\n         match parse_aux_build(ln) {\n             Some(ab) => { aux_builds.push(ab); }\n             None => {}\n@@ -82,7 +89,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         aux_builds: aux_builds,\n         exec_env: exec_env,\n         debugger_cmds: debugger_cmds,\n-        check_lines: check_lines\n+        check_lines: check_lines,\n+        force_host: force_host,\n     };\n }\n \n@@ -141,6 +149,10 @@ fn parse_check_line(line: &str) -> Option<~str> {\n     parse_name_value_directive(line, ~\"check\")\n }\n \n+fn parse_force_host(line: &str) -> bool {\n+    parse_name_directive(line, \"force-host\")\n+}\n+\n fn parse_exec_env(line: &str) -> Option<(~str, ~str)> {\n     parse_name_value_directive(line, ~\"exec-env\").map(|nv| {\n         // nv is either FOO or FOO=BAR"}, {"sha": "6b822fedda62364736da936a107f2bc0fc7a28af", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=2ff358c062e9f4c31e0e34d0cd9179a9af363867", "patch": "@@ -691,8 +691,9 @@ fn compose_and_run_compiler(\n \n     for rel_ab in props.aux_builds.iter() {\n         let abs_ab = config.aux_base.join(rel_ab.as_slice());\n+        let aux_props = load_props(&abs_ab);\n         let aux_args =\n-            make_compile_args(config, props, ~[~\"--lib\"] + extra_link_args,\n+            make_compile_args(config, &aux_props, ~[~\"--lib\"] + extra_link_args,\n                               |a,b| make_lib_name(a, b, testfile), &abs_ab);\n         let auxres = compose_and_run(config, &abs_ab, aux_args, ~[],\n                                      config.compile_lib_path, None);\n@@ -738,10 +739,16 @@ fn make_compile_args(config: &config,\n                      testfile: &Path)\n                      -> ProcArgs {\n     let xform_file = xform(config, testfile);\n+    let target = if props.force_host {\n+        config.host.as_slice()\n+    } else {\n+        config.target.as_slice()\n+    };\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let mut args = ~[testfile.as_str().unwrap().to_owned(),\n                      ~\"-o\", xform_file.as_str().unwrap().to_owned(),\n-                     ~\"-L\", config.build_base.as_str().unwrap().to_owned()]\n+                     ~\"-L\", config.build_base.as_str().unwrap().to_owned(),\n+                     ~\"--target=\" + target]\n         + extras;\n     args.push_all_move(split_maybe_args(&config.rustcflags));\n     args.push_all_move(split_maybe_args(&props.compile_flags));"}, {"sha": "0892f0ba7359cc65fe065317001673c9f6d69dbe", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=2ff358c062e9f4c31e0e34d0cd9179a9af363867", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n+\n #[feature(globs, macro_registrar, macro_rules)];\n \n extern mod syntax;"}, {"sha": "b693030f24040414a85cd878460abe0edf2573ce", "filename": "src/test/run-pass/phase-syntax-link-does-resolve.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Ftest%2Frun-pass%2Fphase-syntax-link-does-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff358c062e9f4c31e0e34d0cd9179a9af363867/src%2Ftest%2Frun-pass%2Fphase-syntax-link-does-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fphase-syntax-link-does-resolve.rs?ref=2ff358c062e9f4c31e0e34d0cd9179a9af363867", "patch": "@@ -11,6 +11,18 @@\n // aux-build:macro_crate_test.rs\n // xfail-stage1\n // xfail-fast\n+// xfail-android\n+// force-host\n+\n+// You'll note that there's lots of directives above. This is a very particular\n+// test in which we're both linking to a macro crate and loading macros from it.\n+// This implies that both versions are the host architecture, meaning this test\n+// must also be compiled with the host arch.\n+//\n+// Hence, xfail-stage1 because macros are unstable around there, xfail-fast\n+// because this doesn't work with that test runner, xfail-android because it\n+// can't run host binaries, and force-host to make this test build as the host\n+// arch.\n \n #[feature(phase)];\n "}]}