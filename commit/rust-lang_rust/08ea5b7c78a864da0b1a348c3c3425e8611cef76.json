{"sha": "08ea5b7c78a864da0b1a348c3c3425e8611cef76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZWE1YjdjNzhhODY0ZGEwYjFhMzQ4YzNjMzQyNWU4NjExY2VmNzY=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-08-30T20:39:32Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-09-05T05:33:10Z"}, "message": "Fix #[test] shadowing in macro_prelude", "tree": {"sha": "afcb455d2ddfb8931930f1adfad8101774893e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcb455d2ddfb8931930f1adfad8101774893e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ea5b7c78a864da0b1a348c3c3425e8611cef76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ea5b7c78a864da0b1a348c3c3425e8611cef76", "html_url": "https://github.com/rust-lang/rust/commit/08ea5b7c78a864da0b1a348c3c3425e8611cef76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ea5b7c78a864da0b1a348c3c3425e8611cef76/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b27de41d4e00cb6c23df270572472fd4c6f47f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b27de41d4e00cb6c23df270572472fd4c6f47f8", "html_url": "https://github.com/rust-lang/rust/commit/9b27de41d4e00cb6c23df270572472fd4c6f47f8"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "65fe01ff96aa561f2c6e2e101764aa25552090f1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=08ea5b7c78a864da0b1a348c3c3425e8611cef76", "patch": "@@ -1412,6 +1412,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     crate_loader: &'a mut CrateLoader<'b>,\n     macro_names: FxHashSet<Ident>,\n     macro_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n+    unshadowable_attrs: FxHashMap<Name, &'a NameBinding<'a>>,\n     pub all_macros: FxHashMap<Name, Def>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     macro_defs: FxHashMap<Mark, DefId>,\n@@ -1729,6 +1730,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             crate_loader,\n             macro_names: FxHashSet(),\n             macro_prelude: FxHashMap(),\n+            unshadowable_attrs: FxHashMap(),\n             all_macros: FxHashMap(),\n             macro_map: FxHashMap(),\n             invocations,"}, {"sha": "4cc8d34866714bfd8f3d5c34b02841d4666209ca", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=08ea5b7c78a864da0b1a348c3c3425e8611cef76", "patch": "@@ -207,6 +207,23 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         self.macro_prelude.insert(ident.name, binding);\n     }\n \n+    fn add_unshadowable_attr(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>) {\n+        let def_id = DefId {\n+            krate: BUILTIN_MACROS_CRATE,\n+            index: DefIndex::from_array_index(self.macro_map.len(),\n+                                              DefIndexAddressSpace::Low),\n+        };\n+        let kind = ext.kind();\n+        self.macro_map.insert(def_id, ext);\n+        let binding = self.arenas.alloc_name_binding(NameBinding {\n+            kind: NameBindingKind::Def(Def::Macro(def_id, kind), false),\n+            span: DUMMY_SP,\n+            vis: ty::Visibility::Invisible,\n+            expansion: Mark::root(),\n+        });\n+        self.unshadowable_attrs.insert(ident.name, binding);\n+    }\n+\n     fn resolve_imports(&mut self) {\n         ImportResolver { resolver: self }.resolve_imports()\n     }\n@@ -462,8 +479,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             return def;\n         }\n \n-        if kind == MacroKind::Attr && *&path[0].as_str() == \"test\" {\n-            return Ok(self.macro_prelude.get(&path[0].name).unwrap().def())\n+        if kind == MacroKind::Attr && path.len() == 1 {\n+            if let Some(ext) = self.unshadowable_attrs.get(&path[0].name) {\n+                return Ok(ext.def());\n+            }\n         }\n \n         let legacy_resolution = self.resolve_legacy_scope(&invocation.legacy_scope, path[0], false);"}, {"sha": "0e059bc4a6ce5a7d29395d5fd7398cf259758350", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=08ea5b7c78a864da0b1a348c3c3425e8611cef76", "patch": "@@ -721,6 +721,7 @@ pub trait Resolver {\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]);\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);\n+    fn add_unshadowable_attr(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);\n \n     fn resolve_imports(&mut self);\n     // Resolves attribute and derive legacy macros from `#![plugin(..)]`.\n@@ -729,6 +730,7 @@ pub trait Resolver {\n \n     fn resolve_macro_invocation(&mut self, invoc: &Invocation, scope: Mark, force: bool)\n                                 -> Result<Option<Lrc<SyntaxExtension>>, Determinacy>;\n+\n     fn resolve_macro_path(&mut self, path: &ast::Path, kind: MacroKind, scope: Mark,\n                           derives_in_scope: &[ast::Path], force: bool)\n                           -> Result<Lrc<SyntaxExtension>, Determinacy>;\n@@ -759,6 +761,7 @@ impl Resolver for DummyResolver {\n     fn visit_ast_fragment_with_placeholders(&mut self, _invoc: Mark, _fragment: &AstFragment,\n                                             _derives: &[Mark]) {}\n     fn add_builtin(&mut self, _ident: ast::Ident, _ext: Lrc<SyntaxExtension>) {}\n+    fn add_unshadowable_attr(&mut self, _ident: ast::Ident, _ext: Lrc<SyntaxExtension>) {}\n \n     fn resolve_imports(&mut self) {}\n     fn find_legacy_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>, _allow_derive: bool)"}, {"sha": "c94c7874a05e4fe833333b5b712e1a94dfda28b9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=08ea5b7c78a864da0b1a348c3c3425e8611cef76", "patch": "@@ -769,8 +769,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"cfg_attr\", Normal, Ungated),\n     (\"main\", Normal, Ungated),\n     (\"start\", Normal, Ungated),\n-    (\"test\", Normal, Ungated),\n-    (\"bench\", Normal, Ungated),\n     (\"repr\", Normal, Ungated),\n     (\"path\", Normal, Ungated),\n     (\"abi\", Normal, Ungated),"}, {"sha": "a9990cdeabf91cbc9fc8261cb2109b86466bffa1", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=08ea5b7c78a864da0b1a348c3c3425e8611cef76", "patch": "@@ -71,6 +71,18 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                          enable_quotes: bool) {\n     deriving::register_builtin_derives(resolver);\n \n+    {\n+        let mut register_unshadowable = |name, ext| {\n+            resolver.add_unshadowable_attr(ast::Ident::with_empty_ctxt(name), Lrc::new(ext));\n+        };\n+\n+        register_unshadowable(Symbol::intern(\"test\"),\n+            MultiModifier(Box::new(test::expand_test)));\n+\n+        register_unshadowable(Symbol::intern(\"bench\"),\n+            MultiModifier(Box::new(test::expand_bench)));\n+    }\n+\n     let mut register = |name, ext| {\n         resolver.add_builtin(ast::Ident::with_empty_ctxt(name), Lrc::new(ext));\n     };\n@@ -133,8 +145,6 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n         assert: assert::expand_assert,\n     }\n \n-    register(Symbol::intern(\"test\"), MultiModifier(Box::new(test::expand_test)));\n-    register(Symbol::intern(\"bench\"), MultiModifier(Box::new(test::expand_bench)));\n \n     // format_args uses `unstable` things internally.\n     register(Symbol::intern(\"format_args\"),"}, {"sha": "ba7ed73b8225e19a78cff6aa6a883d75e05e1c1c", "filename": "src/test/ui/test-shadowing/auxiliary/test_macro.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Ftest%2Fui%2Ftest-shadowing%2Fauxiliary%2Ftest_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Ftest%2Fui%2Ftest-shadowing%2Fauxiliary%2Ftest_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-shadowing%2Fauxiliary%2Ftest_macro.rs?ref=08ea5b7c78a864da0b1a348c3c3425e8611cef76", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! test {\n+    () => {};\n+}\n\\ No newline at end of file"}, {"sha": "4ae8b7ffe8b66a95f3dcafa5aebc19e5defbb78d", "filename": "src/test/ui/test-shadowing/test-cant-be-shadowed.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Ftest%2Fui%2Ftest-shadowing%2Ftest-cant-be-shadowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ea5b7c78a864da0b1a348c3c3425e8611cef76/src%2Ftest%2Fui%2Ftest-shadowing%2Ftest-cant-be-shadowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-shadowing%2Ftest-cant-be-shadowed.rs?ref=08ea5b7c78a864da0b1a348c3c3425e8611cef76", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// aux-build:test_macro.rs\n+// compile-flags:--test\n+\n+#[macro_use] extern crate test_macro;\n+\n+#[test]\n+fn foo(){}\n\\ No newline at end of file"}]}