{"sha": "3cb5b8dc1849c5958c62caf990faf75fcec6b2ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYjViOGRjMTg0OWM1OTU4YzYyY2FmOTkwZmFmNzVmY2VjNmIyZWE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-18T11:57:34Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-19T09:19:59Z"}, "message": "std::str: Special case char_range_at_reverse so it is faster\n\nImplement char_range_at_reverse similarly to char_range_at, instead of\nre-using that method.", "tree": {"sha": "f0c5a6ecd0943f73f44a692c7b7f5bb308a65cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0c5a6ecd0943f73f44a692c7b7f5bb308a65cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cb5b8dc1849c5958c62caf990faf75fcec6b2ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb5b8dc1849c5958c62caf990faf75fcec6b2ea", "html_url": "https://github.com/rust-lang/rust/commit/3cb5b8dc1849c5958c62caf990faf75fcec6b2ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cb5b8dc1849c5958c62caf990faf75fcec6b2ea/comments", "author": null, "committer": null, "parents": [{"sha": "4043c70f23bbc883088634e9cf0c3224524a2c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4043c70f23bbc883088634e9cf0c3224524a2c5c", "html_url": "https://github.com/rust-lang/rust/commit/4043c70f23bbc883088634e9cf0c3224524a2c5c"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "c5c2150617c51e8a9f15a7ed7e3383a2ea92ee50", "filename": "src/libstd/str.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3cb5b8dc1849c5958c62caf990faf75fcec6b2ea/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb5b8dc1849c5958c62caf990faf75fcec6b2ea/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=3cb5b8dc1849c5958c62caf990faf75fcec6b2ea", "patch": "@@ -27,7 +27,7 @@ use iterator::{Iterator, FromIterator, Extendable};\n use iterator::{Filter, AdditiveIterator, Map};\n use iterator::{Invert, DoubleEndedIterator};\n use libc;\n-use num::Zero;\n+use num::{Saturating, Zero};\n use option::{None, Option, Some};\n use ptr;\n use ptr::RawPtr;\n@@ -1698,21 +1698,29 @@ impl<'self> StrSlice<'self> for &'self str {\n     fn char_range_at_reverse(&self, start: uint) -> CharRange {\n         let mut prev = start;\n \n-        // while there is a previous byte == 10......\n-        while prev > 0u && self[prev - 1u] & 192u8 == TAG_CONT_U8 {\n-            prev -= 1u;\n-        }\n+        prev = prev.saturating_sub(1);\n+        if self[prev] < 128 { return CharRange{ch: self[prev] as char, next: prev} }\n \n-        // now refer to the initial byte of previous char\n-        if prev > 0u {\n-            prev -= 1u;\n-        } else {\n-            prev = 0u;\n-        }\n+        // Multibyte case is a fn to allow char_range_at_reverse to inline cleanly\n+        fn multibyte_char_range_at_rev(s: &str, mut i: uint) -> CharRange {\n+            // while there is a previous byte == 10......\n+            while i > 0 && s[i] & 192u8 == TAG_CONT_U8 {\n+                i -= 1u;\n+            }\n+\n+            let mut val = s[i] as uint;\n+            let w = UTF8_CHAR_WIDTH[val] as uint;\n+            assert!((w != 0));\n \n+            val = utf8_first_byte!(val, w);\n+            val = utf8_acc_cont_byte!(val, s[i + 1]);\n+            if w > 2 { val = utf8_acc_cont_byte!(val, s[i + 2]); }\n+            if w > 3 { val = utf8_acc_cont_byte!(val, s[i + 3]); }\n+\n+            return CharRange {ch: val as char, next: i};\n+        }\n \n-        let ch = self.char_at(prev);\n-        return CharRange {ch:ch, next:prev};\n+        return multibyte_char_range_at_rev(*self, prev);\n     }\n \n     /// Plucks the character ending at the `i`th byte of a string"}]}