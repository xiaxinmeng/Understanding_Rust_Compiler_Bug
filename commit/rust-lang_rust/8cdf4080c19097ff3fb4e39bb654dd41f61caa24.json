{"sha": "8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "node_id": "C_kwDOAAsO6NoAKDhjZGY0MDgwYzE5MDk3ZmYzZmI0ZTM5YmI2NTRkZDQxZjYxY2FhMjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-24T16:20:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-24T16:20:15Z"}, "message": "Rollup merge of #100919 - sanxiyn:parallel-liveness, r=oli-obk\n\nUse par_body_owners for liveness\n\nI did this refactoring while working on something else. Liveness is about bodies, there is no reason to use par_for_each_module here.\n\nTests are updated because things are visited in a different order. I checked diagnostics are same, just in a different (and IMO, better) order.", "tree": {"sha": "112b0ece47a090afa39f0b7f8b0bb70ff490ce59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/112b0ece47a090afa39f0b7f8b0bb70ff490ce59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBk+/CRBK7hj4Ov3rIwAAfVYIAC1fGYsmZhNDGU3A2tk5DDoP\nlp6bTVqXV7t8C3P0rGL13aEqApFBUp+kCLpa/sdki/fC0q17bAAuxpk8JMdFYjeJ\nAjzcVUzUoktdPs2QtalteWLT3WwEdZYXcNobYnYlseeRY4okSrpoPi5PTNVjNb9u\nZRHDoPbUmJfnpwog7qA2AN+wsxF2tTPJkeQpqYbiTy3QR9APROtw+ivaEfSXMSk8\nSAxDztZa2bkWLhRPNz7tlGu7bbezEeOjIVJDUDypvHEgHZSWpm/P49qUuz5nO0TT\n7H4LL2wYs32v461TDVS+qzSaFs3I7PPIh92Hlb3oazs3CjB+ynQzSmlqotNooAI=\n=xr43\n-----END PGP SIGNATURE-----\n", "payload": "tree 112b0ece47a090afa39f0b7f8b0bb70ff490ce59\nparent ecf14d459caa6f8e274b33c829ded0d34662839b\nparent f280138c7c99c3a9bebbdf719f716c43eb944bbd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661358015 +0200\ncommitter GitHub <noreply@github.com> 1661358015 +0200\n\nRollup merge of #100919 - sanxiyn:parallel-liveness, r=oli-obk\n\nUse par_body_owners for liveness\n\nI did this refactoring while working on something else. Liveness is about bodies, there is no reason to use par_for_each_module here.\n\nTests are updated because things are visited in a different order. I checked diagnostics are same, just in a different (and IMO, better) order.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "html_url": "https://github.com/rust-lang/rust/commit/8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf14d459caa6f8e274b33c829ded0d34662839b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf14d459caa6f8e274b33c829ded0d34662839b", "html_url": "https://github.com/rust-lang/rust/commit/ecf14d459caa6f8e274b33c829ded0d34662839b"}, {"sha": "f280138c7c99c3a9bebbdf719f716c43eb944bbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f280138c7c99c3a9bebbdf719f716c43eb944bbd", "html_url": "https://github.com/rust-lang/rust/commit/f280138c7c99c3a9bebbdf719f716c43eb944bbd"}], "stats": {"total": 221, "additions": 106, "deletions": 115}, "files": [{"sha": "b7fbda58eca73d9cd3bd484ab3b5a4aac3d9ed93", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "patch": "@@ -911,13 +911,13 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                 });\n             },\n             {\n-                sess.time(\"liveness_and_intrinsic_checking\", || {\n-                    tcx.hir().par_for_each_module(|module| {\n+                sess.time(\"liveness_checking\", || {\n+                    tcx.hir().par_body_owners(|def_id| {\n                         // this must run before MIR dump, because\n                         // \"not all control paths return a value\" is reported here.\n                         //\n                         // maybe move the check to a MIR pass?\n-                        tcx.ensure().check_mod_liveness(module);\n+                        tcx.ensure().check_liveness(def_id.to_def_id());\n                     });\n                 });\n             }"}, {"sha": "16de6ebfe58e616e0ca4218b841e4dd2cfd7273f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "patch": "@@ -818,8 +818,8 @@ rustc_queries! {\n         desc { |tcx| \"checking privacy in {}\", describe_as_module(key, tcx) }\n     }\n \n-    query check_mod_liveness(key: LocalDefId) -> () {\n-        desc { |tcx| \"checking liveness of variables in {}\", describe_as_module(key, tcx) }\n+    query check_liveness(key: DefId) {\n+        desc { |tcx| \"checking liveness of variables in {}\", tcx.def_path_str(key) }\n     }\n \n     /// Return the live symbols in the crate for dead code check."}, {"sha": "1f22ebc730aedb5ad826bf65a2caa85dede7ff98", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 46, "deletions": 55, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "patch": "@@ -89,11 +89,10 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n-use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet};\n use rustc_index::vec::IndexVec;\n-use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, RootVariableMinCaptureList, Ty, TyCtxt};\n use rustc_session::lint;\n@@ -139,12 +138,54 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n     }\n }\n \n-fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx));\n+fn check_liveness(tcx: TyCtxt<'_>, def_id: DefId) {\n+    let local_def_id = match def_id.as_local() {\n+        None => return,\n+        Some(def_id) => def_id,\n+    };\n+\n+    // Don't run unused pass for #[derive()]\n+    let parent = tcx.local_parent(local_def_id);\n+    if let DefKind::Impl = tcx.def_kind(parent)\n+        && tcx.has_attr(parent.to_def_id(), sym::automatically_derived)\n+    {\n+        return;\n+    }\n+\n+    // Don't run unused pass for #[naked]\n+    if tcx.has_attr(def_id, sym::naked) {\n+        return;\n+    }\n+\n+    let mut maps = IrMaps::new(tcx);\n+    let body_id = tcx.hir().body_owned_by(local_def_id);\n+    let hir_id = tcx.hir().body_owner(body_id);\n+    let body = tcx.hir().body(body_id);\n+\n+    if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n+        for &var_hir_id in upvars.keys() {\n+            let var_name = tcx.hir().name(var_hir_id);\n+            maps.add_variable(Upvar(var_hir_id, var_name));\n+        }\n+    }\n+\n+    // gather up the various local variables, significant expressions,\n+    // and so forth:\n+    maps.visit_body(body);\n+\n+    // compute liveness\n+    let mut lsets = Liveness::new(&mut maps, local_def_id);\n+    let entry_ln = lsets.compute(&body, hir_id);\n+    lsets.log_liveness(entry_ln, body_id.hir_id);\n+\n+    // check for various error conditions\n+    lsets.visit_body(body);\n+    lsets.warn_about_unused_upvars(entry_ln);\n+    lsets.warn_about_unused_args(body, entry_ln);\n }\n \n pub fn provide(providers: &mut Providers) {\n-    *providers = Providers { check_mod_liveness, ..*providers };\n+    *providers = Providers { check_liveness, ..*providers };\n }\n \n // ______________________________________________________________________\n@@ -316,56 +357,6 @@ impl<'tcx> IrMaps<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n-    type NestedFilter = nested_filter::OnlyBodies;\n-\n-    fn nested_visit_map(&mut self) -> Self::Map {\n-        self.tcx.hir()\n-    }\n-\n-    fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n-        debug!(\"visit_body {:?}\", body.id());\n-\n-        // swap in a new set of IR maps for this body\n-        let mut maps = IrMaps::new(self.tcx);\n-        let hir_id = maps.tcx.hir().body_owner(body.id());\n-        let local_def_id = maps.tcx.hir().local_def_id(hir_id);\n-        let def_id = local_def_id.to_def_id();\n-\n-        // Don't run unused pass for #[derive()]\n-        let parent = self.tcx.local_parent(local_def_id);\n-        if let DefKind::Impl = self.tcx.def_kind(parent)\n-            && self.tcx.has_attr(parent.to_def_id(), sym::automatically_derived)\n-        {\n-            return;\n-        }\n-\n-        // Don't run unused pass for #[naked]\n-        if self.tcx.has_attr(def_id, sym::naked) {\n-            return;\n-        }\n-\n-        if let Some(upvars) = maps.tcx.upvars_mentioned(def_id) {\n-            for &var_hir_id in upvars.keys() {\n-                let var_name = maps.tcx.hir().name(var_hir_id);\n-                maps.add_variable(Upvar(var_hir_id, var_name));\n-            }\n-        }\n-\n-        // gather up the various local variables, significant expressions,\n-        // and so forth:\n-        intravisit::walk_body(&mut maps, body);\n-\n-        // compute liveness\n-        let mut lsets = Liveness::new(&mut maps, local_def_id);\n-        let entry_ln = lsets.compute(&body, hir_id);\n-        lsets.log_liveness(entry_ln, body.id().hir_id);\n-\n-        // check for various error conditions\n-        lsets.visit_body(body);\n-        lsets.warn_about_unused_upvars(entry_ln);\n-        lsets.warn_about_unused_args(body, entry_ln);\n-    }\n-\n     fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n         self.add_from_pat(&local.pat);\n         if local.els.is_some() {"}, {"sha": "cf8bd7a0a276549dc5c25d75c683b1f0476df504", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure-pattern-closure-within-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure-pattern-closure-within-closure.stderr?ref=8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "patch": "@@ -1,8 +1,8 @@\n-warning: unused variable: `t2`\n-  --> $DIR/destructure-pattern-closure-within-closure.rs:13:21\n+warning: unused variable: `g2`\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:10:17\n    |\n-LL |             let (_, t2) = t;\n-   |                     ^^ help: if this is intentional, prefix it with an underscore: `_t2`\n+LL |         let (_, g2) = g;\n+   |                 ^^ help: if this is intentional, prefix it with an underscore: `_g2`\n    |\n note: the lint level is defined here\n   --> $DIR/destructure-pattern-closure-within-closure.rs:3:9\n@@ -11,11 +11,11 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n-warning: unused variable: `g2`\n-  --> $DIR/destructure-pattern-closure-within-closure.rs:10:17\n+warning: unused variable: `t2`\n+  --> $DIR/destructure-pattern-closure-within-closure.rs:13:21\n    |\n-LL |         let (_, g2) = g;\n-   |                 ^^ help: if this is intentional, prefix it with an underscore: `_g2`\n+LL |             let (_, t2) = t;\n+   |                     ^^ help: if this is intentional, prefix it with an underscore: `_t2`\n \n warning: 2 warnings emitted\n "}, {"sha": "f2e6168998c4451b98f5c900d35fb58e45efcfe5", "filename": "src/test/ui/lint/unused/issue-54180-unused-ref-field.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54180-unused-ref-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54180-unused-ref-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54180-unused-ref-field.stderr?ref=8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "patch": "@@ -11,12 +11,6 @@ LL | #![deny(unused)]\n    |         ^^^^^^\n    = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n-error: unused variable: `x`\n-  --> $DIR/issue-54180-unused-ref-field.rs:29:45\n-   |\n-LL |     let _: i32 = points.iter().map(|Point { x, y }| y).sum();\n-   |                                             ^ help: try ignoring the field: `x: _`\n-\n error: unused variable: `f1`\n   --> $DIR/issue-54180-unused-ref-field.rs:26:13\n    |\n@@ -29,5 +23,11 @@ error: unused variable: `x`\n LL |         Point { y, ref mut x } => y,\n    |                    ^^^^^^^^^ help: try ignoring the field: `x: _`\n \n+error: unused variable: `x`\n+  --> $DIR/issue-54180-unused-ref-field.rs:29:45\n+   |\n+LL |     let _: i32 = points.iter().map(|Point { x, y }| y).sum();\n+   |                                             ^ help: try ignoring the field: `x: _`\n+\n error: aborting due to 4 previous errors\n "}, {"sha": "fd9a5bcbfc49b928b2290d888798a440e3a12d96", "filename": "src/test/ui/lint/unused/lint-unused-variables.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr?ref=8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "patch": "@@ -17,55 +17,55 @@ LL |     b: i32,\n    |     ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/lint-unused-variables.rs:68:9\n+  --> $DIR/lint-unused-variables.rs:22:9\n    |\n LL |         a: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:74:9\n+  --> $DIR/lint-unused-variables.rs:29:9\n    |\n LL |         b: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:42:9\n+  --> $DIR/lint-unused-variables.rs:34:9\n    |\n LL |         b: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:47:9\n+  --> $DIR/lint-unused-variables.rs:42:9\n    |\n LL |         b: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n-error: unused variable: `a`\n-  --> $DIR/lint-unused-variables.rs:22:9\n-   |\n-LL |         a: i32,\n-   |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n-\n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:29:9\n+  --> $DIR/lint-unused-variables.rs:47:9\n    |\n LL |         b: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:34:9\n+  --> $DIR/lint-unused-variables.rs:55:9\n    |\n LL |         b: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:55:9\n+  --> $DIR/lint-unused-variables.rs:60:9\n    |\n LL |         b: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n+error: unused variable: `a`\n+  --> $DIR/lint-unused-variables.rs:68:9\n+   |\n+LL |         a: i32,\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:60:9\n+  --> $DIR/lint-unused-variables.rs:74:9\n    |\n LL |         b: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_b`"}, {"sha": "16209d16c195f3664bbaa45a6c021eec3503d117", "filename": "src/test/ui/liveness/liveness-consts.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr?ref=8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "patch": "@@ -39,12 +39,6 @@ warning: unused variable: `z`\n LL | pub fn f(x: [u8; { let s = 17; 100 }]) -> [u8;  { let z = 18; 100 }] {\n    |                                                       ^ help: if this is intentional, prefix it with an underscore: `_z`\n \n-warning: unused variable: `z`\n-  --> $DIR/liveness-consts.rs:60:13\n-   |\n-LL |         let z = 42;\n-   |             ^ help: if this is intentional, prefix it with an underscore: `_z`\n-\n warning: value assigned to `t` is never read\n   --> $DIR/liveness-consts.rs:42:9\n    |\n@@ -59,5 +53,11 @@ warning: unused variable: `w`\n LL |         let w = 10;\n    |             ^ help: if this is intentional, prefix it with an underscore: `_w`\n \n+warning: unused variable: `z`\n+  --> $DIR/liveness-consts.rs:60:13\n+   |\n+LL |         let z = 42;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_z`\n+\n warning: 8 warnings emitted\n "}, {"sha": "6d18d295cfc64302724bd5b62b285b2bf83dd5cf", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cdf4080c19097ff3fb4e39bb654dd41f61caa24/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr?ref=8cdf4080c19097ff3fb4e39bb654dd41f61caa24", "patch": "@@ -23,97 +23,97 @@ LL |     #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `a`\n-  --> $DIR/param-attrs-cfg.rs:107:27\n+  --> $DIR/param-attrs-cfg.rs:41:27\n    |\n LL |         #[cfg(something)] a: i32,\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:113:27\n+  --> $DIR/param-attrs-cfg.rs:48:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:115:44\n+  --> $DIR/param-attrs-cfg.rs:50:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:67:27\n+  --> $DIR/param-attrs-cfg.rs:56:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:69:44\n+  --> $DIR/param-attrs-cfg.rs:58:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:75:27\n+  --> $DIR/param-attrs-cfg.rs:67:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:77:44\n+  --> $DIR/param-attrs-cfg.rs:69:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n-error: unused variable: `a`\n-  --> $DIR/param-attrs-cfg.rs:41:27\n-   |\n-LL |         #[cfg(something)] a: i32,\n-   |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n-\n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:48:27\n+  --> $DIR/param-attrs-cfg.rs:75:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:50:44\n+  --> $DIR/param-attrs-cfg.rs:77:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:56:27\n+  --> $DIR/param-attrs-cfg.rs:86:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:58:44\n+  --> $DIR/param-attrs-cfg.rs:88:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:86:27\n+  --> $DIR/param-attrs-cfg.rs:94:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:88:44\n+  --> $DIR/param-attrs-cfg.rs:96:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n+error: unused variable: `a`\n+  --> $DIR/param-attrs-cfg.rs:107:27\n+   |\n+LL |         #[cfg(something)] a: i32,\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:94:27\n+  --> $DIR/param-attrs-cfg.rs:113:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:96:44\n+  --> $DIR/param-attrs-cfg.rs:115:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`"}]}