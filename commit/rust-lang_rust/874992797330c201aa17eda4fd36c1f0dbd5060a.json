{"sha": "874992797330c201aa17eda4fd36c1f0dbd5060a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDk5Mjc5NzMzMGMyMDFhYTE3ZWRhNGZkMzZjMWYwZGJkNTA2MGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-16T08:44:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-16T08:44:20Z"}, "message": "Rustup", "tree": {"sha": "4966d68419b872b96ccfbc6296469c6fd845235c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4966d68419b872b96ccfbc6296469c6fd845235c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/874992797330c201aa17eda4fd36c1f0dbd5060a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqrg+UACgkQpp+NIls6\n19m4ow//YMoySHv9su5RRLk2TXVlmQlUI2ytbwhHnmVPVXoHFj2b99f7pH3Nd8aQ\nwYZGgMwPNCtpmYICRpyLCPmNGdqrqXEXSvEqUDi/PrI9R2c8e5EtVq4s7biTcknu\nUhLtF0dQTe5jHm3arzHHj1K6yGSqCBUnIvX1dKb58QNfVuwvT27Phu+9TIOpayyj\nIemE64/6nhqpKQWfenoACB0K4Tr6frL/Ps3X16KT7AikXJ/2H/XeKGjUg9F/aRPU\nBpb4lnGu3QgUavqpiu5Zp7DJeSCCVODvdY1Uxavs8rFY/1TRk/aIzevmDVWZ3yeS\nJLAirmzZ5V8sGmr28zukhLRprDwdzQrQ05SiY/tDkc8y4PIn82In9AYLjCV6lzy1\nPxVQHRE3dGX8SMB7VG28Cobf99lxZpirXP0i6mvALCAwCBgBCazx9mfU2bRBp6Dg\n3k9bt1etxnoTIgwjYfn0T9JUPgX2N/2NgMBXkIH52afsImWB47fJq26OC+SsHkG7\nzMIpfk5/58i/hp/eY83IdA7MuJL+ScjkmmsPzrNuOv54zJnoz9/SCiheeX1Hzt9g\nHz9WeGGk0PdHKidGVNRrz1sqGldBgPckSay5C0IZ0ZQPqXtDvh4WxCzEa6mRmMUN\n3LIA+u5IJNaS9p+3tBcDpgtsNqAuhA7Fg35Ru40kT4owdkkai9E=\n=2ZSQ\n-----END PGP SIGNATURE-----", "payload": "tree 4966d68419b872b96ccfbc6296469c6fd845235c\nparent c215702555526da1c3462e3de1180e90bb1f0ba1\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521189860 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521189860 +0100\n\nRustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/874992797330c201aa17eda4fd36c1f0dbd5060a", "html_url": "https://github.com/rust-lang/rust/commit/874992797330c201aa17eda4fd36c1f0dbd5060a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/874992797330c201aa17eda4fd36c1f0dbd5060a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c215702555526da1c3462e3de1180e90bb1f0ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c215702555526da1c3462e3de1180e90bb1f0ba1", "html_url": "https://github.com/rust-lang/rust/commit/c215702555526da1c3462e3de1180e90bb1f0ba1"}], "stats": {"total": 416, "additions": 207, "deletions": 209}, "files": [{"sha": "970b458e2a8b0cbdc89f987e18f1d0fc25ce451e", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,6 +1,10 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.188\n+* Rustup to *rustc 1.26.0-nightly (392645394 2018-03-15)*\n+* New lint: [`while_immutable_condition`]\n+\n ## 0.0.187\n * Rustup to *rustc 1.26.0-nightly (322d7f7b9 2018-02-25)*\n * New lints: [`redundant_field_names`], [`suspicious_arithmetic_impl`], [`suspicious_op_assign_impl`]\n@@ -777,6 +781,7 @@ All notable changes to this project will be documented in this file.\n [`useless_transmute`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#useless_transmute\n [`useless_vec`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#useless_vec\n [`verbose_bit_mask`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#verbose_bit_mask\n+[`while_immutable_condition`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#while_immutable_condition\n [`while_let_loop`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#while_let_loop\n [`while_let_on_iterator`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#while_let_on_iterator\n [`wrong_pub_self_convention`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#wrong_pub_self_convention"}, {"sha": "09eb34bf5fdb0adce175b8c38c98bc3ae56d2579", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.187\"\n+version = \"0.0.188\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -37,7 +37,7 @@ path = \"src/driver.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.187\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.188\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.5\"\n regex = \"0.2\""}, {"sha": "38b4a0ea18c289049ce3cb585468e2e277a0fda2", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.187\"\n+version = \"0.0.188\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "5272fb0a48e830f7e0c68198ee33ee6bad692f17", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -519,9 +519,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n         loops::UNUSED_COLLECT,\n+        loops::WHILE_IMMUTABLE_CONDITION,\n         loops::WHILE_LET_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n-        loops::WHILE_IMMUTABLE_CONDITION,\n         map_clone::MAP_CLONE,\n         matches::MATCH_AS_REF,\n         matches::MATCH_BOOL,"}, {"sha": "251f0c588e807d87d3f2d81bbb2b452ab1333747", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -531,7 +531,7 @@ fn is_questionmark_desugar_marked_call(expr: &Expr) -> bool {\n \n fn is_unit(ty: Ty) -> bool {\n     match ty.sty {\n-        ty::TyTuple(slice, _) if slice.is_empty() => true,\n+        ty::TyTuple(slice) if slice.is_empty() => true,\n         _ => false,\n     }\n }"}, {"sha": "a01600edac77a06d74891d62bf28486d8e71dd9e", "filename": "tests/ui/array_indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(inclusive_range_syntax, plugin)]\n+#![feature(plugin)]\n \n \n #![warn(indexing_slicing)]"}, {"sha": "65a565c68ecab9e089a4aa7f2deb6777f6e65225", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,5 +1,3 @@\n-#![feature(dotdoteq_in_patterns, inclusive_range_syntax)]\n-\n #![allow(blacklisted_name, collapsible_if, cyclomatic_complexity, eq_op, needless_continue,\n          needless_return, never_loop, no_effect, zero_divided_by_zero)]\n "}, {"sha": "cce63280ce12a88b0951e99a94604cc3c7ba4a1b", "filename": "tests/ui/copies.stderr", "status": "modified", "additions": 167, "deletions": 167, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,384 +1,384 @@\n error: this `if` has identical blocks\n-  --> $DIR/copies.rs:31:10\n+  --> $DIR/copies.rs:29:10\n    |\n-31 |       else { //~ ERROR same body as `if` block\n+29 |       else { //~ ERROR same body as `if` block\n    |  __________^\n-32 | |         Foo { bar: 42 };\n-33 | |         0..10;\n-34 | |         ..;\n+30 | |         Foo { bar: 42 };\n+31 | |         0..10;\n+32 | |         ..;\n ...  |\n-38 | |         foo();\n-39 | |     }\n+36 | |         foo();\n+37 | |     }\n    | |_____^\n    |\n    = note: `-D if-same-then-else` implied by `-D warnings`\n note: same as this\n-  --> $DIR/copies.rs:22:13\n+  --> $DIR/copies.rs:20:13\n    |\n-22 |       if true {\n+20 |       if true {\n    |  _____________^\n-23 | |         Foo { bar: 42 };\n-24 | |         0..10;\n-25 | |         ..;\n+21 | |         Foo { bar: 42 };\n+22 | |         0..10;\n+23 | |         ..;\n ...  |\n-29 | |         foo();\n-30 | |     }\n+27 | |         foo();\n+28 | |     }\n    | |_____^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:80:14\n+  --> $DIR/copies.rs:78:14\n    |\n-80 |           _ => { //~ ERROR match arms have same body\n+78 |           _ => { //~ ERROR match arms have same body\n    |  ______________^\n-81 | |             foo();\n-82 | |             let mut a = 42 + [23].len() as i32;\n-83 | |             if true {\n+79 | |             foo();\n+80 | |             let mut a = 42 + [23].len() as i32;\n+81 | |             if true {\n ...  |\n-87 | |             a\n-88 | |         }\n+85 | |             a\n+86 | |         }\n    | |_________^\n    |\n    = note: `-D match-same-arms` implied by `-D warnings`\n note: same as this\n-  --> $DIR/copies.rs:71:15\n+  --> $DIR/copies.rs:69:15\n    |\n-71 |           42 => {\n+69 |           42 => {\n    |  _______________^\n-72 | |             foo();\n-73 | |             let mut a = 42 + [23].len() as i32;\n-74 | |             if true {\n+70 | |             foo();\n+71 | |             let mut a = 42 + [23].len() as i32;\n+72 | |             if true {\n ...  |\n-78 | |             a\n-79 | |         }\n+76 | |             a\n+77 | |         }\n    | |_________^\n note: `42` has the same arm body as the `_` wildcard, consider removing it`\n-  --> $DIR/copies.rs:71:15\n+  --> $DIR/copies.rs:69:15\n    |\n-71 |           42 => {\n+69 |           42 => {\n    |  _______________^\n-72 | |             foo();\n-73 | |             let mut a = 42 + [23].len() as i32;\n-74 | |             if true {\n+70 | |             foo();\n+71 | |             let mut a = 42 + [23].len() as i32;\n+72 | |             if true {\n ...  |\n-78 | |             a\n-79 | |         }\n+76 | |             a\n+77 | |         }\n    | |_________^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:94:14\n+  --> $DIR/copies.rs:92:14\n    |\n-94 |         _ => 0, //~ ERROR match arms have same body\n+92 |         _ => 0, //~ ERROR match arms have same body\n    |              ^\n    |\n note: same as this\n-  --> $DIR/copies.rs:92:19\n+  --> $DIR/copies.rs:90:19\n    |\n-92 |         Abc::A => 0,\n+90 |         Abc::A => 0,\n    |                   ^\n note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n-  --> $DIR/copies.rs:92:19\n+  --> $DIR/copies.rs:90:19\n    |\n-92 |         Abc::A => 0,\n+90 |         Abc::A => 0,\n    |                   ^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:104:10\n+   --> $DIR/copies.rs:102:10\n     |\n-104 |       else { //~ ERROR same body as `if` block\n+102 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-105 | |         42\n-106 | |     };\n+103 | |         42\n+104 | |     };\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:101:21\n+   --> $DIR/copies.rs:99:21\n     |\n-101 |       let _ = if true {\n+99  |       let _ = if true {\n     |  _____________________^\n-102 | |         42\n-103 | |     }\n+100 | |         42\n+101 | |     }\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:118:10\n+   --> $DIR/copies.rs:116:10\n     |\n-118 |       else { //~ ERROR same body as `if` block\n+116 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-119 | |         for _ in &[42] {\n-120 | |             let foo: &Option<_> = &Some::<u8>(42);\n-121 | |             if true {\n+117 | |         for _ in &[42] {\n+118 | |             let foo: &Option<_> = &Some::<u8>(42);\n+119 | |             if true {\n ...   |\n-126 | |         }\n-127 | |     }\n+124 | |         }\n+125 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:108:13\n+   --> $DIR/copies.rs:106:13\n     |\n-108 |       if true {\n+106 |       if true {\n     |  _____________^\n-109 | |         for _ in &[42] {\n-110 | |             let foo: &Option<_> = &Some::<u8>(42);\n-111 | |             if true {\n+107 | |         for _ in &[42] {\n+108 | |             let foo: &Option<_> = &Some::<u8>(42);\n+109 | |             if true {\n ...   |\n-116 | |         }\n-117 | |     }\n+114 | |         }\n+115 | |     }\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:140:10\n+   --> $DIR/copies.rs:138:10\n     |\n-140 |       else { //~ ERROR same body as `if` block\n+138 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-141 | |         let bar = if true {\n-142 | |             42\n-143 | |         }\n+139 | |         let bar = if true {\n+140 | |             42\n+141 | |         }\n ...   |\n-149 | |         bar + 1;\n-150 | |     }\n+147 | |         bar + 1;\n+148 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:129:13\n+   --> $DIR/copies.rs:127:13\n     |\n-129 |       if true {\n+127 |       if true {\n     |  _____________^\n-130 | |         let bar = if true {\n-131 | |             42\n-132 | |         }\n+128 | |         let bar = if true {\n+129 | |             42\n+130 | |         }\n ...   |\n-138 | |         bar + 1;\n-139 | |     }\n+136 | |         bar + 1;\n+137 | |     }\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:175:10\n+   --> $DIR/copies.rs:173:10\n     |\n-175 |       else { //~ ERROR same body as `if` block\n+173 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-176 | |         if let Some(a) = Some(42) {}\n-177 | |     }\n+174 | |         if let Some(a) = Some(42) {}\n+175 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:172:13\n+   --> $DIR/copies.rs:170:13\n     |\n-172 |       if true {\n+170 |       if true {\n     |  _____________^\n-173 | |         if let Some(a) = Some(42) {}\n-174 | |     }\n+171 | |         if let Some(a) = Some(42) {}\n+172 | |     }\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:182:10\n+   --> $DIR/copies.rs:180:10\n     |\n-182 |       else { //~ ERROR same body as `if` block\n+180 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-183 | |         if let (1, .., 3) = (1, 2, 3) {}\n-184 | |     }\n+181 | |         if let (1, .., 3) = (1, 2, 3) {}\n+182 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:179:13\n+   --> $DIR/copies.rs:177:13\n     |\n-179 |       if true {\n+177 |       if true {\n     |  _____________^\n-180 | |         if let (1, .., 3) = (1, 2, 3) {}\n-181 | |     }\n+178 | |         if let (1, .., 3) = (1, 2, 3) {}\n+179 | |     }\n     | |_____^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:237:15\n+   --> $DIR/copies.rs:235:15\n     |\n-237 |         51 => foo(), //~ ERROR match arms have same body\n+235 |         51 => foo(), //~ ERROR match arms have same body\n     |               ^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:236:15\n+   --> $DIR/copies.rs:234:15\n     |\n-236 |         42 => foo(),\n+234 |         42 => foo(),\n     |               ^^^^^\n note: consider refactoring into `42 | 51`\n-   --> $DIR/copies.rs:236:15\n+   --> $DIR/copies.rs:234:15\n     |\n-236 |         42 => foo(),\n+234 |         42 => foo(),\n     |               ^^^^^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:243:17\n+   --> $DIR/copies.rs:241:17\n     |\n-243 |         None => 24, //~ ERROR match arms have same body\n+241 |         None => 24, //~ ERROR match arms have same body\n     |                 ^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:242:20\n+   --> $DIR/copies.rs:240:20\n     |\n-242 |         Some(_) => 24,\n+240 |         Some(_) => 24,\n     |                    ^^\n note: consider refactoring into `Some(_) | None`\n-   --> $DIR/copies.rs:242:20\n+   --> $DIR/copies.rs:240:20\n     |\n-242 |         Some(_) => 24,\n+240 |         Some(_) => 24,\n     |                    ^^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:265:28\n+   --> $DIR/copies.rs:263:28\n     |\n-265 |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n+263 |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n     |                            ^^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:264:28\n+   --> $DIR/copies.rs:262:28\n     |\n-264 |         (Some(a), None) => bar(a),\n+262 |         (Some(a), None) => bar(a),\n     |                            ^^^^^^\n note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n-   --> $DIR/copies.rs:264:28\n+   --> $DIR/copies.rs:262:28\n     |\n-264 |         (Some(a), None) => bar(a),\n+262 |         (Some(a), None) => bar(a),\n     |                            ^^^^^^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:271:26\n+   --> $DIR/copies.rs:269:26\n     |\n-271 |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n+269 |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n     |                          ^^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:270:26\n+   --> $DIR/copies.rs:268:26\n     |\n-270 |         (Some(a), ..) => bar(a),\n+268 |         (Some(a), ..) => bar(a),\n     |                          ^^^^^^\n note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n-   --> $DIR/copies.rs:270:26\n+   --> $DIR/copies.rs:268:26\n     |\n-270 |         (Some(a), ..) => bar(a),\n+268 |         (Some(a), ..) => bar(a),\n     |                          ^^^^^^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:277:20\n+   --> $DIR/copies.rs:275:20\n     |\n-277 |         (.., 3) => 42, //~ ERROR match arms have same body\n+275 |         (.., 3) => 42, //~ ERROR match arms have same body\n     |                    ^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:276:23\n+   --> $DIR/copies.rs:274:23\n     |\n-276 |         (1, .., 3) => 42,\n+274 |         (1, .., 3) => 42,\n     |                       ^^\n note: consider refactoring into `(1, .., 3) | (.., 3)`\n-   --> $DIR/copies.rs:276:23\n+   --> $DIR/copies.rs:274:23\n     |\n-276 |         (1, .., 3) => 42,\n+274 |         (1, .., 3) => 42,\n     |                       ^^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:283:12\n+   --> $DIR/copies.rs:281:12\n     |\n-283 |       } else { //~ ERROR same body as `if` block\n+281 |       } else { //~ ERROR same body as `if` block\n     |  ____________^\n-284 | |         0.0\n-285 | |     };\n+282 | |         0.0\n+283 | |     };\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:281:21\n+   --> $DIR/copies.rs:279:21\n     |\n-281 |       let _ = if true {\n+279 |       let _ = if true {\n     |  _____________________^\n-282 | |         0.0\n-283 | |     } else { //~ ERROR same body as `if` block\n+280 | |         0.0\n+281 | |     } else { //~ ERROR same body as `if` block\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:289:12\n+   --> $DIR/copies.rs:287:12\n     |\n-289 |       } else { //~ ERROR same body as `if` block\n+287 |       } else { //~ ERROR same body as `if` block\n     |  ____________^\n-290 | |         -0.0\n-291 | |     };\n+288 | |         -0.0\n+289 | |     };\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:287:21\n+   --> $DIR/copies.rs:285:21\n     |\n-287 |       let _ = if true {\n+285 |       let _ = if true {\n     |  _____________________^\n-288 | |         -0.0\n-289 | |     } else { //~ ERROR same body as `if` block\n+286 | |         -0.0\n+287 | |     } else { //~ ERROR same body as `if` block\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:309:12\n+   --> $DIR/copies.rs:307:12\n     |\n-309 |       } else { //~ ERROR same body as `if` block\n+307 |       } else { //~ ERROR same body as `if` block\n     |  ____________^\n-310 | |         std::f32::NAN\n-311 | |     };\n+308 | |         std::f32::NAN\n+309 | |     };\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:307:21\n+   --> $DIR/copies.rs:305:21\n     |\n-307 |       let _ = if true {\n+305 |       let _ = if true {\n     |  _____________________^\n-308 | |         std::f32::NAN\n-309 | |     } else { //~ ERROR same body as `if` block\n+306 | |         std::f32::NAN\n+307 | |     } else { //~ ERROR same body as `if` block\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:327:10\n+   --> $DIR/copies.rs:325:10\n     |\n-327 |       else { //~ ERROR same body as `if` block\n+325 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-328 | |         try!(Ok(\"foo\"));\n-329 | |     }\n+326 | |         try!(Ok(\"foo\"));\n+327 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:324:13\n+   --> $DIR/copies.rs:322:13\n     |\n-324 |       if true {\n+322 |       if true {\n     |  _____________^\n-325 | |         try!(Ok(\"foo\"));\n-326 | |     }\n+323 | |         try!(Ok(\"foo\"));\n+324 | |     }\n     | |_____^\n \n error: this `if` has the same condition as a previous if\n-   --> $DIR/copies.rs:353:13\n+   --> $DIR/copies.rs:351:13\n     |\n-353 |     else if b { //~ ERROR ifs same condition\n+351 |     else if b { //~ ERROR ifs same condition\n     |             ^\n     |\n     = note: `-D ifs-same-cond` implied by `-D warnings`\n note: same as this\n-   --> $DIR/copies.rs:351:8\n+   --> $DIR/copies.rs:349:8\n     |\n-351 |     if b {\n+349 |     if b {\n     |        ^\n \n error: this `if` has the same condition as a previous if\n-   --> $DIR/copies.rs:358:13\n+   --> $DIR/copies.rs:356:13\n     |\n-358 |     else if a == 1 { //~ ERROR ifs same condition\n+356 |     else if a == 1 { //~ ERROR ifs same condition\n     |             ^^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:356:8\n+   --> $DIR/copies.rs:354:8\n     |\n-356 |     if a == 1 {\n+354 |     if a == 1 {\n     |        ^^^^^^\n \n error: this `if` has the same condition as a previous if\n-   --> $DIR/copies.rs:365:13\n+   --> $DIR/copies.rs:363:13\n     |\n-365 |     else if 2*a == 1 { //~ ERROR ifs same condition\n+363 |     else if 2*a == 1 { //~ ERROR ifs same condition\n     |             ^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:361:8\n+   --> $DIR/copies.rs:359:8\n     |\n-361 |     if 2*a == 1 {\n+359 |     if 2*a == 1 {\n     |        ^^^^^^^^\n \n error: aborting due to 20 previous errors"}, {"sha": "0a8be4d938b1a3a5c1ab4694c33a57d947eadf4b", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(plugin, inclusive_range_syntax, custom_attribute)]\n+#![feature(plugin, custom_attribute)]\n \n \n use std::collections::*;"}, {"sha": "d1e4bf2a2c743cffaf5b603f2e1daced2172d632", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(plugin, box_syntax, inclusive_range_syntax)]\n+#![feature(plugin, box_syntax)]\n \n \n #![warn(no_effect, unnecessary_operation)]"}, {"sha": "611a324f6e3c5fcc719695ac582e1d34a15bc62e", "filename": "tests/ui/range.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,7 +1,4 @@\n #![feature(iterator_step_by)]\n-#![feature(inclusive_range_syntax)]\n-\n-\n \n struct NotARange;\n impl NotARange {"}, {"sha": "064429c337c86a336e67ce5ccd80e26777fbdc12", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,41 +1,41 @@\n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:13:13\n+  --> $DIR/range.rs:10:13\n    |\n-13 |     let _ = (0..1).step_by(0);\n+10 |     let _ = (0..1).step_by(0);\n    |             ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D iterator-step-by-zero` implied by `-D warnings`\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:17:13\n+  --> $DIR/range.rs:14:13\n    |\n-17 |     let _ = (1..).step_by(0);\n+14 |     let _ = (1..).step_by(0);\n    |             ^^^^^^^^^^^^^^^^\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:18:13\n+  --> $DIR/range.rs:15:13\n    |\n-18 |     let _ = (1..=2).step_by(0);\n+15 |     let _ = (1..=2).step_by(0);\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:21:13\n+  --> $DIR/range.rs:18:13\n    |\n-21 |     let _ = x.step_by(0);\n+18 |     let _ = x.step_by(0);\n    |             ^^^^^^^^^^^^\n \n error: It is more idiomatic to use v1.iter().enumerate()\n-  --> $DIR/range.rs:29:14\n+  --> $DIR/range.rs:26:14\n    |\n-29 |     let _x = v1.iter().zip(0..v1.len());\n+26 |     let _x = v1.iter().zip(0..v1.len());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D range-zip-with-len` implied by `-D warnings`\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:33:13\n+  --> $DIR/range.rs:30:13\n    |\n-33 |     let _ = v1.iter().step_by(2/3);\n+30 |     let _ = v1.iter().step_by(2/3);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "31574a4aeed6fe582f10039c745db3128ecd64e1", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,5 +1,3 @@\n-#![feature(inclusive_range_syntax)]\n-\n fn f() -> usize {\n     42\n }"}, {"sha": "1990300ef90477eca5cedc5449ba57ae08adeb0c", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,47 +1,47 @@\n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:12:14\n+  --> $DIR/range_plus_minus_one.rs:10:14\n    |\n-12 |     for _ in 0..3+1 { }\n+10 |     for _ in 0..3+1 { }\n    |              ^^^^^^ help: use: `0..=3`\n    |\n    = note: `-D range-plus-one` implied by `-D warnings`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:15:14\n+  --> $DIR/range_plus_minus_one.rs:13:14\n    |\n-15 |     for _ in 0..1+5 { }\n+13 |     for _ in 0..1+5 { }\n    |              ^^^^^^ help: use: `0..=5`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:18:14\n+  --> $DIR/range_plus_minus_one.rs:16:14\n    |\n-18 |     for _ in 1..1+1 { }\n+16 |     for _ in 1..1+1 { }\n    |              ^^^^^^ help: use: `1..=1`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:24:14\n+  --> $DIR/range_plus_minus_one.rs:22:14\n    |\n-24 |     for _ in 0..(1+f()) { }\n+22 |     for _ in 0..(1+f()) { }\n    |              ^^^^^^^^^^ help: use: `0..=f()`\n \n error: an exclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:28:13\n+  --> $DIR/range_plus_minus_one.rs:26:13\n    |\n-28 |     let _ = ..=11-1;\n+26 |     let _ = ..=11-1;\n    |             ^^^^^^^ help: use: `..11`\n    |\n    = note: `-D range-minus-one` implied by `-D warnings`\n \n error: an exclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:29:13\n+  --> $DIR/range_plus_minus_one.rs:27:13\n    |\n-29 |     let _ = ..=(11-1);\n+27 |     let _ = ..=(11-1);\n    |             ^^^^^^^^^ help: use: `..11`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:30:13\n+  --> $DIR/range_plus_minus_one.rs:28:13\n    |\n-30 |     let _ = (f()+1)..(f()+1);\n+28 |     let _ = (f()+1)..(f()+1);\n    |             ^^^^^^^^^^^^^^^^ help: use: `(f()+1)..=f()`\n \n error: aborting due to 7 previous errors"}, {"sha": "a14f0ef40a04a8a46cc392423157b829f9cf13a3", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874992797330c201aa17eda4fd36c1f0dbd5060a/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=874992797330c201aa17eda4fd36c1f0dbd5060a", "patch": "@@ -1,6 +1,6 @@\n #![warn(redundant_field_names)]\n #![allow(unused_variables)]\n-#![feature(inclusive_range, inclusive_range_syntax)]\n+#![feature(inclusive_range, inclusive_range_fields)]\n \n #[macro_use]\n extern crate derive_new;"}]}