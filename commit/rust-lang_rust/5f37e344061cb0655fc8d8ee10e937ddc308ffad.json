{"sha": "5f37e344061cb0655fc8d8ee10e937ddc308ffad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMzdlMzQ0MDYxY2IwNjU1ZmM4ZDhlZTEwZTkzN2RkYzMwOGZmYWQ=", "commit": {"author": {"name": "Jesse Bakker", "email": "github@jessebakker.com", "date": "2021-05-11T12:22:51Z"}, "committer": {"name": "Jesse Bakker", "email": "github@jessebakker.com", "date": "2021-05-11T13:14:23Z"}, "message": "Make \"pull assignments up\" assist work in more cases", "tree": {"sha": "4221ee9e865880d5bedd4f4fd94d8b72fe9fe4b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4221ee9e865880d5bedd4f4fd94d8b72fe9fe4b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f37e344061cb0655fc8d8ee10e937ddc308ffad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f37e344061cb0655fc8d8ee10e937ddc308ffad", "html_url": "https://github.com/rust-lang/rust/commit/5f37e344061cb0655fc8d8ee10e937ddc308ffad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f37e344061cb0655fc8d8ee10e937ddc308ffad/comments", "author": {"login": "Jesse-Bakker", "id": 22473248, "node_id": "MDQ6VXNlcjIyNDczMjQ4", "avatar_url": "https://avatars.githubusercontent.com/u/22473248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jesse-Bakker", "html_url": "https://github.com/Jesse-Bakker", "followers_url": "https://api.github.com/users/Jesse-Bakker/followers", "following_url": "https://api.github.com/users/Jesse-Bakker/following{/other_user}", "gists_url": "https://api.github.com/users/Jesse-Bakker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jesse-Bakker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jesse-Bakker/subscriptions", "organizations_url": "https://api.github.com/users/Jesse-Bakker/orgs", "repos_url": "https://api.github.com/users/Jesse-Bakker/repos", "events_url": "https://api.github.com/users/Jesse-Bakker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jesse-Bakker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jesse-Bakker", "id": 22473248, "node_id": "MDQ6VXNlcjIyNDczMjQ4", "avatar_url": "https://avatars.githubusercontent.com/u/22473248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jesse-Bakker", "html_url": "https://github.com/Jesse-Bakker", "followers_url": "https://api.github.com/users/Jesse-Bakker/followers", "following_url": "https://api.github.com/users/Jesse-Bakker/following{/other_user}", "gists_url": "https://api.github.com/users/Jesse-Bakker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jesse-Bakker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jesse-Bakker/subscriptions", "organizations_url": "https://api.github.com/users/Jesse-Bakker/orgs", "repos_url": "https://api.github.com/users/Jesse-Bakker/repos", "events_url": "https://api.github.com/users/Jesse-Bakker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jesse-Bakker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd11bbbc235bcc3891f20c6d4097834cf1990e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd11bbbc235bcc3891f20c6d4097834cf1990e5", "html_url": "https://github.com/rust-lang/rust/commit/6cd11bbbc235bcc3891f20c6d4097834cf1990e5"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "3128faa68bc190f576af4bb5b737c807600452a7", "filename": "crates/ide_assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5f37e344061cb0655fc8d8ee10e937ddc308ffad/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37e344061cb0655fc8d8ee10e937ddc308ffad/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=5f37e344061cb0655fc8d8ee10e937ddc308ffad", "patch": "@@ -60,6 +60,12 @@ pub(crate) fn pull_assignment_up(acc: &mut Assists, ctx: &AssistContext) -> Opti\n         return None;\n     };\n \n+    if let Some(parent) = tgt.syntax().parent() {\n+        if matches!(parent.kind(), syntax::SyntaxKind::BIN_EXPR | syntax::SyntaxKind::LET_STMT) {\n+            return None;\n+        }\n+    }\n+\n     acc.add(\n         AssistId(\"pull_assignment_up\", AssistKind::RefactorExtract),\n         \"Pull assignment up\",\n@@ -74,7 +80,13 @@ pub(crate) fn pull_assignment_up(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             let tgt = edit.make_ast_mut(tgt);\n \n             for (stmt, rhs) in assignments {\n-                ted::replace(stmt.syntax(), rhs.syntax());\n+                let mut stmt = stmt.syntax().clone();\n+                if let Some(parent) = stmt.parent() {\n+                    if ast::ExprStmt::cast(parent.clone()).is_some() {\n+                        stmt = parent.clone();\n+                    }\n+                }\n+                ted::replace(stmt, rhs.syntax());\n             }\n             let assign_expr = make::expr_assignment(collector.common_lhs, tgt.clone());\n             let assign_stmt = make::expr_stmt(assign_expr);\n@@ -87,14 +99,15 @@ pub(crate) fn pull_assignment_up(acc: &mut Assists, ctx: &AssistContext) -> Opti\n struct AssignmentsCollector<'a> {\n     sema: &'a hir::Semantics<'a, ide_db::RootDatabase>,\n     common_lhs: ast::Expr,\n-    assignments: Vec<(ast::ExprStmt, ast::Expr)>,\n+    assignments: Vec<(ast::BinExpr, ast::Expr)>,\n }\n \n impl<'a> AssignmentsCollector<'a> {\n     fn collect_match(&mut self, match_expr: &ast::MatchExpr) -> Option<()> {\n         for arm in match_expr.match_arm_list()?.arms() {\n             match arm.expr()? {\n                 ast::Expr::BlockExpr(block) => self.collect_block(&block)?,\n+                ast::Expr::BinExpr(expr) => self.collect_expr(&expr)?,\n                 _ => return None,\n             }\n         }\n@@ -114,24 +127,30 @@ impl<'a> AssignmentsCollector<'a> {\n         }\n     }\n     fn collect_block(&mut self, block: &ast::BlockExpr) -> Option<()> {\n-        if block.tail_expr().is_some() {\n-            return None;\n-        }\n-\n-        let last_stmt = block.statements().last()?;\n-        if let ast::Stmt::ExprStmt(stmt) = last_stmt {\n-            if let ast::Expr::BinExpr(expr) = stmt.expr()? {\n-                if expr.op_kind()? == ast::BinOp::Assignment\n-                    && is_equivalent(self.sema, &expr.lhs()?, &self.common_lhs)\n-                {\n-                    self.assignments.push((stmt, expr.rhs()?));\n-                    return Some(());\n-                }\n+        let last_expr = block.tail_expr().or_else(|| {\n+            if let ast::Stmt::ExprStmt(stmt) = block.statements().last()? {\n+                stmt.expr()\n+            } else {\n+                None\n             }\n+        })?;\n+\n+        if let ast::Expr::BinExpr(expr) = last_expr {\n+            return self.collect_expr(&expr);\n         }\n \n         None\n     }\n+\n+    fn collect_expr(&mut self, expr: &ast::BinExpr) -> Option<()> {\n+        if expr.op_kind()? == ast::BinOp::Assignment\n+            && is_equivalent(self.sema, &expr.lhs()?, &self.common_lhs)\n+        {\n+            self.assignments.push((expr.clone(), expr.rhs()?));\n+            return Some(());\n+        }\n+        None\n+    }\n }\n \n fn is_equivalent(\n@@ -241,7 +260,6 @@ fn foo() {\n     }\n \n     #[test]\n-    #[ignore]\n     fn test_pull_assignment_up_assignment_expressions() {\n         check_assist(\n             pull_assignment_up,"}]}