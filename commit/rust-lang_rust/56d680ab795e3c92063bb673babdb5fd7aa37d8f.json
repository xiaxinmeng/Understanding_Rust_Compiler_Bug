{"sha": "56d680ab795e3c92063bb673babdb5fd7aa37d8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDY4MGFiNzk1ZTNjOTIwNjNiYjY3M2JhYmRiNWZkN2FhMzdkOGY=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-07-29T04:15:56Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-29T08:39:14Z"}, "message": "Make program_output also return stderr", "tree": {"sha": "16edc554cd2bd2ebad991b38f0d805c844aed7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16edc554cd2bd2ebad991b38f0d805c844aed7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d680ab795e3c92063bb673babdb5fd7aa37d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d680ab795e3c92063bb673babdb5fd7aa37d8f", "html_url": "https://github.com/rust-lang/rust/commit/56d680ab795e3c92063bb673babdb5fd7aa37d8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d680ab795e3c92063bb673babdb5fd7aa37d8f/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c0f4d51f90f8705a33f59c5e186740c6e159458", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f4d51f90f8705a33f59c5e186740c6e159458", "html_url": "https://github.com/rust-lang/rust/commit/2c0f4d51f90f8705a33f59c5e186740c6e159458"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "da49c4d210756af3519ae54ece0f0b2e5827a6a2", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/56d680ab795e3c92063bb673babdb5fd7aa37d8f/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d680ab795e3c92063bb673babdb5fd7aa37d8f/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=56d680ab795e3c92063bb673babdb5fd7aa37d8f", "patch": "@@ -38,21 +38,26 @@ type program =\n         fn get_id() -> int ;\n         fn input() -> io::writer ;\n         fn output() -> io::reader ;\n+        fn err() -> io::reader ;\n         fn close_input() ;\n         fn finish() -> int ;\n     };\n \n fn start_program(prog: str, args: vec[str]) -> @program {\n     let pipe_input = os::pipe();\n     let pipe_output = os::pipe();\n-    let pid = spawn_process(prog, args, pipe_input.in, pipe_output.out, 0);\n+    let pipe_err = os::pipe();\n+    let pid = spawn_process(prog, args, pipe_input.in, pipe_output.out,\n+                            pipe_err.out);\n \n     if pid == -1 { fail; }\n     os::libc::close(pipe_input.in);\n     os::libc::close(pipe_output.out);\n+    os::libc::close(pipe_err.out);\n     obj new_program(pid: int,\n                     mutable in_fd: int,\n                     out_file: os::libc::FILE,\n+                    err_file: os::libc::FILE,\n                     mutable finished: bool) {\n         fn get_id() -> int { ret pid; }\n         fn input() -> io::writer {\n@@ -61,6 +66,9 @@ fn start_program(prog: str, args: vec[str]) -> @program {\n         fn output() -> io::reader {\n             ret io::new_reader(io::FILE_buf_reader(out_file, false));\n         }\n+        fn err() -> io::reader {\n+            ret io::new_reader(io::FILE_buf_reader(err_file, false));\n+        }\n         fn close_input() {\n             let invalid_fd = -1;\n             if in_fd != invalid_fd {\n@@ -78,21 +86,32 @@ fn start_program(prog: str, args: vec[str]) -> @program {\n             self.close_input();\n             if !finished { os::waitpid(pid); }\n             os::libc::fclose(out_file);\n+            os::libc::fclose(err_file);\n         }\n     }\n-    ret @new_program(pid, pipe_input.out, os::fd_FILE(pipe_output.in), false);\n+    ret @new_program(pid,\n+                     pipe_input.out,\n+                     os::fd_FILE(pipe_output.in),\n+                     os::fd_FILE(pipe_err.in),\n+                     false);\n }\n \n-fn program_output(prog: str, args: vec[str]) -> {status: int, out: str} {\n-    let pr = start_program(prog, args);\n-    pr.close_input();\n-    let out = pr.output();\n+fn read_all(rd: &io::reader) -> str {\n     let buf = \"\";\n-    while !out.eof() {\n-        let bytes = out.read_bytes(4096u);\n+    while !rd.eof() {\n+        let bytes = rd.read_bytes(4096u);\n         buf += str::unsafe_from_bytes(bytes);\n     }\n-    ret {status: pr.finish(), out: buf};\n+    ret buf;\n+}\n+\n+fn program_output(prog: str, args: vec[str])\n+    -> {status: int, out: str, err: str} {\n+    let pr = start_program(prog, args);\n+    pr.close_input();\n+    ret {status: pr.finish(),\n+         out: read_all(pr.output()),\n+         err: read_all(pr.err())};\n }\n // Local Variables:\n // mode: rust"}]}