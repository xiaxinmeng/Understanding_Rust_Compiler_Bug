{"sha": "410a96cc79df4fbb3c2f30bdb2682b867df41a7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMGE5NmNjNzlkZjRmYmIzYzJmMzBiZGIyNjgyYjg2N2RmNDFhN2U=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-18T19:32:45Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-27T05:20:40Z"}, "message": "std: Add benchmarks to c_str", "tree": {"sha": "4cc4111c93baf937e20bdc9993b4ad79da8415bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc4111c93baf937e20bdc9993b4ad79da8415bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410a96cc79df4fbb3c2f30bdb2682b867df41a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410a96cc79df4fbb3c2f30bdb2682b867df41a7e", "html_url": "https://github.com/rust-lang/rust/commit/410a96cc79df4fbb3c2f30bdb2682b867df41a7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410a96cc79df4fbb3c2f30bdb2682b867df41a7e/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9e7633043a79388fe3ed40c61a3961c2aedbcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9e7633043a79388fe3ed40c61a3961c2aedbcb", "html_url": "https://github.com/rust-lang/rust/commit/2a9e7633043a79388fe3ed40c61a3961c2aedbcb"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "3506faadd3e05df79a51bb68699cce57797b8e2a", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/410a96cc79df4fbb3c2f30bdb2682b867df41a7e/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410a96cc79df4fbb3c2f30bdb2682b867df41a7e/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=410a96cc79df4fbb3c2f30bdb2682b867df41a7e", "patch": "@@ -479,3 +479,106 @@ mod tests {\n         assert_eq!(c_str.as_str(), None);\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use iter::range;\n+    use libc;\n+    use option::Some;\n+    use ptr;\n+    use extra::test::BenchHarness;\n+\n+    #[inline]\n+    fn check(s: &str, c_str: *libc::c_char) {\n+        do s.as_imm_buf |s_buf, s_len| {\n+            for i in range(0, s_len) {\n+                unsafe {\n+                    assert_eq!(\n+                        *ptr::offset(s_buf, i as int) as libc::c_char,\n+                        *ptr::offset(c_str, i as int));\n+                }\n+            }\n+        }\n+    }\n+\n+    static s_short: &'static str = \"Mary\";\n+    static s_medium: &'static str = \"Mary had a little lamb\";\n+    static s_long: &'static str = \"\\\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\";\n+\n+    fn bench_to_str(bh: &mut BenchHarness, s: &str) {\n+        do bh.iter {\n+            let c_str = s.to_c_str();\n+            do c_str.with_ref |c_str_buf| {\n+                check(s, c_str_buf)\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_short(bh: &mut BenchHarness) {\n+        bench_to_str(bh, s_short)\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_medium(bh: &mut BenchHarness) {\n+        bench_to_str(bh, s_medium)\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_long(bh: &mut BenchHarness) {\n+        bench_to_str(bh, s_long)\n+    }\n+\n+    fn bench_to_c_str_unchecked(bh: &mut BenchHarness, s: &str) {\n+        do bh.iter {\n+            let c_str = unsafe { s.to_c_str_unchecked() };\n+            do c_str.with_ref |c_str_buf| {\n+                check(s, c_str_buf)\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_unchecked_short(bh: &mut BenchHarness) {\n+        bench_to_c_str_unchecked(bh, s_short)\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_unchecked_medium(bh: &mut BenchHarness) {\n+        bench_to_c_str_unchecked(bh, s_medium)\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_unchecked_long(bh: &mut BenchHarness) {\n+        bench_to_c_str_unchecked(bh, s_long)\n+    }\n+\n+    fn bench_with_c_str(bh: &mut BenchHarness, s: &str) {\n+        do bh.iter {\n+            do s.with_c_str |c_str_buf| {\n+                check(s, c_str_buf)\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_short(bh: &mut BenchHarness) {\n+        bench_with_c_str(bh, s_short)\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_medium(bh: &mut BenchHarness) {\n+        bench_with_c_str(bh, s_medium)\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_long(bh: &mut BenchHarness) {\n+        bench_with_c_str(bh, s_long)\n+    }\n+}"}]}