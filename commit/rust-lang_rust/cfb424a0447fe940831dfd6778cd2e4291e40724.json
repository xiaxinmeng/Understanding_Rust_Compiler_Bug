{"sha": "cfb424a0447fe940831dfd6778cd2e4291e40724", "node_id": "C_kwDOAAsO6NoAKGNmYjQyNGEwNDQ3ZmU5NDA4MzFkZmQ2Nzc4Y2QyZTQyOTFlNDA3MjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-20T20:42:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-20T20:42:39Z"}, "message": "Rollup merge of #103281 - thomcc:long-overdue, r=jyn514\n\nAdjust `transmute{,_copy}` to be clearer about which of `T` and `U` is input vs output\n\nThis is essentially a documentation-only change (although it does touch code in an irrelevant way).", "tree": {"sha": "9509dc33390009acdae91694d3dcf6b4a906fcb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9509dc33390009acdae91694d3dcf6b4a906fcb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb424a0447fe940831dfd6778cd2e4291e40724", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUbK/CRBK7hj4Ov3rIwAAJh8IABVm5eNzMJ/xrLm7yChQMvyg\n938jD7lDyQlcrIN/BqprCO7DmZ8ZZgPx9sOdyXtLsrO+32Bg94HK78tGzr6l9nfG\ntafwGqKDQEAzGCnKPxsp0Vs7wVtwhruCnR/Oogo0+X//rcGeyiVi3piI4iR2VteO\n3xD95AonM5aeKLxsBm1mVnqXBocTzIgc6+kVFqVe9RHmfMIbSMJr0FkLtJfn2Goh\nBAuck4jDNLgKCmPgw1PY2UZmBzfddLcnvjzjdFB6XfMLhVe5gX5WUu4pUoIV+BJ3\nUH7jzzBBxH7twbl6lwTYecbHV9ZTAtyq/2rsWAHYo6fvr+zTRKpelk8ZKVq9dNc=\n=AzMO\n-----END PGP SIGNATURE-----\n", "payload": "tree 9509dc33390009acdae91694d3dcf6b4a906fcb6\nparent be4816fbf0ffea428d0590945c12e3a61e26a953\nparent afd08175de04e890ec542b02d2b72a7b525e86d6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666298559 +0200\ncommitter GitHub <noreply@github.com> 1666298559 +0200\n\nRollup merge of #103281 - thomcc:long-overdue, r=jyn514\n\nAdjust `transmute{,_copy}` to be clearer about which of `T` and `U` is input vs output\n\nThis is essentially a documentation-only change (although it does touch code in an irrelevant way).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb424a0447fe940831dfd6778cd2e4291e40724", "html_url": "https://github.com/rust-lang/rust/commit/cfb424a0447fe940831dfd6778cd2e4291e40724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb424a0447fe940831dfd6778cd2e4291e40724/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be4816fbf0ffea428d0590945c12e3a61e26a953", "url": "https://api.github.com/repos/rust-lang/rust/commits/be4816fbf0ffea428d0590945c12e3a61e26a953", "html_url": "https://github.com/rust-lang/rust/commit/be4816fbf0ffea428d0590945c12e3a61e26a953"}, {"sha": "afd08175de04e890ec542b02d2b72a7b525e86d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd08175de04e890ec542b02d2b72a7b525e86d6", "html_url": "https://github.com/rust-lang/rust/commit/afd08175de04e890ec542b02d2b72a7b525e86d6"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "1589fee46bee639da97018ebcf729eadbafc5f7d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfb424a0447fe940831dfd6778cd2e4291e40724/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb424a0447fe940831dfd6778cd2e4291e40724/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=cfb424a0447fe940831dfd6778cd2e4291e40724", "patch": "@@ -994,14 +994,14 @@ extern \"rust-intrinsic\" {\n     /// `transmute` is semantically equivalent to a bitwise move of one type\n     /// into another. It copies the bits from the source value into the\n     /// destination value, then forgets the original. Note that source and destination\n-    /// are passed by-value, which means if `T` or `U` contain padding, that padding\n+    /// are passed by-value, which means if `Src` or `Dst` contain padding, that padding\n     /// is *not* guaranteed to be preserved by `transmute`.\n     ///\n     /// Both the argument and the result must be [valid](../../nomicon/what-unsafe-does.html) at\n     /// their given type. Violating this condition leads to [undefined behavior][ub]. The compiler\n     /// will generate code *assuming that you, the programmer, ensure that there will never be\n     /// undefined behavior*. It is therefore your responsibility to guarantee that every value\n-    /// passed to `transmute` is valid at both types `T` and `U`. Failing to uphold this condition\n+    /// passed to `transmute` is valid at both types `Src` and `Dst`. Failing to uphold this condition\n     /// may lead to unexpected and unstable compilation results. This makes `transmute` **incredibly\n     /// unsafe**. `transmute` should be the absolute last resort.\n     ///\n@@ -1012,7 +1012,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Because `transmute` is a by-value operation, alignment of the *transmuted values\n     /// themselves* is not a concern. As with any other function, the compiler already ensures\n-    /// both `T` and `U` are properly aligned. However, when transmuting values that *point\n+    /// both `Src` and `Dst` are properly aligned. However, when transmuting values that *point\n     /// elsewhere* (such as pointers, references, boxes\u2026), the caller has to ensure proper\n     /// alignment of the pointed-to values.\n     ///\n@@ -1248,7 +1248,7 @@ extern \"rust-intrinsic\" {\n     #[rustc_allowed_through_unstable_modules]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     #[rustc_diagnostic_item = \"transmute\"]\n-    pub fn transmute<T, U>(e: T) -> U;\n+    pub fn transmute<Src, Dst>(src: Src) -> Dst;\n \n     /// Returns `true` if the actual type given as `T` requires drop\n     /// glue; returns `false` if the actual type provided for `T`"}, {"sha": "9195da5a44f42bc7fe575d4916cf2d88b222594a", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cfb424a0447fe940831dfd6778cd2e4291e40724/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb424a0447fe940831dfd6778cd2e4291e40724/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=cfb424a0447fe940831dfd6778cd2e4291e40724", "patch": "@@ -1008,18 +1008,18 @@ pub fn copy<T: Copy>(x: &T) -> T {\n     *x\n }\n \n-/// Interprets `src` as having type `&U`, and then reads `src` without moving\n+/// Interprets `src` as having type `&Dst`, and then reads `src` without moving\n /// the contained value.\n ///\n-/// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]\n-/// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way\n-/// that is correct even when `&U` has stricter alignment requirements than `&T`). It will also\n-/// unsafely create a copy of the contained value instead of moving out of `src`.\n+/// This function will unsafely assume the pointer `src` is valid for [`size_of::<Dst>`][size_of]\n+/// bytes by transmuting `&Src` to `&Dst` and then reading the `&Dst` (except that this is done\n+/// in a way that is correct even when `&Dst` has stricter alignment requirements than `&Src`).\n+/// It will also unsafely create a copy of the contained value instead of moving out of `src`.\n ///\n-/// It is not a compile-time error if `T` and `U` have different sizes, but it\n-/// is highly encouraged to only invoke this function where `T` and `U` have the\n-/// same size. This function triggers [undefined behavior][ub] if `U` is larger than\n-/// `T`.\n+/// It is not a compile-time error if `Src` and `Dst` have different sizes, but it\n+/// is highly encouraged to only invoke this function where `Src` and `Dst` have the\n+/// same size. This function triggers [undefined behavior][ub] if `Dst` is larger than\n+/// `Src`.\n ///\n /// [ub]: ../../reference/behavior-considered-undefined.html\n ///\n@@ -1052,19 +1052,22 @@ pub fn copy<T: Copy>(x: &T) -> T {\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n-pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n-    assert!(size_of::<T>() >= size_of::<U>(), \"cannot transmute_copy if U is larger than T\");\n+pub const unsafe fn transmute_copy<Src, Dst>(src: &Src) -> Dst {\n+    assert!(\n+        size_of::<Src>() >= size_of::<Dst>(),\n+        \"cannot transmute_copy if Dst is larger than Src\"\n+    );\n \n-    // If U has a higher alignment requirement, src might not be suitably aligned.\n-    if align_of::<U>() > align_of::<T>() {\n+    // If Dst has a higher alignment requirement, src might not be suitably aligned.\n+    if align_of::<Dst>() > align_of::<Src>() {\n         // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n         // The caller must guarantee that the actual transmutation is safe.\n-        unsafe { ptr::read_unaligned(src as *const T as *const U) }\n+        unsafe { ptr::read_unaligned(src as *const Src as *const Dst) }\n     } else {\n         // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n-        // We just checked that `src as *const U` was properly aligned.\n+        // We just checked that `src as *const Dst` was properly aligned.\n         // The caller must guarantee that the actual transmutation is safe.\n-        unsafe { ptr::read(src as *const T as *const U) }\n+        unsafe { ptr::read(src as *const Src as *const Dst) }\n     }\n }\n "}, {"sha": "0362e1c8afb5e79c7f41c134f0852dc28cad0f02", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb424a0447fe940831dfd6778cd2e4291e40724/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb424a0447fe940831dfd6778cd2e4291e40724/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=cfb424a0447fe940831dfd6778cd2e4291e40724", "patch": "@@ -130,7 +130,11 @@ fn test_transmute_copy_grow_panics() {\n             payload\n                 .downcast::<&'static str>()\n                 .and_then(|s| {\n-                    if *s == \"cannot transmute_copy if U is larger than T\" { Ok(s) } else { Err(s) }\n+                    if *s == \"cannot transmute_copy if Dst is larger than Src\" {\n+                        Ok(s)\n+                    } else {\n+                        Err(s)\n+                    }\n                 })\n                 .unwrap_or_else(|p| panic::resume_unwind(p));\n         }"}, {"sha": "520efccae51c4f7c2b9e77c4047345034c59eace", "filename": "src/test/ui/issues/issue-6458-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb424a0447fe940831dfd6778cd2e4291e40724/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb424a0447fe940831dfd6778cd2e4291e40724/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-3.stderr?ref=cfb424a0447fe940831dfd6778cd2e4291e40724", "patch": "@@ -2,12 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-6458-3.rs:4:5\n    |\n LL |     mem::transmute(0);\n-   |     ^^^^^^^^^^^^^^ cannot infer type of the type parameter `U` declared on the function `transmute`\n+   |     ^^^^^^^^^^^^^^ cannot infer type of the type parameter `Dst` declared on the function `transmute`\n    |\n help: consider specifying the generic arguments\n    |\n-LL |     mem::transmute::<i32, U>(0);\n-   |                   ++++++++++\n+LL |     mem::transmute::<i32, Dst>(0);\n+   |                   ++++++++++++\n \n error: aborting due to previous error\n "}]}