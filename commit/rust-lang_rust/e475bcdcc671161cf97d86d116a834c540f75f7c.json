{"sha": "e475bcdcc671161cf97d86d116a834c540f75f7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NzViY2RjYzY3MTE2MWNmOTdkODZkMTE2YTgzNGM1NDBmNzVmN2M=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-06T18:02:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-06T18:02:26Z"}, "message": "Simplify CompletionContext by introducing a path CallKind enum", "tree": {"sha": "a5449ac31b140b65264645d6c074c6787f0eca08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5449ac31b140b65264645d6c074c6787f0eca08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e475bcdcc671161cf97d86d116a834c540f75f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e475bcdcc671161cf97d86d116a834c540f75f7c", "html_url": "https://github.com/rust-lang/rust/commit/e475bcdcc671161cf97d86d116a834c540f75f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e475bcdcc671161cf97d86d116a834c540f75f7c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad9234fef2a90105448214255669fb46a382c3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9234fef2a90105448214255669fb46a382c3a5", "html_url": "https://github.com/rust-lang/rust/commit/ad9234fef2a90105448214255669fb46a382c3a5"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "22844c2ae1c8297983855887ae8eb84ecf9f8a8e", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=e475bcdcc671161cf97d86d116a834c540f75f7c", "patch": "@@ -4,7 +4,7 @@ use either::Either;\n use hir::{HasVisibility, ScopeDef};\n use rustc_hash::FxHashSet;\n \n-use crate::{context::CompletionContext, Completions};\n+use crate::{context::CompletionContext, patterns::ImmediateLocation, Completions};\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -18,7 +18,7 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return,\n     };\n \n-    if ctx.is_call {\n+    if matches!(ctx.completion_location, Some(ImmediateLocation::MethodCall { .. })) {\n         cov_mark::hit!(test_no_struct_field_completion_for_method_call);\n     } else {\n         complete_fields(ctx, &receiver_ty, |field, ty| match field {"}, {"sha": "86eb2171424bab8a72e873085ba551ea3d23a4bb", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=e475bcdcc671161cf97d86d116a834c540f75f7c", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n \n     let (dot_receiver, receiver_is_ambiguous_float_literal) = match &ctx.completion_location {\n-        Some(ImmediateLocation::MethodCall { receiver: Some(it) }) => (it, false),\n+        Some(ImmediateLocation::MethodCall { receiver: Some(it), .. }) => (it, false),\n         Some(ImmediateLocation::FieldAccess {\n             receiver: Some(it),\n             receiver_is_ambiguous_float_literal,"}, {"sha": "6bd67c1235e8442c2cdf96d20b43805cca3541ed", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=e475bcdcc671161cf97d86d116a834c540f75f7c", "patch": "@@ -29,6 +29,18 @@ pub(crate) enum PatternRefutability {\n     Irrefutable,\n }\n \n+#[derive(Debug)]\n+pub(crate) struct PathCompletionContext {\n+    /// If this is a call with () already there\n+    call_kind: Option<CallKind>,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub(crate) enum CallKind {\n+    Pat,\n+    Mac,\n+    Expr,\n+}\n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n@@ -68,6 +80,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) prev_sibling: Option<ImmediatePrevSibling>,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n \n+    pub(super) path_context: Option<PathCompletionContext>,\n     /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n@@ -78,12 +91,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) can_be_stmt: bool,\n     /// `true` if we expect an expression at the cursor position.\n     pub(super) is_expr: bool,\n-    /// If this is a call (method or function) in particular, i.e. the () are already there.\n-    pub(super) is_call: bool,\n-    /// Like `is_call`, but for tuple patterns.\n-    pub(super) is_pattern_call: bool,\n-    /// If this is a macro call, i.e. the () are already there.\n-    pub(super) is_macro_call: bool,\n     pub(super) is_path_type: bool,\n     pub(super) has_type_args: bool,\n     pub(super) locals: Vec<(String, Local)>,\n@@ -153,9 +160,7 @@ impl<'a> CompletionContext<'a> {\n             path_qual: None,\n             can_be_stmt: false,\n             is_expr: false,\n-            is_call: false,\n-            is_pattern_call: false,\n-            is_macro_call: false,\n+            path_context: None,\n             is_path_type: false,\n             has_type_args: false,\n             previous_token: None,\n@@ -250,14 +255,14 @@ impl<'a> CompletionContext<'a> {\n     pub(crate) fn has_dot_receiver(&self) -> bool {\n         matches!(\n             &self.completion_location,\n-            Some(ImmediateLocation::FieldAccess { receiver, .. }) | Some(ImmediateLocation::MethodCall { receiver })\n+            Some(ImmediateLocation::FieldAccess { receiver, .. }) | Some(ImmediateLocation::MethodCall { receiver,.. })\n                 if receiver.is_some()\n         )\n     }\n \n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n         match &self.completion_location {\n-            Some(ImmediateLocation::MethodCall { receiver })\n+            Some(ImmediateLocation::MethodCall { receiver, .. })\n             | Some(ImmediateLocation::FieldAccess { receiver, .. }) => receiver.as_ref(),\n             _ => None,\n         }\n@@ -316,6 +321,10 @@ impl<'a> CompletionContext<'a> {\n         ) || self.attribute_under_caret.is_some()\n     }\n \n+    pub(crate) fn path_call_kind(&self) -> Option<CallKind> {\n+        self.path_context.as_ref().and_then(|it| it.call_kind)\n+    }\n+\n     fn fill_impl_def(&mut self) {\n         self.impl_def = self\n             .sema\n@@ -568,17 +577,21 @@ impl<'a> CompletionContext<'a> {\n         };\n \n         if let Some(segment) = ast::PathSegment::cast(parent) {\n+            let mut path_ctx = PathCompletionContext { call_kind: None };\n             let path = segment.parent_path();\n-            self.is_call = path\n-                .syntax()\n-                .parent()\n-                .and_then(ast::PathExpr::cast)\n-                .and_then(|it| it.syntax().parent().and_then(ast::CallExpr::cast))\n-                .is_some();\n-            self.is_macro_call = path.syntax().parent().and_then(ast::MacroCall::cast).is_some();\n-            self.is_pattern_call =\n-                path.syntax().parent().and_then(ast::TupleStructPat::cast).is_some();\n \n+            if let Some(p) = path.syntax().parent() {\n+                path_ctx.call_kind = match_ast! {\n+                    match p {\n+                        ast::PathExpr(it) => it.syntax().parent().and_then(ast::CallExpr::cast).map(|_| CallKind::Expr),\n+                        ast::MacroCall(_it) => Some(CallKind::Mac),\n+                        ast::TupleStructPat(_it) => Some(CallKind::Pat),\n+                        _ => None\n+                    }\n+                };\n+            }\n+            self.path_context = Some(path_ctx);\n+            dbg!(&self.path_context);\n             self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n             self.has_type_args = segment.generic_arg_list().is_some();\n \n@@ -623,8 +636,6 @@ impl<'a> CompletionContext<'a> {\n                 .unwrap_or(false);\n             self.is_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n         }\n-        self.is_call |=\n-            matches!(self.completion_location, Some(ImmediateLocation::MethodCall { .. }));\n     }\n }\n "}, {"sha": "251d76fe9a928cdac249d62b74676483a4ffb48f", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=e475bcdcc671161cf97d86d116a834c540f75f7c", "patch": "@@ -4,7 +4,7 @@ use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n     algo::non_trivia_sibling,\n-    ast::{self, LoopBodyOwner},\n+    ast::{self, ArgListOwner, LoopBodyOwner},\n     match_ast, AstNode, Direction, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n@@ -39,6 +39,7 @@ pub(crate) enum ImmediateLocation {\n     // Original file ast node\n     MethodCall {\n         receiver: Option<ast::Expr>,\n+        has_parens: bool,\n     },\n     // Original file ast node\n     FieldAccess {\n@@ -204,6 +205,7 @@ pub(crate) fn determine_location(\n                     .receiver()\n                     .map(|e| e.syntax().text_range())\n                     .and_then(|r| find_node_with_range(original_file, r)),\n+                has_parens: it.arg_list().map_or(false, |it| it.l_paren_token().is_some())\n             },\n             _ => return None,\n         }"}, {"sha": "c54752d30b4aedf1d6a9ddac556232d99b3506b7", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=e475bcdcc671161cf97d86d116a834c540f75f7c", "patch": "@@ -2,7 +2,7 @@\n \n use itertools::Itertools;\n \n-use crate::{item::Builder, CompletionContext};\n+use crate::{context::CallKind, item::Builder, patterns::ImmediateLocation, CompletionContext};\n \n #[derive(Debug)]\n pub(super) enum Params {\n@@ -32,10 +32,12 @@ impl Builder {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }\n-        if ctx.is_pattern_call {\n-            return false;\n-        }\n-        if ctx.is_call {\n+        if matches!(ctx.path_call_kind(), Some(CallKind::Expr) | Some(CallKind::Pat))\n+            | matches!(\n+                ctx.completion_location,\n+                Some(ImmediateLocation::MethodCall { has_parens: true, .. })\n+            )\n+        {\n             return false;\n         }\n "}, {"sha": "429d937c8ea875a433d45b1632c8ce4b00a53d0f", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e475bcdcc671161cf97d86d116a834c540f75f7c/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=e475bcdcc671161cf97d86d116a834c540f75f7c", "patch": "@@ -5,6 +5,7 @@ use ide_db::SymbolKind;\n use syntax::display::macro_label;\n \n use crate::{\n+    context::CallKind,\n     item::{CompletionItem, CompletionKind, ImportEdit},\n     render::RenderContext,\n };\n@@ -68,7 +69,8 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn needs_bang(&self) -> bool {\n-        self.ctx.completion.use_item_syntax.is_none() && !self.ctx.completion.is_macro_call\n+        self.ctx.completion.use_item_syntax.is_none()\n+            && !matches!(self.ctx.completion.path_call_kind(), Some(CallKind::Mac))\n     }\n \n     fn label(&self) -> String {"}]}