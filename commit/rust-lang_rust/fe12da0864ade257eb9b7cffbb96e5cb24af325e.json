{"sha": "fe12da0864ade257eb9b7cffbb96e5cb24af325e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTJkYTA4NjRhZGUyNTdlYjliN2NmZmJiOTZlNWNiMjRhZjMyNWU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-03T21:38:01Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-04T23:48:57Z"}, "message": "De-mode comm::Chan", "tree": {"sha": "f1752bc3c7d9a1b1e2e07041ff4cc4c0fcc9ab2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1752bc3c7d9a1b1e2e07041ff4cc4c0fcc9ab2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe12da0864ade257eb9b7cffbb96e5cb24af325e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe12da0864ade257eb9b7cffbb96e5cb24af325e", "html_url": "https://github.com/rust-lang/rust/commit/fe12da0864ade257eb9b7cffbb96e5cb24af325e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe12da0864ade257eb9b7cffbb96e5cb24af325e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777baeb2986aebf32866358c31e4321b594b0742", "url": "https://api.github.com/repos/rust-lang/rust/commits/777baeb2986aebf32866358c31e4321b594b0742", "html_url": "https://github.com/rust-lang/rust/commit/777baeb2986aebf32866358c31e4321b594b0742"}], "stats": {"total": 346, "additions": 173, "deletions": 173}, "files": [{"sha": "62b3b4409abd046f907b0dbe23e6b8d27f7d5faa", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -2952,7 +2952,7 @@ An example of a `spawn` call:\n \n ~~~~\n let po = comm::Port();\n-let ch = comm::Chan(po);\n+let ch = comm::Chan(&po);\n \n do task::spawn {\n     // let task run, do other things\n@@ -2974,7 +2974,7 @@ An example of a send:\n \n ~~~~\n let po = comm::Port();\n-let ch = comm::Chan(po);\n+let ch = comm::Chan(&po);\n comm::send(ch, ~\"hello, world\");\n ~~~~\n \n@@ -2990,7 +2990,7 @@ An example of a *receive*:\n \n ~~~~~~~~\n # let po = comm::Port();\n-# let ch = comm::Chan(po);\n+# let ch = comm::Chan(&po);\n # comm::send(ch, ~\"\");\n let s = comm::recv(po);\n ~~~~~~~~"}, {"sha": "c9cd1a21b454ceaf2ea305942ac8dc7513708232", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -32,8 +32,8 @@ will once again be the preferred module for intertask communication.\n \n */\n \n-// NB: transitionary, de-mode-ing\n-// tjc: re-forbid deprecated modes after snapshot\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n use either::Either;\n@@ -74,7 +74,7 @@ pub fn Port<T: Send>() -> Port<T> {\n \n impl<T: Send> Port<T> {\n \n-    fn chan() -> Chan<T> { Chan(self) }\n+    fn chan() -> Chan<T> { Chan(&self) }\n     fn send(v: T) { self.chan().send(move v) }\n     fn recv() -> T { recv(self) }\n     fn peek() -> bool { peek(self) }\n@@ -166,7 +166,7 @@ fn as_raw_port<T: Send, U>(ch: comm::Chan<T>, f: fn(*rust_port) -> U) -> U {\n  * Constructs a channel. The channel is bound to the port used to\n  * construct it.\n  */\n-pub fn Chan<T: Send>(&&p: Port<T>) -> Chan<T> {\n+pub fn Chan<T: Send>(p: &Port<T>) -> Chan<T> {\n     Chan_(rustrt::get_port_id((**p).po))\n }\n \n@@ -304,51 +304,51 @@ extern mod rusti {\n \n \n #[test]\n-fn create_port_and_chan() { let p = Port::<int>(); Chan(p); }\n+fn create_port_and_chan() { let p = Port::<int>(); Chan(&p); }\n \n #[test]\n fn send_int() {\n     let p = Port::<int>();\n-    let c = Chan(p);\n+    let c = Chan(&p);\n     send(c, 22);\n }\n \n #[test]\n fn send_recv_fn() {\n     let p = Port::<int>();\n-    let c = Chan::<int>(p);\n+    let c = Chan::<int>(&p);\n     send(c, 42);\n     assert (recv(p) == 42);\n }\n \n #[test]\n fn send_recv_fn_infer() {\n     let p = Port();\n-    let c = Chan(p);\n+    let c = Chan(&p);\n     send(c, 42);\n     assert (recv(p) == 42);\n }\n \n #[test]\n fn chan_chan_infer() {\n     let p = Port(), p2 = Port::<int>();\n-    let c = Chan(p);\n-    send(c, Chan(p2));\n+    let c = Chan(&p);\n+    send(c, Chan(&p2));\n     recv(p);\n }\n \n #[test]\n fn chan_chan() {\n     let p = Port::<Chan<int>>(), p2 = Port::<int>();\n-    let c = Chan(p);\n-    send(c, Chan(p2));\n+    let c = Chan(&p);\n+    send(c, Chan(&p2));\n     recv(p);\n }\n \n #[test]\n fn test_peek() {\n     let po = Port();\n-    let ch = Chan(po);\n+    let ch = Chan(&po);\n     assert !peek(po);\n     send(ch, ());\n     assert peek(po);\n@@ -360,8 +360,8 @@ fn test_peek() {\n fn test_select2_available() {\n     let po_a = Port();\n     let po_b = Port();\n-    let ch_a = Chan(po_a);\n-    let ch_b = Chan(po_b);\n+    let ch_a = Chan(&po_a);\n+    let ch_b = Chan(&po_b);\n \n     send(ch_a, ~\"a\");\n \n@@ -376,8 +376,8 @@ fn test_select2_available() {\n fn test_select2_rendezvous() {\n     let po_a = Port();\n     let po_b = Port();\n-    let ch_a = Chan(po_a);\n-    let ch_b = Chan(po_b);\n+    let ch_a = Chan(&po_a);\n+    let ch_b = Chan(&po_b);\n \n     for iter::repeat(10) {\n         do task::spawn {\n@@ -400,8 +400,8 @@ fn test_select2_rendezvous() {\n fn test_select2_stress() {\n     let po_a = Port();\n     let po_b = Port();\n-    let ch_a = Chan(po_a);\n-    let ch_b = Chan(po_b);\n+    let ch_a = Chan(&po_a);\n+    let ch_b = Chan(&po_b);\n \n     let msgs = 100;\n     let times = 4u;\n@@ -436,7 +436,7 @@ fn test_select2_stress() {\n #[test]\n fn test_recv_chan() {\n     let po = Port();\n-    let ch = Chan(po);\n+    let ch = Chan(&po);\n     send(ch, ~\"flower\");\n     assert recv_chan(ch) == ~\"flower\";\n }\n@@ -445,7 +445,7 @@ fn test_recv_chan() {\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_recv_chan_dead() {\n-    let ch = Chan(Port());\n+    let ch = Chan(&Port());\n     send(ch, ~\"flower\");\n     recv_chan(ch);\n }\n@@ -454,7 +454,7 @@ fn test_recv_chan_dead() {\n #[ignore(cfg(windows))]\n fn test_recv_chan_wrong_task() {\n     let po = Port();\n-    let ch = Chan(po);\n+    let ch = Chan(&po);\n     send(ch, ~\"flower\");\n     assert result::is_err(&task::try(||\n         recv_chan(ch)"}, {"sha": "c222592a92855661edc5a002918e2302840b62a5", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -326,10 +326,10 @@ impl<T: Eq> Option<T> : Eq {\n #[test]\n fn test_unwrap_ptr() {\n     let x = ~0;\n-    let addr_x = ptr::p2::addr_of(&(*x));\n+    let addr_x = ptr::addr_of(&(*x));\n     let opt = Some(x);\n     let y = unwrap(opt);\n-    let addr_y = ptr::p2::addr_of(&(*y));\n+    let addr_y = ptr::addr_of(&(*y));\n     assert addr_x == addr_y;\n }\n "}, {"sha": "1a9bd03539e820c630a8a5a0f877a5aff60daf61", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -132,7 +132,7 @@ mod global_env {\n         let env_ch = get_global_env_chan();\n         let po = comm::Port();\n         comm::send(env_ch, MsgGetEnv(str::from_slice(n),\n-                                     comm::Chan(po)));\n+                                     comm::Chan(&po)));\n         comm::recv(po)\n     }\n \n@@ -141,14 +141,14 @@ mod global_env {\n         let po = comm::Port();\n         comm::send(env_ch, MsgSetEnv(str::from_slice(n),\n                                      str::from_slice(v),\n-                                     comm::Chan(po)));\n+                                     comm::Chan(&po)));\n         comm::recv(po)\n     }\n \n     pub fn env() -> ~[(~str,~str)] {\n         let env_ch = get_global_env_chan();\n         let po = comm::Port();\n-        comm::send(env_ch, MsgEnv(comm::Chan(po)));\n+        comm::send(env_ch, MsgEnv(comm::Chan(&po)));\n         comm::recv(po)\n     }\n "}, {"sha": "395e63ad30f824ec367c52e3cf593f0fa6c6cb65", "filename": "src/libcore/private.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -63,7 +63,7 @@ pub unsafe fn chan_from_global_ptr<T: Send>(\n         let (setup_po, setup_ch) = do task_fn().spawn_conversation\n             |move f, setup_po, setup_ch| {\n             let po = comm::Port::<T>();\n-            let ch = comm::Chan(po);\n+            let ch = comm::Chan(&po);\n             comm::send(setup_ch, ch);\n \n             // Wait to hear if we are the official instance of\n@@ -109,7 +109,7 @@ pub fn test_from_global_chan1() {\n \n     // The global channel\n     let globchan = 0;\n-    let globchanp = ptr::p2::addr_of(&globchan);\n+    let globchanp = ptr::addr_of(&globchan);\n \n     // Create the global channel, attached to a new task\n     let ch = unsafe {\n@@ -122,7 +122,7 @@ pub fn test_from_global_chan1() {\n     };\n     // Talk to it\n     let po = comm::Port();\n-    comm::send(ch, comm::Chan(po));\n+    comm::send(ch, comm::Chan(&po));\n     assert comm::recv(po) == true;\n \n     // This one just reuses the previous channel\n@@ -135,7 +135,7 @@ pub fn test_from_global_chan1() {\n \n     // Talk to the original global task\n     let po = comm::Port();\n-    comm::send(ch, comm::Chan(po));\n+    comm::send(ch, comm::Chan(&po));\n     assert comm::recv(po) == true;\n }\n \n@@ -145,10 +145,10 @@ pub fn test_from_global_chan2() {\n     for iter::repeat(100) {\n         // The global channel\n         let globchan = 0;\n-        let globchanp = ptr::p2::addr_of(&globchan);\n+        let globchanp = ptr::addr_of(&globchan);\n \n         let resultpo = comm::Port();\n-        let resultch = comm::Chan(resultpo);\n+        let resultch = comm::Chan(&resultpo);\n \n         // Spawn a bunch of tasks that all want to compete to\n         // create the global channel\n@@ -165,7 +165,7 @@ pub fn test_from_global_chan2() {\n                     }\n                 };\n                 let po = comm::Port();\n-                comm::send(ch, comm::Chan(po));\n+                comm::send(ch, comm::Chan(&po));\n                 // We are The winner if our version of the\n                 // task was installed\n                 let winner = comm::recv(po);\n@@ -203,7 +203,7 @@ pub fn test_from_global_chan2() {\n  */\n pub unsafe fn weaken_task(f: fn(comm::Port<()>)) {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     unsafe {\n         rustrt::rust_task_weaken(cast::reinterpret_cast(&ch));\n     }"}, {"sha": "7ebca94f3576575215f4d71d6767a406ce1cb0d4", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -296,7 +296,7 @@ pub fn program_output(prog: &str, args: &[~str]) ->\n     // or the other. FIXME (#2625): Surely there's a much more\n     // clever way to do this.\n     let p = comm::Port();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n     do task::spawn_sched(task::SingleThreaded) {\n         let errput = readclose(pipe_err.in);\n         comm::send(ch, (2, move errput));"}, {"sha": "efe6948ecef0897d303baed7a4a688b0328dd675", "filename": "src/libcore/task.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -479,10 +479,10 @@ impl TaskBuilder {\n      */\n     fn spawn_listener<A: Send>(+f: fn~(comm::Port<A>)) -> comm::Chan<A> {\n         let setup_po = comm::Port();\n-        let setup_ch = comm::Chan(setup_po);\n+        let setup_ch = comm::Chan(&setup_po);\n         do self.spawn |move f| {\n             let po = comm::Port();\n-            let ch = comm::Chan(po);\n+            let ch = comm::Chan(&po);\n             comm::send(setup_ch, ch);\n             f(move po);\n         }\n@@ -496,7 +496,7 @@ impl TaskBuilder {\n         (+f: fn~(comm::Port<A>, comm::Chan<B>))\n         -> (comm::Port<B>, comm::Chan<A>) {\n         let from_child = comm::Port();\n-        let to_parent = comm::Chan(from_child);\n+        let to_parent = comm::Chan(&from_child);\n         let to_child = do self.spawn_listener |move f, from_parent| {\n             f(from_parent, to_parent)\n         };\n@@ -518,7 +518,7 @@ impl TaskBuilder {\n      */\n     fn try<T: Send>(+f: fn~() -> T) -> Result<T,()> {\n         let po = comm::Port();\n-        let ch = comm::Chan(po);\n+        let ch = comm::Chan(&po);\n         let mut result = None;\n \n         let fr_task_builder = self.future_result(|+r| {\n@@ -772,7 +772,7 @@ fn test_cant_dup_task_builder() {\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     do spawn_unlinked {\n         do spawn_unlinked {\n             // Give middle task a chance to fail-but-not-kill-us.\n@@ -802,7 +802,7 @@ fn test_spawn_unlinked_sup_fail_down() {\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     let po = comm::Port::<()>();\n-    let _ch = comm::Chan(po);\n+    let _ch = comm::Chan(&po);\n     // Unidirectional \"parenting\" shouldn't override bidirectional linked.\n     // We have to cheat with opts - the interface doesn't support them because\n     // they don't make sense (redundant with task().supervised()).\n@@ -845,7 +845,7 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     let po = comm::Port::<()>();\n-    let _ch = comm::Chan(po);\n+    let _ch = comm::Chan(&po);\n     // Default options are to spawn linked & unsupervised.\n     do spawn { fail; }\n     comm::recv(po); // We should get punted awake\n@@ -917,7 +917,7 @@ fn test_spawn_linked_sup_propagate_sibling() {\n #[test]\n fn test_run_basic() {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     do task().spawn {\n         comm::send(ch, ());\n     }\n@@ -927,7 +927,7 @@ fn test_run_basic() {\n #[test]\n fn test_add_wrapper() {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     let b0 = task();\n     let b1 = do b0.add_wrapper |body| {\n         fn~() {\n@@ -961,7 +961,7 @@ fn test_back_to_the_future_result() {\n #[test]\n fn test_spawn_listiner_bidi() {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     let ch = do spawn_listener |po| {\n         // Now the child has a port called 'po' to read from and\n         // an environment-captured channel called 'ch'.\n@@ -1017,7 +1017,7 @@ fn test_spawn_sched_no_threads() {\n #[test]\n fn test_spawn_sched() {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n \n     fn f(i: int, ch: comm::Chan<()>) {\n         let parent_sched_id = rt::rust_get_sched_id();\n@@ -1041,7 +1041,7 @@ fn test_spawn_sched() {\n #[test]\n fn test_spawn_sched_childs_on_same_sched() {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n \n     do spawn_sched(SingleThreaded) {\n         let parent_sched_id = rt::rust_get_sched_id();\n@@ -1075,9 +1075,9 @@ fn test_spawn_sched_blocking() {\n     for iter::repeat(20u) {\n \n         let start_po = comm::Port();\n-        let start_ch = comm::Chan(start_po);\n+        let start_ch = comm::Chan(&start_po);\n         let fin_po = comm::Port();\n-        let fin_ch = comm::Chan(fin_po);\n+        let fin_ch = comm::Chan(&fin_po);\n \n         let lock = testrt::rust_dbg_lock_create();\n \n@@ -1105,12 +1105,12 @@ fn test_spawn_sched_blocking() {\n         }\n \n         let setup_po = comm::Port();\n-        let setup_ch = comm::Chan(setup_po);\n+        let setup_ch = comm::Chan(&setup_po);\n         let parent_po = comm::Port();\n-        let parent_ch = comm::Chan(parent_po);\n+        let parent_ch = comm::Chan(&parent_po);\n         do spawn {\n             let child_po = comm::Port();\n-            comm::send(setup_ch, comm::Chan(child_po));\n+            comm::send(setup_ch, comm::Chan(&child_po));\n             pingpong(child_po, parent_ch);\n         };\n \n@@ -1128,13 +1128,13 @@ fn test_spawn_sched_blocking() {\n #[cfg(test)]\n fn avoid_copying_the_body(spawnfn: fn(+v: fn~())) {\n     let p = comm::Port::<uint>();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n \n     let x = ~1;\n-    let x_in_parent = ptr::p2::addr_of(&(*x)) as uint;\n+    let x_in_parent = ptr::addr_of(&(*x)) as uint;\n \n     do spawnfn {\n-        let x_in_child = ptr::p2::addr_of(&(*x)) as uint;\n+        let x_in_child = ptr::addr_of(&(*x)) as uint;\n         comm::send(ch, x_in_child);\n     }\n \n@@ -1195,7 +1195,7 @@ fn test_avoid_copying_the_body_unlinked() {\n #[test]\n fn test_platform_thread() {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     do task().sched_mode(PlatformThread).spawn {\n         comm::send(ch, ());\n     }"}, {"sha": "2033db0d58d5a291bd0e62fad673cffd6a4d54fa", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -636,7 +636,7 @@ pub fn spawn_raw(opts: TaskOpts, +f: fn~()) {\n #[test]\n fn test_spawn_raw_simple() {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     do spawn_raw(default_task_opts()) {\n         comm::send(ch, ());\n     }"}, {"sha": "8c95410d4e83ab6963eac2abf810a6e08cdfe20e", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -121,16 +121,16 @@ pub fn connect(input_ip: ip::IpAddr, port: uint,\n     let result_po = core::comm::Port::<ConnAttempt>();\n     let closed_signal_po = core::comm::Port::<()>();\n     let conn_data = {\n-        result_ch: core::comm::Chan(result_po),\n-        closed_signal_ch: core::comm::Chan(closed_signal_po)\n+        result_ch: core::comm::Chan(&result_po),\n+        closed_signal_ch: core::comm::Chan(&closed_signal_po)\n     };\n     let conn_data_ptr = ptr::addr_of(&conn_data);\n     let reader_po = core::comm::Port::<result::Result<~[u8], TcpErrData>>();\n     let stream_handle_ptr = malloc_uv_tcp_t();\n     *(stream_handle_ptr as *mut uv::ll::uv_tcp_t) = uv::ll::tcp_t();\n     let socket_data = @{\n         reader_po: reader_po,\n-        reader_ch: core::comm::Chan(reader_po),\n+        reader_ch: core::comm::Chan(&reader_po),\n         stream_handle_ptr: stream_handle_ptr,\n         connect_req: uv::ll::connect_t(),\n         write_req: uv::ll::write_t(),\n@@ -471,7 +471,7 @@ pub fn accept(new_conn: TcpNewConnection)\n         *(stream_handle_ptr as *mut uv::ll::uv_tcp_t) = uv::ll::tcp_t();\n         let client_socket_data = @{\n             reader_po: reader_po,\n-            reader_ch: core::comm::Chan(reader_po),\n+            reader_ch: core::comm::Chan(&reader_po),\n             stream_handle_ptr : stream_handle_ptr,\n             connect_req : uv::ll::connect_t(),\n             write_req : uv::ll::write_t(),\n@@ -482,7 +482,7 @@ pub fn accept(new_conn: TcpNewConnection)\n             (*client_socket_data_ptr).stream_handle_ptr;\n \n         let result_po = core::comm::Port::<Option<TcpErrData>>();\n-        let result_ch = core::comm::Chan(result_po);\n+        let result_ch = core::comm::Chan(&result_po);\n \n         // UNSAFE LIBUV INTERACTION BEGIN\n         // .. normally this happens within the context of\n@@ -580,12 +580,12 @@ fn listen_common(host_ip: ip::IpAddr, port: uint, backlog: uint,\n     -> result::Result<(), TcpListenErrData> unsafe {\n     let stream_closed_po = core::comm::Port::<()>();\n     let kill_po = core::comm::Port::<Option<TcpErrData>>();\n-    let kill_ch = core::comm::Chan(kill_po);\n+    let kill_ch = core::comm::Chan(&kill_po);\n     let server_stream = uv::ll::tcp_t();\n     let server_stream_ptr = ptr::addr_of(&server_stream);\n     let server_data = {\n         server_stream_ptr: server_stream_ptr,\n-        stream_closed_ch: core::comm::Chan(stream_closed_po),\n+        stream_closed_ch: core::comm::Chan(&stream_closed_po),\n         kill_ch: kill_ch,\n         on_connect_cb: move on_connect_cb,\n         iotask: iotask,\n@@ -832,7 +832,7 @@ impl TcpSocketBuf: io::Writer {\n \n fn tear_down_socket_data(socket_data: @TcpSocketData) unsafe {\n     let closed_po = core::comm::Port::<()>();\n-    let closed_ch = core::comm::Chan(closed_po);\n+    let closed_ch = core::comm::Chan(&closed_po);\n     let close_data = {\n         closed_ch: closed_ch\n     };\n@@ -895,7 +895,7 @@ fn read_stop_common_impl(socket_data: *TcpSocketData) ->\n     result::Result<(), TcpErrData> unsafe {\n     let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n     let stop_po = core::comm::Port::<Option<TcpErrData>>();\n-    let stop_ch = core::comm::Chan(stop_po);\n+    let stop_ch = core::comm::Chan(&stop_po);\n     do iotask::interact((*socket_data).iotask) |loop_ptr| unsafe {\n         log(debug, ~\"in interact cb for tcp::read_stop\");\n         match uv::ll::read_stop(stream_handle_ptr as *uv::ll::uv_stream_t) {\n@@ -922,7 +922,7 @@ fn read_start_common_impl(socket_data: *TcpSocketData)\n         result::Result<~[u8], TcpErrData>>, TcpErrData> unsafe {\n     let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n     let start_po = core::comm::Port::<Option<uv::ll::uv_err_data>>();\n-    let start_ch = core::comm::Chan(start_po);\n+    let start_ch = core::comm::Chan(&start_po);\n     log(debug, ~\"in tcp::read_start before interact loop\");\n     do iotask::interact((*socket_data).iotask) |loop_ptr| unsafe {\n         log(debug, fmt!(\"in tcp::read_start interact cb %?\", loop_ptr));\n@@ -961,7 +961,7 @@ fn write_common_impl(socket_data_ptr: *TcpSocketData,\n     let write_buf_vec_ptr = ptr::addr_of(&write_buf_vec);\n     let result_po = core::comm::Port::<TcpWriteResult>();\n     let write_data = {\n-        result_ch: core::comm::Chan(result_po)\n+        result_ch: core::comm::Chan(&result_po)\n     };\n     let write_data_ptr = ptr::addr_of(&write_data);\n     do iotask::interact((*socket_data_ptr).iotask) |loop_ptr| unsafe {\n@@ -1277,10 +1277,10 @@ mod test {\n         let expected_resp = ~\"pong\";\n \n         let server_result_po = core::comm::Port::<~str>();\n-        let server_result_ch = core::comm::Chan(server_result_po);\n+        let server_result_ch = core::comm::Chan(&server_result_po);\n \n         let cont_po = core::comm::Port::<()>();\n-        let cont_ch = core::comm::Chan(cont_po);\n+        let cont_ch = core::comm::Chan(&cont_po);\n         // server\n         do task::spawn_sched(task::ManualThreads(1u)) {\n             let actual_req = do comm::listen |server_ch| {\n@@ -1343,10 +1343,10 @@ mod test {\n         let expected_resp = ~\"pong\";\n \n         let server_result_po = core::comm::Port::<~str>();\n-        let server_result_ch = core::comm::Chan(server_result_po);\n+        let server_result_ch = core::comm::Chan(&server_result_po);\n \n         let cont_po = core::comm::Port::<()>();\n-        let cont_ch = core::comm::Chan(cont_po);\n+        let cont_ch = core::comm::Chan(&cont_po);\n         // server\n         do task::spawn_sched(task::ManualThreads(1u)) {\n             let actual_req = do comm::listen |server_ch| {"}, {"sha": "88869773e5de661b13291d21f8119d8a617b8a3e", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -773,7 +773,7 @@ mod tests {\n         let m = ~Mutex();\n         let m2 = ~m.clone();\n         let mut sharedstate = ~0;\n-        let ptr = ptr::p2::addr_of(&(*sharedstate));\n+        let ptr = ptr::addr_of(&(*sharedstate));\n         do task::spawn {\n             let sharedstate: &mut int =\n                 unsafe { cast::reinterpret_cast(&ptr) };\n@@ -1045,7 +1045,7 @@ mod tests {\n         let (c,p) = pipes::stream();\n         let x2 = ~x.clone();\n         let mut sharedstate = ~0;\n-        let ptr = ptr::p2::addr_of(&(*sharedstate));\n+        let ptr = ptr::addr_of(&(*sharedstate));\n         do task::spawn {\n             let sharedstate: &mut int =\n                 unsafe { cast::reinterpret_cast(&ptr) };"}, {"sha": "2eac3729c229407be44a1b9b9e943c1ade8cb6ba", "filename": "src/libstd/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -286,7 +286,7 @@ fn run_tests(opts: &TestOpts, tests: &[TestDesc],\n     let mut done_idx = 0;\n \n     let p = core::comm::Port();\n-    let ch = core::comm::Chan(p);\n+    let ch = core::comm::Chan(&p);\n \n     while done_idx < total {\n         while wait_idx < concurrency && run_idx < total {\n@@ -421,7 +421,7 @@ mod tests {\n             should_fail: false\n         };\n         let p = core::comm::Port();\n-        let ch = core::comm::Chan(p);\n+        let ch = core::comm::Chan(&p);\n         run_test(desc, ch);\n         let (_, res) = core::comm::recv(p);\n         assert res != TrOk;\n@@ -437,7 +437,7 @@ mod tests {\n             should_fail: false\n         };\n         let p = core::comm::Port();\n-        let ch = core::comm::Chan(p);\n+        let ch = core::comm::Chan(&p);\n         run_test(desc, ch);\n         let (_, res) = core::comm::recv(p);\n         assert res == TrIgnored;\n@@ -454,7 +454,7 @@ mod tests {\n             should_fail: true\n         };\n         let p = core::comm::Port();\n-        let ch = core::comm::Chan(p);\n+        let ch = core::comm::Chan(&p);\n         run_test(desc, ch);\n         let (_, res) = core::comm::recv(p);\n         assert res == TrOk;\n@@ -470,7 +470,7 @@ mod tests {\n             should_fail: true\n         };\n         let p = core::comm::Port();\n-        let ch = core::comm::Chan(p);\n+        let ch = core::comm::Chan(&p);\n         run_test(desc, ch);\n         let (_, res) = core::comm::recv(p);\n         assert res == TrFailed;"}, {"sha": "821015edd1a9ac9194601eab42ef31aa49a71ae0", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -27,7 +27,7 @@ pub fn delayed_send<T: Copy Send>(iotask: IoTask,\n                                   msecs: uint, ch: comm::Chan<T>, val: T) {\n         unsafe {\n             let timer_done_po = core::comm::Port::<()>();\n-            let timer_done_ch = core::comm::Chan(timer_done_po);\n+            let timer_done_ch = core::comm::Chan(&timer_done_po);\n             let timer_done_ch_ptr = ptr::addr_of(&timer_done_ch);\n             let timer = uv::ll::timer_t();\n             let timer_ptr = ptr::addr_of(&timer);\n@@ -74,7 +74,7 @@ pub fn delayed_send<T: Copy Send>(iotask: IoTask,\n  */\n pub fn sleep(iotask: IoTask, msecs: uint) {\n     let exit_po = core::comm::Port::<()>();\n-    let exit_ch = core::comm::Chan(exit_po);\n+    let exit_ch = core::comm::Chan(&exit_po);\n     delayed_send(iotask, msecs, exit_ch, ());\n     core::comm::recv(exit_po);\n }\n@@ -103,7 +103,7 @@ pub fn recv_timeout<T: Copy Send>(iotask: IoTask,\n                               msecs: uint,\n                               wait_po: comm::Port<T>) -> Option<T> {\n     let timeout_po = comm::Port::<()>();\n-    let timeout_ch = comm::Chan(timeout_po);\n+    let timeout_ch = comm::Chan(&timeout_po);\n     delayed_send(iotask, msecs, timeout_ch, ());\n     // FIXME: This could be written clearer (#2618)\n     either::either(\n@@ -162,7 +162,7 @@ mod test {\n     #[test]\n     fn test_gl_timer_sleep_stress2() {\n         let po = core::comm::Port();\n-        let ch = core::comm::Chan(po);\n+        let ch = core::comm::Chan(&po);\n         let hl_loop = uv::global_loop::get();\n \n         let repeat = 20u;\n@@ -240,7 +240,7 @@ mod test {\n         for iter::repeat(times as uint) {\n             let expected = rand::Rng().gen_str(16u);\n             let test_po = core::comm::Port::<~str>();\n-            let test_ch = core::comm::Chan(test_po);\n+            let test_ch = core::comm::Chan(&test_po);\n \n             do task::spawn() {\n                 delayed_send(hl_loop, 50u, test_ch, expected);"}, {"sha": "79f6bafb4a488095c00fdee20eec0121f632ca4b", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -133,12 +133,12 @@ mod test {\n \n     fn impl_uv_hl_simple_timer(iotask: IoTask) unsafe {\n         let exit_po = core::comm::Port::<bool>();\n-        let exit_ch = core::comm::Chan(exit_po);\n-        let exit_ch_ptr = ptr::p2::addr_of(&exit_ch);\n+        let exit_ch = core::comm::Chan(&exit_po);\n+        let exit_ch_ptr = ptr::addr_of(&exit_ch);\n         log(debug, fmt!(\"EXIT_CH_PTR newly created exit_ch_ptr: %?\",\n                        exit_ch_ptr));\n         let timer_handle = ll::timer_t();\n-        let timer_ptr = ptr::p2::addr_of(&timer_handle);\n+        let timer_ptr = ptr::addr_of(&timer_handle);\n         do iotask::interact(iotask) |loop_ptr| unsafe {\n             log(debug, ~\"user code inside interact loop!!!\");\n             let init_status = ll::timer_init(loop_ptr, timer_ptr);\n@@ -166,7 +166,7 @@ mod test {\n     fn test_gl_uv_global_loop_high_level_global_timer() unsafe {\n         let hl_loop = get_gl();\n         let exit_po = comm::Port::<()>();\n-        let exit_ch = comm::Chan(exit_po);\n+        let exit_ch = comm::Chan(&exit_po);\n         task::spawn_sched(task::ManualThreads(1u), || {\n             impl_uv_hl_simple_timer(hl_loop);\n             core::comm::send(exit_ch, ());\n@@ -182,7 +182,7 @@ mod test {\n     fn test_stress_gl_uv_global_loop_high_level_global_timer() unsafe {\n         let hl_loop = get_gl();\n         let exit_po = core::comm::Port::<()>();\n-        let exit_ch = core::comm::Chan(exit_po);\n+        let exit_ch = core::comm::Chan(&exit_po);\n         let cycles = 5000u;\n         for iter::repeat(cycles) {\n             task::spawn_sched(task::ManualThreads(1u), || {"}, {"sha": "ca4d655db59a3aba14ac406a8dd4e8881a579c93", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -184,7 +184,7 @@ mod test {\n         let async_handle = ll::async_t();\n         let ah_ptr = ptr::addr_of(&async_handle);\n         let exit_po = core::comm::Port::<()>();\n-        let exit_ch = core::comm::Chan(exit_po);\n+        let exit_ch = core::comm::Chan(&exit_po);\n         let ah_data = {\n             iotask: iotask,\n             exit_ch: exit_ch\n@@ -202,7 +202,7 @@ mod test {\n     // high_level_loop\n     unsafe fn spawn_test_loop(exit_ch: comm::Chan<()>) -> IoTask {\n         let iotask_port = comm::Port::<IoTask>();\n-        let iotask_ch = comm::Chan(iotask_port);\n+        let iotask_ch = comm::Chan(&iotask_port);\n         do task::spawn_sched(task::ManualThreads(1u)) {\n             run_loop(iotask_ch);\n             exit_ch.send(());\n@@ -223,7 +223,7 @@ mod test {\n     #[test]\n     fn test_uv_iotask_async() unsafe {\n         let exit_po = core::comm::Port::<()>();\n-        let exit_ch = core::comm::Chan(exit_po);\n+        let exit_ch = core::comm::Chan(&exit_po);\n         let iotask = spawn_test_loop(exit_ch);\n \n         // using this handle to manage the lifetime of the high_level_loop,\n@@ -233,7 +233,7 @@ mod test {\n         // lives until, at least, all of the impl_uv_hl_async() runs have been\n         // called, at least.\n         let work_exit_po = core::comm::Port::<()>();\n-        let work_exit_ch = core::comm::Chan(work_exit_po);\n+        let work_exit_ch = core::comm::Chan(&work_exit_po);\n         for iter::repeat(7u) {\n             do task::spawn_sched(task::ManualThreads(1u)) {\n                 impl_uv_iotask_async(iotask);"}, {"sha": "f8c3882d15eb173cfb7ae0a11225c4309183f910", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -1466,12 +1466,12 @@ pub mod test {\n         let kill_server_msg = ~\"does a dog have buddha nature?\";\n         let server_resp_msg = ~\"mu!\";\n         let client_port = core::comm::Port::<~str>();\n-        let client_chan = core::comm::Chan::<~str>(client_port);\n+        let client_chan = core::comm::Chan::<~str>(&client_port);\n         let server_port = core::comm::Port::<~str>();\n-        let server_chan = core::comm::Chan::<~str>(server_port);\n+        let server_chan = core::comm::Chan::<~str>(&server_port);\n \n         let continue_port = core::comm::Port::<bool>();\n-        let continue_chan = core::comm::Chan::<bool>(continue_port);\n+        let continue_chan = core::comm::Chan::<bool>(&continue_port);\n         let continue_chan_ptr = ptr::addr_of(&continue_chan);\n \n         do task::spawn_sched(task::ManualThreads(1)) {"}, {"sha": "c2bca3fc6becaa9fbad0658be1f2930e842d7890", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -229,7 +229,7 @@ bug and need to present an error.\n */\n fn monitor(+f: fn~(diagnostic::emitter)) {\n     let p = comm::Port();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n \n     match do task::try |move f| {\n "}, {"sha": "2e6cbf579c8e9768318a62025c44eb5d41b2a7d3", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -93,7 +93,7 @@ fn exec<T:Send>(\n     +f: fn~(ctxt: Ctxt) -> T\n ) -> T {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     let msg = HandleRequest(fn~(move f, ctxt: Ctxt) {\n         comm::send(ch, f(ctxt))\n     });"}, {"sha": "f505f9d0b9938a868b2b36fe36df96c32991404e", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -109,14 +109,14 @@ fn pandoc_writer(\n         os::close(pipe_in.out);\n \n         let stdout_po = comm::Port();\n-        let stdout_ch = comm::Chan(stdout_po);\n+        let stdout_ch = comm::Chan(&stdout_po);\n         do task::spawn_sched(task::SingleThreaded) {\n             comm::send(stdout_ch, readclose(pipe_out.in));\n         }\n         let stdout = comm::recv(stdout_po);\n \n         let stderr_po = comm::Port();\n-        let stderr_ch = comm::Chan(stderr_po);\n+        let stderr_ch = comm::Chan(&stderr_po);\n         do task::spawn_sched(task::SingleThreaded) {\n             comm::send(stderr_ch, readclose(pipe_err.in));\n         }\n@@ -268,10 +268,10 @@ fn write_file(path: &Path, s: ~str) {\n fn future_writer_factory(\n ) -> (WriterFactory, comm::Port<(doc::Page, ~str)>) {\n     let markdown_po = comm::Port();\n-    let markdown_ch = comm::Chan(markdown_po);\n+    let markdown_ch = comm::Chan(&markdown_po);\n     let writer_factory = fn~(page: doc::Page) -> Writer {\n         let writer_po = comm::Port();\n-        let writer_ch = comm::Chan(writer_po);\n+        let writer_ch = comm::Chan(&writer_po);\n         do task::spawn {\n             let (writer, future) = future_writer();\n             comm::send(writer_ch, writer);"}, {"sha": "b25605852571177d43029c80bda4147b82a4b590", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -6,7 +6,7 @@ use comm::*;\n \n fn foo<T: Send Copy>(x: T) -> Port<T> {\n     let p = Port();\n-    let c = Chan(p);\n+    let c = Chan(&p);\n     do task::spawn() |copy c, copy x| {\n         c.send(x);\n     }"}, {"sha": "1dfcd241b83b94e19f05a9e2d300584663c753de", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let num_port = Port();\n-    let mut num_chan = Chan(num_port);\n+    let mut num_chan = Chan(&num_port);\n \n     let start = time::precise_time_s();\n \n@@ -44,12 +44,12 @@ fn main() {\n \n     for uint::range(1u, num_tasks) |i| {\n         let get_chan = Port();\n-        let get_chan_chan = Chan(get_chan);\n+        let get_chan_chan = Chan(&get_chan);\n \n         let new_future = do future::spawn\n             |copy num_chan, move get_chan_chan| {\n             let p = Port();\n-            get_chan_chan.send(Chan(p));\n+            get_chan_chan.send(Chan(&p));\n             thread_ring(i, msg_per_task, num_chan,  p)\n         };\n         futures.push(new_future);"}, {"sha": "1e3c51d825481b12c96bbcff0818057490b61efd", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -126,8 +126,8 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     let from_creatures_log: comm::Port<~str> = comm::Port();\n \n     // these channels will be passed to the creatures so they can talk to us\n-    let to_rendezvous     = comm::Chan(from_creatures);\n-    let to_rendezvous_log = comm::Chan(from_creatures_log);\n+    let to_rendezvous     = comm::Chan(&from_creatures);\n+    let to_rendezvous_log = comm::Chan(&from_creatures_log);\n \n     // these channels will allow us to talk to each creature by 'name'/index\n     let to_creature: ~[comm::Chan<Option<creature_info>>] ="}, {"sha": "1707c0d991da9b650849bc43740f2d73e3214313", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -142,7 +142,7 @@ fn main() {\n    // initialize each sequence sorter\n    let sizes = ~[1u,2u,3u,4u,6u,12u,18u];\n    let from_child = vec::map (sizes, |_sz| comm::Port() );\n-   let to_parent  = vec::mapi(sizes, |ii, _sz| comm::Chan(from_child[ii]) );\n+   let to_parent  = vec::mapi(sizes, |ii, _sz| comm::Chan(&from_child[ii]) );\n    let to_child   = vec::mapi(sizes, |ii, sz| {\n        let ii = ii;\n        let sz = *sz;"}, {"sha": "b30e04a4ca7dbd75192a7acb141a58affc9d2707", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -103,7 +103,7 @@ impl devnull: io::Writer {\n fn writer(path: ~str, writech: comm::Chan<comm::Chan<line>>, size: uint)\n {\n     let p: comm::Port<line> = comm::Port();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n     comm::send(writech, ch);\n     let cout: io::Writer = match path {\n         ~\"\" => {\n@@ -169,7 +169,7 @@ fn main() {\n     else { uint::from_str(args[1]).get() };\n \n     let writep = comm::Port();\n-    let writech = comm::Chan(writep);\n+    let writech = comm::Chan(&writep);\n     do task::spawn {\n         writer(path, writech, size);\n     };"}, {"sha": "7ac45863c5b4735806e0ae720f6b8678ae81621b", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -7,7 +7,7 @@ fn start(+token: int) {\n     use iter::*;\n \n     let p = comm::Port();\n-    let mut ch = comm::Chan(p);\n+    let mut ch = comm::Chan(&p);\n     for int::range(2, n_threads + 1) |i| {\n         let id = n_threads + 2 - i;\n         let to_child = do task::spawn_listener::<int> |p, copy ch| {"}, {"sha": "a692b2f3011e14f3603a6ca29a59eedf9d8f834b", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -11,7 +11,7 @@\n // Doesn't return until all such tasks are ready, but doesn't block forever itself.\n fn grandchild_group(num_tasks: uint) {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n \n     for num_tasks.times {\n         do task::spawn { // linked"}, {"sha": "7a30c5e2325beb300dcd85a56331ed8bf6a60bd9", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -8,7 +8,7 @@ enum msg {\n \n fn calc(children: uint, parent_ch: comm::Chan<msg>) {\n     let port = comm::Port();\n-    let chan = comm::Chan(port);\n+    let chan = comm::Chan(&port);\n     let mut child_chs = ~[];\n     let mut sum = 0;\n \n@@ -60,7 +60,7 @@ fn main() {\n \n     let children = uint::from_str(args[1]).get();\n     let port = comm::Port();\n-    let chan = comm::Chan(port);\n+    let chan = comm::Chan(&port);\n     do task::spawn {\n         calc(children, chan);\n     };"}, {"sha": "168e4b8b1f1428100b0018e46b3164f179ea877d", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -43,7 +43,7 @@ trait word_reader {\n type joinable_task = Port<()>;\n fn spawn_joinable(+f: fn~()) -> joinable_task {\n     let p = Port();\n-    let c = Chan(p);\n+    let c = Chan(&p);\n     do task::spawn() |move f| {\n         f();\n         c.send(());\n@@ -206,7 +206,7 @@ mod map_reduce {\n     {\n         let p = Port();\n \n-        send(out, Chan(p));\n+        send(out, Chan(&p));\n \n         let mut ref_count = 0;\n         let mut is_done = false;\n@@ -268,7 +268,7 @@ mod map_reduce {\n                   None => {\n                     // log(error, \"creating new reducer for \" + k);\n                     let p = Port();\n-                    let ch = Chan(p);\n+                    let ch = Chan(&p);\n                     let r = reduce, kk = k;\n                     tasks.push(spawn_joinable(|| reduce_task(r, kk, ch) ));\n                     c = recv(p);"}, {"sha": "dd8f341b93553dcde76c936a921cbf1fd3a1ea67", "filename": "src/test/compile-fail/issue-3096-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -1,6 +1,6 @@\n enum bottom { } \n \n fn main() {\n-    let x = ptr::p2::addr_of(&()) as *bottom;\n+    let x = ptr::addr_of(&()) as *bottom;\n     match x { } //~ ERROR non-exhaustive patterns\n }"}, {"sha": "eaba1d8611967f078150d4f0ea16d9ec56191b68", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let x : *~[int] = ptr::p2::addr_of(&~[1,2,3]);\n+    let x : *~[int] = ptr::addr_of(&~[1,2,3]);\n     let y : *libc::c_void = x as *libc::c_void;\n     unsafe {\n         let _z = *y;"}, {"sha": "a47a8b76e56a98f170b2f973569772fdce49b56a", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -16,6 +16,6 @@ fn foo(i:int, j: @~str) -> foo {\n fn main() {\n   let cat = ~\"kitty\";\n   let po = comm::Port();         //~ ERROR missing `send`\n-  let ch = comm::Chan(po);       //~ ERROR missing `send`\n+  let ch = comm::Chan(&po);       //~ ERROR missing `send`\n   comm::send(ch, foo(42, @cat)); //~ ERROR missing `send`\n }"}, {"sha": "30714413c5376df2a08b1d730bdd66284951d0db", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -9,7 +9,7 @@ fn echo<T: Send>(c: Chan<T>, oc: Chan<Chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n     let p = Port::<T>();\n-    send(oc, Chan(p));\n+    send(oc, Chan(&p));\n \n     let x = recv(p);\n     send(c, x);"}, {"sha": "1f0bfe93ab28fb70122b38d7bd84613d9428f4e6", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -10,7 +10,7 @@ fn a(c: Chan<int>) { send(c, 10); }\n \n fn main() {\n     let p = Port();\n-    let ch = Chan(p);\n+    let ch = Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| a(ch) );\n     let mut n: int = 0;"}, {"sha": "7a81bfc3fc5293c71222c2e3bbd55847b18a92fd", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -10,7 +10,7 @@ fn a(c: Chan<int>) { debug!(\"task a0\"); debug!(\"task a1\"); send(c, 10); }\n \n fn main() {\n     let p = Port();\n-    let ch = Chan(p);\n+    let ch = Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| b(ch) );\n     let mut n: int = 0;"}, {"sha": "6f8fa6e3e70ff7f64e443f3404397c52260d1d4c", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     let mut n: int = 2 + 3 * 7;\n     let s: ~str = ~\"hello there\";\n     let p = comm::Port();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| b(ch) );\n     let mut x: int = 10;"}, {"sha": "60f2430770965aaea16e7d9feeeb66cf5594fada", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -17,7 +17,7 @@ use comm::*;\n \n fn foo(&&x: ()) -> Port<()> {\n     let p = Port();\n-    let c = Chan(p);\n+    let c = Chan(&p);\n     do task::spawn() |copy c, copy x| {\n         c.send(x);\n     }"}, {"sha": "f834b1b3519596c684f69f6fe36c7936ce614c18", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -12,7 +12,7 @@ type ctx = Chan<request>;\n \n fn request_task(c: Chan<ctx>) {\n     let p = Port();\n-    send(c, Chan(p));\n+    send(c, Chan(&p));\n     let mut req: request;\n     req = recv(p);\n     // Need to drop req before receiving it again\n@@ -21,7 +21,7 @@ fn request_task(c: Chan<ctx>) {\n \n fn new_cx() -> ctx {\n     let p = Port();\n-    let ch = Chan(p);\n+    let ch = Chan(&p);\n     let t = task::spawn(|| request_task(ch) );\n     let mut cx: ctx;\n     cx = recv(p);\n@@ -32,6 +32,6 @@ fn main() {\n     let cx = new_cx();\n \n     let p = Port::<bool>();\n-    send(cx, close(Chan(p)));\n+    send(cx, close(Chan(&p)));\n     send(cx, quit);\n }"}, {"sha": "003b7c830934df4f920c26c1249cc97f808e5ab3", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -7,7 +7,7 @@ use comm::recv;\n \n fn main() {\n     let p = comm::Port();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n     let t = task::spawn(|| child(ch) );\n     let y = recv(p);\n     error!(\"received\");"}, {"sha": "b594e5334c46ae0f49d70415131e0f3123e785e4", "filename": "src/test/run-pass/decl-with-recv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -8,7 +8,7 @@ use comm::recv;\n \n fn main() {\n     let po = Port();\n-    let ch = Chan(po);\n+    let ch = Chan(&po);\n     send(ch, 10);\n     let i = recv(po);\n     assert (i == 10);"}, {"sha": "50b88693f39f24c3e7ff6fe1be81439900ce1332", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -47,7 +47,7 @@ mod map_reduce {\n               None => {\n                 let p = Port();\n                 error!(\"sending find_reducer\");\n-                send(ctrl, find_reducer(str::to_bytes(key), Chan(p)));\n+                send(ctrl, find_reducer(str::to_bytes(key), Chan(&p)));\n                 error!(\"receiving\");\n                 c = recv(p);\n                 log(error, c);\n@@ -70,7 +70,7 @@ mod map_reduce {\n \n         reducers = map::HashMap();\n \n-        start_mappers(Chan(ctrl), inputs);\n+        start_mappers(Chan(&ctrl), inputs);\n \n         let mut num_mappers = vec::len(inputs) as int;\n "}, {"sha": "0baa0aca7ade032182fa1ac1bec9707648359a85", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -20,7 +20,7 @@ fn child(c: Chan<int>) {\n \n fn main() {\n     let p = comm::Port();\n-    let ch = Chan(p);\n+    let ch = Chan(&p);\n \n     task::spawn(|| child(ch) );\n "}, {"sha": "4ed94c5778491ddf032a83db4aafc75150ca1f6c", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -14,7 +14,7 @@ fn producer(c: Chan<~[u8]>) {\n \n fn packager(cb: Chan<Chan<~[u8]>>, msg: Chan<msg>) {\n     let p: Port<~[u8]> = Port();\n-    send(cb, Chan(p));\n+    send(cb, Chan(&p));\n     loop {\n         debug!(\"waiting for bytes\");\n         let data = recv(p);\n@@ -35,9 +35,9 @@ fn packager(cb: Chan<Chan<~[u8]>>, msg: Chan<msg>) {\n \n fn main() {\n     let p: Port<msg> = Port();\n-    let ch = Chan(p);\n+    let ch = Chan(&p);\n     let recv_reader: Port<Chan<~[u8]>> = Port();\n-    let recv_reader_chan = Chan(recv_reader);\n+    let recv_reader_chan = Chan(&recv_reader);\n     let pack = task::spawn(|| packager(recv_reader_chan, ch) );\n \n     let source_chan: Chan<~[u8]> = recv(recv_reader);"}, {"sha": "50fadefa46437fa5a00aed7d40d5e568105f2e58", "filename": "src/test/run-pass/issue-783.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -6,10 +6,10 @@ fn a() {\n     fn doit() {\n         fn b(c: Chan<Chan<int>>) {\n             let p = Port();\n-            send(c, Chan(p));\n+            send(c, Chan(&p));\n         }\n         let p = Port();\n-        let ch = Chan(p);\n+        let ch = Chan(&p);\n         spawn(|| b(ch) );\n         recv(p);\n     }"}, {"sha": "b92d20bbe40c106091c05d44d54283872f665308", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -13,7 +13,7 @@ fn producer(c: Chan<~[u8]>) {\n \n fn main() {\n     let p: Port<~[u8]> = Port();\n-    let ch = Chan(p);\n+    let ch = Chan(&p);\n     let prod = task::spawn(|| producer(ch) );\n \n     let data: ~[u8] = recv(p);"}, {"sha": "06e89a298a9762992ccd34b748e671cdedf21b13", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -5,7 +5,7 @@ use comm::*;\n \n fn main() {\n     let p = Port();\n-    let ch = Chan(p);\n+    let ch = Chan(&p);\n     let mut y: int;\n \n     task::spawn(|| child(ch) );"}, {"sha": "83ebc0ef844b01aa72aa44a00412ce190ca32783", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -7,7 +7,7 @@ fn sub(parent: comm::Chan<int>, id: int) {\n         comm::send(parent, 0);\n     } else {\n         let p = comm::Port();\n-        let ch = comm::Chan(p);\n+        let ch = comm::Chan(&p);\n         let child = task::spawn(|| sub(ch, id - 1) );\n         let y = comm::recv(p);\n         comm::send(parent, y + 1);\n@@ -16,7 +16,7 @@ fn sub(parent: comm::Chan<int>, id: int) {\n \n fn main() {\n     let p = comm::Port();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n     let child = task::spawn(|| sub(ch, 200) );\n     let y = comm::recv(p);\n     debug!(\"transmission complete\");"}, {"sha": "2af5535ad2805ff599c50a55a30073392ab79caf", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -18,7 +18,7 @@ type record = {val1: u32, val2: u32, val3: u32};\n // assertions.\n fn test_init() {\n     let myport = Port();\n-    let mychan = Chan(myport);\n+    let mychan = Chan(&myport);\n     let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n     send(mychan, val);\n }\n@@ -28,7 +28,7 @@ fn test_init() {\n // Don't trigger any assertions.\n fn test_grow() {\n     let myport = Port();\n-    let mychan = Chan(myport);\n+    let mychan = Chan(&myport);\n     for uint::range(0u, 100u) |i| {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         comm::send(mychan, val);\n@@ -39,14 +39,14 @@ fn test_grow() {\n // Don't allow the buffer to shrink below it's original size\n fn test_shrink1() {\n     let myport = Port();\n-    let mychan = Chan(myport);\n+    let mychan = Chan(&myport);\n     send(mychan, 0i8);\n     let x = recv(myport);\n }\n \n fn test_shrink2() {\n     let myport = Port();\n-    let mychan = Chan(myport);\n+    let mychan = Chan(&myport);\n     for uint::range(0u, 100u) |_i| {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         send(mychan, val);\n@@ -58,7 +58,7 @@ fn test_shrink2() {\n // Test rotating the buffer when the unit size is not a power of two\n fn test_rotate() {\n     let myport = Port();\n-    let mychan = Chan(myport);\n+    let mychan = Chan(&myport);\n     for uint::range(0u, 100u) |i| {\n         let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n         send(mychan, val);\n@@ -74,7 +74,7 @@ fn test_rotate() {\n // the unit size is not a power of two\n fn test_rotate_grow() {\n     let myport = Port::<record>();\n-    let mychan = Chan(myport);\n+    let mychan = Chan(&myport);\n     for uint::range(0u, 10u) |j| {\n         for uint::range(0u, 10u) |i| {\n             let val: record ="}, {"sha": "690d93172ebcfb3abe6492966d52bcb2e2b63485", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -18,7 +18,7 @@ extern mod rustrt {\n \n fn main() unsafe {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     let parent_sched_id = rustrt::rust_get_sched_id();\n     error!(\"parent %?\", parent_sched_id);\n     let num_threads = 1u;"}, {"sha": "b0003e8b5b18be4a157d125b981a10af5d1a884e", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -8,7 +8,7 @@ fn die() {\n fn iloop() {\n     task::spawn(|| die() );\n     let p = comm::Port::<()>();\n-    let c = comm::Chan(p);\n+    let c = comm::Chan(&p);\n     loop {\n         // Sending and receiving here because these actions yield,\n         // at which point our child can kill us"}, {"sha": "a2ef71b14124404f32ebf1b506c58adb24311ac2", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -14,11 +14,11 @@ fn test(f: int) -> test {\n \n fn main() {\n     let p = Port();\n-    let c = Chan(p);\n+    let c = Chan(&p);\n \n     do spawn() {\n         let p = Port();\n-        c.send(Chan(p));\n+        c.send(Chan(&p));\n \n         let _r = p.recv();\n     }"}, {"sha": "8bca78807871b4a0bbc8451edfc846330026c890", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -8,6 +8,6 @@ type command<K: Send, V: Send> = {key: K, val: V};\n \n fn cache_server<K: Send, V: Send>(c: Chan<Chan<command<K, V>>>) {\n     let ctrl = Port();\n-    send(c, Chan(ctrl));\n+    send(c, Chan(&ctrl));\n }\n fn main() { }"}, {"sha": "d9b0ec336432ab95747d1f037ac4de35d9ed7c5c", "filename": "src/test/run-pass/sendable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendable-class.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -14,6 +14,6 @@ fn foo(i:int, j: char) -> foo {\n \n fn main() {\n   let po = comm::Port::<foo>();\n-  let ch = comm::Chan(po);\n+  let ch = comm::Chan(&po);\n   comm::send(ch, foo(42, 'c'));\n }\n\\ No newline at end of file"}, {"sha": "043bf125532eb01dd6706b5e5e383f643427a7fe", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -15,6 +15,6 @@ fn iotask(cx: ctx, ip: ~str) {\n \n fn main() {\n     let p = comm::Port::<int>();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n     task::spawn(|| iotask(ch, ~\"localhost\") );\n }"}, {"sha": "b81f001c00d57d8fb84e9048a71471ff98e7d5d7", "filename": "src/test/run-pass/task-comm-chan-cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -2,6 +2,6 @@ extern mod std;\n \n fn main() {\n     let p = comm::Port();\n-    let c = comm::Chan(p);\n+    let c = comm::Chan(&p);\n     comm::send(c, ~\"coffee\");\n }\n\\ No newline at end of file"}, {"sha": "b81f001c00d57d8fb84e9048a71471ff98e7d5d7", "filename": "src/test/run-pass/task-comm-chan-cleanup2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup2.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -2,6 +2,6 @@ extern mod std;\n \n fn main() {\n     let p = comm::Port();\n-    let c = comm::Chan(p);\n+    let c = comm::Chan(&p);\n     comm::send(c, ~\"coffee\");\n }\n\\ No newline at end of file"}, {"sha": "14cb272b62f3116b9c23b88c157d7894e3e5170d", "filename": "src/test/run-pass/task-comm-chan-cleanup3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup3.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -3,7 +3,7 @@ extern mod std;\n fn main() {\n     let c = {\n         let p = comm::Port();\n-        comm::Chan(p)\n+        comm::Chan(&p)\n     };\n     comm::send(c, ~\"coffee\");\n }\n\\ No newline at end of file"}, {"sha": "852f0e5607d82f443bdc857af4ca62348a0701d2", "filename": "src/test/run-pass/task-comm-chan-cleanup4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-cleanup4.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -12,7 +12,7 @@ fn starship(&&ch: comm::Chan<~str>) {\n fn starbase() {\n     for int::range(0, 10) |_i| {\n         let p = comm::Port();\n-        let c = comm::Chan(p);\n+        let c = comm::Chan(&p);\n         task::spawn(|| starship(c) );\n         task::yield();\n     }"}, {"sha": "7cbd24844fe5a6039987836d367e8f91a2a2da9b", "filename": "src/test/run-pass/task-comm-chan-nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -7,7 +7,7 @@ extern mod std;\n // or not this is desirable I don't know, but here's a regression test.\n fn main() {\n     let po = comm::Port();\n-    let ch = comm::Chan(po);\n+    let ch = comm::Chan(&po);\n     comm::send(ch, ());\n     let n: () = comm::recv(po);\n     assert (n == ());"}, {"sha": "c88b556fd53f793265b4fc12facbcf0d1a9e5086", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -32,7 +32,7 @@ fn test00() {\n     debug!(\"Creating tasks\");\n \n     let po = Port();\n-    let ch = Chan(po);\n+    let ch = Chan(&po);\n \n     let mut i: int = 0;\n \n@@ -69,7 +69,7 @@ fn test01() {\n \n fn test02() {\n     let p = Port();\n-    let c = Chan(p);\n+    let c = Chan(&p);\n     debug!(\"Writing to a local task channel.\");\n     send(c, 42);\n     debug!(\"Reading from a local task port.\");\n@@ -101,7 +101,7 @@ fn test05_start(ch: Chan<int>) {\n \n fn test05() {\n     let po = comm::Port();\n-    let ch = Chan(po);\n+    let ch = Chan(&po);\n     task::spawn(|| test05_start(ch) );\n     let mut value: int;\n     value = recv(po);"}, {"sha": "1cea7d61f8c4ba77e994337638e6e35141011daf", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -36,7 +36,7 @@ fn joinable(+f: fn~()) -> comm::Port<bool> {\n         *b = true;\n     }\n     let p = comm::Port();\n-    let c = comm::Chan(p);\n+    let c = comm::Chan(&p);\n     do task::spawn_unlinked { wrapper(c, copy f) };\n     p\n }"}, {"sha": "09c880d489c263dc6f40d03f3c7310eef81b6047", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let p = comm::Port::<uint>();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n \n     let x = ~1;\n     let x_in_parent = ptr::addr_of(&(*x)) as uint;"}, {"sha": "70d58ea6cc3b37b80dfb45098ea8b401f1232205", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -6,7 +6,7 @@ fn child(c: comm::Chan<~uint>, i: uint) {\n \n fn main() {\n     let p = comm::Port();\n-    let ch = comm::Chan(p);\n+    let ch = comm::Chan(&p);\n     let n = 100u;\n     let mut expected = 0u;\n     for uint::range(0u, n) |i| {"}, {"sha": "cf06a55ae7a5bd64e380ab4fc67d231895570082", "filename": "src/test/run-pass/unique-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -2,7 +2,7 @@ extern mod std;\n \n fn main() {\n     let p = comm::Port();\n-    let c = comm::Chan(p);\n+    let c = comm::Chan(&p);\n     comm::send(c, ~100);\n     let v = comm::recv(p);\n     assert v == ~100;"}, {"sha": "a602a2716026ec7b1d652dbfd0a4106870c9d41b", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe12da0864ade257eb9b7cffbb96e5cb24af325e/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=fe12da0864ade257eb9b7cffbb96e5cb24af325e", "patch": "@@ -22,7 +22,7 @@ fn f(c: comm::Chan<bool>) {\n \n fn main() {\n     let p = comm::Port();\n-    let c = comm::Chan(p);\n+    let c = comm::Chan(&p);\n     task::spawn_unlinked(|| f(c) );\n     error!(\"hiiiiiiiii\");\n     assert comm::recv(p);"}]}