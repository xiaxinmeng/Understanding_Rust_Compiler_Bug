{"sha": "2e677c0645862d17a12c6d04b3019203c8e23fcc", "node_id": "C_kwDOAAsO6NoAKDJlNjc3YzA2NDU4NjJkMTdhMTJjNmQwNGIzMDE5MjAzYzhlMjNmY2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T05:09:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T05:09:45Z"}, "message": "Auto merge of #106616 - compiler-errors:rollup-emcj0o3, r=compiler-errors\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #104163 (Don't derive Debug for `OnceWith` & `RepeatWith`)\n - #106131 (Mention \"signature\" rather than \"fn pointer\" when impl/trait methods are incompatible)\n - #106363 (Structured suggestion for `&mut dyn Iterator` when possible)\n - #106497 (Suggest using clone when we have &T and T implemented Clone)\n - #106584 (Document that `Vec::from_raw_parts[_in]` must be given a pointer from the correct allocator.)\n - #106600 (Suppress type errors that come from private fields)\n - #106602 (Add goml scripts to tidy checks)\n - #106606 (Do not emit structured suggestion for turbofish with wrong span)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "70970b8d512c1f88c62d13cfbec27794a1879f02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70970b8d512c1f88c62d13cfbec27794a1879f02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e677c0645862d17a12c6d04b3019203c8e23fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e677c0645862d17a12c6d04b3019203c8e23fcc", "html_url": "https://github.com/rust-lang/rust/commit/2e677c0645862d17a12c6d04b3019203c8e23fcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e677c0645862d17a12c6d04b3019203c8e23fcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a377893da2cd7124e5a18c7116cbb70e16dd5541", "url": "https://api.github.com/repos/rust-lang/rust/commits/a377893da2cd7124e5a18c7116cbb70e16dd5541", "html_url": "https://github.com/rust-lang/rust/commit/a377893da2cd7124e5a18c7116cbb70e16dd5541"}, {"sha": "5e8e97f98115191bca09600491d3687e9cf2e8fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8e97f98115191bca09600491d3687e9cf2e8fb", "html_url": "https://github.com/rust-lang/rust/commit/5e8e97f98115191bca09600491d3687e9cf2e8fb"}], "stats": {"total": 798, "additions": 594, "deletions": 204}, "files": [{"sha": "c1cb07cf0dfe8f97a6b58e53ab6199d50cd8e0a4", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -253,8 +253,8 @@ infer_trait_placeholder_mismatch = implementation of `{$trait_def_id}` is not ge\n infer_trait_impl_diff = `impl` item signature doesn't match `trait` item signature\n     .found = found `{$found}`\n     .expected = expected `{$expected}`\n-    .expected_found = expected `{$expected}`\n-               {\"   \"}found `{$found}`\n+    .expected_found = expected signature `{$expected}`\n+               {\"   \"}found signature `{$found}`\n \n infer_tid_rel_help = verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n infer_tid_consider_borrowing = consider borrowing this type parameter in the trait"}, {"sha": "0d3391bbc1efbabd36d80c1e846292189eb065de", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -270,8 +270,8 @@ fn compare_method_predicate_entailment<'tcx>(\n     let unnormalized_impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(unnormalized_impl_sig));\n \n     let norm_cause = ObligationCause::misc(impl_m_span, impl_m_hir_id);\n-    let impl_fty = ocx.normalize(&norm_cause, param_env, unnormalized_impl_fty);\n-    debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n+    let impl_sig = ocx.normalize(&norm_cause, param_env, unnormalized_impl_sig);\n+    debug!(\"compare_impl_method: impl_fty={:?}\", impl_sig);\n \n     let trait_sig = tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n     let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, trait_sig);\n@@ -294,18 +294,17 @@ fn compare_method_predicate_entailment<'tcx>(\n     // type would be more appropriate. In other places we have a `Vec<Span>`\n     // corresponding to their `Vec<Predicate>`, but we don't have that here.\n     // Fixing this would improve the output of test `issue-83765.rs`.\n-    let result = ocx.sup(&cause, param_env, trait_fty, impl_fty);\n+    let result = ocx.sup(&cause, param_env, trait_sig, impl_sig);\n \n     if let Err(terr) = result {\n-        debug!(?terr, \"sub_types failed: impl ty {:?}, trait ty {:?}\", impl_fty, trait_fty);\n+        debug!(?impl_sig, ?trait_sig, ?terr, \"sub_types failed\");\n \n         let emitted = report_trait_method_mismatch(\n             &infcx,\n             cause,\n             terr,\n-            (trait_m, trait_fty),\n-            (impl_m, impl_fty),\n-            trait_sig,\n+            (trait_m, trait_sig),\n+            (impl_m, impl_sig),\n             impl_trait_ref,\n         );\n         return Err(emitted);\n@@ -484,7 +483,8 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     let impl_trait_ref = tcx.impl_trait_ref(impl_m.impl_container(tcx).unwrap()).unwrap();\n     let param_env = tcx.param_env(def_id);\n \n-    // First, check a few of the same thing as `compare_impl_method`, just so we don't ICE during substitutions later.\n+    // First, check a few of the same things as `compare_impl_method`,\n+    // just so we don't ICE during substitution later.\n     compare_number_of_generics(tcx, impl_m, trait_m, tcx.hir().span_if_local(impl_m.def_id), true)?;\n     compare_generic_param_kinds(tcx, impl_m, trait_m, true)?;\n     check_region_bounds_on_impl_item(tcx, impl_m, trait_m, true)?;\n@@ -577,14 +577,11 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n \n     debug!(?trait_sig, ?impl_sig, \"equating function signatures\");\n \n-    let trait_fty = tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig));\n-    let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n-\n     // Unify the whole function signature. We need to do this to fully infer\n     // the lifetimes of the return type, but do this after unifying just the\n     // return types, since we want to avoid duplicating errors from\n     // `compare_method_predicate_entailment`.\n-    match ocx.eq(&cause, param_env, trait_fty, impl_fty) {\n+    match ocx.eq(&cause, param_env, trait_sig, impl_sig) {\n         Ok(()) => {}\n         Err(terr) => {\n             // This function gets called during `compare_method_predicate_entailment` when normalizing a\n@@ -595,9 +592,8 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                 infcx,\n                 cause,\n                 terr,\n-                (trait_m, trait_fty),\n-                (impl_m, impl_fty),\n-                trait_sig,\n+                (trait_m, trait_sig),\n+                (impl_m, impl_sig),\n                 impl_trait_ref,\n             );\n             return Err(emitted);\n@@ -771,9 +767,8 @@ fn report_trait_method_mismatch<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     mut cause: ObligationCause<'tcx>,\n     terr: TypeError<'tcx>,\n-    (trait_m, trait_fty): (&ty::AssocItem, Ty<'tcx>),\n-    (impl_m, impl_fty): (&ty::AssocItem, Ty<'tcx>),\n-    trait_sig: ty::FnSig<'tcx>,\n+    (trait_m, trait_sig): (&ty::AssocItem, ty::FnSig<'tcx>),\n+    (impl_m, impl_sig): (&ty::AssocItem, ty::FnSig<'tcx>),\n     impl_trait_ref: ty::TraitRef<'tcx>,\n ) -> ErrorGuaranteed {\n     let tcx = infcx.tcx;\n@@ -858,10 +853,7 @@ fn report_trait_method_mismatch<'tcx>(\n         &mut diag,\n         &cause,\n         trait_err_span.map(|sp| (sp, \"type in trait\".to_owned())),\n-        Some(infer::ValuePairs::Terms(ExpectedFound {\n-            expected: trait_fty.into(),\n-            found: impl_fty.into(),\n-        })),\n+        Some(infer::ValuePairs::Sigs(ExpectedFound { expected: trait_sig, found: impl_sig })),\n         terr,\n         false,\n         false,"}, {"sha": "f68a428d09ae3ba4b1d7f4e5043d7c0b71bc064c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -57,6 +57,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty)\n             || self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected)\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n+            || self.suggest_clone_for_ref(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n             || self.suggest_floating_point_literal(err, expr, expected);\n         if !suggested {"}, {"sha": "b08b22108c8ce899ac43859a95caf83919bbec6b", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -2217,7 +2217,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.tcx.check_stability(field.did, Some(expr.hir_id), expr.span, None);\n                             return field_ty;\n                         }\n-                        private_candidate = Some((adjustments, base_def.did(), field_ty));\n+                        private_candidate = Some((adjustments, base_def.did()));\n                     }\n                 }\n                 ty::Tuple(tys) => {\n@@ -2240,12 +2240,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n \n-        if let Some((adjustments, did, field_ty)) = private_candidate {\n+        if let Some((adjustments, did)) = private_candidate {\n             // (#90483) apply adjustments to avoid ExprUseVisitor from\n             // creating erroneous projection.\n             self.apply_adjustments(base, adjustments);\n             self.ban_private_field_access(expr, base_ty, field, did);\n-            return field_ty;\n+            return self.tcx().ty_error();\n         }\n \n         if field.name == kw::Empty {"}, {"sha": "236bdc60e677d8899dc0415b68d0fe206d5d89d0", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1014,6 +1014,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn suggest_clone_for_ref(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expr_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        if let ty::Ref(_, inner_ty, hir::Mutability::Not) = expr_ty.kind()\n+            && let Some(clone_trait_def) = self.tcx.lang_items().clone_trait()\n+            && expected_ty == *inner_ty\n+            && self\n+                .infcx\n+                .type_implements_trait(\n+                    clone_trait_def,\n+                    [self.tcx.erase_regions(expected_ty)],\n+                    self.param_env\n+                )\n+                .must_apply_modulo_regions()\n+          {\n+              diag.span_suggestion_verbose(\n+                  expr.span.shrink_to_hi(),\n+                  \"consider using clone here\",\n+                  \".clone()\",\n+                  Applicability::MachineApplicable,\n+              );\n+              return true;\n+          }\n+        false\n+    }\n+\n     pub(crate) fn suggest_copied_or_cloned(\n         &self,\n         diag: &mut Diagnostic,"}, {"sha": "d276bcdb81e3e68e726397420be8d55b0b77d5c5", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -57,7 +57,12 @@ pub enum MethodError<'tcx> {\n     PrivateMatch(DefKind, DefId, Vec<DefId>),\n \n     // Found a `Self: Sized` bound where `Self` is a trait object.\n-    IllegalSizedBound(Vec<DefId>, bool, Span),\n+    IllegalSizedBound {\n+        candidates: Vec<DefId>,\n+        needs_mut: bool,\n+        bound_span: Span,\n+        self_expr: &'tcx hir::Expr<'tcx>,\n+    },\n \n     // Found a match, but the return type is wrong\n     BadReturnType,\n@@ -112,7 +117,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Err(NoMatch(..)) => false,\n             Err(Ambiguity(..)) => true,\n             Err(PrivateMatch(..)) => allow_private,\n-            Err(IllegalSizedBound(..)) => true,\n+            Err(IllegalSizedBound { .. }) => true,\n             Err(BadReturnType) => bug!(\"no return type expectations but got BadReturnType\"),\n         }\n     }\n@@ -236,7 +241,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => Vec::new(),\n                 };\n \n-            return Err(IllegalSizedBound(candidates, needs_mut, span));\n+            return Err(IllegalSizedBound { candidates, needs_mut, bound_span: span, self_expr });\n         }\n \n         Ok(result.callee)"}, {"sha": "536c4270659582b17f32581b0f7488f405cb2381", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -176,10 +176,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.emit();\n             }\n \n-            MethodError::IllegalSizedBound(candidates, needs_mut, bound_span) => {\n-                let msg = format!(\"the `{}` method cannot be invoked on a trait object\", item_name);\n+            MethodError::IllegalSizedBound { candidates, needs_mut, bound_span, self_expr } => {\n+                let msg = if needs_mut {\n+                    with_forced_trimmed_paths!(format!(\n+                        \"the `{item_name}` method cannot be invoked on `{rcvr_ty}`\"\n+                    ))\n+                } else {\n+                    format!(\"the `{item_name}` method cannot be invoked on a trait object\")\n+                };\n                 let mut err = self.sess().struct_span_err(span, &msg);\n-                err.span_label(bound_span, \"this has a `Sized` requirement\");\n+                if !needs_mut {\n+                    err.span_label(bound_span, \"this has a `Sized` requirement\");\n+                }\n                 if !candidates.is_empty() {\n                     let help = format!(\n                         \"{an}other candidate{s} {were} found in the following trait{s}, perhaps \\\n@@ -197,7 +205,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             *region,\n                             ty::TypeAndMut { ty: *t_type, mutbl: mutability.invert() },\n                         );\n-                        err.note(&format!(\"you need `{}` instead of `{}`\", trait_type, rcvr_ty));\n+                        let msg = format!(\"you need `{}` instead of `{}`\", trait_type, rcvr_ty);\n+                        let mut kind = &self_expr.kind;\n+                        while let hir::ExprKind::AddrOf(_, _, expr)\n+                        | hir::ExprKind::Unary(hir::UnOp::Deref, expr) = kind\n+                        {\n+                            kind = &expr.kind;\n+                        }\n+                        if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = kind\n+                            && let hir::def::Res::Local(hir_id) = path.res\n+                            && let Some(hir::Node::Pat(b)) = self.tcx.hir().find(hir_id)\n+                            && let Some(hir::Node::Param(p)) = self.tcx.hir().find_parent(b.hir_id)\n+                            && let Some(node) = self.tcx.hir().find_parent(p.hir_id)\n+                            && let Some(decl) = node.fn_decl()\n+                            && let Some(ty) = decl.inputs.iter().find(|ty| ty.span == p.ty_span)\n+                            && let hir::TyKind::Ref(_, mut_ty) = &ty.kind\n+                            && let hir::Mutability::Not = mut_ty.mutbl\n+                        {\n+                            err.span_suggestion_verbose(\n+                                mut_ty.ty.span.shrink_to_lo(),\n+                                &msg,\n+                                \"mut \",\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            err.help(&msg);\n+                        }\n                     }\n                 }\n                 err.emit();"}, {"sha": "d816a9ed3d7c102517e024ac39f0d9a3eb52e863", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -427,3 +427,15 @@ impl<'tcx> ToTrace<'tcx> for ty::AliasTy<'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> ToTrace<'tcx> for ty::FnSig<'tcx> {\n+    fn to_trace(\n+        _: TyCtxt<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n+        a_is_expected: bool,\n+        a: Self,\n+        b: Self,\n+    ) -> TypeTrace<'tcx> {\n+        TypeTrace { cause: cause.clone(), values: Sigs(ExpectedFound::new(a_is_expected, a, b)) }\n+    }\n+}"}, {"sha": "5c3e9a2d5cccd904de3a8d9756f5fb9ef7ba82c8", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1428,8 +1428,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         impl<'tcx> OpaqueTypesVisitor<'tcx> {\n             fn visit_expected_found(\n                 tcx: TyCtxt<'tcx>,\n-                expected: Ty<'tcx>,\n-                found: Ty<'tcx>,\n+                expected: impl TypeVisitable<'tcx>,\n+                found: impl TypeVisitable<'tcx>,\n                 ignore_span: Span,\n             ) -> Self {\n                 let mut types_visitor = OpaqueTypesVisitor {\n@@ -1569,6 +1569,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             _ => (false, Mismatch::Fixed(\"type\")),\n                         }\n                     }\n+                    ValuePairs::Sigs(infer::ExpectedFound { expected, found }) => {\n+                        OpaqueTypesVisitor::visit_expected_found(self.tcx, expected, found, span)\n+                            .report(diag);\n+                        (false, Mismatch::Fixed(\"signature\"))\n+                    }\n                     ValuePairs::TraitRefs(_) | ValuePairs::PolyTraitRefs(_) => {\n                         (false, Mismatch::Fixed(\"trait\"))\n                     }\n@@ -2040,6 +2045,17 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     ret => ret,\n                 }\n             }\n+            infer::Sigs(exp_found) => {\n+                let exp_found = self.resolve_vars_if_possible(exp_found);\n+                if exp_found.references_error() {\n+                    return None;\n+                }\n+                let (exp, fnd) = self.cmp_fn_sig(\n+                    &ty::Binder::dummy(exp_found.expected),\n+                    &ty::Binder::dummy(exp_found.found),\n+                );\n+                Some((exp, fnd, None, None))\n+            }\n         }\n     }\n "}, {"sha": "40c0c806e1ff8ea41e8e68de27980fe91e81f4cc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -3,14 +3,15 @@\n use crate::errors::{ConsiderBorrowingParamHelp, RelationshipHelp, TraitImplDiff};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::Subtype;\n+use crate::infer::{Subtype, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplItemObligation;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::RegionHighlightMode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_span::Span;\n@@ -23,22 +24,27 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let error = self.error.as_ref()?;\n         debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n         if let RegionResolutionError::SubSupConflict(\n-                _,\n-                var_origin,\n-                sub_origin,\n-                _sub,\n-                sup_origin,\n-                _sup,\n-                _,\n-            ) = error.clone()\n+            _,\n+            var_origin,\n+            sub_origin,\n+            _sub,\n+            sup_origin,\n+            _sup,\n+            _,\n+        ) = error.clone()\n             && let (Subtype(sup_trace), Subtype(sub_trace)) = (&sup_origin, &sub_origin)\n-            && let sub_expected_found @ Some((sub_expected, sub_found)) = sub_trace.values.ty()\n-            && let sup_expected_found @ Some(_) = sup_trace.values.ty()\n             && let CompareImplItemObligation { trait_item_def_id, .. } = sub_trace.cause.code()\n-            && sup_expected_found == sub_expected_found\n+            && sub_trace.values == sup_trace.values\n+            && let ValuePairs::Sigs(ExpectedFound { expected, found }) = sub_trace.values\n         {\n-            let guar =\n-                self.emit_err(var_origin.span(), sub_expected, sub_found, *trait_item_def_id);\n+            // FIXME(compiler-errors): Don't like that this needs `Ty`s, but\n+            // all of the region highlighting machinery only deals with those.\n+            let guar = self.emit_err(\n+                var_origin.span(),\n+                self.cx.tcx.mk_fn_ptr(ty::Binder::dummy(expected)),\n+                self.cx.tcx.mk_fn_ptr(ty::Binder::dummy(found)),\n+                *trait_item_def_id,\n+            );\n             return Some(guar);\n         }\n         None"}, {"sha": "a9de74d78cb61c18f716f4aaba98dbe7e2ae97f6", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -361,6 +361,7 @@ pub enum ValuePairs<'tcx> {\n     Terms(ExpectedFound<ty::Term<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n+    Sigs(ExpectedFound<ty::FnSig<'tcx>>),\n }\n \n impl<'tcx> ValuePairs<'tcx> {"}, {"sha": "d9fa3e31db97226cdb4bebcf81cb0d24042c3387", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1104,7 +1104,11 @@ impl<'a> Parser<'a> {\n                     return if token::ModSep == self.token.kind {\n                         // We have some certainty that this was a bad turbofish at this point.\n                         // `foo< bar >::`\n-                        err.suggest_turbofish = Some(op.span.shrink_to_lo());\n+                        if let ExprKind::Binary(o, ..) = inner_op.kind && o.node == BinOpKind::Lt {\n+                            err.suggest_turbofish = Some(op.span.shrink_to_lo());\n+                        } else {\n+                            err.help_turbofish = Some(());\n+                        }\n \n                         let snapshot = self.create_snapshot_for_diagnostic();\n                         self.bump(); // `::`\n@@ -1130,7 +1134,11 @@ impl<'a> Parser<'a> {\n                     } else if token::OpenDelim(Delimiter::Parenthesis) == self.token.kind {\n                         // We have high certainty that this was a bad turbofish at this point.\n                         // `foo< bar >(`\n-                        err.suggest_turbofish = Some(op.span.shrink_to_lo());\n+                        if let ExprKind::Binary(o, ..) = inner_op.kind && o.node == BinOpKind::Lt {\n+                            err.suggest_turbofish = Some(op.span.shrink_to_lo());\n+                        } else {\n+                            err.help_turbofish = Some(());\n+                        }\n                         // Consume the fn call arguments.\n                         match self.consume_fn_args() {\n                             Err(()) => Err(err.into_diagnostic(&self.sess.span_diagnostic)),"}, {"sha": "9c098e1a2fc12b6beaee3ce595e38a714b367a41", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -873,6 +873,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n+                        if self.suggest_add_clone_to_arg(&obligation, &mut err, trait_predicate) {\n+                            err.emit();\n+                            return;\n+                        }\n+\n                         if self.suggest_impl_trait(&mut err, span, &obligation, trait_predicate) {\n                             err.emit();\n                             return;"}, {"sha": "c52365ae3b7c7309cc90bd44db5de64e07573482", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -10,7 +10,7 @@ use crate::infer::InferCtxt;\n use crate::traits::{NormalizeExt, ObligationCtxt};\n \n use hir::def::CtorOf;\n-use hir::HirId;\n+use hir::{Expr, HirId};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n@@ -206,6 +206,13 @@ pub trait TypeErrCtxtExt<'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n \n+    fn suggest_add_clone_to_arg(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) -> bool;\n+\n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -1102,6 +1109,55 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    fn suggest_add_clone_to_arg(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) -> bool {\n+        let self_ty = self.resolve_vars_if_possible(trait_pred.self_ty());\n+        let ty = self.tcx.erase_late_bound_regions(self_ty);\n+        let owner = self.tcx.hir().get_parent_item(obligation.cause.body_id);\n+        let Some(generics) = self.tcx.hir().get_generics(owner.def_id) else { return false };\n+        let ty::Ref(_, inner_ty, hir::Mutability::Not) = ty.kind() else { return false };\n+        let ty::Param(param) = inner_ty.kind() else { return false };\n+        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code() else { return false };\n+        let arg_node = self.tcx.hir().get(*arg_hir_id);\n+        let Node::Expr(Expr { kind: hir::ExprKind::Path(_), ..}) = arg_node else { return false };\n+\n+        let clone_trait = self.tcx.require_lang_item(LangItem::Clone, None);\n+        let has_clone = |ty| {\n+            self.type_implements_trait(clone_trait, [ty], obligation.param_env)\n+                .must_apply_modulo_regions()\n+        };\n+\n+        let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n+            obligation.param_env,\n+            trait_pred.map_bound(|trait_pred| (trait_pred, *inner_ty)),\n+        );\n+\n+        if self.predicate_may_hold(&new_obligation) && has_clone(ty) {\n+            if !has_clone(param.to_ty(self.tcx)) {\n+                suggest_constraining_type_param(\n+                    self.tcx,\n+                    generics,\n+                    err,\n+                    param.name.as_str(),\n+                    \"Clone\",\n+                    Some(clone_trait),\n+                );\n+            }\n+            err.span_suggestion_verbose(\n+                obligation.cause.span.shrink_to_hi(),\n+                \"consider using clone here\",\n+                \".clone()\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+            return true;\n+        }\n+        false\n+    }\n+\n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,"}, {"sha": "36cfac8ee9e17da0dde403e785c0a09efd324898", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -490,6 +490,8 @@ impl<T> Vec<T> {\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n+    /// * `ptr` must have been allocated using the global allocator, such as via\n+    ///   the [`alloc::alloc`] function.\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -526,6 +528,7 @@ impl<T> Vec<T> {\n     /// function.\n     ///\n     /// [`String`]: crate::string::String\n+    /// [`alloc::alloc`]: crate::alloc::alloc\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n     ///\n     /// # Examples\n@@ -681,6 +684,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n+    /// * `ptr` must be [*currently allocated*] via the given allocator `alloc`.\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -714,6 +718,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// [`String`]: crate::string::String\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n+    /// [*currently allocated*]: crate::alloc::Allocator#currently-allocated-memory\n     /// [*fit*]: crate::alloc::Allocator#memory-fitting\n     ///\n     /// # Examples"}, {"sha": "080ae27a30fcf976dd3e483e8fe6b14d8f3f65e4", "filename": "library/core/src/iter/sources/once_with.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fonce_with.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1,3 +1,4 @@\n+use crate::fmt;\n use crate::iter::{FusedIterator, TrustedLen};\n \n /// Creates an iterator that lazily generates a value exactly once by invoking\n@@ -66,12 +67,23 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n ///\n /// This `struct` is created by the [`once_with()`] function.\n /// See its documentation for more.\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n #[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n pub struct OnceWith<F> {\n     gen: Option<F>,\n }\n \n+#[stable(feature = \"iter_once_with_debug\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<F> fmt::Debug for OnceWith<F> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.gen.is_some() {\n+            f.write_str(\"OnceWith(Some(_))\")\n+        } else {\n+            f.write_str(\"OnceWith(None)\")\n+        }\n+    }\n+}\n+\n #[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n     type Item = A;"}, {"sha": "20420a3ad8e02a83df814e758b5cc9e8481f83a2", "filename": "library/core/src/iter/sources/repeat_with.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1,3 +1,4 @@\n+use crate::fmt;\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::ops::Try;\n \n@@ -71,12 +72,19 @@ pub fn repeat_with<A, F: FnMut() -> A>(repeater: F) -> RepeatWith<F> {\n ///\n /// This `struct` is created by the [`repeat_with()`] function.\n /// See its documentation for more.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n pub struct RepeatWith<F> {\n     repeater: F,\n }\n \n+#[stable(feature = \"iterator_repeat_with_debug\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<F> fmt::Debug for RepeatWith<F> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"RepeatWith\").finish_non_exhaustive()\n+    }\n+}\n+\n #[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n impl<A, F: FnMut() -> A> Iterator for RepeatWith<F> {\n     type Item = A;"}, {"sha": "5d80d24969ddeb638bd5684428f158e015a62a91", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -5,7 +5,7 @@ goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n write: (\".search-input\", \"test\")\n // To be SURE that the search will be run.\n press-key: 'Enter'\n-wait-for: \"#search h1\" // The search element is empty before the first search \n+wait-for: \"#search h1\" // The search element is empty before the first search\n // Check that the currently displayed element is search.\n wait-for: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})"}, {"sha": "6caffb9c39fc1b4210034753ad8e3251f7bad4db", "filename": "src/test/rustdoc-gui/impl-doc.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fimpl-doc.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fimpl-doc.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fimpl-doc.goml?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -3,7 +3,7 @@ goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.TypeWithImplDoc.html\"\n \n // The text is about 24px tall, so if there's a margin, then their position will be >24px apart\n compare-elements-position-near-false: (\n-\t\"#implementations-list > .implementors-toggle > .docblock > p\",\n-\t\"#implementations-list > .implementors-toggle > .impl-items\",\n-\t{\"y\": 24}\n+    \"#implementations-list > .implementors-toggle > .docblock > p\",\n+    \"#implementations-list > .implementors-toggle > .impl-items\",\n+    {\"y\": 24}\n )"}, {"sha": "895864d89445fdfe85f57d799e276818d0517f5f", "filename": "src/test/rustdoc-gui/mobile.goml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fmobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fmobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmobile.goml?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -27,4 +27,8 @@ assert-css-false: (\".content .out-of-band .since::before\", { \"content\": \"\\\"Since\n goto: \"file://\" + |DOC_PATH| + \"/settings.html\"\n size: (400, 600)\n // Ignored for now https://github.com/rust-lang/rust/issues/93784.\n-// compare-elements-position-near-false: (\"#preferred-light-theme .setting-name\", \"#preferred-light-theme .choice\", {\"y\": 16})\n+// compare-elements-position-near-false: (\n+//     \"#preferred-light-theme .setting-name\",\n+//     \"#preferred-light-theme .choice\",\n+//     {\"y\": 16},\n+// )"}, {"sha": "2d15e8b969921d4b1ea801bea88af2dba61e1ea0", "filename": "src/test/rustdoc-gui/rust-logo.goml", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -31,13 +31,28 @@ define-function: (\n \n call-function: (\n     \"check-logo\",\n-    (\"ayu\", \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"),\n+    {\n+        \"theme\": \"ayu\",\n+        \"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) \" +\n+            \"drop-shadow(rgb(255, 255, 255) 0px 1px 0px) \" +\n+            \"drop-shadow(rgb(255, 255, 255) -1px 0px 0px) \" +\n+            \"drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\",\n+    },\n )\n call-function: (\n     \"check-logo\",\n-    (\"dark\", \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"),\n+    {\n+        \"theme\": \"dark\",\n+        \"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) \" +\n+            \"drop-shadow(rgb(255, 255, 255) 0px 1px 0px) \" +\n+            \"drop-shadow(rgb(255, 255, 255) -1px 0px 0px) \" +\n+            \"drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\",\n+    },\n )\n call-function: (\n     \"check-logo\",\n-    (\"light\", \"none\"),\n+    {\n+        \"theme\": \"light\",\n+        \"filter\": \"none\",\n+    },\n )"}, {"sha": "10651a3f6696d5ef41eaef999ee37c527446b97a", "filename": "src/test/rustdoc-gui/scrape-examples-button-focus.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -5,25 +5,25 @@ store-property: (initialScrollTop, \".scraped-example-list > .scraped-example pre\n focus: \".scraped-example-list > .scraped-example .next\"\n press-key: \"Enter\"\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n-\t\"scrollTop\": |initialScrollTop|\n+    \"scrollTop\": |initialScrollTop|\n })\n focus: \".scraped-example-list > .scraped-example .prev\"\n press-key: \"Enter\"\n assert-property: (\".scraped-example-list > .scraped-example pre\", {\n-\t\"scrollTop\": |initialScrollTop|\n+    \"scrollTop\": |initialScrollTop|\n })\n \n // The expand button increases the scrollHeight of the minimized code viewport\n store-property: (smallOffsetHeight, \".scraped-example-list > .scraped-example pre\", \"offsetHeight\")\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n-\t\"scrollHeight\": |smallOffsetHeight|\n+    \"scrollHeight\": |smallOffsetHeight|\n })\n focus: \".scraped-example-list > .scraped-example .expand\"\n press-key: \"Enter\"\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n-\t\"offsetHeight\": |smallOffsetHeight|\n+    \"offsetHeight\": |smallOffsetHeight|\n })\n store-property: (fullOffsetHeight, \".scraped-example-list > .scraped-example pre\", \"offsetHeight\")\n assert-property: (\".scraped-example-list > .scraped-example pre\", {\n-\t\"scrollHeight\": |fullOffsetHeight|\n+    \"scrollHeight\": |fullOffsetHeight|\n })"}, {"sha": "9c742be0587c62a9fb09d85bf0a263f5f255d838", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -148,4 +148,4 @@ assert-text: (\"#toggle-all-docs\", \"[+]\")\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n click: \"#toggle-all-docs\"\n assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n-assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n\\ No newline at end of file\n+assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})"}, {"sha": "9b60bc04738bfe542da46e5fc8d048c806743059", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n // This test ensures that the items declaration content overflow is handled inside the <pre> directly.\n \n // We need to disable this check because"}, {"sha": "7e21f7fc306d2b94ccde3ae44268bd7d2bc621fa", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -22,8 +22,8 @@ note: type in trait\n    |\n LL |     fn make() -> Self::Ty {\n    |                  ^^^^^^^^\n-   = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n-              found fn pointer `fn() -> u8`\n+   = note: expected signature `fn() -> <A<T> as Tr>::Ty`\n+              found signature `fn() -> u8`\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:35:18\n@@ -42,8 +42,8 @@ note: type in trait\n    |\n LL |     fn make() -> Self::Ty {\n    |                  ^^^^^^^^\n-   = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n-              found fn pointer `fn() -> bool`\n+   = note: expected signature `fn() -> <B<T> as Tr>::Ty`\n+              found signature `fn() -> bool`\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:10:9"}, {"sha": "13e7222551aaf1f5783d93dcdd2b09973cb1d9fd", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -9,8 +9,8 @@ note: type in trait\n    |\n LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected fn pointer `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n-              found fn pointer `fn(&i32) -> impl Future<Output = i32>`\n+   = note: expected signature `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n+              found signature `fn(&i32) -> impl Future<Output = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "930fea9158d45405ebbbe7d7ca3162d850d8ca29", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -22,8 +22,8 @@ error[E0308]: method not compatible with trait\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n-              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n+   = note: expected signature `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n+              found signature `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n note: the lifetime `'c` as defined here...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |\n@@ -41,8 +41,8 @@ error[E0308]: method not compatible with trait\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n-              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n+   = note: expected signature `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n+              found signature `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n note: the lifetime `'c` as defined here...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |"}, {"sha": "cad942e646e3ee24037c579c69ae1f54950f6bae", "filename": "src/test/ui/compare-method/bad-self-type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |     fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n    |             expected struct `Pin`, found struct `MyFuture`\n    |             help: change the self-receiver type to match the trait: `self: Pin<&mut MyFuture>`\n    |\n-   = note: expected fn pointer `fn(Pin<&mut MyFuture>, &mut Context<'_>) -> Poll<_>`\n-              found fn pointer `fn(MyFuture, &mut Context<'_>) -> Poll<_>`\n+   = note: expected signature `fn(Pin<&mut MyFuture>, &mut Context<'_>) -> Poll<_>`\n+              found signature `fn(MyFuture, &mut Context<'_>) -> Poll<_>`\n \n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/bad-self-type.rs:22:18\n@@ -24,8 +24,8 @@ note: type in trait\n    |\n LL |     fn foo(self);\n    |            ^^^^\n-   = note: expected fn pointer `fn(MyFuture)`\n-              found fn pointer `fn(Box<MyFuture>)`\n+   = note: expected signature `fn(MyFuture)`\n+              found signature `fn(Box<MyFuture>)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/bad-self-type.rs:24:18\n@@ -38,8 +38,8 @@ note: type in trait\n    |\n LL |     fn bar(self) -> Option<()>;\n    |                     ^^^^^^^^^^\n-   = note: expected fn pointer `fn(MyFuture) -> Option<()>`\n-              found fn pointer `fn(MyFuture)`\n+   = note: expected signature `fn(MyFuture) -> Option<()>`\n+              found signature `fn(MyFuture)`\n help: change the output type to match the trait\n    |\n LL |     fn bar(self) -> Option<()> {}"}, {"sha": "52e23d03b148bfe5b60ca8030f155633bec6a6ed", "filename": "src/test/ui/compare-method/issue-90444.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |     fn from(_: fn((), (), &mut ())) -> Self {\n    |                types differ in mutability\n    |                help: change the parameter type to match the trait: `for<'a> fn((), (), &'a ())`\n    |\n-   = note: expected fn pointer `fn(for<'a> fn((), (), &'a ())) -> A`\n-              found fn pointer `fn(for<'a> fn((), (), &'a mut ())) -> A`\n+   = note: expected signature `fn(for<'a> fn((), (), &'a ())) -> A`\n+              found signature `fn(for<'a> fn((), (), &'a mut ())) -> A`\n \n error[E0053]: method `from` has an incompatible type for trait\n   --> $DIR/issue-90444.rs:11:16\n@@ -19,8 +19,8 @@ LL |     fn from(_: fn((), (), u64)) -> Self {\n    |                expected `u32`, found `u64`\n    |                help: change the parameter type to match the trait: `fn((), (), u32)`\n    |\n-   = note: expected fn pointer `fn(fn((), (), u32)) -> B`\n-              found fn pointer `fn(fn((), (), u64)) -> B`\n+   = note: expected signature `fn(fn((), (), u32)) -> B`\n+              found signature `fn(fn((), (), u64)) -> B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1552d542d15dee44e9301862ef550af1b4288c49", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -14,8 +14,8 @@ note: type in trait\n    |\n LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n    |                             ^\n-   = note: expected fn pointer `fn(&E, F) -> F`\n-              found fn pointer `fn(&E, G) -> G`\n+   = note: expected signature `fn(&E, F) -> F`\n+              found signature `fn(&E, G) -> G`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "74f3c887f0276b24301733fc5f0d262fd215de62", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+     *t.min().unwrap() //~ ERROR the `min` method cannot be invoked on\n+}\n+\n+fn main() {\n+     let array = [0u64];\n+     test(&mut array.iter());\n+}"}, {"sha": "3b02c5a5ad15a5dc5b42e118f845624dedeac8e4", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn test(t: &dyn Iterator<Item=&u64>) -> u64 {\n+     *t.min().unwrap() //~ ERROR the `min` method cannot be invoked on\n+}\n+\n+fn main() {\n+     let array = [0u64];\n+     test(&mut array.iter());\n+}"}, {"sha": "89613bd5c20282694d124777f322325542047c9a", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,13 @@\n+error: the `min` method cannot be invoked on `&dyn Iterator<Item = &u64>`\n+  --> $DIR/mutability-mismatch-arg.rs:3:9\n+   |\n+LL |      *t.min().unwrap()\n+   |         ^^^\n+   |\n+help: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n+   |\n+LL | fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+   |             +++\n+\n+error: aborting due to previous error\n+"}, {"sha": "01bb3537c2ddc7449e1e2788bf995b39848cec07", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -4,7 +4,6 @@ pub trait MutTrait {\n     fn function(&mut self)\n     where\n         Self: Sized;\n-    //~^ this has a `Sized` requirement\n }\n \n impl MutTrait for MutType {\n@@ -17,7 +16,6 @@ pub trait Trait {\n     fn function(&self)\n     where\n         Self: Sized;\n-    //~^ this has a `Sized` requirement\n }\n \n impl Trait for Type {\n@@ -26,9 +24,9 @@ impl Trait for Type {\n \n fn main() {\n     (&MutType as &dyn MutTrait).function();\n-    //~^ ERROR the `function` method cannot be invoked on a trait object\n-    //~| NOTE you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n+    //~^ ERROR the `function` method cannot be invoked on `&dyn MutTrait`\n+    //~| HELP you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n     (&mut Type as &mut dyn Trait).function();\n-    //~^ ERROR the `function` method cannot be invoked on a trait object\n-    //~| NOTE you need `&dyn Trait` instead of `&mut dyn Trait`\n+    //~^ ERROR the `function` method cannot be invoked on `&mut dyn Trait`\n+    //~| HELP you need `&dyn Trait` instead of `&mut dyn Trait`\n }"}, {"sha": "2ca571d9b7926d7b4c65341d4d562e982a5ff617", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1,24 +1,18 @@\n-error: the `function` method cannot be invoked on a trait object\n-  --> $DIR/mutability-mismatch.rs:28:33\n+error: the `function` method cannot be invoked on `&dyn MutTrait`\n+  --> $DIR/mutability-mismatch.rs:26:33\n    |\n-LL |         Self: Sized;\n-   |               ----- this has a `Sized` requirement\n-...\n LL |     (&MutType as &dyn MutTrait).function();\n    |                                 ^^^^^^^^\n    |\n-   = note: you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n+   = help: you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n \n-error: the `function` method cannot be invoked on a trait object\n-  --> $DIR/mutability-mismatch.rs:31:35\n+error: the `function` method cannot be invoked on `&mut dyn Trait`\n+  --> $DIR/mutability-mismatch.rs:29:35\n    |\n-LL |         Self: Sized;\n-   |               ----- this has a `Sized` requirement\n-...\n LL |     (&mut Type as &mut dyn Trait).function();\n    |                                   ^^^^^^^^\n    |\n-   = note: you need `&dyn Trait` instead of `&mut dyn Trait`\n+   = help: you need `&dyn Trait` instead of `&mut dyn Trait`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db97fc2bdc46a8483c7b5005111ccef459d70f70", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -13,8 +13,8 @@ note: type in trait\n    |\n LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n    |                                ^^\n-   = note: expected fn pointer `fn(&(), &B, &impl Debug)`\n-              found fn pointer `fn(&(), &impl Debug, &B)`\n+   = note: expected signature `fn(&(), &B, &impl Debug)`\n+              found signature `fn(&(), &impl Debug, &B)`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "4dfd772222e5de25f627958cea5d245549adff35", "filename": "src/test/ui/impl-trait/in-trait/method-signature-matches.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn owo(x: ()) -> impl Sized;\n    |               ^^\n-   = note: expected fn pointer `fn(())`\n-              found fn pointer `fn(u8)`\n+   = note: expected signature `fn(())`\n+              found signature `fn(u8)`\n \n error[E0053]: method `owo` has an incompatible type for trait\n   --> $DIR/method-signature-matches.rs:20:21\n@@ -39,8 +39,8 @@ note: type in trait\n    |\n LL |     async fn owo(x: ()) {}\n    |                     ^^\n-   = note: expected fn pointer `fn(()) -> _`\n-              found fn pointer `fn(u8) -> _`\n+   = note: expected signature `fn(()) -> _`\n+              found signature `fn(u8) -> _`\n \n error[E0050]: method `calm_down_please` has 3 parameters but the declaration in trait `TooMuch::calm_down_please` has 0\n   --> $DIR/method-signature-matches.rs:29:28\n@@ -75,8 +75,8 @@ note: type in trait\n    |\n LL |     fn early<'early, T>(x: &'early T) -> impl Sized;\n    |                            ^^^^^^^^^\n-   = note: expected fn pointer `fn(&'early T)`\n-              found fn pointer `fn(&())`\n+   = note: expected signature `fn(&'early T)`\n+              found signature `fn(&())`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e105660173b48ae3af6e06e964dfd061f770ace9", "filename": "src/test/ui/impl-trait/in-trait/signature-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n    |\n-   = note: expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n-              found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   = note: expected signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n+              found signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n    = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n "}, {"sha": "37cfd74498d81a97a92ee2108d796432d418a753", "filename": "src/test/ui/impl-trait/in-trait/specialization-broken.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -15,8 +15,8 @@ note: type in trait\n    |\n LL |     fn bar(&self) -> impl Sized;\n    |                      ^^^^^^^^^^\n-   = note: expected fn pointer `fn(&U) -> impl Sized`\n-              found fn pointer `fn(&U) -> U`\n+   = note: expected signature `fn(&U) -> impl Sized`\n+              found signature `fn(&U) -> U`\n \n error: aborting due to previous error\n "}, {"sha": "c7c6ca4401266c57ba9f3c613c7dcacc482c2917", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -18,8 +18,8 @@ LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n    |                              expected struct `Bar`, found opaque type\n    |                              help: change the parameter type to match the trait: `&(a::Bar, i32)`\n    |\n-   = note: expected fn pointer `fn(&a::Bar, &(a::Bar, i32)) -> _`\n-              found fn pointer `fn(&a::Bar, &(a::Foo, i32)) -> _`\n+   = note: expected signature `fn(&a::Bar, &(a::Bar, i32)) -> _`\n+              found signature `fn(&a::Bar, &(a::Foo, i32)) -> _`\n \n error: unconstrained opaque type\n   --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:18:16\n@@ -41,8 +41,8 @@ LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n    |                              expected opaque type, found struct `Bar`\n    |                              help: change the parameter type to match the trait: `&(b::Foo, i32)`\n    |\n-   = note: expected fn pointer `fn(&b::Bar, &(b::Foo, i32)) -> _`\n-              found fn pointer `fn(&b::Bar, &(b::Bar, i32)) -> _`\n+   = note: expected signature `fn(&b::Bar, &(b::Foo, i32)) -> _`\n+              found signature `fn(&b::Bar, &(b::Bar, i32)) -> _`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "81e4c933e53f42261257aa8ad76d53b722f2a292", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |    fn fmt(&self, x: &str) -> () { }\n    |                     types differ in mutability\n    |                     help: change the parameter type to match the trait: `&mut Formatter<'_>`\n    |\n-   = note: expected fn pointer `fn(&MyType, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n-              found fn pointer `fn(&MyType, &str)`\n+   = note: expected signature `fn(&MyType, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n+              found signature `fn(&MyType, &str)`\n \n error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n   --> $DIR/trait_type.rs:12:11"}, {"sha": "fdb356e70c5f06d0a0994733830fddafc87872a8", "filename": "src/test/ui/issues/issue-13033.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ struct Baz;\n impl Foo for Baz {\n     fn bar(&mut self, other: &dyn Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n-    //~| found fn pointer `fn(&mut Baz, &dyn Foo)`\n+    //~| expected signature `fn(&mut Baz, &mut dyn Foo)`\n+    //~| found signature `fn(&mut Baz, &dyn Foo)`\n }\n \n fn main() {}"}, {"sha": "db2c1189e1e1a408dce972af37da90f7c46094b5", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn bar(&mut self, other: &mut dyn Foo);\n    |                              ^^^^^^^^^^^^\n-   = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n-              found fn pointer `fn(&mut Baz, &dyn Foo)`\n+   = note: expected signature `fn(&mut Baz, &mut dyn Foo)`\n+              found signature `fn(&mut Baz, &dyn Foo)`\n \n error: aborting due to previous error\n "}, {"sha": "cb27e2bcfb6c07bb7961f9f33dfac8134fb42e2e", "filename": "src/test/ui/issues/issue-15094.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -10,8 +10,8 @@ impl<T: fmt::Debug> ops::FnOnce<(),> for Debuger<T> {\n     type Output = ();\n     fn call_once(self, _args: ()) {\n     //~^ ERROR `call_once` has an incompatible type for trait\n-    //~| expected fn pointer `extern \"rust-call\" fn\n-    //~| found fn pointer `fn\n+    //~| expected signature `extern \"rust-call\" fn\n+    //~| found signature `fn\n         println!(\"{:?}\", self.x);\n     }\n }"}, {"sha": "b7c950892dc29de44ca3e6486b14d20dc5b5001f", "filename": "src/test/ui/issues/issue-15094.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `call_once` has an incompatible type for trait\n LL |     fn call_once(self, _args: ()) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"rust-call\" fn, found \"Rust\" fn\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(Debuger<_>, ())`\n-              found fn pointer `fn(Debuger<_>, ())`\n+   = note: expected signature `extern \"rust-call\" fn(Debuger<_>, ())`\n+              found signature `fn(Debuger<_>, ())`\n \n error: aborting due to previous error\n "}, {"sha": "5822160107cce5479747543a07da6dfcbe2f3b62", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -9,8 +9,8 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |                                           expected `&T`, found type parameter `T`\n    |                                           help: change the parameter type to match the trait: `(&'a T,)`\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n+   = note: expected signature `extern \"rust-call\" fn(&Foo, (&'a T,))`\n+              found signature `extern \"rust-call\" fn(&Foo, (T,))`\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:11:51\n@@ -23,8 +23,8 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |                                                   expected `&T`, found type parameter `T`\n    |                                                   help: change the parameter type to match the trait: `(&'a T,)`\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n+   = note: expected signature `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n+              found signature `extern \"rust-call\" fn(&mut Foo, (T,))`\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:18:47\n@@ -38,8 +38,8 @@ LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |                                               expected `&T`, found type parameter `T`\n    |                                               help: change the parameter type to match the trait: `(&'a T,)`\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(Foo, (T,))`\n+   = note: expected signature `extern \"rust-call\" fn(Foo, (&'a T,))`\n+              found signature `extern \"rust-call\" fn(Foo, (T,))`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0e1beebf2931a2e01c2658a2f0264f8aed6302fd", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n    |                           expected enum `Option`, found enum `Result`\n    |                           help: change the output type to match the trait: `Option<i32>`\n    |\n-   = note: expected fn pointer `fn(&mut S) -> Option<i32>`\n-              found fn pointer `fn(&mut S) -> Result<i32, i32>`\n+   = note: expected signature `fn(&mut S) -> Option<i32>`\n+              found signature `fn(&mut S) -> Result<i32, i32>`\n \n error: aborting due to previous error\n "}, {"sha": "b26cc77680daa2181d847e26edc30596ed22c286", "filename": "src/test/ui/issues/issue-25386.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -24,5 +24,4 @@ macro_rules! check_ptr_exist {\n fn main() {\n     let item = stuff::Item::new();\n     println!(\"{}\", check_ptr_exist!(item, name));\n-    //~^ ERROR field `name` of struct `CObj` is private\n }"}, {"sha": "727b96908291e589eeb493fe0cc1bd02ae88a307", "filename": "src/test/ui/issues/issue-25386.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -9,12 +9,6 @@ LL |     println!(\"{}\", check_ptr_exist!(item, name));\n    |\n    = note: this error originates in the macro `check_ptr_exist` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0616]: field `name` of struct `CObj` is private\n-  --> $DIR/issue-25386.rs:26:43\n-   |\n-LL |     println!(\"{}\", check_ptr_exist!(item, name));\n-   |                                           ^^^^ private field\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0616`."}, {"sha": "7ddb36c8e6f7f406b54299c98fba8cbf7cb1c92f", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -4,8 +4,8 @@ error[E0308]: method not compatible with trait\n LL |     fn next(&'a mut self) -> Option<Self::Item>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> Option<_>`\n-              found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> Option<_>`\n+   = note: expected signature `fn(&mut RepeatMut<'a, T>) -> Option<_>`\n+              found signature `fn(&'a mut RepeatMut<'a, T>) -> Option<_>`\n note: the anonymous lifetime as defined here...\n   --> $DIR/issue-37884.rs:6:5\n    |"}, {"sha": "9c61d5a0c25e1a6320bf29fe9fcf2d4dad34e982", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 i32, &'1 i32) -> &'1 i32`\n    |\n-   = note: expected `fn(&'1 i32, &'a i32) -> &'a i32`\n-              found `fn(&'1 i32, &'1 i32) -> &'1 i32`\n+   = note: expected signature `fn(&'1 i32, &'a i32) -> &'a i32`\n+              found signature `fn(&'1 i32, &'1 i32) -> &'1 i32`\n    = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n "}, {"sha": "154f2fcbee0ffea76fb8fa80cd2ab48fb977eca8", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn foo(x: u16);\n    |               ^^^\n-   = note: expected fn pointer `fn(u16)`\n-              found fn pointer `fn(i16)`\n+   = note: expected signature `fn(u16)`\n+              found signature `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/E0053.rs:11:12\n@@ -29,8 +29,8 @@ note: type in trait\n    |\n LL |     fn bar(&self);\n    |            ^^^^^\n-   = note: expected fn pointer `fn(&Bar)`\n-              found fn pointer `fn(&mut Bar)`\n+   = note: expected signature `fn(&Bar)`\n+              found signature `fn(&mut Bar)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9ddea16294450b38afc98f196a1c780caf3d8661", "filename": "src/test/ui/mismatched_types/issue-74918-missing-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -18,8 +18,8 @@ LL |     fn next(&mut self) -> Option<IteratorChunk<T, S>> {\n    |\n    = note: expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n    |\n-   = note: expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n-              found `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'1, T, S>>`\n+   = note: expected signature `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n+              found signature `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'1, T, S>>`\n    = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n "}, {"sha": "88416ba4bb6dc88a9c672999352019e84af6adaa", "filename": "src/test/ui/mismatched_types/issue-75361-mismatched-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType>>;\n LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType> + '_> {\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + '1)>`\n    |\n-   = note: expected `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + 'static)>`\n-              found `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + '1)>`\n+   = note: expected signature `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + 'static)>`\n+              found signature `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + '1)>`\n help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n   --> $DIR/issue-75361-mismatched-impl.rs:12:55\n    |"}, {"sha": "6e7bf5eb46d92a921b4d1bcc41f881f363697f4d", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn foo(x: u16);\n    |               ^^^\n-   = note: expected fn pointer `fn(u16)`\n-              found fn pointer `fn(i16)`\n+   = note: expected signature `fn(u16)`\n+              found signature `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:10:28\n@@ -29,8 +29,8 @@ note: type in trait\n    |\n LL |     fn bar(&mut self, bar: &mut Bar);\n    |                            ^^^^^^^^\n-   = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n-              found fn pointer `fn(&mut Bar, &Bar)`\n+   = note: expected signature `fn(&mut Bar, &mut Bar)`\n+              found signature `fn(&mut Bar, &Bar)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "02099fde21213bcfe1d1b3f9f24be4703d286dcf", "filename": "src/test/ui/parser/nested-bad-turbofish.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fparser%2Fnested-bad-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fparser%2Fnested-bad-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnested-bad-turbofish.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    foo<<S as T>::V>(); //~ ERROR\n+}"}, {"sha": "d82fa80e594adda49347d882eee0c60711a2faf7", "filename": "src/test/ui/parser/nested-bad-turbofish.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fparser%2Fnested-bad-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fparser%2Fnested-bad-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnested-bad-turbofish.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,11 @@\n+error: comparison operators cannot be chained\n+  --> $DIR/nested-bad-turbofish.rs:2:16\n+   |\n+LL |     foo<<S as T>::V>();\n+   |                ^   ^\n+   |\n+   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+   = help: or use `(...)` if you meant to specify fn arguments\n+\n+error: aborting due to previous error\n+"}, {"sha": "10db606956722b35413f9ca04e563d60dc10a35d", "filename": "src/test/ui/privacy/private-field-ty-err.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fprivacy%2Fprivate-field-ty-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fprivacy%2Fprivate-field-ty-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-field-ty-err.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,20 @@\n+fn main() {\n+    let x = foo::Foo::default();\n+    if x.len {\n+        //~^ ERROR field `len` of struct `Foo` is private\n+        println!(\"foo\");\n+    }\n+}\n+\n+mod foo {\n+    #[derive(Default)]\n+    pub struct Foo {\n+        len: String,\n+    }\n+\n+    impl Foo {\n+        pub fn len(&self) -> usize {\n+            42\n+        }\n+    }\n+}"}, {"sha": "e583a25fd8fdeb98dff906c7e6d76451cadecf36", "filename": "src/test/ui/privacy/private-field-ty-err.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fprivacy%2Fprivate-field-ty-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fprivacy%2Fprivate-field-ty-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-field-ty-err.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,14 @@\n+error[E0616]: field `len` of struct `Foo` is private\n+  --> $DIR/private-field-ty-err.rs:3:10\n+   |\n+LL |     if x.len {\n+   |          ^^^ private field\n+   |\n+help: a method `len` also exists, call it with parentheses\n+   |\n+LL |     if x.len() {\n+   |             ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0616`."}, {"sha": "c1c969b90e4dbf89fc087bbbcd992cc432105d34", "filename": "src/test/ui/suggestions/imm-ref-trait-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1,5 +1,5 @@\n fn test(t: &dyn Iterator<Item=&u64>) -> u64 {\n-     t.min().unwrap() //~ ERROR the `min` method cannot be invoked on a trait object\n+     t.min().unwrap() //~ ERROR the `min` method cannot be invoked on `&dyn Iterator<Item = &u64>`\n }\n \n fn main() {"}, {"sha": "f7f7902c17d16718812d4efda382f9f16b43605d", "filename": "src/test/ui/suggestions/imm-ref-trait-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -1,13 +1,13 @@\n-error: the `min` method cannot be invoked on a trait object\n+error: the `min` method cannot be invoked on `&dyn Iterator<Item = &u64>`\n   --> $DIR/imm-ref-trait-object.rs:2:8\n    |\n LL |      t.min().unwrap()\n    |        ^^^\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n-   = note: this has a `Sized` requirement\n+help: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n    |\n-   = note: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n+LL | fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "48efdb82c46ca6bd67688cc3e87047c18923d595", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-arg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,23 @@\n+#[derive(Clone)]\n+struct S;\n+\n+// without Clone\n+struct T;\n+\n+fn foo(_: S) {}\n+\n+fn test1() {\n+    let s = &S;\n+    foo(s); //~ ERROR mismatched types\n+}\n+\n+fn bar(_: T) {}\n+fn test2() {\n+    let t = &T;\n+    bar(t); //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    test1();\n+    test2();\n+}"}, {"sha": "1e66fe3af2414a01a39015fe05c49b4aad931c30", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-arg.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,35 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:11:9\n+   |\n+LL |     foo(s);\n+   |     --- ^ expected struct `S`, found `&S`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:7:4\n+   |\n+LL | fn foo(_: S) {}\n+   |    ^^^ ----\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:17:9\n+   |\n+LL |     bar(t);\n+   |     --- ^ expected struct `T`, found `&T`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:14:4\n+   |\n+LL | fn bar(_: T) {}\n+   |    ^^^ ----\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3b2e316b2961e7d3e2e437ebb8eb0a550c1d9286", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-bound.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,20 @@\n+#[derive(Clone)]\n+struct S;\n+\n+trait X {}\n+\n+impl X for S {}\n+\n+fn foo<T: X>(_: T) {}\n+fn bar<T: X>(s: &T) {\n+    foo(s); //~ ERROR the trait bound `&T: X` is not satisfied\n+}\n+\n+fn bar_with_clone<T: X + Clone>(s: &T) {\n+    foo(s); //~ ERROR the trait bound `&T: X` is not satisfied\n+}\n+\n+fn main() {\n+    let s = &S;\n+    bar(s);\n+}"}, {"sha": "8607917ede6bf10f6d1433ad3b94944e15857ad3", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-bound.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -0,0 +1,29 @@\n+error[E0277]: the trait bound `&T: X` is not satisfied\n+  --> $DIR/issue-106443-sugg-clone-for-bound.rs:10:9\n+   |\n+LL |     foo(s);\n+   |         ^ the trait `X` is not implemented for `&T`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | fn bar<T: X + Clone>(s: &T) {\n+   |             +++++++\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error[E0277]: the trait bound `&T: X` is not satisfied\n+  --> $DIR/issue-106443-sugg-clone-for-bound.rs:14:9\n+   |\n+LL |     foo(s);\n+   |         ^ the trait `X` is not implemented for `&T`\n+   |\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "62580755c814e992ae59533bc5452eb35067e932", "filename": "src/test/ui/traits/impl-method-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -6,8 +6,8 @@ impl Mumbo for usize {\n     // Cannot have a larger effect than the trait:\n     unsafe fn jumbo(&self, x: &usize) { *self + *x; }\n     //~^ ERROR method `jumbo` has an incompatible type for trait\n-    //~| expected fn pointer `fn\n-    //~| found fn pointer `unsafe fn\n+    //~| expected signature `fn\n+    //~| found signature `unsafe fn\n }\n \n fn main() {}"}, {"sha": "252b5aff96a016e770b1dd08619a9bec7c17c521", "filename": "src/test/ui/traits/impl-method-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -9,8 +9,8 @@ note: type in trait\n    |\n LL |     fn jumbo(&self, x: &usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected fn pointer `fn(&usize, &usize) -> usize`\n-              found fn pointer `unsafe fn(&usize, &usize)`\n+   = note: expected signature `fn(&usize, &usize) -> usize`\n+              found signature `unsafe fn(&usize, &usize)`\n \n error: aborting due to previous error\n "}, {"sha": "6d985bdeaf8599018e2a30f97e4ce245cafc3403", "filename": "src/test/ui/traits/issue-35869.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn foo(_: fn(u8) -> ());\n    |               ^^^^^^^^^^^^\n-   = note: expected fn pointer `fn(fn(u8))`\n-              found fn pointer `fn(fn(u16))`\n+   = note: expected signature `fn(fn(u8))`\n+              found signature `fn(fn(u16))`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:13:15\n@@ -29,8 +29,8 @@ note: type in trait\n    |\n LL |     fn bar(_: Option<u8>);\n    |               ^^^^^^^^^^\n-   = note: expected fn pointer `fn(Option<u8>)`\n-              found fn pointer `fn(Option<u16>)`\n+   = note: expected signature `fn(Option<u8>)`\n+              found signature `fn(Option<u16>)`\n \n error[E0053]: method `baz` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:15:15\n@@ -46,8 +46,8 @@ note: type in trait\n    |\n LL |     fn baz(_: (u8, u16));\n    |               ^^^^^^^^^\n-   = note: expected fn pointer `fn((u8, _))`\n-              found fn pointer `fn((u16, _))`\n+   = note: expected signature `fn((u8, _))`\n+              found signature `fn((u16, _))`\n \n error[E0053]: method `qux` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:17:17\n@@ -63,8 +63,8 @@ note: type in trait\n    |\n LL |     fn qux() -> u8;\n    |                 ^^\n-   = note: expected fn pointer `fn() -> u8`\n-              found fn pointer `fn() -> u16`\n+   = note: expected signature `fn() -> u8`\n+              found signature `fn() -> u16`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f8119ed415d036ae57f695d027594433cc0b1d91", "filename": "src/test/ui/traits/matching-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -4,8 +4,8 @@ error[E0308]: method not compatible with trait\n LL |     fn foo(x: Foo<'b,'a>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(Foo<'a, 'b>)`\n-              found fn pointer `fn(Foo<'b, 'a>)`\n+   = note: expected signature `fn(Foo<'a, 'b>)`\n+              found signature `fn(Foo<'b, 'a>)`\n note: the lifetime `'b` as defined here...\n   --> $DIR/matching-lifetimes.rs:13:9\n    |\n@@ -23,8 +23,8 @@ error[E0308]: method not compatible with trait\n LL |     fn foo(x: Foo<'b,'a>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(Foo<'a, 'b>)`\n-              found fn pointer `fn(Foo<'b, 'a>)`\n+   = note: expected signature `fn(Foo<'a, 'b>)`\n+              found signature `fn(Foo<'b, 'a>)`\n note: the lifetime `'a` as defined here...\n   --> $DIR/matching-lifetimes.rs:13:6\n    |"}, {"sha": "b128b6518ce4b75d453a6462f53c48c02bb7addc", "filename": "src/test/ui/traits/param-without-lifetime-constraint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |     fn get_relation(&self) -> To;\n LL |     fn get_relation(&self) -> &ProofReader {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Article) -> &'1 ProofReader`\n    |\n-   = note: expected `fn(&'1 Article) -> &'2 ProofReader`\n-              found `fn(&'1 Article) -> &'1 ProofReader`\n+   = note: expected signature `fn(&'1 Article) -> &'2 ProofReader`\n+              found signature `fn(&'1 Article) -> &'1 ProofReader`\n help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n   --> $DIR/param-without-lifetime-constraint.rs:10:31\n    |"}, {"sha": "05a49820a822df0e880f3e5d9a1b2ca3e28471f1", "filename": "src/test/ui/traits/self-without-lifetime-constraint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<&str, &&str> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(ValueRef<'1>) -> Result<(&'1 str, &'1 &'1 str), FromSqlError>`\n    |\n-   = note: expected `fn(ValueRef<'1>) -> Result<(&'2 str, &'1 &'2 str), FromSqlError>`\n-              found `fn(ValueRef<'1>) -> Result<(&'1 str, &'1 &'1 str), FromSqlError>`\n+   = note: expected signature `fn(ValueRef<'1>) -> Result<(&'2 str, &'1 &'2 str), FromSqlError>`\n+              found signature `fn(ValueRef<'1>) -> Result<(&'1 str, &'1 &'1 str), FromSqlError>`\n help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n   --> $DIR/self-without-lifetime-constraint.rs:41:60\n    |"}, {"sha": "1fc84ca02560d9184f25916eeb7d7aa0759b17ca", "filename": "src/test/ui/unsafe/unsafe-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ trait Foo {\n impl Foo for u32 {\n     fn len(&self) -> u32 { *self }\n     //~^ ERROR method `len` has an incompatible type for trait\n-    //~| expected fn pointer `unsafe fn(&u32) -> _`\n-    //~| found fn pointer `fn(&u32) -> _`\n+    //~| expected signature `unsafe fn(&u32) -> _`\n+    //~| found signature `fn(&u32) -> _`\n }\n \n fn main() { }"}, {"sha": "18ba79404b77e894cb4372b894bed4d7af261b62", "filename": "src/test/ui/unsafe/unsafe-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -9,8 +9,8 @@ note: type in trait\n    |\n LL |     unsafe fn len(&self) -> u32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected fn pointer `unsafe fn(&u32) -> _`\n-              found fn pointer `fn(&u32) -> _`\n+   = note: expected signature `unsafe fn(&u32) -> _`\n+              found signature `fn(&u32) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "504a6032b01f9145c06fba675a50f1b79c21592d", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -7,8 +7,8 @@ LL |     fn mul(self, s: &f64) -> Vec1 {\n    |                     expected `f64`, found `&f64`\n    |                     help: change the parameter type to match the trait: `f64`\n    |\n-   = note: expected fn pointer `fn(Vec1, f64) -> Vec1`\n-              found fn pointer `fn(Vec1, &f64) -> Vec1`\n+   = note: expected signature `fn(Vec1, f64) -> Vec1`\n+              found signature `fn(Vec1, &f64) -> Vec1`\n \n error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:33:21\n@@ -19,8 +19,8 @@ LL |     fn mul(self, s: f64) -> Vec2 {\n    |                     expected struct `Vec2`, found `f64`\n    |                     help: change the parameter type to match the trait: `Vec2`\n    |\n-   = note: expected fn pointer `fn(Vec2, Vec2) -> f64`\n-              found fn pointer `fn(Vec2, f64) -> Vec2`\n+   = note: expected signature `fn(Vec2, Vec2) -> f64`\n+              found signature `fn(Vec2, f64) -> Vec2`\n \n error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:52:29\n@@ -31,8 +31,8 @@ LL |     fn mul(self, s: f64) -> f64 {\n    |                             expected `i32`, found `f64`\n    |                             help: change the output type to match the trait: `i32`\n    |\n-   = note: expected fn pointer `fn(Vec3, _) -> i32`\n-              found fn pointer `fn(Vec3, _) -> f64`\n+   = note: expected signature `fn(Vec3, _) -> i32`\n+              found signature `fn(Vec3, _) -> f64`\n \n error[E0308]: mismatched types\n   --> $DIR/wrong-mul-method-signature.rs:63:45"}, {"sha": "723a52c4c680a1ef0234926923fc5b5ec2d3ee7e", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e677c0645862d17a12c6d04b3019203c8e23fcc/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=2e677c0645862d17a12c6d04b3019203c8e23fcc", "patch": "@@ -25,6 +25,7 @@ use std::path::Path;\n /// displayed on the console with --example.\n const ERROR_CODE_COLS: usize = 80;\n const COLS: usize = 100;\n+const GOML_COLS: usize = 120;\n \n const LINES: usize = 3000;\n \n@@ -230,7 +231,8 @@ pub fn check(path: &Path, bad: &mut bool) {\n     walk(path, &mut skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\", \".ftl\"];\n+        let extensions =\n+            [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\", \".ftl\", \".goml\"];\n         if extensions.iter().all(|e| !filename.ends_with(e)) || filename.starts_with(\".#\") {\n             return;\n         }\n@@ -255,8 +257,15 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n         let extension = file.extension().unwrap().to_string_lossy();\n         let is_error_code = extension == \"md\" && is_in(file, \"src\", \"error_codes\");\n+        let is_goml_code = extension == \"goml\";\n \n-        let max_columns = if is_error_code { ERROR_CODE_COLS } else { COLS };\n+        let max_columns = if is_error_code {\n+            ERROR_CODE_COLS\n+        } else if is_goml_code {\n+            GOML_COLS\n+        } else {\n+            COLS\n+        };\n \n         let can_contain = contents.contains(\"// ignore-tidy-\")\n             || contents.contains(\"# ignore-tidy-\")"}]}