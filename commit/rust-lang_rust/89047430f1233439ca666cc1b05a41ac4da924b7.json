{"sha": "89047430f1233439ca666cc1b05a41ac4da924b7", "node_id": "C_kwDOAAsO6NoAKDg5MDQ3NDMwZjEyMzM0MzljYTY2NmNjMWIwNWE0MWFjNGRhOTI0Yjc", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-30T15:59:22Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-12-02T20:31:45Z"}, "message": "Define values and err as non mutable", "tree": {"sha": "c7f7c064733684439b01dd90581e213330a26dde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f7c064733684439b01dd90581e213330a26dde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89047430f1233439ca666cc1b05a41ac4da924b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmOKYLEACgkQgTGiTgx5\n76/D3w/9HLfcLCSL5woAhZTllSKzaraNnXRWAAitUgPBYSjxI1MS241wBwVayR43\nXJ+QHDEUDBb9l8LsoFaG4R72TVoDlgFiiZQwdTB9OVdHCETseeCNcMVdgK+S/bpC\nRDEuiEiWuOOfdH0FYxeF0AMvpZvKoqMon+ISNjciglr0WiEDT2XWqvQ3kJjeYBEc\n9SiucqRypdUXBlxFYoCKDQfe+zk4ajIoZ5rXJelAK03e+/YLv10bAMdF2v8Q7E58\nEdALDuPGaoaaav+By3n7GMRwnEyC5VIu2mzw0mXrH50dllmJJcpLXraEVct+qwk8\nXxg3xXQNiDo0239wVZf4RvitMd+TLPcdtP2/UnelnOpu3yXQgiKEBaETc1jDqDDE\nodYLFvWmv3Mi1oSu8iXC8d4Mq0tjoLF8u8gThTyCWUvXxVrlEX9IAL6sf3Mg77hq\nx+0Rastxw+fCiOH2T1ylozQbs17602+5bVIglielhnlfdcxTnO7ladQTpCoCyEI+\n6uJ/28tEsfoI/eSQ96gwM4JcE9UXv+eh5YXU+xvVuTVkB0vToQuNxSU9Sd2iqlAr\nIdo3lUrhksvOucCaC0LwLPzWa519plBh5YedcqlfO4oxsGKradOkDIf0TWMPGcmj\nlbbKeP3B9A/Okhi9UOjohZCYvAwE+NhaBZpBbWiK53gMlqueYsU=\n=JQOV\n-----END PGP SIGNATURE-----", "payload": "tree c7f7c064733684439b01dd90581e213330a26dde\nparent 4dacf4f469de4fba4ac086f87c9263ff79a3bd13\nauthor Santiago Pastorino <spastorino@gmail.com> 1669823962 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1670013105 -0300\n\nDefine values and err as non mutable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89047430f1233439ca666cc1b05a41ac4da924b7", "html_url": "https://github.com/rust-lang/rust/commit/89047430f1233439ca666cc1b05a41ac4da924b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89047430f1233439ca666cc1b05a41ac4da924b7/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dacf4f469de4fba4ac086f87c9263ff79a3bd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dacf4f469de4fba4ac086f87c9263ff79a3bd13", "html_url": "https://github.com/rust-lang/rust/commit/4dacf4f469de4fba4ac086f87c9263ff79a3bd13"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "84e951e80230b004e5159e25d5a7bd600deef9a3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89047430f1233439ca666cc1b05a41ac4da924b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89047430f1233439ca666cc1b05a41ac4da924b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=89047430f1233439ca666cc1b05a41ac4da924b7", "patch": "@@ -1576,18 +1576,15 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             return;\n         }\n \n-        let mut values = None;\n-\n         self.probe(|_| {\n             let ocx = ObligationCtxt::new_in_snapshot(self);\n-            let mut err = error.err;\n \n             // try to find the mismatched types to report the error with.\n             //\n             // this can fail if the problem was higher-ranked, in which\n             // cause I have no idea for a good error message.\n             let bound_predicate = predicate.kind();\n-            if let ty::PredicateKind::Clause(ty::Clause::Projection(data)) =\n+            let (values, err) = if let ty::PredicateKind::Clause(ty::Clause::Projection(data)) =\n                 bound_predicate.skip_binder()\n             {\n                 let data = self.replace_bound_vars_with_fresh_vars(\n@@ -1628,10 +1625,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     normalized_ty,\n                     expected_ty,\n                 ) {\n-                    values = Some((data, is_normalized_ty_expected, normalized_ty, expected_ty));\n-                    err = new_err;\n+                    (Some((data, is_normalized_ty_expected, normalized_ty, expected_ty)), new_err)\n+                } else {\n+                    (None, error.err)\n                 }\n-            }\n+            } else {\n+                (None, error.err)\n+            };\n \n             let msg = values\n                 .and_then(|(predicate, _, normalized_ty, expected_ty)| {"}]}