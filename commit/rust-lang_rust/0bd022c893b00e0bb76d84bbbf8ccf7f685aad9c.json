{"sha": "0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZDAyMmM4OTNiMDBlMGJiNzZkODRiYmJmOGNjZjdmNjg1YWFkOWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-10T20:18:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-08T08:10:50Z"}, "message": "libsyntax: add COMMAND_LINE_SP and use it for spans generated from the command line", "tree": {"sha": "2661376204e573d7c1e6251f30c70d2a33edfe6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2661376204e573d7c1e6251f30c70d2a33edfe6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c", "html_url": "https://github.com/rust-lang/rust/commit/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3", "html_url": "https://github.com/rust-lang/rust/commit/c41cafb10c3e1cd5063bcacd663d0fc17fddc8c3"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "24befbd44a1065fbbf1e217e2b77fc823d3a185e", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c", "patch": "@@ -26,7 +26,7 @@ use syntax::ast;\n use syntax::abi;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::{DUMMY_SP, Span, mk_sp};\n+use syntax::codemap::{COMMAND_LINE_SP, Span, mk_sp};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n@@ -456,7 +456,7 @@ impl<'a> CrateReader<'a> {\n                      ident: s.to_string(),\n                      id: ast::DUMMY_NODE_ID,\n                      should_link: true,\n-                 }, DUMMY_SP)\n+                 }, COMMAND_LINE_SP)\n             }\n         };\n         let target_triple = &self.sess.opts.target_triple[];"}, {"sha": "9a422e17bb4dee49fa7c36e5aed96c5239fcc05e", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c", "patch": "@@ -105,6 +105,11 @@ pub struct Span {\n \n pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n \n+// Generic span to be used for code originating from the command line\n+pub const COMMAND_LINE_SP: Span = Span { lo: BytePos(0),\n+                                         hi: BytePos(0),\n+                                         expn_id: COMMAND_LINE_EXPN };\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub struct Spanned<T> {\n     pub node: T,\n@@ -235,6 +240,8 @@ pub struct ExpnInfo {\n pub struct ExpnId(u32);\n \n pub const NO_EXPANSION: ExpnId = ExpnId(-1);\n+// For code appearing from the command line\n+pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(-2);\n \n impl ExpnId {\n     pub fn from_llvm_cookie(cookie: c_uint) -> ExpnId {"}, {"sha": "64fdb61f2ecee51baf225da6131b91da658ef479", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=0bd022c893b00e0bb76d84bbbf8ccf7f685aad9c", "patch": "@@ -13,7 +13,7 @@ pub use self::RenderSpan::*;\n pub use self::ColorConfig::*;\n use self::Destination::*;\n \n-use codemap::{Pos, Span};\n+use codemap::{COMMAND_LINE_SP, Pos, Span};\n use codemap;\n use diagnostics;\n \n@@ -368,6 +368,9 @@ impl Emitter for EmitterWriter {\n             cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str, code: Option<&str>, lvl: Level) {\n         let error = match cmsp {\n+            Some((cm, COMMAND_LINE_SP)) => emit(self, cm,\n+                                                FileLine(COMMAND_LINE_SP),\n+                                                msg, code, lvl, false),\n             Some((cm, sp)) => emit(self, cm, FullSpan(sp), msg, code, lvl, false),\n             None => print_diagnostic(self, \"\", lvl, msg, code),\n         };\n@@ -390,8 +393,11 @@ impl Emitter for EmitterWriter {\n fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, rsp: RenderSpan,\n         msg: &str, code: Option<&str>, lvl: Level, custom: bool) -> io::IoResult<()> {\n     let sp = rsp.span();\n-    let ss = cm.span_to_string(sp);\n-    let lines = cm.span_to_lines(sp);\n+    let ss = if sp == COMMAND_LINE_SP {\n+        \"<command line option>\".to_string()\n+    } else {\n+        cm.span_to_string(sp)\n+    };\n     if custom {\n         // we want to tell compiletest/runtest to look at the last line of the\n         // span (since `custom_highlight_lines` displays an arrow to the end of\n@@ -400,15 +406,17 @@ fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, rsp: RenderSpan,\n         let ses = cm.span_to_string(span_end);\n         try!(print_diagnostic(dst, &ses[], lvl, msg, code));\n         if rsp.is_full_span() {\n-            try!(custom_highlight_lines(dst, cm, sp, lvl, lines));\n+            try!(custom_highlight_lines(dst, cm, sp, lvl, cm.span_to_lines(sp)));\n         }\n     } else {\n         try!(print_diagnostic(dst, &ss[], lvl, msg, code));\n         if rsp.is_full_span() {\n-            try!(highlight_lines(dst, cm, sp, lvl, lines));\n+            try!(highlight_lines(dst, cm, sp, lvl, cm.span_to_lines(sp)));\n         }\n     }\n-    try!(print_macro_backtrace(dst, cm, sp));\n+    if sp != COMMAND_LINE_SP {\n+        try!(print_macro_backtrace(dst, cm, sp));\n+    }\n     match code {\n         Some(code) =>\n             match dst.registry.as_ref().and_then(|registry| registry.find_description(code)) {"}]}