{"sha": "cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNzJmMmUyNjkzNTdlYTRkYTRkMGNmNTUwMmFmMzVmNGY5ZGFiOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-06T17:15:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-06T17:15:14Z"}, "message": "Auto merge of #42816 - alexcrichton:probestack, r=nikomatsakis\n\nrustc: Implement stack probes for x86\n\nThis commit implements stack probes on x86/x86_64 using the freshly landed\nsupport upstream in LLVM. The purpose of stack probes here are to guarantee a\nsegfault on stack overflow rather than having a chance of running over the guard\npage already present on all threads by accident.\n\nAt this time there's no support for any other architecture because LLVM itself\ndoes not have support for other architectures.", "tree": {"sha": "e424f055b4be5c8e67a0358ebdebfabd546b4ffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e424f055b4be5c8e67a0358ebdebfabd546b4ffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "html_url": "https://github.com/rust-lang/rust/commit/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54fc9e4ea587ad3ebb3ccb5c409ccfa9e4b09b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/54fc9e4ea587ad3ebb3ccb5c409ccfa9e4b09b3d", "html_url": "https://github.com/rust-lang/rust/commit/54fc9e4ea587ad3ebb3ccb5c409ccfa9e4b09b3d"}, {"sha": "5dbd97de3d825c6898df62baca33ff1f57cb77eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dbd97de3d825c6898df62baca33ff1f57cb77eb", "html_url": "https://github.com/rust-lang/rust/commit/5dbd97de3d825c6898df62baca33ff1f57cb77eb"}], "stats": {"total": 173, "additions": 170, "deletions": 3}, "files": [{"sha": "e9b258bc0cde0f7ed4e36ca96a25d7575e1e58b0", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -1 +1 @@\n-Subproject commit 238647af806470dc73e585c03682083931d29cd5\n+Subproject commit e9b258bc0cde0f7ed4e36ca96a25d7575e1e58b0"}, {"sha": "0e4e6900024b015f6050f2d68ec563926f6b7893", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -26,6 +26,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n+            stack_probes: true,\n             .. base\n         }\n     })"}, {"sha": "8c931f18411ca3e547a1a1e1a6cbd31c40c2ffdd", "filename": "src/librustc_back/target/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"i686-apple-darwin\".to_string(),"}, {"sha": "565fbe37bf89e64f1dd4f209922cb1ebf556c195", "filename": "src/librustc_back/target/i686_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> TargetResult {\n     // http://developer.android.com/ndk/guides/abis.html#x86\n     base.cpu = \"pentiumpro\".to_string();\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".to_string();\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"i686-linux-android\".to_string(),"}, {"sha": "9eda49a3709a57213da54e298653f9a46a9378fa", "filename": "src/librustc_back/target/i686_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-dragonfly\".to_string(),"}, {"sha": "041f3070c95bbee37df35f3405cfc266225a4770", "filename": "src/librustc_back/target/i686_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-freebsd\".to_string(),"}, {"sha": "f21c2f8c77ab0bf8272a252fddf1c6a01fdad18a", "filename": "src/librustc_back/target/i686_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-haiku\".to_string(),"}, {"sha": "f7b916816b31344a87147ec232065ad25590a50d", "filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),"}, {"sha": "00567d70fd6ce466990eb424f4d2f2e6e926f970", "filename": "src/librustc_back/target/i686_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,-melf_i386\".to_string());\n+    base.stack_probes = true;\n \n     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind\n     // implementation, apparently relies on frame pointers existing... somehow."}, {"sha": "7a9de529566b5caa064669a7a11f133ce1c31f28", "filename": "src/librustc_back/target/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-netbsdelf\".to_string(),"}, {"sha": "b19bdbe049bcdb4beedb0af6d1c2e1ea5efc38aa", "filename": "src/librustc_back/target/i686_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_openbsd.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"i686-unknown-openbsd\".to_string(),"}, {"sha": "2cc10533216d11fdbfc90d5d2fcad7558adfe15a", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -409,6 +409,9 @@ pub struct TargetOptions {\n \n     /// Whether or not the CRT is statically linked by default.\n     pub crt_static_default: bool,\n+\n+    /// Whether or not stack probes (__rust_probestack) are enabled\n+    pub stack_probes: bool,\n }\n \n impl Default for TargetOptions {\n@@ -466,6 +469,7 @@ impl Default for TargetOptions {\n             panic_strategy: PanicStrategy::Unwind,\n             abi_blacklist: vec![],\n             crt_static_default: false,\n+            stack_probes: false,\n         }\n     }\n }\n@@ -688,6 +692,7 @@ impl Target {\n         key!(min_atomic_width, Option<u64>);\n         try!(key!(panic_strategy, PanicStrategy));\n         key!(crt_static_default, bool);\n+        key!(stack_probes, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -874,6 +879,7 @@ impl ToJson for Target {\n         target_option_val!(max_atomic_width);\n         target_option_val!(panic_strategy);\n         target_option_val!(crt_static_default);\n+        target_option_val!(stack_probes);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "8ac76679008e9f91fc62326f5c93eaf3a32966ca", "filename": "src/librustc_back/target/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-apple-darwin\".to_string(),"}, {"sha": "61a71da2162a06c964736ae8633435a28074357d", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -26,6 +26,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n+            stack_probes: true,\n             .. base\n         }\n     })"}, {"sha": "158e2b13604ec37d669f4a075cd8747dd6140700", "filename": "src/librustc_back/target/x86_64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_linux_android.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -18,6 +18,7 @@ pub fn target() -> TargetResult {\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-linux-android\".to_string(),"}, {"sha": "c7e5edde63db3096a94e75673fc7ed2930fc13c2", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> TargetResult {\n     base.disable_redzone = true;\n     base.no_default_libraries = false;\n     base.exe_allocation_crate = None;\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-rumprun-netbsd\".to_string(),"}, {"sha": "38a38ed68bc921b8b29cae6469ce6bb176c1298a", "filename": "src/librustc_back/target/x86_64_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-pc-solaris\".to_string(),"}, {"sha": "cf4b019dce2dffae76d2dd047c2ff7ea1169a84a", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-bitrig\".to_string(),"}, {"sha": "8885d89c6f7a84ae5dc65209c75efc5a5c3b8484", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),"}, {"sha": "95870f2be5fc0655c90d0b3e2b8ac506e9fd7810", "filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),"}, {"sha": "1aebb885595e295c4e71b8a728c9c1fd0b73e209", "filename": "src/librustc_back/target/x86_64_unknown_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-fuchsia\".to_string(),"}, {"sha": "3794a516ec4a8d5abd0e7cef2d63f8b7862868d3", "filename": "src/librustc_back/target/x86_64_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-haiku\".to_string(),"}, {"sha": "d2135f8a0bdce4575f73f8014cb62d66eeab172c", "filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),"}, {"sha": "7d542b4d3cb5a52571e1967c87a6e6023bf42c59", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),"}, {"sha": "5d49fcbd64ab105d04cfd703b0757ef5e7a2bab2", "filename": "src/librustc_back/target/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),"}, {"sha": "aa289fb577501b2201084ea612c1c5cb3c07cb58", "filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),"}, {"sha": "8d2a7afeeacf08b31079f6cd56e4491af96b5e48", "filename": "src/librustc_back/target/x86_64_unknown_redox.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_redox.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.stack_probes = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-redox\".to_string(),"}, {"sha": "cbad43066e4ebe3baeb50af0ea3537633b161976", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -11,13 +11,14 @@\n \n use std::ffi::{CStr, CString};\n \n+use rustc::session::config::Sanitizer;\n+\n use llvm::{self, Attribute, ValueRef};\n use llvm::AttributePlace::Function;\n pub use syntax::attr::{self, InlineAttr};\n use syntax::ast;\n use context::CrateContext;\n \n-\n /// Mark LLVM function to use provided inline heuristic.\n #[inline]\n pub fn inline(val: ValueRef, inline: InlineAttr) {\n@@ -69,13 +70,36 @@ pub fn set_frame_pointer_elimination(ccx: &CrateContext, llfn: ValueRef) {\n     }\n }\n \n+pub fn set_probestack(ccx: &CrateContext, llfn: ValueRef) {\n+    // Only use stack probes if the target specification indicates that we\n+    // should be using stack probes\n+    if !ccx.sess().target.target.options.stack_probes {\n+        return\n+    }\n+\n+    // Currently stack probes seem somewhat incompatible with the address\n+    // sanitizer. With asan we're already protected from stack overflow anyway\n+    // so we don't really need stack probes regardless.\n+    match ccx.sess().opts.debugging_opts.sanitizer {\n+        Some(Sanitizer::Address) => return,\n+        _ => {}\n+    }\n+\n+    // Flag our internal `__rust_probestack` function as the stack probe symbol.\n+    // This is defined in the `compiler-builtins` crate for each architecture.\n+    llvm::AddFunctionAttrStringValue(\n+        llfn, llvm::AttributePlace::Function,\n+        cstr(\"probe-stack\\0\"), cstr(\"__rust_probestack\\0\"));\n+}\n+\n /// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n /// attributes.\n pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) {\n     use syntax::attr::*;\n     inline(llfn, find_inline_attr(Some(ccx.sess().diagnostic()), attrs));\n \n     set_frame_pointer_elimination(ccx, llfn);\n+    set_probestack(ccx, llfn);\n     let mut target_features = vec![];\n     for attr in attrs {\n         if attr.check_name(\"target_feature\") {"}, {"sha": "f0a23af57a17658e75d6dc50568397590a0e6664", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -1 +1 @@\n-Subproject commit 8e1b4fedfa4542e65f82fe124bd6433f3bd0aec5\n+Subproject commit f0a23af57a17658e75d6dc50568397590a0e6664"}, {"sha": "b7c794f4475a8837dfbbbc1b138a12ad5710a7ff", "filename": "src/test/codegen/stack-probes.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-arm\n+// ignore-wasm\n+// ignore-emscripten\n+// ignore-windows\n+// no-system-llvm\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+#[no_mangle]\n+pub fn foo() {\n+// CHECK: @foo() unnamed_addr #0\n+// CHECK: attributes #0 = { {{.*}}\"probe-stack\"=\"__rust_probestack\"{{.*}} }\n+}"}, {"sha": "045ba408137c120aafddeeb758b6070fad70ac19", "filename": "src/test/run-pass/stack-probes-lto.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-arm\n+// ignore-wasm\n+// ignore-emscripten\n+// ignore-musl FIXME #31506\n+// ignore-pretty\n+// no-system-llvm\n+// compile-flags: -C lto\n+// no-prefer-dynamic\n+\n+include!(\"stack-probes.rs\");"}, {"sha": "36aacea937a090ebe8b760339b626364c8971362", "filename": "src/test/run-pass/stack-probes.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72f2e269357ea4da4d0cf5502af35f4f9dab9e/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes.rs?ref=cd72f2e269357ea4da4d0cf5502af35f4f9dab9e", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-arm\n+// ignore-wasm\n+// ignore-emscripten\n+// ignore-musl FIXME #31506\n+// no-system-llvm\n+\n+use std::mem;\n+use std::process::Command;\n+use std::thread;\n+use std::env;\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern {\n+    #[link_name = \"rust_dbg_extern_identity_u64\"]\n+    fn black_box(u: u64);\n+}\n+\n+fn main() {\n+    let args = env::args().skip(1).collect::<Vec<_>>();\n+    if args.len() > 0 {\n+        match &args[0][..] {\n+            \"main-thread\" => recurse(&[]),\n+            \"child-thread\" => thread::spawn(|| recurse(&[])).join().unwrap(),\n+            _ => panic!(),\n+        }\n+        return\n+    }\n+\n+    let me = env::current_exe().unwrap();\n+\n+    // The linux kernel has some different behavior for the main thread because\n+    // the main thread's stack can typically grow. We can't always guarantee\n+    // that we report stack overflow on the main thread, see #43052 for some\n+    // details\n+    if cfg!(not(target_os = \"linux\")) {\n+        assert_overflow(Command::new(&me).arg(\"main-thread\"));\n+    }\n+    assert_overflow(Command::new(&me).arg(\"child-thread\"));\n+}\n+\n+#[allow(unconditional_recursion)]\n+fn recurse(array: &[u64]) {\n+    unsafe { black_box(array.as_ptr() as u64); }\n+    let local: [_; 1024] = unsafe { mem::uninitialized() };\n+    recurse(&local);\n+}\n+\n+fn assert_overflow(cmd: &mut Command) {\n+    let output = cmd.output().unwrap();\n+    assert!(!output.status.success());\n+    let stdout = String::from_utf8_lossy(&output.stdout);\n+    let stderr = String::from_utf8_lossy(&output.stderr);\n+    println!(\"status: {}\", output.status);\n+    println!(\"stdout: {}\", stdout);\n+    println!(\"stderr: {}\", stderr);\n+    assert!(stdout.is_empty());\n+    assert!(stderr.contains(\"has overflowed its stack\\n\"));\n+}"}]}