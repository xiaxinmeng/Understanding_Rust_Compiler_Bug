{"sha": "f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MGYwNGJjYzE0NWFmZDFhM2E5NmQzYjVhOGRkNWM1NTc1Y2YyMDc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:46Z"}, "message": "Rollup merge of #55932 - Turbo87:to_digit, r=alexcrichton\n\ncore/char: Speed up `to_digit()` for `radix <= 10`\n\nI noticed that `char::to_digit()` seemed to do a bit of extra work for handling `[a-zA-Z]` characters. Since `to_digit(10)` seems to be the most common case (at least in the `rust` codebase) I thought it might be valuable to create a fast path for that case, and according to the benchmarks that I added in one of the commits it seems to pay off. I also created another fast path for the `radix < 10` case, which also seems to have a positive effect.\n\nIt is very well possible that I'm measuring something entirely unrelated though, so please verify these numbers and let me know if I missed something!\n\n### Before\n\n```\n# Run 1\ntest char::methods::bench_to_digit_radix_10      ... bench:      16,265 ns/iter (+/- 1,774)\ntest char::methods::bench_to_digit_radix_16      ... bench:      13,938 ns/iter (+/- 2,479)\ntest char::methods::bench_to_digit_radix_2       ... bench:      13,090 ns/iter (+/- 524)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,236 ns/iter (+/- 1,949)\n\n# Run 2\ntest char::methods::bench_to_digit_radix_10      ... bench:      16,176 ns/iter (+/- 1,589)\ntest char::methods::bench_to_digit_radix_16      ... bench:      13,896 ns/iter (+/- 3,140)\ntest char::methods::bench_to_digit_radix_2       ... bench:      13,158 ns/iter (+/- 1,112)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,206 ns/iter (+/- 1,312)\n\n# Run 3\ntest char::methods::bench_to_digit_radix_10      ... bench:      16,221 ns/iter (+/- 2,423)\ntest char::methods::bench_to_digit_radix_16      ... bench:      14,361 ns/iter (+/- 3,926)\ntest char::methods::bench_to_digit_radix_2       ... bench:      13,097 ns/iter (+/- 671)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,388 ns/iter (+/- 1,068)\n```\n\n### After\n\n```\n# Run 1\ntest char::methods::bench_to_digit_radix_10      ... bench:      11,521 ns/iter (+/- 552)\ntest char::methods::bench_to_digit_radix_16      ... bench:      12,926 ns/iter (+/- 684)\ntest char::methods::bench_to_digit_radix_2       ... bench:      11,266 ns/iter (+/- 1,085)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,213 ns/iter (+/- 614)\n\n# Run 2\ntest char::methods::bench_to_digit_radix_10      ... bench:      11,424 ns/iter (+/- 1,042)\ntest char::methods::bench_to_digit_radix_16      ... bench:      12,854 ns/iter (+/- 1,193)\ntest char::methods::bench_to_digit_radix_2       ... bench:      11,193 ns/iter (+/- 716)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,249 ns/iter (+/- 3,514)\n\n# Run 3\ntest char::methods::bench_to_digit_radix_10      ... bench:      11,469 ns/iter (+/- 685)\ntest char::methods::bench_to_digit_radix_16      ... bench:      12,852 ns/iter (+/- 568)\ntest char::methods::bench_to_digit_radix_2       ... bench:      11,275 ns/iter (+/- 1,356)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,188 ns/iter (+/- 1,501)\n```\n\nI ran the benchmark using:\n\n```sh\npython x.py bench src/libcore --stage 1 --keep-stage 0 --test-args \"bench_to_digit\"\n```", "tree": {"sha": "51a5d31e9a971144988903432cbd7a215da45af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51a5d31e9a971144988903432cbd7a215da45af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7US+CRBK7hj4Ov3rIwAAdHIIAEW4YqdMVUa3MC71z+rQF3wW\nti9rdkuBXtcV7wK1WcWYJY2ouNJ7ZFZkXpjjmg1NeR+4Gu/XoXbe5Ccrqy/RmjQi\nwrEPksCeyg/R6iT8h2HD64nqwOxp92+0DY9nscoWn9zDUP29ZQ8BFE2sk9jV7Q1R\nIOVd8qo9yJEWpIwjQy+AVYVDLHZwMAHvbZpDENJqSklEQPsBN1zSluvLaWGYMDdk\n2B+NPizXuT/xX/298ilUKqYLiyhKjrj9CNEAfSXi3OG4ipiRtyu8mlO0Dvx0ceDt\nhqR2HdsCbz6SuWpsB0lnJ3SfH68A1yWtsHQpx6doVGcDD5N4xXlEJ2IyYh42D2k=\n=CDhY\n-----END PGP SIGNATURE-----\n", "payload": "tree 51a5d31e9a971144988903432cbd7a215da45af6\nparent c915f921d7267ca701b438e322e78fe04f0e12cd\nparent 7843e2792dce0f20d23b3c1cca51652013bef0ea\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276286 +0100\ncommitter GitHub <noreply@github.com> 1542276286 +0100\n\nRollup merge of #55932 - Turbo87:to_digit, r=alexcrichton\n\ncore/char: Speed up `to_digit()` for `radix <= 10`\n\nI noticed that `char::to_digit()` seemed to do a bit of extra work for handling `[a-zA-Z]` characters. Since `to_digit(10)` seems to be the most common case (at least in the `rust` codebase) I thought it might be valuable to create a fast path for that case, and according to the benchmarks that I added in one of the commits it seems to pay off. I also created another fast path for the `radix < 10` case, which also seems to have a positive effect.\n\nIt is very well possible that I'm measuring something entirely unrelated though, so please verify these numbers and let me know if I missed something!\n\n### Before\n\n```\n# Run 1\ntest char::methods::bench_to_digit_radix_10      ... bench:      16,265 ns/iter (+/- 1,774)\ntest char::methods::bench_to_digit_radix_16      ... bench:      13,938 ns/iter (+/- 2,479)\ntest char::methods::bench_to_digit_radix_2       ... bench:      13,090 ns/iter (+/- 524)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,236 ns/iter (+/- 1,949)\n\n# Run 2\ntest char::methods::bench_to_digit_radix_10      ... bench:      16,176 ns/iter (+/- 1,589)\ntest char::methods::bench_to_digit_radix_16      ... bench:      13,896 ns/iter (+/- 3,140)\ntest char::methods::bench_to_digit_radix_2       ... bench:      13,158 ns/iter (+/- 1,112)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,206 ns/iter (+/- 1,312)\n\n# Run 3\ntest char::methods::bench_to_digit_radix_10      ... bench:      16,221 ns/iter (+/- 2,423)\ntest char::methods::bench_to_digit_radix_16      ... bench:      14,361 ns/iter (+/- 3,926)\ntest char::methods::bench_to_digit_radix_2       ... bench:      13,097 ns/iter (+/- 671)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,388 ns/iter (+/- 1,068)\n```\n\n### After\n\n```\n# Run 1\ntest char::methods::bench_to_digit_radix_10      ... bench:      11,521 ns/iter (+/- 552)\ntest char::methods::bench_to_digit_radix_16      ... bench:      12,926 ns/iter (+/- 684)\ntest char::methods::bench_to_digit_radix_2       ... bench:      11,266 ns/iter (+/- 1,085)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,213 ns/iter (+/- 614)\n\n# Run 2\ntest char::methods::bench_to_digit_radix_10      ... bench:      11,424 ns/iter (+/- 1,042)\ntest char::methods::bench_to_digit_radix_16      ... bench:      12,854 ns/iter (+/- 1,193)\ntest char::methods::bench_to_digit_radix_2       ... bench:      11,193 ns/iter (+/- 716)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,249 ns/iter (+/- 3,514)\n\n# Run 3\ntest char::methods::bench_to_digit_radix_10      ... bench:      11,469 ns/iter (+/- 685)\ntest char::methods::bench_to_digit_radix_16      ... bench:      12,852 ns/iter (+/- 568)\ntest char::methods::bench_to_digit_radix_2       ... bench:      11,275 ns/iter (+/- 1,356)\ntest char::methods::bench_to_digit_radix_36      ... bench:      14,188 ns/iter (+/- 1,501)\n```\n\nI ran the benchmark using:\n\n```sh\npython x.py bench src/libcore --stage 1 --keep-stage 0 --test-args \"bench_to_digit\"\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207", "html_url": "https://github.com/rust-lang/rust/commit/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c915f921d7267ca701b438e322e78fe04f0e12cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c915f921d7267ca701b438e322e78fe04f0e12cd", "html_url": "https://github.com/rust-lang/rust/commit/c915f921d7267ca701b438e322e78fe04f0e12cd"}, {"sha": "7843e2792dce0f20d23b3c1cca51652013bef0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/7843e2792dce0f20d23b3c1cca51652013bef0ea", "html_url": "https://github.com/rust-lang/rust/commit/7843e2792dce0f20d23b3c1cca51652013bef0ea"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "faf820d871cfa24c57dceeeb20618822cf2f8a13", "filename": "src/libcore/benches/char/methods.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/src%2Flibcore%2Fbenches%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/src%2Flibcore%2Fbenches%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fchar%2Fmethods.rs?ref=f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use test::Bencher;\n+\n+const CHARS: [char; 9] = ['0', 'x', '2', '5', 'A', 'f', '7', '8', '9'];\n+const RADIX: [u32; 5] = [2, 8, 10, 16, 32];\n+\n+#[bench]\n+fn bench_to_digit_radix_2(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(2)).min())\n+}\n+\n+#[bench]\n+fn bench_to_digit_radix_10(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(10)).min())\n+}\n+\n+#[bench]\n+fn bench_to_digit_radix_16(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(16)).min())\n+}\n+\n+#[bench]\n+fn bench_to_digit_radix_36(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(36)).min())\n+}\n+\n+#[bench]\n+fn bench_to_digit_radix_var(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle()\n+        .zip(RADIX.iter().cycle())\n+        .take(10_000)\n+        .map(|(c, radix)| c.to_digit(*radix)).min())\n+}"}, {"sha": "a656e82cb61e6531bf75cead3c669441f1767ea6", "filename": "src/libcore/benches/char/mod.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/src%2Flibcore%2Fbenches%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/src%2Flibcore%2Fbenches%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fchar%2Fmod.rs?ref=f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod methods;"}, {"sha": "d44f1577d56b0a03044e9de7f6085813bbaafe72", "filename": "src/libcore/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207", "patch": "@@ -15,6 +15,7 @@ extern crate core;\n extern crate test;\n \n mod any;\n+mod char;\n mod hash;\n mod iter;\n mod num;"}, {"sha": "d6fcff644acf60d3bba47645cce6ad764c8fd181", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=f40f04bcc145afd1a3a96d3b5a8dd5c5575cf207", "patch": "@@ -121,15 +121,24 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n-        if radix > 36 {\n-            panic!(\"to_digit: radix is too high (maximum 36)\");\n-        }\n-        let val = match self {\n-          '0' ..= '9' => self as u32 - '0' as u32,\n-          'a' ..= 'z' => self as u32 - 'a' as u32 + 10,\n-          'A' ..= 'Z' => self as u32 - 'A' as u32 + 10,\n-          _ => return None,\n+        assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n+\n+        // the code is split up here to improve execution speed for cases where\n+        // the `radix` is constant and 10 or smaller\n+        let val = if radix <= 10  {\n+            match self {\n+                '0' ..= '9' => self as u32 - '0' as u32,\n+                _ => return None,\n+            }\n+        } else {\n+            match self {\n+                '0'..='9' => self as u32 - '0' as u32,\n+                'a'..='z' => self as u32 - 'a' as u32 + 10,\n+                'A'..='Z' => self as u32 - 'A' as u32 + 10,\n+                _ => return None,\n+            }\n         };\n+\n         if val < radix { Some(val) }\n         else { None }\n     }"}]}