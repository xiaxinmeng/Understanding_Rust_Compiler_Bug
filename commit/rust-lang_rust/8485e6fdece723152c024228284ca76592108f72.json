{"sha": "8485e6fdece723152c024228284ca76592108f72", "node_id": "C_kwDOAAsO6NoAKDg0ODVlNmZkZWNlNzIzMTUyYzAyNDIyODI4NGNhNzY1OTIxMDhmNzI", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-10-14T14:57:56Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-10-14T14:57:56Z"}, "message": "Revert \"Stabilize `arbitrary_enum_discriminant`\"\n\nThis reverts commit 7a62f29f3171767090949778ce0f161e930706b9.", "tree": {"sha": "00c6722fdb3d86360d83ab0551450894f3590224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c6722fdb3d86360d83ab0551450894f3590224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8485e6fdece723152c024228284ca76592108f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8485e6fdece723152c024228284ca76592108f72", "html_url": "https://github.com/rust-lang/rust/commit/8485e6fdece723152c024228284ca76592108f72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8485e6fdece723152c024228284ca76592108f72/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34ac8747ca96d09cb08b8f5adddead826e77c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34ac8747ca96d09cb08b8f5adddead826e77c06", "html_url": "https://github.com/rust-lang/rust/commit/c34ac8747ca96d09cb08b8f5adddead826e77c06"}], "stats": {"total": 234, "additions": 221, "deletions": 13}, "files": [{"sha": "91b4597a9bb1f021357f9bfff3aada7bcee74ff0", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,11 +1,11 @@\n use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocTyConstraint, AssocTyConstraintKind, NodeId};\n-use rustc_ast::{PatKind, RangeEnd};\n+use rustc_ast::{PatKind, RangeEnd, VariantData};\n use rustc_errors::struct_span_err;\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue};\n-use rustc_session::parse::feature_err_issue;\n+use rustc_session::parse::{feature_err, feature_err_issue};\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n@@ -218,6 +218,46 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n+    fn maybe_report_invalid_custom_discriminants(&self, variants: &[ast::Variant]) {\n+        let has_fields = variants.iter().any(|variant| match variant.data {\n+            VariantData::Tuple(..) | VariantData::Struct(..) => true,\n+            VariantData::Unit(..) => false,\n+        });\n+\n+        let discriminant_spans = variants\n+            .iter()\n+            .filter(|variant| match variant.data {\n+                VariantData::Tuple(..) | VariantData::Struct(..) => false,\n+                VariantData::Unit(..) => true,\n+            })\n+            .filter_map(|variant| variant.disr_expr.as_ref().map(|c| c.value.span))\n+            .collect::<Vec<_>>();\n+\n+        if !discriminant_spans.is_empty() && has_fields {\n+            let mut err = feature_err(\n+                &self.sess.parse_sess,\n+                sym::arbitrary_enum_discriminant,\n+                discriminant_spans.clone(),\n+                \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n+            );\n+            for sp in discriminant_spans {\n+                err.span_label(sp, \"disallowed custom discriminant\");\n+            }\n+            for variant in variants.iter() {\n+                match &variant.data {\n+                    VariantData::Struct(..) => {\n+                        err.span_label(variant.span, \"struct variant defined here\");\n+                    }\n+                    VariantData::Tuple(..) => {\n+                        err.span_label(variant.span, \"tuple variant defined here\");\n+                    }\n+                    VariantData::Unit(..) => {}\n+                }\n+            }\n+            err.emit();\n+        }\n+    }\n+\n     fn check_gat(&self, generics: &ast::Generics, span: Span) {\n         if !generics.params.is_empty() {\n             gate_feature_post!(\n@@ -363,6 +403,26 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemKind::Enum(ast::EnumDef { ref variants, .. }, ..) => {\n+                for variant in variants {\n+                    match (&variant.data, &variant.disr_expr) {\n+                        (ast::VariantData::Unit(..), _) => {}\n+                        (_, Some(disr_expr)) => gate_feature_post!(\n+                            &self,\n+                            arbitrary_enum_discriminant,\n+                            disr_expr.value.span,\n+                            \"discriminants on non-unit variants are experimental\"\n+                        ),\n+                        _ => {}\n+                    }\n+                }\n+\n+                let has_feature = self.features.arbitrary_enum_discriminant;\n+                if !has_feature && !i.span.allows_unstable(sym::arbitrary_enum_discriminant) {\n+                    self.maybe_report_invalid_custom_discriminants(&variants);\n+                }\n+            }\n+\n             ast::ItemKind::Impl(box ast::ImplKind {\n                 polarity, defaultness, ref of_trait, ..\n             }) => {"}, {"sha": "7347e6654c5b3acd99a55085d01791edebdd22b7", "filename": "compiler/rustc_error_codes/src/error_codes/E0732.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -3,6 +3,8 @@ An `enum` with a discriminant must specify a `#[repr(inttype)]`.\n Erroneous code example:\n \n ```compile_fail,E0732\n+#![feature(arbitrary_enum_discriminant)]\n+\n enum Enum { // error!\n     Unit = 1,\n     Tuple() = 2,\n@@ -18,6 +20,8 @@ is a well-defined way to extract a variant's discriminant from a value;\n for instance:\n \n ```\n+#![feature(arbitrary_enum_discriminant)]\n+\n #[repr(u8)]\n enum Enum {\n     Unit = 3,"}, {"sha": "0d7a2afb6367d6b92d6dfd26d7ae3f01097342cb", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -293,8 +293,6 @@ declare_features! (\n     (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n     /// Allows accessing fields of unions inside `const` functions.\n     (accepted, const_fn_union, \"1.56.0\", Some(51909), None),\n-    /// Allows explicit discriminants on non-unit enum variants.\n-    (accepted, arbitrary_enum_discriminant, \"1.56.0\", Some(60553), None),\n     /// Allows macro attributes to observe output of `#[derive]`.\n     (accepted, macro_attributes_in_derive_output, \"1.57.0\", Some(81119), None),\n     /// Allows panicking during const eval (producing compile-time errors)."}, {"sha": "f7c0597909e8bfb805d31a8863329885c0b54f76", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -464,6 +464,9 @@ declare_features! (\n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n \n+    /// Allows explicit discriminants on non-unit enum variants.\n+    (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n+\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n "}, {"sha": "66316214e5e6644d58cfcae46557e4c6a0e432d0", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1374,7 +1374,7 @@ fn check_enum<'tcx>(\n         }\n     }\n \n-    if tcx.adt_def(def_id).repr.int.is_none() {\n+    if tcx.adt_def(def_id).repr.int.is_none() && tcx.features().arbitrary_enum_discriminant {\n         let is_unit = |var: &hir::Variant<'_>| matches!(var.data, hir::VariantData::Unit(..));\n \n         let has_disr = |var: &hir::Variant<'_>| var.disr_expr.is_some();"}, {"sha": "e0bb782270e22821f416ac44a45d91236e985ffd", "filename": "src/doc/unstable-book/src/language-features/arbitrary-enum-discriminant.md", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -0,0 +1,37 @@\n+# `arbitrary_enum_discriminant`\n+\n+The tracking issue for this feature is: [#60553]\n+\n+[#60553]: https://github.com/rust-lang/rust/issues/60553\n+\n+------------------------\n+\n+The `arbitrary_enum_discriminant` feature permits tuple-like and\n+struct-like enum variants with `#[repr(<int-type>)]` to have explicit discriminants.\n+\n+## Examples\n+\n+```rust\n+#![feature(arbitrary_enum_discriminant)]\n+\n+#[allow(dead_code)]\n+#[repr(u8)]\n+enum Enum {\n+    Unit = 3,\n+    Tuple(u16) = 2,\n+    Struct {\n+        a: u8,\n+        b: u16,\n+    } = 1,\n+}\n+\n+impl Enum {\n+    fn tag(&self) -> u8 {\n+        unsafe { *(self as *const Self as *const u8) }\n+    }\n+}\n+\n+assert_eq!(3, Enum::Unit.tag());\n+assert_eq!(2, Enum::Tuple(5).tag());\n+assert_eq!(1, Enum::Struct{a: 7, b: 11}.tag());\n+```"}, {"sha": "4da7b5ab24b29fce0decbe9110aab24c77fdf972", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,4 +1,5 @@\n #![crate_type=\"lib\"]\n+#![feature(arbitrary_enum_discriminant)]\n \n enum Enum {\n //~^ ERROR `#[repr(inttype)]` must be specified"}, {"sha": "2db5372da0c6edcb498b03472725b84e1698cb4b", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,5 +1,5 @@\n error[E0732]: `#[repr(inttype)]` must be specified\n-  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:3:1\n+  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:4:1\n    |\n LL | / enum Enum {\n LL | |"}, {"sha": "f2270602d87ebce98a3f9cbd0438dbf96b1967e2", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_raw_ptr_deref, test)]\n+#![feature(arbitrary_enum_discriminant, const_raw_ptr_deref, test)]\n \n extern crate test;\n "}, {"sha": "eb60aaf4b2d04156abc899b205a47ce2c8c18959", "filename": "src/test/ui/enum-discriminant/discriminant_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(stable_features)]\n-#![feature(core, core_intrinsics)]\n+#![feature(arbitrary_enum_discriminant, core, core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "3e90af4d36af3fddc8a6de00a048e8ff1eb9d4be", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type=\"lib\"]\n+\n+enum Enum {\n+  Unit = 1,\n+  //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n+  Tuple() = 2,\n+  //~^ ERROR discriminants on non-unit variants are experimental\n+  Struct{} = 3,\n+  //~^ ERROR discriminants on non-unit variants are experimental\n+}"}, {"sha": "b5f61e6e991d842efbe57f34b6f89a008ab2c3a3", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -0,0 +1,36 @@\n+error[E0658]: discriminants on non-unit variants are experimental\n+  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:6:13\n+   |\n+LL |   Tuple() = 2,\n+   |             ^\n+   |\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n+   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n+\n+error[E0658]: discriminants on non-unit variants are experimental\n+  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:8:14\n+   |\n+LL |   Struct{} = 3,\n+   |              ^\n+   |\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n+   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n+\n+error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n+  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:4:10\n+   |\n+LL |   Unit = 1,\n+   |          ^ disallowed custom discriminant\n+LL |\n+LL |   Tuple() = 2,\n+   |   ----------- tuple variant defined here\n+LL |\n+LL |   Struct{} = 3,\n+   |   ------------ struct variant defined here\n+   |\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n+   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f927dd189038abad765c4db97cea107e9a8e30ca", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,4 +1,4 @@\n-#![feature(core_intrinsics)]\n+#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "e62582fb5161aa44f9444cf73402765552ab8bc0", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,4 +1,4 @@\n-#![feature(core_intrinsics)]\n+#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "ae389e11466452035905fe992002533ba57d20b1", "filename": "src/test/ui/enum-discriminant/issue-70509-partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(repr128)]\n+#![feature(repr128, arbitrary_enum_discriminant)]\n //~^ WARN the feature `repr128` is incomplete\n \n #[derive(PartialEq, Debug)]"}, {"sha": "5bf6ea56ebc77867854cbb5ce4fe42ed91b8591e", "filename": "src/test/ui/enum-discriminant/issue-70509-partial_eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -1,7 +1,7 @@\n warning: the feature `repr128` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-70509-partial_eq.rs:2:12\n    |\n-LL | #![feature(repr128)]\n+LL | #![feature(repr128, arbitrary_enum_discriminant)]\n    |            ^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default"}, {"sha": "324bba15e4350523481f67a69a48bfbcebb93792", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -6,7 +6,7 @@\n \n // This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n \n-#![feature(never_type)]\n+#![feature(never_type, arbitrary_enum_discriminant)]\n #![allow(deprecated, invalid_value)]\n \n use std::{"}, {"sha": "7bf0e64f2c0a30eecf3963b7bee955d7059ce399", "filename": "src/test/ui/parser/issue-17383.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -0,0 +1,7 @@\n+enum X {\n+    A = 3,\n+    //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n+    B(usize)\n+}\n+\n+fn main() {}"}, {"sha": "265d6e14866149a674cc7a6cb9818b7628463709", "filename": "src/test/ui/parser/issue-17383.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -0,0 +1,15 @@\n+error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n+  --> $DIR/issue-17383.rs:2:9\n+   |\n+LL |     A = 3,\n+   |         ^ disallowed custom discriminant\n+LL |\n+LL |     B(usize)\n+   |     -------- tuple variant defined here\n+   |\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n+   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a9cfdd549c752233f40a6608474f7a9d362ee375", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -0,0 +1,12 @@\n+enum Color {\n+    Red = 0xff0000,\n+    //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n+    Green = 0x00ff00,\n+    Blue = 0x0000ff,\n+    Black = 0x000000,\n+    White = 0xffffff,\n+    Other(usize),\n+    Other2(usize, usize),\n+}\n+\n+fn main() {}"}, {"sha": "79f044a0675b7b075f3756eaf7d51be8fbdce74f", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8485e6fdece723152c024228284ca76592108f72/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr?ref=8485e6fdece723152c024228284ca76592108f72", "patch": "@@ -0,0 +1,25 @@\n+error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n+  --> $DIR/tag-variant-disr-non-nullary.rs:2:11\n+   |\n+LL |     Red = 0xff0000,\n+   |           ^^^^^^^^ disallowed custom discriminant\n+LL |\n+LL |     Green = 0x00ff00,\n+   |             ^^^^^^^^ disallowed custom discriminant\n+LL |     Blue = 0x0000ff,\n+   |            ^^^^^^^^ disallowed custom discriminant\n+LL |     Black = 0x000000,\n+   |             ^^^^^^^^ disallowed custom discriminant\n+LL |     White = 0xffffff,\n+   |             ^^^^^^^^ disallowed custom discriminant\n+LL |     Other(usize),\n+   |     ------------ tuple variant defined here\n+LL |     Other2(usize, usize),\n+   |     -------------------- tuple variant defined here\n+   |\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n+   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}