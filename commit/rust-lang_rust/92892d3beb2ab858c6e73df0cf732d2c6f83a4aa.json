{"sha": "92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODkyZDNiZWIyYWI4NThjNmU3M2RmMGNmNzMyZDJjNmY4M2E0YWE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-08T15:22:51Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-12T09:58:07Z"}, "message": "Check #[thread_local] statics correctly in the compiler.", "tree": {"sha": "54c5761ad984c37417f8e436d58e7a8be1535841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c5761ad984c37417f8e436d58e7a8be1535841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "html_url": "https://github.com/rust-lang/rust/commit/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "html_url": "https://github.com/rust-lang/rust/commit/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6"}], "stats": {"total": 266, "additions": 223, "deletions": 43}, "files": [{"sha": "5533ab51895422b960f760c4077f1ea3da30dbb7", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -643,7 +643,13 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n \n-          Def::Static(_, mutbl) => {\n+          Def::Static(def_id, mutbl) => {\n+            // `#[thread_local]` statics may not outlive the current function.\n+            for attr in &self.tcx.get_attrs(def_id)[..] {\n+                if attr.check_name(\"thread_local\") {\n+                    return Ok(self.cat_rvalue_node(id, span, expr_ty));\n+                }\n+            }\n               Ok(Rc::new(cmt_ {\n                   id:id,\n                   span:span,"}, {"sha": "34170a6609c4674d4163d594fb230d5e16aa5e75", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -442,4 +442,5 @@ static A : &'static u32 = &S.a; // ok!\n \n register_diagnostics! {\n     E0526, // shuffle indices are not constant\n+    E0625, // thread-local statics cannot be accessed at compile-time\n }"}, {"sha": "2ecffdf9fdf7c034a24f37c645fc87ed9e851c29", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -484,8 +484,20 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     }\n                 }\n             },\n-            Lvalue::Static(_) => {\n+            Lvalue::Static(ref global) => {\n                 self.add(Qualif::STATIC);\n+\n+                if self.mode != Mode::Fn {\n+                    for attr in &self.tcx.get_attrs(global.def_id)[..] {\n+                        if attr.check_name(\"thread_local\") {\n+                            span_err!(self.tcx.sess, self.span, E0625,\n+                                      \"thread-local statics cannot be \\\n+                                       accessed at compile-time\");\n+                            return;\n+                        }\n+                    }\n+                }\n+\n                 if self.mode == Mode::Const || self.mode == Mode::ConstFn {\n                     span_err!(self.tcx.sess, self.span, E0013,\n                               \"{}s cannot refer to statics, use \\\n@@ -998,6 +1010,12 @@ impl MirPass for QualifyAndPromoteConstants {\n \n         // Statics must be Sync.\n         if mode == Mode::Static {\n+            // `#[thread_local]` statics don't have to be `Sync`.\n+            for attr in &tcx.get_attrs(def_id)[..] {\n+                if attr.check_name(\"thread_local\") {\n+                    return;\n+                }\n+            }\n             let ty = mir.return_ty;\n             tcx.infer_ctxt().enter(|infcx| {\n                 let param_env = ty::ParamEnv::empty(Reveal::UserFacing);"}, {"sha": "f95fc8a1b1a4515ff9fe9f28603b7a785b26a6d2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -243,6 +243,7 @@\n #![feature(allocator_api)]\n #![feature(alloc_system)]\n #![feature(allocator_internals)]\n+#![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n #![feature(asm)]\n #![feature(box_syntax)]"}, {"sha": "48f611a343941bb336300c56d0cd463acfffe2ad", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -91,13 +91,13 @@ pub struct LocalKey<T: 'static> {\n     //\n     // Note that the thunk is itself unsafe because the returned lifetime of the\n     // slot where data lives, `'static`, is not actually valid. The lifetime\n-    // here is actually `'thread`!\n+    // here is actually slightly shorter than the currently running thread!\n     //\n     // Although this is an extra layer of indirection, it should in theory be\n     // trivially devirtualizable by LLVM because the value of `inner` never\n     // changes and the constant should be readonly within a crate. This mainly\n     // only runs into problems when TLS statics are exported across crates.\n-    inner: fn() -> Option<&'static UnsafeCell<Option<T>>>,\n+    inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,\n \n     // initialization routine to invoke to create a value\n     init: fn() -> T,\n@@ -157,12 +157,13 @@ macro_rules! thread_local {\n            issue = \"0\")]\n #[macro_export]\n #[allow_internal_unstable]\n+#[cfg_attr(not(stage0), allow_internal_unsafe)]\n macro_rules! __thread_local_inner {\n     ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr) => {\n         $(#[$attr])* $vis static $name: $crate::thread::LocalKey<$t> = {\n             fn __init() -> $t { $init }\n \n-            fn __getit() -> $crate::option::Option<\n+            unsafe fn __getit() -> $crate::option::Option<\n                 &'static $crate::cell::UnsafeCell<\n                     $crate::option::Option<$t>>>\n             {\n@@ -178,7 +179,9 @@ macro_rules! __thread_local_inner {\n                 __KEY.get()\n             }\n \n-            $crate::thread::LocalKey::new(__getit, __init)\n+            unsafe {\n+                $crate::thread::LocalKey::new(__getit, __init)\n+            }\n         };\n     }\n }\n@@ -252,8 +255,8 @@ impl<T: 'static> LocalKey<T> {\n     #[unstable(feature = \"thread_local_internals\",\n                reason = \"recently added to create a key\",\n                issue = \"0\")]\n-    pub const fn new(inner: fn() -> Option<&'static UnsafeCell<Option<T>>>,\n-                     init: fn() -> T) -> LocalKey<T> {\n+    pub const unsafe fn new(inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,\n+                            init: fn() -> T) -> LocalKey<T> {\n         LocalKey {\n             inner: inner,\n             init: init,\n@@ -391,6 +394,7 @@ pub mod fast {\n         }\n     }\n \n+    #[cfg(stage0)]\n     unsafe impl<T> ::marker::Sync for Key<T> { }\n \n     impl<T> Key<T> {\n@@ -402,14 +406,12 @@ pub mod fast {\n             }\n         }\n \n-        pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n-            unsafe {\n-                if mem::needs_drop::<T>() && self.dtor_running.get() {\n-                    return None\n-                }\n-                self.register_dtor();\n+        pub unsafe fn get(&self) -> Option<&'static UnsafeCell<Option<T>>> {\n+            if mem::needs_drop::<T>() && self.dtor_running.get() {\n+                return None\n             }\n-            Some(&self.inner)\n+            self.register_dtor();\n+            Some(&*(&self.inner as *const _))\n         }\n \n         unsafe fn register_dtor(&self) {\n@@ -478,26 +480,24 @@ pub mod os {\n             }\n         }\n \n-        pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n-            unsafe {\n-                let ptr = self.os.get() as *mut Value<T>;\n-                if !ptr.is_null() {\n-                    if ptr as usize == 1 {\n-                        return None\n-                    }\n-                    return Some(&(*ptr).value);\n+        pub unsafe fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n+            let ptr = self.os.get() as *mut Value<T>;\n+            if !ptr.is_null() {\n+                if ptr as usize == 1 {\n+                    return None\n                 }\n-\n-                // If the lookup returned null, we haven't initialized our own\n-                // local copy, so do that now.\n-                let ptr: Box<Value<T>> = box Value {\n-                    key: self,\n-                    value: UnsafeCell::new(None),\n-                };\n-                let ptr = Box::into_raw(ptr);\n-                self.os.set(ptr as *mut u8);\n-                Some(&(*ptr).value)\n+                return Some(&(*ptr).value);\n             }\n+\n+            // If the lookup returned null, we haven't initialized our own\n+            // local copy, so do that now.\n+            let ptr: Box<Value<T>> = box Value {\n+                key: self,\n+                value: UnsafeCell::new(None),\n+            };\n+            let ptr = Box::into_raw(ptr);\n+            self.os.set(ptr as *mut u8);\n+            Some(&(*ptr).value)\n         }\n     }\n "}, {"sha": "4befe3ebc865ab73d401dfb1467e35aaf5f9e907", "filename": "src/test/compile-fail/issue-17954.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static FOO: u8 = 3;\n+\n+fn main() {\n+    let a = &FOO;\n+    //~^ ERROR borrowed value does not live long enough\n+    //~| does not live long enough\n+    //~| NOTE borrowed value must be valid for the static lifetime\n+\n+    std::thread::spawn(move || {\n+        println!(\"{}\", a);\n+    });\n+} //~ temporary value only lives until here"}, {"sha": "3dff34c2ebb1280f88565a202dff0213b9caaab9", "filename": "src/test/compile-fail/issue-43733-2.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn, drop_types_in_const)]\n+#![feature(cfg_target_thread_local, thread_local_internals)]\n+\n+// On platforms *without* `#[thread_local]`, use\n+// a custom non-`Sync` type to fake the same error.\n+#[cfg(not(target_thread_local))]\n+struct Key<T> {\n+    _data: std::cell::UnsafeCell<Option<T>>,\n+    _flag: std::cell::Cell<bool>,\n+}\n+\n+#[cfg(not(target_thread_local))]\n+impl<T> Key<T> {\n+    const fn new() -> Self {\n+        Key {\n+            _data: std::cell::UnsafeCell::new(None),\n+            _flag: std::cell::Cell::new(false),\n+        }\n+    }\n+}\n+\n+#[cfg(target_thread_local)]\n+use std::thread::__FastLocalKeyInner as Key;\n+\n+static __KEY: Key<()> = Key::new();\n+//~^ ERROR `std::cell::UnsafeCell<std::option::Option<()>>: std::marker::Sync` is not satisfied\n+//~| ERROR `std::cell::Cell<bool>: std::marker::Sync` is not satisfied\n+\n+fn main() {}"}, {"sha": "a4aad21a9f8325c659855bad3f93b90f6bf409c5", "filename": "src/test/compile-fail/issue-43733.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn, drop_types_in_const)]\n+#![feature(cfg_target_thread_local, thread_local_internals)]\n+\n+type Foo = std::cell::RefCell<String>;\n+\n+#[cfg(target_thread_local)]\n+static __KEY: std::thread::__FastLocalKeyInner<Foo> =\n+    std::thread::__FastLocalKeyInner::new();\n+\n+#[cfg(not(target_thread_local))]\n+static __KEY: std::thread::__OsLocalKeyInner<Foo> =\n+    std::thread::__OsLocalKeyInner::new();\n+\n+fn __getit() -> std::option::Option<\n+    &'static std::cell::UnsafeCell<\n+        std::option::Option<Foo>>>\n+{\n+    __KEY.get() //~ ERROR  invocation of unsafe method requires unsafe\n+}\n+\n+static FOO: std::thread::LocalKey<Foo> =\n+    std::thread::LocalKey::new(__getit, Default::default);\n+//~^ ERROR call to unsafe function requires unsafe\n+\n+fn main() {\n+    FOO.with(|foo| println!(\"{}\", foo.borrow()));\n+    std::thread::spawn(|| {\n+        FOO.with(|foo| *foo.borrow_mut() += \"foo\");\n+    }).join().unwrap();\n+    FOO.with(|foo| println!(\"{}\", foo.borrow()));\n+}"}, {"sha": "720e15991c05988c4284dcb13a1c74be159f5b6b", "filename": "src/test/compile-fail/thread-local-in-ctfe.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Fcompile-fail%2Fthread-local-in-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Fcompile-fail%2Fthread-local-in-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fthread-local-in-ctfe.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn, thread_local)]\n+\n+#[thread_local]\n+static A: u32 = 1;\n+\n+static B: u32 = A;\n+//~^ ERROR thread-local statics cannot be accessed at compile-time\n+//~| ERROR cannot refer to other statics by value\n+//~| WARN non-constant path in constant expression\n+\n+static C: &u32 = &A;\n+//~^ ERROR thread-local statics cannot be accessed at compile-time\n+\n+const D: u32 = A;\n+//~^ ERROR thread-local statics cannot be accessed at compile-time\n+//~| ERROR cannot refer to statics by value\n+//~| WARN non-constant path in constant expression\n+\n+const E: &u32 = &A;\n+//~^ ERROR thread-local statics cannot be accessed at compile-time\n+\n+const fn f() -> u32 {\n+    A\n+    //~^ ERROR thread-local statics cannot be accessed at compile-time\n+    //~| ERROR cannot refer to statics by value\n+}\n+\n+fn main() {}"}, {"sha": "e9457886be80d890a5e8287823777ab2508e1ed9", "filename": "src/test/run-pass/auxiliary/thread-local-extern-static.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(thread_local)]\n-#![feature(cfg_target_thread_local)]\n+#![feature(cfg_target_thread_local, const_fn, thread_local)]\n #![crate_type = \"lib\"]\n \n+#[cfg(target_thread_local)]\n+use std::cell::Cell;\n+\n #[no_mangle]\n-#[cfg_attr(target_thread_local, thread_local)]\n-pub static FOO: u32 = 3;\n+#[cfg(target_thread_local)]\n+#[thread_local]\n+pub static FOO: Cell<u32> = Cell::new(3);"}, {"sha": "621607e5f6fa8ba99117ef4906d54702c9fed61e", "filename": "src/test/run-pass/issue-30756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Frun-pass%2Fissue-30756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Frun-pass%2Fissue-30756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30756.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unsafe_code)]\n+#![forbid(unsafe_code)]\n \n thread_local!(static FOO: u8 = 1);\n "}, {"sha": "09c8b64776c7b9112ba9ca864b8892242de0b218", "filename": "src/test/run-pass/thread-local-extern-static.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Frun-pass%2Fthread-local-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92892d3beb2ab858c6e73df0cf732d2c6f83a4aa/src%2Ftest%2Frun-pass%2Fthread-local-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthread-local-extern-static.rs?ref=92892d3beb2ab858c6e73df0cf732d2c6f83a4aa", "patch": "@@ -11,18 +11,26 @@\n // ignore-windows\n // aux-build:thread-local-extern-static.rs\n \n-#![feature(thread_local)]\n-#![feature(cfg_target_thread_local)]\n+#![feature(cfg_target_thread_local, thread_local)]\n \n+#[cfg(target_thread_local)]\n extern crate thread_local_extern_static;\n \n+#[cfg(target_thread_local)]\n+use std::cell::Cell;\n+\n+#[cfg(target_thread_local)]\n extern {\n-    #[cfg_attr(target_thread_local, thread_local)]\n-    static FOO: u32;\n+    #[thread_local]\n+    static FOO: Cell<u32>;\n }\n \n+#[cfg(target_thread_local)]\n fn main() {\n     unsafe {\n-        assert_eq!(FOO, 3);\n+        assert_eq!(FOO.get(), 3);\n     }\n }\n+\n+#[cfg(not(target_thread_local))]\n+fn main() {}"}]}