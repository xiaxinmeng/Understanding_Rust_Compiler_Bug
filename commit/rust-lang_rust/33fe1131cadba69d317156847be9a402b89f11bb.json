{"sha": "33fe1131cadba69d317156847be9a402b89f11bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZmUxMTMxY2FkYmE2OWQzMTcxNTY4NDdiZTlhNDAyYjg5ZjExYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T20:55:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T20:55:29Z"}, "message": "Auto merge of #59826 - llogiq:multi-dbg, r=SimonSapin\n\nallow multiple args to `dbg!(..)`\n\nThis closes #59763", "tree": {"sha": "9975e59b97617de157e3df82cd127cb809279b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9975e59b97617de157e3df82cd127cb809279b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33fe1131cadba69d317156847be9a402b89f11bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33fe1131cadba69d317156847be9a402b89f11bb", "html_url": "https://github.com/rust-lang/rust/commit/33fe1131cadba69d317156847be9a402b89f11bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33fe1131cadba69d317156847be9a402b89f11bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4530c528ba4eadd7623813316d75bd4b97012b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4530c528ba4eadd7623813316d75bd4b97012b6c", "html_url": "https://github.com/rust-lang/rust/commit/4530c528ba4eadd7623813316d75bd4b97012b6c"}, {"sha": "b641fd374e82fc8e3cf6b876fa57270f2de39b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/b641fd374e82fc8e3cf6b876fa57270f2de39b32", "html_url": "https://github.com/rust-lang/rust/commit/b641fd374e82fc8e3cf6b876fa57270f2de39b32"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "9eba76cc04a64b448096c08514e36d456d690474", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/33fe1131cadba69d317156847be9a402b89f11bb/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fe1131cadba69d317156847be9a402b89f11bb/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=33fe1131cadba69d317156847be9a402b89f11bb", "patch": "@@ -314,6 +314,22 @@ macro_rules! eprintln {\n /// You can also use `dbg!()` without a value to just print the\n /// file and line whenever it's reached.\n ///\n+/// Finally, if you want to `dbg!(..)` multiple values, it will treat them as\n+/// a tuple (and return it, too):\n+///\n+/// ```\n+/// assert_eq!(dbg!(1usize, 2u32), (1, 2));\n+/// ```\n+///\n+/// However, a single argument with a trailing comma will still not be treated\n+/// as a tuple, following the convention of ignoring trailing commas in macro\n+/// invocations. You can use a 1-tuple directly if you need one:\n+///\n+/// ```\n+/// assert_eq!(1, dbg!(1u32,)); // trailing comma ignored\n+/// assert_eq!((1,), dbg!((1u32,))); // 1-tuple\n+/// ```\n+///\n /// [stderr]: https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\n /// [`debug!`]: https://docs.rs/log/*/log/macro.debug.html\n /// [`log`]: https://crates.io/crates/log\n@@ -333,7 +349,12 @@ macro_rules! dbg {\n                 tmp\n             }\n         }\n-    }\n+    };\n+    // Trailing comma with single argument is ignored\n+    ($val:expr,) => { dbg!($val) };\n+    ($($val:expr),+ $(,)?) => {\n+        ($(dbg!($val)),+,)\n+    };\n }\n \n /// Awaits the completion of an async call."}, {"sha": "e2a7ac349ecd5ce6f3515ce9404cc6683ea2ccb3", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33fe1131cadba69d317156847be9a402b89f11bb/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fe1131cadba69d317156847be9a402b89f11bb/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=33fe1131cadba69d317156847be9a402b89f11bb", "patch": "@@ -54,6 +54,17 @@ fn test() {\n         7331\n     }));\n     assert_eq!(foo, 42);\n+\n+    // Test trailing comma:\n+    assert_eq!((\"Yeah\",), dbg!((\"Yeah\",)));\n+\n+    // Test multiple arguments:\n+    assert_eq!((1u8, 2u32), dbg!(1,\n+                                 2));\n+\n+    // Test multiple arguments + trailing comma:\n+    assert_eq!((1u8, 2u32, \"Yeah\"), dbg!(1u8, 2u32,\n+                                         \"Yeah\",));\n }\n \n fn validate_stderr(stderr: Vec<String>) {\n@@ -85,6 +96,17 @@ fn validate_stderr(stderr: Vec<String>) {\n \n         \"before\",\n         \":51] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n+\n+        \":59] (\\\"Yeah\\\",) = (\",\n+        \"    \\\"Yeah\\\",\",\n+        \")\",\n+\n+        \":62] 1 = 1\",\n+        \":62] 2 = 2\",\n+\n+        \":66] 1u8 = 1\",\n+        \":66] 2u32 = 2\",\n+        \":66] \\\"Yeah\\\" = \\\"Yeah\\\"\",\n     ]);\n }\n "}]}