{"sha": "2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMGVkYzBmMjhjNTY0NzE0MWJlZGJhMDJlN2EyMjJkM2E1ZGM5YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-20T17:54:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-20T17:54:44Z"}, "message": "Auto merge of #75119 - simonvandel:early-otherwise, r=oli-obk\n\nNew MIR optimization pass to reduce branches on match of tuples of enums\n\nFixes #68867 by adding a new pass that turns something like\n```rust\nlet x: Option<()>;\nlet y: Option<()>;\nmatch (x,y) {\n    (Some(_), Some(_)) => {0},\n    _ => {1}\n}\n```\ninto something like\n```rust\nlet x: Option<()>;\nlet y: Option<()>;\nlet discriminant_x = // get discriminant of x\nlet discriminant_y = // get discriminant of x\nif discriminant_x != discriminant_y {1} else {0}\n```\n\nThe opt-diffs still have the old basic blocks like\n```\nbb3: {\n          _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early-otherwise-branch-68867.rs:21:21: 21:30\n          switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early-otherwise-branch-68867.rs:21:21: 21:30\n      }\n\n      bb4: {\n          _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early-otherwise-branch-68867.rs:22:23: 22:34\n          switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early-otherwise-branch-68867.rs:22:23: 22:34\n      }\n\n      bb5: {\n          _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early-otherwise-branch-68867.rs:23:23: 23:34\n          switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early-otherwise-branch-68867.rs:23:23: 23:34\n      }\n```\n\nThese do get removed on later passes. I'm not sure if I should include those passes in the test to make it clear?", "tree": {"sha": "8c6c0ef494292f83366eccc7cb4b639b73013112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c6c0ef494292f83366eccc7cb4b639b73013112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "html_url": "https://github.com/rust-lang/rust/commit/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e02708f1f4760244756548981277d5199baa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/81e02708f1f4760244756548981277d5199baa9a", "html_url": "https://github.com/rust-lang/rust/commit/81e02708f1f4760244756548981277d5199baa9a"}, {"sha": "0363694c7ff72d0a4b1c52ebf2320930c3b60da8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0363694c7ff72d0a4b1c52ebf2320930c3b60da8", "html_url": "https://github.com/rust-lang/rust/commit/0363694c7ff72d0a4b1c52ebf2320930c3b60da8"}], "stats": {"total": 1387, "additions": 1387, "deletions": 0}, "files": [{"sha": "67e679a8b08d02390fb466714389bfe4170a64c6", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "added", "additions": 339, "deletions": 0, "changes": 339, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,339 @@\n+use crate::{\n+    transform::{MirPass, MirSource},\n+    util::patch::MirPatch,\n+};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{Ty, TyCtxt};\n+use std::{borrow::Cow, fmt::Debug};\n+\n+use super::simplify::simplify_cfg;\n+\n+/// This pass optimizes something like\n+/// ```text\n+/// let x: Option<()>;\n+/// let y: Option<()>;\n+/// match (x,y) {\n+///     (Some(_), Some(_)) => {0},\n+///     _ => {1}\n+/// }\n+/// ```\n+/// into something like\n+/// ```text\n+/// let x: Option<()>;\n+/// let y: Option<()>;\n+/// let discriminant_x = // get discriminant of x\n+/// let discriminant_y = // get discriminant of y\n+/// if discriminant_x != discriminant_y || discriminant_x == None {1} else {0}\n+/// ```\n+pub struct EarlyOtherwiseBranch;\n+\n+impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 1 {\n+            return;\n+        }\n+        trace!(\"running EarlyOtherwiseBranch on {:?}\", source);\n+        // we are only interested in this bb if the terminator is a switchInt\n+        let bbs_with_switch =\n+            body.basic_blocks().iter_enumerated().filter(|(_, bb)| is_switch(bb.terminator()));\n+\n+        let opts_to_apply: Vec<OptimizationToApply<'tcx>> = bbs_with_switch\n+            .flat_map(|(bb_idx, bb)| {\n+                let switch = bb.terminator();\n+                let helper = Helper { body, tcx };\n+                let infos = helper.go(bb, switch)?;\n+                Some(OptimizationToApply { infos, basic_block_first_switch: bb_idx })\n+            })\n+            .collect();\n+\n+        let should_cleanup = !opts_to_apply.is_empty();\n+\n+        for opt_to_apply in opts_to_apply {\n+            trace!(\"SUCCESS: found optimization possibility to apply: {:?}\", &opt_to_apply);\n+\n+            let statements_before =\n+                body.basic_blocks()[opt_to_apply.basic_block_first_switch].statements.len();\n+            let end_of_block_location = Location {\n+                block: opt_to_apply.basic_block_first_switch,\n+                statement_index: statements_before,\n+            };\n+\n+            let mut patch = MirPatch::new(body);\n+\n+            // create temp to store second discriminant in\n+            let discr_type = opt_to_apply.infos[0].second_switch_info.discr_ty;\n+            let discr_span = opt_to_apply.infos[0].second_switch_info.discr_source_info.span;\n+            let second_discriminant_temp = patch.new_temp(discr_type, discr_span);\n+\n+            patch.add_statement(\n+                end_of_block_location,\n+                StatementKind::StorageLive(second_discriminant_temp),\n+            );\n+\n+            // create assignment of discriminant\n+            let place_of_adt_to_get_discriminant_of =\n+                opt_to_apply.infos[0].second_switch_info.place_of_adt_discr_read;\n+            patch.add_assign(\n+                end_of_block_location,\n+                Place::from(second_discriminant_temp),\n+                Rvalue::Discriminant(place_of_adt_to_get_discriminant_of),\n+            );\n+\n+            // create temp to store NotEqual comparison between the two discriminants\n+            let not_equal = BinOp::Ne;\n+            let not_equal_res_type = not_equal.ty(tcx, discr_type, discr_type);\n+            let not_equal_temp = patch.new_temp(not_equal_res_type, discr_span);\n+            patch.add_statement(end_of_block_location, StatementKind::StorageLive(not_equal_temp));\n+\n+            // create NotEqual comparison between the two discriminants\n+            let first_descriminant_place =\n+                opt_to_apply.infos[0].first_switch_info.discr_used_in_switch;\n+            let not_equal_rvalue = Rvalue::BinaryOp(\n+                not_equal,\n+                Operand::Copy(Place::from(second_discriminant_temp)),\n+                Operand::Copy(Place::from(first_descriminant_place)),\n+            );\n+            patch.add_statement(\n+                end_of_block_location,\n+                StatementKind::Assign(box (Place::from(not_equal_temp), not_equal_rvalue)),\n+            );\n+\n+            let (mut targets_to_jump_to, values_to_jump_to): (Vec<_>, Vec<_>) = opt_to_apply\n+                .infos\n+                .iter()\n+                .flat_map(|x| x.second_switch_info.targets_with_values.iter())\n+                .cloned()\n+                .unzip();\n+\n+            // add otherwise case in the end\n+            targets_to_jump_to.push(opt_to_apply.infos[0].first_switch_info.otherwise_bb);\n+            // new block that jumps to the correct discriminant case. This block is switched to if the discriminants are equal\n+            let new_switch_data = BasicBlockData::new(Some(Terminator {\n+                source_info: opt_to_apply.infos[0].second_switch_info.discr_source_info,\n+                kind: TerminatorKind::SwitchInt {\n+                    // the first and second discriminants are equal, so just pick one\n+                    discr: Operand::Copy(first_descriminant_place),\n+                    switch_ty: discr_type,\n+                    values: Cow::from(values_to_jump_to),\n+                    targets: targets_to_jump_to,\n+                },\n+            }));\n+\n+            let new_switch_bb = patch.new_block(new_switch_data);\n+\n+            // switch on the NotEqual. If true, then jump to the `otherwise` case.\n+            // If false, then jump to a basic block that then jumps to the correct disciminant case\n+            let true_case = opt_to_apply.infos[0].first_switch_info.otherwise_bb;\n+            let false_case = new_switch_bb;\n+            patch.patch_terminator(\n+                opt_to_apply.basic_block_first_switch,\n+                TerminatorKind::if_(\n+                    tcx,\n+                    Operand::Move(Place::from(not_equal_temp)),\n+                    true_case,\n+                    false_case,\n+                ),\n+            );\n+\n+            // generate StorageDead for the second_discriminant_temp not in use anymore\n+            patch.add_statement(\n+                end_of_block_location,\n+                StatementKind::StorageDead(second_discriminant_temp),\n+            );\n+\n+            // Generate a StorageDead for not_equal_temp in each of the targets, since we moved it into the switch\n+            for bb in [false_case, true_case].iter() {\n+                patch.add_statement(\n+                    Location { block: *bb, statement_index: 0 },\n+                    StatementKind::StorageDead(not_equal_temp),\n+                );\n+            }\n+\n+            patch.apply(body);\n+        }\n+\n+        // Since this optimization adds new basic blocks and invalidates others,\n+        // clean up the cfg to make it nicer for other passes\n+        if should_cleanup {\n+            simplify_cfg(body);\n+        }\n+    }\n+}\n+\n+fn is_switch<'tcx>(terminator: &Terminator<'tcx>) -> bool {\n+    match terminator.kind {\n+        TerminatorKind::SwitchInt { .. } => true,\n+        _ => false,\n+    }\n+}\n+\n+struct Helper<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+#[derive(Debug, Clone)]\n+struct SwitchDiscriminantInfo<'tcx> {\n+    /// Type of the discriminant being switched on\n+    discr_ty: Ty<'tcx>,\n+    /// The basic block that the otherwise branch points to\n+    otherwise_bb: BasicBlock,\n+    /// Target along with the value being branched from. Otherwise is not included\n+    targets_with_values: Vec<(BasicBlock, u128)>,\n+    discr_source_info: SourceInfo,\n+    /// The place of the discriminant used in the switch\n+    discr_used_in_switch: Place<'tcx>,\n+    /// The place of the adt that has its discriminant read\n+    place_of_adt_discr_read: Place<'tcx>,\n+    /// The type of the adt that has its discriminant read\n+    type_adt_matched_on: Ty<'tcx>,\n+}\n+\n+#[derive(Debug)]\n+struct OptimizationToApply<'tcx> {\n+    infos: Vec<OptimizationInfo<'tcx>>,\n+    /// Basic block of the original first switch\n+    basic_block_first_switch: BasicBlock,\n+}\n+\n+#[derive(Debug)]\n+struct OptimizationInfo<'tcx> {\n+    /// Info about the first switch and discriminant\n+    first_switch_info: SwitchDiscriminantInfo<'tcx>,\n+    /// Info about the second switch and discriminant\n+    second_switch_info: SwitchDiscriminantInfo<'tcx>,\n+}\n+\n+impl<'a, 'tcx> Helper<'a, 'tcx> {\n+    pub fn go(\n+        &self,\n+        bb: &BasicBlockData<'tcx>,\n+        switch: &Terminator<'tcx>,\n+    ) -> Option<Vec<OptimizationInfo<'tcx>>> {\n+        // try to find the statement that defines the discriminant that is used for the switch\n+        let discr = self.find_switch_discriminant_info(bb, switch)?;\n+\n+        // go through each target, finding a discriminant read, and a switch\n+        let results = discr.targets_with_values.iter().map(|(target, value)| {\n+            self.find_discriminant_switch_pairing(&discr, target.clone(), value.clone())\n+        });\n+\n+        // if the optimization did not apply for one of the targets, then abort\n+        if results.clone().any(|x| x.is_none()) || results.len() == 0 {\n+            trace!(\"NO: not all of the targets matched the pattern for optimization\");\n+            return None;\n+        }\n+\n+        Some(results.flatten().collect())\n+    }\n+\n+    fn find_discriminant_switch_pairing(\n+        &self,\n+        discr_info: &SwitchDiscriminantInfo<'tcx>,\n+        target: BasicBlock,\n+        value: u128,\n+    ) -> Option<OptimizationInfo<'tcx>> {\n+        let bb = &self.body.basic_blocks()[target];\n+        // find switch\n+        let terminator = bb.terminator();\n+        if is_switch(terminator) {\n+            let this_bb_discr_info = self.find_switch_discriminant_info(bb, terminator)?;\n+\n+            // the types of the two adts matched on have to be equalfor this optimization to apply\n+            if discr_info.type_adt_matched_on != this_bb_discr_info.type_adt_matched_on {\n+                trace!(\n+                    \"NO: types do not match. LHS: {:?}, RHS: {:?}\",\n+                    discr_info.type_adt_matched_on,\n+                    this_bb_discr_info.type_adt_matched_on\n+                );\n+                return None;\n+            }\n+\n+            // the otherwise branch of the two switches have to point to the same bb\n+            if discr_info.otherwise_bb != this_bb_discr_info.otherwise_bb {\n+                trace!(\"NO: otherwise target is not the same\");\n+                return None;\n+            }\n+\n+            // check that the value being matched on is the same. The\n+            if this_bb_discr_info.targets_with_values.iter().find(|x| x.1 == value).is_none() {\n+                trace!(\"NO: values being matched on are not the same\");\n+                return None;\n+            }\n+\n+            // only allow optimization if the left and right of the tuple being matched are the same variants.\n+            // so the following should not optimize\n+            //  ```rust\n+            // let x: Option<()>;\n+            // let y: Option<()>;\n+            // match (x,y) {\n+            //     (Some(_), None) => {},\n+            //     _ => {}\n+            // }\n+            //  ```\n+            // We check this by seeing that the value of the first discriminant is the only other discriminant value being used as a target in the second switch\n+            if !(this_bb_discr_info.targets_with_values.len() == 1\n+                && this_bb_discr_info.targets_with_values[0].1 == value)\n+            {\n+                trace!(\n+                    \"NO: The second switch did not have only 1 target (besides otherwise) that had the same value as the value from the first switch that got us here\"\n+                );\n+                return None;\n+            }\n+\n+            // if we reach this point, the optimization applies, and we should be able to optimize this case\n+            // store the info that is needed to apply the optimization\n+\n+            Some(OptimizationInfo {\n+                first_switch_info: discr_info.clone(),\n+                second_switch_info: this_bb_discr_info,\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn find_switch_discriminant_info(\n+        &self,\n+        bb: &BasicBlockData<'tcx>,\n+        switch: &Terminator<'tcx>,\n+    ) -> Option<SwitchDiscriminantInfo<'tcx>> {\n+        match &switch.kind {\n+            TerminatorKind::SwitchInt { discr, targets, values, .. } => {\n+                let discr_local = discr.place()?.as_local()?;\n+                // the declaration of the discriminant read. Place of this read is being used in the switch\n+                let discr_decl = &self.body.local_decls()[discr_local];\n+                let discr_ty = discr_decl.ty;\n+                // the otherwise target lies as the last element\n+                let otherwise_bb = targets.get(values.len())?.clone();\n+                let targets_with_values = targets\n+                    .iter()\n+                    .zip(values.iter())\n+                    .map(|(t, v)| (t.clone(), v.clone()))\n+                    .collect();\n+\n+                // find the place of the adt where the discriminant is being read from\n+                // assume this is the last statement of the block\n+                let place_of_adt_discr_read = match bb.statements.last()?.kind {\n+                    StatementKind::Assign(box (_, Rvalue::Discriminant(adt_place))) => {\n+                        Some(adt_place)\n+                    }\n+                    _ => None,\n+                }?;\n+\n+                let type_adt_matched_on = place_of_adt_discr_read.ty(self.body, self.tcx).ty;\n+\n+                Some(SwitchDiscriminantInfo {\n+                    discr_used_in_switch: discr.place()?,\n+                    discr_ty,\n+                    otherwise_bb,\n+                    targets_with_values,\n+                    discr_source_info: discr_decl.source_info,\n+                    place_of_adt_discr_read,\n+                    type_adt_matched_on,\n+                })\n+            }\n+            _ => unreachable!(\"must only be passed terminator that is a switch\"),\n+        }\n+    }\n+}"}, {"sha": "abe2dc496a630affd7862a3e4e33c7593d99fbdb", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -26,6 +26,7 @@ pub mod copy_prop;\n pub mod deaggregator;\n pub mod dest_prop;\n pub mod dump_mir;\n+pub mod early_otherwise_branch;\n pub mod elaborate_drops;\n pub mod generator;\n pub mod inline;\n@@ -465,6 +466,7 @@ fn run_optimization_passes<'tcx>(\n         &instcombine::InstCombine,\n         &const_prop::ConstProp,\n         &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+        &early_otherwise_branch::EarlyOtherwiseBranch,\n         &simplify_comparison_integral::SimplifyComparisonIntegral,\n         &simplify_try::SimplifyArmIdentity,\n         &simplify_try::SimplifyBranchSame,"}, {"sha": "386726bfddc74676c302be2c9adcb203702664ac", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,77 @@\n+- // MIR for `opt1` before EarlyOtherwiseBranch\n++ // MIR for `opt1` after EarlyOtherwiseBranch\n+  \n+  fn opt1(_1: Option<u32>, _2: Option<u32>) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch.rs:3:9: 3:10\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch.rs:3:25: 3:26\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch.rs:3:44: 3:47\n+      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n+      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:4:12: 4:13\n+      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n+      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n+      let _8: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n+      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n++     let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n++     let mut _11: bool;                   // in scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n+      scope 1 {\n+          debug a => _8;                   // in scope 1 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n+          debug b => _9;                   // in scope 1 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:12: 4:13\n+          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:4:12: 4:13\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n+          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n+          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n+          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:16: 4:17\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:16: 4:17\n+          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n+-         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n++         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n++         _10 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n++         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n++         _11 = Ne(_10, _7);               // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n++         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n++         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n+      }\n+  \n+      bb1: {\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n+-         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n++         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n+      }\n+  \n+      bb2: {\n+-         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n+-         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n+-     }\n+- \n+-     bb3: {\n+          StorageLive(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n+          _8 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n+          _9 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n+          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n+-         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n++         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n+      }\n+  \n+-     bb4: {\n++     bb3: {\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch.rs:8:2: 8:2\n++     }\n++ \n++     bb4: {\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n++         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n+      }\n+  }\n+  "}, {"sha": "bc5934dec84e41961e0e4ed888b6a28e888175e8", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,91 @@\n+- // MIR for `opt2` before EarlyOtherwiseBranch\n++ // MIR for `opt2` after EarlyOtherwiseBranch\n+  \n+  fn opt2(_1: Option<u32>, _2: Option<u32>) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch.rs:11:9: 11:10\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch.rs:11:25: 11:26\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch.rs:11:44: 11:47\n+      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n+      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:12:12: 12:13\n+      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n+      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:13:19: 13:26\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n+      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n+      let _10: u32;                        // in scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n++     let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n++     let mut _12: bool;                   // in scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n+      scope 1 {\n+          debug a => _9;                   // in scope 1 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n+          debug b => _10;                  // in scope 1 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:12: 12:13\n+          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:12:12: 12:13\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n+          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n+          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n+          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n+          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n+-         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n++         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n++         _11 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n++         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n++         _12 = Ne(_11, _8);               // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n++         switchInt(move _12) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n+      }\n+  \n+      bb1: {\n+-         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n+-         switchInt(move _6) -> [0_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n+-     }\n+- \n+-     bb2: {\n++         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n+      }\n+  \n+-     bb3: {\n+-         _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:13:19: 13:26\n+-         switchInt(move _7) -> [1_isize: bb4, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:13:19: 13:26\n+-     }\n+- \n+-     bb4: {\n++     bb2: {\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n+          _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n+          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n+          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n+          StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n+      }\n+  \n+-     bb5: {\n++     bb3: {\n+          _0 = const 0_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:14:25: 14:26\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n+      }\n+  \n+-     bb6: {\n++     bb4: {\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:17:1: 17:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch.rs:17:2: 17:2\n++     }\n++ \n++     bb5: {\n++         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n++         switchInt(_8) -> [0_isize: bb3, 1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n+      }\n+  }\n+  "}, {"sha": "77003442080f40e6a330cb2bced674cb23d76f73", "filename": "src/test/mir-opt/early_otherwise_branch.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Z mir-opt-level=3\n+// EMIT_MIR early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff\n+fn opt1(x: Option<u32>, y: Option<u32>) -> u32 {\n+    match (x, y) {\n+        (Some(a), Some(b)) => 0,\n+        _ => 1,\n+    }\n+}\n+\n+// EMIT_MIR early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff\n+fn opt2(x: Option<u32>, y: Option<u32>) -> u32 {\n+    match (x, y) {\n+        (Some(a), Some(b)) => 0,\n+        (None, None) => 0,\n+        _ => 1,\n+    }\n+}\n+\n+fn main() {\n+    opt1(None, Some(0));\n+    opt2(None, Some(0));\n+}"}, {"sha": "b0357f1aecd61f7cf5f42f582a3403fbb81de9f2", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,99 @@\n+- // MIR for `opt1` before EarlyOtherwiseBranch\n++ // MIR for `opt1` after EarlyOtherwiseBranch\n+  \n+  fn opt1(_1: Option<u32>, _2: Option<u32>, _3: Option<u32>) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:9: 4:10\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:25: 4:26\n+      debug z => _3;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:41: 4:42\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:60: 4:63\n+      let mut _4: (std::option::Option<u32>, std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n+      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:12: 5:13\n+      let mut _6: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:15: 5:16\n+      let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n+      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n+      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n+      let _11: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n+      let _12: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n+      let _13: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n++     let mut _14: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n++     let mut _15: bool;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n++     let mut _16: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n++     let mut _17: bool;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n+      scope 1 {\n+          debug a => _11;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n+          debug b => _12;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n+          debug c => _13;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n+      }\n+  \n+      bb0: {\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:12: 5:13\n+          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:12: 5:13\n+          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:15: 5:16\n+          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:15: 5:16\n+          StorageLive(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n+          _7 = _3;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n+          (_4.0: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n+          (_4.1: std::option::Option<u32>) = move _6; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n+          (_4.2: std::option::Option<u32>) = move _7; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n+          StorageDead(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n+          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n+          _10 = discriminant((_4.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n+-         switchInt(move _10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n++         StorageLive(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n++         _14 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n++         StorageLive(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n++         _15 = Ne(_14, _10);              // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n++         StorageDead(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n++         switchInt(move _15) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n+      }\n+  \n+      bb1: {\n++         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n++         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n+-         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n+      }\n+  \n+      bb2: {\n+-         _9 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n+-         switchInt(move _9) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n+-     }\n+- \n+-     bb3: {\n+          _8 = discriminant((_4.2: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n+-         switchInt(move _8) -> [1_isize: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n++         switchInt(move _8) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n+      }\n+  \n+-     bb4: {\n++     bb3: {\n+          StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n+          _11 = (((_4.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n+          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n+          _12 = (((_4.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n+          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n+          _13 = (((_4.2: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n+          StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n+          StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n+-         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n+      }\n+  \n+-     bb5: {\n++     bb4: {\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:9:2: 9:2\n++     }\n++ \n++     bb5: {\n++         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n++         switchInt(_10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n+      }\n+  }\n+  "}, {"sha": "1d6877d67df8226e72a4deac77d4f8cda6e46502", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -Z mir-opt-level=3\n+\n+// EMIT_MIR early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff\n+fn opt1(x: Option<u32>, y: Option<u32>, z: Option<u32>) -> u32 {\n+    match (x, y, z) {\n+        (Some(a), Some(b), Some(c)) => 0,\n+        _ => 1,\n+    }\n+}\n+\n+fn main() {\n+    opt1(None, Some(0), None);\n+}"}, {"sha": "5922e73e5d20513364039630d25c4add0e6d38f1", "filename": "src/test/mir-opt/early_otherwise_branch_68867.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,33 @@\n+// ignore-tidy-linelength\n+// compile-flags: -Z mir-opt-level=3\n+\n+// example from #68867\n+type CSSFloat = f32;\n+\n+pub enum ViewportPercentageLength {\n+    Vw(CSSFloat),\n+    Vh(CSSFloat),\n+    Vmin(CSSFloat),\n+    Vmax(CSSFloat),\n+}\n+\n+// EMIT_MIR early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff\n+// EMIT_MIR early_otherwise_branch_68867.try_sum EarlyOtherwiseBranch.before SimplifyBranches-after-copy-prop.after\n+#[no_mangle]\n+pub extern \"C\" fn try_sum(\n+    x: &ViewportPercentageLength,\n+    other: &ViewportPercentageLength,\n+) -> Result<ViewportPercentageLength, ()> {\n+    use self::ViewportPercentageLength::*;\n+    Ok(match (x, other) {\n+        (&Vw(one), &Vw(other)) => Vw(one + other),\n+        (&Vh(one), &Vh(other)) => Vh(one + other),\n+        (&Vmin(one), &Vmin(other)) => Vmin(one + other),\n+        (&Vmax(one), &Vmax(other)) => Vmax(one + other),\n+        _ => return Err(()),\n+    })\n+}\n+\n+fn main() {\n+    try_sum(&ViewportPercentageLength::Vw(1.0), &ViewportPercentageLength::Vw(2.0));\n+}"}, {"sha": "fbc46c9d196c1e00001245df0b8b20ba700e1e3b", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "status": "added", "additions": 310, "deletions": 0, "changes": 310, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,310 @@\n+- // MIR for `try_sum` before EarlyOtherwiseBranch\n++ // MIR for `try_sum` after SimplifyBranches-after-copy-prop\n+  \n+  fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> std::result::Result<ViewportPercentageLength, ()> {\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:6\n+      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:5: 19:10\n+      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:20:6: 20:42\n+      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n+      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n+      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n+      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n+      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n+      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n+      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n+      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n+      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n+      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n+      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n+      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n++     let mut _34: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n++     let mut _35: bool;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      scope 1 {\n+-         debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+-         debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n++         debug one => _15;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n++         debug other => _16;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+      }\n+      scope 2 {\n+-         debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+-         debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n++         debug one => _20;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n++         debug other => _21;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+      }\n+      scope 3 {\n+-         debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+-         debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n++         debug one => _25;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n++         debug other => _26;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+      }\n+      scope 4 {\n+-         debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+-         debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n++         debug one => _30;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n++         debug other => _31;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+-         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+-         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n+-         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n+-         StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+-         _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+-         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+-         (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+-         StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n+-         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n++         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n++         (_4.1: &ViewportPercentageLength) = move _2; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n+          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n+-         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         switchInt(move _35) -> [false: bb8, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n+      }\n+  \n+      bb1: {\n+-         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-     }\n+- \n+-     bb2: {\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n+          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n+          ((_0 as Err).0: ()) = const ();  // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:21: 27:28\n+          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:21: 27:28\n+          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:27: 27:28\n+-         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n+-         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n+      }\n+  \n++     bb2: {\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n++         _15 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n++         _16 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vw).0: f32) = Add(move _15, move _16); // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 0; // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n++         goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++     }\n++ \n+      bb3: {\n+-         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n+-         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n++         _20 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n++         _21 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vh).0: f32) = Add(move _20, move _21); // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 1; // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n++         goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      }\n+  \n+      bb4: {\n+-         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n++         _25 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n++         _26 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vmin).0: f32) = Add(move _25, move _26); // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 2; // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n++         goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      }\n+  \n+      bb5: {\n+-         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n+-         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n++         _30 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n++         _31 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vmax).0: f32) = Add(move _30, move _31); // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 3; // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n++         goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      }\n+  \n+      bb6: {\n+-         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+-         _12 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+-         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+-         _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+-         StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+-         StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+-         _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+-         StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+-         _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+-         _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+-         StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+-         StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+-         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n+-         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n+-         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n+      }\n+  \n+      bb7: {\n+-         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+-         _17 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+-         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+-         _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+-         StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n+-         StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n+-         _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n+-         StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n+-         _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n+-         _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n+-         StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n+-         StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n+-         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n+-         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n+-         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n+-         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n+-         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n+-         goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n++         discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n+      }\n+  \n+      bb8: {\n+-         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+-         _22 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+-         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+-         _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+-         StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+-         StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+-         _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+-         StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+-         _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+-         _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+-         StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+-         StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+-         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n+-         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n+-         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+-     }\n+- \n+-     bb9: {\n+-         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+-         _27 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+-         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+-         _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+-         StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n+-         StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n+-         _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n+-         StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n+-         _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n+-         _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n+-         StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n+-         StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n+-         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n+-         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n+-         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n+-         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n+-         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n+-         goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+-     }\n+- \n+-     bb10: {\n+-         return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n+-     }\n+- \n+-     bb11: {\n+-         ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n+-         discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n+-         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n+-         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n++         switchInt(_11) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      }\n+  }\n+  "}, {"sha": "54e4b08262616e95f9526be3885d8665ab6db2fe", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,223 @@\n+- // MIR for `try_sum` before EarlyOtherwiseBranch\n++ // MIR for `try_sum` after EarlyOtherwiseBranch\n+  \n+  fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> std::result::Result<ViewportPercentageLength, ()> {\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:6\n+      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:5: 19:10\n+      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:20:6: 20:42\n+      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n+      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n+      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n+      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n+      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n+      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n+      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n+      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n+      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n+      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n+      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n+      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n++     let mut _34: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n++     let mut _35: bool;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      scope 1 {\n+          debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+      }\n+      scope 2 {\n+          debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+          debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+      }\n+      scope 3 {\n+          debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+      }\n+      scope 4 {\n+          debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+          debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n+          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n+          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+          (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n+          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n+-         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n++         switchInt(move _35) -> [false: bb8, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n+      }\n+  \n+      bb1: {\n+-         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-     }\n+- \n+-     bb2: {\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n+          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:25: 27:27\n+          ((_0 as Err).0: ()) = const ();  // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:21: 27:28\n+          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:21: 27:28\n+          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:27: 27:28\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n+      }\n+  \n+-     bb3: {\n+-         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n+-         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n+-     }\n+- \n+-     bb4: {\n+-         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-     }\n+- \n+-     bb5: {\n+-         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n+-         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n+-     }\n+- \n+-     bb6: {\n++     bb2: {\n+          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          _12 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+          StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+          _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n+          StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+          _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n+          _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n+          StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+          StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n+          ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n+          discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n+          StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+          StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      }\n+  \n+-     bb7: {\n++     bb3: {\n+          StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+          _17 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+          StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+          _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+          StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n+          StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n+          _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n+          StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n+          _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:49\n+          _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n+          StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n+          StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:48: 24:49\n+          ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n+          discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n+          StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n+          StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n+          StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n+-         goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      }\n+  \n+-     bb8: {\n++     bb4: {\n+          StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          _22 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+          StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+          _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n+          StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+          _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n+          _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n+          StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+          StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n+          ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n+          discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n+          StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+          StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+          StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      }\n+  \n+-     bb9: {\n++     bb5: {\n+          StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+          _27 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+          StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+          _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+          StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n+          StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n+          _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n+          StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n+          _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:50: 26:55\n+          _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n+          StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n+          StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:54: 26:55\n+          ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n+          discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n+          StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n+          StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n+          StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n+-         goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n++         goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n+      }\n+  \n+-     bb10: {\n++     bb6: {\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n+      }\n+  \n+-     bb11: {\n++     bb7: {\n+          ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n+          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n++     }\n++ \n++     bb8: {\n++         StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n++         switchInt(_11) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+      }\n+  }\n+  "}, {"sha": "9a6094f12dfb164dd4fb6022cae9c417bd744c67", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,90 @@\n+- // MIR for `noopt1` before EarlyOtherwiseBranch\n++ // MIR for `noopt1` after EarlyOtherwiseBranch\n+  \n+  fn noopt1(_1: Option<u32>, _2: Option<u32>) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:7:11: 7:12\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:7:27: 7:28\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_noopt.rs:7:46: 7:49\n+      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:12: 8:13\n+      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n+      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:16: 11:23\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:19: 9:26\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:10: 9:17\n+      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n+      let _10: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n+      let _11: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n+      let _12: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n+      scope 1 {\n+          debug a => _9;                   // in scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n+          debug b => _10;                  // in scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n+      }\n+      scope 2 {\n+          debug a => _11;                  // in scope 2 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n+      }\n+      scope 3 {\n+          debug b => _12;                  // in scope 3 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:12: 8:13\n+          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:12: 8:13\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n+          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n+          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n+          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:10: 9:17\n+          switchInt(move _8) -> [0_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:10: 9:17\n+      }\n+  \n+      bb1: {\n+          _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:16: 11:23\n+          switchInt(move _6) -> [0_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:16: 11:23\n+      }\n+  \n+      bb2: {\n+          _0 = const 3_u32;                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n+          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n+      }\n+  \n+      bb3: {\n+          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:19: 9:26\n+          switchInt(move _7) -> [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:19: 9:26\n+      }\n+  \n+      bb4: {\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n+          _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n+          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n+          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n+          StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n+          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n+      }\n+  \n+      bb5: {\n+          StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n+          _11 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n+          _0 = const 1_u32;                // scope 2 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n+          StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n+          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n+      }\n+  \n+      bb6: {\n+          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n+          _12 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n+          _0 = const 2_u32;                // scope 3 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n+          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n+      }\n+  \n+      bb7: {\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:14:1: 14:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_noopt.rs:14:2: 14:2\n+      }\n+  }\n+  "}, {"sha": "c3aecb4529351f5d66b072c399274e33af8fca64", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `noopt2` before EarlyOtherwiseBranch\n++ // MIR for `noopt2` after EarlyOtherwiseBranch\n+  \n+  fn noopt2(_1: Option<u32>, _2: Option<bool>) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:18:11: 18:12\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:18:27: 18:28\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_noopt.rs:18:47: 18:50\n+      let mut _3: (std::option::Option<u32>, std::option::Option<bool>); // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:11: 19:17\n+      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:12: 19:13\n+      let mut _5: std::option::Option<bool>; // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:15: 19:16\n+      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:19: 20:26\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:10: 20:17\n+      let _8: u32;                         // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:15: 20:16\n+      let _9: bool;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:24: 20:25\n+      scope 1 {\n+          debug a => _8;                   // in scope 1 at $DIR/early_otherwise_branch_noopt.rs:20:15: 20:16\n+          debug b => _9;                   // in scope 1 at $DIR/early_otherwise_branch_noopt.rs:20:24: 20:25\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:11: 19:17\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:12: 19:13\n+          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:12: 19:13\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:15: 19:16\n+          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:15: 19:16\n+          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:11: 19:17\n+          (_3.1: std::option::Option<bool>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:11: 19:17\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:16: 19:17\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:16: 19:17\n+          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:10: 20:17\n+          switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:10: 20:17\n+      }\n+  \n+      bb1: {\n+          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:21:14: 21:15\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:5: 22:6\n+      }\n+  \n+      bb2: {\n+          _6 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:19: 20:26\n+          switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:19: 20:26\n+      }\n+  \n+      bb3: {\n+          StorageLive(_8);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:15: 20:16\n+          _8 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:15: 20:16\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:24: 20:25\n+          _9 = (((_3.1: std::option::Option<bool>) as Some).0: bool); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:24: 20:25\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n+          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:5: 22:6\n+      }\n+  \n+      bb4: {\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:23:1: 23:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_noopt.rs:23:2: 23:2\n+      }\n+  }\n+  "}, {"sha": "bd15f520dfcd4c646c6f6eecabc65188b5ef3f9b", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0edc0f28c5647141bedba02e7a222d3a5dc9c3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.rs?ref=2e0edc0f28c5647141bedba02e7a222d3a5dc9c3", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: -Z mir-opt-level=3\n+\n+// must not optimize as it does not follow the pattern of\n+// left and right hand side being the same variant\n+\n+// EMIT_MIR early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff\n+fn noopt1(x: Option<u32>, y: Option<u32>) -> u32 {\n+    match (x, y) {\n+        (Some(a), Some(b)) => 0,\n+        (Some(a), None) => 1,\n+        (None, Some(b)) => 2,\n+        (None, None) => 3,\n+    }\n+}\n+\n+// must not optimize as the types being matched on are not identical\n+// EMIT_MIR early_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff\n+fn noopt2(x: Option<u32>, y: Option<bool>) -> u32 {\n+    match (x, y) {\n+        (Some(a), Some(b)) => 0,\n+        _ => 1,\n+    }\n+}\n+\n+fn main() {\n+    noopt1(None, Some(0));\n+    noopt2(None, Some(true));\n+}"}]}