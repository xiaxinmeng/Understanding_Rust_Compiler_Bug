{"sha": "d5f821eeb085fab83c6592b018d2e99033b8c2ab", "node_id": "C_kwDOAAsO6NoAKGQ1ZjgyMWVlYjA4NWZhYjgzYzY1OTJiMDE4ZDJlOTkwMzNiOGMyYWI", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-27T19:17:10Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:24Z"}, "message": "Migrate \"constant pattern depends on generic parameter\" diagnostic", "tree": {"sha": "6faf38aee6e80021466402f173dcd8b333538956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6faf38aee6e80021466402f173dcd8b333538956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f821eeb085fab83c6592b018d2e99033b8c2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f821eeb085fab83c6592b018d2e99033b8c2ab", "html_url": "https://github.com/rust-lang/rust/commit/d5f821eeb085fab83c6592b018d2e99033b8c2ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f821eeb085fab83c6592b018d2e99033b8c2ab/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "b694e6649ef5883e36c1bbac0c9890db5dd96792", "url": "https://api.github.com/repos/rust-lang/rust/commits/b694e6649ef5883e36c1bbac0c9890db5dd96792", "html_url": "https://github.com/rust-lang/rust/commit/b694e6649ef5883e36c1bbac0c9890db5dd96792"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "4504d557da3f05cd32eb9e4dfdd1d16506bd7224", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5f821eeb085fab83c6592b018d2e99033b8c2ab/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d5f821eeb085fab83c6592b018d2e99033b8c2ab/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=d5f821eeb085fab83c6592b018d2e99033b8c2ab", "patch": "@@ -195,3 +195,6 @@ mir_build_non_const_path = runtime values cannot be referenced in patterns\n mir_build_unreachable_pattern = unreachable pattern\n     .label = unreachable pattern\n     .catchall_label = matches any value\n+\n+mir_build_const_pattern_depends_on_generic_parameter =\n+    constant pattern depends on a generic parameter"}, {"sha": "e6ed824b8bb91f25349321b53fb437a5fa298361", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5f821eeb085fab83c6592b018d2e99033b8c2ab/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f821eeb085fab83c6592b018d2e99033b8c2ab/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=d5f821eeb085fab83c6592b018d2e99033b8c2ab", "patch": "@@ -466,3 +466,10 @@ pub struct UnreachablePattern {\n     #[label(mir_build::catchall_label)]\n     pub catchall: Option<Span>,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::const_pattern_depends_on_generic_parameter)]\n+pub struct ConstPatternDependsOnGenericParameter {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "2711835f4b4dda6cb34e58904a3f794126461468", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5f821eeb085fab83c6592b018d2e99033b8c2ab/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f821eeb085fab83c6592b018d2e99033b8c2ab/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=d5f821eeb085fab83c6592b018d2e99033b8c2ab", "patch": "@@ -8,6 +8,7 @@ mod usefulness;\n pub(crate) use self::check_match::check_match;\n pub(crate) use self::usefulness::MatchCheckCtxt;\n \n+use crate::errors::ConstPatternDependsOnGenericParameter;\n use crate::thir::util::UserAnnotatedTyHelpers;\n \n use rustc_errors::struct_span_err;\n@@ -549,7 +550,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             Err(ErrorHandled::TooGeneric) => {\n                 // While `Reported | Linted` cases will have diagnostics emitted already\n                 // it is not true for TooGeneric case, so we need to give user more information.\n-                self.tcx.sess.span_err(span, \"constant pattern depends on a generic parameter\");\n+                self.tcx.sess.emit_err(ConstPatternDependsOnGenericParameter { span });\n                 pat_from_kind(PatKind::Wild)\n             }\n             Err(_) => {\n@@ -583,9 +584,9 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 _ => bug!(\"Expected ConstKind::Param\"),\n             },\n             mir::ConstantKind::Val(_, _) => self.const_to_pat(value, id, span, false).kind,\n-            mir::ConstantKind::Unevaluated(..) => {\n+            mir::ConstKind::Unevaluated(_) => {\n                 // If we land here it means the const can't be evaluated because it's `TooGeneric`.\n-                self.tcx.sess.span_err(span, \"constant pattern depends on a generic parameter\");\n+                self.tcx.sess.emit_err(ConstPatternDependsOnGenericParameter { span });\n                 return PatKind::Wild;\n             }\n         }"}]}