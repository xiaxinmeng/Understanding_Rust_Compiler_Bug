{"sha": "e23a424b318891062397d61f70e6eab06f3092c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyM2E0MjRiMzE4ODkxMDYyMzk3ZDYxZjcwZTZlYWIwNmYzMDkyYzA=", "commit": {"author": {"name": "James Wang", "email": "jameswang9909@hotmail.com", "date": "2019-10-04T17:18:52Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-10-15T07:58:11Z"}, "message": "Change lint to be pedantic", "tree": {"sha": "a1fb95734dea16e2095f1af29b31b16dd89c5b47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1fb95734dea16e2095f1af29b31b16dd89c5b47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e23a424b318891062397d61f70e6eab06f3092c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl2lfBMACgkQaTCGhp1Q\nZjdT4hAAjy4Wxfhjk6h5pBRR7GRG+J2rdIRICVMlJF6yN42xq+38A1kj0Zb+qidk\nl0ltuWxNuT+XGe5Au//vTZG1o3K1sSSAsCaOdtLtLd1jmWUw94J3qvAopskJ+EWJ\n1zYCci2iA98JOtaCw7EnBMDqJXka6ngqf7rxUOe6dBfK+w9gbcMK66nM/fzdVPNp\nH6UaNqVn44+/k/cm4t5MupM1xL5sExWzgfgYtkDYxyFUJsdET6IjLEF6lsLn5q5G\nV62yDDQm+zSVbQ6c6uArW+cm++G/0FpupAsJ5nWtK+Jukd5YoMXg+NgZ0FWYdxek\nakjrMDyFGpru8SpM9TbtZgPU+NRM4imLQsWmkOhTZUbE0OLupnilrDF37+W+jtDu\nYyA11d9BLr8bgM0DXLurX0DmmBBsOfS0haVbUNyqElVaS1I0o5DJGPIeFW1eaw+S\nVvumVscey/f9hvXOjG21wbJKmNeExdya4cVnTJeqRZGpDRhieIrp5j2CAzos90w0\nRPPMUGkjwv9qgMmAyxm7SvLA//xbDV8t4q+DHWew+DJXDxYqA0gtYEMttcjpqbRV\n4V0T46FupOolvXr+/aQKnamfGpKmONh4rswOgDEQ0meHdIAtQQB5I2J1ekypZlyi\nXjgUtsQzqcLaYndOk+dKyVQdD8OkHh3aYVGAz4IJccggZrDsbnY=\n=SurB\n-----END PGP SIGNATURE-----", "payload": "tree a1fb95734dea16e2095f1af29b31b16dd89c5b47\nparent e64b27525b7b9a39281e64c408cc0b4c23252e02\nauthor James Wang <jameswang9909@hotmail.com> 1570209532 -0500\ncommitter flip1995 <hello@philkrones.com> 1571126291 +0200\n\nChange lint to be pedantic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e23a424b318891062397d61f70e6eab06f3092c0", "html_url": "https://github.com/rust-lang/rust/commit/e23a424b318891062397d61f70e6eab06f3092c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e23a424b318891062397d61f70e6eab06f3092c0/comments", "author": {"login": "james9909", "id": 9091144, "node_id": "MDQ6VXNlcjkwOTExNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9091144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/james9909", "html_url": "https://github.com/james9909", "followers_url": "https://api.github.com/users/james9909/followers", "following_url": "https://api.github.com/users/james9909/following{/other_user}", "gists_url": "https://api.github.com/users/james9909/gists{/gist_id}", "starred_url": "https://api.github.com/users/james9909/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/james9909/subscriptions", "organizations_url": "https://api.github.com/users/james9909/orgs", "repos_url": "https://api.github.com/users/james9909/repos", "events_url": "https://api.github.com/users/james9909/events{/privacy}", "received_events_url": "https://api.github.com/users/james9909/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e64b27525b7b9a39281e64c408cc0b4c23252e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/e64b27525b7b9a39281e64c408cc0b4c23252e02", "html_url": "https://github.com/rust-lang/rust/commit/e64b27525b7b9a39281e64c408cc0b4c23252e02"}], "stats": {"total": 367, "additions": 176, "deletions": 191}, "files": [{"sha": "e8962c6e2071d97038b2d2e5e4aa2d5ade97189e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -685,6 +685,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         types::LINKEDLIST,\n         unicode::NON_ASCII_LITERAL,\n         unicode::UNICODE_NOT_NFC,\n+        unused_self::UNUSED_SELF,\n         use_self::USE_SELF,\n     ]);\n \n@@ -928,7 +929,6 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,\n         unused_label::UNUSED_LABEL,\n-        unused_self::UNUSED_SELF,\n         unwrap::PANICKING_UNWRAP,\n         unwrap::UNNECESSARY_UNWRAP,\n         vec::USELESS_VEC,\n@@ -1107,7 +1107,6 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         types::UNNECESSARY_CAST,\n         types::VEC_BOX,\n         unused_label::UNUSED_LABEL,\n-        unused_self::UNUSED_SELF,\n         unwrap::UNNECESSARY_UNWRAP,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);"}, {"sha": "fee902604b22650c09705aa920019c378ca2b8ea", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub UNUSED_SELF,\n-    complexity,\n+    pedantic,\n     \"methods that contain a `self` argument but don't use it\"\n }\n \n@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n                         let body = cx.tcx.hir().body(*body_id);\n                         let self_param = &body.params[0];\n                         let self_hir_id = self_param.pat.hir_id;\n-                        let visitor = &mut UnusedSelfVisitor {\n+                        let mut visitor = UnusedSelfVisitor {\n                             cx,\n                             uses_self: false,\n                             self_hir_id: &self_hir_id,"}, {"sha": "d9ae1f70d42b64e886305846be6eb634504c48f3", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -2088,7 +2088,7 @@ pub const ALL_LINTS: [Lint; 325] = [\n     },\n     Lint {\n         name: \"unused_self\",\n-        group: \"complexity\",\n+        group: \"pedantic\",\n         desc: \"methods that contain a `self` argument but don\\'t use it\",\n         deprecation: None,\n         module: \"unused_self\","}, {"sha": "ece20fb1eabb9ca9df68d0b10618c08f3ca27a81", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::nonminimal_bool, clippy::logic_bug)]\n-#![allow(clippy::unused_self)]\n \n #[allow(unused, clippy::many_single_char_names)]\n fn main() {"}, {"sha": "ab0b54e26d70f65cf5c8602264fe9076fb3beb2e", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,74 +1,74 @@\n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:11:13\n+  --> $DIR/booleans.rs:10:13\n    |\n LL |     let _ = a && b || a;\n    |             ^^^^^^^^^^^ help: it would look like the following: `a`\n    |\n    = note: `-D clippy::logic-bug` implied by `-D warnings`\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:11:18\n+  --> $DIR/booleans.rs:10:18\n    |\n LL |     let _ = a && b || a;\n    |                  ^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:13:13\n+  --> $DIR/booleans.rs:12:13\n    |\n LL |     let _ = !true;\n    |             ^^^^^ help: try: `false`\n    |\n    = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:14:13\n+  --> $DIR/booleans.rs:13:13\n    |\n LL |     let _ = !false;\n    |             ^^^^^^ help: try: `true`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:15:13\n+  --> $DIR/booleans.rs:14:13\n    |\n LL |     let _ = !!a;\n    |             ^^^ help: try: `a`\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:16:13\n+  --> $DIR/booleans.rs:15:13\n    |\n LL |     let _ = false && a;\n    |             ^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:16:22\n+  --> $DIR/booleans.rs:15:22\n    |\n LL |     let _ = false && a;\n    |                      ^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:17:13\n+  --> $DIR/booleans.rs:16:13\n    |\n LL |     let _ = false || a;\n    |             ^^^^^^^^^^ help: try: `a`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:22:13\n+  --> $DIR/booleans.rs:21:13\n    |\n LL |     let _ = !(!a && b);\n    |             ^^^^^^^^^^ help: try: `!b || a`\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:32:13\n+  --> $DIR/booleans.rs:31:13\n    |\n LL |     let _ = a == b && a != b;\n    |             ^^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:32:13\n+  --> $DIR/booleans.rs:31:13\n    |\n LL |     let _ = a == b && a != b;\n    |             ^^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:33:13\n+  --> $DIR/booleans.rs:32:13\n    |\n LL |     let _ = a == b && c == 5 && a == b;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     let _ = !(c != 5 || a != b);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:34:13\n+  --> $DIR/booleans.rs:33:13\n    |\n LL |     let _ = a == b && c == 5 && b == a;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -92,31 +92,31 @@ LL |     let _ = !(c != 5 || a != b);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:35:13\n+  --> $DIR/booleans.rs:34:13\n    |\n LL |     let _ = a < b && a >= b;\n    |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:35:13\n+  --> $DIR/booleans.rs:34:13\n    |\n LL |     let _ = a < b && a >= b;\n    |             ^^^^^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:36:13\n+  --> $DIR/booleans.rs:35:13\n    |\n LL |     let _ = a > b && a <= b;\n    |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:36:13\n+  --> $DIR/booleans.rs:35:13\n    |\n LL |     let _ = a > b && a <= b;\n    |             ^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:38:13\n+  --> $DIR/booleans.rs:37:13\n    |\n LL |     let _ = a != b || !(a != b || c == d);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -128,73 +128,73 @@ LL |     let _ = !(a == b && c == d);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:46:13\n+  --> $DIR/booleans.rs:45:13\n    |\n LL |     let _ = !a.is_some();\n    |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:48:13\n+  --> $DIR/booleans.rs:47:13\n    |\n LL |     let _ = !a.is_none();\n    |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:50:13\n+  --> $DIR/booleans.rs:49:13\n    |\n LL |     let _ = !b.is_err();\n    |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:52:13\n+  --> $DIR/booleans.rs:51:13\n    |\n LL |     let _ = !b.is_ok();\n    |             ^^^^^^^^^^ help: try: `b.is_err()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:54:13\n+  --> $DIR/booleans.rs:53:13\n    |\n LL |     let _ = !(a.is_some() && !c);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: try: `c || a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:55:26\n+  --> $DIR/booleans.rs:54:26\n    |\n LL |     let _ = !(!c ^ c) || !a.is_some();\n    |                          ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:56:25\n+  --> $DIR/booleans.rs:55:25\n    |\n LL |     let _ = (!c ^ c) || !a.is_some();\n    |                         ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:57:23\n+  --> $DIR/booleans.rs:56:23\n    |\n LL |     let _ = !c ^ c || !a.is_some();\n    |                       ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:129:8\n+  --> $DIR/booleans.rs:128:8\n    |\n LL |     if !res.is_ok() {}\n    |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:130:8\n+  --> $DIR/booleans.rs:129:8\n    |\n LL |     if !res.is_err() {}\n    |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:133:8\n+  --> $DIR/booleans.rs:132:8\n    |\n LL |     if !res.is_some() {}\n    |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:134:8\n+  --> $DIR/booleans.rs:133:8\n    |\n LL |     if !res.is_none() {}\n    |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`"}, {"sha": "be61fb6b9be613cca8bd66f622644b253af6cabd", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::all)]\n-#![allow(unused, clippy::needless_pass_by_value, clippy::vec_box, clippy::unused_self)]\n+#![allow(unused, clippy::needless_pass_by_value, clippy::vec_box)]\n #![feature(associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "2a948d60b108954b6a6e31980f960449ac91c835", "filename": "tests/ui/def_id_nocore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -22,7 +22,6 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n \n pub struct A;\n \n-#[allow(clippy::unused_self)]\n impl A {\n     pub fn as_ref(self) -> &'static str {\n         \"A\""}, {"sha": "ed87a50547d17398a13790c1ab9ad7e4114aabe0", "filename": "tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,5 +1,5 @@\n error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n-  --> $DIR/def_id_nocore.rs:27:19\n+  --> $DIR/def_id_nocore.rs:26:19\n    |\n LL |     pub fn as_ref(self) -> &'static str {\n    |                   ^^^^"}, {"sha": "746afa475039e99c5967bb27615f1b3b09531638", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,6 @@\n #![feature(never_type)]\n #![warn(clippy::diverging_sub_expression)]\n-#![allow(clippy::match_same_arms, clippy::logic_bug, clippy::unused_self)]\n+#![allow(clippy::match_same_arms, clippy::logic_bug)]\n \n #[allow(clippy::empty_loop)]\n fn diverge() -> ! {"}, {"sha": "5d62a6d9b01efe8926a4de38f7b683ab7cf27f28", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -7,8 +7,7 @@\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n     clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref,\n-    clippy::unused_self\n+    clippy::trivially_copy_pass_by_ref\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "a9c4b209960c9838d7ff55aa12051eb56a73d5b3", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -7,8 +7,7 @@\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n     clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref,\n-    clippy::unused_self\n+    clippy::trivially_copy_pass_by_ref\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "d19d21eec0dbbe26ba15f4128a51912ab1f0564c", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,77 +1,77 @@\n error: redundant closure found\n-  --> $DIR/eta.rs:22:27\n+  --> $DIR/eta.rs:21:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:23:10\n+  --> $DIR/eta.rs:22:10\n    |\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:26:21\n+  --> $DIR/eta.rs:25:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:33:27\n+  --> $DIR/eta.rs:32:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:76:51\n+  --> $DIR/eta.rs:75:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:78:51\n+  --> $DIR/eta.rs:77:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:81:42\n+  --> $DIR/eta.rs:80:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:86:29\n+  --> $DIR/eta.rs:85:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:88:27\n+  --> $DIR/eta.rs:87:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:91:65\n+  --> $DIR/eta.rs:90:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:174:27\n+  --> $DIR/eta.rs:173:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:179:27\n+  --> $DIR/eta.rs:178:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`"}, {"sha": "e111ee3dfeda50b4723c6d02630f1e7237c0dc68", "filename": "tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.fixed?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![allow(clippy::unused_self)]\n #![warn(clippy::expect_fun_call)]\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint"}, {"sha": "891ec883120c1f4a5a535629991ef2f9806e415b", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![allow(clippy::unused_self)]\n #![warn(clippy::expect_fun_call)]\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint"}, {"sha": "bb16fabd973bafc48d7583f92883758a6e48c94e", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,67 +1,67 @@\n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:29:26\n+  --> $DIR/expect_fun_call.rs:28:26\n    |\n LL |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n    |\n    = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:32:26\n+  --> $DIR/expect_fun_call.rs:31:26\n    |\n LL |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:42:25\n+  --> $DIR/expect_fun_call.rs:41:25\n    |\n LL |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:45:25\n+  --> $DIR/expect_fun_call.rs:44:25\n    |\n LL |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:57:17\n+  --> $DIR/expect_fun_call.rs:56:17\n    |\n LL |     Some(\"foo\").expect(format!(\"{} {}\", 1, 2).as_ref());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{} {}\", 1, 2))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:78:21\n+  --> $DIR/expect_fun_call.rs:77:21\n    |\n LL |         Some(\"foo\").expect(&get_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:79:21\n+  --> $DIR/expect_fun_call.rs:78:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_ref());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:80:21\n+  --> $DIR/expect_fun_call.rs:79:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:82:21\n+  --> $DIR/expect_fun_call.rs:81:21\n    |\n LL |         Some(\"foo\").expect(get_static_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_static_str()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:83:21\n+  --> $DIR/expect_fun_call.rs:82:21\n    |\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:87:16\n+  --> $DIR/expect_fun_call.rs:86:16\n    |\n LL |     Some(true).expect(&format!(\"key {}, {}\", 1, 2));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"key {}, {}\", 1, 2))`"}, {"sha": "ba95fd63bf9a566b40bb3e922e4869da44d064cb", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -3,8 +3,7 @@\n     dead_code,\n     clippy::needless_lifetimes,\n     clippy::needless_pass_by_value,\n-    clippy::trivially_copy_pass_by_ref,\n-    clippy::unused_self\n+    clippy::trivially_copy_pass_by_ref\n )]\n #![warn(clippy::extra_unused_lifetimes)]\n "}, {"sha": "ebdb8e749520fed2bd95045043b76e60f5829543", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,25 +1,25 @@\n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:15:14\n+  --> $DIR/extra_unused_lifetimes.rs:14:14\n    |\n LL | fn unused_lt<'a>(x: u8) {}\n    |              ^^\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:17:25\n+  --> $DIR/extra_unused_lifetimes.rs:16:25\n    |\n LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n    |                         ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:42:10\n+  --> $DIR/extra_unused_lifetimes.rs:41:10\n    |\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:68:22\n+  --> $DIR/extra_unused_lifetimes.rs:67:22\n    |\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^"}, {"sha": "0a86568b18de9f09016db3b3f27c18ea66bb8825", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,13 +1,13 @@\n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:7:1\n+  --> $DIR/functions.rs:8:1\n    |\n LL | fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::too-many-arguments` implied by `-D warnings`\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:10:1\n+  --> $DIR/functions.rs:11:1\n    |\n LL | / fn bad_multiline(\n LL | |     one: u32,\n@@ -19,69 +19,69 @@ LL | | ) {\n    | |__^\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:44:5\n+  --> $DIR/functions.rs:45:5\n    |\n LL |     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:53:5\n+  --> $DIR/functions.rs:54:5\n    |\n LL |     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:62:34\n+  --> $DIR/functions.rs:63:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n    |\n    = note: `-D clippy::not-unsafe-ptr-arg-deref` implied by `-D warnings`\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:63:35\n+  --> $DIR/functions.rs:64:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:64:33\n+  --> $DIR/functions.rs:65:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:75:30\n+  --> $DIR/functions.rs:76:30\n    |\n LL |     println!(\"{}\", unsafe { *p });\n    |                              ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:76:31\n+  --> $DIR/functions.rs:77:31\n    |\n LL |     println!(\"{:?}\", unsafe { p.as_ref() });\n    |                               ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:77:29\n+  --> $DIR/functions.rs:78:29\n    |\n LL |     unsafe { std::ptr::read(p) };\n    |                             ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:86:34\n+  --> $DIR/functions.rs:87:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:87:35\n+  --> $DIR/functions.rs:88:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:88:33\n+  --> $DIR/functions.rs:89:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^"}, {"sha": "e6cf337d1bb1baa932b13f3665cdc8d7764395ee", "filename": "tests/ui/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::inherent_to_string)]\n #![deny(clippy::inherent_to_string_shadow_display)]\n-#![allow(clippy::many_single_char_names, clippy::unused_self)]\n+#![allow(clippy::many_single_char_names)]\n \n use std::fmt;\n "}, {"sha": "9c21dd82ee45efe0a70c1f0b08b2b0688502fa13", "filename": "tests/ui/iter_nth.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,5 @@\n // aux-build:option_helpers.rs\n \n-#![allow(clippy::unused_self)]\n #![warn(clippy::iter_nth)]\n \n #[macro_use]"}, {"sha": "70412f784040a47f62330da2766420cb8caf9398", "filename": "tests/ui/iter_nth.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fiter_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fiter_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,43 +1,43 @@\n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:34:23\n+  --> $DIR/iter_nth.rs:33:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:35:26\n+  --> $DIR/iter_nth.rs:34:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:36:31\n+  --> $DIR/iter_nth.rs:35:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:37:29\n+  --> $DIR/iter_nth.rs:36:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:42:23\n+  --> $DIR/iter_nth.rs:41:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:45:26\n+  --> $DIR/iter_nth.rs:44:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/iter_nth.rs:48:29\n+  --> $DIR/iter_nth.rs:47:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3ef29dd63880b7f62757d82ab6a2f6bdf2dfc341", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::len_without_is_empty)]\n-#![allow(dead_code, unused, clippy::unused_self)]\n+#![allow(dead_code, unused)]\n \n pub struct PubOne;\n "}, {"sha": "624e5ef8fcf13129184a1c5b1580ce50ad6c696c", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::len_zero)]\n-#![allow(dead_code, unused, clippy::len_without_is_empty, clippy::unused_self)]\n+#![allow(dead_code, unused, clippy::len_without_is_empty)]\n \n pub struct One;\n struct Wither;"}, {"sha": "7fba971cfd8876ebb0e2713cdd09e492586b473c", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::len_zero)]\n-#![allow(dead_code, unused, clippy::len_without_is_empty, clippy::unused_self)]\n+#![allow(dead_code, unused, clippy::len_without_is_empty)]\n \n pub struct One;\n struct Wither;"}, {"sha": "9a74da4e3b8b641ef4387246ab1f24ea7800de4d", "filename": "tests/ui/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unit_fn.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::unused_self)]\n+#![allow(unused)]\n struct Mappable {}\n \n impl Mappable {"}, {"sha": "54a58e0c86a800eaf929f4aba48016990ef05255", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -14,6 +14,7 @@\n     clippy::use_self,\n     clippy::useless_format,\n     clippy::wrong_self_convention,\n+    clippy::unused_self,\n     unused\n )]\n "}, {"sha": "c3dc08be00b90c0a40a1de775a7190364541e3c5", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:37:5\n+  --> $DIR/methods.rs:38:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:153:5\n+  --> $DIR/methods.rs:154:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -19,7 +19,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:175:13\n+  --> $DIR/methods.rs:176:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -31,7 +31,7 @@ LL | |                .unwrap_or(0);\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:179:13\n+  --> $DIR/methods.rs:180:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -41,7 +41,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:183:13\n+  --> $DIR/methods.rs:184:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -51,15 +51,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:188:13\n+  --> $DIR/methods.rs:189:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:190:13\n+  --> $DIR/methods.rs:191:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -69,7 +69,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:194:13\n+  --> $DIR/methods.rs:195:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -80,15 +80,15 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:205:13\n+  --> $DIR/methods.rs:206:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:209:13\n+  --> $DIR/methods.rs:210:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -100,7 +100,7 @@ LL | |                .unwrap_or_else(|| 0);\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:213:13\n+  --> $DIR/methods.rs:214:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -110,7 +110,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:217:13\n+  --> $DIR/methods.rs:218:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -120,7 +120,7 @@ LL | |                 );\n    | |_________________^\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:247:13\n+  --> $DIR/methods.rs:248:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,7 +129,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:250:13\n+  --> $DIR/methods.rs:251:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -139,33 +139,33 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:267:22\n+  --> $DIR/methods.rs:268:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:268:20\n+  --> $DIR/methods.rs:269:20\n    |\n LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:269:20\n+  --> $DIR/methods.rs:270:20\n    |\n LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:270:22\n+  --> $DIR/methods.rs:271:22\n    |\n LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:273:13\n+  --> $DIR/methods.rs:274:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -175,13 +175,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:279:22\n+  --> $DIR/methods.rs:280:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:282:13\n+  --> $DIR/methods.rs:283:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -191,13 +191,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:288:22\n+  --> $DIR/methods.rs:289:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:291:13\n+  --> $DIR/methods.rs:292:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -207,7 +207,7 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:306:13\n+  --> $DIR/methods.rs:307:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}, {"sha": "f367279906fda13f992c8bd3bb715f556da6e7d6", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -2,7 +2,6 @@\n //! compilation error.\n //! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n \n-#![allow(clippy::unused_self)]\n #![warn(clippy::missing_const_for_fn)]\n #![feature(start)]\n "}, {"sha": "9109d255ca789cc2758f80b1bea67ef3e6e27829", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::missing_const_for_fn)]\n-#![allow(clippy::let_and_return, clippy::unused_self)]\n+#![allow(clippy::let_and_return)]\n \n use std::mem::transmute;\n "}, {"sha": "8f9ed7ed6374ae54be266c9c7476a31e65ed273a", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::trivially_copy_pass_by_ref, clippy::unused_self)]\n+#![allow(unused, clippy::trivially_copy_pass_by_ref)]\n #![warn(clippy::mut_from_ref)]\n \n struct Foo;"}, {"sha": "c4379e0ea1c463c6fb0b345b71da3a774b55d627", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_variables, clippy::trivially_copy_pass_by_ref, clippy::unused_self)]\n+#![allow(unused_variables, clippy::trivially_copy_pass_by_ref)]\n \n fn takes_an_immutable_reference(a: &i32) {}\n fn takes_a_mutable_reference(a: &mut i32) {}"}, {"sha": "f3fdd48633f80ea29ad892d05607f4f71c4f4235", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,10 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(\n-    dead_code,\n-    clippy::needless_pass_by_value,\n-    clippy::trivially_copy_pass_by_ref,\n-    clippy::unused_self\n-)]\n+#![allow(dead_code, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "ad55fc5f750d005e16ba5148b4a18dabff2fcb09", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,35 +1,35 @@\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:9:1\n+  --> $DIR/needless_lifetimes.rs:4:1\n    |\n LL | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:11:1\n+  --> $DIR/needless_lifetimes.rs:6:1\n    |\n LL | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:21:1\n+  --> $DIR/needless_lifetimes.rs:16:1\n    |\n LL | / fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n LL | |     x\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:50:1\n+  --> $DIR/needless_lifetimes.rs:45:1\n    |\n LL | / fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n LL | |     Ok(x)\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:55:1\n+  --> $DIR/needless_lifetimes.rs:50:1\n    |\n LL | / fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n LL | | where\n@@ -40,13 +40,13 @@ LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:67:1\n+  --> $DIR/needless_lifetimes.rs:62:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:91:1\n+  --> $DIR/needless_lifetimes.rs:86:1\n    |\n LL | / fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n LL | | where\n@@ -57,75 +57,75 @@ LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:125:5\n+  --> $DIR/needless_lifetimes.rs:120:5\n    |\n LL | /     fn self_and_out<'s>(&'s self) -> &'s u8 {\n LL | |         &self.x\n LL | |     }\n    | |_____^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:134:5\n+  --> $DIR/needless_lifetimes.rs:129:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:153:1\n+  --> $DIR/needless_lifetimes.rs:148:1\n    |\n LL | / fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:183:1\n+  --> $DIR/needless_lifetimes.rs:178:1\n    |\n LL | / fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:189:1\n+  --> $DIR/needless_lifetimes.rs:184:1\n    |\n LL | / fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:208:1\n+  --> $DIR/needless_lifetimes.rs:203:1\n    |\n LL | / fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:216:1\n+  --> $DIR/needless_lifetimes.rs:211:1\n    |\n LL | / fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:252:1\n+  --> $DIR/needless_lifetimes.rs:247:1\n    |\n LL | / fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:259:9\n+  --> $DIR/needless_lifetimes.rs:254:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:263:9\n+  --> $DIR/needless_lifetimes.rs:258:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ad153e4fc1948f9a5824ba9e3a8a8cf225d7fc9e", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::option_map_unit_fn)]\n-#![allow(unused, clippy::unused_self)]\n+#![allow(unused)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "6926498341ac2e0a6cb8fe4969b3a37cee930195", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::option_map_unit_fn)]\n-#![allow(unused, clippy::unused_self)]\n+#![allow(unused)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "d0c5cc93bd92bc8a51abbaa2e3442d51672c99b3", "filename": "tests/ui/range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,4 @@\n struct NotARange;\n-\n-#[allow(clippy::unused_self)]\n impl NotARange {\n     fn step_by(&self, _: u32) {}\n }"}, {"sha": "387d1f674cb275649b0726f27d469058a0583be9", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,39 +1,39 @@\n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:10:13\n+  --> $DIR/range.rs:8:13\n    |\n LL |     let _ = (0..1).step_by(0);\n    |             ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iterator-step-by-zero` implied by `-D warnings`\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:14:13\n+  --> $DIR/range.rs:12:13\n    |\n LL |     let _ = (1..).step_by(0);\n    |             ^^^^^^^^^^^^^^^^\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:15:13\n+  --> $DIR/range.rs:13:13\n    |\n LL |     let _ = (1..=2).step_by(0);\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:18:13\n+  --> $DIR/range.rs:16:13\n    |\n LL |     let _ = x.step_by(0);\n    |             ^^^^^^^^^^^^\n \n error: It is more idiomatic to use v1.iter().enumerate()\n-  --> $DIR/range.rs:26:14\n+  --> $DIR/range.rs:24:14\n    |\n LL |     let _x = v1.iter().zip(0..v1.len());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::range-zip-with-len` implied by `-D warnings`\n \n error: Iterator::step_by(0) will panic at runtime\n-  --> $DIR/range.rs:30:13\n+  --> $DIR/range.rs:28:13\n    |\n LL |     let _ = v1.iter().step_by(2 / 3);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "64d39516be71329c4aec67a2dc9db9a6c7c5313d", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n-#![allow(unused, clippy::unused_self)]\n+#![allow(unused)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "bf4aba8a7cc134b04c882521a86d3b38e0f60750", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n-#![allow(unused, clippy::unused_self)]\n+#![allow(unused)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "1883a9f8325783ecb7949b9d21bf791842c701ff", "filename": "tests/ui/string_extend.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fstring_extend.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fstring_extend.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.fixed?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -3,7 +3,6 @@\n #[derive(Copy, Clone)]\n struct HasChars;\n \n-#[allow(clippy::unused_self)]\n impl HasChars {\n     fn chars(self) -> std::str::Chars<'static> {\n         \"HasChars\".chars()"}, {"sha": "07d0baa1be6c7ee5ecbf653ec408b491d959de48", "filename": "tests/ui/string_extend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fstring_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fstring_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -3,7 +3,6 @@\n #[derive(Copy, Clone)]\n struct HasChars;\n \n-#[allow(clippy::unused_self)]\n impl HasChars {\n     fn chars(self) -> std::str::Chars<'static> {\n         \"HasChars\".chars()"}, {"sha": "6af8c9e1662b5b970237dfe206e83ce6b13cc8be", "filename": "tests/ui/string_extend.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fstring_extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fstring_extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,19 +1,19 @@\n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:19:5\n+  --> $DIR/string_extend.rs:18:5\n    |\n LL |     s.extend(abc.chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n    |\n    = note: `-D clippy::string-extend-chars` implied by `-D warnings`\n \n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:22:5\n+  --> $DIR/string_extend.rs:21:5\n    |\n LL |     s.extend(\"abc\".chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n \n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:25:5\n+  --> $DIR/string_extend.rs:24:5\n    |\n LL |     s.extend(def.chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`"}, {"sha": "bd23aa99ceb0e8abb81b25414dc300fb691a921c", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -4,8 +4,7 @@\n #![allow(\n     clippy::many_single_char_names,\n     clippy::blacklisted_name,\n-    clippy::redundant_field_names,\n-    clippy::unused_self\n+    clippy::redundant_field_names\n )]\n \n #[derive(Copy, Clone)]"}, {"sha": "1addc3d7195d933d00ae5e554531c3280fa9c141", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,91 +1,91 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:51:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:11\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n    = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:51:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:20\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:51:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:29\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:58:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:57:12\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:58:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:57:22\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:58:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:57:31\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:58:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:57:40\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:60:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:59:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:60:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:59:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:60:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:59:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:72:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:71:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:72:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:71:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:72:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:71:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:76:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:75:34\n    |\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:80:37\n+  --> $DIR/trivially_copy_pass_by_ref.rs:79:37\n    |\n LL |     fn trait_method2(&self, _color: &Color);\n    |                                     ^^^^^^ help: consider passing by value instead: `Color`"}, {"sha": "cf146c91f6d0105299d94fb1a278fc9619df9389", "filename": "tests/ui/unit_arg.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funit_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funit_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.fixed?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, clippy::unused_self, unused_must_use)]\n+#![allow(clippy::no_effect, unused_must_use)]\n \n use std::fmt::Debug;\n "}, {"sha": "c15b0a50045565b691a751af079e54211030e052", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, clippy::unused_self, unused_must_use)]\n+#![allow(clippy::no_effect, unused_must_use)]\n \n use std::fmt::Debug;\n "}, {"sha": "9119c43c082ca4c87cbc04238baba20c5f21555b", "filename": "tests/ui/unused_self.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -102,6 +102,10 @@ mod not_applicable {\n     impl A {\n         fn method(x: u8, y: u8) {}\n     }\n+\n+    trait B {\n+        fn method(&self) {}\n+    }\n }\n \n fn main() {}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/unused_self.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e64b27525b7b9a39281e64c408cc0b4c23252e02/tests%2Fui%2Funused_self.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e64b27525b7b9a39281e64c408cc0b4c23252e02/tests%2Fui%2Funused_self.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.stdout?ref=e64b27525b7b9a39281e64c408cc0b4c23252e02"}, {"sha": "3f63624720f7553276aea8c6f721bed2c573066e", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -10,7 +10,7 @@\n #![rustfmt::skip]\n \n #![deny(clippy::unused_unit)]\n-#![allow(dead_code, clippy::unused_self)]\n+#![allow(dead_code)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "8fc072ebd69f848ffc41dd09306febf07e459a96", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -10,7 +10,7 @@\n #![rustfmt::skip]\n \n #![deny(clippy::unused_unit)]\n-#![allow(dead_code, clippy::unused_self)]\n+#![allow(dead_code)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "7567fa7158cb0b3666211a91628c50c2855051ac", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23a424b318891062397d61f70e6eab06f3092c0/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=e23a424b318891062397d61f70e6eab06f3092c0", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::wrong_self_convention)]\n #![warn(clippy::wrong_pub_self_convention)]\n-#![allow(dead_code, clippy::trivially_copy_pass_by_ref, clippy::unused_self)]\n+#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n \n fn main() {}\n "}]}