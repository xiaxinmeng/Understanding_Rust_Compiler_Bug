{"sha": "f9ba829f6701ae03a5c226044dbbde13ce87e123", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YmE4MjlmNjcwMWFlMDNhNWMyMjYwNDRkYmJkZTEzY2U4N2UxMjM=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-09T13:35:41Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-09T14:09:08Z"}, "message": "should_impl_trait - self linting", "tree": {"sha": "ffab94be4600465e163338979193d4b1ae650259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffab94be4600465e163338979193d4b1ae650259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9ba829f6701ae03a5c226044dbbde13ce87e123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ba829f6701ae03a5c226044dbbde13ce87e123", "html_url": "https://github.com/rust-lang/rust/commit/f9ba829f6701ae03a5c226044dbbde13ce87e123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9ba829f6701ae03a5c226044dbbde13ce87e123/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "166c520e9a8b1a45819255e75dee737136aa6ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/166c520e9a8b1a45819255e75dee737136aa6ec8", "html_url": "https://github.com/rust-lang/rust/commit/166c520e9a8b1a45819255e75dee737136aa6ec8"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "07e55ab076249bbe790e93e0cbe9ad95d97ee1ff", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f9ba829f6701ae03a5c226044dbbde13ce87e123/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ba829f6701ae03a5c226044dbbde13ce87e123/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f9ba829f6701ae03a5c226044dbbde13ce87e123", "patch": "@@ -1470,6 +1470,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         }\n     }\n \n+    #[allow(clippy::too_many_lines)]\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         if in_external_macro(cx.sess(), impl_item.span) {\n             return;\n@@ -1501,7 +1502,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                             sig.decl.inputs.len() == method_config.param_count &&\n                             method_config.output_type.matches(cx, &sig.decl.output) &&\n                             method_config.self_kind.matches(cx, self_ty, first_arg_ty) &&\n-                            fn_header_equals(*method_config.fn_header, sig.header) &&\n+                            fn_header_equals(method_config.fn_header, sig.header) &&\n                             method_config.lifetime_param_cond(&impl_item)\n                         {\n                             span_lint_and_help(\n@@ -3422,7 +3423,7 @@ struct ShouldImplTraitCase {\n     trait_name: &'static str,\n     method_name: &'static str,\n     param_count: usize,\n-    fn_header: &'static hir::FnHeader,\n+    fn_header: hir::FnHeader,\n     // implicit self kind expected (none, self, &self, ...)\n     self_kind: SelfKind,\n     // checks against the output type\n@@ -3435,7 +3436,7 @@ impl ShouldImplTraitCase {\n         trait_name: &'static str,\n         method_name: &'static str,\n         param_count: usize,\n-        fn_header: &'static hir::FnHeader,\n+        fn_header: hir::FnHeader,\n         self_kind: SelfKind,\n         output_type: OutType,\n         lint_explicit_lifetime: bool,\n@@ -3466,37 +3467,37 @@ impl ShouldImplTraitCase {\n \n #[rustfmt::skip]\n const TRAIT_METHODS: [ShouldImplTraitCase; 30] = [\n-    ShouldImplTraitCase::new(\"std::ops::Add\", \"add\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::convert::AsMut\", \"as_mut\",  1,  &FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n-    ShouldImplTraitCase::new(\"std::convert::AsRef\", \"as_ref\",  1,  &FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n-    ShouldImplTraitCase::new(\"std::ops::BitAnd\", \"bitand\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::BitOr\", \"bitor\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::BitXor\", \"bitxor\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::borrow::Borrow\", \"borrow\",  1,  &FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n-    ShouldImplTraitCase::new(\"std::borrow::BorrowMut\", \"borrow_mut\",  1,  &FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n-    ShouldImplTraitCase::new(\"std::clone::Clone\", \"clone\",  1,  &FN_HEADER,  SelfKind::Ref,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::cmp::Ord\", \"cmp\",  2,  &FN_HEADER,  SelfKind::Ref,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Add\", \"add\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::convert::AsMut\", \"as_mut\",  1,  FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n+    ShouldImplTraitCase::new(\"std::convert::AsRef\", \"as_ref\",  1,  FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n+    ShouldImplTraitCase::new(\"std::ops::BitAnd\", \"bitand\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::BitOr\", \"bitor\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::BitXor\", \"bitxor\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::borrow::Borrow\", \"borrow\",  1,  FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n+    ShouldImplTraitCase::new(\"std::borrow::BorrowMut\", \"borrow_mut\",  1,  FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n+    ShouldImplTraitCase::new(\"std::clone::Clone\", \"clone\",  1,  FN_HEADER,  SelfKind::Ref,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::cmp::Ord\", \"cmp\",  2,  FN_HEADER,  SelfKind::Ref,  OutType::Any, true),\n     // FIXME: default doesn't work\n-    ShouldImplTraitCase::new(\"std::default::Default\", \"default\",  0,  &FN_HEADER,  SelfKind::No,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::Deref\", \"deref\",  1,  &FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n-    ShouldImplTraitCase::new(\"std::ops::DerefMut\", \"deref_mut\",  1,  &FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n-    ShouldImplTraitCase::new(\"std::ops::Div\", \"div\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::Drop\", \"drop\",  1,  &FN_HEADER,  SelfKind::RefMut,  OutType::Unit, true),\n-    ShouldImplTraitCase::new(\"std::cmp::PartialEq\", \"eq\",  2,  &FN_HEADER,  SelfKind::Ref,  OutType::Bool, true),\n-    ShouldImplTraitCase::new(\"std::iter::FromIterator\", \"from_iter\",  1,  &FN_HEADER,  SelfKind::No,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::str::FromStr\", \"from_str\",  1,  &FN_HEADER,  SelfKind::No,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::hash::Hash\", \"hash\",  2,  &FN_HEADER,  SelfKind::Ref,  OutType::Unit, true),\n-    ShouldImplTraitCase::new(\"std::ops::Index\", \"index\",  2,  &FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n-    ShouldImplTraitCase::new(\"std::ops::IndexMut\", \"index_mut\",  2,  &FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n-    ShouldImplTraitCase::new(\"std::iter::IntoIterator\", \"into_iter\",  1,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::Mul\", \"mul\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::Neg\", \"neg\",  1,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::iter::Iterator\", \"next\",  1,  &FN_HEADER,  SelfKind::RefMut,  OutType::Any, false),\n-    ShouldImplTraitCase::new(\"std::ops::Not\", \"not\",  1,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::Rem\", \"rem\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::Shl\", \"shl\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::Shr\", \"shr\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n-    ShouldImplTraitCase::new(\"std::ops::Sub\", \"sub\",  2,  &FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::default::Default\", \"default\",  0,  FN_HEADER,  SelfKind::No,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Deref\", \"deref\",  1,  FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n+    ShouldImplTraitCase::new(\"std::ops::DerefMut\", \"deref_mut\",  1,  FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n+    ShouldImplTraitCase::new(\"std::ops::Div\", \"div\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Drop\", \"drop\",  1,  FN_HEADER,  SelfKind::RefMut,  OutType::Unit, true),\n+    ShouldImplTraitCase::new(\"std::cmp::PartialEq\", \"eq\",  2,  FN_HEADER,  SelfKind::Ref,  OutType::Bool, true),\n+    ShouldImplTraitCase::new(\"std::iter::FromIterator\", \"from_iter\",  1,  FN_HEADER,  SelfKind::No,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::str::FromStr\", \"from_str\",  1,  FN_HEADER,  SelfKind::No,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::hash::Hash\", \"hash\",  2,  FN_HEADER,  SelfKind::Ref,  OutType::Unit, true),\n+    ShouldImplTraitCase::new(\"std::ops::Index\", \"index\",  2,  FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n+    ShouldImplTraitCase::new(\"std::ops::IndexMut\", \"index_mut\",  2,  FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n+    ShouldImplTraitCase::new(\"std::iter::IntoIterator\", \"into_iter\",  1,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Mul\", \"mul\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Neg\", \"neg\",  1,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::iter::Iterator\", \"next\",  1,  FN_HEADER,  SelfKind::RefMut,  OutType::Any, false),\n+    ShouldImplTraitCase::new(\"std::ops::Not\", \"not\",  1,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Rem\", \"rem\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Shl\", \"shl\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Shr\", \"shr\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n+    ShouldImplTraitCase::new(\"std::ops::Sub\", \"sub\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n ];\n \n #[rustfmt::skip]"}]}