{"sha": "b4c35368f41c36484cfa7679acb53d40ffbcce35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YzM1MzY4ZjQxYzM2NDg0Y2ZhNzY3OWFjYjUzZDQwZmZiY2NlMzU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-26T14:01:57Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-26T20:34:53Z"}, "message": "Add test for doc comments unindent fix", "tree": {"sha": "1b5ea410aef1a35d1536508250e0cdc0b66836a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b5ea410aef1a35d1536508250e0cdc0b66836a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c35368f41c36484cfa7679acb53d40ffbcce35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c35368f41c36484cfa7679acb53d40ffbcce35", "html_url": "https://github.com/rust-lang/rust/commit/b4c35368f41c36484cfa7679acb53d40ffbcce35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c35368f41c36484cfa7679acb53d40ffbcce35/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fe27866920b3eaf6502f321ccb239cc617db10", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fe27866920b3eaf6502f321ccb239cc617db10", "html_url": "https://github.com/rust-lang/rust/commit/06fe27866920b3eaf6502f321ccb239cc617db10"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "5c1307b6628e36b3e36e3922df57d4c4c61d21d0", "filename": "src/librustdoc/passes/unindent_comments/tests.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b4c35368f41c36484cfa7679acb53d40ffbcce35/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c35368f41c36484cfa7679acb53d40ffbcce35/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs?ref=b4c35368f41c36484cfa7679acb53d40ffbcce35", "patch": "@@ -1,26 +1,38 @@\n use super::*;\n+use rustc_span::source_map::DUMMY_SP;\n+\n+fn create_doc_fragment(s: &str) -> Vec<DocFragment> {\n+    vec![DocFragment {\n+        line: 0,\n+        span: DUMMY_SP,\n+        parent_module: None,\n+        doc: s.to_string(),\n+        kind: DocFragmentKind::SugaredDoc,\n+    }]\n+}\n+\n+#[track_caller]\n+fn run_test(input: &str, expected: &str) {\n+    let mut s = create_doc_fragment(input);\n+    unindent_fragments(&mut s);\n+    assert_eq!(s[0].doc, expected);\n+}\n \n #[test]\n fn should_unindent() {\n-    let s = \"    line1\\n    line2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1\\nline2\");\n+    run_test(\"    line1\\n    line2\", \"line1\\nline2\");\n }\n \n #[test]\n fn should_unindent_multiple_paragraphs() {\n-    let s = \"    line1\\n\\n    line2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1\\n\\nline2\");\n+    run_test(\"    line1\\n\\n    line2\", \"line1\\n\\nline2\");\n }\n \n #[test]\n fn should_leave_multiple_indent_levels() {\n     // Line 2 is indented another level beyond the\n     // base indentation and should be preserved\n-    let s = \"    line1\\n\\n        line2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1\\n\\n    line2\");\n+    run_test(\"    line1\\n\\n        line2\", \"line1\\n\\n    line2\");\n }\n \n #[test]\n@@ -30,43 +42,27 @@ fn should_ignore_first_line_indent() {\n     //\n     // #[doc = \"Start way over here\n     //          and continue here\"]\n-    let s = \"line1\\n    line2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1\\nline2\");\n+    run_test(\"line1\\n    line2\", \"line1\\nline2\");\n }\n \n #[test]\n fn should_not_ignore_first_line_indent_in_a_single_line_para() {\n-    let s = \"line1\\n\\n    line2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1\\n\\n    line2\");\n+    run_test(\"line1\\n\\n    line2\", \"line1\\n\\n    line2\");\n }\n \n #[test]\n fn should_unindent_tabs() {\n-    let s = \"\\tline1\\n\\tline2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1\\nline2\");\n+    run_test(\"\\tline1\\n\\tline2\", \"line1\\nline2\");\n }\n \n #[test]\n fn should_trim_mixed_indentation() {\n-    let s = \"\\t    line1\\n\\t    line2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1\\nline2\");\n-\n-    let s = \"    \\tline1\\n    \\tline2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1\\nline2\");\n+    run_test(\"\\t    line1\\n\\t    line2\", \"line1\\nline2\");\n+    run_test(\"    \\tline1\\n    \\tline2\", \"line1\\nline2\");\n }\n \n #[test]\n fn should_not_trim() {\n-    let s = \"\\t    line1  \\n\\t    line2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1  \\nline2\");\n-\n-    let s = \"    \\tline1  \\n    \\tline2\".to_string();\n-    let r = unindent(&s);\n-    assert_eq!(r, \"line1  \\nline2\");\n+    run_test(\"\\t    line1  \\n\\t    line2\", \"line1  \\nline2\");\n+    run_test(\"    \\tline1  \\n    \\tline2\", \"line1  \\nline2\");\n }"}, {"sha": "5e3d71ae7d04ee53c61d1511070e97cedcfe4860", "filename": "src/test/rustdoc/unindent.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b4c35368f41c36484cfa7679acb53d40ffbcce35/src%2Ftest%2Frustdoc%2Funindent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c35368f41c36484cfa7679acb53d40ffbcce35/src%2Ftest%2Frustdoc%2Funindent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funindent.rs?ref=b4c35368f41c36484cfa7679acb53d40ffbcce35", "patch": "@@ -0,0 +1,23 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.Example.html\n+// @matches - '//pre[@class=\"rust rust-example-rendered\"]' \\\n+//     '(?m)let example = Example::new\\(\\)\\n    \\.first\\(\\)\\n    \\.second\\(\\)\\n    \\.build\\(\\);\\Z'\n+/// ```rust\n+/// let example = Example::new()\n+///     .first()\n+#[cfg_attr(not(feature = \"one\"), doc = \"    .second()\")]\n+///     .build();\n+/// ```\n+pub struct Example;\n+\n+// @has foo/struct.F.html\n+// @matches - '//pre[@class=\"rust rust-example-rendered\"]' \\\n+//     '(?m)let example = Example::new\\(\\)\\n    \\.first\\(\\)\\n    \\.another\\(\\)\\n    \\.build\\(\\);\\Z'\n+///```rust\n+///let example = Example::new()\n+///    .first()\n+#[cfg_attr(not(feature = \"one\"), doc = \"    .another()\")]\n+///    .build();\n+/// ```\n+pub struct F;"}]}