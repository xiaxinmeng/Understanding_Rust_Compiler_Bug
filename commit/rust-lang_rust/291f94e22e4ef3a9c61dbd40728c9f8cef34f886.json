{"sha": "291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "node_id": "C_kwDOAAsO6NoAKDI5MWY5NGUyMmU0ZWYzYTljNjFkYmQ0MDcyOGM5ZjhjZWYzNGY4ODY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-29T13:48:48Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-01T17:57:09Z"}, "message": "Fix up config docs", "tree": {"sha": "e0524a3a616c63cb6abefd8363dc6dea3bde00e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0524a3a616c63cb6abefd8363dc6dea3bde00e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "html_url": "https://github.com/rust-lang/rust/commit/291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6032bdf4bdce9e32f5ecf716a5b06a6edc3ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6032bdf4bdce9e32f5ecf716a5b06a6edc3ceb", "html_url": "https://github.com/rust-lang/rust/commit/cb6032bdf4bdce9e32f5ecf716a5b06a6edc3ceb"}], "stats": {"total": 144, "additions": 93, "deletions": 51}, "files": [{"sha": "aa09912f302dc0f712ff6bfb6b04ae486c204561", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "patch": "@@ -641,7 +641,7 @@ fn env_expand(\n         // unnecessary diagnostics for eg. `CARGO_PKG_NAME`.\n         if key == \"OUT_DIR\" {\n             err = Some(ExpandError::Other(\n-                r#\"`OUT_DIR` not set, enable \"run build scripts\" to fix\"#.into(),\n+                r#\"`OUT_DIR` not set, enable \"build scripts\" to fix\"#.into(),\n             ));\n         }\n "}, {"sha": "53d0131e02da42c1759df87d0f5e4d0a6531e089", "filename": "crates/ide-diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "patch": "@@ -111,7 +111,7 @@ macro_rules! env { () => {} }\n macro_rules! concat { () => {} }\n \n   include!(concat!(env!(\"OUT_DIR\"), \"/out.rs\"));\n-//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"run build scripts\" to fix\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"build scripts\" to fix\n \"#,\n         );\n     }\n@@ -161,7 +161,7 @@ fn main() {\n   //^^^^^^^^^^^^^ error: could not convert tokens\n \n     env!(\"OUT_DIR\");\n-  //^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"run build scripts\" to fix\n+  //^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"build scripts\" to fix\n \n     compile_error!(\"compile_error works\");\n   //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: compile_error works"}, {"sha": "75c1a31e934ef5ab8e832b89a374a6039d86194f", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "patch": "@@ -52,24 +52,35 @@ use crate::{\n // parsing the old name.\n config_data! {\n     struct ConfigData {\n-        /// Placeholder for missing expressions in assists.\n+        /// Placeholder expression to use for missing expressions in assists.\n         assist_expressionFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n \n         /// Automatically refresh project info via `cargo metadata` on\n         /// `Cargo.toml` changes.\n         cargo_autoreload: bool           = \"true\",\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n         cargo_buildScripts_enable: bool  = \"true\",\n-        /// Advanced option, fully override the command rust-analyzer uses to\n-        /// run build scripts and build procedural macros. The command should\n-        /// include `--message-format=json` or a similar option.\n+        /// Override the command rust-analyzer uses to run build scripts and\n+        /// build procedural macros. The command is required to output json\n+        /// and should therefor include `--message-format=json` or a similar\n+        /// option.\n+        ///\n+        /// By default, a cargo invocation will be constructed for the configured\n+        /// targets and features, with the following base command line:\n+        ///\n+        /// ```bash\n+        /// cargo check --quiet --workspace --message-format=json --all-targets\n+        /// ```\n+        /// .\n         cargo_buildScripts_overrideCommand: Option<Vec<String>> = \"null\",\n         /// Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n         /// avoid compiling unnecessary things.\n         cargo_buildScripts_useRustcWrapper: bool = \"true\",\n-        /// List of features to activate. Set to `\"all\"` to pass `--all-features` to cargo.\n+        /// List of features to activate.\n+        ///\n+        /// Set this to `\"all\"` to pass `--all-features` to cargo.\n         cargo_features: CargoFeatures      = \"[]\",\n-        /// Do not activate the `default` feature.\n+        /// Whether to pass `--no-default-features` to cargo.\n         cargo_noDefaultFeatures: bool    = \"false\",\n         /// Internal config for debugging, disables loading of sysroot crates.\n         cargo_noSysroot: bool            = \"false\",\n@@ -87,13 +98,23 @@ config_data! {\n         /// Extra arguments for `cargo check`.\n         checkOnSave_extraArgs: Vec<String>               = \"[]\",\n         /// List of features to activate. Defaults to\n-        /// `#rust-analyzer.cargo.features#`. Set to `\"all\"` to pass `--all-features` to cargo.\n+        /// `#rust-analyzer.cargo.features#`.\n+        ///\n+        /// Set to `\"all\"` to pass `--all-features` to cargo.\n         checkOnSave_features: Option<CargoFeatures>      = \"null\",\n         /// Do not activate the `default` feature.\n         checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n-        /// Advanced option, fully override the command rust-analyzer uses for\n-        /// checking. The command should include `--message-format=json` or\n-        /// similar option.\n+        /// Override the command rust-analyzer uses to  run build scripts and\n+        /// build procedural macros. The command is required to output json\n+        /// and should therefor include `--message-format=json` or a similar\n+        /// option.\n+        ///\n+        /// An example command would be:\n+        ///\n+        /// ```bash\n+        /// cargo check --workspace --message-format=json --all-targets\n+        /// ```\n+        /// .\n         checkOnSave_overrideCommand: Option<Vec<String>> = \"null\",\n         /// Check for a specific target. Defaults to\n         /// `#rust-analyzer.cargo.target#`.\n@@ -183,13 +204,13 @@ config_data! {\n         /// Controls file watching implementation.\n         files_watcher: String = \"\\\"client\\\"\",\n \n-        /// Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\n+        /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n-        /// Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n+        /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n         highlightRelated_exitPoints_enable: bool = \"true\",\n-        /// Enables highlighting of related references while hovering your mouse above any identifier.\n+        /// Enables highlighting of related references while the cursor is on any identifier.\n         highlightRelated_references_enable: bool = \"true\",\n-        /// Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\n+        /// Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.\n         highlightRelated_yieldPoints_enable: bool = \"true\",\n \n         /// Whether to show `Debug` action. Only applies when\n@@ -233,20 +254,20 @@ config_data! {\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n-        inlayHints_lifetimeElisionHints_useParameterNames: bool  = \"false\",\n+        inlayHints_lifetimeElisionHints_useParameterNames: bool    = \"false\",\n         /// Maximum length for inlay hints. Set to null to have an unlimited length.\n-        inlayHints_maxLength: Option<usize>                = \"25\",\n+        inlayHints_maxLength: Option<usize>                        = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n         inlayHints_parameterHints_enable: bool                     = \"true\",\n         /// Whether to show inlay type hints for compiler inserted reborrows.\n         inlayHints_reborrowHints_enable: bool                      = \"false\",\n         /// Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n-        inlayHints_renderColons: bool                      = \"true\",\n+        inlayHints_renderColons: bool                              = \"true\",\n         /// Whether to show inlay type hints for variables.\n         inlayHints_typeHints_enable: bool                          = \"true\",\n-        /// Whether to hide inlay hints for constructors.\n-        inlayHints_typeHints_hideNamedConstructor: bool          = \"false\",\n+        /// Whether to hide inlay type hints for constructors.\n+        inlayHints_typeHints_hideNamedConstructor: bool            = \"false\",\n \n         /// Join lines merges consecutive declaration and initialization of an assignment.\n         joinLines_joinAssignments: bool = \"true\",\n@@ -304,7 +325,7 @@ config_data! {\n \n         /// Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\n         procMacro_attributes_enable: bool = \"true\",\n-        /// Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\n+        /// Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.\n         procMacro_enable: bool                     = \"true\",\n         /// These proc-macros will be ignored when trying to expand them.\n         ///"}, {"sha": "c3fc4096a264ca37134cd3f810c55a6418f3f673", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "patch": "@@ -1,7 +1,7 @@\n [[rust-analyzer.assist.expressionFillDefault]]rust-analyzer.assist.expressionFillDefault (default: `\"todo\"`)::\n +\n --\n-Placeholder for missing expressions in assists.\n+Placeholder expression to use for missing expressions in assists.\n --\n [[rust-analyzer.cargo.autoreload]]rust-analyzer.cargo.autoreload (default: `true`)::\n +\n@@ -17,9 +17,18 @@ Run build scripts (`build.rs`) for more precise code analysis.\n [[rust-analyzer.cargo.buildScripts.overrideCommand]]rust-analyzer.cargo.buildScripts.overrideCommand (default: `null`)::\n +\n --\n-Advanced option, fully override the command rust-analyzer uses to\n-run build scripts and build procedural macros. The command should\n-include `--message-format=json` or a similar option.\n+Override the command rust-analyzer uses to run build scripts and\n+build procedural macros. The command is required to output json\n+and should therefor include `--message-format=json` or a similar\n+option.\n+\n+By default, a cargo invocation will be constructed for the configured\n+targets and features, with the following base command line:\n+\n+```bash\n+cargo check --quiet --workspace --message-format=json --all-targets\n+```\n+.\n --\n [[rust-analyzer.cargo.buildScripts.useRustcWrapper]]rust-analyzer.cargo.buildScripts.useRustcWrapper (default: `true`)::\n +\n@@ -30,12 +39,14 @@ avoid compiling unnecessary things.\n [[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::\n +\n --\n-List of features to activate. Set to `\"all\"` to pass `--all-features` to cargo.\n+List of features to activate.\n+\n+Set this to `\"all\"` to pass `--all-features` to cargo.\n --\n [[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n +\n --\n-Do not activate the `default` feature.\n+Whether to pass `--no-default-features` to cargo.\n --\n [[rust-analyzer.cargo.noSysroot]]rust-analyzer.cargo.noSysroot (default: `false`)::\n +\n@@ -76,7 +87,9 @@ Extra arguments for `cargo check`.\n +\n --\n List of features to activate. Defaults to\n-`#rust-analyzer.cargo.features#`. Set to `\"all\"` to pass `--all-features` to cargo.\n+`#rust-analyzer.cargo.features#`.\n+\n+Set to `\"all\"` to pass `--all-features` to cargo.\n --\n [[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n +\n@@ -86,9 +99,17 @@ Do not activate the `default` feature.\n [[rust-analyzer.checkOnSave.overrideCommand]]rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n +\n --\n-Advanced option, fully override the command rust-analyzer uses for\n-checking. The command should include `--message-format=json` or\n-similar option.\n+Override the command rust-analyzer uses to  run build scripts and\n+build procedural macros. The command is required to output json\n+and should therefor include `--message-format=json` or a similar\n+option.\n+\n+An example command would be:\n+\n+```bash\n+cargo check --workspace --message-format=json --all-targets\n+```\n+.\n --\n [[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `null`)::\n +\n@@ -226,22 +247,22 @@ Controls file watching implementation.\n [[rust-analyzer.highlightRelated.breakPoints.enable]]rust-analyzer.highlightRelated.breakPoints.enable (default: `true`)::\n +\n --\n-Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\n+Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n --\n [[rust-analyzer.highlightRelated.exitPoints.enable]]rust-analyzer.highlightRelated.exitPoints.enable (default: `true`)::\n +\n --\n-Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n+Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n --\n [[rust-analyzer.highlightRelated.references.enable]]rust-analyzer.highlightRelated.references.enable (default: `true`)::\n +\n --\n-Enables highlighting of related references while hovering your mouse above any identifier.\n+Enables highlighting of related references while the cursor is on any identifier.\n --\n [[rust-analyzer.highlightRelated.yieldPoints.enable]]rust-analyzer.highlightRelated.yieldPoints.enable (default: `true`)::\n +\n --\n-Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\n+Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.\n --\n [[rust-analyzer.hover.actions.debug.enable]]rust-analyzer.hover.actions.debug.enable (default: `true`)::\n +\n@@ -362,7 +383,7 @@ Whether to show inlay type hints for variables.\n [[rust-analyzer.inlayHints.typeHints.hideNamedConstructor]]rust-analyzer.inlayHints.typeHints.hideNamedConstructor (default: `false`)::\n +\n --\n-Whether to hide inlay hints for constructors.\n+Whether to hide inlay type hints for constructors.\n --\n [[rust-analyzer.joinLines.joinAssignments]]rust-analyzer.joinLines.joinAssignments (default: `true`)::\n +\n@@ -474,7 +495,7 @@ Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\n [[rust-analyzer.procMacro.enable]]rust-analyzer.procMacro.enable (default: `true`)::\n +\n --\n-Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\n+Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.\n --\n [[rust-analyzer.procMacro.ignored]]rust-analyzer.procMacro.ignored (default: `{}`)::\n +"}, {"sha": "4931ad9634004dd315dbaf0f16352d057793a778", "filename": "editors/code/package.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/291f94e22e4ef3a9c61dbd40728c9f8cef34f886/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "patch": "@@ -369,7 +369,7 @@\n                 },\n                 \"$generated-start\": {},\n                 \"rust-analyzer.assist.expressionFillDefault\": {\n-                    \"markdownDescription\": \"Placeholder for missing expressions in assists.\",\n+                    \"markdownDescription\": \"Placeholder expression to use for missing expressions in assists.\",\n                     \"default\": \"todo\",\n                     \"type\": \"string\",\n                     \"enum\": [\n@@ -392,7 +392,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.cargo.buildScripts.overrideCommand\": {\n-                    \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses to\\nrun build scripts and build procedural macros. The command should\\ninclude `--message-format=json` or a similar option.\",\n+                    \"markdownDescription\": \"Override the command rust-analyzer uses to run build scripts and\\nbuild procedural macros. The command is required to output json\\nand should therefor include `--message-format=json` or a similar\\noption.\\n\\nBy default, a cargo invocation will be constructed for the configured\\ntargets and features, with the following base command line:\\n\\n```bash\\ncargo check --quiet --workspace --message-format=json --all-targets\\n```\\n.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -408,7 +408,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.cargo.features\": {\n-                    \"markdownDescription\": \"List of features to activate. Set to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n+                    \"markdownDescription\": \"List of features to activate.\\n\\nSet this to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n                     \"default\": [],\n                     \"type\": [\n                         \"string\",\n@@ -425,7 +425,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.cargo.noDefaultFeatures\": {\n-                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n+                    \"markdownDescription\": \"Whether to pass `--no-default-features` to cargo.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n@@ -476,7 +476,7 @@\n                     }\n                 },\n                 \"rust-analyzer.checkOnSave.features\": {\n-                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`. Set to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n+                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\\n\\nSet to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"string\",\n@@ -502,7 +502,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.checkOnSave.overrideCommand\": {\n-                    \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses for\\nchecking. The command should include `--message-format=json` or\\nsimilar option.\",\n+                    \"markdownDescription\": \"Override the command rust-analyzer uses to    run build scripts and\\nbuild procedural macros. The command is required to output json\\nand should therefor include `--message-format=json` or a similar\\noption.\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -655,22 +655,22 @@\n                     \"type\": \"string\"\n                 },\n                 \"rust-analyzer.highlightRelated.breakPoints.enable\": {\n-                    \"markdownDescription\": \"Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\",\n+                    \"markdownDescription\": \"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.highlightRelated.exitPoints.enable\": {\n-                    \"markdownDescription\": \"Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\",\n+                    \"markdownDescription\": \"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.highlightRelated.references.enable\": {\n-                    \"markdownDescription\": \"Enables highlighting of related references while hovering your mouse above any identifier.\",\n+                    \"markdownDescription\": \"Enables highlighting of related references while the cursor is on any identifier.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.highlightRelated.yieldPoints.enable\": {\n-                    \"markdownDescription\": \"Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\",\n+                    \"markdownDescription\": \"Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n@@ -824,7 +824,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.inlayHints.typeHints.hideNamedConstructor\": {\n-                    \"markdownDescription\": \"Whether to hide inlay hints for constructors.\",\n+                    \"markdownDescription\": \"Whether to hide inlay type hints for constructors.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n@@ -936,7 +936,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.procMacro.enable\": {\n-                    \"markdownDescription\": \"Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\",\n+                    \"markdownDescription\": \"Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },"}]}