{"sha": "81484a399c96c69adeef352be0e7823b39ce6e7e", "node_id": "C_kwDOAAsO6NoAKDgxNDg0YTM5OWM5NmM2OWFkZWVmMzUyYmUwZTc4MjNiMzljZTZlN2U", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-12-05T00:07:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-05T00:07:40Z"}, "message": "Merge portable-simd#207 - ./feature/simplify-select\n\nRemove Select trait\r\n\r\nI realized that our `select` implementation predated `Simd` being generic over element type, and we don't really need the `Select` trait at all. The function signature is much simpler now (generic over element type, rather than over the entire vector). This did require changing mask select to be a different function, but I think that's fine considering they're not necessarily vectors.", "tree": {"sha": "cc946b7804819d4bb1a322cc0f07e386c4d0c4bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc946b7804819d4bb1a322cc0f07e386c4d0c4bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81484a399c96c69adeef352be0e7823b39ce6e7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhrALMCRBK7hj4Ov3rIwAAYv4IAAiuPkzCp1mqbecsavlMCUaJ\n/DWSQ+K6/WEQRrWeGwzYtROTGDPxnWy0kB3P1CIhzhhfQMfG6xWMwRVVa0+TRi3R\nG4s6EDXKOty+cS6jK4gyZ++M4qlr39Ck+YrqlIHRK+F/8rY49wRjJwptV122BmW8\nmIAQBIF5WT5QOq46wDVtrBQSB/AP58Z3QoKDjYjy2qHXBHE33eNoyPJCvCmR13A3\nRdTzLTQNbc0nREp3l3HJ3Fe+B6QdKOlGb52L14/tBwKi401xB3H17GbgbAwSzx9H\nenH4TgZ2e8mIBrnBM2rewCiY0f8NviW837cDSZvlXiE6+aO01ItKPGp+0zTkuyI=\n=qQDD\n-----END PGP SIGNATURE-----\n", "payload": "tree cc946b7804819d4bb1a322cc0f07e386c4d0c4bb\nparent a8385522ade6f67853edac730b5bf164ddb298fd\nparent d9f82f9c4d7f4627721794c3fd9cf4598f60f688\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1638662860 -0800\ncommitter GitHub <noreply@github.com> 1638662860 -0800\n\nMerge portable-simd#207 - ./feature/simplify-select\n\nRemove Select trait\r\n\r\nI realized that our `select` implementation predated `Simd` being generic over element type, and we don't really need the `Select` trait at all. The function signature is much simpler now (generic over element type, rather than over the entire vector). This did require changing mask select to be a different function, but I think that's fine considering they're not necessarily vectors."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81484a399c96c69adeef352be0e7823b39ce6e7e", "html_url": "https://github.com/rust-lang/rust/commit/81484a399c96c69adeef352be0e7823b39ce6e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81484a399c96c69adeef352be0e7823b39ce6e7e/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8385522ade6f67853edac730b5bf164ddb298fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8385522ade6f67853edac730b5bf164ddb298fd", "html_url": "https://github.com/rust-lang/rust/commit/a8385522ade6f67853edac730b5bf164ddb298fd"}, {"sha": "d9f82f9c4d7f4627721794c3fd9cf4598f60f688", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f82f9c4d7f4627721794c3fd9cf4598f60f688", "html_url": "https://github.com/rust-lang/rust/commit/d9f82f9c4d7f4627721794c3fd9cf4598f60f688"}], "stats": {"total": 75, "additions": 21, "deletions": 54}, "files": [{"sha": "85026265956a2092545c00a1e3ffa24e543aa672", "filename": "crates/core_simd/src/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81484a399c96c69adeef352be0e7823b39ce6e7e/crates%2Fcore_simd%2Fsrc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81484a399c96c69adeef352be0e7823b39ce6e7e/crates%2Fcore_simd%2Fsrc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmod.rs?ref=81484a399c96c69adeef352be0e7823b39ce6e7e", "patch": "@@ -27,7 +27,6 @@ pub mod simd {\n \n     pub use crate::core_simd::lane_count::{LaneCount, SupportedLaneCount};\n     pub use crate::core_simd::masks::*;\n-    pub use crate::core_simd::select::Select;\n     pub use crate::core_simd::swizzle::*;\n     pub use crate::core_simd::vector::*;\n }"}, {"sha": "8d521057fbd3ed7a9da2bc540af546f7d2cf9ee2", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 21, "deletions": 53, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/81484a399c96c69adeef352be0e7823b39ce6e7e/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81484a399c96c69adeef352be0e7823b39ce6e7e/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=81484a399c96c69adeef352be0e7823b39ce6e7e", "patch": "@@ -1,54 +1,6 @@\n use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Mask, MaskElement, Simd, SimdElement, SupportedLaneCount};\n \n-mod sealed {\n-    pub trait Sealed<Mask> {\n-        fn select(mask: Mask, true_values: Self, false_values: Self) -> Self;\n-    }\n-}\n-use sealed::Sealed;\n-\n-/// Supporting trait for vector `select` function\n-pub trait Select<Mask>: Sealed<Mask> {}\n-\n-impl<T, const LANES: usize> Sealed<Mask<T::Mask, LANES>> for Simd<T, LANES>\n-where\n-    T: SimdElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-    #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    fn select(mask: Mask<T::Mask, LANES>, true_values: Self, false_values: Self) -> Self {\n-        unsafe { intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n-    }\n-}\n-\n-impl<T, const LANES: usize> Select<Mask<T::Mask, LANES>> for Simd<T, LANES>\n-where\n-    T: SimdElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-}\n-\n-impl<T, const LANES: usize> Sealed<Self> for Mask<T, LANES>\n-where\n-    T: MaskElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-    #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    fn select(mask: Self, true_values: Self, false_values: Self) -> Self {\n-        mask & true_values | !mask & false_values\n-    }\n-}\n-\n-impl<T, const LANES: usize> Select<Self> for Mask<T, LANES>\n-where\n-    T: MaskElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-}\n-\n impl<T, const LANES: usize> Mask<T, LANES>\n where\n     T: MaskElement,\n@@ -69,21 +21,37 @@ where\n     /// let c = mask.select(a, b);\n     /// assert_eq!(c.to_array(), [0, 5, 6, 3]);\n     /// ```\n+    #[inline]\n+    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n+    pub fn select<U>(\n+        self,\n+        true_values: Simd<U, LANES>,\n+        false_values: Simd<U, LANES>,\n+    ) -> Simd<U, LANES>\n+    where\n+        U: SimdElement<Mask = T>,\n+    {\n+        unsafe { intrinsics::simd_select(self.to_int(), true_values, false_values) }\n+    }\n+\n+    /// Choose lanes from two masks.\n+    ///\n+    /// For each lane in the mask, choose the corresponding lane from `true_values` if\n+    /// that lane mask is true, and `false_values` if that lane mask is false.\n     ///\n-    /// `select` can also be used on masks:\n     /// ```\n     /// # #![feature(portable_simd)]\n     /// # #[cfg(feature = \"std\")] use core_simd::Mask;\n     /// # #[cfg(not(feature = \"std\"))] use core::simd::Mask;\n     /// let a = Mask::<i32, 4>::from_array([true, true, false, false]);\n     /// let b = Mask::<i32, 4>::from_array([false, false, true, true]);\n     /// let mask = Mask::<i32, 4>::from_array([true, false, false, true]);\n-    /// let c = mask.select(a, b);\n+    /// let c = mask.select_mask(a, b);\n     /// assert_eq!(c.to_array(), [true, false, true, false]);\n     /// ```\n     #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    pub fn select<S: Select<Self>>(self, true_values: S, false_values: S) -> S {\n-        S::select(self, true_values, false_values)\n+    #[must_use = \"method returns a new mask and does not mutate the original inputs\"]\n+    pub fn select_mask(self, true_values: Self, false_values: Self) -> Self {\n+        self & true_values | !self & false_values\n     }\n }"}]}