{"sha": "6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYThmNGE1N2I4ZmIxZjJiZTRiNDliYjVmODc2MjkzODkyNTIwMjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-15T02:50:55Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T13:47:20Z"}, "message": "bindings_after_at: harden tests wrt. contexts & slice_patterns", "tree": {"sha": "899ba740771754e3ef876340af53a245986cc7d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899ba740771754e3ef876340af53a245986cc7d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "html_url": "https://github.com/rust-lang/rust/commit/6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0034e6199e1ff234715aea73cdd31c9f149f334e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0034e6199e1ff234715aea73cdd31c9f149f334e", "html_url": "https://github.com/rust-lang/rust/commit/0034e6199e1ff234715aea73cdd31c9f149f334e"}], "stats": {"total": 585, "additions": 477, "deletions": 108}, "files": [{"sha": "e0931f7e66e18132167737fe5af371c6b6e65871", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(bindings_after_at)]\n //~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+#![feature(slice_patterns)]\n \n fn main() {\n     struct U; // Not copy!\n@@ -28,4 +29,20 @@ fn main() {\n         //~| ERROR cannot bind by-move with sub-bindings\n         //~| ERROR use of moved value\n     }\n+\n+    fn fun(a @ b: U) {}\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n+    match [u(), u(), u(), u()] {\n+        xs @ [a, .., b] => {}\n+        //~^ ERROR cannot bind by-move with sub-bindings\n+        //~| ERROR use of moved value\n+    }\n+\n+    match [u(), u(), u(), u()] {\n+        xs @ [_, ys @ .., _] => {}\n+        //~^ ERROR cannot bind by-move with sub-bindings\n+        //~| ERROR use of moved value\n+    }\n }"}, {"sha": "605c92e5d8df5b222a7fa341acc4ada4a0c5cae7", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -7,37 +7,55 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:12:9\n+  --> $DIR/borrowck-move-and-move.rs:13:9\n    |\n LL |     let a @ b = U;\n    |         ^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:16:9\n+  --> $DIR/borrowck-move-and-move.rs:17:9\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:20:9\n+  --> $DIR/borrowck-move-and-move.rs:21:9\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:25:9\n+  --> $DIR/borrowck-move-and-move.rs:26:9\n    |\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:25:21\n+  --> $DIR/borrowck-move-and-move.rs:26:21\n    |\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-move-and-move.rs:38:9\n+   |\n+LL |         xs @ [a, .., b] => {}\n+   |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-move-and-move.rs:44:9\n+   |\n+LL |         xs @ [_, ys @ .., _] => {}\n+   |         ^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-move-and-move.rs:33:12\n+   |\n+LL |     fn fun(a @ b: U) {}\n+   |            ^^^^^ binds an already bound by-move value by moving it\n+\n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:12:13\n+  --> $DIR/borrowck-move-and-move.rs:13:13\n    |\n LL |     let a @ b = U;\n    |         ----^   - move occurs because value has type `main::U`, which does not implement the `Copy` trait\n@@ -46,7 +64,7 @@ LL |     let a @ b = U;\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:16:17\n+  --> $DIR/borrowck-move-and-move.rs:17:17\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         --------^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -55,7 +73,7 @@ LL |     let a @ (b, c) = (U, U);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:20:17\n+  --> $DIR/borrowck-move-and-move.rs:21:17\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         --------^-   ---------- move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -64,7 +82,7 @@ LL |     let a @ (b, c) = (u(), u());\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:25:16\n+  --> $DIR/borrowck-move-and-move.rs:26:16\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -75,7 +93,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:25:29\n+  --> $DIR/borrowck-move-and-move.rs:26:29\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -85,7 +103,39 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     |       value used here after move\n    |                     value moved here\n \n-error: aborting due to 10 previous errors\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:38:22\n+   |\n+LL |     match [u(), u(), u(), u()] {\n+   |           -------------------- move occurs because value has type `[main::U; 4]`, which does not implement the `Copy` trait\n+LL |         xs @ [a, .., b] => {}\n+   |         -------------^-\n+   |         |            |\n+   |         |            value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:44:18\n+   |\n+LL |     match [u(), u(), u(), u()] {\n+   |           -------------------- move occurs because value has type `[main::U; 4]`, which does not implement the `Copy` trait\n+LL |         xs @ [_, ys @ .., _] => {}\n+   |         ---------^^^^^^^----\n+   |         |        |\n+   |         |        value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:33:16\n+   |\n+LL |     fn fun(a @ b: U) {}\n+   |            ----^\n+   |            |   |\n+   |            |   value used here after move\n+   |            value moved here\n+   |            move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+\n+error: aborting due to 16 previous errors\n \n Some errors have detailed explanations: E0007, E0382.\n For more information about an error, try `rustc --explain E0007`."}, {"sha": "8512c7f9b696cd0e91b1390c131a75b69d32ac59", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -9,6 +9,10 @@ struct C;\n \n fn c() -> C { C }\n \n+struct NC;\n+\n+fn nc() -> NC { NC }\n+\n fn main() {\n     let a @ box &b = Box::new(&C);\n     //~^ ERROR cannot bind by-move with sub-bindings\n@@ -18,6 +22,18 @@ fn main() {\n     //~^ ERROR cannot bind by-move with sub-bindings\n     //~| ERROR use of moved value\n \n+    fn f1(a @ box &b: Box<&C>) {}\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n+    fn f2(a @ box b: Box<C>) {}\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n+    match Box::new(C) { a @ box b => {} }\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n     let ref a @ box b = Box::new(C); // OK; the type is `Copy`.\n     drop(b);\n     drop(b);\n@@ -28,16 +44,37 @@ fn main() {\n     drop(b);\n     drop(a);\n \n-    struct NC;\n-\n-    fn nc() -> NC { NC }\n+    fn f3(ref a @ box b: Box<C>) { // OK; the type is `Copy`.\n+        drop(b);\n+        drop(b);\n+        drop(a);\n+    }\n+    match Box::new(c()) {\n+        ref a @ box b => { // OK; the type is `Copy`.\n+            drop(b);\n+            drop(b);\n+            drop(a);\n+        }\n+    }\n \n     let ref a @ box b = Box::new(NC); //~ ERROR cannot bind by-move and by-ref in the same pattern\n \n     let ref a @ box ref b = Box::new(NC); // OK.\n     drop(a);\n     drop(b);\n \n+    fn f4(ref a @ box ref b: Box<NC>) { // OK.\n+        drop(a);\n+        drop(b)\n+    }\n+\n+    match Box::new(nc()) {\n+        ref a @ box ref b => { // OK.\n+            drop(a);\n+            drop(b);\n+        }\n+    }\n+\n     let ref a @ box ref mut b = Box::new(nc());\n     //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n     let ref a @ box ref mut b = Box::new(NC);\n@@ -56,4 +93,20 @@ fn main() {\n     //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n     *a = Box::new(NC);\n     drop(b);\n+\n+    fn f5(ref mut a @ box ref b: Box<NC>) {\n+        //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n+        *a = Box::new(NC);\n+        drop(b);\n+    }\n+\n+    match Box::new(nc()) {\n+        ref mut a @ box ref b => {\n+            //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+            //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n+            *a = Box::new(NC);\n+            drop(b);\n+        }\n+    }\n }"}, {"sha": "512e75982cb5e1d923bf9eeb9ece6a43c0b32e84", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 103, "deletions": 13, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -7,19 +7,25 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:13:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:17:9\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:17:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:21:9\n    |\n LL |     let a @ box b = Box::new(C);\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-at-and-box.rs:33:25\n+   |\n+LL |     match Box::new(C) { a @ box b => {} }\n+   |                         ^^^^^^^^^ binds an already bound by-move value by moving it\n+\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:35:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:60:21\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         ------------^\n@@ -28,7 +34,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         by-ref pattern here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:41:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:78:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -37,7 +43,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:80:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -46,7 +52,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:45:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:82:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -55,7 +61,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:48:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:85:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -64,16 +70,46 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:54:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:91:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n    |         |               |\n    |         |               immutable borrow occurs here\n    |         mutable borrow occurs here\n \n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:105:9\n+   |\n+LL |         ref mut a @ box ref b => {\n+   |         ---------^^^^^^^-----\n+   |         |               |\n+   |         |               immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-at-and-box.rs:25:11\n+   |\n+LL |     fn f1(a @ box &b: Box<&C>) {}\n+   |           ^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-pat-at-and-box.rs:29:11\n+   |\n+LL |     fn f2(a @ box b: Box<C>) {}\n+   |           ^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:97:11\n+   |\n+LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n+   |           ---------^^^^^^^-----\n+   |           |               |\n+   |           |               immutable borrow occurs here\n+   |           mutable borrow occurs here\n+\n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:13:18\n+  --> $DIR/borrowck-pat-at-and-box.rs:17:18\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ---------^   ------------ move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n@@ -82,16 +118,26 @@ LL |     let a @ box &b = Box::new(&C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:17:17\n+  --> $DIR/borrowck-pat-at-and-box.rs:21:17\n    |\n LL |     let a @ box b = Box::new(C);\n    |         --------^   ----------- move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n    |         |       |\n    |         |       value used here after move\n    |         value moved here\n \n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-at-and-box.rs:33:33\n+   |\n+LL |     match Box::new(C) { a @ box b => {} }\n+   |           -----------   --------^\n+   |           |             |       |\n+   |           |             |       value used here after move\n+   |           |             value moved here\n+   |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n+\n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:48:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:85:21\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ------------^^^^^^^^^\n@@ -103,7 +149,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:54:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:91:25\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ----------------^^^^^\n@@ -114,7 +160,51 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n LL |     *a = Box::new(NC);\n    |     -- mutable borrow later used here\n \n-error: aborting due to 12 previous errors\n+error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:105:25\n+   |\n+LL |         ref mut a @ box ref b => {\n+   |         ----------------^^^^^\n+   |         |               |\n+   |         |               immutable borrow occurs here\n+   |         mutable borrow occurs here\n+...\n+LL |             *a = Box::new(NC);\n+   |             -- mutable borrow later used here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-at-and-box.rs:25:20\n+   |\n+LL |     fn f1(a @ box &b: Box<&C>) {}\n+   |           ---------^\n+   |           |        |\n+   |           |        value used here after move\n+   |           value moved here\n+   |           move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-at-and-box.rs:29:19\n+   |\n+LL |     fn f2(a @ box b: Box<C>) {}\n+   |           --------^\n+   |           |       |\n+   |           |       value used here after move\n+   |           value moved here\n+   |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n+\n+error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:97:27\n+   |\n+LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n+   |           ----------------^^^^^\n+   |           |               |\n+   |           |               immutable borrow occurs here\n+   |           mutable borrow occurs here\n+...\n+LL |         *a = Box::new(NC);\n+   |         -- mutable borrow later used here\n+\n+error: aborting due to 22 previous errors\n \n Some errors have detailed explanations: E0007, E0009, E0382, E0502.\n For more information about an error, try `rustc --explain E0007`."}, {"sha": "f1dc5dbd12a37d6efaa3caf69c7f52c66268e216", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -22,9 +22,12 @@ fn main() {\n     let a @ P(b, P(c, d)) = P(mk_c(), P(C, C));\n     let a @ [b, c] = [C, C];\n     let a @ [b, .., c] = [C, mk_c(), C];\n+    let a @ [b, mid @ .., c] = [C, mk_c(), C];\n     let a @ &(b, c) = &(C, C);\n     let a @ &(b, &P(c, d)) = &(mk_c(), &P(C, C));\n \n+    fn foo(a @ [b, mid @ .., c]: [C; 3]) {}\n+\n     use self::E::*;\n     match L(C) {\n         L(a) | R(a) => {"}, {"sha": "a09364920f64107ec2f9f3c4947f1afebdd69cc4", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-both-sides.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -5,6 +5,7 @@\n \n #![feature(bindings_after_at)]\n //~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+#![feature(slice_patterns)]\n \n fn main() {\n     struct U; // Not copy!\n@@ -27,6 +28,8 @@ fn main() {\n     let _: &U = c;\n     let _: &U = d;\n \n+    fn f1(ref a @ (ref b, [ref c, ref mid @ .., ref d]): (U, [U; 4])) {}\n+\n     let a @ (b, [c, d]) = &(u(), [u(), u()]);\n     let _: &(U, [U; 2]) = a;\n     let _: &U = b;"}, {"sha": "d2e8219178467efac75902c5e7f4ee7785ea9e1e", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -1,5 +1,6 @@\n #![feature(bindings_after_at)]\n //~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+#![feature(slice_patterns)]\n \n enum Option<T> {\n     None,\n@@ -22,6 +23,17 @@ fn main() {\n     // Prevent promotion:\n     fn u() -> U { U }\n \n+    fn f1(ref a @ ref mut b: U) {}\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    fn f2(ref mut a @ ref b: U) {}\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+\n+    let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~| ERROR cannot borrow `b` as mutable because it is also borrowed as immutable\n+\n     let ref a @ ref mut b = U;\n     //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n     let ref mut a @ ref b = U;"}, {"sha": "931b3e3c83ca7beca9692461ca94e46bc76d78b6", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 85, "deletions": 39, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -7,16 +7,35 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error: cannot borrow `z` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:12:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n    |         |                     |\n    |         |                     immutable borrow occurs here\n    |         mutable borrow occurs here\n \n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:9\n+   |\n+LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n+   |         ---------^^^^-----------------^\n+   |         |            |       |\n+   |         |            |       another mutable borrow occurs here\n+   |         |            also borrowed as immutable here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `b` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:22\n+   |\n+LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n+   |                      -----^^^---------\n+   |                      |       |\n+   |                      |       mutable borrow occurs here\n+   |                      immutable borrow occurs here\n+\n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:25:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:37:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -25,7 +44,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:27:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -34,7 +53,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:29:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -44,7 +63,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -54,7 +73,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:34:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n@@ -63,7 +82,7 @@ LL |     let ref mut a @ ref b = u();\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n@@ -72,7 +91,7 @@ LL |     let ref a @ ref mut b = u();\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:57:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -81,7 +100,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:49:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -90,7 +109,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:55:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -99,7 +118,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:55:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -108,7 +127,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:64:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -117,7 +136,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:64:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -126,7 +145,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -135,7 +154,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -144,7 +163,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -153,7 +172,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -162,7 +181,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -171,7 +190,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -180,7 +199,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -189,7 +208,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -198,7 +217,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -208,7 +227,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -218,7 +237,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -228,7 +247,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:132:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -237,8 +256,35 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         |            immutable borrow occurs here\n    |         mutable borrow occurs here\n \n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n+   |\n+LL |     fn f1(ref a @ ref mut b: U) {}\n+   |           -----^^^---------\n+   |           |       |\n+   |           |       mutable borrow occurs here\n+   |           immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:11\n+   |\n+LL |     fn f2(ref mut a @ ref b: U) {}\n+   |           ---------^^^-----\n+   |           |           |\n+   |           |           immutable borrow occurs here\n+   |           mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:11\n+   |\n+LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n+   |           -----^^^^^^^^^^^----------------^^^^^^^^\n+   |           |               |\n+   |           |               mutable borrow occurs here\n+   |           immutable borrow occurs here\n+\n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:31\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:12:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ----------------------^^^^^-\n@@ -250,7 +296,7 @@ LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:34:21\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:21\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ------------^^^^^\n@@ -262,7 +308,7 @@ LL |     *a = u();\n    |     -------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:17\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:17\n    |\n LL |     let ref a @ ref mut b = u();\n    |         --------^^^^^^^^^\n@@ -274,7 +320,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:64:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -286,7 +332,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:64:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -298,39 +344,39 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -342,7 +388,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -354,7 +400,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -366,7 +412,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:127:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -377,7 +423,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n LL |     drop(a);\n    |          - immutable borrow later used here\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 43 previous errors\n \n Some errors have detailed explanations: E0502, E0507, E0594.\n For more information about an error, try `rustc --explain E0502`."}, {"sha": "da032797c3129c9416562acc43a0c81c24f8cd2d", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -2,12 +2,27 @@\n \n #![feature(bindings_after_at)]\n //~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+#![feature(slice_patterns)]\n \n fn main() {\n     struct U;\n \n     fn u() -> U { U }\n \n+    fn f1(ref mut a @ ref mut b: U) {}\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    fn f2(ref mut a @ ref mut b: U) {}\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    fn f3(\n+        ref mut a @ [\n+        //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+            [ref b @ .., _],\n+            [_, ref mut mid @ ..],\n+            ..,\n+            [..],\n+        ] : [[U; 4]; 5]\n+    ) {}\n+\n     let ref mut a @ ref mut b = U;\n     //~^ ERROR cannot borrow `a` as mutable more than once at a time\n     //~| ERROR cannot borrow `_` as mutable more than once at a time"}, {"sha": "365893512e2a32c2ca546ca7d9fc4073e22d3ae0", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 66, "deletions": 30, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:11:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:26:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -16,7 +16,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:15:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:30:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -25,7 +25,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:18:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:33:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -34,7 +34,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -43,7 +43,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:40:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -52,7 +52,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:44:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -74,7 +74,7 @@ LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:54:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -96,31 +96,31 @@ LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:49:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:64:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:68:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:57:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:60:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:75:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:65:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:80:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -129,7 +129,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:65:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:80:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -138,7 +138,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:71:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:86:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -147,7 +147,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:71:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:86:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -156,7 +156,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -165,7 +165,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -174,7 +174,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:90:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:105:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -183,16 +183,52 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:90:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:105:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n    |                                     |               another mutable borrow occurs here\n    |                                     first mutable borrow occurs here\n \n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:12:11\n+   |\n+LL |     fn f1(ref mut a @ ref mut b: U) {}\n+   |           ---------^^^---------\n+   |           |           |\n+   |           |           another mutable borrow occurs here\n+   |           first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:14:11\n+   |\n+LL |     fn f2(ref mut a @ ref mut b: U) {}\n+   |           ---------^^^---------\n+   |           |           |\n+   |           |           another mutable borrow occurs here\n+   |           first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:17:9\n+   |\n+LL |           ref mut a @ [\n+   |           ^--------\n+   |           |\n+   |  _________first mutable borrow occurs here\n+   | |\n+LL | |\n+LL | |             [ref b @ .., _],\n+   | |              ---------- also borrowed as immutable here\n+LL | |             [_, ref mut mid @ ..],\n+   | |                 ---------------- another mutable borrow occurs here\n+LL | |             ..,\n+LL | |             [..],\n+LL | |         ] : [[U; 4]; 5]\n+   | |_________^\n+\n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:11:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:26:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -204,7 +240,7 @@ LL |     drop(a);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -216,7 +252,7 @@ LL |     *a = U;\n    |     ------ first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:49:25\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:64:25\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -225,7 +261,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:68:21\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ------------^--   -------- move occurs because value has type `&mut (main::U, [main::U; 2])`, which does not implement the `Copy` trait\n@@ -234,7 +270,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:57:18\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:18\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut main::U`, which does not implement the `Copy` trait\n@@ -243,7 +279,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:60:30\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:75:30\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (main::U, main::U)`, which does not implement the `Copy` trait\n@@ -252,7 +288,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         value moved here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -264,7 +300,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -276,7 +312,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:90:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:105:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -288,7 +324,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:90:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:105:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -299,7 +335,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n LL |             drop(a);\n    |                  - first borrow later used here\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 32 previous errors\n \n Some errors have detailed explanations: E0007, E0382, E0499.\n For more information about an error, try `rustc --explain E0007`."}, {"sha": "ba2eb7a0383fbd0ee509844a76fa4b6714d8d41b", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -13,6 +13,13 @@\n fn main() {\n     struct NotCopy;\n \n+    fn f1(a @ b: &NotCopy) { // OK\n+        let _: &NotCopy = a;\n+    }\n+    fn f2(ref a @ b: &NotCopy) {\n+        let _: &&NotCopy = a; // Ok\n+    }\n+\n     let a @ b = &NotCopy; // OK\n     let _: &NotCopy = a;\n     let ref a @ b = &NotCopy; // OK"}, {"sha": "0a20a991a9ad55411ee551c679bad8c3ee202788", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:21:17\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:28:17\n    |\n LL |     let ref a @ b = NotCopy;\n    |         --------^\n@@ -16,7 +16,7 @@ LL |     let ref a @ b = NotCopy;\n    |         by-ref pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:22:21\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:29:21\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ------------^\n@@ -25,7 +25,7 @@ LL |     let ref mut a @ b = NotCopy;\n    |         by-ref pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:24:20\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:31:20\n    |\n LL |         Ok(ref a @ b) | Err(ref a @ b) => {}\n    |            --------^        --------^\n@@ -36,7 +36,7 @@ LL |         Ok(ref a @ b) | Err(ref a @ b) => {}\n    |            by-ref pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:28:17\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:35:17\n    |\n LL |         ref a @ b => {}\n    |         --------^"}, {"sha": "f0be901e3da7c32ed97672b214307327edb7273d", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -7,6 +7,18 @@\n //~^ WARN the feature `or_patterns` is incomplete and may cause the compiler to crash\n \n fn main() {\n+    fn f(a @ a @ a: ()) {}\n+    //~^ ERROR identifier `a` is bound more than once in this parameter list\n+    //~| ERROR identifier `a` is bound more than once in this parameter list\n+\n+    match Ok(0) {\n+        Ok(a @ b @ a)\n+        //~^ ERROR identifier `a` is bound more than once in the same pattern\n+        | Err(a @ b @ a)\n+        //~^ ERROR identifier `a` is bound more than once in the same pattern\n+        => {}\n+    }\n+\n     let a @ a @ a = ();\n     //~^ ERROR identifier `a` is bound more than once in the same pattern\n     //~| ERROR identifier `a` is bound more than once in the same pattern"}, {"sha": "34ae84c2a819b0cb77db872fb842db84968fa6c3", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.stderr", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fa8f4a57b8fb1f2be4b49bb5f87629389252020/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr?ref=6fa8f4a57b8fb1f2be4b49bb5f87629389252020", "patch": "@@ -1,35 +1,59 @@\n+error[E0415]: identifier `a` is bound more than once in this parameter list\n+  --> $DIR/pat-at-same-name-both.rs:10:14\n+   |\n+LL |     fn f(a @ a @ a: ()) {}\n+   |              ^ used as parameter more than once\n+\n+error[E0415]: identifier `a` is bound more than once in this parameter list\n+  --> $DIR/pat-at-same-name-both.rs:10:18\n+   |\n+LL |     fn f(a @ a @ a: ()) {}\n+   |                  ^ used as parameter more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/pat-at-same-name-both.rs:15:20\n+   |\n+LL |         Ok(a @ b @ a)\n+   |                    ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/pat-at-same-name-both.rs:17:23\n+   |\n+LL |         | Err(a @ b @ a)\n+   |                       ^ used in a pattern more than once\n+\n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:10:13\n+  --> $DIR/pat-at-same-name-both.rs:22:13\n    |\n LL |     let a @ a @ a = ();\n    |             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:10:17\n+  --> $DIR/pat-at-same-name-both.rs:22:17\n    |\n LL |     let a @ a @ a = ();\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:13:21\n+  --> $DIR/pat-at-same-name-both.rs:25:21\n    |\n LL |     let ref a @ ref a = ();\n    |                     ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:15:29\n+  --> $DIR/pat-at-same-name-both.rs:27:29\n    |\n LL |     let ref mut a @ ref mut a = ();\n    |                             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:18:17\n+  --> $DIR/pat-at-same-name-both.rs:30:17\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:18:26\n+  --> $DIR/pat-at-same-name-both.rs:30:26\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                          ^ used in a pattern more than once\n@@ -48,6 +72,7 @@ warning: the feature `or_patterns` is incomplete and may cause the compiler to c\n LL | #![feature(or_patterns)]\n    |            ^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 10 previous errors\n \n-For more information about this error, try `rustc --explain E0416`.\n+Some errors have detailed explanations: E0415, E0416.\n+For more information about an error, try `rustc --explain E0415`."}]}