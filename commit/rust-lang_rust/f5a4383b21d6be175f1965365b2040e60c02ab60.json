{"sha": "f5a4383b21d6be175f1965365b2040e60c02ab60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YTQzODNiMjFkNmJlMTc1ZjE5NjUzNjViMjA0MGU2MGMwMmFiNjA=", "commit": {"author": {"name": "Xmasreturns", "email": "Xmasreturns@users.noreply.github.com", "date": "2015-12-08T22:38:55Z"}, "committer": {"name": "Xmasreturns", "email": "Xmasreturns@users.noreply.github.com", "date": "2015-12-08T22:38:55Z"}, "message": "Update traits.md\n\nChanges to readability and some clarifications for beginners", "tree": {"sha": "78e9dda8941e15560cfb1f83fe6acf38aac3fb7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78e9dda8941e15560cfb1f83fe6acf38aac3fb7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5a4383b21d6be175f1965365b2040e60c02ab60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a4383b21d6be175f1965365b2040e60c02ab60", "html_url": "https://github.com/rust-lang/rust/commit/f5a4383b21d6be175f1965365b2040e60c02ab60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5a4383b21d6be175f1965365b2040e60c02ab60/comments", "author": {"login": "Xmasreturns", "id": 13546260, "node_id": "MDQ6VXNlcjEzNTQ2MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/13546260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xmasreturns", "html_url": "https://github.com/Xmasreturns", "followers_url": "https://api.github.com/users/Xmasreturns/followers", "following_url": "https://api.github.com/users/Xmasreturns/following{/other_user}", "gists_url": "https://api.github.com/users/Xmasreturns/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xmasreturns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xmasreturns/subscriptions", "organizations_url": "https://api.github.com/users/Xmasreturns/orgs", "repos_url": "https://api.github.com/users/Xmasreturns/repos", "events_url": "https://api.github.com/users/Xmasreturns/events{/privacy}", "received_events_url": "https://api.github.com/users/Xmasreturns/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xmasreturns", "id": 13546260, "node_id": "MDQ6VXNlcjEzNTQ2MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/13546260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xmasreturns", "html_url": "https://github.com/Xmasreturns", "followers_url": "https://api.github.com/users/Xmasreturns/followers", "following_url": "https://api.github.com/users/Xmasreturns/following{/other_user}", "gists_url": "https://api.github.com/users/Xmasreturns/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xmasreturns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xmasreturns/subscriptions", "organizations_url": "https://api.github.com/users/Xmasreturns/orgs", "repos_url": "https://api.github.com/users/Xmasreturns/repos", "events_url": "https://api.github.com/users/Xmasreturns/events{/privacy}", "received_events_url": "https://api.github.com/users/Xmasreturns/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461c46052b86c330205b88fc0c02acae225588a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/461c46052b86c330205b88fc0c02acae225588a8", "html_url": "https://github.com/rust-lang/rust/commit/461c46052b86c330205b88fc0c02acae225588a8"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "d8e6043498f4d0d38b0e37ba776b2ed3156b93e8", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f5a4383b21d6be175f1965365b2040e60c02ab60/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5a4383b21d6be175f1965365b2040e60c02ab60/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=f5a4383b21d6be175f1965365b2040e60c02ab60", "patch": "@@ -3,8 +3,8 @@\n A trait is a language feature that tells the Rust compiler about\n functionality a type must provide.\n \n-Do you remember the `impl` keyword, used to call a function with [method\n-syntax][methodsyntax]?\n+Recall the `impl` keyword, used to call a function with [method\n+syntax][methodsyntax]:\n \n ```rust\n struct Circle {\n@@ -22,8 +22,8 @@ impl Circle {\n \n [methodsyntax]: method-syntax.html\n \n-Traits are similar, except that we define a trait with just the method\n-signature, then implement the trait for that struct. Like this:\n+Traits are similar, except that we first define a trait with a method\n+signature, then implement the trait for a struct. Like this:\n \n ```rust\n struct Circle {\n@@ -399,15 +399,13 @@ fn inverse<T>() -> T\n ```\n \n This shows off the additional feature of `where` clauses: they allow bounds\n-where the left-hand side is an arbitrary type (`i32` in this case), not just a\n-plain type parameter (like `T`). In this example, `i32` must implement\n+on the left-hand side not only of type parameters `T`, but also of types (`i32` in this case). In this example, `i32` must implement\n `ConvertTo<T>`. Rather than defining what `i32` is (since that's obvious), the\n-`where` clause here is a constraint on `T`.\n+`where` clause here constrains `T`.\n \n # Default methods\n \n-If you already know how a typical implementor will define a method, you can\n-let your trait supply a default:\n+A default method can be added to a trait definition if it is already known how a typical implementor will define a method. For example, `is_invalid()` is defined as the opposite of `is_valid()`:\n \n ```rust\n trait Foo {\n@@ -417,9 +415,7 @@ trait Foo {\n }\n ```\n \n-Implementors of the `Foo` trait need to implement `is_valid()`, but they don\u2019t\n-need to implement `is_invalid()`. They\u2019ll get this default behavior. They can\n-override the default if they so choose:\n+Implementors of the `Foo` trait need to implement `is_valid()` but not `is_invalid()` due to the added default behavior. This default behavior can still be overridden as in:\n \n ```rust\n # trait Foo {\n@@ -446,7 +442,7 @@ impl Foo for OverrideDefault {\n \n     fn is_invalid(&self) -> bool {\n         println!(\"Called OverrideDefault.is_invalid!\");\n-        true // this implementation is a self-contradiction!\n+        true // overrides the expected value of is_invalid()\n     }\n }\n \n@@ -499,7 +495,7 @@ error: the trait `main::Foo` is not implemented for the type `main::Baz` [E0277]\n \n # Deriving\n \n-Implementing traits like `Debug` and `Default` over and over again can become\n+Implementing traits like `Debug` and `Default` repeatedly can become\n quite tedious. For that reason, Rust provides an [attribute][attributes] that\n allows you to let Rust automatically implement traits for you:\n "}]}