{"sha": "67350bc8681d6df212817644cad7c748039a6238", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzUwYmM4NjgxZDZkZjIxMjgxNzY0NGNhZDdjNzQ4MDM5YTYyMzg=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-07T21:57:26Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-07T18:49:57Z"}, "message": "Don't use std:: paths in syntax extensions when compiling a #![no_std] crate\n\nFixes #16803.\nFixes #14342.\nFixes half of #21827 -- slice syntax is still broken.", "tree": {"sha": "d9489b3a3ec561a598d9df04a96364572fa3c105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9489b3a3ec561a598d9df04a96364572fa3c105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67350bc8681d6df212817644cad7c748039a6238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67350bc8681d6df212817644cad7c748039a6238", "html_url": "https://github.com/rust-lang/rust/commit/67350bc8681d6df212817644cad7c748039a6238", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67350bc8681d6df212817644cad7c748039a6238/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74eef05e7d029cee7407ab7939c326e6ea71a9c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/74eef05e7d029cee7407ab7939c326e6ea71a9c9", "html_url": "https://github.com/rust-lang/rust/commit/74eef05e7d029cee7407ab7939c326e6ea71a9c9"}], "stats": {"total": 558, "additions": 413, "deletions": 145}, "files": [{"sha": "3acd1eefe89d06f1b7a8578eaa76c1ff7b4b13b4", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -576,10 +576,6 @@ extern fn panic_fmt(args: &core::fmt::Arguments,\n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n # #[start] fn start(argc: isize, argv: *const *const u8) -> isize { 0 }\n # fn main() {}\n-# mod std {  // for-loops\n-#     pub use core::iter;\n-#     pub use core::option;\n-# }\n ```\n \n Note that there is one extra lang item here which differs from the examples"}, {"sha": "b3a7e3dbdebf99c3d64de60c5afe9f64848a030b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -126,7 +126,8 @@ pub fn oom() -> ! {\n #[doc(hidden)]\n pub fn fixme_14344_be_sure_to_link_to_collections() {}\n \n-#[cfg(not(test))]\n+// NOTE: remove after next snapshot\n+#[cfg(all(stage0, not(test)))]\n #[doc(hidden)]\n mod std {\n     pub use core::fmt;"}, {"sha": "b3f31f33a3a9e522797ea1ac66e74b0b25de1343", "filename": "src/libcollections/fmt.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Formatting support for `String`.\n+//!\n+//! See `core::fmt` and `std::fmt` for full documentation on string\n+//! formatting.\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+use core::fmt;\n+\n+use string;\n+\n+/// The format function takes a precompiled format string and a list of\n+/// arguments, to return the resulting formatted string.\n+///\n+/// # Arguments\n+///\n+///   * args - a structure of arguments generated via the `format_args!` macro.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::fmt;\n+///\n+/// let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\n+/// assert_eq!(s, \"Hello, world!\".to_string());\n+/// ```\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub fn format(args: fmt::Arguments) -> string::String {\n+    // FIXME #21826\n+    use core::fmt::Writer;\n+    let mut output = string::String::new();\n+    let _ = write!(&mut output, \"{}\", args);\n+    output\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use prelude::*;\n+    use fmt;\n+\n+    #[test]\n+    fn test_format() {\n+        let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\n+        assert_eq!(s.as_slice(), \"Hello, world!\");\n+    }\n+}"}, {"sha": "05d84eda13d75fd3c5a82d068f3dcb3fed439ccf", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -68,6 +68,7 @@ mod bit;\n mod btree;\n pub mod dlist;\n pub mod enum_set;\n+pub mod fmt;\n pub mod ring_buf;\n pub mod slice;\n pub mod str;\n@@ -107,15 +108,16 @@ pub fn fixme_14344_be_sure_to_link_to_collections() {}\n \n #[cfg(not(test))]\n mod std {\n-    pub use core::fmt;      // necessary for panic!()\n-    pub use core::option;   // necessary for panic!()\n-    pub use core::clone;    // derive(Clone)\n-    pub use core::cmp;      // derive(Eq, Ord, etc.)\n-    pub use core::marker;   // derive(Copy)\n-    pub use core::hash;     // derive(Hash)\n+    // NOTE: remove after next snapshot\n+    #[cfg(stage0)] pub use core::clone;    // derive(Clone)\n+    #[cfg(stage0)] pub use core::cmp;      // derive(Eq, Ord, etc.)\n+    #[cfg(stage0)] pub use core::marker;   // derive(Copy)\n+    #[cfg(stage0)] pub use core::hash;     // derive(Hash)\n+    #[cfg(stage0)] pub use core::iter;\n+    #[cfg(stage0)] pub use core::fmt;      // necessary for panic!()\n+    #[cfg(stage0)] pub use core::option;   // necessary for panic!()\n+\n     pub use core::ops;      // RangeFull\n-    // for-loops\n-    pub use core::iter;\n }\n \n #[cfg(test)]"}, {"sha": "79c86a846f1b90e96b0b969af1eb0bd9a884df21", "filename": "src/libcollections/macros.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcollections%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcollections%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fmacros.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -22,3 +22,19 @@ macro_rules! vec {\n     );\n     ($($x:expr,)*) => (vec![$($x),*])\n }\n+\n+/// Use the syntax described in `std::fmt` to create a value of type `String`.\n+/// See `std::fmt` for more information.\n+///\n+/// # Example\n+///\n+/// ```\n+/// format!(\"test\");\n+/// format!(\"hello {}\", \"world!\");\n+/// format!(\"x = {}, y = {y}\", 10, y = 30);\n+/// ```\n+#[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+macro_rules! format {\n+    ($($arg:tt)*) => ($crate::fmt::format(format_args!($($arg)*)))\n+}"}, {"sha": "76849e6ade85a23c5fcc7d1a74ae8ffca19294b0", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -27,8 +27,8 @@ use core::ops::{Index, IndexMut};\n use core::ptr;\n use core::raw::Slice as RawSlice;\n \n-use std::hash::{Writer, Hash, Hasher};\n-use std::cmp;\n+use core::hash::{Writer, Hash, Hasher};\n+use core::cmp;\n \n use alloc::heap;\n "}, {"sha": "5df64cfaadaaab243b41d17ba90fc4fa19eea810", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -67,7 +67,7 @@ use num::{ToPrimitive, Int};\n use ops::{Add, Deref, FnMut};\n use option::Option;\n use option::Option::{Some, None};\n-use std::marker::Sized;\n+use marker::Sized;\n use usize;\n \n /// An interface for dealing with \"external iterators\". These types of iterators"}, {"sha": "4c031b3e7cc93b040477463fc1df0dccb714645d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -148,17 +148,25 @@ mod array;\n mod core {\n     pub use panicking;\n     pub use fmt;\n+    #[cfg(not(stage0))] pub use clone;\n+    #[cfg(not(stage0))] pub use cmp;\n+    #[cfg(not(stage0))] pub use hash;\n+    #[cfg(not(stage0))] pub use marker;\n+    #[cfg(not(stage0))] pub use option;\n+    #[cfg(not(stage0))] pub use iter;\n }\n \n #[doc(hidden)]\n mod std {\n-    pub use clone;\n-    pub use cmp;\n-    pub use fmt;\n-    pub use hash;\n-    pub use marker;\n+    // NOTE: remove after next snapshot\n+    #[cfg(stage0)] pub use clone;\n+    #[cfg(stage0)] pub use cmp;\n+    #[cfg(stage0)] pub use hash;\n+    #[cfg(stage0)] pub use marker;\n+    #[cfg(stage0)] pub use option;\n+    #[cfg(stage0)] pub use fmt;\n+    #[cfg(stage0)] pub use iter;\n+\n+    // range syntax\n     pub use ops;\n-    pub use option;\n-    // for-loops\n-    pub use iter;\n }"}, {"sha": "060e7ef4033183ba70113b35ba71090e6f8e8758", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -5729,8 +5729,9 @@ pub fn issue_14344_workaround() {} // FIXME #14344 force linkage to happen corre\n \n #[test] fn work_on_windows() { } // FIXME #10872 needed for a happy windows\n \n+// NOTE: remove after next snapshot\n #[doc(hidden)]\n-#[cfg(not(test))]\n+#[cfg(all(stage0, not(test)))]\n mod std {\n     pub use core::marker;\n }"}, {"sha": "777b1ed8ceb6a8ef9a61f3072db81344594f95f3", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -496,7 +496,8 @@ pub struct Open01<F>(pub F);\n /// ```\n pub struct Closed01<F>(pub F);\n \n-#[cfg(not(test))]\n+// NOTE: remove after next snapshot\n+#[cfg(all(stage0, not(test)))]\n mod std {\n     pub use core::{option, fmt}; // panic!()\n     pub use core::clone; // derive Clone"}, {"sha": "0139dfbd50b47daab3d9c2d2e0a5b3d191d7fd31", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -281,6 +281,13 @@ macro_rules! bitflags {\n     };\n }\n \n+// This is a no_std crate. So the test code's invocation of #[derive] etc, via\n+// bitflags!, will use names from the underlying crates.\n+#[cfg(test)]\n+mod core {\n+    pub use std::{fmt, hash, clone, cmp, marker, option};\n+}\n+\n #[cfg(test)]\n #[allow(non_upper_case_globals)]\n mod tests {"}, {"sha": "82823f0cb28dc11ea5924bfea4be68e6529c624a", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -403,8 +403,6 @@\n \n #![unstable(feature = \"std_misc\")]\n \n-use string;\n-\n pub use core::fmt::{Formatter, Result, Writer, rt};\n pub use core::fmt::{Show, String, Octal, Binary};\n pub use core::fmt::{Display, Debug};\n@@ -413,24 +411,4 @@ pub use core::fmt::{LowerExp, UpperExp};\n pub use core::fmt::Error;\n pub use core::fmt::{ArgumentV1, Arguments, write, radix, Radix, RadixFmt};\n \n-/// The format function takes a precompiled format string and a list of\n-/// arguments, to return the resulting formatted string.\n-///\n-/// # Arguments\n-///\n-///   * args - a structure of arguments generated via the `format_args!` macro.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::fmt;\n-///\n-/// let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\n-/// assert_eq!(s, \"Hello, world!\".to_string());\n-/// ```\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn format(args: Arguments) -> string::String {\n-    let mut output = string::String::new();\n-    let _ = write!(&mut output, \"{}\", args);\n-    output\n-}\n+pub use core_collections::fmt::format;"}, {"sha": "e54086159002eb696a9824c4c677eb854e2d7904", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -137,7 +137,7 @@\n extern crate core;\n \n #[macro_use]\n-#[macro_reexport(vec)]\n+#[macro_reexport(vec, format)]\n extern crate \"collections\" as core_collections;\n \n #[allow(deprecated)] extern crate \"rand\" as core_rand;\n@@ -285,11 +285,12 @@ mod tuple;\n // can be resolved within libstd.\n #[doc(hidden)]\n mod std {\n+    // NOTE: remove after next snapshot\n     // mods used for deriving\n-    pub use clone;\n-    pub use cmp;\n-    pub use hash;\n-    pub use default;\n+    #[cfg(stage0)] pub use clone;\n+    #[cfg(stage0)] pub use cmp;\n+    #[cfg(stage0)] pub use hash;\n+    #[cfg(stage0)] pub use default;\n \n     pub use sync; // used for select!()\n     pub use error; // used for try!()\n@@ -312,5 +313,6 @@ mod std {\n \n     pub use boxed; // used for vec![]\n     // for-loops\n-    pub use iter;\n+    // NOTE: remove after next snapshot\n+    #[cfg(stage0)] pub use iter;\n }"}, {"sha": "6a2aafcf8f396d985b52883a2c1a938be3c0fbd8", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -70,6 +70,7 @@ macro_rules! panic {\n /// format!(\"hello {}\", \"world!\");\n /// format!(\"x = {}, y = {y}\", 10, y = 30);\n /// ```\n+#[cfg(stage0)] // NOTE: remove after snapshot\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! format {"}, {"sha": "778b2cabea622ef9918c1ce08028ea7151ab4f69", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -544,6 +544,7 @@ pub struct ExtCtxt<'a> {\n     pub cfg: ast::CrateConfig,\n     pub backtrace: ExpnId,\n     pub ecfg: expand::ExpansionConfig,\n+    pub use_std: bool,\n \n     pub mod_path: Vec<ast::Ident> ,\n     pub trace_mac: bool,\n@@ -563,6 +564,7 @@ impl<'a> ExtCtxt<'a> {\n             backtrace: NO_EXPANSION,\n             mod_path: Vec::new(),\n             ecfg: ecfg,\n+            use_std: true,\n             trace_mac: false,\n             exported_macros: Vec::new(),\n             syntax_env: env,\n@@ -737,6 +739,9 @@ impl<'a> ExtCtxt<'a> {\n     pub fn ident_of(&self, st: &str) -> ast::Ident {\n         str_to_ident(st)\n     }\n+    pub fn ident_of_std(&self, st: &str) -> ast::Ident {\n+        self.ident_of(if self.use_std { \"std\" } else { st })\n+    }\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         token::intern(st)\n     }"}, {"sha": "a7d1baf08beacd0cef93fbbf511b4bca2c014c55", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -386,7 +386,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.path_all(DUMMY_SP,\n                           true,\n                           vec!(\n-                              self.ident_of(\"std\"),\n+                              self.ident_of_std(\"core\"),\n                               self.ident_of(\"option\"),\n                               self.ident_of(\"Option\")\n                           ),\n@@ -656,7 +656,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn expr_vec_ng(&self, sp: Span) -> P<ast::Expr> {\n         self.expr_call_global(sp,\n-                              vec!(self.ident_of(\"std\"),\n+                              vec!(self.ident_of_std(\"collections\"),\n                                    self.ident_of(\"vec\"),\n                                    self.ident_of(\"Vec\"),\n                                    self.ident_of(\"new\")),\n@@ -676,7 +676,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_some(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"option\"),\n             self.ident_of(\"Option\"),\n             self.ident_of(\"Some\"));\n@@ -685,7 +685,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_none(&self, sp: Span) -> P<ast::Expr> {\n         let none = self.path_global(sp, vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"option\"),\n             self.ident_of(\"Option\"),\n             self.ident_of(\"None\")));\n@@ -712,7 +712,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr_call_global(\n             span,\n             vec!(\n-                self.ident_of(\"std\"),\n+                self.ident_of_std(\"core\"),\n                 self.ident_of(\"rt\"),\n                 self.ident_of(\"begin_unwind\")),\n             vec!(\n@@ -728,7 +728,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_ok(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let ok = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"result\"),\n             self.ident_of(\"Result\"),\n             self.ident_of(\"Ok\"));\n@@ -737,18 +737,28 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_err(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let err = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"result\"),\n             self.ident_of(\"Result\"),\n             self.ident_of(\"Err\"));\n         self.expr_call_global(sp, err, vec!(expr))\n     }\n \n     fn expr_try(&self, sp: Span, head: P<ast::Expr>) -> P<ast::Expr> {\n-        let ok = self.ident_of(\"Ok\");\n-        let ok_path = self.path_ident(sp, ok);\n-        let err = self.ident_of(\"Err\");\n-        let err_path = self.path_ident(sp, err);\n+        let ok = vec![\n+            self.ident_of_std(\"core\"),\n+            self.ident_of(\"result\"),\n+            self.ident_of(\"Result\"),\n+            self.ident_of(\"Ok\")\n+        ];\n+        let ok_path = self.path_global(sp, ok);\n+        let err = vec![\n+            self.ident_of_std(\"core\"),\n+            self.ident_of(\"result\"),\n+            self.ident_of(\"Result\"),\n+            self.ident_of(\"Err\")\n+        ];\n+        let err_path = self.path_global(sp, err);\n \n         let binding_variable = self.ident_of(\"__try_var\");\n         let binding_pat = self.pat_ident(sp, binding_variable);\n@@ -758,8 +768,9 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let ok_pat = self.pat_enum(sp, ok_path, vec!(binding_pat.clone()));\n \n         // Err(__try_var)  (pattern and expression resp.)\n-        let err_pat = self.pat_enum(sp, err_path, vec!(binding_pat));\n-        let err_inner_expr = self.expr_call_ident(sp, err, vec!(binding_expr.clone()));\n+        let err_pat = self.pat_enum(sp, err_path.clone(), vec!(binding_pat));\n+        let err_inner_expr = self.expr_call(sp, self.expr_path(err_path),\n+                                            vec!(binding_expr.clone()));\n         // return Err(__try_var)\n         let err_expr = self.expr(sp, ast::ExprRet(Some(err_inner_expr)));\n \n@@ -808,7 +819,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn pat_some(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"option\"),\n             self.ident_of(\"Option\"),\n             self.ident_of(\"Some\"));\n@@ -818,7 +829,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn pat_none(&self, span: Span) -> P<ast::Pat> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"option\"),\n             self.ident_of(\"Option\"),\n             self.ident_of(\"None\"));\n@@ -828,7 +839,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn pat_ok(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"result\"),\n             self.ident_of(\"Result\"),\n             self.ident_of(\"Ok\"));\n@@ -838,7 +849,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn pat_err(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n         let some = vec!(\n-            self.ident_of(\"std\"),\n+            self.ident_of_std(\"core\"),\n             self.ident_of(\"result\"),\n             self.ident_of(\"Result\"),\n             self.ident_of(\"Err\"));"}, {"sha": "879718a6399f5b21f2e3bb024b35527bd1aa7752", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -45,10 +45,16 @@ pub fn expand_deriving_bound<F>(cx: &mut ExtCtxt,\n         }\n     };\n \n+    let path = Path::new(vec![\n+        if cx.use_std { \"std\" } else { \"core\" },\n+        \"marker\",\n+        name\n+    ]);\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"marker\", name)),\n+        path: path,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: Vec::new(),"}, {"sha": "9f009ad4d7869ed6e6721eb46bb70b8730fe8c90", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -29,7 +29,7 @@ pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: path!(std::clone::Clone),\n+        path: path_std!(cx, core::clone::Clone),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -58,7 +58,7 @@ fn cs_clone(\n     let ctor_path;\n     let all_fields;\n     let fn_path = vec![\n-        cx.ident_of(\"std\"),\n+        cx.ident_of_std(\"core\"),\n         cx.ident_of(\"clone\"),\n         cx.ident_of(\"Clone\"),\n         cx.ident_of(\"clone\"),"}, {"sha": "91212a86958962d08c71761b30545ea7432e15f5", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -82,7 +82,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: path!(std::cmp::PartialEq),\n+        path: path_std!(cx, core::cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "b109850a6bd23dac42f217f7e4b742bb527dcc7c", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -45,8 +45,8 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n         } }\n     }\n \n-    let ordering_ty = Literal(path!(std::cmp::Ordering));\n-    let ret_ty = Literal(Path::new_(pathvec!(std::option::Option),\n+    let ordering_ty = Literal(path_std!(cx, core::cmp::Ordering));\n+    let ret_ty = Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                     None,\n                                     vec![box ordering_ty],\n                                     true));\n@@ -69,7 +69,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: vec![],\n-        path: path!(std::cmp::PartialOrd),\n+        path: path_std!(cx, core::cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n         methods: vec![\n@@ -107,15 +107,15 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n               substr: &Substructure) -> P<Expr> {\n     let test_id = cx.ident_of(\"__test\");\n     let ordering = cx.path_global(span,\n-                                  vec!(cx.ident_of(\"std\"),\n+                                  vec!(cx.ident_of_std(\"core\"),\n                                        cx.ident_of(\"cmp\"),\n                                        cx.ident_of(\"Ordering\"),\n                                        cx.ident_of(\"Equal\")));\n     let ordering = cx.expr_path(ordering);\n     let equals_expr = cx.expr_some(span, ordering);\n \n     let partial_cmp_path = vec![\n-        cx.ident_of(\"std\"),\n+        cx.ident_of_std(\"core\"),\n         cx.ident_of(\"cmp\"),\n         cx.ident_of(\"PartialOrd\"),\n         cx.ident_of(\"partial_cmp\"),"}, {"sha": "31a754a1254bb486c88936b9674afe9c3d31f7c3", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -46,7 +46,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: path!(std::cmp::Eq),\n+        path: path_std!(cx, core::cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!("}, {"sha": "2f6f99bc1ee46211bf4959321e2b09ff43d064db", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -30,7 +30,7 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: path!(std::cmp::Ord),\n+        path: path_std!(cx, core::cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -39,7 +39,7 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(borrowed_self()),\n-                ret_ty: Literal(path!(std::cmp::Ordering)),\n+                ret_ty: Literal(path_std!(cx, core::cmp::Ordering)),\n                 attributes: attrs,\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     cs_cmp(a, b, c)\n@@ -65,13 +65,13 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n               substr: &Substructure) -> P<Expr> {\n     let test_id = cx.ident_of(\"__test\");\n     let equals_path = cx.path_global(span,\n-                                     vec!(cx.ident_of(\"std\"),\n+                                     vec!(cx.ident_of_std(\"core\"),\n                                           cx.ident_of(\"cmp\"),\n                                           cx.ident_of(\"Ordering\"),\n                                           cx.ident_of(\"Equal\")));\n \n     let cmp_path = vec![\n-        cx.ident_of(\"std\"),\n+        cx.ident_of_std(\"core\"),\n         cx.ident_of(\"cmp\"),\n         cx.ident_of(\"Ord\"),\n         cx.ident_of(\"cmp\"),"}, {"sha": "f003a3453e15e578ba88034727b75d4c5654a593", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -49,6 +49,12 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                                     krate: &'static str) where\n     F: FnOnce(P<Item>),\n {\n+    if !cx.use_std {\n+        // FIXME(#21880): lift this requirement.\n+        cx.span_err(span, \"this trait cannot be derived with #![no_std]\");\n+        return;\n+    }\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -68,7 +74,7 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(Path::new_local(\"__D\")),\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(\n-                    pathvec!(std::result::Result),\n+                    pathvec_std!(cx, core::result::Result),\n                     None,\n                     vec!(box Self, box Literal(Path::new_(\n                         vec![\"__D\", \"Error\"], None, vec![], false"}, {"sha": "9b76f4b1658f0d47edfb82fadaaf0a32a8c4f735", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -29,7 +29,7 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: path!(std::default::Default),\n+        path: path_std!(cx, core::default::Default),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -52,7 +52,7 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n \n fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n     let default_ident = vec!(\n-        cx.ident_of(\"std\"),\n+        cx.ident_of_std(\"core\"),\n         cx.ident_of(\"default\"),\n         cx.ident_of(\"Default\"),\n         cx.ident_of(\"default\")"}, {"sha": "dd6094705995e94a4b70818984235fb81c0dad3b", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -125,6 +125,12 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                                     krate: &'static str) where\n     F: FnOnce(P<Item>),\n {\n+    if !cx.use_std {\n+        // FIXME(#21880): lift this requirement.\n+        cx.span_err(span, \"this trait cannot be derived with #![no_std]\");\n+        return;\n+    }\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -144,7 +150,7 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(Path::new_local(\"__S\")),\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(\n-                    pathvec!(std::result::Result),\n+                    pathvec_std!(cx, core::result::Result),\n                     None,\n                     vec!(box Tuple(Vec::new()), box Literal(Path::new_(\n                         vec![\"__S\", \"Error\"], None, vec![], false"}, {"sha": "5aa9f9a0c3e761f163b476caeeabd61a5f4cc588", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -25,13 +25,13 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n     F: FnOnce(P<Item>),\n {\n \n-    let path = Path::new_(pathvec!(std::hash::Hash), None,\n+    let path = Path::new_(pathvec_std!(cx, core::hash::Hash), None,\n                           vec!(box Literal(Path::new_local(\"__S\"))), true);\n     let generics = LifetimeBounds {\n         lifetimes: Vec::new(),\n         bounds: vec!((\"__S\",\n-                      vec!(path!(std::hash::Writer),\n-                           path!(std::hash::Hasher)))),\n+                      vec!(path_std!(cx, core::hash::Writer),\n+                           path_std!(cx, core::hash::Hasher)))),\n     };\n     let args = Path::new_local(\"__S\");\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n@@ -69,7 +69,7 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n     let call_hash = |span, thing_expr| {\n         let hash_path = {\n             let strs = vec![\n-                cx.ident_of(\"std\"),\n+                cx.ident_of_std(\"core\"),\n                 cx.ident_of(\"hash\"),\n                 cx.ident_of(\"Hash\"),\n                 cx.ident_of(\"hash\"),"}, {"sha": "9c3fa58ad0960b825d445a1968778741b33fa204", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -30,6 +30,22 @@ macro_rules! path {\n     )\n }\n \n+macro_rules! pathvec_std {\n+    ($cx:expr, $first:ident :: $($rest:ident)::+) => (\n+        if $cx.use_std {\n+            pathvec!(std :: $($rest)::+)\n+        } else {\n+            pathvec!($first :: $($rest)::+)\n+        }\n+    )\n+}\n+\n+macro_rules! path_std {\n+    ($($x:tt)*) => (\n+        ::ext::deriving::generic::ty::Path::new( pathvec_std!( $($x)* ) )\n+    )\n+}\n+\n pub mod bounds;\n pub mod clone;\n pub mod encodable;"}, {"sha": "bf742263c6d8774561efae0158c53a59db5755fb", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -30,7 +30,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: path!(std::num::FromPrimitive),\n+        path: path_std!(cx, core::num::FromPrimitive),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -39,7 +39,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: None,\n                 args: vec!(Literal(path!(i64))),\n-                ret_ty: Literal(Path::new_(pathvec!(std::option::Option),\n+                ret_ty: Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                            None,\n                                            vec!(box Self),\n                                            true)),\n@@ -54,7 +54,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: None,\n                 args: vec!(Literal(path!(u64))),\n-                ret_ty: Literal(Path::new_(pathvec!(std::option::Option),\n+                ret_ty: Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                            None,\n                                            vec!(box Self),\n                                            true)),"}, {"sha": "4c3678d9572da8a91e80a9154c155d2357f2f6a4", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -28,6 +28,12 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                  \"`#[derive(Rand)]` is deprecated in favour of `#[derive_Rand]` from \\\n                   `rand_macros` on crates.io\");\n \n+    if !cx.use_std {\n+        // FIXME(#21880): lift this requirement.\n+        cx.span_err(span, \"this trait cannot be derived with #![no_std]\");\n+        return;\n+    }\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "3f5947672e022ce67971f031b5e88827b701882b", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -29,13 +29,13 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n     F: FnOnce(P<Item>),\n {\n     // &mut ::std::fmt::Formatter\n-    let fmtr = Ptr(box Literal(path!(std::fmt::Formatter)),\n+    let fmtr = Ptr(box Literal(path_std!(cx, core::fmt::Formatter)),\n                    Borrowed(None, ast::MutMutable));\n \n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: path!(std::fmt::Debug),\n+        path: path_std!(cx, core::fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec![\n@@ -44,7 +44,7 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(fmtr),\n-                ret_ty: Literal(path!(std::fmt::Result)),\n+                ret_ty: Literal(path_std!(cx, core::fmt::Result)),\n                 attributes: Vec::new(),\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     show_substructure(a, b, c)"}, {"sha": "ef9d37998793229330fb6074fb8fe7137bc394cc", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -34,7 +34,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n       Err(..) => {\n           cx.expr_path(cx.path_all(sp,\n                                    true,\n-                                   vec!(cx.ident_of(\"std\"),\n+                                   vec!(cx.ident_of_std(\"core\"),\n                                         cx.ident_of(\"option\"),\n                                         cx.ident_of(\"Option\"),\n                                         cx.ident_of(\"None\")),\n@@ -50,7 +50,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n       }\n       Ok(s) => {\n           cx.expr_call_global(sp,\n-                              vec!(cx.ident_of(\"std\"),\n+                              vec!(cx.ident_of_std(\"core\"),\n                                    cx.ident_of(\"option\"),\n                                    cx.ident_of(\"Option\"),\n                                    cx.ident_of(\"Some\")),"}, {"sha": "95e015fee6d3c81c73eeefc03aea5f514a1ec481", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -31,6 +31,7 @@ use ptr::P;\n use util::small_vector::SmallVector;\n use visit;\n use visit::Visitor;\n+use std_inject;\n \n pub fn expand_type(t: P<ast::Ty>,\n                    fld: &mut MacroExpander,\n@@ -275,7 +276,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             let match_expr = {\n                 let next_path = {\n                     let strs = vec![\n-                        fld.cx.ident_of(\"std\"),\n+                        fld.cx.ident_of_std(\"core\"),\n                         fld.cx.ident_of(\"iter\"),\n                         fld.cx.ident_of(\"Iterator\"),\n                         fld.cx.ident_of(\"next\"),\n@@ -308,7 +309,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             let into_iter_expr = {\n                 let into_iter_path = {\n                     let strs = vec![\n-                        fld.cx.ident_of(\"std\"),\n+                        fld.cx.ident_of_std(\"core\"),\n                         fld.cx.ident_of(\"iter\"),\n                         fld.cx.ident_of(\"IntoIterator\"),\n                         fld.cx.ident_of(\"into_iter\"),\n@@ -1417,6 +1418,8 @@ pub fn expand_crate(parse_sess: &parse::ParseSess,\n                     user_exts: Vec<NamedSyntaxExtension>,\n                     c: Crate) -> Crate {\n     let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg);\n+    cx.use_std = std_inject::use_std(&c);\n+\n     let mut expander = MacroExpander::new(&mut cx);\n \n     for def in imported_macros {"}, {"sha": "170a455a9132610d3658d0fd3786f6dd0e152222", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n \n     fn rtpath(ecx: &ExtCtxt, s: &str) -> Vec<ast::Ident> {\n-        vec![ecx.ident_of(\"std\"), ecx.ident_of(\"fmt\"), ecx.ident_of(\"rt\"),\n+        vec![ecx.ident_of_std(\"core\"), ecx.ident_of(\"fmt\"), ecx.ident_of(\"rt\"),\n              ecx.ident_of(\"v1\"), ecx.ident_of(s)]\n     }\n \n@@ -576,7 +576,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         };\n \n         self.ecx.expr_call_global(self.fmtsp, vec!(\n-                self.ecx.ident_of(\"std\"),\n+                self.ecx.ident_of_std(\"core\"),\n                 self.ecx.ident_of(\"fmt\"),\n                 self.ecx.ident_of(\"Arguments\"),\n                 self.ecx.ident_of(fn_name)), fn_args)\n@@ -607,20 +607,20 @@ impl<'a, 'b> Context<'a, 'b> {\n             }\n             Unsigned => {\n                 return ecx.expr_call_global(sp, vec![\n-                        ecx.ident_of(\"std\"),\n+                        ecx.ident_of_std(\"core\"),\n                         ecx.ident_of(\"fmt\"),\n                         ecx.ident_of(\"ArgumentV1\"),\n                         ecx.ident_of(\"from_uint\")], vec![arg])\n             }\n         };\n \n         let format_fn = ecx.path_global(sp, vec![\n-                ecx.ident_of(\"std\"),\n+                ecx.ident_of_std(\"core\"),\n                 ecx.ident_of(\"fmt\"),\n                 ecx.ident_of(trait_),\n                 ecx.ident_of(\"fmt\")]);\n         ecx.expr_call_global(sp, vec![\n-                ecx.ident_of(\"std\"),\n+                ecx.ident_of_std(\"core\"),\n                 ecx.ident_of(\"fmt\"),\n                 ecx.ident_of(\"ArgumentV1\"),\n                 ecx.ident_of(\"new\")], vec![arg, ecx.expr_path(format_fn)])"}, {"sha": "630b08f005629ed91beba2e203e82be456a18264", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -37,7 +37,7 @@ pub fn maybe_inject_prelude(krate: ast::Crate) -> ast::Crate {\n     }\n }\n \n-fn use_std(krate: &ast::Crate) -> bool {\n+pub fn use_std(krate: &ast::Crate) -> bool {\n     !attr::contains_name(&krate.attrs[], \"no_std\")\n }\n "}, {"sha": "60fa8f0db115ca4401336cd915dab797be2e36f2", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -78,7 +78,9 @@ pub mod str {\n     pub use u_str::{utf16_items, Utf16Encoder};\n }\n \n+// NOTE: remove after next snapshot\n // this lets us use #[derive(..)]\n+#[cfg(stage0)]\n mod std {\n     pub use core::clone;\n     pub use core::cmp;"}, {"sha": "7dee78e2672f36185eaccab01d35ea8713756d54", "filename": "src/test/compile-fail/derive-no-std-not-supported.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+\n+extern crate core;\n+extern crate rand;\n+extern crate \"serialize\" as rustc_serialize;\n+\n+#[derive(Rand)]  //~ ERROR this trait cannot be derived\n+//~^ WARNING `#[derive(Rand)]` is deprecated\n+struct Foo {\n+    x: u32,\n+}\n+\n+#[derive(RustcEncodable)]  //~ ERROR this trait cannot be derived\n+struct Bar {\n+    x: u32,\n+}\n+\n+#[derive(RustcDecodable)]  //~ ERROR this trait cannot be derived\n+struct Baz {\n+    x: u32,\n+}\n+\n+fn main() {\n+    Foo { x: 0 };\n+    Bar { x: 0 };\n+    Baz { x: 0 };\n+}"}, {"sha": "a10e3449039d4ca8151bed20f6b71f1b28435a64", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -41,41 +41,41 @@\n \n \n     ((::std::fmt::format as\n-         fn(core::fmt::Arguments<'_>) -> collections::string::String {std::fmt::format})(((::std::fmt::Arguments::new_v1\n-                                                                                              as\n-                                                                                              fn(&[&str], &[core::fmt::ArgumentV1<'_>]) -> core::fmt::Arguments<'_> {core::fmt::Arguments<'a>::new_v1})(({\n-                                                                                                                                                                                                             static __STATIC_FMTSTR:\n-                                                                                                                                                                                                                    &'static [&'static str]\n-                                                                                                                                                                                                                    =\n-                                                                                                                                                                                                                 (&([(\"test\"\n+         fn(core::fmt::Arguments<'_>) -> collections::string::String {collections::fmt::format})(((::std::fmt::Arguments::new_v1\n+                                                                                                      as\n+                                                                                                      fn(&[&str], &[core::fmt::ArgumentV1<'_>]) -> core::fmt::Arguments<'_> {core::fmt::Arguments<'a>::new_v1})(({\n+                                                                                                                                                                                                                     static __STATIC_FMTSTR:\n+                                                                                                                                                                                                                            &'static [&'static str]\n+                                                                                                                                                                                                                            =\n+                                                                                                                                                                                                                         (&([(\"test\"\n+                                                                                                                                                                                                                                 as\n+                                                                                                                                                                                                                                 &'static str)]\n+                                                                                                                                                                                                                               as\n+                                                                                                                                                                                                                               [&'static str; 1])\n+                                                                                                                                                                                                                             as\n+                                                                                                                                                                                                                             &'static [&'static str; 1]);\n+                                                                                                                                                                                                                     (__STATIC_FMTSTR\n                                                                                                                                                                                                                          as\n-                                                                                                                                                                                                                         &'static str)]\n-                                                                                                                                                                                                                       as\n-                                                                                                                                                                                                                       [&'static str; 1])\n-                                                                                                                                                                                                                     as\n-                                                                                                                                                                                                                     &'static [&'static str; 1]);\n-                                                                                                                                                                                                             (__STATIC_FMTSTR\n-                                                                                                                                                                                                                 as\n-                                                                                                                                                                                                                 &'static [&'static str])\n-                                                                                                                                                                                                         }\n-                                                                                                                                                                                                            as\n-                                                                                                                                                                                                            &[&str]),\n-                                                                                                                                                                                                        (&(match (()\n-                                                                                                                                                                                                                     as\n-                                                                                                                                                                                                                     ())\n-                                                                                                                                                                                                               {\n-                                                                                                                                                                                                               ()\n-                                                                                                                                                                                                               =>\n-                                                                                                                                                                                                               ([]\n-                                                                                                                                                                                                                   as\n-                                                                                                                                                                                                                   [core::fmt::ArgumentV1<'_>; 0]),\n-                                                                                                                                                                                                           }\n-                                                                                                                                                                                                              as\n-                                                                                                                                                                                                              [core::fmt::ArgumentV1<'_>; 0])\n-                                                                                                                                                                                                            as\n-                                                                                                                                                                                                            &[core::fmt::ArgumentV1<'_>; 0]))\n-                                                                                             as\n-                                                                                             core::fmt::Arguments<'_>))\n+                                                                                                                                                                                                                         &'static [&'static str])\n+                                                                                                                                                                                                                 }\n+                                                                                                                                                                                                                    as\n+                                                                                                                                                                                                                    &[&str]),\n+                                                                                                                                                                                                                (&(match (()\n+                                                                                                                                                                                                                             as\n+                                                                                                                                                                                                                             ())\n+                                                                                                                                                                                                                       {\n+                                                                                                                                                                                                                       ()\n+                                                                                                                                                                                                                       =>\n+                                                                                                                                                                                                                       ([]\n+                                                                                                                                                                                                                           as\n+                                                                                                                                                                                                                           [core::fmt::ArgumentV1<'_>; 0]),\n+                                                                                                                                                                                                                   }\n+                                                                                                                                                                                                                      as\n+                                                                                                                                                                                                                      [core::fmt::ArgumentV1<'_>; 0])\n+                                                                                                                                                                                                                    as\n+                                                                                                                                                                                                                    &[core::fmt::ArgumentV1<'_>; 0]))\n+                                                                                                     as\n+                                                                                                     core::fmt::Arguments<'_>))\n         as collections::string::String);\n }\n pub type Foo = [i32; (3us as usize)];"}, {"sha": "0195076fde4701fdd9a8304be1b102024b6c3133", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -74,7 +74,7 @@ trait Sized {}\n #[lang = \"copy\"]\n trait Copy {}\n \n-mod std {\n+mod core {\n     pub mod marker {\n         pub use Copy;\n     }"}, {"sha": "c9bbb204ab7f949584cdf785e205a270dcc7ae8b", "filename": "src/test/run-pass/derive-no-std.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderive-no-std.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+\n+extern crate core;\n+extern crate rand;\n+extern crate \"serialize\" as rustc_serialize;\n+extern crate collections;\n+\n+// Issue #16803\n+\n+#[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n+         Debug, Default, Copy)]\n+struct Foo {\n+    x: u32,\n+}\n+\n+#[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n+         Debug, Copy)]\n+enum Bar {\n+    Qux,\n+    Quux(u32),\n+}\n+\n+#[derive(FromPrimitive)]\n+enum Baz { A=0, B=5, }\n+\n+fn main() {\n+    Foo { x: 0 };\n+    Bar::Quux(3);\n+    Baz::A;\n+}"}, {"sha": "5911e95349f32ff584574bb0a5ceaf549e085c5c", "filename": "src/test/run-pass/for-loop-no-std.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![feature(lang_items, start)]\n+\n+extern crate \"std\" as other;\n+\n+#[macro_use] extern crate core;\n+#[macro_use] extern crate collections;\n+\n+use core::slice::SliceExt;\n+\n+#[start]\n+fn start(_argc: int, _argv: *const *const u8) -> int {\n+    for _ in [1,2,3].iter() { }\n+    0\n+}"}, {"sha": "43f7b6f40332faaa2e25e51b73eca8ba6732a468", "filename": "src/test/run-pass/format-no-std.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67350bc8681d6df212817644cad7c748039a6238/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=67350bc8681d6df212817644cad7c748039a6238", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![feature(lang_items, start)]\n+\n+extern crate \"std\" as other;\n+\n+#[macro_use] extern crate core;\n+#[macro_use] extern crate collections;\n+\n+use collections::string::ToString;\n+\n+#[start]\n+fn start(_argc: int, _argv: *const *const u8) -> int {\n+    let s = format!(\"{}\", 1i);\n+    assert_eq!(s, \"1\".to_string());\n+\n+    let s = format!(\"test\");\n+    assert_eq!(s, \"test\".to_string());\n+\n+    let s = format!(\"{test}\", test=3i);\n+    assert_eq!(s, \"3\".to_string());\n+\n+    let s = format!(\"hello {}\", \"world\");\n+    assert_eq!(s, \"hello world\".to_string());\n+\n+    0\n+}"}]}