{"sha": "d5e3009bd8a2eb934415a1ed1b19b031b6f9c4e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZTMwMDliZDhhMmViOTM0NDE1YTFlZDFiMTliMDMxYjZmOWM0ZTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-23T17:09:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-23T17:09:58Z"}, "message": "Rollup merge of #72431 - RalfJung:ub-warning, r=shepmaster\n\nadd warning sign to UB examples\n\nJust to make it less likely that people miss the fact that these are examples for how to *not* do it.", "tree": {"sha": "9c6a1df0bbb8e35b2b4e897ba0ec3c6f53d11d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6a1df0bbb8e35b2b4e897ba0ec3c6f53d11d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5e3009bd8a2eb934415a1ed1b19b031b6f9c4e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyVjmCRBK7hj4Ov3rIwAAdHIIAHaXOyNHHgX0Uopbn/Hi3fER\niFVf6asUzvcHWtQwP7T6ubY/CY49o7ZGw7fMiHzCnjOav83Xh4OIdkxeDFv7L17K\nkleBxoMldTLQMxBwJjyjHXcQsiAhvzlMUmtBKN5lrkPyDzxW7l5JeilKOYt0j0tv\njtGFIJT0u1X/tdeplz7CFQZ4piWR5gxTsBwUxj12ILHlyp7rkU2ij9xMylG7GOpN\nVSoAG4P827PZA+VlYhodhDeT2Uj7oCZ0kY+IGVEhfpQV9tACS9JZfFG/aQ43pLE0\nRkU6VeERnPU/ObqY/nxKZnk0Fjd1//jSQQCg2m8/FzSrmaATo4HL9K5aK0VmErg=\n=fDi0\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c6a1df0bbb8e35b2b4e897ba0ec3c6f53d11d36\nparent b24030fc3ef21bb0f23a5ea8fc47d9684a4e27a6\nparent 1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590253798 +0200\ncommitter GitHub <noreply@github.com> 1590253798 +0200\n\nRollup merge of #72431 - RalfJung:ub-warning, r=shepmaster\n\nadd warning sign to UB examples\n\nJust to make it less likely that people miss the fact that these are examples for how to *not* do it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e3009bd8a2eb934415a1ed1b19b031b6f9c4e2", "html_url": "https://github.com/rust-lang/rust/commit/d5e3009bd8a2eb934415a1ed1b19b031b6f9c4e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5e3009bd8a2eb934415a1ed1b19b031b6f9c4e2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b24030fc3ef21bb0f23a5ea8fc47d9684a4e27a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24030fc3ef21bb0f23a5ea8fc47d9684a4e27a6", "html_url": "https://github.com/rust-lang/rust/commit/b24030fc3ef21bb0f23a5ea8fc47d9684a4e27a6"}, {"sha": "1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3", "html_url": "https://github.com/rust-lang/rust/commit/1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "01c97444ae3aea20c7ab3e2b4a764dbb25bb25a6", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d5e3009bd8a2eb934415a1ed1b19b031b6f9c4e2/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e3009bd8a2eb934415a1ed1b19b031b6f9c4e2/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=d5e3009bd8a2eb934415a1ed1b19b031b6f9c4e2", "patch": "@@ -20,9 +20,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior!\n+/// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<&i32>`:\n-/// let x: &i32 = unsafe { MaybeUninit::zeroed().assume_init() }; // undefined behavior!\n+/// let x: &i32 = unsafe { MaybeUninit::zeroed().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n ///\n /// This is exploited by the compiler for various optimizations, such as eliding\n@@ -35,9 +35,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior!\n+/// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<bool>`:\n-/// let b: bool = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior!\n+/// let b: bool = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n ///\n /// Moreover, uninitialized memory is special in that the compiler knows that\n@@ -49,9 +49,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let x: i32 = unsafe { mem::uninitialized() }; // undefined behavior!\n+/// let x: i32 = unsafe { mem::uninitialized() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<i32>`:\n-/// let x: i32 = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior!\n+/// let x: i32 = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n@@ -348,7 +348,7 @@ impl<T> MaybeUninit<T> {\n     /// let x = MaybeUninit::<(u8, NotZero)>::zeroed();\n     /// let x = unsafe { x.assume_init() };\n     /// // Inside a pair, we create a `NotZero` that does not have a valid discriminant.\n-    /// // This is undefined behavior.\n+    /// // This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline]\n@@ -400,7 +400,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec = unsafe { &*x.as_ptr() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n@@ -437,7 +437,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n@@ -489,7 +489,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_init = unsafe { x.assume_init() };\n-    /// // `x` had not been initialized yet, so this last line caused undefined behavior.\n+    /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n@@ -553,7 +553,7 @@ impl<T> MaybeUninit<T> {\n     /// x.write(Some(vec![0,1,2]));\n     /// let x1 = unsafe { x.read() };\n     /// let x2 = unsafe { x.read() };\n-    /// // We now created two copies of the same vector, leading to a double-free when\n+    /// // We now created two copies of the same vector, leading to a double-free \u26a0\ufe0f when\n     /// // they both get dropped!\n     /// ```\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n@@ -603,7 +603,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec: &Vec<u32> = unsafe { x.get_ref() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// ```rust,no_run\n@@ -686,7 +686,7 @@ impl<T> MaybeUninit<T> {\n     /// unsafe {\n     ///     *b.get_mut() = true;\n     ///     // We have created a (mutable) reference to an uninitialized `bool`!\n-    ///     // This is undefined behavior.\n+    ///     // This is undefined behavior. \u26a0\ufe0f\n     /// }\n     /// ```\n     ///"}]}