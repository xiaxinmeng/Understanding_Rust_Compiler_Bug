{"sha": "50132db4c676a7dac105dba7fa966edafaa1d209", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMTMyZGI0YzY3NmE3ZGFjMTA1ZGJhN2ZhOTY2ZWRhZmFhMWQyMDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T07:10:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T07:10:35Z"}, "message": "Store syntax errors", "tree": {"sha": "a0635e78b60d747228d351e67efbbc99ec785538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0635e78b60d747228d351e67efbbc99ec785538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50132db4c676a7dac105dba7fa966edafaa1d209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50132db4c676a7dac105dba7fa966edafaa1d209", "html_url": "https://github.com/rust-lang/rust/commit/50132db4c676a7dac105dba7fa966edafaa1d209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50132db4c676a7dac105dba7fa966edafaa1d209/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31a07da88dc9473a9f05617a98db6180e6e9e3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/31a07da88dc9473a9f05617a98db6180e6e9e3c6", "html_url": "https://github.com/rust-lang/rust/commit/31a07da88dc9473a9f05617a98db6180e6e9e3c6"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "83aa4186f25c6308278de4699f2e2873dc5b65d4", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50132db4c676a7dac105dba7fa966edafaa1d209/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50132db4c676a7dac105dba7fa966edafaa1d209/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=50132db4c676a7dac105dba7fa966edafaa1d209", "patch": "@@ -1,5 +1,5 @@\n use {SyntaxKind, TextUnit, TextRange};\n-use super::{NodeData, NodeIdx, File};\n+use super::{NodeData, SyntaxErrorData, NodeIdx, File};\n \n pub trait Sink {\n     fn leaf(&mut self, kind: SyntaxKind, len: TextUnit);\n@@ -11,6 +11,7 @@ pub trait Sink {\n pub struct FileBuilder {\n     text: String,\n     nodes: Vec<NodeData>,\n+    errors: Vec<SyntaxErrorData>,\n     in_progress: Vec<(NodeIdx, Option<NodeIdx>)>, // (parent, last_child)\n     pos: TextUnit,\n }\n@@ -58,6 +59,7 @@ impl FileBuilder {\n         FileBuilder {\n             text,\n             nodes: Vec::new(),\n+            errors: Vec::new(),\n             in_progress: Vec::new(),\n             pos: TextUnit::new(0),\n         }\n@@ -75,6 +77,7 @@ impl FileBuilder {\n         File {\n             text: self.text,\n             nodes: self.nodes,\n+            errors: self.errors,\n         }\n     }\n "}, {"sha": "00d33cbc7a1e5819ead2744033c6d25fc9fa3243", "filename": "src/tree/mod.rs", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/50132db4c676a7dac105dba7fa966edafaa1d209/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50132db4c676a7dac105dba7fa966edafaa1d209/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=50132db4c676a7dac105dba7fa966edafaa1d209", "patch": "@@ -36,6 +36,7 @@ pub struct Token {\n pub struct File {\n \ttext: String,\n \tnodes: Vec<NodeData>,\n+\terrors: Vec<SyntaxErrorData>,\n }\n \n impl File {\n@@ -72,6 +73,14 @@ impl<'f> Node<'f> {\n \t\tChildren { next: self.as_node(self.data().first_child) }\n \t}\n \n+\tpub fn SyntaxErrors(&self) -> SyntaxErrors<'f> {\n+\t\tlet pos = self.file.errors.iter().position(|e| e.node == self.idx);\n+\t\tlet next = pos\n+\t\t\t.map(|i| ErrorIdx(i as u32))\n+\t\t\t.map(|idx| SyntaxError { file: self.file, idx });\n+\t\tSyntaxErrors { next }\n+\t}\n+\n \tfn data(&self) -> &'f NodeData {\n \t\t&self.file.nodes[self.idx]\n \t}\n@@ -81,7 +90,41 @@ impl<'f> Node<'f> {\n \t}\n }\n \n+impl<'f> fmt::Debug for Node<'f> {\n+\tfn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+\t\twrite!(fmt, \"{:?}@{:?}\", self.kind(), self.range())\n+\t}\n+}\n \n+#[derive(Clone, Copy)]\n+pub struct SyntaxError<'f> {\n+\tfile: &'f File,\n+\tidx: ErrorIdx,\n+}\n+\n+impl<'f> SyntaxError<'f> {\n+\tpub fn message(&self) -> &'f str {\n+\t\tself.data().message.as_str()\n+\t}\n+\n+\tfn data(&self) -> &'f SyntaxErrorData {\n+\t\t&self.file.errors[self.idx]\n+\t}\n+\n+\tfn next(&self) -> Option<SyntaxError<'f>> {\n+\t\tif self.file.errors.len() == self.idx.0 as usize {\n+\t\t\treturn None;\n+\t\t}\n+\t\tlet result = SyntaxError {\n+\t\t\tfile: self.file,\n+\t\t\tidx: ErrorIdx(self.idx.0 + 1)\n+\t\t};\n+\t\tif result.data().node != self.data().node {\n+\t\t\treturn None;\n+\t\t}\n+\t\tSome(result)\n+\t}\n+}\n \n pub struct Children<'f> {\n \tnext: Option<Node<'f>>,\n@@ -97,7 +140,22 @@ impl<'f> Iterator for Children<'f> {\n \t}\n }\n \n-#[derive(Clone, Copy)]\n+pub struct SyntaxErrors<'f> {\n+\tnext: Option<SyntaxError<'f>>,\n+}\n+\n+impl<'f> Iterator for SyntaxErrors<'f> {\n+\ttype Item = SyntaxError<'f>;\n+\n+\tfn next(&mut self) -> Option<SyntaxError<'f>> {\n+\t\tlet next = self.next;\n+\t\tself.next = next.as_ref().and_then(SyntaxError::next);\n+\t\tnext\n+\t}\n+}\n+\n+\n+#[derive(Clone, Copy, PartialEq, Eq)]\n struct NodeIdx(u32);\n \n struct NodeData {\n@@ -122,8 +180,18 @@ impl ::std::ops::IndexMut<NodeIdx> for Vec<NodeData> {\n \t}\n }\n \n-impl<'f> fmt::Debug for Node<'f> {\n-\tfn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-\t\twrite!(fmt, \"{:?}@{:?}\", self.kind(), self.range())\n+#[derive(Clone, Copy)]\n+struct ErrorIdx(u32);\n+\n+struct SyntaxErrorData {\n+\tnode: NodeIdx,\n+\tmessage: String,\n+}\n+\n+impl ::std::ops::Index<ErrorIdx> for Vec<SyntaxErrorData> {\n+\ttype Output = SyntaxErrorData;\n+\n+\tfn index(&self, ErrorIdx(idx): ErrorIdx) -> &SyntaxErrorData {\n+\t\t&self[idx as usize]\n \t}\n-}\n\\ No newline at end of file\n+}"}]}