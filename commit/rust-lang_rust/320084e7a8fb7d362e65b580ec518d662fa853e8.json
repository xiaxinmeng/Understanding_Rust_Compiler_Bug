{"sha": "320084e7a8fb7d362e65b580ec518d662fa853e8", "node_id": "C_kwDOAAsO6NoAKDMyMDA4NGU3YThmYjdkMzYyZTY1YjU4MGVjNTE4ZDY2MmZhODUzZTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-25T23:52:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-25T23:52:34Z"}, "message": "Auto merge of #2268 - RalfJung:not-unpin-protected, r=RalfJung\n\ntest that &mut !Unpin references are protected", "tree": {"sha": "b7084df524431dfa6d23c69659e3091ccea909c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7084df524431dfa6d23c69659e3091ccea909c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/320084e7a8fb7d362e65b580ec518d662fa853e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/320084e7a8fb7d362e65b580ec518d662fa853e8", "html_url": "https://github.com/rust-lang/rust/commit/320084e7a8fb7d362e65b580ec518d662fa853e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/320084e7a8fb7d362e65b580ec518d662fa853e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54a495cb27615e487f2f759b638334eff36501cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/54a495cb27615e487f2f759b638334eff36501cc", "html_url": "https://github.com/rust-lang/rust/commit/54a495cb27615e487f2f759b638334eff36501cc"}, {"sha": "d3ca71ba3765a4b12143c963d4db8712ca969a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ca71ba3765a4b12143c963d4db8712ca969a1e", "html_url": "https://github.com/rust-lang/rust/commit/d3ca71ba3765a4b12143c963d4db8712ca969a1e"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "4680f6769a1c246981bf8ca67e45b05b277b7d8b", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/320084e7a8fb7d362e65b580ec518d662fa853e8/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320084e7a8fb7d362e65b580ec518d662fa853e8/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs?ref=320084e7a8fb7d362e65b580ec518d662fa853e8", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern: deallocating while item is protected\n+use std::marker::PhantomPinned;\n+\n+pub struct NotUnpin(i32, PhantomPinned);\n+\n+fn inner(x: &mut NotUnpin, f: fn(&mut NotUnpin)) {\n+    // `f` may mutate, but it may not deallocate!\n+    f(x)\n+}\n+\n+fn main() {\n+    inner(Box::leak(Box::new(NotUnpin(0, PhantomPinned))), |x| {\n+        let raw = x as *mut _;\n+        drop(unsafe { Box::from_raw(raw) });\n+    });\n+}"}, {"sha": "22776656e0199357cb0e40cce9993c2c51dc654b", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/320084e7a8fb7d362e65b580ec518d662fa853e8/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/320084e7a8fb7d362e65b580ec518d662fa853e8/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr?ref=320084e7a8fb7d362e65b580ec518d662fa853e8", "patch": "@@ -0,0 +1,38 @@\n+error: Undefined Behavior: deallocating while item is protected: [SharedReadWrite for <TAG> (call ID)]\n+  --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   |\n+LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocating while item is protected: [SharedReadWrite for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+           \n+   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `alloc::alloc::box_free::<NotUnpin, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<NotUnpin>> - shim(Some(std::boxed::Box<NotUnpin>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::mem::drop::<std::boxed::Box<NotUnpin>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n+note: inside closure at $DIR/deallocate_against_barrier2.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+   |\n+LL |         drop(unsafe { Box::from_raw(raw) });\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `<[closure@$DIR/deallocate_against_barrier2.rs:LL:CC] as std::ops::FnOnce<(&mut NotUnpin,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n+note: inside `inner` at $DIR/deallocate_against_barrier2.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+   |\n+LL |     f(x)\n+   |     ^^^^\n+note: inside `main` at $DIR/deallocate_against_barrier2.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+   |\n+LL | /     inner(Box::leak(Box::new(NotUnpin(0, PhantomPinned))), |x| {\n+LL | |         let raw = x as *mut _;\n+LL | |         drop(unsafe { Box::from_raw(raw) });\n+LL | |     });\n+   | |______^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}