{"sha": "9863b9161d8d702848516be70c5c8161b7f382e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjNiOTE2MWQ4ZDcwMjg0ODUxNmJlNzBjNWM4MTYxYjdmMzgyZTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T21:55:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T21:55:32Z"}, "message": "decorations", "tree": {"sha": "3aa95abbacf0897e4e738e1fc8ccf10492b7c60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa95abbacf0897e4e738e1fc8ccf10492b7c60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9863b9161d8d702848516be70c5c8161b7f382e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9863b9161d8d702848516be70c5c8161b7f382e8", "html_url": "https://github.com/rust-lang/rust/commit/9863b9161d8d702848516be70c5c8161b7f382e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9863b9161d8d702848516be70c5c8161b7f382e8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "html_url": "https://github.com/rust-lang/rust/commit/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f"}], "stats": {"total": 170, "additions": 143, "deletions": 27}, "files": [{"sha": "99cbfc78e7d516a4c8800397416faef9268812fc", "filename": "codeless/src/extension.ts", "status": "modified", "additions": 86, "deletions": 20, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/9863b9161d8d702848516be70c5c8161b7f382e8/codeless%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/9863b9161d8d702848516be70c5c8161b7f382e8/codeless%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fsrc%2Fextension.ts?ref=9863b9161d8d702848516be70c5c8161b7f382e8", "patch": "@@ -1,17 +1,9 @@\n 'use strict';\n import * as vscode from 'vscode';\n-import {\n-    LanguageClient,\n-    LanguageClientOptions,\n-    ServerOptions,\n-    TransportKind,\n-    Executable,\n-    TextDocumentIdentifier,\n-    Range\n-} from 'vscode-languageclient';\n+import * as lc from 'vscode-languageclient'\n \n \n-let client: LanguageClient;\n+let client: lc.LanguageClient;\n \n let uris = {\n     syntaxTree: vscode.Uri.parse('libsyntax-rust://syntaxtree')\n@@ -34,8 +26,7 @@ export function activate(context: vscode.ExtensionContext) {\n         let request: ExtendSelectionParams = {\n             textDocument: { uri: editor.document.uri.toString() },\n             selections: editor.selections.map((s) => {\n-                let r: Range = { start: s.start, end: s.end }\n-                return r;\n+                return { start: s.start, end: s.end };\n             })\n         }\n         let response = await client.sendRequest<ExtendSelectionResult>(\"m/extendSelection\", request)\n@@ -71,26 +62,46 @@ export function deactivate(): Thenable<void> {\n }\n \n function startServer() {\n-    let run: Executable = {\n+    let run: lc.Executable = {\n         command: \"cargo\",\n         args: [\"run\", \"--package\", \"m\"],\n         options: { cwd: \".\" }\n     }\n-    let serverOptions: ServerOptions = {\n+    let serverOptions: lc.ServerOptions = {\n         run,\n         debug: run\n     };\n \n-    let clientOptions: LanguageClientOptions = {\n+    let clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n     };\n \n-    client = new LanguageClient(\n+    client = new lc.LanguageClient(\n         'm',\n         'm languge server',\n         serverOptions,\n         clientOptions,\n     );\n+    client.onReady().then(() => {\n+        client.onNotification(\n+            new lc.NotificationType(\"m/publishDecorations\"),\n+            (params: PublishDecorationsParams) => {\n+                console.log(\"A\");\n+                console.log(params.uri);\n+                console.log(vscode.window.activeTextEditor.document.uri.toString());\n+                console.log(\"B\");\n+\n+                let editor = vscode.window.visibleTextEditors.find(\n+                    (editor) => editor.document.uri.toString() == params.uri\n+                )\n+                if (editor == null) return;\n+                setHighlights(\n+                    editor,\n+                    params.decorations,\n+                )\n+            }\n+        )\n+    })\n     client.start();\n }\n \n@@ -117,17 +128,72 @@ class TextDocumentContentProvider implements vscode.TextDocumentContentProvider\n     }\n }\n \n+\n+const decorations = (() => {\n+    const decor = (obj) => vscode.window.createTextEditorDecorationType({ color: obj })\n+    return {\n+        background: decor(\"#3F3F3F\"),\n+        error: vscode.window.createTextEditorDecorationType({\n+            borderColor: \"red\",\n+            borderStyle: \"none none dashed none\",\n+        }),\n+        comment: decor(\"#7F9F7F\"),\n+        string: decor(\"#CC9393\"),\n+        keyword: decor(\"#F0DFAF\"),\n+        function: decor(\"#93E0E3\"),\n+        parameter: decor(\"#94BFF3\"),\n+        builtin: decor(\"#DD6718\"),\n+        text: decor(\"#DCDCCC\"),\n+        attribute: decor(\"#BFEBBF\"),\n+        literal: decor(\"#DFAF8F\"),\n+    }\n+})()\n+\n+function setHighlights(\n+    editor: vscode.TextEditor,\n+    highlihgs: Array<Decoration>\n+) {\n+    let byTag = {}\n+    for (let tag in decorations) {\n+        byTag[tag] = []\n+    }\n+\n+    for (let d of highlihgs) {\n+        if (!byTag[d.tag]) {\n+            console.log(`unknown tag ${d.tag}`)\n+            continue\n+        }\n+        byTag[d.tag].push(d.range)\n+    }\n+\n+    for (let tag in byTag) {\n+        let dec = decorations[tag]\n+        let ranges = byTag[tag]\n+        editor.setDecorations(dec, ranges)\n+    }\n+}\n+\n interface SyntaxTreeParams {\n-    textDocument: TextDocumentIdentifier;\n+    textDocument: lc.TextDocumentIdentifier;\n }\n \n type SyntaxTreeResult = string\n \n interface ExtendSelectionParams {\n-    textDocument: TextDocumentIdentifier;\n-    selections: Range[];\n+    textDocument: lc.TextDocumentIdentifier;\n+    selections: lc.Range[];\n }\n \n interface ExtendSelectionResult {\n-    selections: Range[];\n+    selections: lc.Range[];\n+}\n+\n+interface PublishDecorationsParams {\n+    uri: string,\n+    decorations: Decoration[],\n+}\n+\n+interface Decoration {\n+    range: lc.Range,\n+    tag: string,\n }"}, {"sha": "74f043a9b7b1e911f57f6595e8722b06b46dac04", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=9863b9161d8d702848516be70c5c8161b7f382e8", "patch": "@@ -24,6 +24,7 @@ pub struct WorldState {\n     data: Arc<WorldData>\n }\n \n+#[derive(Clone, Debug)]\n pub struct World {\n     data: Arc<WorldData>,\n }\n@@ -119,12 +120,13 @@ impl World {\n }\n \n \n-#[derive(Default)]\n+#[derive(Default, Debug)]\n struct WorldData {\n     mem_map: HashMap<PathBuf, Arc<String>>,\n     file_map: RwLock<HashMap<PathBuf, Arc<FileData>>>,\n }\n \n+#[derive(Debug)]\n struct FileData {\n     text: Option<String>,\n     syntax: OnceCell<ast::File>,"}, {"sha": "b5e4e192642adae9e5b3e9ef34aa02b51a3cc569", "filename": "crates/server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2FCargo.toml?ref=9863b9161d8d702848516be70c5c8161b7f382e8", "patch": "@@ -15,6 +15,7 @@ threadpool = \"1.7.1\"\n flexi_logger = \"0.9.0\"\n log = \"0.4.3\"\n url = \"1.1.0\"\n+url_serde = \"0.2.0\"\n \n libeditor = { path = \"../libeditor\" }\n libanalysis = { path = \"../libanalysis\" }"}, {"sha": "8b7e00c9280b17ddc86c2b2760dc6071b99182c9", "filename": "crates/server/src/handlers.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Fserver%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Fserver%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fhandlers.rs?ref=9863b9161d8d702848516be70c5c8161b7f382e8", "patch": "@@ -4,7 +4,7 @@ use libanalysis::World;\n use libeditor::{self, LineIndex, LineCol, TextRange, TextUnit};\n \n use ::{\n-    req, Result,\n+    req::{self, Decoration}, Result,\n     util::FilePath,\n };\n \n@@ -51,6 +51,18 @@ pub fn publish_diagnostics(world: World, uri: Url) -> Result<req::PublishDiagnos\n     Ok(req::PublishDiagnosticsParams { uri, diagnostics })\n }\n \n+pub fn publish_decorations(world: World, uri: Url) -> Result<req::PublishDecorationsParams> {\n+    let path = uri.file_path()?;\n+    let file = world.file_syntax(&path)?;\n+    let line_index = world.file_line_index(&path)?;\n+    let decorations = libeditor::highlight(&file)\n+        .into_iter()\n+        .map(|h| Decoration {\n+            range: to_vs_range(&line_index, h.range),\n+            tag: h.tag,\n+        }).collect();\n+    Ok(req::PublishDecorationsParams { uri, decorations })\n+}\n \n fn to_text_range(line_index: &LineIndex, range: Range) -> TextRange {\n     TextRange::from_to("}, {"sha": "900ee555fd21e5cd07aa4e2c604e1fbb336b33b8", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=9863b9161d8d702848516be70c5c8161b7f382e8", "patch": "@@ -12,6 +12,7 @@ extern crate threadpool;\n #[macro_use]\n extern crate log;\n extern crate url;\n+extern crate url_serde;\n extern crate flexi_logger;\n extern crate libeditor;\n extern crate libanalysis;\n@@ -31,7 +32,7 @@ use libanalysis::{WorldState, World};\n \n use ::{\n     io::{Io, RawMsg, RawRequest},\n-    handlers::{handle_syntax_tree, handle_extend_selection, publish_diagnostics},\n+    handlers::{handle_syntax_tree, handle_extend_selection, publish_diagnostics, publish_decorations},\n     util::{FilePath, FnBox}\n };\n \n@@ -198,7 +199,7 @@ fn main_loop(\n                 dispatch::handle_notification::<req::DidOpenTextDocument, _>(&mut not, |params| {\n                     let path = params.text_document.file_path()?;\n                     world.change_overlay(path, Some(params.text_document.text));\n-                    update_diagnostics_on_threadpool(\n+                    update_file_notifications_on_threadpool(\n                         pool, world.snapshot(), sender.clone(), params.text_document.uri,\n                     );\n                     Ok(())\n@@ -209,7 +210,7 @@ fn main_loop(\n                         .ok_or_else(|| format_err!(\"empty changes\"))?\n                         .text;\n                     world.change_overlay(path, Some(text));\n-                    update_diagnostics_on_threadpool(\n+                    update_file_notifications_on_threadpool(\n                         pool, world.snapshot(), sender.clone(), params.text_document.uri,\n                     );\n                     Ok(())\n@@ -254,14 +255,14 @@ fn handle_request_on_threadpool<R: req::ClientRequest>(\n     })\n }\n \n-fn update_diagnostics_on_threadpool(\n+fn update_file_notifications_on_threadpool(\n     pool: &ThreadPool,\n     world: World,\n     sender: Sender<Thunk>,\n     uri: Url,\n ) {\n     pool.execute(move || {\n-        match publish_diagnostics(world, uri) {\n+        match publish_diagnostics(world.clone(), uri.clone()) {\n             Err(e) => {\n                 error!(\"failed to compute diagnostics: {:?}\", e)\n             }\n@@ -271,5 +272,15 @@ fn update_diagnostics_on_threadpool(\n                 }))\n             }\n         }\n+        match publish_decorations(world, uri) {\n+            Err(e) => {\n+                error!(\"failed to compute decortions: {:?}\", e)\n+            }\n+            Ok(params) => {\n+                sender.send(Box::new(|io: &mut Io| {\n+                    dispatch::send_notification::<req::PublishDecorations>(io, params)\n+                }))\n+            }\n+        }\n     });\n }"}, {"sha": "480fbabcd310cfb16a98be1cf427f25a41781e94", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9863b9161d8d702848516be70c5c8161b7f382e8/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=9863b9161d8d702848516be70c5c8161b7f382e8", "patch": "@@ -1,5 +1,7 @@\n use serde::{ser::Serialize, de::DeserializeOwned};\n+use url::Url;\n use languageserver_types::{TextDocumentIdentifier, Range};\n+use url_serde;\n \n pub use languageserver_types::{\n     request::*, notification::*,\n@@ -58,3 +60,25 @@ pub struct ExtendSelectionParams {\n pub struct ExtendSelectionResult {\n     pub selections: Vec<Range>,\n }\n+\n+pub enum PublishDecorations {}\n+\n+impl Notification for PublishDecorations {\n+    type Params = PublishDecorationsParams;\n+    const METHOD: &'static str = \"m/publishDecorations\";\n+}\n+\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PublishDecorationsParams {\n+    #[serde(with = \"url_serde\")]\n+    pub uri: Url,\n+    pub decorations: Vec<Decoration>,\n+}\n+\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct Decoration {\n+    pub range: Range,\n+    pub tag: &'static str\n+}"}]}