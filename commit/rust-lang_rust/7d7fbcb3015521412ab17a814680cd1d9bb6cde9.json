{"sha": "7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkN2ZiY2IzMDE1NTIxNDEyYWIxN2E4MTQ2ODBjZDFkOWJiNmNkZTk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-28T11:40:12Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-11-05T13:58:10Z"}, "message": "Remove `PartialEq` and `Eq` from the `SpecialDerives`.", "tree": {"sha": "0d76d4ef36a58277401dd6aa87d04339c646add8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d76d4ef36a58277401dd6aa87d04339c646add8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "html_url": "https://github.com/rust-lang/rust/commit/7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1fff4a4b213b3341c1ff994061b7965a5932c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fff4a4b213b3341c1ff994061b7965a5932c70", "html_url": "https://github.com/rust-lang/rust/commit/d1fff4a4b213b3341c1ff994061b7965a5932c70"}], "stats": {"total": 19, "additions": 1, "deletions": 18}, "files": [{"sha": "f1b999cdd6f0f42994efd692fad04c3a6bd08048", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "patch": "@@ -18,7 +18,6 @@ use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast::*;\n use syntax::visit::{self, Visitor};\n-use syntax::expand::SpecialDerives;\n use syntax::source_map::{respan, DesugaringKind, Spanned};\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n@@ -227,13 +226,7 @@ impl LoweringContext<'_> {\n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n-        let mut attrs = self.lower_attrs_extendable(&i.attrs);\n-        if self.resolver.has_derives(i.id, SpecialDerives::PARTIAL_EQ | SpecialDerives::EQ) {\n-            // Add `#[structural_match]` if the item derived both `PartialEq` and `Eq`.\n-            let ident = Ident::new(sym::structural_match, i.span);\n-            attrs.push(attr::mk_attr_outer(attr::mk_word_item(ident)));\n-        }\n-        let attrs = attrs.into();\n+        let attrs = self.lower_attrs(&i.attrs);\n \n         if let ItemKind::MacroDef(ref def) = i.kind {\n             if !def.legacy || attr::contains_name(&i.attrs, sym::macro_export) {"}, {"sha": "ca4505445582a9fb6ba2c3277c4d774124fe9105", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "patch": "@@ -937,8 +937,6 @@ pub struct Resolver<'a> {\n     /// Some built-in derives mark items they are applied to so they are treated specially later.\n     /// Derive macros cannot modify the item themselves and have to store the markers in the global\n     /// context, so they attach the markers to derive container IDs using this resolver table.\n-    /// FIXME: Find a way for `PartialEq` and `Eq` to emulate `#[structural_match]`\n-    /// by marking the produced impls rather than the original items.\n     special_derives: FxHashMap<ExpnId, SpecialDerives>,\n     /// Parent scopes in which the macros were invoked.\n     /// FIXME: `derives` are missing in these parent scopes and need to be taken from elsewhere."}, {"sha": "3572950819707b1efbd7aa7c1bdb532644cc4dc4", "filename": "src/libsyntax/expand/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibsyntax%2Fexpand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibsyntax%2Fexpand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fexpand%2Fmod.rs?ref=7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "patch": "@@ -9,8 +9,6 @@ bitflags::bitflags! {\n     /// Built-in derives that need some extra tracking beyond the usual macro functionality.\n     #[derive(Default)]\n     pub struct SpecialDerives: u8 {\n-        const PARTIAL_EQ = 1 << 0;\n-        const EQ         = 1 << 1;\n         const COPY       = 1 << 2;\n     }\n }"}, {"sha": "41189de7fa213e60577a7038dc7ea5f119babdba", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Ident, Expr, MetaItem, GenericArg};\n-use syntax::expand::SpecialDerives;\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n use syntax_expand::base::{Annotatable, ExtCtxt};\n@@ -14,8 +13,6 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n                           mitem: &MetaItem,\n                           item: &Annotatable,\n                           push: &mut dyn FnMut(Annotatable)) {\n-    cx.resolver.add_derives(cx.current_expansion.id.expn_data().parent, SpecialDerives::EQ);\n-\n     let inline = cx.meta_word(span, sym::inline);\n     let hidden = syntax::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = syntax::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);"}, {"sha": "19562e350ddb7bddcc2c53338478d2184fa02c07", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7fbcb3015521412ab17a814680cd1d9bb6cde9/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{BinOpKind, Expr, MetaItem};\n-use syntax::expand::SpecialDerives;\n use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_expand::base::{Annotatable, ExtCtxt};\n@@ -14,8 +13,6 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n                                   mitem: &MetaItem,\n                                   item: &Annotatable,\n                                   push: &mut dyn FnMut(Annotatable)) {\n-    cx.resolver.add_derives(cx.current_expansion.id.expn_data().parent, SpecialDerives::PARTIAL_EQ);\n-\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n     fn cs_op(cx: &mut ExtCtxt<'_>,"}]}