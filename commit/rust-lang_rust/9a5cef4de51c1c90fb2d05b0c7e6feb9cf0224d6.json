{"sha": "9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNWNlZjRkZTUxYzFjOTBmYjJkMDViMGM3ZTZmZWI5Y2YwMjI0ZDY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-12-14T21:02:00Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-12-17T03:42:17Z"}, "message": "Address fallout", "tree": {"sha": "dfc7eb130baf656785761739b6808efdec694254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfc7eb130baf656785761739b6808efdec694254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "html_url": "https://github.com/rust-lang/rust/commit/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fce6af2a6759991b8f31b6dcbee315ccacb2339d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fce6af2a6759991b8f31b6dcbee315ccacb2339d", "html_url": "https://github.com/rust-lang/rust/commit/fce6af2a6759991b8f31b6dcbee315ccacb2339d"}], "stats": {"total": 127, "additions": 44, "deletions": 83}, "files": [{"sha": "86f8c746646aac2e26a8570f70d3ccad48335add", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -320,7 +320,7 @@ impl<T> Rc<T> {\n     #[inline]\n     #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn try_unwrap(this: Self) -> Result<T, Self> {\n-        if Rc::would_unwrap(&this) {\n+        if Rc::strong_count(&this) == 1 {\n             unsafe {\n                 let val = ptr::read(&*this); // copy the contained object\n \n@@ -343,23 +343,6 @@ impl<T> Rc<T> {\n     ///\n     /// [try_unwrap]: struct.Rc.html#method.try_unwrap\n     /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(rc_would_unwrap)]\n-    ///\n-    /// use std::rc::Rc;\n-    ///\n-    /// let x = Rc::new(3);\n-    /// assert!(Rc::would_unwrap(&x));\n-    /// assert_eq!(Rc::try_unwrap(x), Ok(3));\n-    ///\n-    /// let x = Rc::new(4);\n-    /// let _y = x.clone();\n-    /// assert!(!Rc::would_unwrap(&x));\n-    /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);\n-    /// ```\n     #[unstable(feature = \"rc_would_unwrap\",\n                reason = \"just added for niche usecase\",\n                issue = \"28356\")]\n@@ -518,20 +501,8 @@ impl<T: ?Sized> Rc<T> {\n     /// this inner value.\n     ///\n     /// [weak]: struct.Weak.html\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(rc_counts)]\n-    ///\n-    /// use std::rc::Rc;\n-    ///\n-    /// let five = Rc::new(5);\n-    ///\n-    /// assert!(Rc::is_unique(&five));\n-    /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_counts\", reason = \"uniqueness has unclear meaning\",\n+    #[unstable(feature = \"is_unique\", reason = \"uniqueness has unclear meaning\",\n                issue = \"28356\")]\n     #[rustc_deprecated(since = \"1.15.0\",\n                        reason = \"too niche; use `strong_count` and `weak_count` instead\")]"}, {"sha": "d4fb5ea03adea50071566bff326a29e763fee87a", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -29,7 +29,6 @@\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(vec_into_iter_as_slice)]\n \n extern crate collections;\n extern crate test;"}, {"sha": "c3f862e7c5418b5a8bb4d14ffe1a02fc87c9492f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -394,6 +394,7 @@ pub struct RefCell<T: ?Sized> {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n #[rustc_deprecated(since = \"1.15.0\", reason = \"use `try_borrow` instead\")]\n+#[allow(deprecated)]\n pub enum BorrowState {\n     /// The cell is currently being read, there is at least one active `borrow`.\n     Reading,\n@@ -513,6 +514,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n     #[rustc_deprecated(since = \"1.15.0\", reason = \"use `try_borrow` instead\")]\n+    #[allow(deprecated)]\n     #[inline]\n     pub fn borrow_state(&self) -> BorrowState {\n         match self.borrow.get() {"}, {"sha": "2ba7d6e8bd1ac4d885c9edc336762950f8fe1ff6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -12,7 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use cell::{UnsafeCell, Cell, RefCell, Ref, RefMut, BorrowState};\n+use cell::{UnsafeCell, Cell, RefCell, Ref, RefMut};\n use marker::PhantomData;\n use mem;\n use num::flt2dec;\n@@ -1634,13 +1634,13 @@ impl<T: Copy + Debug> Debug for Cell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Debug> Debug for RefCell<T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        match self.borrow_state() {\n-            BorrowState::Unused | BorrowState::Reading => {\n+        match self.try_borrow() {\n+            Ok(borrow) => {\n                 f.debug_struct(\"RefCell\")\n-                    .field(\"value\", &self.borrow())\n+                    .field(\"value\", &borrow)\n                     .finish()\n             }\n-            BorrowState::Writing => {\n+            Err(_) => {\n                 f.debug_struct(\"RefCell\")\n                     .field(\"value\", &\"<borrowed>\")\n                     .finish()"}, {"sha": "ec590d2bd06f89686011ee9a21990384cebce005", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -1696,7 +1696,6 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(iter_max_by)]\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n     /// ```\n@@ -1746,7 +1745,6 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(iter_min_by)]\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n     /// ```"}, {"sha": "724a312ea79e0a7427df2856805485c8cc146802", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -59,22 +59,22 @@ fn double_imm_borrow() {\n fn no_mut_then_imm_borrow() {\n     let x = RefCell::new(0);\n     let _b1 = x.borrow_mut();\n-    assert_eq!(x.borrow_state(), BorrowState::Writing);\n+    assert!(x.try_borrow().is_err());\n }\n \n #[test]\n fn no_imm_then_borrow_mut() {\n     let x = RefCell::new(0);\n     let _b1 = x.borrow();\n-    assert_eq!(x.borrow_state(), BorrowState::Reading);\n+    assert!(x.try_borrow_mut().is_err());\n }\n \n #[test]\n fn no_double_borrow_mut() {\n     let x = RefCell::new(0);\n-    assert_eq!(x.borrow_state(), BorrowState::Unused);\n+    assert!(x.try_borrow().is_ok());\n     let _b1 = x.borrow_mut();\n-    assert_eq!(x.borrow_state(), BorrowState::Writing);\n+    assert!(x.try_borrow().is_err());\n }\n \n #[test]\n@@ -102,7 +102,8 @@ fn double_borrow_single_release_no_borrow_mut() {\n     {\n         let _b2 = x.borrow();\n     }\n-    assert_eq!(x.borrow_state(), BorrowState::Reading);\n+    assert!(x.try_borrow().is_ok());\n+    assert!(x.try_borrow_mut().is_err());\n }\n \n #[test]\n@@ -119,30 +120,38 @@ fn ref_clone_updates_flag() {\n     let x = RefCell::new(0);\n     {\n         let b1 = x.borrow();\n-        assert_eq!(x.borrow_state(), BorrowState::Reading);\n+        assert!(x.try_borrow().is_ok());\n+        assert!(x.try_borrow_mut().is_err());\n         {\n             let _b2 = Ref::clone(&b1);\n-            assert_eq!(x.borrow_state(), BorrowState::Reading);\n+            assert!(x.try_borrow().is_ok());\n+            assert!(x.try_borrow_mut().is_err());\n         }\n-        assert_eq!(x.borrow_state(), BorrowState::Reading);\n+        assert!(x.try_borrow().is_ok());\n+        assert!(x.try_borrow_mut().is_err());\n     }\n-    assert_eq!(x.borrow_state(), BorrowState::Unused);\n+    assert!(x.try_borrow().is_ok());\n+    assert!(x.try_borrow_mut().is_ok());\n }\n \n #[test]\n fn ref_map_does_not_update_flag() {\n     let x = RefCell::new(Some(5));\n     {\n         let b1: Ref<Option<u32>> = x.borrow();\n-        assert_eq!(x.borrow_state(), BorrowState::Reading);\n+        assert!(x.try_borrow().is_ok());\n+        assert!(x.try_borrow_mut().is_err());\n         {\n             let b2: Ref<u32> = Ref::map(b1, |o| o.as_ref().unwrap());\n             assert_eq!(*b2, 5);\n-            assert_eq!(x.borrow_state(), BorrowState::Reading);\n+            assert!(x.try_borrow().is_ok());\n+            assert!(x.try_borrow_mut().is_err());\n         }\n-        assert_eq!(x.borrow_state(), BorrowState::Unused);\n+        assert!(x.try_borrow().is_ok());\n+        assert!(x.try_borrow_mut().is_ok());\n     }\n-    assert_eq!(x.borrow_state(), BorrowState::Unused);\n+    assert!(x.try_borrow().is_ok());\n+    assert!(x.try_borrow_mut().is_ok());\n }\n \n #[test]\n@@ -247,5 +256,3 @@ fn refcell_ref_coercion() {\n         assert_eq!(&*coerced, comp);\n     }\n }\n-\n-"}, {"sha": "d12616a97a647dbc6dba8a5780dfe0efba575ac3", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -10,9 +10,7 @@\n \n #![deny(warnings)]\n \n-#![feature(borrow_state)]\n #![feature(box_syntax)]\n-#![feature(cell_extras)]\n #![feature(char_escape_debug)]\n #![feature(const_fn)]\n #![feature(core_private_bignum)]\n@@ -32,8 +30,6 @@\n #![feature(try_from)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![feature(iter_max_by)]\n-#![feature(iter_min_by)]\n #![feature(ordering_chaining)]\n #![feature(result_unwrap_or_default)]\n #![feature(ptr_unaligned)]"}, {"sha": "5d4190a8ae1a35bd76d35bab0e7641897ba25e5b", "filename": "src/librustc/dep_graph/shadow.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fshadow.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -27,7 +27,7 @@\n //! created.  See `./README.md` for details.\n \n use hir::def_id::DefId;\n-use std::cell::{BorrowState, RefCell};\n+use std::cell::RefCell;\n use std::env;\n \n use super::DepNode;\n@@ -71,15 +71,11 @@ impl ShadowGraph {\n \n     pub fn enqueue(&self, message: &DepMessage) {\n         if ENABLED {\n-            match self.stack.borrow_state() {\n-                BorrowState::Unused => {}\n-                _ => {\n-                    // When we apply edge filters, that invokes the\n-                    // Debug trait on DefIds, which in turn reads from\n-                    // various bits of state and creates reads! Ignore\n-                    // those recursive reads.\n-                    return;\n-                }\n+            if self.stack.try_borrow().is_err() {\n+                // When we apply edge filters, that invokes the Debug trait on\n+                // DefIds, which in turn reads from various bits of state and\n+                // creates reads! Ignore those recursive reads.\n+                return;\n             }\n \n             let mut stack = self.stack.borrow_mut();"}, {"sha": "17cc34fcd839414b36e8445bbf91d2dac34515c1", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -24,7 +24,6 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(associated_consts)]\n-#![feature(borrow_state)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(collections)]"}, {"sha": "509ee704e2ea2551da9a0894250ed24f40657dc9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -18,7 +18,6 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(associated_consts)]\n-#![feature(borrow_state)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "890891fd090183b5a7225f5d1462d2ee824cf4b6", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -144,11 +144,9 @@ impl<'a> Resolver<'a> {\n                                   -> Result<&'a NameBinding<'a>, Determinacy> {\n         self.populate_module_if_necessary(module);\n \n-        let resolution = self.resolution(module, name, ns);\n-        let resolution = match resolution.borrow_state() {\n-            ::std::cell::BorrowState::Unused => resolution.borrow_mut(),\n-            _ => return Err(Determined), // This happens when there is a cycle of imports\n-        };\n+        let resolution = self.resolution(module, name, ns)\n+            .try_borrow_mut()\n+            .map_err(|_| Determined)?; // This happens when there is a cycle of imports\n \n         if let Some(span) = record_used {\n             if let Some(binding) = resolution.binding {"}, {"sha": "d842827b6feadc70654b9fd3e34f9d3a16ab4c71", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -26,7 +26,6 @@\n #![feature(associated_consts)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(cell_extras)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]"}, {"sha": "1a65bee13b8fb63188c877bf5a72d764366c66aa", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -10,7 +10,7 @@\n \n use io::prelude::*;\n \n-use cell::{RefCell, BorrowState};\n+use cell::RefCell;\n use fmt;\n use io::lazy::Lazy;\n use io::{self, BufReader, LineWriter};\n@@ -638,8 +638,8 @@ pub fn _print(args: fmt::Arguments) {\n         LocalKeyState::Destroyed => stdout().write_fmt(args),\n         LocalKeyState::Valid => {\n             LOCAL_STDOUT.with(|s| {\n-                if s.borrow_state() == BorrowState::Unused {\n-                    if let Some(w) = s.borrow_mut().as_mut() {\n+                if let Ok(mut borrowed) = s.try_borrow_mut() {\n+                    if let Some(w) = borrowed.as_mut() {\n                         return w.write_fmt(args);\n                     }\n                 }"}, {"sha": "c59524974bf2f80d6e897bdf68950cdbe916a8f9", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -56,7 +56,7 @@ pub trait CommandExt {\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n     /// locations may not appear where intended.\n-    #[unstable(feature = \"process_exec\", issue = \"31398\")]\n+    #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n         where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n "}, {"sha": "53dafadb5d568225c1d742b9c3928ad4fb4cc41c", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -460,7 +460,6 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n-    /// #![feature(unicode)]\n     /// use std::thread;\n     ///\n     /// let result = thread::spawn(|| {\n@@ -501,7 +500,6 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n-    /// #![feature(unicode)]\n     /// use std::thread;\n     ///\n     /// let result = thread::spawn(|| {"}, {"sha": "11724e74cdaece36d52482db16f3f9074836f8f2", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=9a5cef4de51c1c90fb2d05b0c7e6feb9cf0224d6", "patch": "@@ -39,7 +39,6 @@\n #![feature(lang_items)]\n #![feature(staged_api)]\n #![feature(try_from)]\n-#![feature(unicode)]\n \n mod tables;\n mod u_str;"}]}