{"sha": "e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMzJiYjdjNjVkNTQ0NGE0NGJkYTliZDdkYjVjNDJiNDkzMWIwYWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-05T00:29:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-05T00:29:36Z"}, "message": "Rollup merge of #77439 - varkor:min_const_generics-tests, r=lcnr,estebank\n\nFix missing diagnostic span for `impl Trait` with const generics, and add various tests for `min_const_generics` and `const_generics`\n\nCloses https://github.com/rust-lang/rust/issues/61410.\n\nAdds `min_const_generics` tests for:\n- https://github.com/rust-lang/rust/issues/73727\n- https://github.com/rust-lang/rust/issues/72293\n- https://github.com/rust-lang/rust/issues/67375\n- https://github.com/rust-lang/rust/issues/75153\n- https://github.com/rust-lang/rust/issues/71922\n- https://github.com/rust-lang/rust/issues/69913\n- https://github.com/rust-lang/rust/issues/67945\n- https://github.com/rust-lang/rust/issues/69239\n\nAdds `const_generics` tests for:\n- https://github.com/rust-lang/rust/issues/67375\n- https://github.com/rust-lang/rust/issues/75153\n- https://github.com/rust-lang/rust/issues/71922\n- https://github.com/rust-lang/rust/issues/69913\n- https://github.com/rust-lang/rust/issues/67945\n- https://github.com/rust-lang/rust/issues/69239\n\n(I only added separate `min_const_generics` and `const_generics` tests if they were handled differently by the two features.)\n\nWe need to figure out how to deduplicate when `const_generics` is stabilised, but we can discuss that later. For now, we should be checking neither feature breaks, so require regression tests for both. I've given them identical names when I've added both, which should make it easier to spot them later.\n\nr? @lcnr", "tree": {"sha": "1bdc8c6b98cc7339aaea902f4e75679483e18308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bdc8c6b98cc7339aaea902f4e75679483e18308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfemjxCRBK7hj4Ov3rIwAAdHIIADK4aWXFzm82lNDTxChBv1nS\npPy3YxWrNYlNdl7BQ0uxkxlwXf3K6b/qxET0hkcfJV3BwkhpZTVq4DSjf7pE/tcF\nZgxjixWheSf0UOrgUbSSeuWd7sJM/Xgrj+CAcQKCQKPgVHDBiq+6Wtn56okw+QpA\n1AuC7wFbxr+cp5nhfk9y3N3MfPuBF7CAJX4SKQ5RYY3Mfuq6MdjlScVcWUjpVSBE\nrk/n9JkOB1pKz+dgXLpEEwDjWkctFdAx/IevN54EQ6yTpHqBDioysGQa7/f7CCLK\nqrSWi0vZ5DUTPidiEtomrEvZn40vGAi+LjJVLG1L+BSDTPF9fygC6RgTRDYjMN8=\n=xD9c\n-----END PGP SIGNATURE-----\n", "payload": "tree 1bdc8c6b98cc7339aaea902f4e75679483e18308\nparent f1afed541e7676860ec2162eed47a5dcd2043b18\nparent 6647eeefb91a2f0e09f7df9f197917d22b01e846\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601857776 +0200\ncommitter GitHub <noreply@github.com> 1601857776 +0200\n\nRollup merge of #77439 - varkor:min_const_generics-tests, r=lcnr,estebank\n\nFix missing diagnostic span for `impl Trait` with const generics, and add various tests for `min_const_generics` and `const_generics`\n\nCloses https://github.com/rust-lang/rust/issues/61410.\n\nAdds `min_const_generics` tests for:\n- https://github.com/rust-lang/rust/issues/73727\n- https://github.com/rust-lang/rust/issues/72293\n- https://github.com/rust-lang/rust/issues/67375\n- https://github.com/rust-lang/rust/issues/75153\n- https://github.com/rust-lang/rust/issues/71922\n- https://github.com/rust-lang/rust/issues/69913\n- https://github.com/rust-lang/rust/issues/67945\n- https://github.com/rust-lang/rust/issues/69239\n\nAdds `const_generics` tests for:\n- https://github.com/rust-lang/rust/issues/67375\n- https://github.com/rust-lang/rust/issues/75153\n- https://github.com/rust-lang/rust/issues/71922\n- https://github.com/rust-lang/rust/issues/69913\n- https://github.com/rust-lang/rust/issues/67945\n- https://github.com/rust-lang/rust/issues/69239\n\n(I only added separate `min_const_generics` and `const_generics` tests if they were handled differently by the two features.)\n\nWe need to figure out how to deduplicate when `const_generics` is stabilised, but we can discuss that later. For now, we should be checking neither feature breaks, so require regression tests for both. I've given them identical names when I've added both, which should make it easier to spot them later.\n\nr? @lcnr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "html_url": "https://github.com/rust-lang/rust/commit/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1afed541e7676860ec2162eed47a5dcd2043b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1afed541e7676860ec2162eed47a5dcd2043b18", "html_url": "https://github.com/rust-lang/rust/commit/f1afed541e7676860ec2162eed47a5dcd2043b18"}, {"sha": "6647eeefb91a2f0e09f7df9f197917d22b01e846", "url": "https://api.github.com/repos/rust-lang/rust/commits/6647eeefb91a2f0e09f7df9f197917d22b01e846", "html_url": "https://github.com/rust-lang/rust/commit/6647eeefb91a2f0e09f7df9f197917d22b01e846"}], "stats": {"total": 694, "additions": 628, "deletions": 66}, "files": [{"sha": "cd018ae1204f9a2c527cf5064fb9014c9edd7ff5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -581,7 +581,7 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n-    /// Allows non trivial generic constants which have to be manually propageted upwards.\n+    /// Allows non-trivial generic constants which have to be manually propageted upwards.\n     (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n \n     /// Allows basic arithmetic on floating point types in a `const fn`."}, {"sha": "e3cf6d12bd5eb28191ba05d12ce9fe5522e1a599", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -469,7 +469,7 @@ impl<'a> Resolver<'a> {\n             ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n                 let mut err = self.session.struct_span_err(\n                     span,\n-                    \"generic parameters must not be used inside of non trivial constant values\",\n+                    \"generic parameters must not be used inside of non-trivial constant values\",\n                 );\n                 err.span_label(\n                     span,"}, {"sha": "fe8f592638594a643a99340c953cd65efbbfe5e7", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -218,7 +218,7 @@ enum ResolutionError<'a> {\n     ParamInTyOfConstParam(Symbol),\n     /// constant values inside of type parameter defaults must not depend on generic parameters.\n     ParamInAnonConstInTyDefault(Symbol),\n-    /// generic parameters must not be used inside of non trivial constant values.\n+    /// generic parameters must not be used inside of non-trivial constant values.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },"}, {"sha": "b867798c76cf77f0a7cb95c1c0d1e74193896516", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -562,7 +562,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .args\n                 .iter()\n                 .filter_map(|arg| match arg {\n-                    GenericArg::Type(_) => Some(arg.span()),\n+                    GenericArg::Type(_) | GenericArg::Const(_) => Some(arg.span()),\n                     _ => None,\n                 })\n                 .collect::<Vec<_>>();"}, {"sha": "1f4f40fca9be33dbb161b01273f8e3d84c410465", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -222,6 +222,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                 hir::GenericParamKind::Const { .. } => {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.ensure().type_of(def_id);\n+                    // FIXME(const_generics:defaults)\n                 }\n             }\n         }"}, {"sha": "0fc45513cd78a32a2547f65217cb456cf3f30db8", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/array-size-in-generic-struct-param.rs:9:48\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/array-size-in-generic-struct-param.rs:20:15\n    |\n LL |     arr: [u8; CFG.arr_size],"}, {"sha": "dd45b6ed278e8cca74fb7c03f08b0e89a08e1868", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -8,7 +8,7 @@\n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n #[derive(PartialEq, Eq)]\n struct Config {\n@@ -19,7 +19,7 @@ struct B<const CFG: Config> {\n     //[min]~^ ERROR `Config` is forbidden\n     arr: [u8; CFG.arr_size],\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "9b1c1be1aa09b625221b7f71c4655b598ae8057c", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,42 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:8:28\n+   |\n+LL | pub const fn is_zst<T: ?Sized>() -> usize {\n+   |                     - this type parameter needs to be `Sized`\n+LL |     if std::mem::size_of::<T>() == 0 {\n+   |                            ^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-argument-if-length.rs:19:15\n+   |\n+LL |     pad: [u8; is_zst::<T>()],\n+   |               ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:17:12\n+   |\n+LL | pub struct AtLeastByte<T: ?Sized> {\n+   |                        - this type parameter needs to be `Sized`\n+LL |     value: T,\n+   |            ^ doesn't have a size known at compile-time\n+   |\n+   = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0080, E0277.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "c666dce479f65318c175271c34bbf48ceda649d8", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,30 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/const-argument-if-length.rs:19:24\n+   |\n+LL |     pad: [u8; is_zst::<T>()],\n+   |                        ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:17:12\n+   |\n+LL | pub struct AtLeastByte<T: ?Sized> {\n+   |                        - this type parameter needs to be `Sized`\n+LL |     value: T,\n+   |            ^ doesn't have a size known at compile-time\n+   |\n+   = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "481ff97d68dbe02f1f2a1068dcdf65f876a65ea5", "filename": "src/test/ui/const-generics/const-argument-if-length.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,24 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+pub const fn is_zst<T: ?Sized>() -> usize {\n+    if std::mem::size_of::<T>() == 0 {\n+        //[full]~^ ERROR the size for values of type `T` cannot be known at compilation time\n+        1\n+    } else {\n+        0\n+    }\n+}\n+\n+pub struct AtLeastByte<T: ?Sized> {\n+    value: T,\n+    //~^ ERROR the size for values of type `T` cannot be known at compilation time\n+    pad: [u8; is_zst::<T>()],\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR evaluation of constant value failed\n+}\n+\n+fn main() {}"}, {"sha": "4b3235fd08783f6fde9b56a857216bff06c673da", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/feature-gate-const_evaluatable_checked.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];"}, {"sha": "d552e0f543080a7ffe4d8cc8c39843d597d68bd0", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -4,7 +4,7 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n     //[full]~^ ERROR constant expression depends"}, {"sha": "85a15b1e75fdcc5feaf82c222a25256178b4316c", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple.rs:8:53\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple.rs:8:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {"}, {"sha": "2eac9505624dd23a70f34ea92631cf2943329958", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple_fail.rs:7:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];"}, {"sha": "637c940f7143270fda540d5b1fc994c7716f5209", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -5,7 +5,7 @@\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1]; //[full]~ ERROR evaluation of constant\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n     todo!()"}, {"sha": "43b42d82d0c45908219029b6fcbeeacc725561d6", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/generic-function-call-in-array-length.rs:9:29\n+   |\n+LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n+   |                             ^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "e7e968e4c2ad26b6b8e83f6f31a168eae98868ec", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-function-call-in-array-length.rs:9:39\n+   |\n+LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n+   |                                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-function-call-in-array-length.rs:12:13\n+   |\n+LL |     [0; foo(N)]\n+   |             ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c8bbae29343dc094e5695ef6532befaa65e57fdf", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,16 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+const fn foo(n: usize) -> usize { n * 2 }\n+\n+fn bar<const N: usize>() -> [u32; foo(N)] {\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR constant expression depends on a generic parameter\n+    [0; foo(N)]\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+}\n+\n+fn main() {}"}, {"sha": "d311e1c0bae01c362d61f5cb509dd7ac3e34447e", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/generic-sum-in-array-length.rs:7:45\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                             ^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "6f157fbbbbb8ad961e19affde48b587ab6da8961", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-sum-in-array-length.rs:7:53\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `A`\n+   |\n+   = help: it is currently only allowed to use either `A` or `{ A }` as generic constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-sum-in-array-length.rs:7:57\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                                         ^ non-trivial anonymous constants must not depend on the parameter `B`\n+   |\n+   = help: it is currently only allowed to use either `B` or `{ B }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "810095b384baa3ee5ab46372264aada3268a37c7", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,12 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n+//[full]~^^^ ERROR constant expression depends on a generic parameter\n+\n+fn main() {}"}, {"sha": "a587cb618731a015897b5bb414414ec084f1779c", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,8 @@\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+  --> $DIR/impl-trait-with-const-arguments.rs:24:20\n+   |\n+LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n+   |                    ^^^^^^ explicit generic argument not allowed\n+\n+error: aborting due to previous error\n+"}, {"sha": "a587cb618731a015897b5bb414414ec084f1779c", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,8 @@\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+  --> $DIR/impl-trait-with-const-arguments.rs:24:20\n+   |\n+LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n+   |                    ^^^^^^ explicit generic argument not allowed\n+\n+error: aborting due to previous error\n+"}, {"sha": "a4c75792ee359bb71ec2494a36f00115b599d23b", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,26 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+trait Usizer {\n+    fn m(self) -> usize;\n+}\n+\n+fn f<const N: usize>(u: impl Usizer) -> usize {\n+    N + u.m()\n+}\n+\n+struct Usizable;\n+\n+impl Usizer for Usizable {\n+    fn m(self) -> usize {\n+        16\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(f::<4usize>(Usizable), 20usize);\n+//~^ ERROR cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+}"}, {"sha": "c09d16d0ab05b86f9e95b935b550236174ef50f7", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:8\n+   |\n+LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "307db088bf892a153c71cb7a63f72b990dd7cbb6", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,19 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:44\n+   |\n+LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n+   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: `&'static str` is forbidden as the type of a const generic parameter\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22\n+   |\n+LL | trait Trait<const S: &'static str> {}\n+   |                      ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "37b6cf4bab92bf9f57ea4c91316d4f04729a6a1d", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,22 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+#![feature(core_intrinsics)]\n+#![feature(const_type_name)]\n+\n+trait Trait<const S: &'static str> {}\n+//[min]~^ ERROR `&'static str` is forbidden as the type of a const generic parameter\n+\n+struct Bug<T>\n+where\n+    T: Trait<{std::intrinsics::type_name::<T>()}>\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR constant expression depends on a generic parameter\n+{\n+    t: T\n+}\n+\n+fn main() {}"}, {"sha": "2c1bc055b28ae85ea17a4d48c8f4168cae4e880c", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61522-array-len-succ.rs:7:45\n    |\n LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                             ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n    |\n    = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61522-array-len-succ.rs:12:30\n    |\n LL |     fn inner(&self) -> &[u8; COUNT + 1] {"}, {"sha": "e15d65f197e29b47301bf9913009528bbee7cde2", "filename": "src/test/ui/const-generics/issue-67375.full.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,21 @@\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/issue-67375.rs:9:12\n+   |\n+LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-67375.rs:7:12\n+   |\n+LL | struct Bug<T> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "b13d9fdab0d965ec8bad47044dfbbf2c9d22cd56", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,19 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67375.rs:9:25\n+   |\n+LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n+   |                         ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-67375.rs:7:12\n+   |\n+LL | struct Bug<T> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "994ec92cfb501b4135cdd96690559eb0503f899c", "filename": "src/test/ui/const-generics/issue-67375.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,15 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct Bug<T> {\n+    //~^ ERROR parameter `T` is never used\n+    inner: [(); { [|_: &T| {}; 0].len() }],\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ WARN cannot use constants which depend on generic parameters in types\n+    //[full]~^^^ WARN this was previously accepted by the compiler\n+}\n+\n+fn main() {}"}, {"sha": "e79c4f5374e1a511e16cc32f0c7d0a903b640e7c", "filename": "src/test/ui/const-generics/issue-67945-1.full.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,26 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-1.rs:14:20\n+   |\n+LL | struct Bug<S> {\n+   |            - this type parameter\n+...\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found union `MaybeUninit`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected type parameter `S`\n+                       found union `MaybeUninit<_>`\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-1.rs:11:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0392.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "949b5da5920b1669a06d5bbb36bf496dd9c077d8", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-1.rs:14:16\n+   |\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-1.rs:17:45\n+   |\n+LL |         let b = &*(&x as *const _ as *const S);\n+   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-1.rs:11:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "d1a83e978d1b8243276fd389235c6da931cd097c", "filename": "src/test/ui/const-generics/issue-67945-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,23 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+use std::marker::PhantomData;\n+\n+use std::mem::{self, MaybeUninit};\n+\n+struct Bug<S> {\n+    //~^ ERROR parameter `S` is never used\n+    A: [(); {\n+        let x: S = MaybeUninit::uninit();\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[full]~^^ ERROR mismatched types\n+        let b = &*(&x as *const _ as *const S);\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        0\n+    }],\n+}\n+\n+fn main() {}"}, {"sha": "2f54b802df8a497d73bca082bb05452056796066", "filename": "src/test/ui/const-generics/issue-67945-2.full.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,26 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-2.rs:12:20\n+   |\n+LL | struct Bug<S> {\n+   |            - this type parameter\n+...\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found union `MaybeUninit`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected type parameter `S`\n+                       found union `MaybeUninit<_>`\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-2.rs:9:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0392.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "ed445b3e8f7909d94d7237db7669ab61132555b1", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-2.rs:12:16\n+   |\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-2.rs:15:45\n+   |\n+LL |         let b = &*(&x as *const _ as *const S);\n+   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-2.rs:9:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "7f789297df0342663baabc7c670be306381ec62b", "filename": "src/test/ui/const-generics/issue-67945-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,21 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+use std::mem::MaybeUninit;\n+\n+struct Bug<S> {\n+    //~^ ERROR parameter `S` is never used\n+    A: [(); {\n+        let x: S = MaybeUninit::uninit();\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[full]~^^ ERROR mismatched types\n+        let b = &*(&x as *const _ as *const S);\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        0\n+    }],\n+}\n+\n+fn main() {}"}, {"sha": "c33b88588c0d0cf2dd19c0eba2669275a318493c", "filename": "src/test/ui/const-generics/issue-67945-3.full.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,16 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-67945-3.rs:8:8\n+   |\n+LL |       A: [(); {\n+   |  ________^\n+LL | |\n+LL | |         let x: Option<Box<Self>> = None;\n+LL | |\n+LL | |         0\n+LL | |     }],\n+   | |______^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "9c6e101ece868dc40d18a23a2f37282c8f602d5e", "filename": "src/test/ui/const-generics/issue-67945-3.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,8 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/issue-67945-3.rs:10:27\n+   |\n+LL |         let x: Option<Box<Self>> = None;\n+   |                           ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "bca079101e2b30a08f2d964777e6d3df8d7f5d85", "filename": "src/test/ui/const-generics/issue-67945-3.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,17 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct Bug<S: ?Sized> {\n+    A: [(); {\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n+        let x: Option<Box<Self>> = None;\n+        //[min]~^ ERROR generic `Self` types are currently not permitted in anonymous constants\n+        0\n+    }],\n+    B: S\n+}\n+\n+fn main() {}"}, {"sha": "fdd9a569748e262745980e5063bb2fefdecf4e6a", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61747.rs:8:30\n    |\n LL |     fn successor() -> Const<{C + 1}> {"}, {"sha": "f461a31eeae3a86c1ada139e52fcbf8027b00b0a", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61935.rs:10:23\n    |\n LL |         Self:FooImpl<{N==0}>"}, {"sha": "a181a8dabe5aab320991c36e1e544cfbcf043e95", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -9,7 +9,7 @@ impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n //[full]~^ERROR constant expression depends on a generic parameter\n-//[min]~^^ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ERROR generic parameters must not be used inside of non-trivial constant values\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "84975e8f3be6b96a30e5111d12bbbbccb5577b1f", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-62220.rs:8:59\n    |\n LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;"}, {"sha": "5694dc6d04da17cce4f033c02abfcd72b2bf609f", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -6,7 +6,7 @@\n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension."}, {"sha": "f94ba8c0c9b87b43f3ccebd3732f048f5ed86c92", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-62456.rs:7:20\n    |\n LL |     let _ = [0u64; N + 1];"}, {"sha": "338ec42799d1759a03fb5f829416cc8ac6520936", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -6,7 +6,7 @@\n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "f712171bbac615b9ff00556bc1788ce7e5567f05", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-64494.rs:16:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n    = note: type parameters are currently not permitted in anonymous constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-64494.rs:19:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}"}, {"sha": "b62ebf846d5b1d6220527f7f6d5164dbbbbc67ea", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -15,10 +15,10 @@ impl True for Is<{true}> {}\n \n impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n //[min]~| ERROR conflicting implementations of trait `MyTrait`\n \n fn main() {}"}, {"sha": "a18126ccfef6d12dabc89619f369e5427a6d2d85", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-66205.rs:8:14\n    |\n LL |     fact::<{ N - 1 }>();"}, {"sha": "668f49852e1ef1170f3a149874fa7e6173083080", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -7,7 +7,7 @@\n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "ba378de4156540b0b1ab90bfb58c21fd5b29f547", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-67739.rs:12:30\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];"}, {"sha": "296e4d423c48a246a9ec46f74a8e49db4eaa6dc7", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -11,7 +11,7 @@ pub trait Trait {\n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+        //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n         0\n     }\n }"}, {"sha": "73d6fec6f9b565609a09e3c9353b5c671ed56a14", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68366.rs:12:37\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}"}, {"sha": "ac313eb3b2ff3a10cca570915fdf85c3360a92ad", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -11,7 +11,7 @@ struct Collatz<const N: Option<usize>>;\n \n impl <const N: usize> Collatz<{Some(N)}> {}\n //~^ ERROR the const parameter\n-//[min]~^^ generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ generic parameters must not be used inside of non-trivial constant values\n \n struct Foo;\n "}, {"sha": "59d2be3ce4b42a9cb1819b1299f369cb5f276ddf", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68977.rs:29:17\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                 ^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `INT_BITS`\n    |\n    = help: it is currently only allowed to use either `INT_BITS` or `{ INT_BITS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68977.rs:29:28\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;"}, {"sha": "49b305a5a783f62a7203e23980872d422781eff0", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -27,8 +27,8 @@ fxp_storage_impls! {\n \n type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-    //[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n-    //[min]~| ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n \n struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n where"}, {"sha": "a4c80b1d8c01e29cfdefbc9d56949e41889737ed", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,28 +1,28 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ non-trivial anonymous constants must not depend on the parameter `LHS`\n    |\n    = help: it is currently only allowed to use either `LHS` or `{ LHS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ non-trivial anonymous constants must not depend on the parameter `RHS`\n    |\n    = help: it is currently only allowed to use either `RHS` or `{ RHS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:26:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ non-trivial anonymous constants must not depend on the parameter `I`\n    |\n    = help: it is currently only allowed to use either `I` or `{ I }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:26:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,"}, {"sha": "779c1d2950e4d510cc10d1bbba5430ef53ee2d96", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -10,8 +10,8 @@ pub trait True {}\n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n //[full]~^ Error constant expression depends on a generic parameter\n-//[min]~^^ Error generic parameters must not be used inside of non trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n {\n }\n impl True for Condition<true> {}\n@@ -28,8 +28,8 @@ where\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n-//[min]~^^^^^ Error generic parameters must not be used inside of non trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non trivial constant values\n+//[min]~^^^^^ Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {\n     fn print() {"}, {"sha": "afc14c7dcff575af88eac6651b3d9d81d1cc843e", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n    |\n LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,"}, {"sha": "65c7f00a72ae5e20b2a686b530bf5779ea90ecc7", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -8,7 +8,7 @@\n struct Arr<const N: usize>\n where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n {\n }\n "}, {"sha": "0db948d0a45dba0785093ca95c96e86a9492188f", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-76701-ty-param-in-const.rs:6:46\n    |\n LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                                              ^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n    = note: type parameters are currently not permitted in anonymous constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n    |\n LL | fn const_param<const N: usize>() -> [u8; N + 1] {"}, {"sha": "3c5bfb03f080176b6e4b95b98ca56de88e182026", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -5,13 +5,13 @@\n \n fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n     todo!()\n }\n \n fn const_param<const N: usize>() -> [u8; N + 1] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n     todo!()\n }\n "}, {"sha": "c6380f6394d0195abb18f45667764141b9c26fca", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -7,19 +7,19 @@ fn ok<const M: usize>() -> [u8; M] {\n }\n \n struct Break0<const N: usize>([u8; { N + 1 }]);\n-//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n struct Break1<const N: usize>([u8; { { N } }]);\n-//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn break2<const N: usize>() {\n     let _: [u8; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn break3<const N: usize>() {\n     let _ = [0; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n trait Foo {"}, {"sha": "d8897f53d7f748d974a5183c5d9869c9bbc0f449", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,28 +1,28 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:9:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:12:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:16:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:21:17\n    |\n LL |     let _ = [0; N + 1];"}, {"sha": "7dc81bf45af9aeec284d9d3f9c46605e3950b3b3", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/self-ty-in-const-1.rs:4:41\n    |\n LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];"}, {"sha": "0ef17109bed40333528f57bc90f1cbb6181a53b5", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,8 @@\n+#![feature(min_const_generics)]\n+\n+fn a<const X: &'static [u32]>() {}\n+//~^ ERROR `&'static [u32]` is forbidden as the type of a const generic parameter\n+\n+fn main() {\n+    a::<{&[]}>();\n+}"}, {"sha": "cc32d8a67fed01fac7e9a9294be521b149d2606c", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,11 @@\n+error: `&'static [u32]` is forbidden as the type of a const generic parameter\n+  --> $DIR/static-reference-array-const-param.rs:3:15\n+   |\n+LL | fn a<const X: &'static [u32]>() {}\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "dfa1ece2f36578df3095ed52b37a4bce8136f347", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,12 @@\n+#![feature(min_const_generics)]\n+\n+struct Const<const P: &'static ()>;\n+//~^ ERROR `&'static ()` is forbidden as the type of a const generic parameter\n+\n+fn main() {\n+    const A: &'static () = unsafe {\n+        std::mem::transmute(10 as *const ())\n+    };\n+\n+    let _ = Const::<{A}>;\n+}"}, {"sha": "063120ad074a0afe7c78a5e1d74d291c9926a330", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -0,0 +1,11 @@\n+error: `&'static ()` is forbidden as the type of a const generic parameter\n+  --> $DIR/transmute-const-param-static-reference.rs:3:23\n+   |\n+LL | struct Const<const P: &'static ()>;\n+   |                       ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0dd591d891f2b98a299ef2c6d55d2463f2f6c8f6", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -6,7 +6,7 @@ LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);"}, {"sha": "b9d74850f37d6ecb749c2240c79a473775722ceb", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -6,7 +6,7 @@\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n //[full]~^ ERROR constant values inside of type parameter defaults\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n \n // FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "1c52d6017499770a60c6f508007342f6a8239cad", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/wf-misc.rs:9:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/wf-misc.rs:17:21\n    |\n LL |     let _: Const::<{N + 1}>;"}, {"sha": "f8c41404c467b616d0ddadbb9094e6e0ab5de951", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e032bb7c65d5444a44bda9bd7db5c42b4931b0aa/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=e032bb7c65d5444a44bda9bd7db5c42b4931b0aa", "patch": "@@ -8,15 +8,15 @@\n pub fn arr_len<const N: usize>() {\n     let _: [u8; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n struct Const<const N: usize>;\n \n pub fn func_call<const N: usize>() {\n     let _: Const::<{N + 1}>;\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n fn main() {}"}]}