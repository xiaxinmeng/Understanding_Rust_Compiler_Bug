{"sha": "97c9f16a45c0ebda9facf38180549f896a81cf32", "node_id": "C_kwDOAAsO6NoAKDk3YzlmMTZhNDVjMGViZGE5ZmFjZjM4MTgwNTQ5Zjg5NmE4MWNmMzI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-20T05:59:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-20T05:59:37Z"}, "message": "Rollup merge of #98784 - compiler-errors:forgot-to-return-binding, r=estebank\n\nSuggest returning local on \"expected `ty`, found `()`\" due to expr-less block\n\nPutting this up for _initial_ review. Notably, this doesn't consider if the value has possibly been moved, or whether the type is `Copy`. It also provides a structured suggestion if there's one \"preferred\" binding that matches the type (i.e. one binding in the block or its parent), otherwise it just points them out if there's fewer than 4 of them.\n\nFixes #98177\n\nr? `@estebank`", "tree": {"sha": "0306e1c0fdfbb53af615bbc8c40191fc85e8c6fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0306e1c0fdfbb53af615bbc8c40191fc85e8c6fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c9f16a45c0ebda9facf38180549f896a81cf32", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi15nJCRBK7hj4Ov3rIwAArdwIAIkAiYOWo4eQxFWJVygqcoxz\n8rdYL1oajMQbM714WTbQx+GK73aIi0PkBU8kHnoahktatKqDknBwDpu3LSD2GGZ5\nJlWjBvcWx1M49vvs3NTe6ErytEVw/dHUbGItMdigAtcPwdsqeW0v9o8W9+5sxnNE\nPPEQcf7j/lcE7IqDfxH9zfteOmsDrKeRVsuY7m6xPlAwIz8klKVUV9R5gPSq9d8e\nG6pCWm/D5Jcr26FdsjHJB21GSecD8ibAW5tTLfyIvE2LPS7hd4yYRLL6SvKLzDpG\nCfYK6M0yZijqtiVyCjNN+Fm1wX5b4uosZGccIrlcQLLUSp77tYRs/BYWaPT/nQg=\n=KliN\n-----END PGP SIGNATURE-----\n", "payload": "tree 0306e1c0fdfbb53af615bbc8c40191fc85e8c6fe\nparent f426146460c5446bb41ac0b677bbfe5b6ff502ba\nparent b0a81904ce58cd226bc5015b2d9ef97671880fbd\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658296777 +0530\ncommitter GitHub <noreply@github.com> 1658296777 +0530\n\nRollup merge of #98784 - compiler-errors:forgot-to-return-binding, r=estebank\n\nSuggest returning local on \"expected `ty`, found `()`\" due to expr-less block\n\nPutting this up for _initial_ review. Notably, this doesn't consider if the value has possibly been moved, or whether the type is `Copy`. It also provides a structured suggestion if there's one \"preferred\" binding that matches the type (i.e. one binding in the block or its parent), otherwise it just points them out if there's fewer than 4 of them.\n\nFixes #98177\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c9f16a45c0ebda9facf38180549f896a81cf32", "html_url": "https://github.com/rust-lang/rust/commit/97c9f16a45c0ebda9facf38180549f896a81cf32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c9f16a45c0ebda9facf38180549f896a81cf32/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f426146460c5446bb41ac0b677bbfe5b6ff502ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f426146460c5446bb41ac0b677bbfe5b6ff502ba", "html_url": "https://github.com/rust-lang/rust/commit/f426146460c5446bb41ac0b677bbfe5b6ff502ba"}, {"sha": "b0a81904ce58cd226bc5015b2d9ef97671880fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a81904ce58cd226bc5015b2d9ef97671880fbd", "html_url": "https://github.com/rust-lang/rust/commit/b0a81904ce58cd226bc5015b2d9ef97671880fbd"}], "stats": {"total": 366, "additions": 314, "deletions": 52}, "files": [{"sha": "e6fa95b91e9b3840eb849c608f79d1d75c49e618", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -31,9 +31,7 @@ use rustc_middle::ty::{self, DefIdTree, IsSuggestable, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::traits::{\n-    self, ObligationCauseCode, SelectionContext, StatementAsExpression,\n-};\n+use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n use std::iter;\n use std::slice;\n@@ -1410,7 +1408,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &self.misc(sp),\n                         &mut |err| {\n                             if let Some(expected_ty) = expected.only_has_type(self) {\n-                                self.consider_hint_about_removing_semicolon(blk, expected_ty, err);\n+                                if !self.consider_removing_semicolon(blk, expected_ty, err) {\n+                                    self.consider_returning_binding(blk, expected_ty, err);\n+                                }\n                                 if expected_ty == self.tcx.types.bool {\n                                     // If this is caused by a missing `let` in a `while let`,\n                                     // silence this redundant error, as we already emit E0070.\n@@ -1478,42 +1478,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    /// A common error is to add an extra semicolon:\n-    ///\n-    /// ```compile_fail,E0308\n-    /// fn foo() -> usize {\n-    ///     22;\n-    /// }\n-    /// ```\n-    ///\n-    /// This routine checks if the final statement in a block is an\n-    /// expression with an explicit semicolon whose type is compatible\n-    /// with `expected_ty`. If so, it suggests removing the semicolon.\n-    fn consider_hint_about_removing_semicolon(\n-        &self,\n-        blk: &'tcx hir::Block<'tcx>,\n-        expected_ty: Ty<'tcx>,\n-        err: &mut Diagnostic,\n-    ) {\n-        if let Some((span_semi, boxed)) = self.could_remove_semicolon(blk, expected_ty) {\n-            if let StatementAsExpression::NeedsBoxing = boxed {\n-                err.span_suggestion_verbose(\n-                    span_semi,\n-                    \"consider removing this semicolon and boxing the expression\",\n-                    \"\",\n-                    Applicability::HasPlaceholders,\n-                );\n-            } else {\n-                err.span_suggestion_short(\n-                    span_semi,\n-                    \"remove this semicolon\",\n-                    \"\",\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        }\n-    }\n-\n     fn parent_item_span(&self, id: hir::HirId) -> Option<Span> {\n         let node = self.tcx.hir().get_by_def_id(self.tcx.hir().get_parent_item(id));\n         match node {"}, {"sha": "d5ee299c0f98d1f55b70d9721244539ab64edbc4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 156, "deletions": 3, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -3,6 +3,7 @@ use crate::astconv::AstConv;\n use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n \n use rustc_ast::util::parser::ExprPrecedence;\n+use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n@@ -11,12 +12,12 @@ use rustc_hir::{\n     Expr, ExprKind, GenericBound, Node, Path, QPath, Stmt, StmtKind, TyKind, WherePredicate,\n };\n use rustc_infer::infer::{self, TyCtxtInferExt};\n-use rustc_infer::traits;\n+use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Binder, IsSuggestable, Subst, ToPredicate, Ty};\n+use rustc_middle::ty::{self, Binder, IsSuggestable, Subst, ToPredicate, Ty, TypeVisitable};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn suggest_semicolon_at_end(&self, span: Span, err: &mut Diagnostic) {\n@@ -864,4 +865,156 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n         }\n     }\n+\n+    /// A common error is to add an extra semicolon:\n+    ///\n+    /// ```compile_fail,E0308\n+    /// fn foo() -> usize {\n+    ///     22;\n+    /// }\n+    /// ```\n+    ///\n+    /// This routine checks if the final statement in a block is an\n+    /// expression with an explicit semicolon whose type is compatible\n+    /// with `expected_ty`. If so, it suggests removing the semicolon.\n+    pub(crate) fn consider_removing_semicolon(\n+        &self,\n+        blk: &'tcx hir::Block<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+        err: &mut Diagnostic,\n+    ) -> bool {\n+        if let Some((span_semi, boxed)) = self.could_remove_semicolon(blk, expected_ty) {\n+            if let StatementAsExpression::NeedsBoxing = boxed {\n+                err.span_suggestion_verbose(\n+                    span_semi,\n+                    \"consider removing this semicolon and boxing the expression\",\n+                    \"\",\n+                    Applicability::HasPlaceholders,\n+                );\n+            } else {\n+                err.span_suggestion_short(\n+                    span_semi,\n+                    \"remove this semicolon\",\n+                    \"\",\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+    pub(crate) fn consider_returning_binding(\n+        &self,\n+        blk: &'tcx hir::Block<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+        err: &mut Diagnostic,\n+    ) {\n+        let mut shadowed = FxHashSet::default();\n+        let mut candidate_idents = vec![];\n+        let mut find_compatible_candidates = |pat: &hir::Pat<'_>| {\n+            if let hir::PatKind::Binding(_, hir_id, ident, _) = &pat.kind\n+                && let Some(pat_ty) = self.typeck_results.borrow().node_type_opt(*hir_id)\n+            {\n+                let pat_ty = self.resolve_vars_if_possible(pat_ty);\n+                if self.can_coerce(pat_ty, expected_ty)\n+                    && !(pat_ty, expected_ty).references_error()\n+                    && shadowed.insert(ident.name)\n+                {\n+                    candidate_idents.push((*ident, pat_ty));\n+                }\n+            }\n+            true\n+        };\n+\n+        let hir = self.tcx.hir();\n+        for stmt in blk.stmts.iter().rev() {\n+            let StmtKind::Local(local) = &stmt.kind else { continue; };\n+            local.pat.walk(&mut find_compatible_candidates);\n+        }\n+        match hir.find(hir.get_parent_node(blk.hir_id)) {\n+            Some(hir::Node::Expr(hir::Expr { hir_id, .. })) => {\n+                match hir.find(hir.get_parent_node(*hir_id)) {\n+                    Some(hir::Node::Arm(hir::Arm { pat, .. })) => {\n+                        pat.walk(&mut find_compatible_candidates);\n+                    }\n+                    Some(\n+                        hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, _, body), .. })\n+                        | hir::Node::ImplItem(hir::ImplItem {\n+                            kind: hir::ImplItemKind::Fn(_, body),\n+                            ..\n+                        })\n+                        | hir::Node::TraitItem(hir::TraitItem {\n+                            kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body)),\n+                            ..\n+                        })\n+                        | hir::Node::Expr(hir::Expr {\n+                            kind: hir::ExprKind::Closure(hir::Closure { body, .. }),\n+                            ..\n+                        }),\n+                    ) => {\n+                        for param in hir.body(*body).params {\n+                            param.pat.walk(&mut find_compatible_candidates);\n+                        }\n+                    }\n+                    Some(hir::Node::Expr(hir::Expr {\n+                        kind:\n+                            hir::ExprKind::If(\n+                                hir::Expr { kind: hir::ExprKind::Let(let_), .. },\n+                                then_block,\n+                                _,\n+                            ),\n+                        ..\n+                    })) if then_block.hir_id == *hir_id => {\n+                        let_.pat.walk(&mut find_compatible_candidates);\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        match &candidate_idents[..] {\n+            [(ident, _ty)] => {\n+                let sm = self.tcx.sess.source_map();\n+                if let Some(stmt) = blk.stmts.last() {\n+                    let stmt_span = sm.stmt_span(stmt.span, blk.span);\n+                    let sugg = if sm.is_multiline(blk.span)\n+                        && let Some(spacing) = sm.indentation_before(stmt_span)\n+                    {\n+                        format!(\"\\n{spacing}{ident}\")\n+                    } else {\n+                        format!(\" {ident}\")\n+                    };\n+                    err.span_suggestion_verbose(\n+                        stmt_span.shrink_to_hi(),\n+                        format!(\"consider returning the local binding `{ident}`\"),\n+                        sugg,\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    let sugg = if sm.is_multiline(blk.span)\n+                        && let Some(spacing) = sm.indentation_before(blk.span.shrink_to_lo())\n+                    {\n+                        format!(\"\\n{spacing}    {ident}\\n{spacing}\")\n+                    } else {\n+                        format!(\" {ident} \")\n+                    };\n+                    let left_span = sm.span_through_char(blk.span, '{').shrink_to_hi();\n+                    err.span_suggestion_verbose(\n+                        sm.span_extend_while(left_span, |c| c.is_whitespace()).unwrap_or(left_span),\n+                        format!(\"consider returning the local binding `{ident}`\"),\n+                        sugg,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            values if (1..3).contains(&values.len()) => {\n+                let spans = values.iter().map(|(ident, _)| ident.span).collect::<Vec<_>>();\n+                err.span_note(spans, \"consider returning one of these bindings\");\n+            }\n+            _ => {}\n+        }\n+    }\n }"}, {"sha": "ada6e357aea5ee7f17633dc7a2b3bf4b2999b9ae", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -18,6 +18,14 @@ LL | |             break 0u8;\n LL | |         };\n    | |_________- enclosing `async` block\n \n+error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n+   |\n+LL |     let _: &dyn Future<Output = ()> = &block;\n+   |                                       ^^^^^^ expected `()`, found `u8`\n+   |\n+   = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n+\n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:21:58\n    |\n@@ -32,7 +40,7 @@ LL | | }\n    | |_^ expected `u8`, found `()`\n \n error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n+  --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n@@ -47,14 +55,6 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n-   |\n-LL |     let _: &dyn Future<Output = ()> = &block;\n-   |                                       ^^^^^^ expected `()`, found `u8`\n-   |\n-   = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n-\n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:47:44\n    |"}, {"sha": "ddbdbdb0fd043eb0f5655c7545eaac7a94a03621", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -5,6 +5,11 @@ LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n    |    -              ^^^^^ expected `isize`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+help: consider returning the local binding `a`\n+   |\n+LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; a }\n+   |                                                           +\n \n error: aborting due to previous error\n "}, {"sha": "b7250f3b0b539b5be0139162726c26271917c7ea", "filename": "src/test/ui/parser/issues/issue-33413.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-33413.stderr?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -11,6 +11,11 @@ LL |     fn f(*, a: u8) -> u8 {}\n    |        -              ^^ expected `u8`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+help: consider returning the local binding `a`\n+   |\n+LL |     fn f(*, a: u8) -> u8 { a }\n+   |                            +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8c3bd641e97846b137759280a76cf9990fdf2b7b", "filename": "src/test/ui/suggestions/return-bindings-multi.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings-multi.rs?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -0,0 +1,9 @@\n+fn a(i: i32) -> i32 {\n+    //~^ ERROR mismatched types\n+    let j = 2i32;\n+}\n+\n+fn b(i: i32, j: i32) -> i32 {}\n+//~^ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "738e3f2f4beb828831aa3331ec18beadbb21180b", "filename": "src/test/ui/suggestions/return-bindings-multi.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings-multi.stderr?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -0,0 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-bindings-multi.rs:1:17\n+   |\n+LL | fn a(i: i32) -> i32 {\n+   |    -            ^^^ expected `i32`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+note: consider returning one of these bindings\n+  --> $DIR/return-bindings-multi.rs:1:6\n+   |\n+LL | fn a(i: i32) -> i32 {\n+   |      ^\n+LL |\n+LL |     let j = 2i32;\n+   |         ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-bindings-multi.rs:6:25\n+   |\n+LL | fn b(i: i32, j: i32) -> i32 {}\n+   |    -                    ^^^ expected `i32`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+note: consider returning one of these bindings\n+  --> $DIR/return-bindings-multi.rs:6:6\n+   |\n+LL | fn b(i: i32, j: i32) -> i32 {}\n+   |      ^       ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4fabc411abcbe8c8b4e16935d4853079194a6018", "filename": "src/test/ui/suggestions/return-bindings.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.fixed?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+fn a(i: i32) -> i32 { i }\n+//~^ ERROR mismatched types\n+\n+fn b(opt_str: Option<String>) {\n+    let s: String = if let Some(s) = opt_str {\n+        s\n+    //~^ ERROR mismatched types\n+    } else {\n+        String::new()\n+    };\n+}\n+\n+fn c() -> Option<i32> {\n+    //~^ ERROR mismatched types\n+    let x = Some(1);\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "d05b4ba27d6e8a5f2adb60ba961f8a4a11aec116", "filename": "src/test/ui/suggestions/return-bindings.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.rs?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+fn a(i: i32) -> i32 {}\n+//~^ ERROR mismatched types\n+\n+fn b(opt_str: Option<String>) {\n+    let s: String = if let Some(s) = opt_str {\n+        //~^ ERROR mismatched types\n+    } else {\n+        String::new()\n+    };\n+}\n+\n+fn c() -> Option<i32> {\n+    //~^ ERROR mismatched types\n+    let x = Some(1);\n+}\n+\n+fn main() {}"}, {"sha": "e5d49255005567effa1ba305fcd471edba4f5dbd", "filename": "src/test/ui/suggestions/return-bindings.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97c9f16a45c0ebda9facf38180549f896a81cf32/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-bindings.stderr?ref=97c9f16a45c0ebda9facf38180549f896a81cf32", "patch": "@@ -0,0 +1,48 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-bindings.rs:5:17\n+   |\n+LL | fn a(i: i32) -> i32 {}\n+   |    -            ^^^ expected `i32`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+help: consider returning the local binding `i`\n+   |\n+LL | fn a(i: i32) -> i32 { i }\n+   |                       +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-bindings.rs:9:46\n+   |\n+LL |       let s: String = if let Some(s) = opt_str {\n+   |  ______________________________________________^\n+LL | |\n+LL | |     } else {\n+   | |_____^ expected struct `String`, found `()`\n+   |\n+help: consider returning the local binding `s`\n+   |\n+LL ~     let s: String = if let Some(s) = opt_str {\n+LL +         s\n+LL ~\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-bindings.rs:16:11\n+   |\n+LL | fn c() -> Option<i32> {\n+   |    -      ^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+   = note:   expected enum `Option<i32>`\n+           found unit type `()`\n+help: consider returning the local binding `x`\n+   |\n+LL ~     let x = Some(1);\n+LL +     x\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}