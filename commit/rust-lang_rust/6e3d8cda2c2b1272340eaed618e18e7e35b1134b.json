{"sha": "6e3d8cda2c2b1272340eaed618e18e7e35b1134b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlM2Q4Y2RhMmMyYjEyNzIzNDBlYWVkNjE4ZTE4ZTdlMzViMTEzNGI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-19T05:24:42Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:34Z"}, "message": "Fix and cleanup callee shims", "tree": {"sha": "938c0c0af01693220813aaf6c02190c76c75dab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/938c0c0af01693220813aaf6c02190c76c75dab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3d8cda2c2b1272340eaed618e18e7e35b1134b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d8cda2c2b1272340eaed618e18e7e35b1134b", "html_url": "https://github.com/rust-lang/rust/commit/6e3d8cda2c2b1272340eaed618e18e7e35b1134b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d8cda2c2b1272340eaed618e18e7e35b1134b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f1406eef844db064365bbdb4f7fa3eed8eea6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f1406eef844db064365bbdb4f7fa3eed8eea6f", "html_url": "https://github.com/rust-lang/rust/commit/f9f1406eef844db064365bbdb4f7fa3eed8eea6f"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "cab42e8b5e61aed393600f40d4a8a68186f9249b", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d8cda2c2b1272340eaed618e18e7e35b1134b/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d8cda2c2b1272340eaed618e18e7e35b1134b/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=6e3d8cda2c2b1272340eaed618e18e7e35b1134b", "patch": "@@ -502,15 +502,15 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n     let fcx = FunctionContext::new(ccx, llfn, fn_ty);\n     let bcx = fcx.get_entry_block();\n \n-    let llargs = get_params(fcx.llfn);\n+    let mut llargs = get_params(fcx.llfn);\n \n-    let self_idx = fcx.fn_ty.ret.is_indirect() as usize;\n+    let self_arg = llargs.remove(fcx.fn_ty.ret.is_indirect() as usize);\n     let llfnpointer = llfnpointer.unwrap_or_else(|| {\n         // the first argument (`self`) will be ptr to the fn pointer\n         if is_by_ref {\n-            bcx.load(llargs[self_idx])\n+            bcx.load(self_arg)\n         } else {\n-            llargs[self_idx]\n+            self_arg\n         }\n     });\n \n@@ -522,16 +522,7 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n     let fn_ret = callee.ty.fn_ret();\n     let fn_ty = callee.direct_fn_type(ccx, &[]);\n \n-    let mut args = Vec::new();\n-\n-    if fn_ty.ret.is_indirect() {\n-        if !fn_ty.ret.is_ignore() {\n-            args.push(get_param(fcx.llfn, 0));\n-        }\n-    }\n-    args.extend_from_slice(&llargs[(self_idx + 1)..]);\n-\n-    let llret = bcx.call(llfnpointer, &args, None);\n+    let llret = bcx.call(llfnpointer, &llargs, None);\n     fn_ty.apply_attrs_callsite(llret);\n \n     if fn_ret.0.is_never() {"}, {"sha": "6bc3c1e0b1e6ca34ede1de36ab610c50906a0ecd", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d8cda2c2b1272340eaed618e18e7e35b1134b/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d8cda2c2b1272340eaed618e18e7e35b1134b/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=6e3d8cda2c2b1272340eaed618e18e7e35b1134b", "patch": "@@ -12,7 +12,7 @@ use attributes;\n use llvm::{ValueRef, get_params};\n use rustc::traits;\n use abi::FnType;\n-use callee::Callee;\n+use callee::{Callee, CalleeData};\n use common::*;\n use consts;\n use declare;\n@@ -84,14 +84,20 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     let fcx = FunctionContext::new(ccx, llfn, fn_ty);\n     let bcx = fcx.get_entry_block();\n \n-    let llargs = get_params(fcx.llfn);\n+    let mut llargs = get_params(fcx.llfn);\n     let fn_ret = callee.ty.fn_ret();\n     let fn_ty = callee.direct_fn_type(ccx, &[]);\n \n-    let mut args = Vec::new();\n-\n-    args.extend_from_slice(&llargs);\n-    let llret = bcx.call(callee.reify(ccx), &args, None);\n+    let fn_ptr = match callee.data {\n+        CalleeData::Virtual(idx) => {\n+            let fn_ptr = get_virtual_method(&bcx,\n+                llargs.remove(fn_ty.ret.is_indirect() as usize + 1), idx);\n+            let llty = fn_ty.llvm_type(bcx.ccx()).ptr_to();\n+            bcx.pointercast(fn_ptr, llty)\n+        },\n+        _ => bug!(\"trans_object_shim called with non-virtual callee\"),\n+    };\n+    let llret = bcx.call(fn_ptr, &llargs, None);\n     fn_ty.apply_attrs_callsite(llret);\n \n     if fn_ret.0.is_never() {"}, {"sha": "5fbfef05e10d4f321b14f8f891c31d58e15faa24", "filename": "src/test/run-pass/trans-object-shim.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d8cda2c2b1272340eaed618e18e7e35b1134b/src%2Ftest%2Frun-pass%2Ftrans-object-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d8cda2c2b1272340eaed618e18e7e35b1134b/src%2Ftest%2Frun-pass%2Ftrans-object-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrans-object-shim.rs?ref=6e3d8cda2c2b1272340eaed618e18e7e35b1134b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    assert_eq!((ToString::to_string as fn(&(ToString+'static)) -> String)(&\"foo\"),\n+        String::from(\"foo\"));\n+}"}]}