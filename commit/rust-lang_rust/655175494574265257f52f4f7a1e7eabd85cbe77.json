{"sha": "655175494574265257f52f4f7a1e7eabd85cbe77", "node_id": "C_kwDOAAsO6NoAKDY1NTE3NTQ5NDU3NDI2NTI1N2Y1MmY0ZjdhMWU3ZWFiZDg1Y2JlNzc", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-21T13:27:25Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-21T13:27:25Z"}, "message": "[`unwrap_used`], [`expect_used`] do not lint in `test` cfg", "tree": {"sha": "e86fd5a4179b953bd2d7e4f91e17d44bca9c75e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86fd5a4179b953bd2d7e4f91e17d44bca9c75e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/655175494574265257f52f4f7a1e7eabd85cbe77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/655175494574265257f52f4f7a1e7eabd85cbe77", "html_url": "https://github.com/rust-lang/rust/commit/655175494574265257f52f4f7a1e7eabd85cbe77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/655175494574265257f52f4f7a1e7eabd85cbe77/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "967f172e256802f9bf0ad5718d9c761da18132a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/967f172e256802f9bf0ad5718d9c761da18132a9", "html_url": "https://github.com/rust-lang/rust/commit/967f172e256802f9bf0ad5718d9c761da18132a9"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "0d3c89280465bd5f7bca33b811c1c6cd7659b40d", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/655175494574265257f52f4f7a1e7eabd85cbe77/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655175494574265257f52f4f7a1e7eabd85cbe77/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=655175494574265257f52f4f7a1e7eabd85cbe77", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_in_test_function;\n+use clippy_utils::is_in_cfg_test;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -27,7 +27,7 @@ pub(super) fn check(\n \n     let method = if is_err { \"expect_err\" } else { \"expect\" };\n \n-    if allow_expect_in_tests && is_in_test_function(cx.tcx, expr.hir_id) {\n+    if allow_expect_in_tests && is_in_cfg_test(cx.tcx, expr.hir_id) {\n         return;\n     }\n "}, {"sha": "d11830a24b6c091250cc010f8e4e3fcb122018e0", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/655175494574265257f52f4f7a1e7eabd85cbe77/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655175494574265257f52f4f7a1e7eabd85cbe77/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=655175494574265257f52f4f7a1e7eabd85cbe77", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{is_in_test_function, is_lint_allowed};\n+use clippy_utils::{is_in_cfg_test, is_lint_allowed};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n@@ -27,7 +27,7 @@ pub(super) fn check(\n \n     let method_suffix = if is_err { \"_err\" } else { \"\" };\n \n-    if allow_unwrap_in_tests && is_in_test_function(cx.tcx, expr.hir_id) {\n+    if allow_unwrap_in_tests && is_in_cfg_test(cx.tcx, expr.hir_id) {\n         return;\n     }\n "}, {"sha": "199dfafebf35a21d6550870723812d35b952053a", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/655175494574265257f52f4f7a1e7eabd85cbe77/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655175494574265257f52f4f7a1e7eabd85cbe77/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=655175494574265257f52f4f7a1e7eabd85cbe77", "patch": "@@ -373,11 +373,11 @@ define_Conf! {\n     (max_include_file_size: u64 = 1_000_000),\n     /// Lint: EXPECT_USED.\n     ///\n-    /// Whether `expect` should be allowed in test functions\n+    /// Whether `expect` should be allowed in test cfg\n     (allow_expect_in_tests: bool = false),\n     /// Lint: UNWRAP_USED.\n     ///\n-    /// Whether `unwrap` should be allowed in test functions\n+    /// Whether `unwrap` should be allowed in test cfg\n     (allow_unwrap_in_tests: bool = false),\n     /// Lint: DBG_MACRO.\n     ///"}, {"sha": "bff97d97df77aa38f87d49dec1c752110e7fba1f", "filename": "tests/ui-toml/expect_used/expect_used.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/655175494574265257f52f4f7a1e7eabd85cbe77/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655175494574265257f52f4f7a1e7eabd85cbe77/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs?ref=655175494574265257f52f4f7a1e7eabd85cbe77", "patch": "@@ -16,14 +16,19 @@ fn main() {\n     expect_result();\n }\n \n-#[test]\n-fn test_expect_option() {\n-    let opt = Some(0);\n-    let _ = opt.expect(\"\");\n-}\n+#[cfg(test)]\n+mod issue9612 {\n+    // should not lint in `#[cfg(test)]` modules\n+    #[test]\n+    fn test_fn() {\n+        let _a: u8 = 2.try_into().unwrap();\n+        let _a: u8 = 3.try_into().expect(\"\");\n \n-#[test]\n-fn test_expect_result() {\n-    let res: Result<u8, ()> = Ok(0);\n-    let _ = res.expect(\"\");\n+        util();\n+    }\n+\n+    fn util() {\n+        let _a: u8 = 4.try_into().unwrap();\n+        let _a: u8 = 5.try_into().expect(\"\");\n+    }\n }"}, {"sha": "bc8e8c1f0703a3c9c9b0827b739006c5ef3903f0", "filename": "tests/ui-toml/unwrap_used/unwrap_used.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/655175494574265257f52f4f7a1e7eabd85cbe77/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655175494574265257f52f4f7a1e7eabd85cbe77/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs?ref=655175494574265257f52f4f7a1e7eabd85cbe77", "patch": "@@ -66,8 +66,21 @@ fn main() {\n     }\n }\n \n-#[test]\n-fn test() {\n-    let boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let _ = boxed_slice.get(1).unwrap();\n+#[cfg(test)]\n+mod issue9612 {\n+    // should not lint in `#[cfg(test)]` modules\n+    #[test]\n+    fn test_fn() {\n+        let _a: u8 = 2.try_into().unwrap();\n+        let _a: u8 = 3.try_into().expect(\"\");\n+\n+        util();\n+    }\n+\n+    fn util() {\n+        let _a: u8 = 4.try_into().unwrap();\n+        let _a: u8 = 5.try_into().expect(\"\");\n+        // should still warn\n+        let _ = Box::new([0]).get(1).unwrap();\n+    }\n }"}, {"sha": "2bca88660e1c634a0b38e8a57b625a81cc183fd8", "filename": "tests/ui-toml/unwrap_used/unwrap_used.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/655175494574265257f52f4f7a1e7eabd85cbe77/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/655175494574265257f52f4f7a1e7eabd85cbe77/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr?ref=655175494574265257f52f4f7a1e7eabd85cbe77", "patch": "@@ -188,10 +188,10 @@ LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:72:13\n+  --> $DIR/unwrap_used.rs:84:17\n    |\n-LL |     let _ = boxed_slice.get(1).unwrap();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n+LL |         let _ = Box::new([0]).get(1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&Box::new([0])[1]`\n \n error: aborting due to 27 previous errors\n "}]}