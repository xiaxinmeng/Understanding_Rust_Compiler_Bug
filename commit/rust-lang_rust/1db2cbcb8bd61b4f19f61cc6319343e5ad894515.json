{"sha": "1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjJjYmNiOGJkNjFiNGYxOWY2MWNjNjMxOTM0M2U1YWQ4OTQ1MTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T21:50:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T21:50:08Z"}, "message": "move consts&statics to new id", "tree": {"sha": "1769ced52f4e298773b8fee9fab79b691ddb5f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1769ced52f4e298773b8fee9fab79b691ddb5f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "html_url": "https://github.com/rust-lang/rust/commit/1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f588535273db261c32e23c1b0221d03ad82cd94d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f588535273db261c32e23c1b0221d03ad82cd94d", "html_url": "https://github.com/rust-lang/rust/commit/f588535273db261c32e23c1b0221d03ad82cd94d"}], "stats": {"total": 133, "additions": 86, "deletions": 47}, "files": [{"sha": "d82dda79a7283e8469668f59bd06979a7612fad3", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "patch": "@@ -16,7 +16,7 @@ use crate::{\n     code_model_impl::def_id_to_ast,\n     docs::{Documentation, Docs, docs_from_ast},\n     module_tree::ModuleId,\n-    ids::{FunctionId, StructId, EnumId, EnumVariantId, AstItemDef},\n+    ids::{FunctionId, StructId, EnumId, EnumVariantId, AstItemDef, ConstId, StaticId},\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -47,8 +47,6 @@ impl Crate {\n \n #[derive(Debug)]\n pub enum Def {\n-    Const(Const),\n-    Static(Static),\n     Trait(Trait),\n     Type(Type),\n     Item,\n@@ -67,11 +65,21 @@ pub enum ModuleDef {\n     Function(Function),\n     Struct(Struct),\n     Enum(Enum),\n-    // Can't be directly declared, but can be imported.\n     EnumVariant(EnumVariant),\n+    Const(Const),\n+    Static(Static),\n+    // Can't be directly declared, but can be imported.\n     Def(DefId),\n }\n-impl_froms!(ModuleDef: Module, Function, Struct, Enum, EnumVariant);\n+impl_froms!(\n+    ModuleDef: Module,\n+    Function,\n+    Struct,\n+    Enum,\n+    EnumVariant,\n+    Const,\n+    Static\n+);\n \n impl From<DefId> for ModuleDef {\n     fn from(it: DefId) -> ModuleDef {\n@@ -386,18 +394,14 @@ impl Docs for Function {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Const {\n-    pub(crate) def_id: DefId,\n+    pub(crate) id: ConstId,\n }\n \n impl Const {\n-    pub(crate) fn new(def_id: DefId) -> Const {\n-        Const { def_id }\n-    }\n-\n     pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n-        def_id_to_ast(db, self.def_id)\n+        self.id.source(db)\n     }\n }\n \n@@ -407,18 +411,14 @@ impl Docs for Const {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Static {\n-    pub(crate) def_id: DefId,\n+    pub(crate) id: StaticId,\n }\n \n impl Static {\n-    pub(crate) fn new(def_id: DefId) -> Static {\n-        Static { def_id }\n-    }\n-\n     pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n-        def_id_to_ast(db, self.def_id)\n+        self.id.source(db)\n     }\n }\n "}, {"sha": "1518825c71d3e7e12a9f9b28236ed38288a351ab", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "patch": "@@ -147,7 +147,11 @@ impl Module {\n                         None => PerNs::none(),\n                     }\n                 }\n-                ModuleDef::Function(_) | ModuleDef::Struct(_) | ModuleDef::EnumVariant(_) => {\n+                ModuleDef::Function(_)\n+                | ModuleDef::Struct(_)\n+                | ModuleDef::Const(_)\n+                | ModuleDef::Static(_)\n+                | ModuleDef::EnumVariant(_) => {\n                     // could be an inherent method call in UFCS form\n                     // (`Struct::method`), or some other kind of associated\n                     // item... Which we currently don't handle (TODO)"}, {"sha": "9aae58bb63dac566b1d1d12715ef8b53c47f75e5", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "patch": "@@ -9,7 +9,7 @@ use ra_arena::{Arena, RawId, ArenaId, impl_arena_id};\n \n use crate::{\n     HirDatabase, Def,\n-    Module, Trait, Type, Static, Const,\n+    Module, Trait, Type,\n };\n \n #[derive(Debug, Default)]\n@@ -20,6 +20,8 @@ pub struct HirInterner {\n     structs: LocationIntener<ItemLoc<ast::StructDef>, StructId>,\n     enums: LocationIntener<ItemLoc<ast::EnumDef>, EnumId>,\n     enum_variants: LocationIntener<ItemLoc<ast::EnumVariant>, EnumVariantId>,\n+    consts: LocationIntener<ItemLoc<ast::ConstDef>, ConstId>,\n+    statics: LocationIntener<ItemLoc<ast::StaticDef>, StaticId>,\n }\n \n impl HirInterner {\n@@ -246,6 +248,24 @@ impl AstItemDef<ast::EnumVariant> for EnumVariantId {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct ConstId(RawId);\n+impl_arena_id!(ConstId);\n+impl AstItemDef<ast::ConstDef> for ConstId {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::ConstDef>, Self> {\n+        &interner.consts\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct StaticId(RawId);\n+impl_arena_id!(StaticId);\n+impl AstItemDef<ast::StaticDef> for StaticId {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::StaticDef>, Self> {\n+        &interner.statics\n+    }\n+}\n+\n /// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n /// in a specific module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -261,8 +281,6 @@ pub struct DefLoc {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub(crate) enum DefKind {\n-    Const,\n-    Static,\n     Trait,\n     Type,\n     Item,\n@@ -286,14 +304,6 @@ impl DefId {\n     pub fn resolve(self, db: &impl HirDatabase) -> Def {\n         let loc = self.loc(db);\n         match loc.kind {\n-            DefKind::Const => {\n-                let def = Const::new(self);\n-                Def::Const(def)\n-            }\n-            DefKind::Static => {\n-                let def = Static::new(self);\n-                Def::Static(def)\n-            }\n             DefKind::Trait => {\n                 let def = Trait::new(self);\n                 Def::Trait(def)"}, {"sha": "6a86e5fd4f7550777239d01a9453e8e762916d1f", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "patch": "@@ -10,7 +10,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     SourceItemId, Path, ModuleSource, HirDatabase, Name, SourceFileItems,\n     HirFileId, MacroCallLoc, AsName, PerNs, DefKind, DefLoc, Function,\n-    ModuleDef, Module, Struct, Enum,\n+    ModuleDef, Module, Struct, Enum, Const, Static,\n     ids::LocationCtx,\n };\n \n@@ -187,8 +187,22 @@ impl LoweredModule {\n                 // TODO\n                 return;\n             }\n-            ast::ModuleItemKind::ConstDef(it) => it.name(),\n-            ast::ModuleItemKind::StaticDef(it) => it.name(),\n+            ast::ModuleItemKind::ConstDef(it) => {\n+                if let Some(name) = it.name() {\n+                    let c = Const { id: ctx.to_def(it) };\n+                    self.declarations\n+                        .insert(name.as_name(), PerNs::values(c.into()));\n+                }\n+                return;\n+            }\n+            ast::ModuleItemKind::StaticDef(it) => {\n+                if let Some(name) = it.name() {\n+                    let s = Static { id: ctx.to_def(it) };\n+                    self.declarations\n+                        .insert(name.as_name(), PerNs::values(s.into()));\n+                }\n+                return;\n+            }\n             ast::ModuleItemKind::Module(_) => {\n                 // modules are handled separately direclty by nameres\n                 return;\n@@ -246,8 +260,8 @@ impl DefKind {\n             SyntaxKind::ENUM_DEF => unreachable!(),\n             SyntaxKind::TRAIT_DEF => PerNs::types(DefKind::Trait),\n             SyntaxKind::TYPE_DEF => PerNs::types(DefKind::Type),\n-            SyntaxKind::CONST_DEF => PerNs::values(DefKind::Const),\n-            SyntaxKind::STATIC_DEF => PerNs::values(DefKind::Static),\n+            SyntaxKind::CONST_DEF => unreachable!(),\n+            SyntaxKind::STATIC_DEF => unreachable!(),\n             _ => PerNs::none(),\n         }\n     }"}, {"sha": "6d61500967d8947df4a9ddac91bcd86f0c57f582", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "patch": "@@ -693,7 +693,10 @@ impl From<ModuleDef> for Option<TypableDef> {\n             ModuleDef::Struct(s) => s.into(),\n             ModuleDef::Enum(e) => e.into(),\n             ModuleDef::EnumVariant(v) => v.into(),\n-            ModuleDef::Def(_) | ModuleDef::Module(_) => return None,\n+            ModuleDef::Const(_)\n+            | ModuleDef::Static(_)\n+            | ModuleDef::Def(_)\n+            | ModuleDef::Module(_) => return None,\n         };\n         Some(res)\n     }"}, {"sha": "bd5484516608853eafc21ea2ba8ee337021ac37c", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "patch": "@@ -43,6 +43,8 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         hir::ModuleDef::Function(_)\n         | hir::ModuleDef::Struct(_)\n         | hir::ModuleDef::Def(_)\n+        | hir::ModuleDef::Const(_)\n+        | hir::ModuleDef::Static(_)\n         | hir::ModuleDef::EnumVariant(_) => return,\n     };\n }"}, {"sha": "2f8ec41d275df3f82d75c7269de0061f7013e458", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "patch": "@@ -223,11 +223,11 @@ impl Builder {\n             hir::ModuleDef::Struct(it) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n             hir::ModuleDef::Enum(it) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n             hir::ModuleDef::EnumVariant(it) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n+            hir::ModuleDef::Const(it) => (CompletionItemKind::Const, it.docs(ctx.db)),\n+            hir::ModuleDef::Static(it) => (CompletionItemKind::Static, it.docs(ctx.db)),\n             hir::ModuleDef::Def(def_id) => match def_id.resolve(ctx.db) {\n                 hir::Def::Trait(it) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n                 hir::Def::Type(it) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n-                hir::Def::Const(it) => (CompletionItemKind::Const, it.docs(ctx.db)),\n-                hir::Def::Static(it) => (CompletionItemKind::Static, it.docs(ctx.db)),\n                 _ => return self,\n             },\n         };"}, {"sha": "8406fee31c0bfcc2d6300d6dc62699ae2d3e38e1", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db2cbcb8bd61b4f19f61cc6319343e5ad894515/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=1db2cbcb8bd61b4f19f61cc6319343e5ad894515", "patch": "@@ -121,6 +121,20 @@ impl NavigationTarget {\n                     &*node,\n                 ));\n             }\n+            hir::ModuleDef::Const(s) => {\n+                let (file_id, node) = s.source(db);\n+                return Some(NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                ));\n+            }\n+            hir::ModuleDef::Static(s) => {\n+                let (file_id, node) = s.source(db);\n+                return Some(NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                ));\n+            }\n             hir::ModuleDef::Enum(e) => {\n                 let (file_id, node) = e.source(db);\n                 return Some(NavigationTarget::from_named(\n@@ -146,14 +160,6 @@ impl NavigationTarget {\n                 let (file_id, node) = f.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n-            Def::Static(f) => {\n-                let (file_id, node) = f.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n-            }\n-            Def::Const(f) => {\n-                let (file_id, node) = f.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n-            }\n             Def::Item => return None,\n         };\n         Some(res)"}]}