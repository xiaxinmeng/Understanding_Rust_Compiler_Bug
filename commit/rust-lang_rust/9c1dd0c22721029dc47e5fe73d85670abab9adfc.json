{"sha": "9c1dd0c22721029dc47e5fe73d85670abab9adfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMWRkMGMyMjcyMTAyOWRjNDdlNWZlNzNkODU2NzBhYmFiOWFkZmM=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-11T09:57:49Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-11T09:57:49Z"}, "message": "Fix remaining dogfood errors (internal lints)", "tree": {"sha": "e2fa5ed4904a03e60afd1c81ecaa16c382f6264c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2fa5ed4904a03e60afd1c81ecaa16c382f6264c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c1dd0c22721029dc47e5fe73d85670abab9adfc", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmBJ6Z0ACgkQHKDfKvWd\naKXYrA//TCNrQbGo9j8ZUR3CpGTX7S4EaN8aLgKN4dg/iK1slo7jNXZbEeGqcJI8\np2ohPXISILOExMfeIVNY0LYUjl9RnRPGQQSO6730CvDWB/IC7wHlWLZa55HRGiQv\nQiMqd+P7RTG5cnk+47H8MJL3OLmrVPUPxubaRRaWb/s4TMPS5zS/VmkVDQ6SipT4\n++jyKfrGRiwYDO23FBHnLbsn3gwFXfj54FjjX6tDcIU1bK3ykOoBwE8xRuSt3aQY\nu5osTXCTrlIPxLw5cTcB6ksH81oZ2pR4MXp3v1MBOWakIOTu10EqWp7D6wf2ajBl\nKQJ4aCcy3VR/ru2Ifli5k2i5B3jmLwR89kvn5BvT8mHMBEpsnlXfSkAIM9rbSF1Q\neblQGzofxuJAoJeYoanpeqsLo+AUWyU+RJLuQ2+wl7uq8FQYoorKZ2CJ+MI7/PUb\nO1OyIitXbxWp1j+C3HKeiQ70EWzYXsK9OwRL7DUhGrwiE9gTq6XhEfNeCnlxPhnY\nPY0Va7k089u45Ctb0fscHSwC/x8YUf9Zt/dpNUyC58qzbbps3mMXwPFkoFeeWvyO\nXp8JFCnFrft+Omr4LwCVMuPf8RfXOpTKI6yfZUYH4/b4nBhzOpwodSeaZiSx0zYT\nSOSTCPKWhWT9jadtm1Vy++tfcL9n7nFQG9ZJ9sZHSLXE7pYPv4Q=\n=b0X5\n-----END PGP SIGNATURE-----", "payload": "tree e2fa5ed4904a03e60afd1c81ecaa16c382f6264c\nparent ae6be4f36182722e7a3b021868ee913f1a97200e\nauthor flip1995 <philipp.krones@embecosm.com> 1615456669 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1615456669 +0100\n\nFix remaining dogfood errors (internal lints)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1dd0c22721029dc47e5fe73d85670abab9adfc", "html_url": "https://github.com/rust-lang/rust/commit/9c1dd0c22721029dc47e5fe73d85670abab9adfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c1dd0c22721029dc47e5fe73d85670abab9adfc/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6be4f36182722e7a3b021868ee913f1a97200e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6be4f36182722e7a3b021868ee913f1a97200e", "html_url": "https://github.com/rust-lang/rust/commit/ae6be4f36182722e7a3b021868ee913f1a97200e"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "9683e59a3962d2acac1613a92f1cd864ee155af3", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=9c1dd0c22721029dc47e5fe73d85670abab9adfc", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, TyS};\n-use rustc_span::symbol::sym;\n+use rustc_span::sym;\n \n use crate::utils::{is_type_diagnostic_item, match_type, paths};\n \n@@ -55,9 +55,9 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     is_iterable_array(ty, cx) ||\n     is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n     match_type(cx, ty, &paths::LINKED_LIST) ||\n-    is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) ||\n-    is_type_diagnostic_item(cx, ty, sym!(hashset_type)) ||\n-    is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+    is_type_diagnostic_item(cx, ty, sym::hashmap_type) ||\n+    is_type_diagnostic_item(cx, ty, sym::hashset_type) ||\n+    is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n     match_type(cx, ty, &paths::BINARY_HEAP) ||\n     match_type(cx, ty, &paths::BTREEMAP) ||\n     match_type(cx, ty, &paths::BTREESET)"}, {"sha": "6ee9b95a3b689035a544e65b1e1de2b7369ae98d", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=9c1dd0c22721029dc47e5fe73d85670abab9adfc", "patch": "@@ -4,6 +4,7 @@ use crate::utils::{is_type_diagnostic_item, match_type, multispan_sugg, paths, s\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n+use rustc_span::sym;\n \n /// Checks for the `FOR_KV_MAP` lint.\n pub(super) fn check<'tcx>(\n@@ -35,7 +36,7 @@ pub(super) fn check<'tcx>(\n                 _ => arg,\n             };\n \n-            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) || match_type(cx, ty, &paths::BTREEMAP) {\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP) {\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,"}, {"sha": "fad96c2d5c04cd822f675b54e33848d671b14744", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=9c1dd0c22721029dc47e5fe73d85670abab9adfc", "patch": "@@ -328,7 +328,7 @@ fn is_slice_like<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'_>) -> bool {\n         _ => false,\n     };\n \n-    is_slice || is_type_diagnostic_item(cx, ty, sym::vec_type) || is_type_diagnostic_item(cx, ty, sym!(vecdeque_type))\n+    is_slice || is_type_diagnostic_item(cx, ty, sym::vec_type) || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n }\n \n fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {"}, {"sha": "92560c806295ccc01e9397f6f244637a920d60c3", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=9c1dd0c22721029dc47e5fe73d85670abab9adfc", "patch": "@@ -29,9 +29,9 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n         then {\n             let ty = cx.typeck_results().node_type(ty.hir_id);\n             if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+                is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                 match_type(cx, ty, &paths::BTREEMAP) ||\n-                is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n+                is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n                 if method.ident.name == sym!(len) {\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_sugg(\n@@ -99,7 +99,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n                 if let ty = cx.typeck_results().node_type(ty.hir_id);\n                 if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                    is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+                    is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                     match_type(cx, ty, &paths::LINKED_LIST);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if iter_calls.len() == 1;"}, {"sha": "71d65a01d3e85131d08abf6105d7986b460565c4", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=9c1dd0c22721029dc47e5fe73d85670abab9adfc", "patch": "@@ -14,11 +14,11 @@ pub(crate) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'\n         \"slice\"\n     } else if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::vecdeque_type) {\n         \"VecDeque\"\n-    } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::hashset_type) {\n         \"HashSet\"\n-    } else if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n         \"HashMap\"\n     } else if match_type(cx, ty, &paths::BTREEMAP) {\n         \"BTreeMap\""}, {"sha": "8013c4e4fcbe417b369ea1de6be89036ad69e620", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1dd0c22721029dc47e5fe73d85670abab9adfc/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=9c1dd0c22721029dc47e5fe73d85670abab9adfc", "patch": "@@ -9,7 +9,7 @@\n //!  - or-fun-call\n //!  - option-if-let-else\n \n-use crate::{is_ctor_or_promotable_const_function, is_type_diagnostic_item, match_type, paths};\n+use crate::{is_ctor_or_promotable_const_function, is_type_diagnostic_item};\n use rustc_hir::def::{DefKind, Res};\n \n use rustc_hir::intravisit;\n@@ -100,7 +100,8 @@ fn identify_some_potentially_expensive_patterns<'tcx>(cx: &LateContext<'tcx>, ex\n                 ExprKind::Call(..) => !is_ctor_or_promotable_const_function(self.cx, expr),\n                 ExprKind::Index(obj, _) => {\n                     let ty = self.cx.typeck_results().expr_ty(obj);\n-                    is_type_diagnostic_item(self.cx, ty, sym::hashmap_type) || match_type(self.cx, ty, &paths::BTREEMAP)\n+                    is_type_diagnostic_item(self.cx, ty, sym::hashmap_type)\n+                        || is_type_diagnostic_item(self.cx, ty, sym::BTreeMap)\n                 },\n                 ExprKind::MethodCall(..) => true,\n                 _ => false,"}]}