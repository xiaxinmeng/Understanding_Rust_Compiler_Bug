{"sha": "12412749ab209447611c6d071e187d787c6feeb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDEyNzQ5YWIyMDk0NDc2MTFjNmQwNzFlMTg3ZDc4N2M2ZmVlYjI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-13T22:39:10Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-21T17:40:46Z"}, "message": "Add specific message when moving from upvars  in a non-FnOnce closure", "tree": {"sha": "9a0023a65300dfb124c33251d691a41495c9ee3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a0023a65300dfb124c33251d691a41495c9ee3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12412749ab209447611c6d071e187d787c6feeb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12412749ab209447611c6d071e187d787c6feeb2", "html_url": "https://github.com/rust-lang/rust/commit/12412749ab209447611c6d071e187d787c6feeb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12412749ab209447611c6d071e187d787c6feeb2/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341e5e3a6176737f62c02d9474fefbce31aeb85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/341e5e3a6176737f62c02d9474fefbce31aeb85f", "html_url": "https://github.com/rust-lang/rust/commit/341e5e3a6176737f62c02d9474fefbce31aeb85f"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "0b49260f88a4ed6b524faa49e73103641da9d5ab", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/12412749ab209447611c6d071e187d787c6feeb2/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12412749ab209447611c6d071e187d787c6feeb2/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=12412749ab209447611c6d071e187d787c6feeb2", "patch": "@@ -11,6 +11,7 @@\n use rustc::hir;\n use rustc::mir::*;\n use rustc::ty;\n+use rustc_data_structures::indexed_vec::Idx;\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n@@ -230,14 +231,43 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     IllegalMoveOriginKind::Static => {\n                         self.tcx.cannot_move_out_of(span, \"static item\", origin)\n                     }\n-                    IllegalMoveOriginKind::BorrowedContent { target_ty: ty } => {\n+                    IllegalMoveOriginKind::BorrowedContent { target_place: place } => {\n                         // Inspect the type of the content behind the\n                         // borrow to provide feedback about why this\n                         // was a move rather than a copy.\n+                        let ty = place.ty(self.mir, self.tcx).to_ty(self.tcx);\n                         match ty.sty {\n                             ty::TyArray(..) | ty::TySlice(..) => self\n                                 .tcx\n                                 .cannot_move_out_of_interior_noncopy(span, ty, None, origin),\n+                            ty::TyClosure(def_id, closure_substs)\n+                                if !self.mir.upvar_decls.is_empty()\n+                                    && {\n+                                        match place {\n+                                            Place::Projection(ref proj) => {\n+                                                proj.base == Place::Local(Local::new(1))\n+                                            }\n+                                            Place::Local(_) | Place::Static(_) => unreachable!(),\n+                                        }\n+                                    } =>\n+                            {\n+                                let closure_kind_ty =\n+                                    closure_substs.closure_kind_ty(def_id, self.tcx);\n+                                let closure_kind = closure_kind_ty.to_opt_closure_kind();\n+                                let place_description = match closure_kind {\n+                                    Some(ty::ClosureKind::Fn) => {\n+                                        \"captured variable in an `Fn` closure\"\n+                                    }\n+                                    Some(ty::ClosureKind::FnMut) => {\n+                                        \"captured variable in an `FnMut` closure\"\n+                                    }\n+                                    Some(ty::ClosureKind::FnOnce) => {\n+                                        bug!(\"closure kind does not match first argument type\")\n+                                    }\n+                                    None => bug!(\"closure kind not inferred by borrowck\"),\n+                                };\n+                                self.tcx.cannot_move_out_of(span, place_description, origin)\n+                            }\n                             _ => self\n                                 .tcx\n                                 .cannot_move_out_of(span, \"borrowed content\", origin),"}, {"sha": "48236e5fdd145e4fd1174f74dd2a7afcde66b5be", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12412749ab209447611c6d071e187d787c6feeb2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12412749ab209447611c6d071e187d787c6feeb2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=12412749ab209447611c6d071e187d787c6feeb2", "patch": "@@ -132,11 +132,11 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n         let mir = self.builder.mir;\n         let tcx = self.builder.tcx;\n         let place_ty = proj.base.ty(mir, tcx).to_ty(tcx);\n- match place_ty.sty {\n+        match place_ty.sty {\n             ty::TyRef(..) | ty::TyRawPtr(..) =>\n                 return Err(MoveError::cannot_move_out_of(\n                     self.loc,\n-                    BorrowedContent { target_ty: place.ty(mir, tcx).to_ty(tcx) })),\n+                    BorrowedContent { target_place: place.clone() })),\n             ty::TyAdt(adt, _) if adt.has_dtor(tcx) && !adt.is_box() =>\n                 return Err(MoveError::cannot_move_out_of(self.loc,\n                                                          InteriorOfTypeWithDestructor {"}, {"sha": "54609674a47d4fe06c30563b6b4c65acdeed2667", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12412749ab209447611c6d071e187d787c6feeb2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12412749ab209447611c6d071e187d787c6feeb2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=12412749ab209447611c6d071e187d787c6feeb2", "patch": "@@ -282,9 +282,9 @@ pub(crate) enum IllegalMoveOriginKind<'tcx> {\n \n     /// Illegal move due to attempt to move from behind a reference.\n     BorrowedContent {\n-        /// The content's type: if erroneous code was trying to move\n-        /// from `*x` where `x: &T`, then this will be `T`.\n-        target_ty: ty::Ty<'tcx>,\n+        /// The place the reference refers to: if erroneous code was trying to\n+        /// move from `(*x).f` this will be `*x`.\n+        target_place: Place<'tcx>,\n     },\n \n     /// Illegal move due to attempt to move from field of an ADT that"}, {"sha": "05a022a726cd977b8013c8bfb45b07db329944cd", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12412749ab209447611c6d071e187d787c6feeb2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12412749ab209447611c6d071e187d787c6feeb2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=12412749ab209447611c6d071e187d787c6feeb2", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:15:17\n    |\n LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n-   |                 ^ cannot move out of borrowed content\n+   |                 ^ cannot move out of captured variable in an `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "07a9f374b2c3935fd2368bd4bdee6ab7c960082d", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12412749ab209447611c6d071e187d787c6feeb2/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12412749ab209447611c6d071e187d787c6feeb2/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr?ref=12412749ab209447611c6d071e187d787c6feeb2", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n    |\n LL |         y.into_iter();\n-   |         ^ cannot move out of borrowed content\n+   |         ^ cannot move out of captured variable in an `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "6aaff7433830d7a0fb510212570d3ef5fa976e03", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/341e5e3a6176737f62c02d9474fefbce31aeb85f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/341e5e3a6176737f62c02d9474fefbce31aeb85f/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=341e5e3a6176737f62c02d9474fefbce31aeb85f", "patch": "@@ -1,16 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/E0161.rs:14:28\n-   |\n-LL |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n-   |                            ^^^^^^^^ cannot move out of borrowed content\n-\n-error[E0161]: cannot move a value of type str: the size of str cannot be statically determined\n-  --> $DIR/E0161.rs:14:28\n-   |\n-LL |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n-   |                            ^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0161, E0507.\n-For more information about an error, try `rustc --explain E0161`."}, {"sha": "eacd8b5e58047878ddf102835b172c4edb859809", "filename": "src/test/ui/issue-4335.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12412749ab209447611c6d071e187d787c6feeb2/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12412749ab209447611c6d071e187d787c6feeb2/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.nll.stderr?ref=12412749ab209447611c6d071e187d787c6feeb2", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/issue-4335.rs:16:20\n    |\n LL |     id(Box::new(|| *v))\n-   |                    ^^ cannot move out of borrowed content\n+   |                    ^^ cannot move out of captured variable in an `FnMut` closure\n \n error[E0597]: `v` does not live long enough\n   --> $DIR/issue-4335.rs:16:17"}, {"sha": "b3563f1b6203cfa0ef91b900b6f4ef3a261abcc7", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12412749ab209447611c6d071e187d787c6feeb2/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12412749ab209447611c6d071e187d787c6feeb2/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=12412749ab209447611c6d071e187d787c6feeb2", "patch": "@@ -28,11 +28,11 @@ LL | fn test4(f: &Test) {\n LL |     f.f.call_mut(())\n    |     ^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13\n    |\n LL |         foo(f);\n-   |             ^ cannot move out of borrowed content\n+   |             ^ cannot move out of captured variable in an `FnMut` closure\n \n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:65:16"}]}