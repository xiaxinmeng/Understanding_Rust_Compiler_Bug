{"sha": "0754c8461182252f5f86eca09845ece04b533696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NTRjODQ2MTE4MjI1MmY1Zjg2ZWNhMDk4NDVlY2UwNGI1MzM2OTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T18:33:38Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T18:35:54Z"}, "message": "Explain that `impl Trait` introduces an implicit type argument", "tree": {"sha": "7eb26a1e9bcae72da39325046cd98d422d1f9a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eb26a1e9bcae72da39325046cd98d422d1f9a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0754c8461182252f5f86eca09845ece04b533696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0754c8461182252f5f86eca09845ece04b533696", "html_url": "https://github.com/rust-lang/rust/commit/0754c8461182252f5f86eca09845ece04b533696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0754c8461182252f5f86eca09845ece04b533696/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28859472f71cea497dbea12523e69dc23daaff76", "url": "https://api.github.com/repos/rust-lang/rust/commits/28859472f71cea497dbea12523e69dc23daaff76", "html_url": "https://github.com/rust-lang/rust/commit/28859472f71cea497dbea12523e69dc23daaff76"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "fb83f877ccce241bc90d17f1540379d778945302", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0754c8461182252f5f86eca09845ece04b533696/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0754c8461182252f5f86eca09845ece04b533696/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0754c8461182252f5f86eca09845ece04b533696", "patch": "@@ -600,20 +600,37 @@ fn compare_number_of_generics<'a, 'tcx>(\n         if impl_count != trait_count {\n             err_occurred = true;\n \n-            let trait_spans = if let Some(trait_hir_id) = tcx.hir().as_local_hir_id(trait_.def_id) {\n+            let (\n+                trait_spans,\n+                impl_trait_spans,\n+            ) = if let Some(trait_hir_id) = tcx.hir().as_local_hir_id(trait_.def_id) {\n                 let trait_item = tcx.hir().expect_trait_item(trait_hir_id);\n-                Some(if trait_item.generics.params.is_empty() {\n-                    vec![trait_item.generics.span]\n+                if trait_item.generics.params.is_empty() {\n+                    (Some(vec![trait_item.generics.span]), vec![])\n                 } else {\n-                    trait_item.generics.params.iter().map(|p| p.span).collect::<Vec<Span>>()\n-                })\n+                    let arg_spans: Vec<Span> = trait_item.generics.params.iter()\n+                        .map(|p| p.span)\n+                        .collect();\n+                    let impl_trait_spans: Vec<Span> = trait_item.generics.params.iter()\n+                        .filter_map(|p| if !trait_item.generics.span.overlaps(p.span) {\n+                            Some(p.span)\n+                        } else {\n+                            None\n+                        }).collect();\n+                    (Some(arg_spans), impl_trait_spans)\n+                }\n             } else {\n-                trait_span.map(|s| vec![s])\n+                (trait_span.map(|s| vec![s]), vec![])\n             };\n \n             let impl_hir_id = tcx.hir().as_local_hir_id(impl_.def_id).unwrap();\n             let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n-            // let span = impl_item.generics.span;\n+            let impl_item_impl_trait_spans: Vec<Span> = impl_item.generics.params.iter()\n+                .filter_map(|p| if !impl_item.generics.span.overlaps(p.span) {\n+                    Some(p.span)\n+                } else {\n+                    None\n+                }).collect();\n             let spans = impl_item.generics.spans();\n             let span = spans.primary_span();\n \n@@ -661,6 +678,10 @@ fn compare_number_of_generics<'a, 'tcx>(\n                 ));\n             }\n \n+            for span in impl_trait_spans.iter().chain(impl_item_impl_trait_spans.iter()) {\n+                err.span_label(*span, \"`impl Trait` introduces an implicit type parameter\");\n+            }\n+\n             err.emit();\n         }\n     }"}, {"sha": "ecfa5c69e2f038ed19bbc6264e017d0d839c4739", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0754c8461182252f5f86eca09845ece04b533696/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0754c8461182252f5f86eca09845ece04b533696/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs?ref=0754c8461182252f5f86eca09845ece04b533696", "patch": "@@ -10,6 +10,7 @@ impl Foo for u32 {\n     fn foo(&self, t: impl Clone) {}\n //~^ ERROR method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n //~| NOTE found 1 type parameter\n+//~| NOTE `impl Trait` introduces an implicit type parameter\n }\n \n fn main() {}"}, {"sha": "30322f88cca42aa6020b8d84c665b06d86ad508e", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0754c8461182252f5f86eca09845ece04b533696/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0754c8461182252f5f86eca09845ece04b533696/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr?ref=0754c8461182252f5f86eca09845ece04b533696", "patch": "@@ -5,7 +5,10 @@ LL |     fn foo(&self, t: Self::T);\n    |           - expected 0 type parameters\n ...\n LL |     fn foo(&self, t: impl Clone) {}\n-   |                      ^^^^^^^^^^ found 1 type parameter\n+   |                      ^^^^^^^^^^\n+   |                      |\n+   |                      found 1 type parameter\n+   |                      `impl Trait` introduces an implicit type parameter\n \n error: aborting due to previous error\n "}]}