{"sha": "e2b953063d1c6302dd61a2284f8da8b770ddc11d", "node_id": "C_kwDOAAsO6NoAKGUyYjk1MzA2M2QxYzYzMDJkZDYxYTIyODRmOGRhOGI3NzBkZGMxMWQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-23T14:53:36Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-23T14:53:36Z"}, "message": "Don't leak the function that is called on drop", "tree": {"sha": "4173a9803823711b86aebeb501064cab8a429977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4173a9803823711b86aebeb501064cab8a429977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b953063d1c6302dd61a2284f8da8b770ddc11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b953063d1c6302dd61a2284f8da8b770ddc11d", "html_url": "https://github.com/rust-lang/rust/commit/e2b953063d1c6302dd61a2284f8da8b770ddc11d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b953063d1c6302dd61a2284f8da8b770ddc11d/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3d597b31c0f101a02c230798afa31a36bdacbc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d597b31c0f101a02c230798afa31a36bdacbc6", "html_url": "https://github.com/rust-lang/rust/commit/f3d597b31c0f101a02c230798afa31a36bdacbc6"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "859e384d8b529c5985c54a419e4b09558d180363", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=e2b953063d1c6302dd61a2284f8da8b770ddc11d", "patch": "@@ -102,21 +102,27 @@ pub mod unord;\n pub use ena::undo_log;\n pub use ena::unify;\n \n-pub struct OnDrop<F: Fn()>(pub F);\n+/// Returns a structure that calls `f` when dropped.\n+pub fn defer<F: FnOnce()>(f: F) -> OnDrop<F> {\n+    OnDrop(Some(f))\n+}\n+\n+pub struct OnDrop<F: FnOnce()>(Option<F>);\n \n-impl<F: Fn()> OnDrop<F> {\n-    /// Forgets the function which prevents it from running.\n-    /// Ensure that the function owns no memory, otherwise it will be leaked.\n+impl<F: FnOnce()> OnDrop<F> {\n+    /// Disables on-drop call.\n     #[inline]\n-    pub fn disable(self) {\n-        std::mem::forget(self);\n+    pub fn disable(mut self) {\n+        self.0.take();\n     }\n }\n \n-impl<F: Fn()> Drop for OnDrop<F> {\n+impl<F: FnOnce()> Drop for OnDrop<F> {\n     #[inline]\n     fn drop(&mut self) {\n-        (self.0)();\n+        if let Some(f) = self.0.take() {\n+            f();\n+        }\n     }\n }\n "}, {"sha": "520871a12be99d210ccaa28f3eb323e224e0ecfb", "filename": "compiler/rustc_data_structures/src/owned_slice/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs?ref=e2b953063d1c6302dd61a2284f8da8b770ddc11d", "patch": "@@ -7,8 +7,8 @@ use std::{\n };\n \n use crate::{\n+    defer,\n     owned_slice::{slice_owned, try_slice_owned, OwnedSlice},\n-    OnDrop,\n };\n \n #[test]\n@@ -66,7 +66,7 @@ fn boxed() {\n fn drop_drops() {\n     let flag = Arc::new(AtomicBool::new(false));\n     let flag_prime = Arc::clone(&flag);\n-    let d = OnDrop(move || flag_prime.store(true, atomic::Ordering::Relaxed));\n+    let d = defer(move || flag_prime.store(true, atomic::Ordering::Relaxed));\n \n     let slice = slice_owned(d, |_| &[]);\n "}, {"sha": "39d56897999d9be18d710686c46474f945545e0a", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=e2b953063d1c6302dd61a2284f8da8b770ddc11d", "patch": "@@ -3,9 +3,9 @@ use crate::util;\n use rustc_ast::token;\n use rustc_ast::{self as ast, LitKind, MetaItemKind};\n use rustc_codegen_ssa::traits::CodegenBackend;\n+use rustc_data_structures::defer;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_lint::LintStore;\n@@ -325,7 +325,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n \n             rustc_span::set_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n                 let r = {\n-                    let _sess_abort_error = OnDrop(|| {\n+                    let _sess_abort_error = defer(|| {\n                         compiler.sess.finish_diagnostics(registry);\n                     });\n "}, {"sha": "9de77b9fda11a20372c00507b7f3e5dfcdc95534", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=e2b953063d1c6302dd61a2284f8da8b770ddc11d", "patch": "@@ -78,7 +78,7 @@ where\n {\n     TLV.with(|tlv| {\n         let old = tlv.replace(erase(context));\n-        let _reset = rustc_data_structures::OnDrop(move || tlv.set(old));\n+        let _reset = rustc_data_structures::defer(move || tlv.set(old));\n         f()\n     })\n }"}, {"sha": "f45f7ca5da6dd9d9dd6330a9898dae9cca078ea8", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b953063d1c6302dd61a2284f8da8b770ddc11d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=e2b953063d1c6302dd61a2284f8da8b770ddc11d", "patch": "@@ -22,7 +22,7 @@ use {\n     rustc_data_structures::fx::FxHashSet,\n     rustc_data_structures::sync::Lock,\n     rustc_data_structures::sync::Lrc,\n-    rustc_data_structures::{jobserver, OnDrop},\n+    rustc_data_structures::{defer, jobserver},\n     rustc_span::DUMMY_SP,\n     std::iter,\n     std::process,\n@@ -530,7 +530,7 @@ fn remove_cycle<D: DepKind>(\n /// all active queries for cycles before finally resuming all the waiters at once.\n #[cfg(parallel_compiler)]\n pub fn deadlock<D: DepKind>(query_map: QueryMap<D>, registry: &rayon_core::Registry) {\n-    let on_panic = OnDrop(|| {\n+    let on_panic = defer(|| {\n         eprintln!(\"deadlock handler panicked, aborting process\");\n         process::abort();\n     });"}]}