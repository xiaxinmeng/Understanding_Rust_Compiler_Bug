{"sha": "176f4da77aedc487b24ea32d69ccf3a3eb069a90", "node_id": "C_kwDOAAsO6NoAKDE3NmY0ZGE3N2FlZGM0ODdiMjRlYTMyZDY5Y2NmM2EzZWIwNjlhOTA", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T07:17:18Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T07:17:18Z"}, "message": "simplify work", "tree": {"sha": "d012559de23237b2ffc3d4c4da22643c892f6038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d012559de23237b2ffc3d4c4da22643c892f6038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/176f4da77aedc487b24ea32d69ccf3a3eb069a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/176f4da77aedc487b24ea32d69ccf3a3eb069a90", "html_url": "https://github.com/rust-lang/rust/commit/176f4da77aedc487b24ea32d69ccf3a3eb069a90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/176f4da77aedc487b24ea32d69ccf3a3eb069a90/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e89fb6f736f28fdc090c30946871b2d8ea70cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e89fb6f736f28fdc090c30946871b2d8ea70cca", "html_url": "https://github.com/rust-lang/rust/commit/6e89fb6f736f28fdc090c30946871b2d8ea70cca"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "a23d77d2cc241705b9a36c98e450c317facab74b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/176f4da77aedc487b24ea32d69ccf3a3eb069a90/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176f4da77aedc487b24ea32d69ccf3a3eb069a90/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=176f4da77aedc487b24ea32d69ccf3a3eb069a90", "patch": "@@ -103,6 +103,7 @@ pub use {\n     hir_def::{\n         adt::StructKind,\n         attr::{Attr, Attrs, AttrsWithOwner, Documentation},\n+        data::TraitData,\n         find_path::PrefixKind,\n         import_map,\n         item_scope::ItemScope,"}, {"sha": "3ad3f2b5d4484086b098640e14ed1721911eed6e", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/176f4da77aedc487b24ea32d69ccf3a3eb069a90/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176f4da77aedc487b24ea32d69ccf3a3eb069a90/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=176f4da77aedc487b24ea32d69ccf3a3eb069a90", "patch": "@@ -436,11 +436,11 @@ fn source_file_to_file_symbols(_source_file: &SourceFile, _file_id: FileId) -> V\n     // todo: delete this.\n     vec![]\n }\n-enum SymbolCollectorWork {\n-    Module { module_id: ModuleId, parent: Option<DefWithBodyId> },\n-    Body { body_id: DefWithBodyId },\n-    Impl { impl_id: ImplId },\n-    Trait { trait_id: TraitId },\n+\n+/// Represents an outstanding module that the symbol collector must collect symbols from.\n+struct SymbolCollectorWork {\n+    module_id: ModuleId,\n+    parent: Option<DefWithBodyId>,\n }\n \n struct SymbolCollector<'a> {\n@@ -458,7 +458,9 @@ impl<'a> SymbolCollector<'a> {\n             db,\n             symbols: Default::default(),\n             container_name_stack: Default::default(),\n-            work: vec![SymbolCollectorWork::Module { module_id, parent: None }],\n+            // The initial work is the root module we're collecting, additional work will\n+            // be populated as we traverse the module's definitions.\n+            work: vec![SymbolCollectorWork { module_id, parent: None }],\n         };\n \n         while let Some(work) = symbol_collector.work.pop() {\n@@ -471,18 +473,8 @@ impl<'a> SymbolCollector<'a> {\n     fn do_work(&mut self, work: SymbolCollectorWork) {\n         self.db.unwind_if_cancelled();\n \n-        match work {\n-            SymbolCollectorWork::Module { module_id, parent } => {\n-                let parent_name = parent.and_then(|id| self.def_with_body_id_name(id));\n-                self.with_container_name(parent_name, |s| s.collect_from_module(module_id));\n-            }\n-            SymbolCollectorWork::Trait { trait_id } => {\n-                let trait_name = self.db.trait_data(trait_id).name.as_text();\n-                self.with_container_name(trait_name, |s| s.collect_from_trait(trait_id));\n-            }\n-            SymbolCollectorWork::Body { body_id } => self.collect_from_body(body_id),\n-            SymbolCollectorWork::Impl { impl_id } => self.collect_from_impl(impl_id),\n-        }\n+        let parent_name = work.parent.and_then(|id| self.def_with_body_id_name(id));\n+        self.with_container_name(parent_name, |s| s.collect_from_module(work.module_id));\n     }\n \n     fn collect_from_module(&mut self, module_id: ModuleId) {\n@@ -495,7 +487,7 @@ impl<'a> SymbolCollector<'a> {\n                 ModuleDefId::ModuleId(id) => self.push_module(id),\n                 ModuleDefId::FunctionId(id) => {\n                     self.push_decl_assoc(id, FileSymbolKind::Function);\n-                    self.work.push(SymbolCollectorWork::Body { body_id: id.into() });\n+                    self.collect_from_body(id);\n                 }\n                 ModuleDefId::AdtId(AdtId::StructId(id)) => {\n                     self.push_decl(id, FileSymbolKind::Struct)\n@@ -504,15 +496,15 @@ impl<'a> SymbolCollector<'a> {\n                 ModuleDefId::AdtId(AdtId::UnionId(id)) => self.push_decl(id, FileSymbolKind::Union),\n                 ModuleDefId::ConstId(id) => {\n                     self.push_decl_assoc(id, FileSymbolKind::Const);\n-                    self.work.push(SymbolCollectorWork::Body { body_id: id.into() })\n+                    self.collect_from_body(id);\n                 }\n                 ModuleDefId::StaticId(id) => {\n                     self.push_decl(id, FileSymbolKind::Static);\n-                    self.work.push(SymbolCollectorWork::Body { body_id: id.into() })\n+                    self.collect_from_body(id);\n                 }\n                 ModuleDefId::TraitId(id) => {\n                     self.push_decl(id, FileSymbolKind::Trait);\n-                    self.work.push(SymbolCollectorWork::Trait { trait_id: id })\n+                    self.collect_from_trait(id);\n                 }\n                 ModuleDefId::TypeAliasId(id) => {\n                     self.push_decl_assoc(id, FileSymbolKind::TypeAlias);\n@@ -524,25 +516,26 @@ impl<'a> SymbolCollector<'a> {\n         }\n \n         for impl_id in scope.impls() {\n-            self.work.push(SymbolCollectorWork::Impl { impl_id });\n+            self.collect_from_impl(impl_id);\n         }\n \n         for const_id in scope.unnamed_consts() {\n-            self.work.push(SymbolCollectorWork::Body { body_id: const_id.into() })\n+            self.collect_from_body(const_id);\n         }\n \n         for macro_def_id in scope.macro_declarations() {\n             self.push_decl_macro(macro_def_id.into());\n         }\n     }\n \n-    fn collect_from_body(&mut self, body_id: DefWithBodyId) {\n+    fn collect_from_body(&mut self, body_id: impl Into<DefWithBodyId>) {\n+        let body_id = body_id.into();\n         let body = self.db.body(body_id);\n \n         // Descend into the blocks and enqueue collection of all modules within.\n         for (_, def_map) in body.blocks(self.db.upcast()) {\n             for (id, _) in def_map.modules() {\n-                self.work.push(SymbolCollectorWork::Module {\n+                self.work.push(SymbolCollectorWork {\n                     module_id: def_map.module_id(id),\n                     parent: Some(body_id),\n                 });\n@@ -559,9 +552,11 @@ impl<'a> SymbolCollector<'a> {\n \n     fn collect_from_trait(&mut self, trait_id: TraitId) {\n         let trait_data = self.db.trait_data(trait_id);\n-        for &(_, assoc_item_id) in &trait_data.items {\n-            self.push_assoc_item(assoc_item_id);\n-        }\n+        self.with_container_name(trait_data.name.as_text(), |s| {\n+            for &(_, assoc_item_id) in &trait_data.items {\n+                s.push_assoc_item(assoc_item_id);\n+            }\n+        });\n     }\n \n     fn with_container_name(&mut self, container_name: Option<SmolStr>, f: impl FnOnce(&mut Self)) {"}]}