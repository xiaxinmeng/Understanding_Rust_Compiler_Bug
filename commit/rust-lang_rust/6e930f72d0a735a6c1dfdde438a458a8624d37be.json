{"sha": "6e930f72d0a735a6c1dfdde438a458a8624d37be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOTMwZjcyZDBhNzM1YTZjMWRmZGRlNDM4YTQ1OGE4NjI0ZDM3YmU=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T12:13:06Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T20:50:18Z"}, "message": "Accept `LocalDefId` as key for `mir_borrowck` query", "tree": {"sha": "5d01b81ee24c5a49f169ee50b31b82945b16c79f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d01b81ee24c5a49f169ee50b31b82945b16c79f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e930f72d0a735a6c1dfdde438a458a8624d37be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e930f72d0a735a6c1dfdde438a458a8624d37be", "html_url": "https://github.com/rust-lang/rust/commit/6e930f72d0a735a6c1dfdde438a458a8624d37be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e930f72d0a735a6c1dfdde438a458a8624d37be/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82823c02290f111bf8cde5a51da6313b15be8871", "url": "https://api.github.com/repos/rust-lang/rust/commits/82823c02290f111bf8cde5a51da6313b15be8871", "html_url": "https://github.com/rust-lang/rust/commit/82823c02290f111bf8cde5a51da6313b15be8871"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "9a8a05713c8d45319ea786b3058a050727b9b555", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=6e930f72d0a735a6c1dfdde438a458a8624d37be", "patch": "@@ -835,7 +835,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     });\n \n     sess.time(\"MIR_borrow_checking\", || {\n-        tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id.to_def_id()));\n+        tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n     });\n \n     sess.time(\"dumping_chalk_like_clauses\", || {"}, {"sha": "23a83a7a7e6bedd958e63af16bd7db45c39258be", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=6e930f72d0a735a6c1dfdde438a458a8624d37be", "patch": "@@ -494,12 +494,11 @@ rustc_queries! {\n     BorrowChecking {\n         /// Borrow-checks the function body. If this is a closure, returns\n         /// additional requirements that the closure's creator must verify.\n-        query mir_borrowck(key: DefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n-            desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key) }\n+        query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n+            desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if(tcx, opt_result) {\n-                key.is_local()\n-                    && (tcx.is_closure(key)\n-                        || opt_result.map_or(false, |r| !r.concrete_opaque_types.is_empty()))\n+                tcx.is_closure(key.to_def_id())\n+                    || opt_result.map_or(false, |r| !r.concrete_opaque_types.is_empty())\n             }\n         }\n     }"}, {"sha": "21f988c9f3bc43c38232e2469ea6fdf3685775af", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6e930f72d0a735a6c1dfdde438a458a8624d37be", "patch": "@@ -92,14 +92,14 @@ pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers { mir_borrowck, ..*providers };\n }\n \n-fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> &BorrowCheckResult<'_> {\n-    let (input_body, promoted) = tcx.mir_validated(def_id);\n-    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n+fn mir_borrowck(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &BorrowCheckResult<'_> {\n+    let (input_body, promoted) = tcx.mir_validated(def_id.to_def_id());\n+    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id.to_def_id()));\n \n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n         let promoted: &IndexVec<_, _> = &promoted.borrow();\n-        do_mir_borrowck(&infcx, input_body, promoted, def_id.expect_local())\n+        do_mir_borrowck(&infcx, input_body, promoted, def_id)\n     });\n     debug!(\"mir_borrowck done\");\n \n@@ -1268,7 +1268,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 match **aggregate_kind {\n                     AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {\n                         let BorrowCheckResult { used_mut_upvars, .. } =\n-                            self.infcx.tcx.mir_borrowck(def_id);\n+                            self.infcx.tcx.mir_borrowck(def_id.expect_local());\n                         debug!(\"{:?} used_mut_upvars={:?}\", def_id, used_mut_upvars);\n                         for field in used_mut_upvars {\n                             self.propagate_closure_used_mut_upvar(&operands[field.index()]);"}, {"sha": "d60ab2b81fd4d7b940d22866d455a721183e54cd", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=6e930f72d0a735a6c1dfdde438a458a8624d37be", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives::env::RegionBoundPairs;\n@@ -2569,7 +2569,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // clauses on the struct.\n             AggregateKind::Closure(def_id, substs)\n             | AggregateKind::Generator(def_id, substs, _) => {\n-                self.prove_closure_bounds(tcx, *def_id, substs, location)\n+                self.prove_closure_bounds(tcx, def_id.expect_local(), substs, location)\n             }\n \n             AggregateKind::Array(_) | AggregateKind::Tuple => ty::InstantiatedPredicates::empty(),\n@@ -2584,14 +2584,18 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn prove_closure_bounds(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n-        def_id: DefId,\n+        def_id: LocalDefId,\n         substs: SubstsRef<'tcx>,\n         location: Location,\n     ) -> ty::InstantiatedPredicates<'tcx> {\n         if let Some(ref closure_region_requirements) = tcx.mir_borrowck(def_id).closure_requirements\n         {\n             let closure_constraints = QueryRegionConstraints {\n-                outlives: closure_region_requirements.apply_requirements(tcx, def_id, substs),\n+                outlives: closure_region_requirements.apply_requirements(\n+                    tcx,\n+                    def_id.to_def_id(),\n+                    substs,\n+                ),\n \n                 // Presently, closures never propagate member\n                 // constraints to their parents -- they are enforced"}, {"sha": "17fbbbfdab761bfde8ba4d0d9367b43e5cb4781f", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=6e930f72d0a735a6c1dfdde438a458a8624d37be", "patch": "@@ -371,7 +371,7 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n \n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n-    tcx.ensure().mir_borrowck(def_id);\n+    tcx.ensure().mir_borrowck(def_id.expect_local());\n \n     let (body, _) = tcx.mir_validated(def_id);\n     let mut body = body.steal();\n@@ -387,7 +387,7 @@ fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, Body<'_>>\n         return tcx.intern_promoted(IndexVec::new());\n     }\n \n-    tcx.ensure().mir_borrowck(def_id);\n+    tcx.ensure().mir_borrowck(def_id.expect_local());\n     let (_, promoted) = tcx.mir_validated(def_id);\n     let mut promoted = promoted.steal();\n "}, {"sha": "cf0e3f9cdf592008c8b1ee69b1ec1f2bd72a43db", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e930f72d0a735a6c1dfdde438a458a8624d37be/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=6e930f72d0a735a6c1dfdde438a458a8624d37be", "patch": "@@ -114,7 +114,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: Some(owner), origin, .. }) => {\n                     let concrete_types = match origin {\n                         OpaqueTyOrigin::FnReturn | OpaqueTyOrigin::AsyncFn => {\n-                            &tcx.mir_borrowck(owner).concrete_opaque_types\n+                            &tcx.mir_borrowck(owner.expect_local()).concrete_opaque_types\n                         }\n                         OpaqueTyOrigin::Misc => {\n                             // We shouldn't leak borrowck results through impl trait in bindings."}]}