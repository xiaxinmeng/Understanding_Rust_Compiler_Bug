{"sha": "f305b200df5af87608677f30c272f47cf2210623", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMDViMjAwZGY1YWY4NzYwODY3N2YzMGMyNzJmNDdjZjIyMTA2MjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T23:50:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-18T23:50:54Z"}, "message": "Rollup merge of #74021 - 1011X:master, r=dtolnay\n\nimpl Index<RangeFrom> for CStr\n\nThis change implements (partial) slicing for `CStr`.\n\nSince a `CStr` must end in a null byte, it's not possible to trim from the right and still have a valid `CStr`. But, it *is* possible to trim from the left. This lets us be a bit more flexible and treat them more like strings.\n\n```rust\nlet string = CStr::from_bytes_with_nul(b\"Hello World!\\0\");\nlet result = CStr::from_bytes_with_nul(b\"World!\\0\");\nassert_eq!(&string[6..], result);\n```", "tree": {"sha": "c476911c7e60d8128ebd76eb49651c2c875000a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c476911c7e60d8128ebd76eb49651c2c875000a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f305b200df5af87608677f30c272f47cf2210623", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfE4reCRBK7hj4Ov3rIwAAdHIIAA97USk4isQxVcyTiRHCupZh\npk4b/L5EV5Qeh9+H6Hn/GLn6kwvwCcpnhoj+RH4BXtqsV5Yi6B/2VLSRldsntNHs\nyokbEYu321THZ9ktHVZ8p6lkXg+jjVCbxt4sv9Ime3MF0+SPtJVAQ3c46u0eXxB/\nxMu8JlqRcnD9GY1lKEBPDgt54HyUqNl2DbDkBXo3AUa85YLY6LTJxTobk8MMiA4Q\n9I1+FcSKuG8vSNDUngHyBpp219LntvJ8CvGFPZz7BmX3XTnZpI5xPubWBw11+E2N\n53WvtJiwmCrItjwIkZFhfIQW0Fyk3UOygKrB21Mxohiw7CzPisK5gI/RPBYXq9c=\n=Yh6G\n-----END PGP SIGNATURE-----\n", "payload": "tree c476911c7e60d8128ebd76eb49651c2c875000a0\nparent a6266e2d606802b8e9e326dee6410f914959e546\nparent 30b8835d1d0f531aa1d5875cde5ffae347177fd3\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595116254 -0700\ncommitter GitHub <noreply@github.com> 1595116254 -0700\n\nRollup merge of #74021 - 1011X:master, r=dtolnay\n\nimpl Index<RangeFrom> for CStr\n\nThis change implements (partial) slicing for `CStr`.\n\nSince a `CStr` must end in a null byte, it's not possible to trim from the right and still have a valid `CStr`. But, it *is* possible to trim from the left. This lets us be a bit more flexible and treat them more like strings.\n\n```rust\nlet string = CStr::from_bytes_with_nul(b\"Hello World!\\0\");\nlet result = CStr::from_bytes_with_nul(b\"World!\\0\");\nassert_eq!(&string[6..], result);\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f305b200df5af87608677f30c272f47cf2210623", "html_url": "https://github.com/rust-lang/rust/commit/f305b200df5af87608677f30c272f47cf2210623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f305b200df5af87608677f30c272f47cf2210623/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6266e2d606802b8e9e326dee6410f914959e546", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6266e2d606802b8e9e326dee6410f914959e546", "html_url": "https://github.com/rust-lang/rust/commit/a6266e2d606802b8e9e326dee6410f914959e546"}, {"sha": "30b8835d1d0f531aa1d5875cde5ffae347177fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b8835d1d0f531aa1d5875cde5ffae347177fd3", "html_url": "https://github.com/rust-lang/rust/commit/30b8835d1d0f531aa1d5875cde5ffae347177fd3"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "da25a0ede729d1fd3c66b1819fda6e91d17aa3bb", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f305b200df5af87608677f30c272f47cf2210623/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f305b200df5af87608677f30c272f47cf2210623/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=f305b200df5af87608677f30c272f47cf2210623", "patch": "@@ -1551,6 +1551,27 @@ impl ops::Index<ops::RangeFull> for CString {\n     }\n }\n \n+#[stable(feature = \"cstr_range_from\", since = \"1.47.0\")]\n+impl ops::Index<ops::RangeFrom<usize>> for CStr {\n+    type Output = CStr;\n+\n+    fn index(&self, index: ops::RangeFrom<usize>) -> &CStr {\n+        let bytes = self.to_bytes_with_nul();\n+        // we need to manually check the starting index to account for the null\n+        // byte, since otherwise we could get an empty string that doesn't end\n+        // in a null.\n+        if index.start < bytes.len() {\n+            unsafe { CStr::from_bytes_with_nul_unchecked(&bytes[index.start..]) }\n+        } else {\n+            panic!(\n+                \"index out of bounds: the len is {} but the index is {}\",\n+                bytes.len(),\n+                index.start\n+            );\n+        }\n+    }\n+}\n+\n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n impl AsRef<CStr> for CStr {\n     #[inline]\n@@ -1747,4 +1768,21 @@ mod tests {\n \n         assert_eq!(CSTR.to_str().unwrap(), \"Hello, world!\");\n     }\n+\n+    #[test]\n+    fn cstr_index_from() {\n+        let original = b\"Hello, world!\\0\";\n+        let cstr = CStr::from_bytes_with_nul(original).unwrap();\n+        let result = CStr::from_bytes_with_nul(&original[7..]).unwrap();\n+\n+        assert_eq!(&cstr[7..], result);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn cstr_index_from_empty() {\n+        let original = b\"Hello, world!\\0\";\n+        let cstr = CStr::from_bytes_with_nul(original).unwrap();\n+        let _ = &cstr[original.len()..];\n+    }\n }"}]}