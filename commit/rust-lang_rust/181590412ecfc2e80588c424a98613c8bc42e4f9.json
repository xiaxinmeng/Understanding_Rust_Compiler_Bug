{"sha": "181590412ecfc2e80588c424a98613c8bc42e4f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTU5MDQxMmVjZmMyZTgwNTg4YzQyNGE5ODYxM2M4YmM0MmU0Zjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-27T09:16:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-27T09:16:24Z"}, "message": "add more counts", "tree": {"sha": "a74131b92801f2b0126535069628af91dd238f08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74131b92801f2b0126535069628af91dd238f08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/181590412ecfc2e80588c424a98613c8bc42e4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/181590412ecfc2e80588c424a98613c8bc42e4f9", "html_url": "https://github.com/rust-lang/rust/commit/181590412ecfc2e80588c424a98613c8bc42e4f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/181590412ecfc2e80588c424a98613c8bc42e4f9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "html_url": "https://github.com/rust-lang/rust/commit/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "b9ecf22fa5f20236bead91e87a2583defcdfa614", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/181590412ecfc2e80588c424a98613c8bc42e4f9/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181590412ecfc2e80588c424a98613c8bc42e4f9/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=181590412ecfc2e80588c424a98613c8bc42e4f9", "patch": "@@ -17,6 +17,7 @@ use hir_expand::{\n     HirFileId, InFile, MacroDefId,\n };\n use la_arena::{Arena, ArenaMap};\n+use profile::Count;\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, AstPtr};\n use test_utils::mark;\n@@ -237,6 +238,7 @@ pub struct Body {\n     /// The `ExprId` of the actual body expression.\n     pub body_expr: ExprId,\n     pub item_scope: ItemScope,\n+    _c: Count<Self>,\n }\n \n pub type ExprPtr = AstPtr<ast::Expr>;"}, {"sha": "209965fcaf74116de7d5e97e0246c8fdbc6ff20e", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/181590412ecfc2e80588c424a98613c8bc42e4f9/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181590412ecfc2e80588c424a98613c8bc42e4f9/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=181590412ecfc2e80588c424a98613c8bc42e4f9", "patch": "@@ -10,6 +10,7 @@ use hir_expand::{\n     ExpandError, HirFileId, MacroDefId, MacroDefKind,\n };\n use la_arena::Arena;\n+use profile::Count;\n use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{\n@@ -77,6 +78,7 @@ pub(super) fn lower(\n             params: Vec::new(),\n             body_expr: dummy_expr_id(),\n             item_scope: Default::default(),\n+            _c: Count::new(),\n         },\n         item_trees: {\n             let mut map = FxHashMap::default();"}, {"sha": "16cf299076f295601fe704cdd015d498ecfd91ab", "filename": "crates/hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/181590412ecfc2e80588c424a98613c8bc42e4f9/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181590412ecfc2e80588c424a98613c8bc42e4f9/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs?ref=181590412ecfc2e80588c424a98613c8bc42e4f9", "patch": "@@ -13,6 +13,7 @@ use std::{\n };\n \n use la_arena::{Arena, Idx};\n+use profile::Count;\n use syntax::{ast, match_ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file.\n@@ -62,12 +63,13 @@ type ErasedFileAstId = Idx<SyntaxNodePtr>;\n #[derive(Debug, PartialEq, Eq, Default)]\n pub struct AstIdMap {\n     arena: Arena<SyntaxNodePtr>,\n+    _c: Count<Self>,\n }\n \n impl AstIdMap {\n     pub(crate) fn from_source(node: &SyntaxNode) -> AstIdMap {\n         assert!(node.parent().is_none());\n-        let mut res = AstIdMap { arena: Arena::default() };\n+        let mut res = AstIdMap::default();\n         // By walking the tree in breadth-first order we make sure that parents\n         // get lower ids then children. That is, adding a new child does not\n         // change parent's id. This means that, say, adding a new function to a"}]}