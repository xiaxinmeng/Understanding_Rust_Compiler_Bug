{"sha": "127144bf38f5bf81112bb304efb95a80d54bcaac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNzE0NGJmMzhmNWJmODExMTJiYjMwNGVmYjk1YTgwZDU0YmNhYWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T21:48:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T21:50:46Z"}, "message": "rustc: Implement private fields for max/min classes", "tree": {"sha": "725c4184d1820dc893f777e33880a76027dafe87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725c4184d1820dc893f777e33880a76027dafe87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127144bf38f5bf81112bb304efb95a80d54bcaac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127144bf38f5bf81112bb304efb95a80d54bcaac", "html_url": "https://github.com/rust-lang/rust/commit/127144bf38f5bf81112bb304efb95a80d54bcaac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127144bf38f5bf81112bb304efb95a80d54bcaac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8182497359237cf2d842bc614eae2bf24bc2517a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8182497359237cf2d842bc614eae2bf24bc2517a", "html_url": "https://github.com/rust-lang/rust/commit/8182497359237cf2d842bc614eae2bf24bc2517a"}], "stats": {"total": 136, "additions": 98, "deletions": 38}, "files": [{"sha": "9c6a168d10f046a8d3d1849a918642f55d703fd3", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=127144bf38f5bf81112bb304efb95a80d54bcaac", "patch": "@@ -221,6 +221,9 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n \n     if upto == cu_typeck { return {crate: crate, tcx: Some(ty_cx)}; }\n \n+    time(time_passes, ~\"privacy checking\", ||\n+        middle::privacy::check_crate(ty_cx, crate));\n+\n     time(time_passes, ~\"loop checking\", ||\n         middle::check_loop::check_crate(ty_cx, crate));\n "}, {"sha": "83c341c609acdab9b9547755b8059c381b9608e6", "filename": "src/rustc/middle/privacy.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fprivacy.rs?ref=127144bf38f5bf81112bb304efb95a80d54bcaac", "patch": "@@ -0,0 +1,75 @@\n+// A pass that checks to make sure private fields and methods aren't used\n+// outside their scopes.\n+\n+use /*mod*/ syntax::ast;\n+use /*mod*/ syntax::visit;\n+use syntax::ast::{expr_field, ident, item_class, local_crate, node_id};\n+use syntax::ast::{private};\n+use ty::ty_class;\n+\n+use core::util::ignore;\n+use dvec::DVec;\n+use send_map::linear::LinearMap;\n+\n+fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n+    let privileged_structs = @DVec();\n+\n+    let add_privileged_structs = |items: &[@ast::item]| {\n+        let mut count = 0;\n+        for items.each |item| {\n+            match item.node {\n+                item_class(*) => {\n+                    privileged_structs.push(item.id);\n+                    count += 1;\n+                }\n+                _ => {}\n+            }\n+        }\n+        count\n+    };\n+\n+    let visitor = visit::mk_vt(@{\n+        visit_mod: |the_module, span, node_id, env, visitor| {\n+            let n_added = add_privileged_structs(the_module.items);\n+\n+            visit::visit_mod(the_module, span, node_id, env, visitor);\n+\n+            for n_added.times {\n+                ignore(privileged_structs.pop());\n+            }\n+        },\n+        visit_expr: |expr, env, visitor| {\n+            match expr.node {\n+                expr_field(base, ident, _) => {\n+                    match ty::get(ty::expr_ty(tcx, base)).struct {\n+                        ty_class(id, _)\n+                        if id.crate != local_crate ||\n+                           !privileged_structs.contains(id.node) => {\n+                            let fields = ty::lookup_class_fields(tcx, id);\n+                            for fields.each |field| {\n+                                if field.ident != ident { again; }\n+                                if field.vis == private {\n+                                    tcx.sess.span_err(expr.span,\n+                                                      fmt!(\"field `%s` is \\\n+                                                            private\",\n+                                                           *tcx.sess\n+                                                               .parse_sess\n+                                                               .interner\n+                                                               .get(ident)));\n+                                }\n+                                break;\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                _ => {}\n+            }\n+\n+            visit::visit_expr(expr, env, visitor);\n+        }\n+        with *visit::default_visitor()\n+    });\n+    visit::visit_crate(*crate, (), visitor);\n+}\n+"}, {"sha": "a3b9f1d05ac253242a3a6b650d1df1599a2ebd96", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=127144bf38f5bf81112bb304efb95a80d54bcaac", "patch": "@@ -3160,10 +3160,6 @@ fn lookup_class_field(cx: ctxt, parent: ast::def_id, field_id: ast::def_id)\n     }\n }\n \n-fn lookup_public_fields(cx: ctxt, did: ast::def_id) -> ~[field_ty] {\n-    vec::filter(lookup_class_fields(cx, did), is_public)\n-}\n-\n pure fn is_public(f: field_ty) -> bool {\n     // XXX: This is wrong.\n     match f.vis {"}, {"sha": "870120547794cc5d55ee4114a762f9702c1671bb", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=127144bf38f5bf81112bb304efb95a80d54bcaac", "patch": "@@ -51,9 +51,8 @@ use util::common::may_break;\n use syntax::codemap::span;\n use pat_util::{pat_is_variant, pat_id_map};\n use middle::ty;\n-use middle::ty::{arg, field, node_type_table, mk_nil,\n-                    ty_param_bounds_and_ty, lookup_public_fields,\n-                    vstore_uniq};\n+use middle::ty::{arg, field, node_type_table, mk_nil, ty_param_bounds_and_ty};\n+use middle::ty::{vstore_uniq};\n use std::smallintmap;\n use std::map;\n use std::map::{hashmap, int_hash};"}, {"sha": "ad0eb81c8260676fb56391b47c6b32f06a29137a", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=127144bf38f5bf81112bb304efb95a80d54bcaac", "patch": "@@ -1317,18 +1317,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n               // (1) verify that the class id actually has a field called\n               // field\n               debug!(\"class named %s\", ty_to_str(tcx, base_t));\n-              /*\n-                check whether this is a self-reference or not, which\n-                determines whether we look at all fields or only public\n-                ones\n-               */\n-              let cls_items = if self_ref(fcx, base.id) {\n-                  // base expr is \"self\" -- consider all fields\n-                  ty::lookup_class_fields(tcx, base_id)\n-              }\n-              else {\n-                  lookup_public_fields(tcx, base_id)\n-              };\n+              let cls_items = ty::lookup_class_fields(tcx, base_id);\n               match lookup_field_ty(tcx, base_id, cls_items, field, &substs) {\n                  Some(field_ty) => {\n                     // (2) look up what field's type is, and return it\n@@ -1370,8 +1359,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                     let msg =\n                         fmt!(\n                             \"attempted access of field `%s` on type `%s`, \\\n-                             but no public field or method with that name \\\n-                             was found\",\n+                             but no field or method with that name was found\",\n                             tcx.sess.str_of(field),\n                             fcx.infcx().ty_to_str(t_err));\n                     tcx.sess.span_err(expr.span, msg);"}, {"sha": "6890ec0acdc12a323d1dc4b039af8daa8d9f20d3", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=127144bf38f5bf81112bb304efb95a80d54bcaac", "patch": "@@ -102,6 +102,7 @@ mod middle {\n     mod const_eval;\n     mod astencode;\n     mod lang_items;\n+    mod privacy;\n }\n \n mod front {"}, {"sha": "ae0ae7c4a574236a6d9cbf98c3e002adadf21e6b", "filename": "src/test/compile-fail/private-class-field.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8182497359237cf2d842bc614eae2bf24bc2517a/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8182497359237cf2d842bc614eae2bf24bc2517a/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-class-field.rs?ref=8182497359237cf2d842bc614eae2bf24bc2517a", "patch": "@@ -1,15 +0,0 @@\n-// error-pattern:no public field or method with that name\n-struct cat {\n-  priv {\n-    let mut meows : uint;\n-  }\n-\n-  let how_hungry : int;\n-\n-  new(in_x : uint, in_y : int) { self.meows = in_x; self.how_hungry = in_y; }\n-}\n-\n-fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  assert (nyan.meows == 52u);\n-}"}, {"sha": "c40b04004b423748a4c5a4965052b77c448555c5", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=127144bf38f5bf81112bb304efb95a80d54bcaac", "patch": "@@ -1,10 +1,9 @@\n-// error-pattern:no public field or method with that name\n // xfail-fast\n // aux-build:cci_class.rs\n use cci_class;\n import cci_class::kitties::*;\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  assert (nyan.meows == 52u);\n+  assert (nyan.meows == 52u);   //~ ERROR field `meows` is private\n }", "previous_filename": "src/test/compile-fail/private-class-field-cross-crate.rs"}, {"sha": "becef52fa6179b3c97fd1c74850e1232cd96d27a", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127144bf38f5bf81112bb304efb95a80d54bcaac/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=127144bf38f5bf81112bb304efb95a80d54bcaac", "patch": "@@ -0,0 +1,14 @@\n+mod cat {\n+    struct Cat {\n+        priv meows: uint;\n+    }\n+\n+    fn new_cat() -> Cat {\n+        Cat { meows: 52 }\n+    }\n+}\n+\n+fn main() {\n+    let nyan = cat::new_cat();\n+    assert nyan.meows == 52;    //~ ERROR field `meows` is private\n+}"}]}