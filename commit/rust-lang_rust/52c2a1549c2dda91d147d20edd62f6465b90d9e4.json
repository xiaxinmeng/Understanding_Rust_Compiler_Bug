{"sha": "52c2a1549c2dda91d147d20edd62f6465b90d9e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzJhMTU0OWMyZGRhOTFkMTQ3ZDIwZWRkNjJmNjQ2NWI5MGQ5ZTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-13T22:53:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-13T22:53:38Z"}, "message": "Fetch typarams from the outermost item frame, when inside an iter-block. One less crash in rustc.", "tree": {"sha": "00e93fcc2a7b2c348c2beaec5c85391943b6c089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00e93fcc2a7b2c348c2beaec5c85391943b6c089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c2a1549c2dda91d147d20edd62f6465b90d9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c2a1549c2dda91d147d20edd62f6465b90d9e4", "html_url": "https://github.com/rust-lang/rust/commit/52c2a1549c2dda91d147d20edd62f6465b90d9e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c2a1549c2dda91d147d20edd62f6465b90d9e4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e19fc969ed553934d51b565d5d9ad010cf3b569", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e19fc969ed553934d51b565d5d9ad010cf3b569", "html_url": "https://github.com/rust-lang/rust/commit/1e19fc969ed553934d51b565d5d9ad010cf3b569"}], "stats": {"total": 105, "additions": 75, "deletions": 30}, "files": [{"sha": "12956baacdd28a958dc8afad8dcfd653b808961a", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52c2a1549c2dda91d147d20edd62f6465b90d9e4/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/52c2a1549c2dda91d147d20edd62f6465b90d9e4/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=52c2a1549c2dda91d147d20edd62f6465b90d9e4", "patch": "@@ -481,6 +481,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       generic-exterior-box.rs \\\n                       generic-fn-infer.rs \\\n                       generic-fn.rs \\\n+                      generic-iter-frame.rs \\\n                       generic-obj-with-derived-type.rs \\\n                       generic-obj.rs \\\n                       generic-recursive-tag.rs \\"}, {"sha": "8ff439e8b65be0c0eecf52cb410ae927e4df5d23", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52c2a1549c2dda91d147d20edd62f6465b90d9e4/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/52c2a1549c2dda91d147d20edd62f6465b90d9e4/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=52c2a1549c2dda91d147d20edd62f6465b90d9e4", "patch": "@@ -495,12 +495,18 @@ let get_callsz (cx:ctxt) (id:node_id) : size =\n   else bugi cx id \"missing callsz\"\n ;;\n \n+let get_loop_outermost_fn (cx:ctxt) (id:node_id) : node_id =\n+  match Hashtbl.find cx.ctxt_all_defns id with\n+      DEFN_loop_body fnid -> fnid\n+    | _ -> bugi cx id \"get_loop_outermost_fn on non-loop\"\n+;;\n+\n let rec n_item_ty_params (cx:ctxt) (id:node_id) : int =\n   match Hashtbl.find cx.ctxt_all_defns id with\n       DEFN_item i -> Array.length i.Ast.decl_params\n     | DEFN_obj_fn (oid,_) -> n_item_ty_params cx oid\n     | DEFN_obj_drop oid -> n_item_ty_params cx oid\n-    | DEFN_loop_body fid -> n_item_ty_params cx fid\n+    | DEFN_loop_body _ -> 0\n     | _ -> bugi cx id \"n_item_ty_params on non-item\"\n ;;\n "}, {"sha": "edbfd06e3641cdb0acb19874c1ae6b9c0d5383bb", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 51, "deletions": 29, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/52c2a1549c2dda91d147d20edd62f6465b90d9e4/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/52c2a1549c2dda91d147d20edd62f6465b90d9e4/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=52c2a1549c2dda91d147d20edd62f6465b90d9e4", "patch": "@@ -624,10 +624,61 @@ let trans_visitor\n         Abi.iterator_args_elt_outer_frame_ptr\n   in\n \n+  (*\n+   * Within a for-each block, calculate the fp of an enclosing for-each block\n+   * or the enclosing function by chasing static links.\n+   *)\n+  let get_nth_outer_frame_ptr (diff:int) : Il.cell =\n+    (* All for-each block frames have the same args. *)\n+    let block_args_rty = current_fn_args_rty None in\n+    let current_fp = Il.Reg (abi.Abi.abi_fp_reg, Il.AddrTy Il.OpaqueTy) in\n+    let rec out (n:int) (fp:Il.cell) : Il.cell =\n+      if n == 0\n+      then fp\n+      else\n+        let args = fp_to_args fp block_args_rty in\n+        let iter_args = get_element_ptr args Abi.calltup_elt_iterator_args in\n+        let outer_fp =\n+          get_element_ptr iter_args Abi.iterator_args_elt_outer_frame_ptr\n+        in\n+          out (n - 1) outer_fp\n+    in\n+      out diff current_fp\n+  in\n+\n+  let curr_stmt_depth _ =\n+    if (Stack.is_empty curr_stmt)\n+    then None\n+    else\n+      Some\n+        (get_stmt_depth cx (Stack.top curr_stmt))\n+  in\n+\n   let get_ty_params_of_current_frame _ : Il.cell =\n     let fnid = current_fn() in\n     let n_ty_params = n_item_ty_params cx fnid in\n+    let local _ =\n       get_ty_params_of_frame fnid abi.Abi.abi_fp_reg n_ty_params\n+    in\n+      if Hashtbl.mem cx.ctxt_block_is_loop_body fnid\n+      then\n+        begin\n+          let outermost_fnid = get_loop_outermost_fn cx fnid in\n+            match curr_stmt_depth() with\n+                None -> local()\n+              | Some depth ->\n+                  iflog (fun _ ->\n+                           annotate \"loading outermost frame ty params\");\n+                  let (outermost_fp, _) =\n+                    force_to_reg (Il.Cell (get_nth_outer_frame_ptr depth))\n+                  in\n+                    get_ty_params_of_frame\n+                      outermost_fnid\n+                      outermost_fp\n+                      (n_item_ty_params cx outermost_fnid)\n+        end\n+      else\n+        local()\n   in\n \n   let get_ty_param_in_current_frame (param_idx:int) : Il.cell =\n@@ -872,35 +923,6 @@ let trans_visitor\n             Il.Mem (mem, (pointee_type ptr))\n   in\n \n-  (*\n-   * Within a for-each block, calculate the fp of an enclosing for-each block\n-   * or the enclosing function by chasing static links.\n-   *)\n-  let get_nth_outer_frame_ptr (diff:int) : Il.cell =\n-    (* All for-each block frames have the same args. *)\n-    let block_args_rty = current_fn_args_rty None in\n-    let current_fp = Il.Reg (abi.Abi.abi_fp_reg, Il.AddrTy Il.OpaqueTy) in\n-    let rec out (n:int) (fp:Il.cell) : Il.cell =\n-      if n == 0\n-      then fp\n-      else\n-        let args = fp_to_args fp block_args_rty in\n-        let iter_args = get_element_ptr args Abi.calltup_elt_iterator_args in\n-        let outer_fp =\n-          get_element_ptr iter_args Abi.iterator_args_elt_outer_frame_ptr\n-        in\n-          out (n - 1) outer_fp\n-    in\n-      out diff current_fp\n-  in\n-\n-  let curr_stmt_depth _ =\n-    if (Stack.is_empty curr_stmt)\n-    then None\n-    else\n-      Some\n-        (get_stmt_depth cx (Stack.top curr_stmt))\n-  in\n \n   let cell_of_block_slot\n       ?access_depth:(access_depth=curr_stmt_depth())"}, {"sha": "a3c48d784553e889043954e75396b7f8761fb9b8", "filename": "src/test/run-pass/generic-iter-frame.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52c2a1549c2dda91d147d20edd62f6465b90d9e4/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c2a1549c2dda91d147d20edd62f6465b90d9e4/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs?ref=52c2a1549c2dda91d147d20edd62f6465b90d9e4", "patch": "@@ -0,0 +1,16 @@\n+// Contrived example? No. It showed up in rustc's resolve pass.\n+\n+iter i() -> () {\n+  put ();\n+}\n+\n+fn foo[T](T t) {\n+  let int x = 10;\n+  for each (() j in i()) {\n+    log x;\n+  }\n+}\n+\n+fn main() {\n+  foo(0xdeadbeef_u);\n+}"}]}