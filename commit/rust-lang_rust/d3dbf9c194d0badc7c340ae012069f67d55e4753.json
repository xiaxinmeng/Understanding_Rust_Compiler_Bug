{"sha": "d3dbf9c194d0badc7c340ae012069f67d55e4753", "node_id": "C_kwDOAAsO6NoAKGQzZGJmOWMxOTRkMGJhZGM3YzM0MGFlMDEyMDY5ZjY3ZDU1ZTQ3NTM", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-12-24T21:09:08Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-12-25T10:07:47Z"}, "message": "Moar linting: needless_borrow, let_unit_value, ...\n\n* There are a few needless borrows that don't seem to be needed. I even did a quick assembly comparison and posted a q to stackoveflow on it. See [here](https://stackoverflow.com/questions/74910196/advantages-of-pass-by-ref-val-with-impl-intoiteratoritem-impl-asrefstr)\n* removed several `let _ = ...` when they don't look necessary (even a few ones that were not suggested by clippy (?))\n* there were a few `then(|| ctor{})` that clippy suggested to replace with `then_some(ctor{})` -- seems reasonable?\n* some unneeded assignment+return - keep the code a bit leaner\n* a few `writeln!` instead of `write!`, or even consolidate write!\n* a nice optimization to use `ch.is_ascii_digit` instead of `ch.is_digit(10)`", "tree": {"sha": "9f1663fa2108a76e552c5d42dcf91e6a88099aef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f1663fa2108a76e552c5d42dcf91e6a88099aef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3dbf9c194d0badc7c340ae012069f67d55e4753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3dbf9c194d0badc7c340ae012069f67d55e4753", "html_url": "https://github.com/rust-lang/rust/commit/d3dbf9c194d0badc7c340ae012069f67d55e4753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3dbf9c194d0badc7c340ae012069f67d55e4753/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2872e0558982360d499bdba79cf1a3ed06f1ae82", "url": "https://api.github.com/repos/rust-lang/rust/commits/2872e0558982360d499bdba79cf1a3ed06f1ae82", "html_url": "https://github.com/rust-lang/rust/commit/2872e0558982360d499bdba79cf1a3ed06f1ae82"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "8605379620ba8163a9e9eb5d06ce5a8af377d494", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -297,11 +297,11 @@ impl FlycheckActor {\n                 let mut cmd = Command::new(toolchain::cargo());\n                 cmd.arg(command);\n                 cmd.current_dir(&self.root);\n-                cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n+                cmd.args([\"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n                     .arg(self.root.join(\"Cargo.toml\").as_os_str());\n \n                 for target in target_triples {\n-                    cmd.args(&[\"--target\", target.as_str()]);\n+                    cmd.args([\"--target\", target.as_str()]);\n                 }\n                 if *all_targets {\n                     cmd.arg(\"--all-targets\");"}, {"sha": "485b612f08187f33695008c1a0ec6733a9edfe72", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -51,7 +51,7 @@ pub(crate) mod entry {\n         use super::*;\n \n         pub(crate) fn vis(p: &mut Parser<'_>) {\n-            let _ = opt_visibility(p, false);\n+            opt_visibility(p, false);\n         }\n \n         pub(crate) fn block(p: &mut Parser<'_>) {\n@@ -70,10 +70,10 @@ pub(crate) mod entry {\n             types::type_(p);\n         }\n         pub(crate) fn expr(p: &mut Parser<'_>) {\n-            let _ = expressions::expr(p);\n+            expressions::expr(p);\n         }\n         pub(crate) fn path(p: &mut Parser<'_>) {\n-            let _ = paths::type_path(p);\n+            paths::type_path(p);\n         }\n         pub(crate) fn item(p: &mut Parser<'_>) {\n             items::item_or_macro(p, true);"}, {"sha": "2be4050d135793706ab54794561a5225eb8f7791", "filename": "crates/parser/src/shortcuts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fshortcuts.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -80,8 +80,8 @@ impl<'a> LexedStr<'a> {\n             State::PendingEnter | State::Normal => unreachable!(),\n         }\n \n-        let is_eof = builder.pos == builder.lexed.len();\n-        is_eof\n+        // is_eof?\n+        builder.pos == builder.lexed.len()\n     }\n }\n "}, {"sha": "c1b4e9a7d8aec690311f1715e2642c8664d1d585", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -93,14 +93,12 @@ fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n         crate::StrStep::Token { kind, text } => {\n             assert!(depth > 0);\n             len += text.len();\n-            write!(buf, \"{indent}\").unwrap();\n-            write!(buf, \"{kind:?} {text:?}\\n\").unwrap();\n+            writeln!(buf, \"{indent}{kind:?} {text:?}\").unwrap();\n         }\n         crate::StrStep::Enter { kind } => {\n             assert!(depth > 0 || len == 0);\n             depth += 1;\n-            write!(buf, \"{indent}\").unwrap();\n-            write!(buf, \"{kind:?}\\n\").unwrap();\n+            writeln!(buf, \"{indent}{kind:?}\").unwrap();\n             indent.push_str(\"  \");\n         }\n         crate::StrStep::Exit => {"}, {"sha": "54dcb17f4e8b009cab7ab15a8fa72752562feeed", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -67,7 +67,7 @@ impl Process {\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<Process> {\n         let args: Vec<OsString> = args.into_iter().map(|s| s.as_ref().into()).collect();\n-        let child = JodChild(mk_child(&path, &args)?);\n+        let child = JodChild(mk_child(&path, args)?);\n         Ok(Process { child })\n     }\n "}, {"sha": "19a5caa4ccda623aacfc5ec5710f049e4a17db7d", "filename": "crates/proc-macro-test/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fproc-macro-test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fproc-macro-test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-test%2Fbuild.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -63,7 +63,7 @@ fn main() {\n     };\n \n     cmd.current_dir(&staging_dir)\n-        .args(&[\"build\", \"-p\", \"proc-macro-test-impl\", \"--message-format\", \"json\"])\n+        .args([\"build\", \"-p\", \"proc-macro-test-impl\", \"--message-format\", \"json\"])\n         // Explicit override the target directory to avoid using the same one which the parent\n         // cargo is using, or we'll deadlock.\n         // This can happen when `CARGO_TARGET_DIR` is set or global config forces all cargo"}, {"sha": "c118ef063593edf93e6fca74409ea2d0007616ee", "filename": "crates/syntax/src/ast/prec.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -119,7 +119,7 @@ impl Expr {\n     fn binding_power(&self) -> (u8, u8) {\n         use ast::{ArithOp::*, BinaryOp::*, Expr::*, LogicOp::*};\n \n-        let dps = match self {\n+        match self {\n             // (0, 0)   -- paren-like/nullary\n             // (0, N)   -- prefix\n             // (N, 0)   -- postfix\n@@ -170,9 +170,7 @@ impl Expr {\n             ArrayExpr(_) | TupleExpr(_) | Literal(_) | PathExpr(_) | ParenExpr(_) | IfExpr(_)\n             | WhileExpr(_) | ForExpr(_) | LoopExpr(_) | MatchExpr(_) | BlockExpr(_)\n             | RecordExpr(_) | UnderscoreExpr(_) => (0, 0),\n-        };\n-\n-        dps\n+        }\n     }\n \n     fn is_paren_like(&self) -> bool {"}, {"sha": "1d4a89201ae4265a3a40533345bc2dc7a193d364", "filename": "crates/syntax/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fsyntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fsyntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fptr.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -82,7 +82,7 @@ impl<N: AstNode> AstPtr<N> {\n \n     /// Like `SyntaxNodePtr::cast` but the trait bounds work out.\n     pub fn try_from_raw(raw: SyntaxNodePtr) -> Option<AstPtr<N>> {\n-        N::can_cast(raw.kind()).then(|| AstPtr { raw, _ty: PhantomData })\n+        N::can_cast(raw.kind()).then_some(AstPtr { raw, _ty: PhantomData })\n     }\n }\n "}, {"sha": "fb2381110bfe2438bba0d3629dc4f21636f68b86", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -196,7 +196,7 @@ pub(crate) fn validate_block_structure(root: &SyntaxNode) {\n \n fn validate_numeric_name(name_ref: Option<ast::NameRef>, errors: &mut Vec<SyntaxError>) {\n     if let Some(int_token) = int_token(name_ref) {\n-        if int_token.text().chars().any(|c| !c.is_digit(10)) {\n+        if int_token.text().chars().any(|c| !c.is_ascii_digit()) {\n             errors.push(SyntaxError::new(\n                 \"Tuple (struct) field access is only allowed through \\\n                 decimal integers with no underscores or suffix\","}, {"sha": "9296fd2e683534f502a9d065f97a1d24061cd790", "filename": "crates/test-utils/src/bench_fixture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Ftest-utils%2Fsrc%2Fbench_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Ftest-utils%2Fsrc%2Fbench_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fbench_fixture.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -36,10 +36,10 @@ struct S{} {{\n \n pub fn glorious_old_parser() -> String {\n     let path = project_root().join(\"bench_data/glorious_old_parser\");\n-    fs::read_to_string(&path).unwrap()\n+    fs::read_to_string(path).unwrap()\n }\n \n pub fn numerous_macro_rules() -> String {\n     let path = project_root().join(\"bench_data/numerous_macro_rules\");\n-    fs::read_to_string(&path).unwrap()\n+    fs::read_to_string(path).unwrap()\n }"}, {"sha": "ec3bf21405114c90e94536cf46549b287f4c8091", "filename": "crates/test-utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Ftest-utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Ftest-utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Flib.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -396,7 +396,7 @@ pub fn skip_slow_tests() -> bool {\n         eprintln!(\"ignoring slow test\");\n     } else {\n         let path = project_root().join(\"./target/.slow_tests_cookie\");\n-        fs::write(&path, \".\").unwrap();\n+        fs::write(path, \".\").unwrap();\n     }\n     should_skip\n }"}, {"sha": "67bdad2aadd83450d4eafd64f939f7311487fd82", "filename": "crates/toolchain/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Ftoolchain%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/crates%2Ftoolchain%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftoolchain%2Fsrc%2Flib.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -35,7 +35,7 @@ fn get_path_for_executable(executable_name: &'static str) -> PathBuf {\n     //      example: for cargo, this tries ~/.cargo/bin/cargo\n     //      It seems that this is a reasonable place to try for cargo, rustc, and rustup\n     let env_var = executable_name.to_ascii_uppercase();\n-    if let Some(path) = env::var_os(&env_var) {\n+    if let Some(path) = env::var_os(env_var) {\n         return path.into();\n     }\n "}, {"sha": "83223a551d130d607b8d975e10f0ffafe367dbae", "filename": "xtask/src/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -62,7 +62,7 @@ fn fix_path_for_mac(sh: &Shell) -> Result<()> {\n         let mut paths = env::split_paths(&vars).collect::<Vec<_>>();\n         paths.append(&mut vscode_path);\n         let new_paths = env::join_paths(paths).context(\"build env PATH\")?;\n-        sh.set_var(\"PATH\", &new_paths);\n+        sh.set_var(\"PATH\", new_paths);\n     }\n \n     Ok(())"}, {"sha": "4a30691477857148bb9437edc795bb83dede188e", "filename": "xtask/src/release.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -65,7 +65,7 @@ impl flags::Release {\n \n         let contents = changelog::get_changelog(sh, changelog_n, &commit, prev_tag, &today)?;\n         let path = changelog_dir.join(format!(\"{today}-changelog-{changelog_n}.adoc\"));\n-        sh.write_file(&path, &contents)?;\n+        sh.write_file(path, contents)?;\n \n         Ok(())\n     }"}, {"sha": "90095df99e89726456cc4c02f0e0a12d7ec275e1", "filename": "xtask/src/release/changelog.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf9c194d0badc7c340ae012069f67d55e4753/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf9c194d0badc7c340ae012069f67d55e4753/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease%2Fchangelog.rs?ref=d3dbf9c194d0badc7c340ae012069f67d55e4753", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn get_changelog(\n     let mut others = String::new();\n     for line in git_log.lines() {\n         let line = line.trim_start();\n-        if let Some(pr_num) = parse_pr_number(&line) {\n+        if let Some(pr_num) = parse_pr_number(line) {\n             let accept = \"Accept: application/vnd.github.v3+json\";\n             let authorization = format!(\"Authorization: token {token}\");\n             let pr_url = \"https://api.github.com/repos/rust-lang/rust-analyzer/issues\";"}]}