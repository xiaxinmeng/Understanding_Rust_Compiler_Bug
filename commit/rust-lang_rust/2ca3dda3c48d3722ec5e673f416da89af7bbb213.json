{"sha": "2ca3dda3c48d3722ec5e673f416da89af7bbb213", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYTNkZGEzYzQ4ZDM3MjJlYzVlNjczZjQxNmRhODlhZjdiYmIyMTM=", "commit": {"author": {"name": "Taliesin Beynon", "email": "taliesinb@wolfram.com", "date": "2015-08-06T06:04:11Z"}, "committer": {"name": "Taliesin Beynon", "email": "taliesinb@wolfram.com", "date": "2015-08-06T06:04:11Z"}, "message": "Some rerp-rust improvements.\n\n* Some clarifying rephrasing.\n* Rename B.x back to B.a.\n* Make null pointer optimization section bit more concrete.", "tree": {"sha": "5bce9228cb0923ebbd51fda1c8b9d61ca10d156f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bce9228cb0923ebbd51fda1c8b9d61ca10d156f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca3dda3c48d3722ec5e673f416da89af7bbb213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca3dda3c48d3722ec5e673f416da89af7bbb213", "html_url": "https://github.com/rust-lang/rust/commit/2ca3dda3c48d3722ec5e673f416da89af7bbb213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca3dda3c48d3722ec5e673f416da89af7bbb213/comments", "author": null, "committer": null, "parents": [{"sha": "4278b5f03bbc5808a7b611ae8353db6817c58792", "url": "https://api.github.com/repos/rust-lang/rust/commits/4278b5f03bbc5808a7b611ae8353db6817c58792", "html_url": "https://github.com/rust-lang/rust/commit/4278b5f03bbc5808a7b611ae8353db6817c58792"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "e038ae5639bf6d3111d2a084f7dff52db0317ea4", "filename": "src/doc/nomicon/repr-rust.md", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2ca3dda3c48d3722ec5e673f416da89af7bbb213/src%2Fdoc%2Fnomicon%2Frepr-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/2ca3dda3c48d3722ec5e673f416da89af7bbb213/src%2Fdoc%2Fnomicon%2Frepr-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Frepr-rust.md?ref=2ca3dda3c48d3722ec5e673f416da89af7bbb213", "patch": "@@ -36,9 +36,9 @@ struct A {\n }\n ```\n \n-will be 32-bit aligned assuming these primitives are aligned to their size.\n-It will therefore have a size that is a multiple of 32-bits. It will potentially\n-*really* become:\n+will be 32-bit aligned on an architecture that aligns these primitives to their\n+respective sizes. The whole struct will therefore have a size that is a multiple\n+of 32-bits. It will potentially become:\n \n ```rust\n struct A {\n@@ -50,10 +50,10 @@ struct A {\n }\n ```\n \n-There is *no indirection* for these types; all data is stored contiguously as\n-you would expect in C. However with the exception of arrays (which are densely\n-packed and in-order), the layout of data is not by default specified in Rust.\n-Given the two following struct definitions:\n+There is *no indirection* for these types; all data is stored within the struct,\n+as you would expect in C. However with the exception of arrays (which are\n+densely packed and in-order), the layout of data is not by default specified in\n+Rust. Given the two following struct definitions:\n \n ```rust\n struct A {\n@@ -62,18 +62,17 @@ struct A {\n }\n \n struct B {\n-    x: i32,\n+    a: i32,\n     b: u64,\n }\n ```\n \n Rust *does* guarantee that two instances of A have their data laid out in\n-exactly the same way. However Rust *does not* guarantee that an instance of A\n-has the same field ordering or padding as an instance of B (in practice there's\n-no particular reason why they wouldn't, other than that its not currently\n-guaranteed).\n+exactly the same way. However Rust *does not* currently guarantee that an\n+instance of A has the same field ordering or padding as an instance of B, though\n+in practice there's no reason why they wouldn't.\n \n-With A and B as written, this is basically nonsensical, but several other\n+With A and B as written, this point would seem to be pedantic, but several other\n features of Rust make it desirable for the language to play with data layout in\n complex ways.\n \n@@ -133,18 +132,21 @@ struct FooRepr {\n }\n ```\n \n-And indeed this is approximately how it would be laid out in general\n-(modulo the size and position of `tag`). However there are several cases where\n-such a representation is inefficient. The classic case of this is Rust's\n-\"null pointer optimization\". Given a pointer that is known to not be null\n-(e.g. `&u32`), an enum can *store* a discriminant bit *inside* the pointer\n-by using null as a special value. The net result is that\n-`size_of::<Option<&T>>() == size_of::<&T>()`\n+And indeed this is approximately how it would be laid out in general (modulo the\n+size and position of `tag`).\n+\n+However there are several cases where such a representation is inefficient. The\n+classic case of this is Rust's \"null pointer optimization\": an enum consisting\n+of a single outer unit variant (e.g. `None`) and a (potentially nested) non-\n+nullable pointer variant (e.g. `&T`) makes the tag unnecessary, because a null\n+pointer value can safely be interpreted to mean that the unit variant is chosen\n+instead. The net result is that, for example, `size_of::<Option<&T>>() ==\n+size_of::<&T>()`.\n \n-There are many types in Rust that are, or contain, \"not null\" pointers such as\n+There are many types in Rust that are, or contain, non-nullable pointers such as\n `Box<T>`, `Vec<T>`, `String`, `&T`, and `&mut T`. Similarly, one can imagine\n nested enums pooling their tags into a single discriminant, as they are by\n-definition known to have a limited range of valid values. In principle enums can\n+definition known to have a limited range of valid values. In principle enums could\n use fairly elaborate algorithms to cache bits throughout nested types with\n special constrained representations. As such it is *especially* desirable that\n we leave enum layout unspecified today."}]}