{"sha": "e09a0cc83622e57cb157d4fed13b9740f1a40bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOWEwY2M4MzYyMmU1N2NiMTU3ZDRmZWQxM2I5NzQwZjFhNDBiZmU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-16T08:40:24Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-16T08:43:36Z"}, "message": "Add is_short_pattern()", "tree": {"sha": "0703d7578909c067b5db6ab9c4c496b28981df7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0703d7578909c067b5db6ab9c4c496b28981df7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e09a0cc83622e57cb157d4fed13b9740f1a40bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e09a0cc83622e57cb157d4fed13b9740f1a40bfe", "html_url": "https://github.com/rust-lang/rust/commit/e09a0cc83622e57cb157d4fed13b9740f1a40bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e09a0cc83622e57cb157d4fed13b9740f1a40bfe/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311a3c526c50cf12fd773c8a847a22a5db3022ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/311a3c526c50cf12fd773c8a847a22a5db3022ee", "html_url": "https://github.com/rust-lang/rust/commit/311a3c526c50cf12fd773c8a847a22a5db3022ee"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "ab9bc2fa240b6f9f2e420bc136a2b0b47a8f9dbe", "filename": "src/expr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e09a0cc83622e57cb157d4fed13b9740f1a40bfe/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09a0cc83622e57cb157d4fed13b9740f1a40bfe/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e09a0cc83622e57cb157d4fed13b9740f1a40bfe", "patch": "@@ -1411,6 +1411,38 @@ fn rewrite_match_arm(\n     )\n }\n \n+/// Returns true if the given pattern is short. A short pattern is defined by the following grammer:\n+///\n+/// [small, ntp]:\n+///     - single token\n+///     - `&[single-line, ntp]`\n+///\n+/// [small]:\n+///     - `[small, ntp]`\n+///     - unary tuple constructor `([small, ntp])`\n+///     - `&[small]`\n+fn is_short_pattern(pat: &ast::Pat, pat_str: &str) -> bool {\n+    // We also require that the pattern is reasonably 'small' with its literal width.\n+    pat_str.len() <= 20 && !pat_str.contains(\"\\n\") && is_short_pattern_inner(pat)\n+}\n+\n+fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n+    match pat.node {\n+        ast::PatKind::Wild | ast::PatKind::Lit(_) => true,\n+        ast::PatKind::Ident(_, _, ref pat) => pat.is_none(),\n+        ast::PatKind::Struct(..)\n+        | ast::PatKind::Mac(..)\n+        | ast::PatKind::Slice(..)\n+        | ast::PatKind::Path(..)\n+        | ast::PatKind::Range(..) => false,\n+        ast::PatKind::Tuple(ref subpats, _) => subpats.len() <= 1,\n+        ast::PatKind::TupleStruct(ref path, ref subpats, _) => {\n+            path.segments.len() <= 1 && subpats.len() <= 1\n+        }\n+        ast::PatKind::Box(ref p) | ast::PatKind::Ref(ref p, _) => is_short_pattern_inner(&*p),\n+    }\n+}\n+\n fn rewrite_match_pattern(\n     context: &RewriteContext,\n     pats: &[ptr::P<ast::Pat>],"}]}