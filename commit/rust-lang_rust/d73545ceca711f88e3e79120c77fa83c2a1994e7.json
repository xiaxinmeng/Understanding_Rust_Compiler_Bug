{"sha": "d73545ceca711f88e3e79120c77fa83c2a1994e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MzU0NWNlY2E3MTFmODhlM2U3OTEyMGM3N2ZhODNjMmExOTk0ZTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-05-02T03:38:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-05-02T05:45:23Z"}, "message": "Run benchmarks once, as a test by default.\n\nE.g. if `foo.rs` looks like\n\n    #![feature(test)]\n    extern crate test;\n\n    #[bench]\n    fn bar(b: &mut test::Bencher) {\n        b.iter(|| {\n            1\n        })\n    }\n\n    #[test]\n    fn baz() {}\n\n    #[bench]\n    fn qux(b: &mut test::Bencher) {\n        b.iter(|| {\n            panic!()\n        })\n    }\n\nThen\n\n    $ rustc --test foo.rs\n    $ ./foo\n\n    running 3 tests\n    test baz ... ok\n    test qux ... FAILED\n    test bar ... ok\n\n    failures:\n\n    ---- qux stdout ----\n    \tthread 'qux' panicked at 'explicit panic', bench.rs:17\n\n    failures:\n        qux\n\n    test result: FAILED. 2 passed; 1 failed; 0 ignored; 0 measured\n\n    $ ./foo --bench ba\n\n    running 2 tests\n    test baz ... ignored\n    test bar ... bench:        97 ns/iter (+/- 74)\n\n    test result: ok. 0 passed; 0 failed; 1 ignored; 1 measured\n\nIn particular, the two benchmark are being run as tests in the default\nmode.\n\nThis helps for the main distribution, since benchmarks are only run with\n`PLEASE_BENCH=1`, which is rarely set (and never set on the test bots),\nand helps for code-coverage tools: benchmarks are run and so don't count\nas dead code.\n\nFixes #15842.", "tree": {"sha": "ed1e5e99796f04ced7d31fa00393274c96552586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed1e5e99796f04ced7d31fa00393274c96552586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d73545ceca711f88e3e79120c77fa83c2a1994e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d73545ceca711f88e3e79120c77fa83c2a1994e7", "html_url": "https://github.com/rust-lang/rust/commit/d73545ceca711f88e3e79120c77fa83c2a1994e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d73545ceca711f88e3e79120c77fa83c2a1994e7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59403606953d01391c1faa38d96062e3dfafa3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59403606953d01391c1faa38d96062e3dfafa3d", "html_url": "https://github.com/rust-lang/rust/commit/b59403606953d01391c1faa38d96062e3dfafa3d"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "2ee391a9374331b0b7d78fa965f945db2e1b4d74", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d73545ceca711f88e3e79120c77fa83c2a1994e7/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73545ceca711f88e3e79120c77fa83c2a1994e7/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=d73545ceca711f88e3e79120c77fa83c2a1994e7", "patch": "@@ -269,7 +269,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         run_ignored: config.run_ignored,\n         logfile: config.logfile.clone(),\n         run_tests: true,\n-        run_benchmarks: true,\n+        bench_benchmarks: true,\n         nocapture: env::var(\"RUST_TEST_NOCAPTURE\").is_ok(),\n         color: test::AutoColor,\n     }"}, {"sha": "9cbfe283cbddc163a91e9eeb3169949ae9e6833c", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d73545ceca711f88e3e79120c77fa83c2a1994e7/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73545ceca711f88e3e79120c77fa83c2a1994e7/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d73545ceca711f88e3e79120c77fa83c2a1994e7", "patch": "@@ -139,7 +139,7 @@ impl TestDesc {\n }\n \n /// Represents a benchmark function.\n-pub trait TDynBenchFn {\n+pub trait TDynBenchFn: Send {\n     fn run(&self, harness: &mut Bencher);\n }\n \n@@ -285,7 +285,7 @@ pub struct TestOpts {\n     pub filter: Option<String>,\n     pub run_ignored: bool,\n     pub run_tests: bool,\n-    pub run_benchmarks: bool,\n+    pub bench_benchmarks: bool,\n     pub logfile: Option<PathBuf>,\n     pub nocapture: bool,\n     pub color: ColorConfig,\n@@ -298,7 +298,7 @@ impl TestOpts {\n             filter: None,\n             run_ignored: false,\n             run_tests: false,\n-            run_benchmarks: false,\n+            bench_benchmarks: false,\n             logfile: None,\n             nocapture: false,\n             color: AutoColor,\n@@ -377,8 +377,8 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let logfile = matches.opt_str(\"logfile\");\n     let logfile = logfile.map(|s| PathBuf::from(&s));\n \n-    let run_benchmarks = matches.opt_present(\"bench\");\n-    let run_tests = ! run_benchmarks ||\n+    let bench_benchmarks = matches.opt_present(\"bench\");\n+    let run_tests = ! bench_benchmarks ||\n         matches.opt_present(\"test\");\n \n     let mut nocapture = matches.opt_present(\"nocapture\");\n@@ -400,7 +400,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         filter: filter,\n         run_ignored: run_ignored,\n         run_tests: run_tests,\n-        run_benchmarks: run_benchmarks,\n+        bench_benchmarks: bench_benchmarks,\n         logfile: logfile,\n         nocapture: nocapture,\n         color: color,\n@@ -778,7 +778,11 @@ fn run_tests<F>(opts: &TestOpts,\n                 mut callback: F) -> io::Result<()> where\n     F: FnMut(TestEvent) -> io::Result<()>,\n {\n-    let filtered_tests = filter_tests(opts, tests);\n+    let mut filtered_tests = filter_tests(opts, tests);\n+    if !opts.bench_benchmarks {\n+        filtered_tests = convert_benchmarks_to_tests(filtered_tests);\n+    }\n+\n     let filtered_descs = filtered_tests.iter()\n                                        .map(|t| t.desc.clone())\n                                        .collect();\n@@ -824,13 +828,15 @@ fn run_tests<F>(opts: &TestOpts,\n         pending -= 1;\n     }\n \n-    // All benchmarks run at the end, in serial.\n-    // (this includes metric fns)\n-    for b in filtered_benchs_and_metrics {\n-        try!(callback(TeWait(b.desc.clone(), b.testfn.padding())));\n-        run_test(opts, !opts.run_benchmarks, b, tx.clone());\n-        let (test, result, stdout) = rx.recv().unwrap();\n-        try!(callback(TeResult(test, result, stdout)));\n+    if opts.bench_benchmarks {\n+        // All benchmarks run at the end, in serial.\n+        // (this includes metric fns)\n+        for b in filtered_benchs_and_metrics {\n+            try!(callback(TeWait(b.desc.clone(), b.testfn.padding())));\n+            run_test(opts, false, b, tx.clone());\n+            let (test, result, stdout) = rx.recv().unwrap();\n+            try!(callback(TeResult(test, result, stdout)));\n+        }\n     }\n     Ok(())\n }\n@@ -893,6 +899,22 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     filtered\n }\n \n+pub fn convert_benchmarks_to_tests(tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> {\n+    // convert benchmarks to tests, if we're not benchmarking them\n+    tests.into_iter().map(|x| {\n+        let testfn = match x.testfn {\n+            DynBenchFn(bench) => {\n+                DynTestFn(Box::new(move || bench::run_once(|b| bench.run(b))))\n+            }\n+            StaticBenchFn(benchfn) => {\n+                DynTestFn(Box::new(move || bench::run_once(|b| benchfn(b))))\n+            }\n+            f => f\n+        };\n+        TestDescAndFn { desc: x.desc, testfn: testfn }\n+    }).collect()\n+}\n+\n pub fn run_test(opts: &TestOpts,\n                 force_ignore: bool,\n                 test: TestDescAndFn,\n@@ -1159,6 +1181,15 @@ pub mod bench {\n             mb_s: mb_s as usize\n         }\n     }\n+\n+    pub fn run_once<F>(f: F) where F: FnOnce(&mut Bencher) {\n+        let mut bs = Bencher {\n+            iterations: 0,\n+            dur: Duration::nanoseconds(0),\n+            bytes: 0\n+        };\n+        bs.bench_n(1, f);\n+    }\n }\n \n #[cfg(test)]"}]}