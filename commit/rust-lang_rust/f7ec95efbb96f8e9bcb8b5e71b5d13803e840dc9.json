{"sha": "f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZWM5NWVmYmI5NmY4ZTliY2I4YjVlNzFiNWQxMzgwM2U4NDBkYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T02:40:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T02:40:59Z"}, "message": "auto merge of #16917 : nick29581/rust/cross-trait, r=pcwalton\n\nCloses #15349\r\n\r\nr? @pcwalton (or anyone else)", "tree": {"sha": "7a86e9affd42434d280540f8208e710b78482e98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a86e9affd42434d280540f8208e710b78482e98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "html_url": "https://github.com/rust-lang/rust/commit/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e385817926f6f914fbff482aab3a8b627e7feee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e385817926f6f914fbff482aab3a8b627e7feee", "html_url": "https://github.com/rust-lang/rust/commit/2e385817926f6f914fbff482aab3a8b627e7feee"}, {"sha": "7f72884f1366ee9a46cd2b231c09c5c0e44f7ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f72884f1366ee9a46cd2b231c09c5c0e44f7ba3", "html_url": "https://github.com/rust-lang/rust/commit/7f72884f1366ee9a46cd2b231c09c5c0e44f7ba3"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "515413e03f060f5e4cbc13e99dd58f6aeaaf7b2c", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -640,7 +640,7 @@ impl<'a> CleanupHelperMethods<'a> for FunctionContext<'a> {\n         while !popped_scopes.is_empty() {\n             let mut scope = popped_scopes.pop().unwrap();\n \n-            if scope.cleanups.iter().any(|c| cleanup_is_suitable_for(*c, label))\n+            if scope.cleanups.iter().any(|c| cleanup_is_suitable_for(&**c, label))\n             {\n                 let name = scope.block_name(\"clean\");\n                 debug!(\"generating cleanups for {}\", name);\n@@ -649,7 +649,7 @@ impl<'a> CleanupHelperMethods<'a> for FunctionContext<'a> {\n                                             None);\n                 let mut bcx_out = bcx_in;\n                 for cleanup in scope.cleanups.iter().rev() {\n-                    if cleanup_is_suitable_for(*cleanup, label) {\n+                    if cleanup_is_suitable_for(&**cleanup, label) {\n                         bcx_out = cleanup.trans(bcx_out);\n                     }\n                 }"}, {"sha": "74093d26fea552341c25b77b59857113644179c9", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -451,6 +451,8 @@ impl Datum<Expr> {\n                                name: &str,\n                                expr_id: ast::NodeId)\n                                -> DatumBlock<'a, Lvalue> {\n+        debug!(\"to_lvalue_datum self: {}\", self.to_string(bcx.ccx()));\n+\n         assert!(ty::lltype_is_sized(bcx.tcx(), self.ty),\n                 \"Trying to convert unsized value to lval\");\n         self.match_kind("}, {"sha": "1f91c255ddd801ac3d86fc8cd1bbcc8cd102cbfd", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -2061,11 +2061,17 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n             if ty::type_is_sized(bcx.tcx(), content_ty) {\n                 deref_owned_pointer(bcx, expr, datum, content_ty)\n             } else {\n-                // A fat pointer and an opened DST value have the same represenation\n-                // just different types.\n-                DatumBlock::new(bcx, Datum::new(datum.val,\n-                                                ty::mk_open(bcx.tcx(), content_ty),\n-                                                datum.kind))\n+                // A fat pointer and an opened DST value have the same\n+                // represenation just different types. Since there is no\n+                // temporary for `*e` here (because it is unsized), we cannot\n+                // emulate the sized object code path for running drop glue and\n+                // free. Instead, we schedule cleanup for `e`, turning it into\n+                // an lvalue.\n+                let datum = unpack_datum!(\n+                    bcx, datum.to_lvalue_datum(bcx, \"deref\", expr.id));\n+\n+                let datum = Datum::new(datum.val, ty::mk_open(bcx.tcx(), content_ty), LvalueExpr);\n+                DatumBlock::new(bcx, datum)\n             }\n         }\n \n@@ -2094,7 +2100,7 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n                 // just different types.\n                 DatumBlock::new(bcx, Datum::new(datum.val,\n                                                 ty::mk_open(bcx.tcx(), content_ty),\n-                                                datum.kind))\n+                                                LvalueExpr))\n             }\n         }\n "}, {"sha": "7763a992c8f9491ae30c7850fc623d764c45d41d", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -327,7 +327,6 @@ impl<'f> Coerce<'f> {\n \n         let sty_b = &ty::get(b).sty;\n         match (sty_a, sty_b) {\n-            (&ty::ty_uniq(_), &ty::ty_rptr(..)) => Err(ty::terr_mismatch),\n             (&ty::ty_rptr(_, ty::mt{ty: t_a, ..}), &ty::ty_rptr(_, mt_b)) => {\n                 self.unpack_actual_value(t_a, |sty_a| {\n                     match self.unsize_ty(sty_a, mt_b.ty) {\n@@ -511,7 +510,7 @@ impl<'f> Coerce<'f> {\n         let tcx = self.get_ref().infcx.tcx;\n \n         match *sty_a {\n-            ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ty, ..}) => match ty::get(ty).sty {\n+            ty::ty_rptr(_, ty::mt{ty, ..}) => match ty::get(ty).sty {\n                 ty::ty_trait(box ty::TyTrait {\n                         def_id,\n                         ref substs,"}, {"sha": "9e6dff8a75114284ff4d58b856219748eb4224af", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -570,7 +570,7 @@ fn begin_unwind_inner(msg: Box<Any + Send>, file_line: &(&'static str, uint)) ->\n             n => {\n                 let f: Callback = unsafe { mem::transmute(n) };\n                 let (file, line) = *file_line;\n-                f(msg, file, line);\n+                f(&*msg, file, line);\n             }\n         }\n     };"}, {"sha": "8d715de16e65a73db9ffb8fabd4993b69f8028ae", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -81,7 +81,7 @@ pub fn on_fail(obj: &Any + Send, file: &'static str, line: uint) {\n                                  \"task '{}' failed at '{}', {}:{}\\n\",\n                                  n, msg, file, line);\n                 if backtrace::log_enabled() {\n-                    let _ = backtrace::write(stderr);\n+                    let _ = backtrace::write(&mut *stderr);\n                 }\n                 local_stderr.replace(Some(stderr));\n             }"}, {"sha": "bd837b6f7b5db39ef3d529eff227d2a392a206b5", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -203,7 +203,7 @@ fn with_task_stdout(f: |&mut Writer| -> IoResult<()>) {\n         let mut my_stdout = local_stdout.replace(None).unwrap_or_else(|| {\n             box stdout() as Box<Writer + Send>\n         });\n-        let result = f(my_stdout);\n+        let result = f(&mut *my_stdout);\n         local_stdout.replace(Some(my_stdout));\n         result\n     } else {"}, {"sha": "81ac789b683a61694eee7f232b112853b2847db6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -351,7 +351,7 @@ impl<'a> Parser<'a> {\n                mut rdr: Box<Reader+'a>)\n                -> Parser<'a>\n     {\n-        let tok0 = real_token(rdr);\n+        let tok0 = real_token(&mut *rdr);\n         let span = tok0.sp;\n         let placeholder = TokenAndSpan {\n             tok: token::UNDERSCORE,\n@@ -899,7 +899,7 @@ impl<'a> Parser<'a> {\n             None\n         };\n         let next = if self.buffer_start == self.buffer_end {\n-            real_token(self.reader)\n+            real_token(&mut *self.reader)\n         } else {\n             // Avoid token copies with `replace`.\n             let buffer_start = self.buffer_start as uint;\n@@ -943,7 +943,7 @@ impl<'a> Parser<'a> {\n                       -> R {\n         let dist = distance as int;\n         while self.buffer_length() < dist {\n-            self.buffer[self.buffer_end as uint] = real_token(self.reader);\n+            self.buffer[self.buffer_end as uint] = real_token(&mut *self.reader);\n             self.buffer_end = (self.buffer_end + 1) & 3;\n         }\n         f(&self.buffer[((self.buffer_start + dist - 1) & 3) as uint].tok)"}, {"sha": "1ccd5290fef8731805420eec540cc2ed6a4015a0", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that cross-borrowing (implicitly converting from `Box<T>` to `&T`) is\n+// forbidden when `T` is a trait.\n+\n+struct Foo;\n+trait Trait {}\n+impl Trait for Foo {}\n+\n+pub fn main() {\n+    let x: Box<Trait> = box Foo;\n+    let _y: &Trait = x; //~ ERROR mismatched types: expected `&Trait`, found `Box<Trait>`\n+}\n+"}, {"sha": "835c55c9bd17a24549d0520984bcdb1b60ab0e55", "filename": "src/test/compile-fail/regions-close-object-into-object.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -16,19 +16,19 @@ trait X {}\n impl<'a, T> X for B<'a, T> {}\n \n fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-    box B(v) as Box<X>\n+    box B(&*v) as Box<X>\n }\n \n fn g<'a, T: 'static>(v: Box<A<T>>) -> Box<X+'static> {\n-    box B(v) as Box<X> //~ ERROR cannot infer\n+    box B(&*v) as Box<X> //~ ERROR cannot infer\n }\n \n fn h<'a, T, U>(v: Box<A<U>+'static>) -> Box<X+'static> {\n-    box B(v) as Box<X>\n+    box B(&*v) as Box<X>\n }\n \n fn i<'a, T, U>(v: Box<A<U>>) -> Box<X+'static> {\n-    box B(v) as Box<X> //~ ERROR cannot infer\n+    box B(&*v) as Box<X> //~ ERROR cannot infer\n }\n \n fn main() {}"}, {"sha": "5d7dbbe5a292ac9606b7a0cb581afe5c9bc467ae", "filename": "src/test/run-pass/cleanup-auto-borrow-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Frun-pass%2Fcleanup-auto-borrow-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Frun-pass%2Fcleanup-auto-borrow-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-auto-borrow-obj.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -29,7 +29,7 @@ impl Trait for Foo {}\n \n pub fn main() {\n     {\n-        let _x: &Trait = box Foo as Box<Trait>;\n+        let _x: &Trait = &*(box Foo as Box<Trait>);\n     }\n     unsafe {\n         assert!(DROP_RAN);"}, {"sha": "54225bbe01ec0d79a01cd5336b49fe0377d7041b", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -36,5 +36,5 @@ pub fn main() {\n     let s: Box<S> = box S { s: 5 };\n     print_s(&*s);\n     let t: Box<T> = s as Box<T>;\n-    print_t(t);\n+    print_t(&*t);\n }"}, {"sha": "8531fd5f975ac538b79d4368bb11fd69b94b580d", "filename": "src/test/run-pass/new-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Frun-pass%2Fnew-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Frun-pass%2Fnew-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -29,7 +29,7 @@ impl Trait for Struct {\n \n fn g(x: Box<Trait>) {\n     x.printme();\n-    let y: &Trait = x;\n+    let y: &Trait = &*x;\n     y.printme();\n }\n "}, {"sha": "c732d20a1560584306400cf4fcf197f94a056d16", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=f7ec95efbb96f8e9bcb8b5e71b5d13803e840dc9", "patch": "@@ -120,8 +120,8 @@ pub fn main() {\n     assert_eq!(field_invoke2(&s2), 3);\n \n     let m : Box<Trait> = make_val();\n-    assert_eq!(object_invoke1(m), (4,5));\n-    assert_eq!(object_invoke2(m), 5);\n+    assert_eq!(object_invoke1(&*m), (4,5));\n+    assert_eq!(object_invoke2(&*m), 5);\n \n     // The RefMakerTrait above is pretty strange (i.e. it is strange\n     // to consume a value of type T and return a &T).  Easiest thing"}]}