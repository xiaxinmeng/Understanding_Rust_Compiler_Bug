{"sha": "322effe4158cd3f2c48eba83af86383cd8d5612f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMmVmZmU0MTU4Y2QzZjJjNDhlYmE4M2FmODYzODNjZDhkNTYxMmY=", "commit": {"author": {"name": "Paul Florence", "email": "florencepaul@hotmail.fr", "date": "2017-10-20T13:51:35Z"}, "committer": {"name": "Paul Florence", "email": "florencepaul@hotmail.fr", "date": "2017-10-20T14:17:41Z"}, "message": "Implementation of the `const_static_lifetime` lint.", "tree": {"sha": "4144fe017d9e0aec6bc02c8d387ba29b5eab0d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4144fe017d9e0aec6bc02c8d387ba29b5eab0d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/322effe4158cd3f2c48eba83af86383cd8d5612f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/322effe4158cd3f2c48eba83af86383cd8d5612f", "html_url": "https://github.com/rust-lang/rust/commit/322effe4158cd3f2c48eba83af86383cd8d5612f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/322effe4158cd3f2c48eba83af86383cd8d5612f/comments", "author": {"login": "gbip", "id": 15819864, "node_id": "MDQ6VXNlcjE1ODE5ODY0", "avatar_url": "https://avatars.githubusercontent.com/u/15819864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbip", "html_url": "https://github.com/gbip", "followers_url": "https://api.github.com/users/gbip/followers", "following_url": "https://api.github.com/users/gbip/following{/other_user}", "gists_url": "https://api.github.com/users/gbip/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbip/subscriptions", "organizations_url": "https://api.github.com/users/gbip/orgs", "repos_url": "https://api.github.com/users/gbip/repos", "events_url": "https://api.github.com/users/gbip/events{/privacy}", "received_events_url": "https://api.github.com/users/gbip/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gbip", "id": 15819864, "node_id": "MDQ6VXNlcjE1ODE5ODY0", "avatar_url": "https://avatars.githubusercontent.com/u/15819864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbip", "html_url": "https://github.com/gbip", "followers_url": "https://api.github.com/users/gbip/followers", "following_url": "https://api.github.com/users/gbip/following{/other_user}", "gists_url": "https://api.github.com/users/gbip/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbip/subscriptions", "organizations_url": "https://api.github.com/users/gbip/orgs", "repos_url": "https://api.github.com/users/gbip/repos", "events_url": "https://api.github.com/users/gbip/events{/privacy}", "received_events_url": "https://api.github.com/users/gbip/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9293188b65293634c43a37fa046824f7c9d5011a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9293188b65293634c43a37fa046824f7c9d5011a", "html_url": "https://github.com/rust-lang/rust/commit/9293188b65293634c43a37fa046824f7c9d5011a"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "3e426d9cebb6d494c20ec38a779b8fd4f5229ec7", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/322effe4158cd3f2c48eba83af86383cd8d5612f/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322effe4158cd3f2c48eba83af86383cd8d5612f/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=322effe4158cd3f2c48eba83af86383cd8d5612f", "patch": "@@ -0,0 +1,82 @@\n+use syntax::ast::{Item, ItemKind, TyKind, Ty};\n+use rustc::lint::{LintPass, EarlyLintPass, LintArray, EarlyContext};\n+use utils::{span_help_and_lint, in_macro};\n+\n+/// **What it does:** Checks for constants with an explicit `'static` lifetime.\n+///\n+/// **Why is this bad?** Adding `'static` to every reference can create very complicated types.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+///  const FOO: &'static [(&'static str, &'static str, fn(&Bar) -> bool)] = &[..]\n+/// ```\n+/// This code can be rewritten as\n+/// ```rust\n+///  const FOO: &[(&str, &str, fn(&Bar) -> bool)] = &[...]\n+/// ```\n+\n+declare_lint! {\n+    pub CONST_STATIC_LIFETIME, \n+    Warn,\n+    \"Using explicit `'static` lifetime for constants when elision rules would allow omitting them.\"\n+}\n+\n+pub struct StaticConst;\n+\n+impl LintPass for StaticConst {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CONST_STATIC_LIFETIME)\n+    }\n+}\n+\n+impl StaticConst {\n+    // Recursively visit types\n+    fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext) {\n+        match ty.node {\n+            // Be carefull of nested structures (arrays and tuples)\n+            TyKind::Array(ref ty, _) => {\n+                println!(\"array\");\n+                self.visit_type(&*ty, cx);\n+            },\n+            TyKind::Tup(ref tup) => {\n+                for tup_ty in tup {\n+                    self.visit_type(&*tup_ty, cx);\n+                }\n+            },\n+            // This is what we are looking for !\n+            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n+                // Match the 'static lifetime\n+                if let Some(lifetime) = *optional_lifetime {\n+                    if let TyKind::Path(_, _) = borrow_type.ty.node {\n+                        // Verify that the path is a str\n+                        if lifetime.ident.name == \"'static\" {\n+                            span_help_and_lint(cx,\n+                                               CONST_STATIC_LIFETIME,\n+                                               lifetime.span,\n+                                               \"Constants have by default a `'static` lifetime\",\n+                                               \"consider removing `'static`\");\n+                        }\n+                    }\n+                }\n+                self.visit_type(&*borrow_type.ty, cx);\n+            },\n+            TyKind::Slice(ref ty) => {\n+                self.visit_type(&ty, cx);\n+            },\n+            _ => {},\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for StaticConst {\n+    fn check_item(&mut self, cx: &EarlyContext, item: &Item) {\n+        if !in_macro(item.span) {\n+            // Match only constants...\n+            if let ItemKind::Const(ref var_type, _) = item.node {\n+                self.visit_type(var_type, cx);\n+            }\n+        }\n+    }\n+}"}, {"sha": "9b78e435645c93f6f32854deded2caedbb352645", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/322effe4158cd3f2c48eba83af86383cd8d5612f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322effe4158cd3f2c48eba83af86383cd8d5612f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=322effe4158cd3f2c48eba83af86383cd8d5612f", "patch": "@@ -76,6 +76,7 @@ pub mod block_in_if_condition;\n pub mod booleans;\n pub mod bytecount;\n pub mod collapsible_if;\n+pub mod const_static_lifetime;\n pub mod copies;\n pub mod cyclomatic_complexity;\n pub mod derive;\n@@ -339,6 +340,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n+    reg.register_early_lint_pass(box const_static_lifetime::StaticConst);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -349,6 +351,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         booleans::NONMINIMAL_BOOL,\n+        const_static_lifetime::CONST_STATIC_LIFETIME,\n         empty_enum::EMPTY_ENUM,\n         enum_glob_use::ENUM_GLOB_USE,\n         enum_variants::PUB_ENUM_VARIANT_NAMES,"}, {"sha": "05b7a3e01176080ed200d280ff84fd3cf050ad79", "filename": "tests/ui/const_static_lifetime.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/322effe4158cd3f2c48eba83af86383cd8d5612f/tests%2Fui%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322effe4158cd3f2c48eba83af86383cd8d5612f/tests%2Fui%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_static_lifetime.rs?ref=322effe4158cd3f2c48eba83af86383cd8d5612f", "patch": "@@ -0,0 +1,33 @@\n+#![feature(plugin)]\n+\n+#[derive(Debug)]\n+struct Foo {}\n+\n+const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n+\n+const VAR_TWO: &str = \"Test constant #2\"; // This line should not raise a warning.\n+\n+const VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n+\n+const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n+\n+const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+\n+const VAR_SIX: &'static u8 = &5;\n+\n+const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+\n+const VAR_HEIGHT: &'static Foo = &Foo {};\n+\n+fn main() {\n+    let false_positive: &'static str = \"test\";\n+    println!(\"{}\", VAR_ONE);\n+    println!(\"{}\", VAR_TWO);\n+    println!(\"{:?}\", VAR_THREE);\n+    println!(\"{:?}\", VAR_FOUR);\n+    println!(\"{:?}\", VAR_FIVE);\n+    println!(\"{:?}\", VAR_SIX);\n+    println!(\"{:?}\", VAR_SEVEN);\n+    println!(\"{:?}\", VAR_HEIGHT);\n+    println!(\"{}\", false_positive);\n+}"}, {"sha": "2007f1fad552e7c60fb1345b5e1b424e7024e5c7", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/322effe4158cd3f2c48eba83af86383cd8d5612f/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322effe4158cd3f2c48eba83af86383cd8d5612f/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=322effe4158cd3f2c48eba83af86383cd8d5612f", "patch": "@@ -9,8 +9,8 @@ extern crate regex;\n use regex::{Regex, RegexSet, RegexBuilder};\n use regex::bytes::{Regex as BRegex, RegexSet as BRegexSet, RegexBuilder as BRegexBuilder};\n \n-const OPENING_PAREN : &'static str = \"(\";\n-const NOT_A_REAL_REGEX : &'static str = \"foobar\";\n+const OPENING_PAREN: &str = \"(\";\n+const NOT_A_REAL_REGEX: &str = \"foobar\";\n \n fn syntax_error() {\n     let pipe_in_wrong_position = Regex::new(\"|\");"}]}