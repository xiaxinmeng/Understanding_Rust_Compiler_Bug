{"sha": "7a0abbff8be746e46841ac7eef5a17364d6b8b51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMGFiYmZmOGJlNzQ2ZTQ2ODQxYWM3ZWVmNWExNzM2NGQ2YjhiNTE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-24T23:36:28Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-25T10:54:21Z"}, "message": "Combining move lifetime and type suggestions.\n\nThis commit combines the move lifetime and move type suggestions so that\nwhen rustfix applies them they don't conflict with each other.", "tree": {"sha": "f101163d5a0add1b28cea162488b4fbcfdd3fda5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f101163d5a0add1b28cea162488b4fbcfdd3fda5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a0abbff8be746e46841ac7eef5a17364d6b8b51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlxK6t0ACgkQAXYLT59T\n8VQWZQ//VThajZeN/SDB1P86hGbs1J9InIP197FLyGZ3tHjesUYItu0lB95pkEIU\n+US7pN93qq15dwe4VEdTUacequh7Q2az24ydnKi/R5NLz5qvMXlDSPqdbbNurS28\n4mAHsTGuI6Pn+md9okeBTQFyubCuZ7W5WX1lrOGOYqTQFDXZODHJf0PXJj4ZXbZ2\nw/uDkHvpcBuqrTF+zpKJA+Uv9zfS36EeFR8ZDR1PetPAKcweNeGNywQIBvTj0wpk\n08lixsAPsDVbqOSBCBBlmQqBlW5mzbrbi6uYPqsn+LnIBQllqdsjXOegjUX2yfFI\n04kPIUsGFnuhMU0Z97n3GdBGMCRdRgBJpxD3iscNCmUj8iqY0JozrAIJBIx3Gkht\nxY0St5vAy7SXcUFrdVVkeVVH53ocn2chREmT8DGWdYyHiyjV9T7419Qyah67ZRPr\nHDHQySpqNxY4f98akfEyYrIHQJh2/3k9yGGk9ZDdzf2J1neVJKgl8TswLke9mOci\nFc5yvvs0KiCyYH16vv6ni21OS/TyU/zmVkogFYiRjQ5/whEbSXcSupQic5TF/6nI\nLqkEzuxAJC7VnJAS1fDKm9BOmSg1a/QU7N5Ct0JTpp8b4pywxq8SY2I5Buu3Cww7\ngwohnpf5dMzG9bEvVP9gjTId7QNJjfKNqVVYqCgZMkMYAQRK1JY=\n=lXJL\n-----END PGP SIGNATURE-----", "payload": "tree f101163d5a0add1b28cea162488b4fbcfdd3fda5\nparent 463e623ca967c2bd301cc0291fae219130b53daf\nauthor David Wood <david@davidtw.co> 1548372988 +0100\ncommitter David Wood <david@davidtw.co> 1548413661 +0100\n\nCombining move lifetime and type suggestions.\n\nThis commit combines the move lifetime and move type suggestions so that\nwhen rustfix applies them they don't conflict with each other.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0abbff8be746e46841ac7eef5a17364d6b8b51", "html_url": "https://github.com/rust-lang/rust/commit/7a0abbff8be746e46841ac7eef5a17364d6b8b51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a0abbff8be746e46841ac7eef5a17364d6b8b51/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463e623ca967c2bd301cc0291fae219130b53daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/463e623ca967c2bd301cc0291fae219130b53daf", "html_url": "https://github.com/rust-lang/rust/commit/463e623ca967c2bd301cc0291fae219130b53daf"}], "stats": {"total": 214, "additions": 179, "deletions": 35}, "files": [{"sha": "955dce47721e23005caa5447bad15b01c011c25b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 73, "deletions": 30, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/7a0abbff8be746e46841ac7eef5a17364d6b8b51/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0abbff8be746e46841ac7eef5a17364d6b8b51/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7a0abbff8be746e46841ac7eef5a17364d6b8b51", "patch": "@@ -5611,49 +5611,92 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        if !bad_lifetime_pos.is_empty() {\n-            let mut err = self.struct_span_err(\n+        self.maybe_report_incorrect_generic_argument_order(\n+            bad_lifetime_pos, bad_type_pos, lifetime_suggestions, type_suggestions\n+        );\n+\n+        Ok((args, bindings))\n+    }\n+\n+    /// Maybe report an error about incorrect generic argument order - \"lifetime parameters\n+    /// must be declared before type parameters\", \"type parameters must be declared before\n+    /// associated type bindings\" or both.\n+    fn maybe_report_incorrect_generic_argument_order(\n+        &self,\n+        bad_lifetime_pos: Vec<Span>,\n+        bad_type_pos: Vec<Span>,\n+        lifetime_suggestions: Vec<(Span, String)>,\n+        type_suggestions: Vec<(Span, String)>,\n+    ) {\n+        let mut err = if !bad_lifetime_pos.is_empty() && !bad_type_pos.is_empty() {\n+            let mut positions = bad_lifetime_pos.clone();\n+            positions.extend_from_slice(&bad_type_pos);\n+\n+            self.struct_span_err(\n+                positions,\n+                \"generic arguments must declare lifetimes, types and associated type bindings in \\\n+                 that order\",\n+            )\n+        } else if !bad_lifetime_pos.is_empty() {\n+            self.struct_span_err(\n                 bad_lifetime_pos.clone(),\n                 \"lifetime parameters must be declared prior to type parameters\"\n-            );\n+            )\n+        } else if !bad_type_pos.is_empty() {\n+            self.struct_span_err(\n+                bad_type_pos.clone(),\n+                \"type parameters must be declared prior to associated type bindings\"\n+            )\n+        } else {\n+            return;\n+        };\n+\n+        if !bad_lifetime_pos.is_empty() {\n             for sp in &bad_lifetime_pos {\n                 err.span_label(*sp, \"must be declared prior to type parameters\");\n             }\n-            if !lifetime_suggestions.is_empty() {\n-                err.multipart_suggestion_with_applicability(\n-                    &format!(\n-                        \"move the lifetime parameter{} prior to the first type parameter\",\n-                        if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n-                    ),\n-                    lifetime_suggestions,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            err.emit();\n         }\n \n         if !bad_type_pos.is_empty() {\n-            let mut err = self.struct_span_err(\n-                bad_type_pos.clone(),\n-                \"type parameters must be declared prior to associated type bindings\"\n-            );\n             for sp in &bad_type_pos {\n                 err.span_label(*sp, \"must be declared prior to associated type bindings\");\n             }\n-            if !type_suggestions.is_empty() {\n-                err.multipart_suggestion_with_applicability(\n-                    &format!(\n-                        \"move the type parameter{} prior to the first associated type binding\",\n-                        if bad_type_pos.len() > 1 { \"s\" } else { \"\" },\n-                    ),\n-                    type_suggestions,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            err.emit();\n         }\n \n-        Ok((args, bindings))\n+        if !lifetime_suggestions.is_empty() && !type_suggestions.is_empty() {\n+            let mut suggestions = lifetime_suggestions;\n+            suggestions.extend_from_slice(&type_suggestions);\n+\n+            let plural = bad_lifetime_pos.len() + bad_type_pos.len() > 1;\n+            err.multipart_suggestion_with_applicability(\n+                &format!(\n+                    \"move the parameter{}\",\n+                    if plural { \"s\" } else { \"\" },\n+                ),\n+                suggestions,\n+                Applicability::MachineApplicable,\n+            );\n+        } else if !lifetime_suggestions.is_empty() {\n+            err.multipart_suggestion_with_applicability(\n+                &format!(\n+                    \"move the lifetime parameter{} prior to the first type parameter\",\n+                    if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n+                ),\n+                lifetime_suggestions,\n+                Applicability::MachineApplicable,\n+            );\n+        } else if !type_suggestions.is_empty() {\n+            err.multipart_suggestion_with_applicability(\n+                &format!(\n+                    \"move the type parameter{} prior to the first associated type binding\",\n+                    if bad_type_pos.len() > 1 { \"s\" } else { \"\" },\n+                ),\n+                type_suggestions,\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+\n+        err.emit();\n     }\n \n     /// Parses an optional `where` clause and places it in `generics`."}, {"sha": "fd10ba4350c4a4bb654c0bb1ef4752313df96b58", "filename": "src/test/ui/suggestions/suggest-move-types.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7a0abbff8be746e46841ac7eef5a17364d6b8b51/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0abbff8be746e46841ac7eef5a17364d6b8b51/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs?ref=7a0abbff8be746e46841ac7eef5a17364d6b8b51", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n #![allow(warnings)]\n \n // This test verifies that the suggestion to move types before associated type bindings\n@@ -7,36 +9,77 @@ trait One<T> {\n   type A;\n }\n \n+trait OneWithLifetime<'a, T> {\n+  type A;\n+}\n+\n trait Three<T, U, V> {\n   type A;\n   type B;\n   type C;\n }\n \n+trait ThreeWithLifetime<'a, 'b, 'c, T, U, V> {\n+  type A;\n+  type B;\n+  type C;\n+}\n+\n struct A<T, M: One<A=(), T>> { //~ ERROR type parameters must be declared\n     m: M,\n     t: T,\n }\n \n+\n+struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n+//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+    m: M,\n+    t: &'a T,\n+}\n+\n struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR type parameters must be declared\n     m: M,\n     t: T,\n     u: U,\n     v: V,\n }\n \n+struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n+//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+    m: M,\n+    t: &'a T,\n+    u: &'b U,\n+    v: &'c V,\n+}\n+\n struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR type parameters must be declared\n     m: M,\n     t: T,\n     u: U,\n     v: V,\n }\n \n+struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n+//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+    m: M,\n+    t: &'a T,\n+    u: &'b U,\n+    v: &'c V,\n+}\n+\n struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR type parameters must be declared\n     m: M,\n     t: T,\n     u: U,\n     v: V,\n }\n \n+struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n+//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+    m: M,\n+    t: &'a T,\n+    u: &'b U,\n+    v: &'c V,\n+}\n+\n fn main() {}"}, {"sha": "3643d9a912455ea6a4ffeb1e9883fcb41e492839", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7a0abbff8be746e46841ac7eef5a17364d6b8b51/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0abbff8be746e46841ac7eef5a17364d6b8b51/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=7a0abbff8be746e46841ac7eef5a17364d6b8b51", "patch": "@@ -1,5 +1,5 @@\n error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/suggest-move-types.rs:16:26\n+  --> $DIR/suggest-move-types.rs:28:26\n    |\n LL | struct A<T, M: One<A=(), T>> { //~ ERROR type parameters must be declared\n    |                          ^ must be declared prior to associated type bindings\n@@ -8,8 +8,20 @@ help: move the type parameter prior to the first associated type binding\n LL | struct A<T, M: One<T, A=()>> { //~ ERROR type parameters must be declared\n    |                    ^^    --\n \n+error: generic arguments must declare lifetimes, types and associated type bindings in that order\n+  --> $DIR/suggest-move-types.rs:34:46\n+   |\n+LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n+   |                                           ^  ^^ must be declared prior to type parameters\n+   |                                           |\n+   |                                           must be declared prior to associated type bindings\n+help: move the parameters\n+   |\n+LL | struct Al<'a, T, M: OneWithLifetime<'a, T, A=()>> {\n+   |                                     ^^^ ^^    --\n+\n error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/suggest-move-types.rs:21:46\n+  --> $DIR/suggest-move-types.rs:40:46\n    |\n LL | struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR type parameters must be declared\n    |                                              ^  ^  ^ must be declared prior to associated type bindings\n@@ -21,8 +33,24 @@ help: move the type parameters prior to the first associated type binding\n LL | struct B<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n    |                            ^^ ^^ ^^                --\n \n+error: generic arguments must declare lifetimes, types and associated type bindings in that order\n+  --> $DIR/suggest-move-types.rs:47:80\n+   |\n+LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n+   |                                                                       ^  ^  ^  ^^  ^^  ^^ must be declared prior to type parameters\n+   |                                                                       |  |  |  |   |\n+   |                                                                       |  |  |  |   must be declared prior to type parameters\n+   |                                                                       |  |  |  must be declared prior to type parameters\n+   |                                                                       |  |  must be declared prior to associated type bindings\n+   |                                                                       |  must be declared prior to associated type bindings\n+   |                                                                       must be declared prior to associated type bindings\n+help: move the parameters\n+   |\n+LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n+   |                                                     ^^^ ^^^ ^^^ ^^ ^^ ^^                --\n+\n error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/suggest-move-types.rs:28:49\n+  --> $DIR/suggest-move-types.rs:55:49\n    |\n LL | struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR type parameters must be declared\n    |                                                 ^  ^ must be declared prior to associated type bindings\n@@ -33,8 +61,23 @@ help: move the type parameters prior to the first associated type binding\n LL | struct C<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n    |                               ^^ ^^                --\n \n+error: generic arguments must declare lifetimes, types and associated type bindings in that order\n+  --> $DIR/suggest-move-types.rs:62:56\n+   |\n+LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n+   |                                                        ^^                    ^  ^^  ^  ^^ must be declared prior to type parameters\n+   |                                                        |                     |  |   |\n+   |                                                        |                     |  |   must be declared prior to associated type bindings\n+   |                                                        |                     |  must be declared prior to type parameters\n+   |                                                        |                     must be declared prior to associated type bindings\n+   |                                                        must be declared prior to type parameters\n+help: move the parameters\n+   |\n+LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n+   |                                                     ^^^ ^^^ ^^^ -- ^^ ^^                --\n+\n error: type parameters must be declared prior to associated type bindings\n-  --> $DIR/suggest-move-types.rs:35:43\n+  --> $DIR/suggest-move-types.rs:70:43\n    |\n LL | struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR type parameters must be declared\n    |                                           ^        ^ must be declared prior to associated type bindings\n@@ -45,5 +88,20 @@ help: move the type parameters prior to the first associated type binding\n LL | struct D<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n    |                               ^^ ^^          --    --\n \n-error: aborting due to 4 previous errors\n+error: generic arguments must declare lifetimes, types and associated type bindings in that order\n+  --> $DIR/suggest-move-types.rs:77:56\n+   |\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n+   |                                                        ^^              ^  ^^        ^  ^^ must be declared prior to type parameters\n+   |                                                        |               |  |         |\n+   |                                                        |               |  |         must be declared prior to associated type bindings\n+   |                                                        |               |  must be declared prior to type parameters\n+   |                                                        |               must be declared prior to associated type bindings\n+   |                                                        must be declared prior to type parameters\n+help: move the parameters\n+   |\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n+   |                                                     ^^^ ^^^ ^^^ -- ^^ ^^          --    --\n+\n+error: aborting due to 8 previous errors\n "}]}