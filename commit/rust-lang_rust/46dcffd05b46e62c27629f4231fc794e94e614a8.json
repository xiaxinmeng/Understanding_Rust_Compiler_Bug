{"sha": "46dcffd05b46e62c27629f4231fc794e94e614a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZGNmZmQwNWI0NmU2MmMyNzYyOWY0MjMxZmM3OTRlOTRlNjE0YTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-21T20:51:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-21T20:51:34Z"}, "message": "Auto merge of #31052 - bluss:split-at-mut-str, r=alexcrichton\n\nUse raw pointers to avoid aliasing in str::split_at_mut\n\nIntroduce private function  from_raw_parts_mut for str to factor out the logic.\n\nWe want to use raw pointers here instead of duplicating a &mut str, to\nbe on safer ground w.r.t rust aliasing rules.\n\nThis has already been fixed for slices in PR #27358, issue #27357", "tree": {"sha": "04aeed9f309d53f198f40d31c2439681259cb51b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04aeed9f309d53f198f40d31c2439681259cb51b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46dcffd05b46e62c27629f4231fc794e94e614a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46dcffd05b46e62c27629f4231fc794e94e614a8", "html_url": "https://github.com/rust-lang/rust/commit/46dcffd05b46e62c27629f4231fc794e94e614a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46dcffd05b46e62c27629f4231fc794e94e614a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae76b363c1c109b1e2ab363f92ef9db80b18075", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae76b363c1c109b1e2ab363f92ef9db80b18075", "html_url": "https://github.com/rust-lang/rust/commit/9ae76b363c1c109b1e2ab363f92ef9db80b18075"}, {"sha": "ba9a3bc4533bccbb0db70bd975109916c3b8754f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9a3bc4533bccbb0db70bd975109916c3b8754f", "html_url": "https://github.com/rust-lang/rust/commit/ba9a3bc4533bccbb0db70bd975109916c3b8754f"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "3892455395f76eeb9d78532049d9929daa006688", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/46dcffd05b46e62c27629f4231fc794e94e614a8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46dcffd05b46e62c27629f4231fc794e94e614a8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=46dcffd05b46e62c27629f4231fc794e94e614a8", "patch": "@@ -244,6 +244,34 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n     Ok(unsafe { from_utf8_unchecked(v) })\n }\n \n+/// Forms a str from a pointer and a length.\n+///\n+/// The `len` argument is the number of bytes in the string.\n+///\n+/// # Safety\n+///\n+/// This function is unsafe as there is no guarantee that the given pointer is\n+/// valid for `len` bytes, nor whether the lifetime inferred is a suitable\n+/// lifetime for the returned str.\n+///\n+/// The data must be valid UTF-8\n+///\n+/// `p` must be non-null, even for zero-length str.\n+///\n+/// # Caveat\n+///\n+/// The lifetime for the returned str is inferred from its usage. To\n+/// prevent accidental misuse, it's suggested to tie the lifetime to whichever\n+/// source lifetime is safe in the context, such as by providing a helper\n+/// function taking the lifetime of a host value for the str, or by explicit\n+/// annotation.\n+/// Performs the same functionality as `from_raw_parts`, except that a mutable\n+/// str is returned.\n+///\n+unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n+    mem::transmute::<&mut [u8], &mut str>(slice::from_raw_parts_mut(p, len))\n+}\n+\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8.\n ///\n@@ -1843,10 +1871,10 @@ impl StrExt for str {\n         // is_char_boundary checks that the index is in [0, .len()]\n         if self.is_char_boundary(mid) {\n             let len = self.len();\n+            let ptr = self.as_ptr() as *mut u8;\n             unsafe {\n-                let self2: &mut str = mem::transmute_copy(&self);\n-                (self.slice_mut_unchecked(0, mid),\n-                 self2.slice_mut_unchecked(mid, len))\n+                (from_raw_parts_mut(ptr, mid),\n+                 from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n             }\n         } else {\n             slice_error_fail(self, 0, mid)"}]}