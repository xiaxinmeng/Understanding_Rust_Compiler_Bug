{"sha": "d73fae1b28b3a12a5c22df71fc7be5fdb5f66e67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3M2ZhZTFiMjhiM2ExMmE1YzIyZGY3MWZjN2JlNWZkYjVmNjZlNjc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T17:17:54Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T17:20:06Z"}, "message": "Remove F_SETFD command", "tree": {"sha": "a124fb0b45ca7cdeb0873c050b9337ef72e4faf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a124fb0b45ca7cdeb0873c050b9337ef72e4faf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d73fae1b28b3a12a5c22df71fc7be5fdb5f66e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d73fae1b28b3a12a5c22df71fc7be5fdb5f66e67", "html_url": "https://github.com/rust-lang/rust/commit/d73fae1b28b3a12a5c22df71fc7be5fdb5f66e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d73fae1b28b3a12a5c22df71fc7be5fdb5f66e67/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c6797c5c145f597e37dae53031babb0aaf7735", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c6797c5c145f597e37dae53031babb0aaf7735", "html_url": "https://github.com/rust-lang/rust/commit/a1c6797c5c145f597e37dae53031babb0aaf7735"}], "stats": {"total": 26, "additions": 4, "deletions": 22}, "files": [{"sha": "443a61c46e9aa23b9da599375fee5dad5516488c", "filename": "src/shims/fs.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d73fae1b28b3a12a5c22df71fc7be5fdb5f66e67/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73fae1b28b3a12a5c22df71fc7be5fdb5f66e67/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=d73fae1b28b3a12a5c22df71fc7be5fdb5f66e67", "patch": "@@ -108,7 +108,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         fd_op: OpTy<'tcx, Tag>,\n         cmd_op: OpTy<'tcx, Tag>,\n-        arg_op: Option<OpTy<'tcx, Tag>>,\n+        _arg_op: Option<OpTy<'tcx, Tag>>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n@@ -118,29 +118,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let cmd = this.read_scalar(cmd_op)?.to_i32()?;\n-\n-        if cmd == this.eval_libc_i32(\"F_SETFD\")? {\n-            // This does not affect the file itself. Certain flags might require changing the file\n-            // or the way it is accessed somehow.\n-            let flag = this.read_scalar(arg_op.unwrap())?.to_i32()?;\n-            // The only usage of this in stdlib at the moment is to enable the `FD_CLOEXEC` flag.\n-            let fd_cloexec = this.eval_libc_i32(\"FD_CLOEXEC\")?;\n-            if let Some(FileHandle { flag: old_flag, .. }) =\n-                this.machine.file_handler.handles.get_mut(&fd)\n-            {\n-                // Check that the only difference between the old flag and the current flag is\n-                // exactly the `FD_CLOEXEC` value.\n-                if flag ^ *old_flag == fd_cloexec {\n-                    *old_flag = flag;\n-                } else {\n-                    throw_unsup_format!(\"Unsupported arg {:#x} for `F_SETFD`\", flag);\n-                }\n-            }\n-            Ok(0)\n-        } else if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n+        // We only support getting the flags for a descriptor\n+        if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n             this.get_handle_and(fd, |handle| Ok(handle.flag))\n         } else {\n-            throw_unsup_format!(\"Unsupported command {:#x}\", cmd);\n+            throw_unsup_format!(\"The {:#x} command is not supported for `fcntl`)\", cmd);\n         }\n     }\n "}]}