{"sha": "eaf88c5b5299dfe721cb777b1632a18f8fff3cd0", "node_id": "C_kwDOAAsO6NoAKGVhZjg4YzViNTI5OWRmZTcyMWNiNzc3YjE2MzJhMThmOGZmZjNjZDA", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T02:56:56Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T13:45:18Z"}, "message": "Skeleton for multiple arch support", "tree": {"sha": "94f504992161105f2c24b6f49c940e26aa506702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94f504992161105f2c24b6f49c940e26aa506702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf88c5b5299dfe721cb777b1632a18f8fff3cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf88c5b5299dfe721cb777b1632a18f8fff3cd0", "html_url": "https://github.com/rust-lang/rust/commit/eaf88c5b5299dfe721cb777b1632a18f8fff3cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf88c5b5299dfe721cb777b1632a18f8fff3cd0/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe3ba31860f2eb93f1f1cb1fe45658a8dd4d7610", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3ba31860f2eb93f1f1cb1fe45658a8dd4d7610", "html_url": "https://github.com/rust-lang/rust/commit/fe3ba31860f2eb93f1f1cb1fe45658a8dd4d7610"}], "stats": {"total": 116, "additions": 77, "deletions": 39}, "files": [{"sha": "19c3a9b82d1997d33af37e8a3ec1a35edda112bb", "filename": "src/inline_asm.rs", "status": "modified", "additions": 77, "deletions": 39, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/eaf88c5b5299dfe721cb777b1632a18f8fff3cd0/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf88c5b5299dfe721cb777b1632a18f8fff3cd0/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=eaf88c5b5299dfe721cb777b1632a18f8fff3cd0", "patch": "@@ -402,9 +402,12 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         writeln!(generated_asm, \".section .text.{},\\\"ax\\\",@progbits\", asm_name).unwrap();\n         writeln!(generated_asm, \"{}:\", asm_name).unwrap();\n \n-        generated_asm.push_str(\".intel_syntax noprefix\\n\");\n-        generated_asm.push_str(\"    push rbp\\n\");\n-        generated_asm.push_str(\"    mov rbp,rdi\\n\");\n+        let is_x86 = matches!(self.arch, InlineAsmArch::X86 | InlineAsmArch::X86_64);\n+\n+        if is_x86 {\n+            generated_asm.push_str(\".intel_syntax noprefix\\n\");\n+        }\n+        Self::prologue(&mut generated_asm, self.arch);\n \n         // Save clobbered registers\n         if !self.options.contains(InlineAsmOptions::NORETURN) {\n@@ -414,7 +417,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                 .zip(self.stack_slots_clobber.iter().copied())\n                 .filter_map(|(r, s)| r.zip(s))\n             {\n-                save_register(&mut generated_asm, self.arch, reg, slot);\n+                Self::save_register(&mut generated_asm, self.arch, reg, slot);\n             }\n         }\n \n@@ -425,10 +428,10 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n             .zip(self.stack_slots_input.iter().copied())\n             .filter_map(|(r, s)| r.zip(s))\n         {\n-            restore_register(&mut generated_asm, self.arch, reg, slot);\n+            Self::restore_register(&mut generated_asm, self.arch, reg, slot);\n         }\n \n-        if self.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+        if is_x86 && self.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n             generated_asm.push_str(\".att_syntax\\n\");\n         }\n \n@@ -460,7 +463,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                 .zip(self.stack_slots_output.iter().copied())\n                 .filter_map(|(r, s)| r.zip(s))\n             {\n-                save_register(&mut generated_asm, self.arch, reg, slot);\n+                Self::save_register(&mut generated_asm, self.arch, reg, slot);\n             }\n \n             // Restore clobbered registers\n@@ -470,22 +473,84 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                 .zip(self.stack_slots_clobber.iter().copied())\n                 .filter_map(|(r, s)| r.zip(s))\n             {\n-                restore_register(&mut generated_asm, self.arch, reg, slot);\n+                Self::restore_register(&mut generated_asm, self.arch, reg, slot);\n             }\n \n-            generated_asm.push_str(\"    pop rbp\\n\");\n-            generated_asm.push_str(\"    ret\\n\");\n+            Self::epilogue(&mut generated_asm, self.arch);\n         } else {\n-            generated_asm.push_str(\"    ud2\\n\");\n+            Self::epilogue_noreturn(&mut generated_asm, self.arch);\n         }\n \n-        generated_asm.push_str(\".att_syntax\\n\");\n+        if is_x86 {\n+            generated_asm.push_str(\".att_syntax\\n\");\n+        }\n         writeln!(generated_asm, \".size {name}, .-{name}\", name = asm_name).unwrap();\n         generated_asm.push_str(\".text\\n\");\n         generated_asm.push_str(\"\\n\\n\");\n \n         generated_asm\n     }\n+\n+    fn prologue(generated_asm: &mut String, arch: InlineAsmArch) {\n+        match arch {\n+            InlineAsmArch::X86_64 => {\n+                generated_asm.push_str(\"    push rbp\\n\");\n+                generated_asm.push_str(\"    mov rbp,rdi\\n\");\n+            }\n+            _ => unimplemented!(\"prologue for {:?}\", arch),\n+        }\n+    }\n+\n+    fn epilogue(generated_asm: &mut String, arch: InlineAsmArch) {\n+        match arch {\n+            InlineAsmArch::X86_64 => {\n+                generated_asm.push_str(\"    pop rbp\\n\");\n+                generated_asm.push_str(\"    ret\\n\");\n+            }\n+            _ => unimplemented!(\"epilogue for {:?}\", arch),\n+        }\n+    }\n+\n+    fn epilogue_noreturn(generated_asm: &mut String, arch: InlineAsmArch) {\n+        match arch {\n+            InlineAsmArch::X86_64 => {\n+                generated_asm.push_str(\"    ud2\\n\");\n+            }\n+            _ => unimplemented!(\"epilogue_noreturn for {:?}\", arch),\n+        }\n+    }\n+\n+    fn save_register(\n+        generated_asm: &mut String,\n+        arch: InlineAsmArch,\n+        reg: InlineAsmReg,\n+        offset: Size,\n+    ) {\n+        match arch {\n+            InlineAsmArch::X86_64 => {\n+                write!(generated_asm, \"    mov [rbp+0x{:x}], \", offset.bytes()).unwrap();\n+                reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n+                generated_asm.push('\\n');\n+            }\n+            _ => unimplemented!(\"save_register for {:?}\", arch),\n+        }\n+    }\n+\n+    fn restore_register(\n+        generated_asm: &mut String,\n+        arch: InlineAsmArch,\n+        reg: InlineAsmReg,\n+        offset: Size,\n+    ) {\n+        match arch {\n+            InlineAsmArch::X86_64 => {\n+                generated_asm.push_str(\"    mov \");\n+                reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n+                writeln!(generated_asm, \", [rbp+0x{:x}]\", offset.bytes()).unwrap();\n+            }\n+            _ => unimplemented!(\"restore_register for {:?}\", arch),\n+        }\n+    }\n }\n \n fn call_inline_asm<'tcx>(\n@@ -533,30 +598,3 @@ fn call_inline_asm<'tcx>(\n         place.write_cvalue(fx, CValue::by_val(value, place.layout()));\n     }\n }\n-\n-fn save_register(generated_asm: &mut String, arch: InlineAsmArch, reg: InlineAsmReg, offset: Size) {\n-    match arch {\n-        InlineAsmArch::X86_64 => {\n-            write!(generated_asm, \"    mov [rbp+0x{:x}], \", offset.bytes()).unwrap();\n-            reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n-            generated_asm.push('\\n');\n-        }\n-        _ => unimplemented!(\"save_register for {:?}\", arch),\n-    }\n-}\n-\n-fn restore_register(\n-    generated_asm: &mut String,\n-    arch: InlineAsmArch,\n-    reg: InlineAsmReg,\n-    offset: Size,\n-) {\n-    match arch {\n-        InlineAsmArch::X86_64 => {\n-            generated_asm.push_str(\"    mov \");\n-            reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n-            writeln!(generated_asm, \", [rbp+0x{:x}]\", offset.bytes()).unwrap();\n-        }\n-        _ => unimplemented!(\"restore_register for {:?}\", arch),\n-    }\n-}"}]}