{"sha": "5ca7ebb6d271c593605e03046abbd3a3849036b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTdlYmI2ZDI3MWM1OTM2MDVlMDMwNDZhYmJkM2EzODQ5MDM2YjM=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-26T22:49:37Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-26T22:57:55Z"}, "message": "Fix false positives when iterator variable is used after the loop", "tree": {"sha": "2e76ddc48b76d1a5d9c9388efa2aa1691f827c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e76ddc48b76d1a5d9c9388efa2aa1691f827c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca7ebb6d271c593605e03046abbd3a3849036b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca7ebb6d271c593605e03046abbd3a3849036b3", "html_url": "https://github.com/rust-lang/rust/commit/5ca7ebb6d271c593605e03046abbd3a3849036b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca7ebb6d271c593605e03046abbd3a3849036b3/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66419582b5dde68e3219ed1686babc0c9e9df4d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/66419582b5dde68e3219ed1686babc0c9e9df4d5", "html_url": "https://github.com/rust-lang/rust/commit/66419582b5dde68e3219ed1686babc0c9e9df4d5"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "d056c67c541f36d14049529068ec70d87cdaad33", "filename": "src/loops.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5ca7ebb6d271c593605e03046abbd3a3849036b3/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca7ebb6d271c593605e03046abbd3a3849036b3/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=5ca7ebb6d271c593605e03046abbd3a3849036b3", "patch": "@@ -11,7 +11,8 @@ use std::collections::{HashSet,HashMap};\n use syntax::ast::Lit_::*;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type,\n-            in_external_macro, expr_block, span_help_and_lint, is_integer_literal};\n+            in_external_macro, expr_block, span_help_and_lint, is_integer_literal,\n+            get_enclosing_block};\n use utils::{VEC_PATH, LL_PATH};\n \n declare_lint!{ pub NEEDLESS_RANGE_LOOP, Warn,\n@@ -232,17 +233,16 @@ impl LateLintPass for LoopsPass {\n             }\n         }\n         if let ExprMatch(ref match_expr, ref arms, MatchSource::WhileLetDesugar) = expr.node {\n-            let body = &arms[0].body;\n             let pat = &arms[0].pats[0].node;\n             if let (&PatEnum(ref path, Some(ref pat_args)),\n                     &ExprMethodCall(method_name, _, ref method_args)) =\n                         (pat, &match_expr.node) {\n-                let iterator_def_id = var_def_id(cx, &method_args[0]);\n+                let iter_expr = &method_args[0];\n                 if let Some(lhs_constructor) = path.segments.last() {\n                     if method_name.node.as_str() == \"next\" &&\n                             match_trait_method(cx, match_expr, &[\"core\", \"iter\", \"Iterator\"]) &&\n                             lhs_constructor.identifier.name.as_str() == \"Some\" &&\n-                            !var_used(body, iterator_def_id, cx) {\n+                            !is_iterator_used_after_while_let(cx, iter_expr) {\n                         let iterator = snippet(cx, method_args[0].span, \"_\");\n                         let loop_var = snippet(cx, pat_args[0].span, \"_\");\n                         span_help_and_lint(cx, WHILE_LET_ON_ITERATOR, expr.span,\n@@ -326,32 +326,46 @@ impl<'v, 't> Visitor<'v> for VarVisitor<'v, 't> {\n     }\n }\n \n-fn var_used(expr: &Expr, def_id: Option<NodeId>, cx: &LateContext) -> bool {\n-    match def_id {\n-        None => false,\n-        Some(def_id) => {\n-            let mut visitor = VarUsedVisitor{ def_id: def_id, found: false, cx: cx };\n-            walk_expr(&mut visitor, expr);\n-            visitor.found\n-        }\n+fn is_iterator_used_after_while_let(cx: &LateContext, iter_expr: &Expr) -> bool {\n+    let def_id = match var_def_id(cx, iter_expr) {\n+        Some(id) => id,\n+        None => return false\n+    };\n+    let mut visitor = VarUsedAfterLoopVisitor {\n+        cx: cx,\n+        def_id: def_id,\n+        iter_expr_id: iter_expr.id,\n+        past_while_let: false,\n+        var_used_after_while_let: false\n+    };\n+    if let Some(enclosing_block) = get_enclosing_block(cx, def_id) {\n+        walk_block(&mut visitor, enclosing_block);\n     }\n+    visitor.var_used_after_while_let\n }\n \n-struct VarUsedVisitor<'v, 't: 'v> {\n+struct VarUsedAfterLoopVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>,\n     def_id: NodeId,\n-    found: bool\n+    iter_expr_id: NodeId,\n+    past_while_let: bool,\n+    var_used_after_while_let: bool\n }\n \n-impl<'v, 't> Visitor<'v> for VarUsedVisitor<'v, 't> {\n+impl <'v, 't> Visitor<'v> for VarUsedAfterLoopVisitor<'v, 't> {\n     fn visit_expr(&mut self, expr: &'v Expr) {\n-        if Some(self.def_id) == var_def_id(self.cx, expr) {\n-            self.found = true;\n+        if self.past_while_let {\n+            if Some(self.def_id) == var_def_id(self.cx, expr) {\n+                self.var_used_after_while_let = true;\n+            }\n+        } else if self.iter_expr_id == expr.id {\n+            self.past_while_let = true;\n         }\n         walk_expr(self, expr);\n     }\n }\n \n+\n /// Return true if the type of expr is one that provides IntoIterator impls\n /// for &T and &mut T, such as Vec.\n fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {"}, {"sha": "73b641b644e380ada6d9fc99b872039f2d1b86a7", "filename": "src/utils.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ca7ebb6d271c593605e03046abbd3a3849036b3/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca7ebb6d271c593605e03046abbd3a3849036b3/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5ca7ebb6d271c593605e03046abbd3a3849036b3", "patch": "@@ -255,6 +255,19 @@ pub fn get_parent_expr<'c>(cx: &'c LateContext, e: &Expr) -> Option<&'c Expr> {\n         if let NodeExpr(parent) = node { Some(parent) } else { None } )\n }\n \n+pub fn get_enclosing_block<'c>(cx: &'c LateContext, node: NodeId) -> Option<&'c Block> {\n+    let map = &cx.tcx.map;\n+    let enclosing_node = map.get_enclosing_scope(node)\n+                            .and_then(|enclosing_id| map.find(enclosing_id));\n+    if let Some(node) = enclosing_node {\n+        match node {\n+            NodeBlock(ref block) => Some(block),\n+            NodeItem(&Item{ node: ItemFn(_, _, _, _, _, ref block), .. }) => Some(block),\n+            _ => None\n+        }\n+    } else { None }\n+}\n+\n #[cfg(not(feature=\"structured_logging\"))]\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: Span, msg: &str) {\n     cx.span_lint(lint, sp, msg);"}, {"sha": "7d1904ad446183023d8d7147e7053f5a121cea16", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ca7ebb6d271c593605e03046abbd3a3849036b3/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca7ebb6d271c593605e03046abbd3a3849036b3/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=5ca7ebb6d271c593605e03046abbd3a3849036b3", "patch": "@@ -80,6 +80,23 @@ fn main() {\n     while let Some(x) = iter.next() {\n         println!(\"next: {:?}\", iter.next())\n     }\n+\n+    // neither can this\n+    let mut iter = 1u32..20;\n+    while let Some(x) = iter.next() {\n+        println!(\"next: {:?}\", iter.next());\n+    }\n+\n+    // or this\n+    let mut iter = 1u32..20;\n+    while let Some(x) = iter.next() {break;}\n+    println!(\"Remaining iter {:?}\", iter);\n+\n+    // or this\n+    let mut iter = 1u32..20;\n+    while let Some(x) = iter.next() {\n+        iter = 1..20;\n+    }\n }\n \n // regression test (#360)"}]}