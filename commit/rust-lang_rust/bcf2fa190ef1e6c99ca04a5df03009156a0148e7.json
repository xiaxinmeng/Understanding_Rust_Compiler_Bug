{"sha": "bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjJmYTE5MGVmMWU2Yzk5Y2EwNGE1ZGYwMzAwOTE1NmEwMTQ4ZTc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-05T22:54:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-05T22:54:36Z"}, "message": "Rollup merge of #56497 - ljedrz:cleanup_libstd_const_lifetimes, r=kennytm\n\ncleanup: remove static lifetimes from consts in libstd", "tree": {"sha": "8fe85c44535b72aa42dd11e8137035c61f33a944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe85c44535b72aa42dd11e8137035c61f33a944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCFcsCRBK7hj4Ov3rIwAAdHIIAFkw/JetY+DD23hcenSQeJaY\nGy+hgJgILwTnI6n/QhnCpG18O5j7/I698eq/MG3GHXrRjkHoIyWILupO+nnA7SMQ\neZiXsjXz2ma1GqrHQBpMpnbDObvxeNVvlcv09Ne1N3nI2Y53tWav7XL92UQQRRqB\nIz5Wu2MLx5VaamaYZTaLSgcGrRTDH0hsQk9dHrvjA0nSo+KWedJ7HYCx2V3IRPPa\n++J1iB5Z+DgMlXB0WUzMfPLmFgg147cyRp7Wp+E+ZRlWpf92kTkx2k2FKfaXMTyW\n2XS0JcsJ5UA8A56O1pA41CsKaIrQFi8Ycs/miiq7dintYLuLYVFjrF6k0hzfK24=\n=WcI/\n-----END PGP SIGNATURE-----\n", "payload": "tree 8fe85c44535b72aa42dd11e8137035c61f33a944\nparent d07d299cba0f179dca1c4052e13d49943e21f842\nparent 8c4129cd9ae079fc010b8e3d73a72659b2f0a986\nauthor Pietro Albini <pietro@pietroalbini.org> 1544050476 +0100\ncommitter GitHub <noreply@github.com> 1544050476 +0100\n\nRollup merge of #56497 - ljedrz:cleanup_libstd_const_lifetimes, r=kennytm\n\ncleanup: remove static lifetimes from consts in libstd\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "html_url": "https://github.com/rust-lang/rust/commit/bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d07d299cba0f179dca1c4052e13d49943e21f842", "url": "https://api.github.com/repos/rust-lang/rust/commits/d07d299cba0f179dca1c4052e13d49943e21f842", "html_url": "https://github.com/rust-lang/rust/commit/d07d299cba0f179dca1c4052e13d49943e21f842"}, {"sha": "8c4129cd9ae079fc010b8e3d73a72659b2f0a986", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4129cd9ae079fc010b8e3d73a72659b2f0a986", "html_url": "https://github.com/rust-lang/rust/commit/8c4129cd9ae079fc010b8e3d73a72659b2f0a986"}], "stats": {"total": 346, "additions": 173, "deletions": 173}, "files": [{"sha": "d14efa2e3c76d41816a958db480b77d4f62f564d", "filename": "src/libstd/env.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -828,7 +828,7 @@ pub mod consts {\n     /// - s390x\n     /// - sparc64\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const ARCH: &'static str = super::arch::ARCH;\n+    pub const ARCH: &str = super::arch::ARCH;\n \n     /// The family of the operating system. Example value is `unix`.\n     ///\n@@ -837,7 +837,7 @@ pub mod consts {\n     /// - unix\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const FAMILY: &'static str = os::FAMILY;\n+    pub const FAMILY: &str = os::FAMILY;\n \n     /// A string describing the specific operating system in use.\n     /// Example value is `linux`.\n@@ -856,7 +856,7 @@ pub mod consts {\n     /// - android\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const OS: &'static str = os::OS;\n+    pub const OS: &str = os::OS;\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform. Example value is `lib`.\n@@ -866,7 +866,7 @@ pub mod consts {\n     /// - lib\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_PREFIX: &'static str = os::DLL_PREFIX;\n+    pub const DLL_PREFIX: &str = os::DLL_PREFIX;\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform. Example value is `.so`.\n@@ -877,7 +877,7 @@ pub mod consts {\n     /// - .dylib\n     /// - .dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_SUFFIX: &'static str = os::DLL_SUFFIX;\n+    pub const DLL_SUFFIX: &str = os::DLL_SUFFIX;\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot. Example value is `so`.\n@@ -888,7 +888,7 @@ pub mod consts {\n     /// - dylib\n     /// - dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_EXTENSION: &'static str = os::DLL_EXTENSION;\n+    pub const DLL_EXTENSION: &str = os::DLL_EXTENSION;\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform. Example value is `.exe`.\n@@ -900,7 +900,7 @@ pub mod consts {\n     /// - .pexe\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const EXE_SUFFIX: &'static str = os::EXE_SUFFIX;\n+    pub const EXE_SUFFIX: &str = os::EXE_SUFFIX;\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform. Example value is `exe`.\n@@ -910,72 +910,72 @@ pub mod consts {\n     /// - exe\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const EXE_EXTENSION: &'static str = os::EXE_EXTENSION;\n+    pub const EXE_EXTENSION: &str = os::EXE_EXTENSION;\n }\n \n #[cfg(target_arch = \"x86\")]\n mod arch {\n-    pub const ARCH: &'static str = \"x86\";\n+    pub const ARCH: &str = \"x86\";\n }\n \n #[cfg(target_arch = \"x86_64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"x86_64\";\n+    pub const ARCH: &str = \"x86_64\";\n }\n \n #[cfg(target_arch = \"arm\")]\n mod arch {\n-    pub const ARCH: &'static str = \"arm\";\n+    pub const ARCH: &str = \"arm\";\n }\n \n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"aarch64\";\n+    pub const ARCH: &str = \"aarch64\";\n }\n \n #[cfg(target_arch = \"mips\")]\n mod arch {\n-    pub const ARCH: &'static str = \"mips\";\n+    pub const ARCH: &str = \"mips\";\n }\n \n #[cfg(target_arch = \"mips64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"mips64\";\n+    pub const ARCH: &str = \"mips64\";\n }\n \n #[cfg(target_arch = \"powerpc\")]\n mod arch {\n-    pub const ARCH: &'static str = \"powerpc\";\n+    pub const ARCH: &str = \"powerpc\";\n }\n \n #[cfg(target_arch = \"powerpc64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"powerpc64\";\n+    pub const ARCH: &str = \"powerpc64\";\n }\n \n #[cfg(target_arch = \"s390x\")]\n mod arch {\n-    pub const ARCH: &'static str = \"s390x\";\n+    pub const ARCH: &str = \"s390x\";\n }\n \n #[cfg(target_arch = \"sparc64\")]\n mod arch {\n-    pub const ARCH: &'static str = \"sparc64\";\n+    pub const ARCH: &str = \"sparc64\";\n }\n \n #[cfg(target_arch = \"le32\")]\n mod arch {\n-    pub const ARCH: &'static str = \"le32\";\n+    pub const ARCH: &str = \"le32\";\n }\n \n #[cfg(target_arch = \"asmjs\")]\n mod arch {\n-    pub const ARCH: &'static str = \"asmjs\";\n+    pub const ARCH: &str = \"asmjs\";\n }\n \n #[cfg(target_arch = \"wasm32\")]\n mod arch {\n-    pub const ARCH: &'static str = \"wasm32\";\n+    pub const ARCH: &str = \"wasm32\";\n }\n \n #[cfg(test)]"}, {"sha": "7c7f83967e051b206636e9700afe09cd987dfedb", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -671,7 +671,7 @@ impl fmt::Debug for CStr {\n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n impl<'a> Default for &'a CStr {\n     fn default() -> &'a CStr {\n-        const SLICE: &'static [c_char] = &[0];\n+        const SLICE: &[c_char] = &[0];\n         unsafe { CStr::from_ptr(SLICE.as_ptr()) }\n     }\n }\n@@ -1475,7 +1475,7 @@ mod tests {\n \n     #[test]\n     fn cstr_const_constructor() {\n-        const CSTR: &'static CStr = unsafe {\n+        const CSTR: &CStr = unsafe {\n             CStr::from_bytes_with_nul_unchecked(b\"Hello, world!\\0\")\n         };\n "}, {"sha": "c1eaf29bb44072e8dc8ea35a5c6837d36c188dd4", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -65,7 +65,7 @@ mod as_keyword { }\n /// look like this:\n ///\n /// ```rust\n-/// const WORDS: &'static str = \"hello rust!\";\n+/// const WORDS: &str = \"hello rust!\";\n /// ```\n ///\n /// Thanks to static lifetime elision, you usually don't have to explicitly use 'static:"}, {"sha": "c7691e3b2df29fd85657127d0aa7dbbcbc9d03f9", "filename": "src/libstd/sys/cloudabi/shims/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub mod os {\n-    pub const FAMILY: &'static str = \"cloudabi\";\n-    pub const OS: &'static str = \"cloudabi\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"cloudabi\";\n+    pub const OS: &str = \"cloudabi\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }"}, {"sha": "75e35046fb72523b53a87f7b890cd02dbbe9289b", "filename": "src/libstd/sys/redox/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fredox%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fredox%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fenv.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub mod os {\n-    pub const FAMILY: &'static str = \"redox\";\n-    pub const OS: &'static str = \"redox\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"redox\";\n+    pub const OS: &str = \"redox\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }"}, {"sha": "b1a4ed30404c0363a22c02457c88e627ea16406f", "filename": "src/libstd/sys/redox/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpath.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -35,5 +35,5 @@ pub fn parse_prefix(path: &OsStr) -> Option<Prefix> {\n     }\n }\n \n-pub const MAIN_SEP_STR: &'static str = \"/\";\n+pub const MAIN_SEP_STR: &str = \"/\";\n pub const MAIN_SEP: char = '/';"}, {"sha": "8f6d83c544a5417dadbb1d400ca452deadd60d9f", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -143,7 +143,7 @@ impl Command {\n \n     pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)\n                  -> io::Result<(Process, StdioPipes)> {\n-         const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n+         const CLOEXEC_MSG_FOOTER: &[u8] = b\"NOEX\";\n \n          if self.saw_nul {\n              return Err(io::Error::new(ErrorKind::InvalidInput,"}, {"sha": "1b6838f0295ef3e90b3321bc5c6fda2360861d1a", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -10,176 +10,176 @@\n \n #[cfg(target_os = \"linux\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"linux\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"linux\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"macos\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"macos\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".dylib\";\n-    pub const DLL_EXTENSION: &'static str = \"dylib\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"macos\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".dylib\";\n+    pub const DLL_EXTENSION: &str = \"dylib\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"ios\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"ios\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".dylib\";\n-    pub const DLL_EXTENSION: &'static str = \"dylib\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"ios\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".dylib\";\n+    pub const DLL_EXTENSION: &str = \"dylib\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"freebsd\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"freebsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"freebsd\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"dragonfly\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"dragonfly\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"dragonfly\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"bitrig\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"bitrig\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"bitrig\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"netbsd\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"netbsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"netbsd\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"openbsd\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"openbsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"openbsd\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"android\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"android\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"android\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"solaris\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"solaris\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"solaris\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"haiku\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"haiku\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"haiku\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"emscripten\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".js\";\n-    pub const EXE_EXTENSION: &'static str = \"js\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"emscripten\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \".js\";\n+    pub const EXE_EXTENSION: &str = \"js\";\n }\n \n #[cfg(all(target_os = \"emscripten\", target_arch = \"wasm32\"))]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"emscripten\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".js\";\n-    pub const EXE_EXTENSION: &'static str = \"js\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"emscripten\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \".js\";\n+    pub const EXE_EXTENSION: &str = \"js\";\n }\n \n #[cfg(target_os = \"fuchsia\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"fuchsia\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"fuchsia\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"l4re\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"l4re\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"l4re\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }\n \n #[cfg(target_os = \"hermit\")]\n pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"hermit\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"hermit\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n }"}, {"sha": "834b4b448dc8a9300f6632a78b159cd2406d0af3", "filename": "src/libstd/sys/unix/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Funix%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Funix%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpath.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -25,5 +25,5 @@ pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n     None\n }\n \n-pub const MAIN_SEP_STR: &'static str = \"/\";\n+pub const MAIN_SEP_STR: &str = \"/\";\n pub const MAIN_SEP: char = '/';"}, {"sha": "3248f4244607122c20264b74ebdfe5766744f69f", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -22,7 +22,7 @@ use sys;\n impl Command {\n     pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)\n                  -> io::Result<(Process, StdioPipes)> {\n-        const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n+        const CLOEXEC_MSG_FOOTER: &[u8] = b\"NOEX\";\n \n         let envp = self.capture_env();\n "}, {"sha": "09235a944eec083633d87d576a7efa6017c301c2", "filename": "src/libstd/sys/wasm/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwasm%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwasm%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fenv.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub mod os {\n-    pub const FAMILY: &'static str = \"\";\n-    pub const OS: &'static str = \"\";\n-    pub const DLL_PREFIX: &'static str = \"\";\n-    pub const DLL_SUFFIX: &'static str = \".wasm\";\n-    pub const DLL_EXTENSION: &'static str = \"wasm\";\n-    pub const EXE_SUFFIX: &'static str = \".wasm\";\n-    pub const EXE_EXTENSION: &'static str = \"wasm\";\n+    pub const FAMILY: &str = \"\";\n+    pub const OS: &str = \"\";\n+    pub const DLL_PREFIX: &str = \"\";\n+    pub const DLL_SUFFIX: &str = \".wasm\";\n+    pub const DLL_EXTENSION: &str = \"wasm\";\n+    pub const EXE_SUFFIX: &str = \".wasm\";\n+    pub const EXE_EXTENSION: &str = \"wasm\";\n }"}, {"sha": "fcc9d617a876acb53ec053c111c422afcbaab9f3", "filename": "src/libstd/sys/wasm/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpath.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -25,5 +25,5 @@ pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n     None\n }\n \n-pub const MAIN_SEP_STR: &'static str = \"/\";\n+pub const MAIN_SEP_STR: &str = \"/\";\n pub const MAIN_SEP: char = '/';"}, {"sha": "4523df04f247d46a043ab2a5cb6856be2ae693b7", "filename": "src/libstd/sys/windows/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub mod os {\n-    pub const FAMILY: &'static str = \"windows\";\n-    pub const OS: &'static str = \"windows\";\n-    pub const DLL_PREFIX: &'static str = \"\";\n-    pub const DLL_SUFFIX: &'static str = \".dll\";\n-    pub const DLL_EXTENSION: &'static str = \"dll\";\n-    pub const EXE_SUFFIX: &'static str = \".exe\";\n-    pub const EXE_EXTENSION: &'static str = \"exe\";\n+    pub const FAMILY: &str = \"windows\";\n+    pub const OS: &str = \"windows\";\n+    pub const DLL_PREFIX: &str = \"\";\n+    pub const DLL_SUFFIX: &str = \".dll\";\n+    pub const DLL_EXTENSION: &str = \"dll\";\n+    pub const EXE_SUFFIX: &str = \".exe\";\n+    pub const EXE_EXTENSION: &str = \"exe\";\n }"}, {"sha": "4d7b7236c59c64b0e60dbbed5d0c7b878f593102", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -48,8 +48,8 @@ pub fn error_string(mut errnum: i32) -> String {\n         // `[MS-ERREF]`: https://msdn.microsoft.com/en-us/library/cc231198.aspx\n         if (errnum & c::FACILITY_NT_BIT as i32) != 0 {\n             // format according to https://support.microsoft.com/en-us/help/259693\n-            const NTDLL_DLL: &'static [u16] = &['N' as _, 'T' as _, 'D' as _, 'L' as _, 'L' as _,\n-                                                '.' as _, 'D' as _, 'L' as _, 'L' as _, 0];\n+            const NTDLL_DLL: &[u16] = &['N' as _, 'T' as _, 'D' as _, 'L' as _, 'L' as _,\n+                                        '.' as _, 'D' as _, 'L' as _, 'L' as _, 0];\n             module = c::GetModuleHandleW(NTDLL_DLL.as_ptr());\n \n             if module != ptr::null_mut() {"}, {"sha": "385ea8e0531674232105e6f00c695b14f0723a31", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -99,5 +99,5 @@ pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix> {\n     }\n }\n \n-pub const MAIN_SEP_STR: &'static str = \"\\\\\";\n+pub const MAIN_SEP_STR: &str = \"\\\\\";\n pub const MAIN_SEP: char = '\\\\';"}, {"sha": "3530b7af9ad056b956ebd6845b835c3724732352", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf2fa190ef1e6c99ca04a5df03009156a0148e7/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=bcf2fa190ef1e6c99ca04a5df03009156a0148e7", "patch": "@@ -40,7 +40,7 @@ use str;\n use sync::Arc;\n use sys_common::AsInner;\n \n-const UTF8_REPLACEMENT_CHARACTER: &'static str = \"\\u{FFFD}\";\n+const UTF8_REPLACEMENT_CHARACTER: &str = \"\\u{FFFD}\";\n \n /// A Unicode code point: from U+0000 to U+10FFFF.\n ///"}]}