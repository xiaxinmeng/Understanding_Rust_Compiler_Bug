{"sha": "2045dfed248d179c94d58eed7ca2922010b0fffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNDVkZmVkMjQ4ZDE3OWM5NGQ1OGVlZDdjYTI5MjIwMTBiMGZmZmM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-21T16:10:25Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T16:22:19Z"}, "message": "Update tests", "tree": {"sha": "8b0e0d8de89ee37586c5037bffbfb6913cf2da23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b0e0d8de89ee37586c5037bffbfb6913cf2da23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2045dfed248d179c94d58eed7ca2922010b0fffc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk3bsACgkQaTCGhp1Q\nZjc3NA//fhopEcrlhgMUZwekB8F1WRB1bJt1ROHXN3wkVKezkIOmKW/7wRVbH8CF\nc1lGGkNJ2N/xGzEop2/LxpUcY4zJNDUU8n/0G9obPDEaKOWtSn8MSd2lRlLOaGuF\nTbLjgOgcFfB4BzK2/XR15GL+Q746HnDbwa5I8QKqedAQkajwTqLK8oKcaAyFMpcJ\nnWL9eODc8jMTIQ0/Ncf9rYRjq+VDunqXUlR0vta4jYDWXL2CKEN9eFe5A1/2PG8P\n3ZEhljRg/mkxMNZreUvIV32ZKIV96pWq44mOk28TIGR2/+hM8Ie41EGf4EfLdhXP\nyVM6HdAEPOJaehuEt1zZMIl+miCdi7Ejg2JcBvdld/yhRNz4Olb8cNd8FgEZDr9D\nXtU9z15j8BWXJmVncpfJ0DezsqCyyQ/ccn2nZ3Tefa3Cqd+JPNK3qgRHHigitqg5\nRYu0suy2rMeFfM3pHVSI61a5oH1PJ3zKORatBzU9dEyypADozpwFaI0uO7uFPWXH\nWcO/v7fiBJs7Mo20eYtA/NXRJnbPlpEFnC2B7EK+uV8+COp0TszYCCKbxk5YIRdr\n4weWvTtCZPIrlbqTILuR73NVIwRbwmDMp+BzWq7U/zwXeltSM31hKjzIHNFXFetk\nxnAFcf4joA0qR4ay/FGHlUMpGiAhDYZjw8qLDvzqI8hIxwYJmJk=\n=RWau\n-----END PGP SIGNATURE-----", "payload": "tree 8b0e0d8de89ee37586c5037bffbfb6913cf2da23\nparent 28a5c414c34b524fa8a264d2ec86bc31b7474105\nauthor flip1995 <hello@philkrones.com> 1553184625 +0100\ncommitter flip1995 <hello@philkrones.com> 1554308539 +0200\n\nUpdate tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2045dfed248d179c94d58eed7ca2922010b0fffc", "html_url": "https://github.com/rust-lang/rust/commit/2045dfed248d179c94d58eed7ca2922010b0fffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2045dfed248d179c94d58eed7ca2922010b0fffc/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a5c414c34b524fa8a264d2ec86bc31b7474105", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a5c414c34b524fa8a264d2ec86bc31b7474105", "html_url": "https://github.com/rust-lang/rust/commit/28a5c414c34b524fa8a264d2ec86bc31b7474105"}], "stats": {"total": 95, "additions": 38, "deletions": 57}, "files": [{"sha": "3264099c876d0bbf178be2de6a1764078e1fa9ea", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2045dfed248d179c94d58eed7ca2922010b0fffc/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2045dfed248d179c94d58eed7ca2922010b0fffc/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs?ref=2045dfed248d179c94d58eed7ca2922010b0fffc", "patch": "@@ -1,13 +1,11 @@\n-// compile-flags: -Z internal-lints\n+// compile-flags: -Z unstable-options\n \n #![feature(rustc_private)]\n \n extern crate rustc_data_structures;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::collections::{HashMap, HashSet};\n-//~^ WARNING Prefer FxHashMap over HashMap, it has better performance\n-//~^^ WARNING Prefer FxHashSet over HashSet, it has better performance\n \n #[deny(default_hash_types)]\n fn main() {"}, {"sha": "64f322cb0c165b13ddfe34d7babb3019b3e636f0", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.stderr", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2045dfed248d179c94d58eed7ca2922010b0fffc/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2045dfed248d179c94d58eed7ca2922010b0fffc/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr?ref=2045dfed248d179c94d58eed7ca2922010b0fffc", "patch": "@@ -1,51 +1,34 @@\n-warning: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/default_hash_types.rs:8:24\n-   |\n-LL | use std::collections::{HashMap, HashSet};\n-   |                        ^^^^^^^ help: use: `FxHashMap`\n-   |\n-   = note: #[warn(default_hash_types)] on by default\n-   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n-\n-warning: Prefer FxHashSet over HashSet, it has better performance\n-  --> $DIR/default_hash_types.rs:8:33\n-   |\n-LL | use std::collections::{HashMap, HashSet};\n-   |                                 ^^^^^^^ help: use: `FxHashSet`\n-   |\n-   = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n-\n error: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/default_hash_types.rs:14:15\n+  --> $DIR/default_hash_types.rs:12:15\n    |\n LL |     let _map: HashMap<String, String> = HashMap::default();\n    |               ^^^^^^^ help: use: `FxHashMap`\n    |\n note: lint level defined here\n-  --> $DIR/default_hash_types.rs:12:8\n+  --> $DIR/default_hash_types.rs:10:8\n    |\n LL | #[deny(default_hash_types)]\n    |        ^^^^^^^^^^^^^^^^^^\n    = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n error: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/default_hash_types.rs:14:41\n+  --> $DIR/default_hash_types.rs:12:41\n    |\n LL |     let _map: HashMap<String, String> = HashMap::default();\n    |                                         ^^^^^^^ help: use: `FxHashMap`\n    |\n    = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n error: Prefer FxHashSet over HashSet, it has better performance\n-  --> $DIR/default_hash_types.rs:17:15\n+  --> $DIR/default_hash_types.rs:15:15\n    |\n LL |     let _set: HashSet<String> = HashSet::default();\n    |               ^^^^^^^ help: use: `FxHashSet`\n    |\n    = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n \n error: Prefer FxHashSet over HashSet, it has better performance\n-  --> $DIR/default_hash_types.rs:17:33\n+  --> $DIR/default_hash_types.rs:15:33\n    |\n LL |     let _set: HashSet<String> = HashSet::default();\n    |                                 ^^^^^^^ help: use: `FxHashSet`"}, {"sha": "dba0db69b7f39543ca46f2216d97dc5022d7b8a3", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2045dfed248d179c94d58eed7ca2922010b0fffc/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2045dfed248d179c94d58eed7ca2922010b0fffc/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=2045dfed248d179c94d58eed7ca2922010b0fffc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z internal-lints\n+// compile-flags: -Z unstable-options\n \n #![feature(rustc_private)]\n "}, {"sha": "4e94af12453cdaf35716d5d2812056d4036d032a", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2045dfed248d179c94d58eed7ca2922010b0fffc/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2045dfed248d179c94d58eed7ca2922010b0fffc/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=2045dfed248d179c94d58eed7ca2922010b0fffc", "patch": "@@ -1,7 +1,7 @@\n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:11:15\n    |\n-LL |     let sty = TyKind::Bool; //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |     let sty = TyKind::Bool;\n    |               ^^^^^^ help: try using ty::<kind> directly: `ty`\n    |\n note: lint level defined here\n@@ -13,181 +13,181 @@ LL | #[deny(usage_of_ty_tykind)]\n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:14:9\n    |\n-LL |         TyKind::Bool => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Bool => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:15:9\n    |\n-LL |         TyKind::Char => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Char => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:16:9\n    |\n-LL |         TyKind::Int(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Int(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:17:9\n    |\n-LL |         TyKind::Uint(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Uint(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:18:9\n    |\n-LL |         TyKind::Float(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Float(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:19:9\n    |\n-LL |         TyKind::Adt(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Adt(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:20:9\n    |\n-LL |         TyKind::Foreign(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Foreign(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:21:9\n    |\n-LL |         TyKind::Str => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Str => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:22:9\n    |\n-LL |         TyKind::Array(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Array(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:23:9\n    |\n-LL |         TyKind::Slice(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Slice(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:24:9\n    |\n-LL |         TyKind::RawPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::RawPtr(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:25:9\n    |\n-LL |         TyKind::Ref(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Ref(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:26:9\n    |\n-LL |         TyKind::FnDef(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::FnDef(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:27:9\n    |\n-LL |         TyKind::FnPtr(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::FnPtr(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:28:9\n    |\n-LL |         TyKind::Dynamic(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Dynamic(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:29:9\n    |\n-LL |         TyKind::Closure(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Closure(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:30:9\n    |\n-LL |         TyKind::Generator(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Generator(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:31:9\n    |\n-LL |         TyKind::GeneratorWitness(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::GeneratorWitness(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:32:9\n    |\n-LL |         TyKind::Never => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Never => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:33:9\n    |\n-LL |         TyKind::Tuple(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Tuple(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:34:9\n    |\n-LL |         TyKind::Projection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Projection(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:35:9\n    |\n-LL |         TyKind::UnnormalizedProjection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::UnnormalizedProjection(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:36:9\n    |\n-LL |         TyKind::Opaque(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Opaque(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:37:9\n    |\n-LL |         TyKind::Param(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Param(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:38:9\n    |\n-LL |         TyKind::Bound(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Bound(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:39:9\n    |\n-LL |         TyKind::Placeholder(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Placeholder(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:40:9\n    |\n-LL |         TyKind::Infer(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Infer(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:41:9\n    |\n-LL |         TyKind::Error => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |         TyKind::Error => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:46:12\n    |\n-LL |     if let TyKind::Int(int_ty) = sty {} //~ ERROR usage of `ty::TyKind::<kind>`\n+LL |     if let TyKind::Int(int_ty) = sty {}\n    |            ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind`\n   --> $DIR/ty_tykind_usage.rs:48:24\n    |\n-LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {} //~ ERROR usage of `ty::TyKind`\n+LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {}\n    |                        ^^^^^^^^^^\n    |\n    = help: try using `ty::Ty` instead"}]}