{"sha": "2c037d55891a974be415f9dac32e1bacfbb46210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMDM3ZDU1ODkxYTk3NGJlNDE1ZjlkYWMzMmUxYmFjZmJiNDYyMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-22T12:34:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-22T12:34:45Z"}, "message": "Auto merge of #46779 - Zoxc:par-merge-without-sync, r=arielb1\n\nWork towards thread safety in rustc\n\nThis PR is split out from https://github.com/rust-lang/rust/pull/45912. It contains changes which do not require the `sync` module.", "tree": {"sha": "354fd55beb26e55c5b36d70852d6fdbcc1506ccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/354fd55beb26e55c5b36d70852d6fdbcc1506ccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c037d55891a974be415f9dac32e1bacfbb46210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c037d55891a974be415f9dac32e1bacfbb46210", "html_url": "https://github.com/rust-lang/rust/commit/2c037d55891a974be415f9dac32e1bacfbb46210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c037d55891a974be415f9dac32e1bacfbb46210/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "264af16757e3aab5abc6606e016c10faf204380a", "url": "https://api.github.com/repos/rust-lang/rust/commits/264af16757e3aab5abc6606e016c10faf204380a", "html_url": "https://github.com/rust-lang/rust/commit/264af16757e3aab5abc6606e016c10faf204380a"}, {"sha": "84ce4f1c10f419916a4432cc3b021797f4dc4bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ce4f1c10f419916a4432cc3b021797f4dc4bfe", "html_url": "https://github.com/rust-lang/rust/commit/84ce4f1c10f419916a4432cc3b021797f4dc4bfe"}], "stats": {"total": 159, "additions": 89, "deletions": 70}, "files": [{"sha": "3caf308d6526842e746b7d5b9dc7f8601a7847a7", "filename": "src/librustc/ich/caching_codemap_view.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -78,11 +78,9 @@ impl<'cm> CachingCodemapView<'cm> {\n         // If the entry doesn't point to the correct file, fix it up\n         if pos < cache_entry.file.start_pos || pos >= cache_entry.file.end_pos {\n             let file_valid;\n-            let files = self.codemap.files();\n-\n-            if files.len() > 0 {\n+            if self.codemap.files().len() > 0 {\n                 let file_index = self.codemap.lookup_filemap_idx(pos);\n-                let file = files[file_index].clone();\n+                let file = self.codemap.files()[file_index].clone();\n \n                 if pos >= file.start_pos && pos < file.end_pos {\n                     cache_entry.file = file;"}, {"sha": "6ad9bd94bf25c85fc173b530f93d9b7a1cc8172a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -1092,6 +1092,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"prints the llvm optimization passes being run\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n         \"print the AST as JSON and halt\"),\n+    query_threads: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+        \"execute queries on a thread pool with N threads\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],\n         \"print the pre-expansion AST as JSON and halt\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n@@ -1688,6 +1690,10 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         }\n     }\n \n+    if debugging_opts.query_threads == Some(0) {\n+        early_error(error_format, \"Value for query threads must be a positive nonzero integer\");\n+    }\n+\n     if codegen_units == Some(0) {\n         early_error(error_format, \"Value for codegen units must be a positive nonzero integer\");\n     }"}, {"sha": "0de1c20dbde1e02e588d8cfc7beed9d50c2a1e2b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -725,6 +725,12 @@ impl Session {\n         ret\n     }\n \n+    /// Returns the number of query threads that should be used for this\n+    /// compilation\n+    pub fn query_threads(&self) -> usize {\n+        self.opts.debugging_opts.query_threads.unwrap_or(1)\n+    }\n+\n     /// Returns the number of codegen units that should be used for this\n     /// compilation\n     pub fn codegen_units(&self) -> usize {"}, {"sha": "b233156cf7fc683b52ee67579085786661fda1c6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -76,6 +76,20 @@ use syntax_pos::Span;\n \n use hir;\n \n+pub struct AllArenas<'tcx> {\n+    pub global: GlobalArenas<'tcx>,\n+    pub interner: DroplessArena,\n+}\n+\n+impl<'tcx> AllArenas<'tcx> {\n+    pub fn new() -> Self {\n+        AllArenas {\n+            global: GlobalArenas::new(),\n+            interner: DroplessArena::new(),\n+        }\n+    }\n+}\n+\n /// Internal storage\n pub struct GlobalArenas<'tcx> {\n     // internings\n@@ -1120,8 +1134,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   cstore: &'tcx CrateStore,\n                                   local_providers: ty::maps::Providers<'tcx>,\n                                   extern_providers: ty::maps::Providers<'tcx>,\n-                                  arenas: &'tcx GlobalArenas<'tcx>,\n-                                  arena: &'tcx DroplessArena,\n+                                  arenas: &'tcx AllArenas<'tcx>,\n                                   resolutions: ty::Resolutions,\n                                   hir: hir_map::Map<'tcx>,\n                                   on_disk_query_result_cache: maps::OnDiskCache<'tcx>,\n@@ -1132,7 +1145,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   where F: for<'b> FnOnce(TyCtxt<'b, 'tcx, 'tcx>) -> R\n     {\n         let data_layout = TargetDataLayout::parse(s);\n-        let interners = CtxtInterners::new(arena);\n+        let interners = CtxtInterners::new(&arenas.interner);\n         let common_types = CommonTypes::new(&interners);\n         let dep_graph = hir.dep_graph.clone();\n         let max_cnum = cstore.crates_untracked().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n@@ -1184,7 +1197,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         tls::enter_global(GlobalCtxt {\n             sess: s,\n             cstore,\n-            global_arenas: arenas,\n+            global_arenas: &arenas.global,\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n             on_disk_query_result_cache,"}, {"sha": "e03e1237466e699fd03e892b16b45d0c3c3ff467", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -77,7 +77,7 @@ pub use self::sty::TypeVariants::*;\n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n-pub use self::context::{TyCtxt, GlobalArenas, tls, keep_local};\n+pub use self::context::{TyCtxt, GlobalArenas, AllArenas, tls, keep_local};\n pub use self::context::{Lift, TypeckTables};\n \n pub use self::instance::{Instance, InstanceDef};"}, {"sha": "753f12f400bf9bcced37faab8232e915695a2b74", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -327,7 +327,7 @@ macro_rules! newtype_index {\n #[derive(Clone, PartialEq, Eq)]\n pub struct IndexVec<I: Idx, T> {\n     pub raw: Vec<T>,\n-    _marker: PhantomData<Fn(&I)>\n+    _marker: PhantomData<fn(&I)>\n }\n \n // Whether `IndexVec` is `Send` depends only on the data,"}, {"sha": "c0bbab35e1e9589afc05fcdc458b5ccdbbc3d9dd", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -22,7 +22,7 @@ use rustc::lint;\n use rustc::middle::{self, stability, reachable, resolve_lifetime};\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n+use rustc::ty::{self, TyCtxt, Resolutions, AllArenas};\n use rustc::traits;\n use rustc::util::common::{ErrorReported, time};\n use rustc_allocator as allocator;\n@@ -62,7 +62,6 @@ use syntax::util::node_count::NodeCounter;\n use syntax_pos::FileName;\n use syntax;\n use syntax_ext;\n-use arena::DroplessArena;\n \n use derive_registrar;\n use pretty::ReplaceBodyWithLoop;\n@@ -184,8 +183,7 @@ pub fn compile_input(sess: &Session,\n             return Ok(())\n         }\n \n-        let arena = DroplessArena::new();\n-        let arenas = GlobalArenas::new();\n+        let arenas = AllArenas::new();\n \n         // Construct the HIR map\n         let hir_map = time(sess.time_passes(),\n@@ -200,7 +198,6 @@ pub fn compile_input(sess: &Session,\n                                                                   sess,\n                                                                   outdir,\n                                                                   output,\n-                                                                  &arena,\n                                                                   &arenas,\n                                                                   &cstore,\n                                                                   &hir_map,\n@@ -230,7 +227,6 @@ pub fn compile_input(sess: &Session,\n                                     hir_map,\n                                     analysis,\n                                     resolutions,\n-                                    &arena,\n                                     &arenas,\n                                     &crate_name,\n                                     &outputs,\n@@ -416,8 +412,7 @@ pub struct CompileState<'a, 'tcx: 'a> {\n     pub output_filenames: Option<&'a OutputFilenames>,\n     pub out_dir: Option<&'a Path>,\n     pub out_file: Option<&'a Path>,\n-    pub arena: Option<&'tcx DroplessArena>,\n-    pub arenas: Option<&'tcx GlobalArenas<'tcx>>,\n+    pub arenas: Option<&'tcx AllArenas<'tcx>>,\n     pub expanded_crate: Option<&'a ast::Crate>,\n     pub hir_crate: Option<&'a hir::Crate>,\n     pub hir_map: Option<&'a hir_map::Map<'tcx>>,\n@@ -437,7 +432,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             session,\n             out_dir: out_dir.as_ref().map(|s| &**s),\n             out_file: None,\n-            arena: None,\n             arenas: None,\n             krate: None,\n             registry: None,\n@@ -492,8 +486,7 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n                                 session: &'tcx Session,\n                                 out_dir: &'a Option<PathBuf>,\n                                 out_file: &'a Option<PathBuf>,\n-                                arena: &'tcx DroplessArena,\n-                                arenas: &'tcx GlobalArenas<'tcx>,\n+                                arenas: &'tcx AllArenas<'tcx>,\n                                 cstore: &'tcx CStore,\n                                 hir_map: &'a hir_map::Map<'tcx>,\n                                 analysis: &'a ty::CrateAnalysis,\n@@ -505,7 +498,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n                                 -> Self {\n         CompileState {\n             crate_name: Some(crate_name),\n-            arena: Some(arena),\n             arenas: Some(arenas),\n             cstore: Some(cstore),\n             hir_map: Some(hir_map),\n@@ -974,8 +966,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(control: &CompileController,\n                                                hir_map: hir_map::Map<'tcx>,\n                                                mut analysis: ty::CrateAnalysis,\n                                                resolutions: Resolutions,\n-                                               arena: &'tcx DroplessArena,\n-                                               arenas: &'tcx GlobalArenas<'tcx>,\n+                                               arenas: &'tcx AllArenas<'tcx>,\n                                                name: &str,\n                                                output_filenames: &OutputFilenames,\n                                                f: F)\n@@ -1035,7 +1026,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(control: &CompileController,\n                              local_providers,\n                              extern_providers,\n                              arenas,\n-                             arena,\n                              resolutions,\n                              hir_map,\n                              query_result_on_disk_cache,"}, {"sha": "5fa823659287af1f0594212bd496645cbbaf4c77", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -227,7 +227,7 @@ pub fn run_compiler<'a>(args: &[String],\n         },\n     };\n \n-    let cstore = Rc::new(CStore::new(DefaultTransCrate::metadata_loader()));\n+    let cstore = CStore::new(DefaultTransCrate::metadata_loader());\n \n     let loader = file_loader.unwrap_or(box RealFileLoader);\n     let codemap = Rc::new(CodeMap::with_file_loader(loader, sopts.file_path_mapping()));\n@@ -243,7 +243,7 @@ pub fn run_compiler<'a>(args: &[String],\n \n     do_or_return!(callbacks.late_callback(&matches,\n                                           &sess,\n-                                          &*cstore,\n+                                          &cstore,\n                                           &input,\n                                           &odir,\n                                           &ofile), Some(sess));\n@@ -580,7 +580,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                                                      &state.expanded_crate.take().unwrap(),\n                                                      state.crate_name.unwrap(),\n                                                      ppm,\n-                                                     state.arena.unwrap(),\n                                                      state.arenas.unwrap(),\n                                                      state.output_filenames.unwrap(),\n                                                      opt_uii.clone(),"}, {"sha": "76923be65cfd70f1481e791706144011716c106a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -17,7 +17,7 @@ use self::NodesMatchingUII::*;\n \n use {abort_on_err, driver};\n \n-use rustc::ty::{self, TyCtxt, GlobalArenas, Resolutions};\n+use rustc::ty::{self, TyCtxt, Resolutions, AllArenas};\n use rustc::cfg;\n use rustc::cfg::graphviz::LabelledCFG;\n use rustc::middle::cstore::CrateStore;\n@@ -51,8 +51,6 @@ use rustc::hir::map::blocks;\n use rustc::hir;\n use rustc::hir::print as pprust_hir;\n \n-use arena::DroplessArena;\n-\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n     PpmNormal,\n@@ -205,8 +203,7 @@ impl PpSourceMode {\n                                                hir_map: &hir_map::Map<'tcx>,\n                                                analysis: &ty::CrateAnalysis,\n                                                resolutions: &Resolutions,\n-                                               arena: &'tcx DroplessArena,\n-                                               arenas: &'tcx GlobalArenas<'tcx>,\n+                                               arenas: &'tcx AllArenas<'tcx>,\n                                                output_filenames: &OutputFilenames,\n                                                id: &str,\n                                                f: F)\n@@ -237,7 +234,6 @@ impl PpSourceMode {\n                                                                  hir_map.clone(),\n                                                                  analysis.clone(),\n                                                                  resolutions.clone(),\n-                                                                 arena,\n                                                                  arenas,\n                                                                  id,\n                                                                  output_filenames,\n@@ -914,8 +910,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                 krate: &ast::Crate,\n                                                 crate_name: &str,\n                                                 ppm: PpMode,\n-                                                arena: &'tcx DroplessArena,\n-                                                arenas: &'tcx GlobalArenas<'tcx>,\n+                                                arenas: &'tcx AllArenas<'tcx>,\n                                                 output_filenames: &OutputFilenames,\n                                                 opt_uii: Option<UserIdentifiedItem>,\n                                                 ofile: Option<&Path>) {\n@@ -926,7 +921,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                             analysis,\n                             resolutions,\n                             crate_name,\n-                            arena,\n                             arenas,\n                             output_filenames,\n                             ppm,\n@@ -965,7 +959,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arena,\n                                            arenas,\n                                            output_filenames,\n                                            crate_name,\n@@ -990,7 +983,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arena,\n                                            arenas,\n                                            output_filenames,\n                                            crate_name,\n@@ -1007,7 +999,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arena,\n                                            arenas,\n                                            output_filenames,\n                                            crate_name,\n@@ -1042,7 +1033,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n-                                           arena,\n                                            arenas,\n                                            output_filenames,\n                                            crate_name,\n@@ -1073,8 +1063,7 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                        analysis: &ty::CrateAnalysis,\n                                        resolutions: &Resolutions,\n                                        crate_name: &str,\n-                                       arena: &'tcx DroplessArena,\n-                                       arenas: &'tcx GlobalArenas<'tcx>,\n+                                       arenas: &'tcx AllArenas<'tcx>,\n                                        output_filenames: &OutputFilenames,\n                                        ppm: PpMode,\n                                        uii: Option<UserIdentifiedItem>,\n@@ -1096,7 +1085,6 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                      hir_map.clone(),\n                                                      analysis.clone(),\n                                                      resolutions.clone(),\n-                                                     arena,\n                                                      arenas,\n                                                      crate_name,\n                                                      output_filenames,"}, {"sha": "6765ea5e67a6055d61d0040dcb2fc3dab44ad278", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -40,7 +40,6 @@ use errors::{Level, DiagnosticBuilder};\n use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;\n-use arena::DroplessArena;\n \n use rustc::hir;\n \n@@ -131,8 +130,7 @@ fn test_env<F>(source_string: &str,\n             .expect(\"phase 2 aborted\")\n     };\n \n-    let arena = DroplessArena::new();\n-    let arenas = ty::GlobalArenas::new();\n+    let arenas = ty::AllArenas::new();\n     let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n \n     // run just enough stuff to build a tcx:\n@@ -149,7 +147,6 @@ fn test_env<F>(source_string: &str,\n                              ty::maps::Providers::default(),\n                              ty::maps::Providers::default(),\n                              &arenas,\n-                             &arena,\n                              resolutions,\n                              hir_map,\n                              OnDiskCache::new_empty(sess.codemap()),"}, {"sha": "2ac49958d3c5317990ed5d95c4174be91e6746de", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -42,6 +42,8 @@ use std::cell::{RefCell, Cell};\n use std::mem;\n use std::rc::Rc;\n use std::{error, fmt};\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::atomic::Ordering::SeqCst;\n \n mod diagnostic;\n mod diagnostic_builder;\n@@ -236,7 +238,7 @@ pub use diagnostic_builder::DiagnosticBuilder;\n pub struct Handler {\n     pub flags: HandlerFlags,\n \n-    err_count: Cell<usize>,\n+    err_count: AtomicUsize,\n     emitter: RefCell<Box<Emitter>>,\n     continue_after_error: Cell<bool>,\n     delayed_span_bug: RefCell<Option<Diagnostic>>,\n@@ -295,7 +297,7 @@ impl Handler {\n     pub fn with_emitter_and_flags(e: Box<Emitter>, flags: HandlerFlags) -> Handler {\n         Handler {\n             flags,\n-            err_count: Cell::new(0),\n+            err_count: AtomicUsize::new(0),\n             emitter: RefCell::new(e),\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n@@ -311,7 +313,7 @@ impl Handler {\n     // NOTE: DO NOT call this function from rustc, as it relies on `err_count` being non-zero\n     // if an error happened to avoid ICEs. This function should only be called from tools.\n     pub fn reset_err_count(&self) {\n-        self.err_count.set(0);\n+        self.err_count.store(0, SeqCst);\n     }\n \n     pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> {\n@@ -507,19 +509,19 @@ impl Handler {\n \n     fn bump_err_count(&self) {\n         self.panic_if_treat_err_as_bug();\n-        self.err_count.set(self.err_count.get() + 1);\n+        self.err_count.fetch_add(1, SeqCst);\n     }\n \n     pub fn err_count(&self) -> usize {\n-        self.err_count.get()\n+        self.err_count.load(SeqCst)\n     }\n \n     pub fn has_errors(&self) -> bool {\n-        self.err_count.get() > 0\n+        self.err_count() > 0\n     }\n     pub fn abort_if_errors(&self) {\n         let s;\n-        match self.err_count.get() {\n+        match self.err_count() {\n             0 => {\n                 if let Some(bug) = self.delayed_span_bug.borrow_mut().take() {\n                     DiagnosticBuilder::new_diagnostic(self, bug).emit();\n@@ -528,7 +530,7 @@ impl Handler {\n             }\n             1 => s = \"aborting due to previous error\".to_string(),\n             _ => {\n-                s = format!(\"aborting due to {} previous errors\", self.err_count.get());\n+                s = format!(\"aborting due to {} previous errors\", self.err_count());\n             }\n         }\n "}, {"sha": "b353c0da865c86cfa5fbf66b78add79382845fa8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -14,7 +14,7 @@ use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::ty::{self, TyCtxt, GlobalArenas};\n+use rustc::ty::{self, TyCtxt, AllArenas};\n use rustc::hir::map as hir_map;\n use rustc::lint;\n use rustc::util::nodemap::FxHashMap;\n@@ -37,7 +37,6 @@ use visit_ast::RustdocVisitor;\n use clean;\n use clean::Clean;\n use html::render::RenderInfo;\n-use arena::DroplessArena;\n \n pub use rustc::session::config::Input;\n pub use rustc::session::search_paths::SearchPaths;\n@@ -170,8 +169,7 @@ pub fn run_core(search_paths: SearchPaths,\n         abort_on_err(result, &sess)\n     };\n \n-    let arena = DroplessArena::new();\n-    let arenas = GlobalArenas::new();\n+    let arenas = AllArenas::new();\n     let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n     let output_filenames = driver::build_output_filenames(&input,\n                                                           &None,\n@@ -185,7 +183,6 @@ pub fn run_core(search_paths: SearchPaths,\n                                                      hir_map,\n                                                      analysis,\n                                                      resolutions,\n-                                                     &arena,\n                                                      &arenas,\n                                                      &name,\n                                                      &output_filenames,"}, {"sha": "de7eebe7bf3fb74f9003391d814b3d6e81f3820f", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -15,6 +15,7 @@ use std::hash::{Hash, BuildHasher};\n use {Decodable, Encodable, Decoder, Encoder};\n use std::collections::{LinkedList, VecDeque, BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;\n+use std::sync::Arc;\n \n impl<\n     T: Encodable\n@@ -218,3 +219,26 @@ impl<T: Decodable> Decodable for Rc<[T]> {\n         })\n     }\n }\n+\n+impl<T: Encodable> Encodable for Arc<[T]> {\n+    fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n+        s.emit_seq(self.len(), |s| {\n+            for (index, e) in self.iter().enumerate() {\n+                s.emit_seq_elt(index, |s| e.encode(s))?;\n+            }\n+            Ok(())\n+        })\n+    }\n+}\n+\n+impl<T: Decodable> Decodable for Arc<[T]> {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Arc<[T]>, D::Error> {\n+        d.read_seq(|d, len| {\n+            let mut vec = Vec::with_capacity(len);\n+            for index in 0..len {\n+                vec.push(d.read_seq_elt(index, |d| Decodable::decode(d))?);\n+            }\n+            Ok(vec.into())\n+        })\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "cc72ff7d15d2baa615cb044a2c63b566c20f3e96", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -31,7 +31,7 @@ use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree, Delimited};\n use util::ThinVec;\n \n-use std::cell::{RefCell, Cell};\n+use std::cell::RefCell;\n use std::iter;\n \n thread_local! {\n@@ -419,16 +419,14 @@ pub fn mk_spanned_word_item(sp: Span, name: Name) -> MetaItem {\n     MetaItem { span: sp, name: name, node: MetaItemKind::Word }\n }\n \n+pub fn mk_attr_id() -> AttrId {\n+    use std::sync::atomic::AtomicUsize;\n+    use std::sync::atomic::Ordering;\n \n+    static NEXT_ATTR_ID: AtomicUsize = AtomicUsize::new(0);\n \n-thread_local! { static NEXT_ATTR_ID: Cell<usize> = Cell::new(0) }\n-\n-pub fn mk_attr_id() -> AttrId {\n-    let id = NEXT_ATTR_ID.with(|slot| {\n-        let r = slot.get();\n-        slot.set(r + 1);\n-        r\n-    });\n+    let id = NEXT_ATTR_ID.fetch_add(1, Ordering::SeqCst);\n+    assert!(id != ::std::usize::MAX);\n     AttrId(id)\n }\n "}, {"sha": "0b51f2e9814567f0621bc1adadbe173c3c7ab7af", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c037d55891a974be415f9dac32e1bacfbb46210/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=2c037d55891a974be415f9dac32e1bacfbb46210", "patch": "@@ -24,6 +24,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(match_default_bindings)]\n #![feature(i128_type)]\n+#![feature(const_atomic_usize_new)]\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}]}