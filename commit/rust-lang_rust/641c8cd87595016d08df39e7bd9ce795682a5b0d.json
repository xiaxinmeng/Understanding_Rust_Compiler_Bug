{"sha": "641c8cd87595016d08df39e7bd9ce795682a5b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MWM4Y2Q4NzU5NTAxNmQwOGRmMzllN2JkOWNlNzk1NjgyYTViMGQ=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-04-01T05:55:03Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-05-26T04:12:06Z"}, "message": "Limit `TrustedLen` impls to core types", "tree": {"sha": "f35dda21684a605946ab42d483033ace0a2bd9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35dda21684a605946ab42d483033ace0a2bd9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641c8cd87595016d08df39e7bd9ce795682a5b0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYK3KlgAKCRC4DhnkZita\npICjAP9JcqcRWbyTwM3L5Wf9ik1Hks+IYutmKOilcwraH5dY7wD9GYHm5AdPC1Gp\nXvPJYQl7XT1OA4vY4yNZ+blrisEG1QI=\n=20Hv\n-----END PGP SIGNATURE-----", "payload": "tree f35dda21684a605946ab42d483033ace0a2bd9c1\nparent 47a90f452050d4ea484206447babb07dd33c21d5\nauthor Jacob Pratt <jacob@jhpratt.dev> 1617256503 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1622002326 -0400\n\nLimit `TrustedLen` impls to core types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641c8cd87595016d08df39e7bd9ce795682a5b0d", "html_url": "https://github.com/rust-lang/rust/commit/641c8cd87595016d08df39e7bd9ce795682a5b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641c8cd87595016d08df39e7bd9ce795682a5b0d/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47a90f452050d4ea484206447babb07dd33c21d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a90f452050d4ea484206447babb07dd33c21d5", "html_url": "https://github.com/rust-lang/rust/commit/47a90f452050d4ea484206447babb07dd33c21d5"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "2bd0380bad605a41a30815449535d37a7cc41f88", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/641c8cd87595016d08df39e7bd9ce795682a5b0d/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c8cd87595016d08df39e7bd9ce795682a5b0d/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=641c8cd87595016d08df39e7bd9ce795682a5b0d", "patch": "@@ -655,8 +655,13 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     }\n }\n \n-#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<A: Step> TrustedLen for ops::Range<A> {}\n+macro_rules! impl_trusted_len_for_range {\n+    ($($type:ty)*) => {$(\n+        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+        unsafe impl TrustedLen for ops::Range<$type> {}\n+    )*}\n+}\n+impl_trusted_len_for_range![char i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize];\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::Range<A> {}\n@@ -687,8 +692,13 @@ impl<A: Step> Iterator for ops::RangeFrom<A> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::RangeFrom<A> {}\n \n-#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<A: Step> TrustedLen for ops::RangeFrom<A> {}\n+macro_rules! impl_trusted_len_for_range_from {\n+    ($($type:ty)*) => {$(\n+        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+        unsafe impl TrustedLen for ops::RangeFrom<$type> {}\n+    )*}\n+}\n+impl_trusted_len_for_range_from![char i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize];\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<A: Step> Iterator for ops::RangeInclusive<A> {\n@@ -899,8 +909,13 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     }\n }\n \n-#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<A: Step> TrustedLen for ops::RangeInclusive<A> {}\n+macro_rules! impl_trusted_len_for_range_inclusive {\n+    ($($type:ty)*) => {$(\n+        #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+        unsafe impl TrustedLen for ops::RangeInclusive<$type> {}\n+    )*}\n+}\n+impl_trusted_len_for_range_inclusive![char i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize];\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::RangeInclusive<A> {}"}]}