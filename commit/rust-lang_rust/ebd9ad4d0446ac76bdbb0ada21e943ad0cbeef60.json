{"sha": "ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZDlhZDRkMDQ0NmFjNzZiZGJiMGFkYTIxZTk0M2FkMGNiZWVmNjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-15T03:27:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-15T03:46:55Z"}, "message": "librustc: Add a lint mode for deprecated self. r=brson", "tree": {"sha": "508f81085cfa3d8bb00ea823e4938cb6dfe325f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/508f81085cfa3d8bb00ea823e4938cb6dfe325f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60", "html_url": "https://github.com/rust-lang/rust/commit/ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41c0d7083e19b0940fafb8b452ac24d5403f532b", "url": "https://api.github.com/repos/rust-lang/rust/commits/41c0d7083e19b0940fafb8b452ac24d5403f532b", "html_url": "https://github.com/rust-lang/rust/commit/41c0d7083e19b0940fafb8b452ac24d5403f532b"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "40aecfd4298c36573b212a3760b285f3c00a4165", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60", "patch": "@@ -66,6 +66,7 @@ enum lint {\n     structural_records,\n     type_limits,\n     default_methods,\n+    deprecated_self,\n \n     managed_heap_memory,\n     owned_heap_memory,\n@@ -208,6 +209,11 @@ fn get_lint_dict() -> lint_dict {\n            desc: ~\"allow default methods\",\n            default: forbid}),\n \n+        (~\"deprecated_self\",\n+         @{lint: deprecated_self,\n+           desc: ~\"warn about deprecated uses of `self`\",\n+           default: allow}),\n+\n         /* FIXME(#3266)--make liveness warnings lintable\n         (~\"unused_variable\",\n          @{lint: unused_variable,\n@@ -421,6 +427,7 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_deprecated_modes(cx, i);\n     check_item_type_limits(cx, i);\n     check_item_default_methods(cx, i);\n+    check_item_deprecated_self(cx, i);\n }\n \n // Take a visitor, and modify it so that it will not proceed past subitems.\n@@ -591,6 +598,41 @@ fn check_item_default_methods(cx: ty::ctxt, item: @ast::item) {\n     }\n }\n \n+fn check_item_deprecated_self(cx: ty::ctxt, item: @ast::item) {\n+    fn maybe_warn(cx: ty::ctxt,\n+                  item: @ast::item,\n+                  self_ty: ast::self_ty) {\n+        cx.sess.span_lint(\n+            deprecated_self,\n+            item.id,\n+            item.id,\n+            self_ty.span,\n+            ~\"this method form is deprecated; use an explicit `self` \\\n+              parameter or mark the method as static\");\n+    }\n+\n+    match item.node {\n+        ast::item_trait(_, _, methods) => {\n+            for methods.each |method| {\n+                match *method {\n+                    ast::required(ty_method) => {\n+                        maybe_warn(cx, item, ty_method.self_ty);\n+                    }\n+                    ast::provided(method) => {\n+                        maybe_warn(cx, item, method.self_ty);\n+                    }\n+                }\n+            }\n+        }\n+        ast::item_impl(_, _, _, methods) => {\n+            for methods.each |method| {\n+                maybe_warn(cx, item, method.self_ty);\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn check_item_structural_records(cx: ty::ctxt, it: @ast::item) {\n     let visit = item_stopping_visitor(visit::mk_simple_visitor(@{\n         visit_expr: fn@(e: @ast::expr) {"}, {"sha": "f02ab438fde23d006fea385387f9b6be9c86bb1b", "filename": "src/test/compile-fail/lint-deprecated-self.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs?ref=ebd9ad4d0446ac76bdbb0ada21e943ad0cbeef60", "patch": "@@ -0,0 +1,20 @@\n+#[forbid(deprecated_self)]\n+mod a {\n+    trait T {\n+        fn f(); //~ ERROR this method form is deprecated\n+    }\n+\n+    struct S {\n+        x: int\n+    }\n+\n+    impl S : T {\n+        fn f() {    //~ ERROR this method form is deprecated\n+        }\n+    }\n+}\n+\n+fn main() {\n+}\n+\n+"}]}