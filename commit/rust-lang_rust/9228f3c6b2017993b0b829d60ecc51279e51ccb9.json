{"sha": "9228f3c6b2017993b0b829d60ecc51279e51ccb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMjhmM2M2YjIwMTc5OTNiMGI4MjlkNjBlY2M1MTI3OWU1MWNjYjk=", "commit": {"author": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2018-12-17T22:33:53Z"}, "committer": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2019-01-22T22:45:11Z"}, "message": "Move FusedIterator, TrustedLen to own module", "tree": {"sha": "a1aa781cdf53fbdb87aaad940afc4d6687210d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1aa781cdf53fbdb87aaad940afc4d6687210d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9228f3c6b2017993b0b829d60ecc51279e51ccb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9228f3c6b2017993b0b829d60ecc51279e51ccb9", "html_url": "https://github.com/rust-lang/rust/commit/9228f3c6b2017993b0b829d60ecc51279e51ccb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9228f3c6b2017993b0b829d60ecc51279e51ccb9/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a036142a0da3cbae374f824a332bc43d4cecd09", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a036142a0da3cbae374f824a332bc43d4cecd09", "html_url": "https://github.com/rust-lang/rust/commit/4a036142a0da3cbae374f824a332bc43d4cecd09"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "602619bce5a9653e3ce9d65e7c530c2221a88c43", "filename": "src/libcore/iter/traits/marker.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9228f3c6b2017993b0b829d60ecc51279e51ccb9/src%2Flibcore%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9228f3c6b2017993b0b829d60ecc51279e51ccb9/src%2Flibcore%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fmarker.rs?ref=9228f3c6b2017993b0b829d60ecc51279e51ccb9", "patch": "@@ -0,0 +1,44 @@\n+/// An iterator that always continues to yield `None` when exhausted.\n+///\n+/// Calling next on a fused iterator that has returned `None` once is guaranteed\n+/// to return [`None`] again. This trait should be implemented by all iterators\n+/// that behave this way because it allows optimizing [`Iterator::fuse`].\n+///\n+/// Note: In general, you should not use `FusedIterator` in generic bounds if\n+/// you need a fused iterator. Instead, you should just call [`Iterator::fuse`]\n+/// on the iterator. If the iterator is already fused, the additional [`Fuse`]\n+/// wrapper will be a no-op with no performance penalty.\n+///\n+/// [`None`]: ../../std/option/enum.Option.html#variant.None\n+/// [`Iterator::fuse`]: ../../std/iter/trait.Iterator.html#method.fuse\n+/// [`Fuse`]: ../../std/iter/struct.Fuse.html\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n+pub trait FusedIterator: Iterator {}\n+\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n+impl<I: FusedIterator + ?Sized> FusedIterator for &mut I {}\n+\n+/// An iterator that reports an accurate length using size_hint.\n+///\n+/// The iterator reports a size hint where it is either exact\n+/// (lower bound is equal to upper bound), or the upper bound is [`None`].\n+/// The upper bound must only be [`None`] if the actual iterator length is\n+/// larger than [`usize::MAX`]. In that case, the lower bound must be\n+/// [`usize::MAX`], resulting in a [`.size_hint`] of `(usize::MAX, None)`.\n+///\n+/// The iterator must produce exactly the number of elements it reported\n+/// or diverge before reaching the end.\n+///\n+/// # Safety\n+///\n+/// This trait must only be implemented when the contract is upheld.\n+/// Consumers of this trait must inspect [`.size_hint`]\u2019s upper bound.\n+///\n+/// [`None`]: ../../std/option/enum.Option.html#variant.None\n+/// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n+/// [`.size_hint`]: ../../std/iter/trait.Iterator.html#method.size_hint\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+pub unsafe trait TrustedLen : Iterator {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}"}, {"sha": "000b9fad70b9465632861d900dd9006fc1470506", "filename": "src/libcore/iter/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9228f3c6b2017993b0b829d60ecc51279e51ccb9/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9228f3c6b2017993b0b829d60ecc51279e51ccb9/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs?ref=9228f3c6b2017993b0b829d60ecc51279e51ccb9", "patch": "@@ -3,54 +3,11 @@ mod double_ended;\n mod exact_size;\n mod collect;\n mod accum;\n+mod marker;\n \n pub use self::iterator::Iterator;\n pub use self::double_ended::DoubleEndedIterator;\n pub use self::exact_size::ExactSizeIterator;\n pub use self::collect::{FromIterator, IntoIterator, Extend};\n pub use self::accum::{Sum, Product};\n-\n-/// An iterator that always continues to yield `None` when exhausted.\n-///\n-/// Calling next on a fused iterator that has returned `None` once is guaranteed\n-/// to return [`None`] again. This trait should be implemented by all iterators\n-/// that behave this way because it allows optimizing [`Iterator::fuse`].\n-///\n-/// Note: In general, you should not use `FusedIterator` in generic bounds if\n-/// you need a fused iterator. Instead, you should just call [`Iterator::fuse`]\n-/// on the iterator. If the iterator is already fused, the additional [`Fuse`]\n-/// wrapper will be a no-op with no performance penalty.\n-///\n-/// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [`Iterator::fuse`]: ../../std/iter/trait.Iterator.html#method.fuse\n-/// [`Fuse`]: ../../std/iter/struct.Fuse.html\n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-pub trait FusedIterator: Iterator {}\n-\n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<I: FusedIterator + ?Sized> FusedIterator for &mut I {}\n-\n-/// An iterator that reports an accurate length using size_hint.\n-///\n-/// The iterator reports a size hint where it is either exact\n-/// (lower bound is equal to upper bound), or the upper bound is [`None`].\n-/// The upper bound must only be [`None`] if the actual iterator length is\n-/// larger than [`usize::MAX`]. In that case, the lower bound must be\n-/// [`usize::MAX`], resulting in a [`.size_hint`] of `(usize::MAX, None)`.\n-///\n-/// The iterator must produce exactly the number of elements it reported\n-/// or diverge before reaching the end.\n-///\n-/// # Safety\n-///\n-/// This trait must only be implemented when the contract is upheld.\n-/// Consumers of this trait must inspect [`.size_hint`]\u2019s upper bound.\n-///\n-/// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n-/// [`.size_hint`]: ../../std/iter/trait.Iterator.html#method.size_hint\n-#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-pub unsafe trait TrustedLen : Iterator {}\n-\n-#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}\n+pub use self::marker::{FusedIterator, TrustedLen};"}]}