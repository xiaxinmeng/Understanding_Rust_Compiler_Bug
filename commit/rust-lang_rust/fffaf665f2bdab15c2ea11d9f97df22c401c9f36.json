{"sha": "fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZmFmNjY1ZjJiZGFiMTVjMmVhMTFkOWY5N2RmMjJjNDAxYzlmMzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-09T19:50:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-09T21:59:38Z"}, "message": "Rollup merge of #33474 - frewsxcv:unwrap-err, r=alexcrichton\n\nUtilize `Result::unwrap_err` in more places.\n\nNone", "tree": {"sha": "bd5125394d3c0458a8730fd3b90c5c5a366e390e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5125394d3c0458a8730fd3b90c5c5a366e390e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXMQhKAAoJEDu/TT4u95+YSbIP/1KHDoSAC9+/ScyE/KwliQLH\nVL8WOftOpG7rM3fLIiPs4NnvZo1A4nXgPrNQ6bZGO8b1x1bUY70ZZZc9cBNCih5B\n0mjJfn49K1SjSriyxCqiMDWnjPdLFEaPddNsT+Jxw8FBt3HHMIWkIdWU3mDwgbYM\ndG6CuIGwm+1REbur4tIC/+TKbmbP5WEbFhLC2CQ+O5KYGiIVy2oBo1EmkBHy/xmg\nCSZggrtuNcwS8v4s4s+HdH9cec3rljjfXfs2X1ZiVbxwFTSWgXHybYEeJV0f+CZ+\nPapMK/D9IL39G050zds051miRhiVTZLl+YskfLi/+/K+yj/Jfx7i61FTCetbJJT4\n6z3Gt8yNVDlG9unRPp244VprsoUaJB6Z2Nt3u6tlnh15Vb2CFy6uskDUIRn5hMae\nLca3ZYRzjrzP0Gpr4WAcmnm+Ik/CxHwVtamsYccv6ecIYvzUVdsRbbjNNWAiH+gj\n3fg9Ynp4YZlptzmrZ2aT9TXfhB+XqZiE/lC4haTImmTnU3J1KZAKkjYGkMq5IoDI\ngi3pGB0oCoalHzmZRqazjgDteR5FYBlOInXr3/VMh6UD5OJtwCSO+CMMp1oh/r7n\nbbhCSXkPESltqJ2/shJajhla6pK4x7rGCHDqSWBIigqGVUusQ+Kc/hhMrKn3tsJq\nd4x8N1nP/thgQpOeXu++\n=E8jd\n-----END PGP SIGNATURE-----", "payload": "tree bd5125394d3c0458a8730fd3b90c5c5a366e390e\nparent c45d4816ca1e53afd57a3140daca7ee46f34672c\nparent 62b19c627ebde2bbfa6021de146c502124da7975\nauthor Manish Goregaokar <manishsmail@gmail.com> 1462823421 -0700\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1462831178 -0700\n\nRollup merge of #33474 - frewsxcv:unwrap-err, r=alexcrichton\n\nUtilize `Result::unwrap_err` in more places.\n\nNone\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "html_url": "https://github.com/rust-lang/rust/commit/fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c45d4816ca1e53afd57a3140daca7ee46f34672c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c45d4816ca1e53afd57a3140daca7ee46f34672c", "html_url": "https://github.com/rust-lang/rust/commit/c45d4816ca1e53afd57a3140daca7ee46f34672c"}, {"sha": "62b19c627ebde2bbfa6021de146c502124da7975", "url": "https://api.github.com/repos/rust-lang/rust/commits/62b19c627ebde2bbfa6021de146c502124da7975", "html_url": "https://github.com/rust-lang/rust/commit/62b19c627ebde2bbfa6021de146c502124da7975"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "c2eafa1b90f12331477052a6fbf7be0cdbf8217b", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -52,7 +52,7 @@ fn test_from_utf8() {\n                String::from(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n     let xs = b\"hello\\xFF\".to_vec();\n-    let err = String::from_utf8(xs).err().unwrap();\n+    let err = String::from_utf8(xs).unwrap_err();\n     assert_eq!(err.into_bytes(), b\"hello\\xff\".to_vec());\n }\n "}, {"sha": "90b2c6116038c4024c764499ee0107631dc00772", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -3948,7 +3948,7 @@ mod tests {\n         let mut mem_buf = string::String::new();\n         let mut encoder = Encoder::new(&mut mem_buf);\n         let result = hm.encode(&mut encoder);\n-        match result.err().unwrap() {\n+        match result.unwrap_err() {\n             EncoderError::BadHashmapKey => (),\n             _ => panic!(\"expected bad hash map key\")\n         }"}, {"sha": "c19fe1e1d2604a128b01c0a39113fc838bce3f45", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -1772,7 +1772,7 @@ mod tests {\n         let tmpdir = tmpdir();\n         let dir = &tmpdir.join(\"mkdir_error_twice\");\n         check!(fs::create_dir(dir));\n-        let e = fs::create_dir(dir).err().unwrap();\n+        let e = fs::create_dir(dir).unwrap_err();\n         assert_eq!(e.kind(), ErrorKind::AlreadyExists);\n     }\n "}, {"sha": "a92ca95f4ee7ef024925b51f20879d21b14d7f96", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -1127,7 +1127,7 @@ mod tests {\n             let mut writer = BufWriter::new(PanicWriter);\n             let _ = writer.write(b\"hello world\");\n             let _ = writer.flush();\n-        }).join().err().unwrap();\n+        }).join().unwrap_err();\n \n         assert_eq!(WRITES.load(Ordering::SeqCst), 1);\n     }"}, {"sha": "63b659d8db3b7b2aa85ada196f3c1cfb52b7f1f5", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -535,7 +535,7 @@ impl<T> Sender<T> {\n     ///\n     /// // This send will fail because the receiver is gone\n     /// drop(rx);\n-    /// assert_eq!(tx.send(1).err().unwrap().0, 1);\n+    /// assert_eq!(tx.send(1).unwrap_err().0, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn send(&self, t: T) -> Result<(), SendError<T>> {"}, {"sha": "fbc6bfb6c8d9f5a1de3b16d5f459f84206bfeff9", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -594,7 +594,7 @@ mod test {\n             assert!(res.is_ok(),\n                     \"Op {} failed with 1 stack entry: {}\",\n                     cap,\n-                    res.err().unwrap());\n+                    res.unwrap_err());\n         }\n         let caps = [\"%+\", \"%-\", \"%*\", \"%/\", \"%m\", \"%&\", \"%|\", \"%A\", \"%O\"];\n         for &cap in caps.iter() {\n@@ -610,7 +610,7 @@ mod test {\n             assert!(res.is_ok(),\n                     \"Binop {} failed with 2 stack entries: {}\",\n                     cap,\n-                    res.err().unwrap());\n+                    res.unwrap_err());\n         }\n     }\n \n@@ -625,15 +625,15 @@ mod test {\n         for &(op, bs) in v.iter() {\n             let s = format!(\"%{{1}}%{{2}}%{}%d\", op);\n             let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-            assert!(res.is_ok(), res.err().unwrap());\n+            assert!(res.is_ok(), res.unwrap_err());\n             assert_eq!(res.unwrap(), vec![b'0' + bs[0]]);\n             let s = format!(\"%{{1}}%{{1}}%{}%d\", op);\n             let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-            assert!(res.is_ok(), res.err().unwrap());\n+            assert!(res.is_ok(), res.unwrap_err());\n             assert_eq!(res.unwrap(), vec![b'0' + bs[1]]);\n             let s = format!(\"%{{2}}%{{1}}%{}%d\", op);\n             let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-            assert!(res.is_ok(), res.err().unwrap());\n+            assert!(res.is_ok(), res.unwrap_err());\n             assert_eq!(res.unwrap(), vec![b'0' + bs[2]]);\n         }\n     }\n@@ -643,13 +643,13 @@ mod test {\n         let mut vars = Variables::new();\n         let s = b\"\\\\E[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m\";\n         let res = expand(s, &[Number(1)], &mut vars);\n-        assert!(res.is_ok(), res.err().unwrap());\n+        assert!(res.is_ok(), res.unwrap_err());\n         assert_eq!(res.unwrap(), \"\\\\E[31m\".bytes().collect::<Vec<_>>());\n         let res = expand(s, &[Number(8)], &mut vars);\n-        assert!(res.is_ok(), res.err().unwrap());\n+        assert!(res.is_ok(), res.unwrap_err());\n         assert_eq!(res.unwrap(), \"\\\\E[90m\".bytes().collect::<Vec<_>>());\n         let res = expand(s, &[Number(42)], &mut vars);\n-        assert!(res.is_ok(), res.err().unwrap());\n+        assert!(res.is_ok(), res.unwrap_err());\n         assert_eq!(res.unwrap(), \"\\\\E[38;5;42m\".bytes().collect::<Vec<_>>());\n     }\n "}, {"sha": "1cd785334f63a7e6f9171090b286f7414b66bcbb", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     thread::spawn(move|| {\n         let _a = A;\n         lib::callback(|| panic!());\n-    }).join().err().unwrap();\n+    }).join().unwrap_err();\n \n     unsafe {\n         assert_eq!(lib::statik, 1);"}, {"sha": "72f952fb6c0df389fc5e54e15bdb1270938177b8", "filename": "src/test/run-pass/command-before-exec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -62,7 +62,7 @@ fn main() {\n \n     let output = Command::new(&me).arg(\"bad\").before_exec(|| {\n         Err(Error::from_raw_os_error(102))\n-    }).output().err().unwrap();\n+    }).output().unwrap_err();\n     assert_eq!(output.raw_os_error(), Some(102));\n \n     let pid = unsafe { libc::getpid() };"}, {"sha": "e718046ebbcd7b53155214ed0996ec3f271ddb0c", "filename": "src/test/run-pass/no-landing-pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -27,6 +27,6 @@ fn main() {\n     thread::spawn(move|| -> () {\n         let _a = A;\n         panic!();\n-    }).join().err().unwrap();\n+    }).join().unwrap_err();\n     assert!(unsafe { !HIT });\n }"}, {"sha": "2c87c6b92686ca6beff5ec22a731364b745bb352", "filename": "src/test/run-pass/panic-recover-propagate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fpanic-recover-propagate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fpanic-recover-propagate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-recover-propagate.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -28,10 +28,10 @@ fn main() {\n             panic!(\"hi there\");\n         });\n \n-        panic::propagate(result.err().unwrap());\n+        panic::propagate(result.unwrap_err());\n     }).join();\n \n-    let msg = *result.err().unwrap().downcast::<&'static str>().unwrap();\n+    let msg = *result.unwrap_err().downcast::<&'static str>().unwrap();\n     assert_eq!(\"hi there\", msg);\n     assert_eq!(1, A.load(Ordering::SeqCst));\n }"}, {"sha": "3a93845a0620aaae27646a37dab8ed6e14ebfc32", "filename": "src/test/run-pass/sepcomp-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -39,5 +39,5 @@ mod b {\n }\n \n fn main() {\n-    thread::spawn(move|| { ::b::g() }).join().err().unwrap();\n+    thread::spawn(move|| { ::b::g() }).join().unwrap_err();\n }"}, {"sha": "c9133bae854081ac1e74bceae64fa9362ae58d85", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -24,13 +24,13 @@ fn test_ret() { let _x: Box<isize> = return; }\n \n fn test_panic() {\n     fn f() { let _x: Box<isize> = panic!(); }\n-    thread::spawn(move|| f() ).join().err().unwrap();\n+    thread::spawn(move|| f() ).join().unwrap_err();\n }\n \n fn test_panic_indirect() {\n     fn f() -> ! { panic!(); }\n     fn g() { let _x: Box<isize> = f(); }\n-    thread::spawn(move|| g() ).join().err().unwrap();\n+    thread::spawn(move|| g() ).join().unwrap_err();\n }\n \n pub fn main() {"}, {"sha": "ec37be9420db73e248842b94b6a78744a348957d", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffaf665f2bdab15c2ea11d9f97df22c401c9f36/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=fffaf665f2bdab15c2ea11d9f97df22c401c9f36", "patch": "@@ -30,6 +30,6 @@ pub fn main() {\n         let _b = Foo;\n     }).join();\n \n-    let s = x.err().unwrap().downcast::<&'static str>().unwrap();\n+    let s = x.unwrap_err().downcast::<&'static str>().unwrap();\n     assert_eq!(&**s, \"This panic should happen.\");\n }"}]}