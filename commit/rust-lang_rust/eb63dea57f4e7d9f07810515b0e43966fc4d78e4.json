{"sha": "eb63dea57f4e7d9f07810515b0e43966fc4d78e4", "node_id": "C_kwDOAAsO6NoAKGViNjNkZWE1N2Y0ZTdkOWYwNzgxMDUxNWIwZTQzOTY2ZmM0ZDc4ZTQ", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-05-19T13:50:27Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-12-27T08:50:01Z"}, "message": "More verbose `Debug` implementation of `std::process:Command`\n\nbased on commit: https://github.com/zackmdavis/rust/commit/ccc019aabfdd550944c049625e66c92c815ea1d0 from https://github.com/zackmdavis\n\nclose https://github.com/rust-lang/rust/issues/42200\n\nAdd env variables and cwd to the shell-like debug output.\n\nAlso use the alternate syntax to display a more verbose display, while not showing internal fields and hiding fields when they have their default value.", "tree": {"sha": "9f8b72b44d47cd64c0fcce6124835b5e9ce0a534", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8b72b44d47cd64c0fcce6124835b5e9ce0a534"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb63dea57f4e7d9f07810515b0e43966fc4d78e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb63dea57f4e7d9f07810515b0e43966fc4d78e4", "html_url": "https://github.com/rust-lang/rust/commit/eb63dea57f4e7d9f07810515b0e43966fc4d78e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a99eef32a2b7b9d8e77dde539f869e522d181f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a99eef32a2b7b9d8e77dde539f869e522d181f", "html_url": "https://github.com/rust-lang/rust/commit/35a99eef32a2b7b9d8e77dde539f869e522d181f"}], "stats": {"total": 202, "additions": 173, "deletions": 29}, "files": [{"sha": "c1da395bfc5614c7cfbd48e82606810cf7108555", "filename": "library/std/src/process.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=eb63dea57f4e7d9f07810515b0e43966fc4d78e4", "patch": "@@ -1038,6 +1038,15 @@ impl fmt::Debug for Command {\n     /// Format the program and arguments of a Command for display. Any\n     /// non-utf8 data is lossily converted using the utf8 replacement\n     /// character.\n+    ///\n+    /// The default format approximates a shell invocation of the program along with its\n+    /// arguments. It does not include most of the other command properties. The output is not guaranteed to work\n+    /// (e.g. due to lack of shell-escaping or differences in path resolution)\n+    /// On some platforms you can use [the alternate syntax] to show more fields.\n+    ///\n+    /// Note that the debug implementation is platform-specific.\n+    ///\n+    /// [the alternate syntax]: fmt#sign0\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.inner.fmt(f)\n     }"}, {"sha": "b4f6cc2dabae39362ac35aca3631f871a2c47a37", "filename": "library/std/src/process/tests.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs?ref=eb63dea57f4e7d9f07810515b0e43966fc4d78e4", "patch": "@@ -417,6 +417,100 @@ fn env_empty() {\n     assert!(p.is_ok());\n }\n \n+#[test]\n+#[cfg(not(windows))]\n+#[cfg_attr(any(target_os = \"emscripten\", target_env = \"sgx\"), ignore)]\n+fn main() {\n+    const PIDFD: &'static str =\n+        if cfg!(target_os = \"linux\") { \"    create_pidfd: false,\\n\" } else { \"\" };\n+\n+    let mut command = Command::new(\"some-boring-name\");\n+\n+    assert_eq!(format!(\"{command:?}\"), format!(r#\"\"some-boring-name\"\"#));\n+\n+    assert_eq!(\n+        format!(\"{command:#?}\"),\n+        format!(\n+            r#\"Command {{\n+    program: \"some-boring-name\",\n+    args: [\n+        \"some-boring-name\",\n+    ],\n+{PIDFD}}}\"#\n+        )\n+    );\n+\n+    command.args(&[\"1\", \"2\", \"3\"]);\n+\n+    assert_eq!(format!(\"{command:?}\"), format!(r#\"\"some-boring-name\" \"1\" \"2\" \"3\"\"#));\n+\n+    assert_eq!(\n+        format!(\"{command:#?}\"),\n+        format!(\n+            r#\"Command {{\n+    program: \"some-boring-name\",\n+    args: [\n+        \"some-boring-name\",\n+        \"1\",\n+        \"2\",\n+        \"3\",\n+    ],\n+{PIDFD}}}\"#\n+        )\n+    );\n+\n+    crate::os::unix::process::CommandExt::arg0(&mut command, \"exciting-name\");\n+\n+    assert_eq!(\n+        format!(\"{command:?}\"),\n+        format!(r#\"[\"some-boring-name\"] \"exciting-name\" \"1\" \"2\" \"3\"\"#)\n+    );\n+\n+    assert_eq!(\n+        format!(\"{command:#?}\"),\n+        format!(\n+            r#\"Command {{\n+    program: \"some-boring-name\",\n+    args: [\n+        \"exciting-name\",\n+        \"1\",\n+        \"2\",\n+        \"3\",\n+    ],\n+{PIDFD}}}\"#\n+        )\n+    );\n+\n+    let mut command_with_env_and_cwd = Command::new(\"boring-name\");\n+    command_with_env_and_cwd.current_dir(\"/some/path\").env(\"FOO\", \"bar\");\n+    assert_eq!(\n+        format!(\"{command_with_env_and_cwd:?}\"),\n+        r#\"cd \"/some/path\" && FOO=\"bar\" \"boring-name\"\"#\n+    );\n+    assert_eq!(\n+        format!(\"{command_with_env_and_cwd:#?}\"),\n+        format!(\n+            r#\"Command {{\n+    program: \"boring-name\",\n+    args: [\n+        \"boring-name\",\n+    ],\n+    env: CommandEnv {{\n+        clear: false,\n+        vars: {{\n+            \"FOO\": Some(\n+                \"bar\",\n+            ),\n+        }},\n+    }},\n+    cwd: Some(\n+        \"/some/path\",\n+    ),\n+{PIDFD}}}\"#\n+        )\n+    );\n+}\n+\n // See issue #91991\n #[test]\n #[cfg(windows)]"}, {"sha": "afd03d79c0ba6cef9747d003c760adfc07f2c721", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=eb63dea57f4e7d9f07810515b0e43966fc4d78e4", "patch": "@@ -144,6 +144,7 @@ pub enum ChildStdio {\n     Null,\n }\n \n+#[derive(Debug)]\n pub enum Stdio {\n     Inherit,\n     Null,\n@@ -510,16 +511,68 @@ impl ChildStdio {\n }\n \n impl fmt::Debug for Command {\n+    // show all attributes but `self.closures` which does not implement `Debug`\n+    // and `self.argv` which is not useful for debugging\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if self.program != self.args[0] {\n-            write!(f, \"[{:?}] \", self.program)?;\n-        }\n-        write!(f, \"{:?}\", self.args[0])?;\n+        if f.alternate() {\n+            let mut debug_command = f.debug_struct(\"Command\");\n+            debug_command.field(\"program\", &self.program).field(\"args\", &self.args);\n+            if !self.env.is_unchanged() {\n+                debug_command.field(\"env\", &self.env);\n+            }\n+\n+            if self.cwd.is_some() {\n+                debug_command.field(\"cwd\", &self.cwd);\n+            }\n+            if self.uid.is_some() {\n+                debug_command.field(\"uid\", &self.uid);\n+            }\n+            if self.gid.is_some() {\n+                debug_command.field(\"gid\", &self.gid);\n+            }\n+\n+            if self.groups.is_some() {\n+                debug_command.field(\"groups\", &self.groups);\n+            }\n+\n+            if self.stdin.is_some() {\n+                debug_command.field(\"stdin\", &self.stdin);\n+            }\n+            if self.stdout.is_some() {\n+                debug_command.field(\"stdout\", &self.stdout);\n+            }\n+            if self.stderr.is_some() {\n+                debug_command.field(\"stderr\", &self.stderr);\n+            }\n+            if self.pgroup.is_some() {\n+                debug_command.field(\"pgroup\", &self.pgroup);\n+            }\n+\n+            #[cfg(target_os = \"linux\")]\n+            {\n+                debug_command.field(\"create_pidfd\", &self.create_pidfd);\n+            }\n \n-        for arg in &self.args[1..] {\n-            write!(f, \" {:?}\", arg)?;\n+            debug_command.finish()\n+        } else {\n+            if let Some(ref cwd) = self.cwd {\n+                write!(f, \"cd {cwd:?} && \")?;\n+            }\n+            for (key, value_opt) in self.get_envs() {\n+                if let Some(value) = value_opt {\n+                    write!(f, \"{}={value:?} \", key.to_string_lossy())?;\n+                }\n+            }\n+            if self.program != self.args[0] {\n+                write!(f, \"[{:?}] \", self.program)?;\n+            }\n+            write!(f, \"{:?}\", self.args[0])?;\n+\n+            for arg in &self.args[1..] {\n+                write!(f, \" {:?}\", arg)?;\n+            }\n+            Ok(())\n         }\n-        Ok(())\n     }\n }\n "}, {"sha": "18883048daef195b2f99a82b0dbdea3e36698e5b", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb63dea57f4e7d9f07810515b0e43966fc4d78e4/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=eb63dea57f4e7d9f07810515b0e43966fc4d78e4", "patch": "@@ -4,12 +4,13 @@\n use crate::collections::BTreeMap;\n use crate::env;\n use crate::ffi::{OsStr, OsString};\n+use crate::fmt;\n use crate::io;\n use crate::sys::pipe::read2;\n use crate::sys::process::{EnvKey, ExitStatus, Process, StdioPipes};\n \n // Stores a set of changes to an environment\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub struct CommandEnv {\n     clear: bool,\n     saw_path: bool,\n@@ -22,6 +23,14 @@ impl Default for CommandEnv {\n     }\n }\n \n+impl fmt::Debug for CommandEnv {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut debug_command_env = f.debug_struct(\"CommandEnv\");\n+        debug_command_env.field(\"clear\", &self.clear).field(\"vars\", &self.vars);\n+        debug_command_env.finish()\n+    }\n+}\n+\n impl CommandEnv {\n     // Capture the current environment with these changes applied\n     pub fn capture(&self) -> BTreeMap<EnvKey, OsString> {"}, {"sha": "4aba1229f29a822f29995579a8b0ef84822cb4be", "filename": "src/test/ui/command/command-argv0-debug.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35a99eef32a2b7b9d8e77dde539f869e522d181f/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a99eef32a2b7b9d8e77dde539f869e522d181f/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs?ref=35a99eef32a2b7b9d8e77dde539f869e522d181f", "patch": "@@ -1,21 +0,0 @@\n-// run-pass\n-\n-// ignore-windows - this is a unix-specific test\n-// ignore-emscripten no processes\n-// ignore-sgx no processes\n-use std::os::unix::process::CommandExt;\n-use std::process::Command;\n-\n-fn main() {\n-    let mut command = Command::new(\"some-boring-name\");\n-\n-    assert_eq!(format!(\"{:?}\", command), r#\"\"some-boring-name\"\"#);\n-\n-    command.args(&[\"1\", \"2\", \"3\"]);\n-\n-    assert_eq!(format!(\"{:?}\", command), r#\"\"some-boring-name\" \"1\" \"2\" \"3\"\"#);\n-\n-    command.arg0(\"exciting-name\");\n-\n-    assert_eq!(format!(\"{:?}\", command), r#\"[\"some-boring-name\"] \"exciting-name\" \"1\" \"2\" \"3\"\"#);\n-}"}]}