{"sha": "4901c55af7ec98231653cd0c3a0b1a6937eac743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MDFjNTVhZjdlYzk4MjMxNjUzY2QwYzNhMGIxYTY5MzdlYWM3NDM=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-07T18:39:32Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-07T18:40:57Z"}, "message": "Replace set_data_ptr with pointer::set_ptr_value", "tree": {"sha": "681781c63ec4ea965123839899294c6168398c0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/681781c63ec4ea965123839899294c6168398c0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4901c55af7ec98231653cd0c3a0b1a6937eac743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4901c55af7ec98231653cd0c3a0b1a6937eac743", "html_url": "https://github.com/rust-lang/rust/commit/4901c55af7ec98231653cd0c3a0b1a6937eac743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4901c55af7ec98231653cd0c3a0b1a6937eac743/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e578c9fb051ed3a4e608a43d840ad2877701333", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e578c9fb051ed3a4e608a43d840ad2877701333", "html_url": "https://github.com/rust-lang/rust/commit/1e578c9fb051ed3a4e608a43d840ad2877701333"}], "stats": {"total": 37, "additions": 5, "deletions": 32}, "files": [{"sha": "ed22571409c6d7aab76834d5d46bd653d4dababb", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4901c55af7ec98231653cd0c3a0b1a6937eac743/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4901c55af7ec98231653cd0c3a0b1a6937eac743/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=4901c55af7ec98231653cd0c3a0b1a6937eac743", "patch": "@@ -827,8 +827,8 @@ impl<T: ?Sized> Rc<T> {\n         let offset = unsafe { data_offset(ptr) };\n \n         // Reverse the offset to find the original RcBox.\n-        let fake_ptr = ptr as *mut RcBox<T>;\n-        let rc_ptr = unsafe { set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset)) };\n+        let rc_ptr =\n+            unsafe { (ptr as *mut RcBox<T>).set_ptr_value((ptr as *mut u8).offset(-offset)) };\n \n         unsafe { Self::from_ptr(rc_ptr) }\n     }\n@@ -1154,7 +1154,7 @@ impl<T: ?Sized> Rc<T> {\n             Self::allocate_for_layout(\n                 Layout::for_value(&*ptr),\n                 |layout| Global.allocate(layout),\n-                |mem| set_data_ptr(ptr as *mut T, mem) as *mut RcBox<T>,\n+                |mem| (ptr as *mut RcBox<T>).set_ptr_value(mem),\n             )\n         }\n     }\n@@ -1193,20 +1193,7 @@ impl<T> Rc<[T]> {\n             )\n         }\n     }\n-}\n-\n-/// Sets the data pointer of a `?Sized` raw pointer.\n-///\n-/// For a slice/trait object, this sets the `data` field and leaves the rest\n-/// unchanged. For a sized raw pointer, this simply sets the pointer.\n-unsafe fn set_data_ptr<T: ?Sized, U>(mut ptr: *mut T, data: *mut U) -> *mut T {\n-    unsafe {\n-        ptr::write(&mut ptr as *mut _ as *mut *mut u8, data as *mut u8);\n-    }\n-    ptr\n-}\n \n-impl<T> Rc<[T]> {\n     /// Copy elements from slice into newly allocated Rc<\\[T\\]>\n     ///\n     /// Unsafe because the caller must either take ownership or bind `T: Copy`"}, {"sha": "aa6acdbff34198f5ccabd2fd34d4a4d2d6c6b4af", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4901c55af7ec98231653cd0c3a0b1a6937eac743/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4901c55af7ec98231653cd0c3a0b1a6937eac743/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=4901c55af7ec98231653cd0c3a0b1a6937eac743", "patch": "@@ -844,8 +844,7 @@ impl<T: ?Sized> Arc<T> {\n             let offset = data_offset(ptr);\n \n             // Reverse the offset to find the original ArcInner.\n-            let fake_ptr = ptr as *mut ArcInner<T>;\n-            let arc_ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n+            let arc_ptr = (ptr as *mut ArcInner<T>).set_ptr_value((ptr as *mut u8).offset(-offset));\n \n             Self::from_ptr(arc_ptr)\n         }\n@@ -1129,7 +1128,7 @@ impl<T: ?Sized> Arc<T> {\n             Self::allocate_for_layout(\n                 Layout::for_value(&*ptr),\n                 |layout| Global.allocate(layout),\n-                |mem| set_data_ptr(ptr as *mut T, mem) as *mut ArcInner<T>,\n+                |mem| (ptr as *mut ArcInner<T>).set_ptr_value(mem) as *mut ArcInner<T>,\n             )\n         }\n     }\n@@ -1168,20 +1167,7 @@ impl<T> Arc<[T]> {\n             )\n         }\n     }\n-}\n-\n-/// Sets the data pointer of a `?Sized` raw pointer.\n-///\n-/// For a slice/trait object, this sets the `data` field and leaves the rest\n-/// unchanged. For a sized raw pointer, this simply sets the pointer.\n-unsafe fn set_data_ptr<T: ?Sized, U>(mut ptr: *mut T, data: *mut U) -> *mut T {\n-    unsafe {\n-        ptr::write(&mut ptr as *mut _ as *mut *mut u8, data as *mut u8);\n-    }\n-    ptr\n-}\n \n-impl<T> Arc<[T]> {\n     /// Copy elements from slice into newly allocated Arc<\\[T\\]>\n     ///\n     /// Unsafe because the caller must either take ownership or bind `T: Copy`."}]}