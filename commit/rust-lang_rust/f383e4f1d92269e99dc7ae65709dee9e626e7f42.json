{"sha": "f383e4f1d92269e99dc7ae65709dee9e626e7f42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzODNlNGYxZDkyMjY5ZTk5ZGM3YWU2NTcwOWRlZTllNjI2ZTdmNDI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-05T09:30:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-05T09:30:02Z"}, "message": "Rollup merge of #78757 - camelid:crate-link-text, r=jyn514\n\nImprove and clean up some intra-doc links", "tree": {"sha": "0b5ee2431a716cae9d9be90ac3021bacc770f910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b5ee2431a716cae9d9be90ac3021bacc770f910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f383e4f1d92269e99dc7ae65709dee9e626e7f42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfo8YaCRBK7hj4Ov3rIwAAdHIIAKpjuPCxtD7s6qwwJiF1ZTtY\nZw+S2RkZl5mIbO76rSPIy9TSanxr5ei+UfXn2YwuUpQTJufVOZJtwcShfO/7hxP/\n66K5YvhW2/F7sjAHad1y/0HIjlO3nVuXF5Q5sesLwjSWS+bpnGOEWTLIBlcwpTEH\nmvIWGfN6YSH7w7tUWkzYSPLc8q5OZmrTKxSeWQ/HDNScpkkzgny6ztJtPXfoI00Y\nrxsBrKm+QteNavXD7JYMU96V4oD8EjnhFefyNkKDFgJHi1EjIEBcx3NSPwobTKbT\n38JD7SlJed5VB1uyQmJJqODQg5E/r02KK0csg+3wGgLebYuQw00ufXthJVyJLZw=\n=gK2m\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b5ee2431a716cae9d9be90ac3021bacc770f910\nparent 679c4c7015db2c04ec418fbf57b0c5d97d73d40c\nparent 677b2acb482835e151c519da0b8517174b399e35\nauthor Mara Bos <m-ou.se@m-ou.se> 1604568602 +0100\ncommitter GitHub <noreply@github.com> 1604568602 +0100\n\nRollup merge of #78757 - camelid:crate-link-text, r=jyn514\n\nImprove and clean up some intra-doc links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f383e4f1d92269e99dc7ae65709dee9e626e7f42", "html_url": "https://github.com/rust-lang/rust/commit/f383e4f1d92269e99dc7ae65709dee9e626e7f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f383e4f1d92269e99dc7ae65709dee9e626e7f42/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679c4c7015db2c04ec418fbf57b0c5d97d73d40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/679c4c7015db2c04ec418fbf57b0c5d97d73d40c", "html_url": "https://github.com/rust-lang/rust/commit/679c4c7015db2c04ec418fbf57b0c5d97d73d40c"}, {"sha": "677b2acb482835e151c519da0b8517174b399e35", "url": "https://api.github.com/repos/rust-lang/rust/commits/677b2acb482835e151c519da0b8517174b399e35", "html_url": "https://github.com/rust-lang/rust/commit/677b2acb482835e151c519da0b8517174b399e35"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "7d0ba97de6eba6a13efd2144e5d0eb90287212d7", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f383e4f1d92269e99dc7ae65709dee9e626e7f42/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f383e4f1d92269e99dc7ae65709dee9e626e7f42/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=f383e4f1d92269e99dc7ae65709dee9e626e7f42", "patch": "@@ -719,7 +719,7 @@ extern \"rust-intrinsic\" {\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n     /// reach code marked with this function.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::hint::unreachable_unchecked`].\n+    /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`](crate::hint::unreachable_unchecked).\n     #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n     pub fn unreachable() -> !;\n \n@@ -764,20 +764,20 @@ extern \"rust-intrinsic\" {\n     /// More specifically, this is the offset in bytes between successive\n     /// items of the same type, including alignment padding.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::mem::size_of`].\n+    /// The stabilized version of this intrinsic is [`core::mem::size_of`](crate::mem::size_of).\n     #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n     pub fn size_of<T>() -> usize;\n \n     /// Moves a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::ptr::write`].\n+    /// The stabilized version of this intrinsic is [`core::ptr::write`](crate::ptr::write).\n     pub fn move_val_init<T>(dst: *mut T, src: T);\n \n     /// The minimum alignment of a type.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::mem::align_of`].\n+    /// The stabilized version of this intrinsic is [`core::mem::align_of`](crate::mem::align_of).\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n     /// The preferred alignment of a type.\n@@ -793,21 +793,21 @@ extern \"rust-intrinsic\" {\n     pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n     /// The required alignment of the referenced value.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::mem::align_of_val`].\n+    /// The stabilized version of this intrinsic is [`core::mem::align_of_val`](crate::mem::align_of_val).\n     #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n     pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::any::type_name`].\n+    /// The stabilized version of this intrinsic is [`core::any::type_name`](crate::any::type_name).\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::any::TypeId::of`].\n+    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`](crate::any::TypeId::of).\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n@@ -831,7 +831,7 @@ extern \"rust-intrinsic\" {\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     ///\n-    /// Consider using [`crate::panic::Location::caller`] instead.\n+    /// Consider using [`core::panic::Location::caller`](crate::panic::Location::caller) instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n@@ -1152,11 +1152,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs a volatile load from the `src` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::ptr::read_volatile`].\n+    /// The stabilized version of this intrinsic is [`core::ptr::read_volatile`](crate::ptr::read_volatile).\n     pub fn volatile_load<T>(src: *const T) -> T;\n     /// Performs a volatile store to the `dst` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::ptr::write_volatile`].\n+    /// The stabilized version of this intrinsic is [`core::ptr::write_volatile`](crate::ptr::write_volatile).\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n \n     /// Performs a volatile load from the `src` pointer\n@@ -1697,7 +1697,7 @@ extern \"rust-intrinsic\" {\n     /// Returns the value of the discriminant for the variant in 'v',\n     /// cast to a `u64`; if `T` has no discriminant, returns 0.\n     ///\n-    /// The stabilized version of this intrinsic is [`crate::mem::discriminant`].\n+    /// The stabilized version of this intrinsic is [`core::mem::discriminant`](crate::mem::discriminant).\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n "}, {"sha": "83a282c8cd6b5b01fb577cc44e915cc38a9ff8e6", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f383e4f1d92269e99dc7ae65709dee9e626e7f42/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f383e4f1d92269e99dc7ae65709dee9e626e7f42/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=f383e4f1d92269e99dc7ae65709dee9e626e7f42", "patch": "@@ -389,7 +389,7 @@ mod prim_unit {}\n //\n /// Raw, unsafe pointers, `*const T`, and `*mut T`.\n ///\n-/// *[See also the `std::ptr` module][`ptr`].*\n+/// *[See also the `std::ptr` module](ptr).*\n ///\n /// Working with raw pointers in Rust is uncommon, typically limited to a few patterns.\n /// Raw pointers can be unaligned or [`null`]. However, when a raw pointer is\n@@ -577,7 +577,7 @@ mod prim_array {}\n /// means that elements are laid out so that every element is the same\n /// distance from its neighbors.\n ///\n-/// *[See also the `std::slice` module][`crate::slice`].*\n+/// *[See also the `std::slice` module](crate::slice).*\n ///\n /// Slices are a view into a block of memory represented as a pointer and a\n /// length.\n@@ -622,7 +622,7 @@ mod prim_slice {}\n //\n /// String slices.\n ///\n-/// *[See also the `std::str` module][`crate::str`].*\n+/// *[See also the `std::str` module](crate::str).*\n ///\n /// The `str` type, also called a 'string slice', is the most primitive string\n /// type. It is usually seen in its borrowed form, `&str`. It is also the type\n@@ -797,7 +797,7 @@ mod prim_tuple {}\n /// calculation with floats round to a nearby representable number. For example,\n /// `5.0` and `1.0` can be exactly represented as `f32`, but `1.0 / 5.0` results\n /// in `0.20000000298023223876953125` since `0.2` cannot be exactly represented\n-/// as `f32`. Note however, that printing floats with `println` and friends will\n+/// as `f32`. Note, however, that printing floats with `println` and friends will\n /// often discard insignificant digits: `println!(\"{}\", 1.0f32 / 5.0f32)` will\n /// print `0.2`.\n ///\n@@ -817,7 +817,7 @@ mod prim_tuple {}\n ///\n /// For more information on floating point numbers, see [Wikipedia][wikipedia].\n ///\n-/// *[See also the `std::f32::consts` module][`crate::f32::consts`].*\n+/// *[See also the `std::f32::consts` module](crate::f32::consts).*\n ///\n /// [wikipedia]: https://en.wikipedia.org/wiki/Single-precision_floating-point_format\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -831,7 +831,7 @@ mod prim_f32 {}\n /// `f32`][`f32`] or [Wikipedia on double precision\n /// values][wikipedia] for more information.\n ///\n-/// *[See also the `std::f64::consts` module][`crate::f64::consts`].*\n+/// *[See also the `std::f64::consts` module](crate::f64::consts).*\n ///\n /// [`f32`]: prim@f32\n /// [wikipedia]: https://en.wikipedia.org/wiki/Double-precision_floating-point_format"}]}