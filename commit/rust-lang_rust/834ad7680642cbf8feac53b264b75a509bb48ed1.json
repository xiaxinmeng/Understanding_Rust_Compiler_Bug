{"sha": "834ad7680642cbf8feac53b264b75a509bb48ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNGFkNzY4MDY0MmNiZjhmZWFjNTNiMjY0Yjc1YTUwOWJiNDhlZDE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-18T10:04:46Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-18T10:04:46Z"}, "message": "Remove code duplication", "tree": {"sha": "06b0231a3d2a22f52a0217624f2892c1b82c6baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b0231a3d2a22f52a0217624f2892c1b82c6baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/834ad7680642cbf8feac53b264b75a509bb48ed1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdgbJzPSa+gJi9jP1Acg2tkD/37EFAly4S74ACgkQAcg2tkD/\n37EYIBAAoB7C3bLHX0szcPuOZLp/V2ytBcI/eA3n/RPF8pHcmjm9ePVczwS1K1y8\nRxwIxpbkZDWRQOkM5LsjLu5DtYn7N4kke7K8tU+XQg/eS0oTR0nbMdrsDWJRgkZ6\nMg41Jr2pUgbAY8eko1Gf5gDzVGKL4opK1XYFVg/nSxNf79kIzJmLEBsmA7UpueEI\n1CmJw4kVH/oHZVSdzgZLHP78uee27RJAz/aZTS4ja6ZqDqTsZeNfXnzTpG37D/Ry\nagL20VqT7reVGSPflYnLSs0RvuRt+Kc9ZBF6smCtgN+XcvDfXxOfaxgI0IqssAvz\nJf88DReyN5O+neFYHd2b5ax3vLFhMSr/+qeiAl1sxDLSQrKcftrgwmoNaid9Lrlg\nCtw1hdbpLpCv47MQ41bCepms087navehCfzKdLW0IvNfRzLJT6aZ4IOP0wcwmOcv\n2CnavbyNtGG8F/TL3Rb0hcApXDf0osbKG3bAbbiDqX9RWCnKdX2AY9INFZWQwgT1\nqOsBC9ZUjskXIhtb/HRt572cnFY6gepERQFIsUluq6D4QKpXQAcF+rLtIkuyP/qJ\nJwbJOX/qascGj9uRz+5HHDt/1NGEIQv+i3pedoH8GQE6rg2cTT8TwaWxM1tNyc0W\nhr/+VKKM8leXVl+u71cWlyH+OweEfEaCRzSub61Eomlsi4zv0RI=\n=+0cf\n-----END PGP SIGNATURE-----", "payload": "tree 06b0231a3d2a22f52a0217624f2892c1b82c6baf\nparent 40218bae0c551ad18acf0ca02ced9086d615e9b3\nauthor flip1995 <hello@philkrones.com> 1555581886 +0200\ncommitter flip1995 <hello@philkrones.com> 1555581886 +0200\n\nRemove code duplication\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/834ad7680642cbf8feac53b264b75a509bb48ed1", "html_url": "https://github.com/rust-lang/rust/commit/834ad7680642cbf8feac53b264b75a509bb48ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/834ad7680642cbf8feac53b264b75a509bb48ed1/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40218bae0c551ad18acf0ca02ced9086d615e9b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/40218bae0c551ad18acf0ca02ced9086d615e9b3", "html_url": "https://github.com/rust-lang/rust/commit/40218bae0c551ad18acf0ca02ced9086d615e9b3"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "5b3310b28dfbdb9d7f0b0483cd197b0651f29c3e", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 21, "deletions": 45, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/834ad7680642cbf8feac53b264b75a509bb48ed1/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834ad7680642cbf8feac53b264b75a509bb48ed1/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=834ad7680642cbf8feac53b264b75a509bb48ed1", "patch": "@@ -4,7 +4,6 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n use crate::consts::{constant, Constant};\n-use crate::syntax::ast::LitKind;\n use crate::utils::{in_macro, is_direct_expn_of, span_help_and_lint};\n \n declare_clippy_lint! {\n@@ -43,51 +42,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                     !in_macro(span)\n                 });\n             if let ExprKind::Unary(_, ref lit) = e.node;\n+            if let Some(bool_const) = constant(cx, cx.tables, lit);\n             then {\n-                if let ExprKind::Lit(ref inner) = lit.node {\n-                    match inner.node {\n-                        LitKind::Bool(true) => {\n-                            span_help_and_lint(\n-                                cx,\n-                                ASSERTIONS_ON_CONSTANTS,\n-                                e.span,\n-                                \"`assert!(true)` will be optimized out by the compiler\",\n-                                \"remove it\"\n-                            );\n-                        },\n-                        LitKind::Bool(false) if !is_debug_assert => {\n-                            span_help_and_lint(\n-                                cx,\n-                                ASSERTIONS_ON_CONSTANTS,\n-                                e.span,\n-                                \"`assert!(false)` should probably be replaced\",\n-                                \"use `panic!()` or `unreachable!()`\"\n-                            );\n-                        },\n-                        _ => (),\n-                    }\n-                } else if let Some(bool_const) = constant(cx, cx.tables, lit) {\n-                    match bool_const.0 {\n-                        Constant::Bool(true) => {\n-                            span_help_and_lint(\n-                                cx,\n-                                ASSERTIONS_ON_CONSTANTS,\n-                                e.span,\n-                                \"`assert!(const: true)` will be optimized out by the compiler\",\n-                                \"remove it\"\n-                            );\n-                        },\n-                        Constant::Bool(false) if !is_debug_assert => {\n-                            span_help_and_lint(\n-                                cx,\n-                                ASSERTIONS_ON_CONSTANTS,\n-                                e.span,\n-                                \"`assert!(const: false)` should probably be replaced\",\n-                                \"use `panic!()` or `unreachable!()`\"\n-                            );\n-                        },\n-                        _ => (),\n-                    }\n+                match bool_const.0 {\n+                    Constant::Bool(true) => {\n+                        span_help_and_lint(\n+                            cx,\n+                            ASSERTIONS_ON_CONSTANTS,\n+                            e.span,\n+                            \"`assert!(true)` will be optimized out by the compiler\",\n+                            \"remove it\"\n+                        );\n+                    },\n+                    Constant::Bool(false) if !is_debug_assert => {\n+                        span_help_and_lint(\n+                            cx,\n+                            ASSERTIONS_ON_CONSTANTS,\n+                            e.span,\n+                            \"`assert!(false)` should probably be replaced\",\n+                            \"use `panic!()` or `unreachable!()`\"\n+                        );\n+                    },\n+                    _ => (),\n                 }\n             }\n         }"}]}