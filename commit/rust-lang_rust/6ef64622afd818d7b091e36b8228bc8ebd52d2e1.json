{"sha": "6ef64622afd818d7b091e36b8228bc8ebd52d2e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZjY0NjIyYWZkODE4ZDdiMDkxZTM2YjgyMjhiYzhlYmQ1MmQyZTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-24T11:48:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T11:48:32Z"}, "message": "Merge #3700\n\n3700: fill match arms with empty block rather than unit tuple r=matklad a=JoshMcguigan\n\nAs requested by @Veetaha in #3689 and #3687, this modifies the fill match arms assist to create match arms as an empty block `{}` rather than a unit tuple `()`.\r\n\r\nIn one test I left one of the pre-existing match arms as a unit tuple, and added a body to another match arm, to demonstrate that the contents of existing match arms persist. \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "cc93bacfd4b51fb2c60e4da01f5df34e87fc7eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc93bacfd4b51fb2c60e4da01f5df34e87fc7eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ef64622afd818d7b091e36b8228bc8ebd52d2e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeefOQCRBK7hj4Ov3rIwAAdHIIAAU6bWDdE98fwmMXKh8LBotq\nro/EC37FBnqNlijVDL3UUv4aStuTMm1c5sLTzVRDFCEXPnVM8MB5Y7Rx3Q2ResOj\ntF1Gscvj3SA/DdQ/XCSg1XKY/e2eZtpHeFZjCiLpsGbkBE9MqV/9wcSCHBh8nkaw\n/kXG2DBiMbVqhInGgG5RvGqMHefUe6QDKjzidHzXH9QqWywY0uc+NP9BEstHBRHa\nxlk99aCnQmRQgYRukE9XXlsd71pYqILzFXQFNSGZ/O1xtk+smrGm6Syb4amSPfYJ\ny8TQJHiW6T7UqCZifPuJnWeNftIf9090PRbO9Lxj9FvTNBwXUr4sMnLdcMCdElE=\n=+YFL\n-----END PGP SIGNATURE-----\n", "payload": "tree cc93bacfd4b51fb2c60e4da01f5df34e87fc7eaf\nparent 8617fe641ddc0d8c4303c5bbe49152ea320ef179\nparent ff62ef19f7c29b033d49962bfebf4d4cf43694d5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585050512 +0000\ncommitter GitHub <noreply@github.com> 1585050512 +0000\n\nMerge #3700\n\n3700: fill match arms with empty block rather than unit tuple r=matklad a=JoshMcguigan\n\nAs requested by @Veetaha in #3689 and #3687, this modifies the fill match arms assist to create match arms as an empty block `{}` rather than a unit tuple `()`.\r\n\r\nIn one test I left one of the pre-existing match arms as a unit tuple, and added a body to another match arm, to demonstrate that the contents of existing match arms persist. \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef64622afd818d7b091e36b8228bc8ebd52d2e1", "html_url": "https://github.com/rust-lang/rust/commit/6ef64622afd818d7b091e36b8228bc8ebd52d2e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8617fe641ddc0d8c4303c5bbe49152ea320ef179", "url": "https://api.github.com/repos/rust-lang/rust/commits/8617fe641ddc0d8c4303c5bbe49152ea320ef179", "html_url": "https://github.com/rust-lang/rust/commit/8617fe641ddc0d8c4303c5bbe49152ea320ef179"}, {"sha": "ff62ef19f7c29b033d49962bfebf4d4cf43694d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff62ef19f7c29b033d49962bfebf4d4cf43694d5", "html_url": "https://github.com/rust-lang/rust/commit/ff62ef19f7c29b033d49962bfebf4d4cf43694d5"}], "stats": {"total": 101, "additions": 52, "deletions": 49}, "files": [{"sha": "62dcb3808902c2962ef9cb273aa6d708508bd3a1", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=6ef64622afd818d7b091e36b8228bc8ebd52d2e1", "patch": "@@ -275,8 +275,8 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => (),\n-        Action::Stop => (),\n+        Action::Move { distance } => {}\n+        Action::Stop => {}\n     }\n }\n \"#####,"}, {"sha": "add82e5b1b4d3c66b6c696c439ff70ddb8429bc8", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=6ef64622afd818d7b091e36b8228bc8ebd52d2e1", "patch": "@@ -30,8 +30,8 @@ use ast::{MatchArm, Pat};\n //\n // fn handle(action: Action) {\n //     match action {\n-//         Action::Move { distance } => (),\n-//         Action::Stop => (),\n+//         Action::Move { distance } => {}\n+//         Action::Stop => {}\n //     }\n // }\n // ```\n@@ -57,7 +57,7 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n             .into_iter()\n             .filter_map(|variant| build_pat(ctx.db, module, variant))\n             .filter(|variant_pat| is_variant_missing(&mut arms, variant_pat))\n-            .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()))\n+            .map(|pat| make::match_arm(iter::once(pat), make::expr_empty_block()))\n             .collect()\n     } else if let Some(enum_defs) = resolve_tuple_of_enum_def(&ctx.sema, &expr) {\n         // Partial fill not currently supported for tuple of enums.\n@@ -86,7 +86,7 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n                 ast::Pat::from(make::tuple_pat(patterns))\n             })\n             .filter(|variant_pat| is_variant_missing(&mut arms, variant_pat))\n-            .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()))\n+            .map(|pat| make::match_arm(iter::once(pat), make::expr_empty_block()))\n             .collect()\n     } else {\n         return None;\n@@ -192,8 +192,8 @@ mod tests {\n             fn main() {\n                 match A::As<|> {\n                     A::As,\n-                    A::Bs{x,y:Some(_)} => (),\n-                    A::Cs(_, Some(_)) => (),\n+                    A::Bs{x,y:Some(_)} => {}\n+                    A::Cs(_, Some(_)) => {}\n                 }\n             }\n             \"#,\n@@ -227,8 +227,8 @@ mod tests {\n             }\n             fn main() {\n                 match A::As<|> {\n-                    A::Bs{x,y:Some(_)} => (),\n-                    A::Cs(_, Some(_)) => (),\n+                    A::Bs{x,y:Some(_)} => {}\n+                    A::Cs(_, Some(_)) => {}\n                 }\n             }\n             \"#,\n@@ -240,9 +240,9 @@ mod tests {\n             }\n             fn main() {\n                 match <|>A::As {\n-                    A::Bs{x,y:Some(_)} => (),\n-                    A::Cs(_, Some(_)) => (),\n-                    A::As => (),\n+                    A::Bs{x,y:Some(_)} => {}\n+                    A::Cs(_, Some(_)) => {}\n+                    A::As => {}\n                 }\n             }\n             \"#,\n@@ -261,7 +261,7 @@ mod tests {\n             }\n             fn main() {\n                 match A::As<|> {\n-                    A::Cs(_) | A::Bs => (),\n+                    A::Cs(_) | A::Bs => {}\n                 }\n             }\n             \"#,\n@@ -273,8 +273,8 @@ mod tests {\n             }\n             fn main() {\n                 match <|>A::As {\n-                    A::Cs(_) | A::Bs => (),\n-                    A::As => (),\n+                    A::Cs(_) | A::Bs => {}\n+                    A::As => {}\n                 }\n             }\n             \"#,\n@@ -299,8 +299,8 @@ mod tests {\n             }\n             fn main() {\n                 match A::As<|> {\n-                    A::Bs if 0 < 1 => (),\n-                    A::Ds(_value) => (),\n+                    A::Bs if 0 < 1 => {}\n+                    A::Ds(_value) => { let x = 1; }\n                     A::Es(B::Xs) => (),\n                 }\n             }\n@@ -319,11 +319,11 @@ mod tests {\n             }\n             fn main() {\n                 match <|>A::As {\n-                    A::Bs if 0 < 1 => (),\n-                    A::Ds(_value) => (),\n+                    A::Bs if 0 < 1 => {}\n+                    A::Ds(_value) => { let x = 1; }\n                     A::Es(B::Xs) => (),\n-                    A::As => (),\n-                    A::Cs => (),\n+                    A::As => {}\n+                    A::Cs => {}\n                 }\n             }\n             \"#,\n@@ -360,11 +360,11 @@ mod tests {\n             fn main() {\n                 let a = A::As;\n                 match <|>a {\n-                    A::As => (),\n-                    A::Bs => (),\n-                    A::Cs(_) => (),\n-                    A::Ds(_, _) => (),\n-                    A::Es { x, y } => (),\n+                    A::As => {}\n+                    A::Bs => {}\n+                    A::Cs(_) => {}\n+                    A::Ds(_, _) => {}\n+                    A::Es { x, y } => {}\n                 }\n             }\n             \"#,\n@@ -405,10 +405,10 @@ mod tests {\n                 let a = A::One;\n                 let b = B::One;\n                 match <|>(a, b) {\n-                    (A::One, B::One) => (),\n-                    (A::One, B::Two) => (),\n-                    (A::Two, B::One) => (),\n-                    (A::Two, B::Two) => (),\n+                    (A::One, B::One) => {}\n+                    (A::One, B::Two) => {}\n+                    (A::Two, B::One) => {}\n+                    (A::Two, B::Two) => {}\n                 }\n             }\n             \"#,\n@@ -449,10 +449,10 @@ mod tests {\n                 let a = A::One;\n                 let b = B::One;\n                 match <|>(&a, &b) {\n-                    (A::One, B::One) => (),\n-                    (A::One, B::Two) => (),\n-                    (A::Two, B::One) => (),\n-                    (A::Two, B::Two) => (),\n+                    (A::One, B::One) => {}\n+                    (A::One, B::Two) => {}\n+                    (A::Two, B::One) => {}\n+                    (A::Two, B::Two) => {}\n                 }\n             }\n             \"#,\n@@ -477,7 +477,7 @@ mod tests {\n                 let a = A::One;\n                 let b = B::One;\n                 match (a<|>, b) {\n-                    (A::Two, B::One) => (),\n+                    (A::Two, B::One) => {}\n                 }\n             }\n             \"#,\n@@ -502,10 +502,10 @@ mod tests {\n                 let a = A::One;\n                 let b = B::One;\n                 match (a<|>, b) {\n-                    (A::Two, B::One) => (),\n-                    (A::One, B::One) => (),\n-                    (A::One, B::Two) => (),\n-                    (A::Two, B::Two) => (),\n+                    (A::Two, B::One) => {}\n+                    (A::One, B::One) => {}\n+                    (A::One, B::Two) => {}\n+                    (A::Two, B::Two) => {}\n                 }\n             }\n             \"#,\n@@ -555,7 +555,7 @@ mod tests {\n \n             fn foo(a: &A) {\n                 match <|>a {\n-                    A::As => (),\n+                    A::As => {}\n                 }\n             }\n             \"#,\n@@ -580,7 +580,7 @@ mod tests {\n \n             fn foo(a: &mut A) {\n                 match <|>a {\n-                    A::Es { x, y } => (),\n+                    A::Es { x, y } => {}\n                 }\n             }\n             \"#,\n@@ -611,7 +611,7 @@ mod tests {\n \n             fn main() {\n                 match E::X {\n-                    <|>_ => {},\n+                    <|>_ => {}\n                 }\n             }\n             \"#,\n@@ -620,8 +620,8 @@ mod tests {\n \n             fn main() {\n                 match <|>E::X {\n-                    E::X => (),\n-                    E::Y => (),\n+                    E::X => {}\n+                    E::Y => {}\n                 }\n             }\n             \"#,\n@@ -648,8 +648,8 @@ mod tests {\n \n             fn main() {\n                 match <|>X {\n-                    X => (),\n-                    foo::E::Y => (),\n+                    X => {}\n+                    foo::E::Y => {}\n                 }\n             }\n             \"#,"}, {"sha": "1145b69e892d98def60a988d6d443e1f19388d81", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=6ef64622afd818d7b091e36b8228bc8ebd52d2e1", "patch": "@@ -87,6 +87,9 @@ pub fn block_from_expr(e: ast::Expr) -> ast::Block {\n pub fn expr_unit() -> ast::Expr {\n     expr_from_text(\"()\")\n }\n+pub fn expr_empty_block() -> ast::Expr {\n+    expr_from_text(\"{}\")\n+}\n pub fn expr_unimplemented() -> ast::Expr {\n     expr_from_text(\"unimplemented!()\")\n }"}, {"sha": "f3ce6b0e0f4022967be2c24d5ca5db0896733e83", "filename": "docs/user/assists.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ef64622afd818d7b091e36b8228bc8ebd52d2e1/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=6ef64622afd818d7b091e36b8228bc8ebd52d2e1", "patch": "@@ -267,8 +267,8 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => (),\n-        Action::Stop => (),\n+        Action::Move { distance } => {}\n+        Action::Stop => {}\n     }\n }\n ```"}]}