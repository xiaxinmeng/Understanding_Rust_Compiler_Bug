{"sha": "9619a2e3a3d24f34f2b8e86d652665af594a709c", "node_id": "C_kwDOAAsO6NoAKDk2MTlhMmUzYTNkMjRmMzRmMmI4ZTg2ZDY1MjY2NWFmNTk0YTcwOWM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-16T02:14:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-16T02:14:52Z"}, "message": "Avoid unnecessary cloning in `Parser::get_ident_from_generic_arg`.", "tree": {"sha": "d395b46b84ad0867618097483a9a300b46552654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d395b46b84ad0867618097483a9a300b46552654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9619a2e3a3d24f34f2b8e86d652665af594a709c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9619a2e3a3d24f34f2b8e86d652665af594a709c", "html_url": "https://github.com/rust-lang/rust/commit/9619a2e3a3d24f34f2b8e86d652665af594a709c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9619a2e3a3d24f34f2b8e86d652665af594a709c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e04fed6fad401705c41f6f4ab24637d7c32c679", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e04fed6fad401705c41f6f4ab24637d7c32c679", "html_url": "https://github.com/rust-lang/rust/commit/3e04fed6fad401705c41f6f4ab24637d7c32c679"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "fc7fb866f110f5dd91e85fa1f0a0d79ea8a47cef", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9619a2e3a3d24f34f2b8e86d652665af594a709c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9619a2e3a3d24f34f2b8e86d652665af594a709c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=9619a2e3a3d24f34f2b8e86d652665af594a709c", "patch": "@@ -527,7 +527,7 @@ impl<'a> Parser<'a> {\n                         Ok(ident_gen_args) => ident_gen_args,\n                         Err(()) => return Ok(Some(AngleBracketedArg::Arg(arg))),\n                     };\n-                    if binder.is_some() {\n+                    if binder {\n                         // FIXME(compiler-errors): this could be improved by suggesting lifting\n                         // this up to the trait, at least before this becomes real syntax.\n                         // e.g. `Trait<for<'a> Assoc = Ty>` -> `for<'a> Trait<Assoc = Ty>`\n@@ -720,28 +720,24 @@ impl<'a> Parser<'a> {\n \n     /// Given a arg inside of generics, we try to destructure it as if it were the LHS in\n     /// `LHS = ...`, i.e. an associated type binding.\n-    /// This returns (optionally, if they are present) any `for<'a, 'b>` binder args, the\n+    /// This returns a bool indicating if there are any `for<'a, 'b>` binder args, the\n     /// identifier, and any GAT arguments.\n     fn get_ident_from_generic_arg(\n         &self,\n         gen_arg: &GenericArg,\n-    ) -> Result<(Option<Vec<ast::GenericParam>>, Ident, Option<GenericArgs>), ()> {\n+    ) -> Result<(bool, Ident, Option<GenericArgs>), ()> {\n         if let GenericArg::Type(ty) = gen_arg {\n             if let ast::TyKind::Path(qself, path) = &ty.kind\n                 && qself.is_none()\n                 && let [seg] = path.segments.as_slice()\n             {\n-                return Ok((None, seg.ident, seg.args.as_deref().cloned()));\n+                return Ok((false, seg.ident, seg.args.as_deref().cloned()));\n             } else if let ast::TyKind::TraitObject(bounds, ast::TraitObjectSyntax::None) = &ty.kind\n                 && let [ast::GenericBound::Trait(trait_ref, ast::TraitBoundModifier::None)] =\n                     bounds.as_slice()\n                 && let [seg] = trait_ref.trait_ref.path.segments.as_slice()\n             {\n-                return Ok((\n-                    Some(trait_ref.bound_generic_params.clone()),\n-                    seg.ident,\n-                    seg.args.as_deref().cloned(),\n-                ));\n+                return Ok((true, seg.ident, seg.args.as_deref().cloned()));\n             }\n         }\n         Err(())"}]}