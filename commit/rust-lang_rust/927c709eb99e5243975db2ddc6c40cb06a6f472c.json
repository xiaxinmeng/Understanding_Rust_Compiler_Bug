{"sha": "927c709eb99e5243975db2ddc6c40cb06a6f472c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyN2M3MDllYjk5ZTUyNDM5NzVkYjJkZGM2YzQwY2IwNmE2ZjQ3MmM=", "commit": {"author": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-08-18T12:10:46Z"}, "committer": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-09-03T18:02:35Z"}, "message": "Impl Eq and PartialEq for EvalSnapshot in terms of the Snapshot trait", "tree": {"sha": "482cd97e477ca07b6c5f54b19f0249be1e9d3314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/482cd97e477ca07b6c5f54b19f0249be1e9d3314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/927c709eb99e5243975db2ddc6c40cb06a6f472c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/927c709eb99e5243975db2ddc6c40cb06a6f472c", "html_url": "https://github.com/rust-lang/rust/commit/927c709eb99e5243975db2ddc6c40cb06a6f472c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/927c709eb99e5243975db2ddc6c40cb06a6f472c/comments", "author": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf6ba974dede851b59afb9aa031ce0c548b754c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6ba974dede851b59afb9aa031ce0c548b754c4", "html_url": "https://github.com/rust-lang/rust/commit/bf6ba974dede851b59afb9aa031ce0c548b754c4"}], "stats": {"total": 114, "additions": 45, "deletions": 69}, "files": [{"sha": "cc6d6d433f84ee3da229f50837f6aeda6315b3f2", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/927c709eb99e5243975db2ddc6c40cb06a6f472c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927c709eb99e5243975db2ddc6c40cb06a6f472c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=927c709eb99e5243975db2ddc6c40cb06a6f472c", "patch": "@@ -111,32 +111,6 @@ pub struct Frame<'mir, 'tcx: 'mir> {\n     pub stmt: usize,\n }\n \n-impl<'mir, 'tcx: 'mir> Eq for Frame<'mir, 'tcx> {}\n-\n-impl<'mir, 'tcx: 'mir> PartialEq for Frame<'mir, 'tcx> {\n-    fn eq(&self, other: &Self) -> bool {\n-        let Frame {\n-            mir: _,\n-            instance,\n-            span: _,\n-            return_to_block,\n-            return_place,\n-            locals,\n-            block,\n-            stmt,\n-        } = self;\n-\n-        // Some of these are constant during evaluation, but are included\n-        // anyways for correctness.\n-        *instance == other.instance\n-            && *return_to_block == other.return_to_block\n-            && *return_place == other.return_place\n-            && *locals == other.locals\n-            && *block == other.block\n-            && *stmt == other.stmt\n-    }\n-}\n-\n impl<'a, 'mir, 'tcx: 'mir> HashStable<StableHashingContext<'a>> for Frame<'mir, 'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher<W>) {\n         let Frame {"}, {"sha": "9e61de92936bdb7cf2fdb84670e9b69b3c15d0f7", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/927c709eb99e5243975db2ddc6c40cb06a6f472c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927c709eb99e5243975db2ddc6c40cb06a6f472c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=927c709eb99e5243975db2ddc6c40cb06a6f472c", "patch": "@@ -69,27 +69,6 @@ impl<'a, 'b, 'c, 'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout\n     }\n }\n \n-impl<'a, 'mir, 'tcx, M> Eq for Memory<'a, 'mir, 'tcx, M>\n-    where M: Machine<'mir, 'tcx>,\n-          'tcx: 'a + 'mir,\n-{}\n-\n-impl<'a, 'mir, 'tcx, M> PartialEq for Memory<'a, 'mir, 'tcx, M>\n-    where M: Machine<'mir, 'tcx>,\n-          'tcx: 'a + 'mir,\n-{\n-    fn eq(&self, other: &Self) -> bool {\n-        let Memory {\n-            data,\n-            alloc_map,\n-            tcx: _,\n-        } = self;\n-\n-        *data == other.data\n-            && *alloc_map == other.alloc_map\n-    }\n-}\n-\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     pub fn new(tcx: TyCtxtAt<'a, 'tcx, 'tcx>, data: M::MemoryData) -> Self {\n         Memory {"}, {"sha": "66364a7390c73ba59188a8f2ab568d014cc51476", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/927c709eb99e5243975db2ddc6c40cb06a6f472c/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927c709eb99e5243975db2ddc6c40cb06a6f472c/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=927c709eb99e5243975db2ddc6c40cb06a6f472c", "patch": "@@ -11,7 +11,7 @@ use syntax::ast::Mutability;\n use syntax::source_map::Span;\n \n use super::eval_context::{LocalValue, StackPopCleanup};\n-use super::{Frame, Memory, Machine, Operand, MemPlace, Place, PlaceExtra, Value};\n+use super::{Frame, Memory, Machine, Operand, MemPlace, Place, Value};\n \n trait SnapshotContext<'a> {\n     type To;\n@@ -24,6 +24,20 @@ trait Snapshot<'a, Ctx: SnapshotContext<'a>> {\n     fn snapshot(&self, ctx: &'a Ctx) -> Self::Item;\n }\n \n+impl<'a, Ctx, T> Snapshot<'a, Ctx> for Option<T>\n+    where Ctx: SnapshotContext<'a>,\n+          T: Snapshot<'a, Ctx>\n+{\n+    type Item = Option<<T as Snapshot<'a, Ctx>>::Item>;\n+\n+    fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n+        match self {\n+            Some(x) => Some(x.snapshot(ctx)),\n+            None => None,\n+        }\n+    }\n+}\n+\n #[derive(Eq, PartialEq)]\n struct AllocIdSnapshot<'a>(Option<AllocationSnapshot<'a>>);\n \n@@ -124,22 +138,6 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Place\n     }\n }\n \n-type PlaceExtraSnapshot<'a> = PlaceExtra<AllocIdSnapshot<'a>>;\n-\n-impl<'a, Ctx> Snapshot<'a, Ctx> for PlaceExtra\n-    where Ctx: SnapshotContext<'a, To=Allocation, From=AllocId>,\n-{\n-    type Item = PlaceExtraSnapshot<'a>;\n-\n-    fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n-        match self {\n-            PlaceExtra::Vtable(p) => PlaceExtra::Vtable(p.snapshot(ctx)),\n-            PlaceExtra::Length(l) => PlaceExtra::Length(*l),\n-            PlaceExtra::None => PlaceExtra::None,\n-        }\n-    }\n-}\n-\n type ValueSnapshot<'a> = Value<AllocIdSnapshot<'a>>;\n \n impl<'a, Ctx> Snapshot<'a, Ctx> for Value\n@@ -203,7 +201,7 @@ struct AllocationSnapshot<'a> {\n     relocations: RelocationsSnapshot<'a>,\n     undef_mask: &'a UndefMask,\n     align: &'a Align,\n-    runtime_mutability: &'a Mutability,\n+    mutability: &'a Mutability,\n }\n \n impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n@@ -212,20 +210,20 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n     type Item = AllocationSnapshot<'a>;\n \n     fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n-        let Allocation { bytes, relocations, undef_mask, align, runtime_mutability } = self;\n+        let Allocation { bytes, relocations, undef_mask, align, mutability } = self;\n \n         AllocationSnapshot {\n             bytes,\n             undef_mask,\n             align,\n-            runtime_mutability,\n+            mutability,\n             relocations: relocations.snapshot(ctx),\n         }\n     }\n }\n \n #[derive(Eq, PartialEq)]\n-struct FrameSnapshot<'a, 'tcx> {\n+struct FrameSnapshot<'a, 'tcx: 'a> {\n     instance: &'a ty::Instance<'tcx>,\n     span: &'a Span,\n     return_to_block: &'a StackPopCleanup,\n@@ -269,6 +267,15 @@ struct MemorySnapshot<'a, 'mir: 'a, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx> + 'a\n     data: &'a M::MemoryData,\n }\n \n+impl<'a, 'mir, 'tcx, M> Memory<'a, 'mir, 'tcx, M>\n+    where M: Machine<'mir, 'tcx>,\n+{\n+    fn snapshot<'b: 'a>(&'b self) -> MemorySnapshot<'b, 'mir, 'tcx, M> {\n+        let Memory { data, .. } = self;\n+        MemorySnapshot { data }\n+    }\n+}\n+\n impl<'a, 'b, 'mir, 'tcx, M> SnapshotContext<'b> for Memory<'a, 'mir, 'tcx, M>\n     where M: Machine<'mir, 'tcx>,\n {\n@@ -280,7 +287,6 @@ impl<'a, 'b, 'mir, 'tcx, M> SnapshotContext<'b> for Memory<'a, 'mir, 'tcx, M>\n }\n \n /// The virtual machine state during const-evaluation at a given point in time.\n-#[derive(Eq, PartialEq)]\n pub struct EvalSnapshot<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     machine: M,\n     memory: Memory<'a, 'mir, 'tcx, M>,\n@@ -297,6 +303,11 @@ impl<'a, 'mir, 'tcx, M> EvalSnapshot<'a, 'mir, 'tcx, M>\n             stack: stack.into(),\n         }\n     }\n+\n+    fn snapshot<'b: 'a>(&'b self) -> (&'b M, MemorySnapshot<'b, 'mir, 'tcx, M>, Vec<FrameSnapshot<'a, 'tcx>>) {\n+        let EvalSnapshot{ machine, memory, stack } = self;\n+        (&machine, memory.snapshot(), stack.iter().map(|frame| frame.snapshot(memory)).collect())\n+    }\n }\n \n impl<'a, 'mir, 'tcx, M> Hash for EvalSnapshot<'a, 'mir, 'tcx, M>\n@@ -319,3 +330,15 @@ impl<'a, 'b, 'mir, 'tcx, M> HashStable<StableHashingContext<'b>> for EvalSnapsho\n         (machine, &memory.data, stack).hash_stable(hcx, hasher);\n     }\n }\n+\n+impl<'a, 'mir, 'tcx, M> Eq for EvalSnapshot<'a, 'mir, 'tcx, M>\n+    where M: Machine<'mir, 'tcx>,\n+{}\n+\n+impl<'a, 'mir, 'tcx, M> PartialEq for EvalSnapshot<'a, 'mir, 'tcx, M>\n+    where M: Machine<'mir, 'tcx>,\n+{\n+    fn eq(&self, other: &Self) -> bool {\n+        self.snapshot() == other.snapshot()\n+    }\n+}"}]}