{"sha": "0e92165eafee26e0fb27f9a3756e8a68884d685d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOTIxNjVlYWZlZTI2ZTBmYjI3ZjlhMzc1NmU4YTY4ODg0ZDY4NWQ=", "commit": {"author": {"name": "Leif Arne Storset", "email": "leifarne@storset.net", "date": "2015-07-19T11:22:39Z"}, "committer": {"name": "Leif Arne Storset", "email": "leifarne@storset.net", "date": "2015-07-30T19:48:25Z"}, "message": "Show impl<T>\n\nThis includes a new example with Rectangle, instead of reusing HasArea,\nbecause fn area would require the Mul trait, and the added complexity of\nthat would be better left for the Operators and Overloading chapter.\n\nSquashed at reviewer's request: Move teaser for trait bounds to bottom", "tree": {"sha": "a87d73d9e4241ff12698094925dea3184cdae23b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87d73d9e4241ff12698094925dea3184cdae23b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e92165eafee26e0fb27f9a3756e8a68884d685d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e92165eafee26e0fb27f9a3756e8a68884d685d", "html_url": "https://github.com/rust-lang/rust/commit/0e92165eafee26e0fb27f9a3756e8a68884d685d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e92165eafee26e0fb27f9a3756e8a68884d685d/comments", "author": {"login": "lastorset", "id": 464989, "node_id": "MDQ6VXNlcjQ2NDk4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/464989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lastorset", "html_url": "https://github.com/lastorset", "followers_url": "https://api.github.com/users/lastorset/followers", "following_url": "https://api.github.com/users/lastorset/following{/other_user}", "gists_url": "https://api.github.com/users/lastorset/gists{/gist_id}", "starred_url": "https://api.github.com/users/lastorset/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lastorset/subscriptions", "organizations_url": "https://api.github.com/users/lastorset/orgs", "repos_url": "https://api.github.com/users/lastorset/repos", "events_url": "https://api.github.com/users/lastorset/events{/privacy}", "received_events_url": "https://api.github.com/users/lastorset/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lastorset", "id": 464989, "node_id": "MDQ6VXNlcjQ2NDk4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/464989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lastorset", "html_url": "https://github.com/lastorset", "followers_url": "https://api.github.com/users/lastorset/followers", "following_url": "https://api.github.com/users/lastorset/following{/other_user}", "gists_url": "https://api.github.com/users/lastorset/gists{/gist_id}", "starred_url": "https://api.github.com/users/lastorset/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lastorset/subscriptions", "organizations_url": "https://api.github.com/users/lastorset/orgs", "repos_url": "https://api.github.com/users/lastorset/repos", "events_url": "https://api.github.com/users/lastorset/events{/privacy}", "received_events_url": "https://api.github.com/users/lastorset/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04badd6a973d2499731b49365a121dbc4c9c468e", "url": "https://api.github.com/repos/rust-lang/rust/commits/04badd6a973d2499731b49365a121dbc4c9c468e", "html_url": "https://github.com/rust-lang/rust/commit/04badd6a973d2499731b49365a121dbc4c9c468e"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "a8fdec805de65929a2efbc0f2b80ad8a96b17306", "filename": "src/doc/trpl/generics.md", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0e92165eafee26e0fb27f9a3756e8a68884d685d/src%2Fdoc%2Ftrpl%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e92165eafee26e0fb27f9a3756e8a68884d685d/src%2Fdoc%2Ftrpl%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgenerics.md?ref=0e92165eafee26e0fb27f9a3756e8a68884d685d", "patch": "@@ -101,11 +101,6 @@ fn takes_two_things<T, U>(x: T, y: U) {\n }\n ```\n \n-Generic functions are most useful with \u2018trait bounds\u2019, which we\u2019ll cover in the\n-[section on traits][traits].\n-\n-[traits]: traits.html\n-\n ## Generic structs\n \n You can store a generic type in a `struct` as well:\n@@ -122,3 +117,28 @@ let float_origin = Point { x: 0.0, y: 0.0 };\n \n Similarly to functions, the `<T>` is where we declare the generic parameters,\n and we then use `x: T` in the type declaration, too.\n+\n+When you want to add an implementation for the generic struct, you just\n+declare the type parameter after the `impl`:\n+\n+```rust\n+# struct Point<T> {\n+#     x: T,\n+#     y: T,\n+# }\n+#\n+impl<T> Point<T> {\n+    fn swap(&mut self) {\n+        std::mem::swap(&mut self.x, &mut self.y);\n+    }\n+}\n+```\n+\n+So far you\u2019ve seen generics that take absolutely any type. These are useful in\n+many cases: you\u2019ve already seen `Option<T>`, and later you\u2019ll meet universal\n+container types like [`Vec<T>`][Vec]. On the other hand, often you want to\n+trade that flexibility for increased expressive power. Read about [trait\n+bounds][traits] to see why and how.\n+\n+[traits]: traits.html\n+[Vec]: ../std/vec/struct.Vec.html"}, {"sha": "e7542756d52e4185df31dab54af4ececce94c78f", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0e92165eafee26e0fb27f9a3756e8a68884d685d/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e92165eafee26e0fb27f9a3756e8a68884d685d/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=0e92165eafee26e0fb27f9a3756e8a68884d685d", "patch": "@@ -152,6 +152,57 @@ We get a compile-time error:\n error: the trait `HasArea` is not implemented for the type `_` [E0277]\n ```\n \n+## Traits bounds for generic structs\n+\n+Trait constraints also can apply to implementations for generic structs.  Just\n+append the constraint when you declare type parameters. Here is a new type\n+type `Rectangle<T>` and its operation `is_square()`:\n+\n+```rust\n+struct Rectangle<T> {\n+    x: T,\n+    y: T,\n+    width: T,\n+    height: T,\n+}\n+\n+impl<T: PartialEq> Rectangle<T> {\n+    fn is_square(&self) -> bool {\n+        self.width == self.height\n+    }\n+}\n+\n+fn main() {\n+    let mut r = Rectangle {\n+        x: 0,\n+        y: 0,\n+        width: 47,\n+        height: 47,\n+    };\n+\n+    assert!(r.is_square());\n+\n+    r.height = 42;\n+    assert!(!r.is_square());\n+}\n+```\n+\n+`is_square()` needs to check that the sides are equal, so the sides must be of\n+a type that implements the [`core::cmp::PartialEq`][PartialEq] trait:\n+\n+```ignore\n+impl<T: PartialEq> Rectangle<T> { ... }\n+```\n+\n+Now, a rectangle can be defined in terms of any type that can be compared for\n+equality.\n+\n+[PartialEq]: ../core/cmp/trait.PartialEq.html\n+\n+\n+\n+# Rules for implementing traits\n+\n So far, we\u2019ve only added trait implementations to structs, but you can\n implement a trait for any type. So technically, we _could_ implement `HasArea`\n for `i32`:"}]}