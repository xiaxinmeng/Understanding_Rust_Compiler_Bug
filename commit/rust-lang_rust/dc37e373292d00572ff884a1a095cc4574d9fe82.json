{"sha": "dc37e373292d00572ff884a1a095cc4574d9fe82", "node_id": "C_kwDOAAsO6NoAKGRjMzdlMzczMjkyZDAwNTcyZmY4ODRhMWEwOTVjYzQ1NzRkOWZlODI", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-02-17T05:09:46Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-02-17T05:36:14Z"}, "message": "Add a codegen test for comparisons of 2-tuples of primitives\n\nThe operators are all overridden in full for tuples, so those parts pass easily, but they're worth pinning.\n\nGoing via `Ord::cmp`, though, doesn't optimize away for anything but `cmp`+`is_le`.  So this leaves `FIXME`s in the tests for the others.", "tree": {"sha": "b7b7c4581383d7d0e83fd32ad895f674b47cb113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b7c4581383d7d0e83fd32ad895f674b47cb113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc37e373292d00572ff884a1a095cc4574d9fe82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc37e373292d00572ff884a1a095cc4574d9fe82", "html_url": "https://github.com/rust-lang/rust/commit/dc37e373292d00572ff884a1a095cc4574d9fe82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc37e373292d00572ff884a1a095cc4574d9fe82/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5348a89a77a49f6f57c13c0edf7f493fd410159a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5348a89a77a49f6f57c13c0edf7f493fd410159a", "html_url": "https://github.com/rust-lang/rust/commit/5348a89a77a49f6f57c13c0edf7f493fd410159a"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "0244162e9bf71744b0a5207e6d6e51a8407a6a18", "filename": "tests/codegen/comparison-operators-2-tuple.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/dc37e373292d00572ff884a1a095cc4574d9fe82/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc37e373292d00572ff884a1a095cc4574d9fe82/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs?ref=dc37e373292d00572ff884a1a095cc4574d9fe82", "patch": "@@ -0,0 +1,118 @@\n+// compile-flags: -C opt-level=1 -Z merge-functions=disabled\n+// min-llvm-version: 15.0\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+type TwoTuple = (i16, u16);\n+\n+//\n+// The operators are all overridden directly, so should optimize easily.\n+//\n+\n+// CHECK-LABEL: @check_lt_direct\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_lt_direct(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp slt i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp ult i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    a < b\n+}\n+\n+// CHECK-LABEL: @check_le_direct\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_le_direct(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp sle i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp ule i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    a <= b\n+}\n+\n+// CHECK-LABEL: @check_gt_direct\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_gt_direct(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp sgt i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp ugt i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    a > b\n+}\n+\n+// CHECK-LABEL: @check_ge_direct\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_ge_direct(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp sge i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp uge i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    a >= b\n+}\n+\n+//\n+// These ones are harder, since there are more intermediate values to remove.\n+//\n+// `<` seems to be getting lucky right now, so test that doesn't regress.\n+//\n+// The others, however, aren't managing to optimize away the extra `select`s yet.\n+// See <https://github.com/rust-lang/rust/issues/106107> for more about this.\n+//\n+\n+// CHECK-LABEL: @check_lt_via_cmp\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_lt_via_cmp(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp slt i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp ult i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    Ord::cmp(&a, &b).is_lt()\n+}\n+\n+// CHECK-LABEL: @check_le_via_cmp\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_le_via_cmp(a: TwoTuple, b: TwoTuple) -> bool {\n+    // FIXME-CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP0:.+]] = icmp sle i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP1:.+]] = icmp ule i16 %[[A1]], %[[B1]]\n+    // FIXME-CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // FIXME-CHECK: ret i1 %[[R]]\n+    Ord::cmp(&a, &b).is_le()\n+}\n+\n+// CHECK-LABEL: @check_gt_via_cmp\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_gt_via_cmp(a: TwoTuple, b: TwoTuple) -> bool {\n+    // FIXME-CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP0:.+]] = icmp sgt i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP1:.+]] = icmp ugt i16 %[[A1]], %[[B1]]\n+    // FIXME-CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // FIXME-CHECK: ret i1 %[[R]]\n+    Ord::cmp(&a, &b).is_gt()\n+}\n+\n+// CHECK-LABEL: @check_ge_via_cmp\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_ge_via_cmp(a: TwoTuple, b: TwoTuple) -> bool {\n+    // FIXME-CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP0:.+]] = icmp sge i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP1:.+]] = icmp uge i16 %[[A1]], %[[B1]]\n+    // FIXME-CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // FIXME-CHECK: ret i1 %[[R]]\n+    Ord::cmp(&a, &b).is_ge()\n+}"}]}