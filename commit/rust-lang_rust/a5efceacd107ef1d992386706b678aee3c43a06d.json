{"sha": "a5efceacd107ef1d992386706b678aee3c43a06d", "node_id": "C_kwDOAAsO6NoAKGE1ZWZjZWFjZDEwN2VmMWQ5OTIzODY3MDZiNjc4YWVlM2M0M2EwNmQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-21T06:37:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-28T06:25:41Z"}, "message": "rustc_metadata: Merge items from `extern` blocks into their parent modules\n\nduring metadata encoding rather than during metadata decoding", "tree": {"sha": "9582b61856d3ab139aacf232c9fe2647cb6ae0f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9582b61856d3ab139aacf232c9fe2647cb6ae0f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5efceacd107ef1d992386706b678aee3c43a06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5efceacd107ef1d992386706b678aee3c43a06d", "html_url": "https://github.com/rust-lang/rust/commit/a5efceacd107ef1d992386706b678aee3c43a06d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5efceacd107ef1d992386706b678aee3c43a06d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41ce641a407965ca0709f9f2d60faae3a56755c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ce641a407965ca0709f9f2d60faae3a56755c2", "html_url": "https://github.com/rust-lang/rust/commit/41ce641a407965ca0709f9f2d60faae3a56755c2"}], "stats": {"total": 64, "additions": 20, "deletions": 44}, "files": [{"sha": "caf29df2276c8f97844edec82cd631a6e305e0b6", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a5efceacd107ef1d992386706b678aee3c43a06d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5efceacd107ef1d992386706b678aee3c43a06d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a5efceacd107ef1d992386706b678aee3c43a06d", "patch": "@@ -1104,42 +1104,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             let children = self.root.tables.children.get(self, id).unwrap_or_else(Lazy::empty);\n \n             for child_index in children.decode((self, sess)) {\n-                // Get the item.\n-                let child_kind = match self.maybe_kind(child_index) {\n-                    Some(child_kind) => child_kind,\n-                    None => continue,\n-                };\n-\n-                // Hand off the item to the callback.\n-                match child_kind {\n-                    // FIXME(eddyb) Don't encode these in children.\n-                    EntryKind::ForeignMod => {\n-                        let child_children = self\n-                            .root\n-                            .tables\n-                            .children\n-                            .get(self, child_index)\n-                            .unwrap_or_else(Lazy::empty);\n-                        for child_index in child_children.decode((self, sess)) {\n-                            let kind = self.def_kind(child_index);\n-                            callback(Export {\n-                                res: Res::Def(kind, self.local_def_id(child_index)),\n-                                ident: self.item_ident(child_index, sess),\n-                                vis: self.get_visibility(child_index),\n-                                span: self\n-                                    .root\n-                                    .tables\n-                                    .span\n-                                    .get(self, child_index)\n-                                    .unwrap()\n-                                    .decode((self, sess)),\n-                            });\n-                        }\n-                        continue;\n-                    }\n-                    EntryKind::Impl(_) => continue,\n-\n-                    _ => {}\n+                // FIXME: Merge with the logic below.\n+                if let None | Some(EntryKind::ForeignMod | EntryKind::Impl(_)) =\n+                    self.maybe_kind(child_index)\n+                {\n+                    continue;\n                 }\n \n                 let def_key = self.def_key(child_index);"}, {"sha": "531ed4c3d6d4d4bfbc01a0bd77de5d2cb1bb6796", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a5efceacd107ef1d992386706b678aee3c43a06d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5efceacd107ef1d992386706b678aee3c43a06d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a5efceacd107ef1d992386706b678aee3c43a06d", "patch": "@@ -1100,9 +1100,21 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Encode this here because we don't do it in encode_def_ids.\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n         } else {\n-            record!(self.tables.children[def_id] <- md.item_ids.iter().map(|item_id| {\n-                item_id.def_id.local_def_index\n-            }));\n+            let direct_children = md.item_ids.iter().map(|item_id| item_id.def_id.local_def_index);\n+            // Foreign items are planted into their parent modules from name resolution point of view.\n+            let tcx = self.tcx;\n+            let foreign_item_children = md\n+                .item_ids\n+                .iter()\n+                .filter_map(|item_id| match tcx.hir().item(*item_id).kind {\n+                    hir::ItemKind::ForeignMod { items, .. } => {\n+                        Some(items.iter().map(|fi_ref| fi_ref.id.def_id.local_def_index))\n+                    }\n+                    _ => None,\n+                })\n+                .flatten();\n+\n+            record!(self.tables.children[def_id] <- direct_children.chain(foreign_item_children));\n         }\n     }\n \n@@ -1503,11 +1515,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         record!(self.tables.kind[def_id] <- entry_kind);\n         // FIXME(eddyb) there should be a nicer way to do this.\n         match item.kind {\n-            hir::ItemKind::ForeignMod { items, .. } => record!(self.tables.children[def_id] <-\n-                items\n-                    .iter()\n-                    .map(|foreign_item| foreign_item.id.def_id.local_def_index)\n-            ),\n             hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-\n                 self.tcx.adt_def(def_id).variants.iter().map(|v| {\n                     assert!(v.def_id.is_local());"}]}