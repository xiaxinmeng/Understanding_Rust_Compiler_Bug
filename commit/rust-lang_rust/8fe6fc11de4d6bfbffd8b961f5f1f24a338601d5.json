{"sha": "8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZTZmYzExZGU0ZDZiZmJmZmQ4Yjk2MWY1ZjFmMjRhMzM4NjAxZDU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-28T21:04:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-30T16:19:02Z"}, "message": "Change char::escape_{default,unicode} to take callbacks instead of allocating\nstrings", "tree": {"sha": "dad32e62eb08d71c621bfb573c57f89c2aae6814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad32e62eb08d71c621bfb573c57f89c2aae6814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5", "html_url": "https://github.com/rust-lang/rust/commit/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b3569a1b39097481877cf8fee538c78099c5acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3569a1b39097481877cf8fee538c78099c5acd", "html_url": "https://github.com/rust-lang/rust/commit/2b3569a1b39097481877cf8fee538c78099c5acd"}], "stats": {"total": 129, "additions": 73, "deletions": 56}, "files": [{"sha": "101ea67cf592fdb45e7822eb404edb205fad9111", "filename": "src/libstd/char.rs", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5", "patch": "@@ -12,12 +12,11 @@\n \n use container::Container;\n use option::{None, Option, Some};\n-use str;\n-use str::{StrSlice, OwnedStr};\n-use u32;\n-use uint;\n+use str::StrSlice;\n use unicode::{derived_property, general_category};\n \n+#[cfg(test)] use str::OwnedStr;\n+\n #[cfg(not(test))] use cmp::{Eq, Ord};\n #[cfg(not(test))] use num::Zero;\n \n@@ -202,21 +201,21 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n /// - chars in [0x100,0xffff] get 4-digit escapes: `\\\\uNNNN`\n /// - chars above 0x10000 get 8-digit escapes: `\\\\UNNNNNNNN`\n ///\n-pub fn escape_unicode(c: char) -> ~str {\n-    let s = u32::to_str_radix(c as u32, 16u);\n-    let (c, pad) = cond!(\n-        (c <= '\\xff')   { ('x', 2u) }\n-        (c <= '\\uffff') { ('u', 4u) }\n-        _               { ('U', 8u) }\n+pub fn escape_unicode(c: char, f: &fn(char)) {\n+    // avoid calling str::to_str_radix because we don't really need to allocate\n+    // here.\n+    f('\\\\');\n+    let pad = cond!(\n+        (c <= '\\xff')   { f('x'); 2 }\n+        (c <= '\\uffff') { f('u'); 4 }\n+        _               { f('U'); 8 }\n     );\n-    assert!(s.len() <= pad);\n-    let mut out = ~\"\\\\\";\n-    out.push_str(str::from_char(c));\n-    for uint::range(s.len(), pad) |_| {\n-        out.push_str(\"0\");\n+    for int::range_step(4 * (pad - 1), -1, -4) |offset| {\n+        match ((c as u32) >> offset) & 0xf {\n+            i @ 0 .. 9 => { f('0' + i as char); }\n+            i => { f('a' + (i - 10) as char); }\n+        }\n     }\n-    out.push_str(s);\n-    out\n }\n \n ///\n@@ -231,16 +230,16 @@ pub fn escape_unicode(c: char) -> ~str {\n /// - Any other chars in the range [0x20,0x7e] are not escaped.\n /// - Any other chars are given hex unicode escapes; see `escape_unicode`.\n ///\n-pub fn escape_default(c: char) -> ~str {\n+pub fn escape_default(c: char, f: &fn(char)) {\n     match c {\n-        '\\t' => ~\"\\\\t\",\n-        '\\r' => ~\"\\\\r\",\n-        '\\n' => ~\"\\\\n\",\n-        '\\\\' => ~\"\\\\\\\\\",\n-        '\\'' => ~\"\\\\'\",\n-        '\"'  => ~\"\\\\\\\"\",\n-        '\\x20' .. '\\x7e' => str::from_char(c),\n-        _ => c.escape_unicode(),\n+        '\\t' => { f('\\\\'); f('t'); }\n+        '\\r' => { f('\\\\'); f('r'); }\n+        '\\n' => { f('\\\\'); f('n'); }\n+        '\\\\' => { f('\\\\'); f('\\\\'); }\n+        '\\'' => { f('\\\\'); f('\\''); }\n+        '\"'  => { f('\\\\'); f('\"'); }\n+        '\\x20' .. '\\x7e' => { f(c); }\n+        _ => c.escape_unicode(f),\n     }\n }\n \n@@ -274,8 +273,8 @@ pub trait Char {\n     fn is_digit_radix(&self, radix: uint) -> bool;\n     fn to_digit(&self, radix: uint) -> Option<uint>;\n     fn from_digit(num: uint, radix: uint) -> Option<char>;\n-    fn escape_unicode(&self) -> ~str;\n-    fn escape_default(&self) -> ~str;\n+    fn escape_unicode(&self, f: &fn(char));\n+    fn escape_default(&self, f: &fn(char));\n     fn len_utf8_bytes(&self) -> uint;\n }\n \n@@ -302,9 +301,9 @@ impl Char for char {\n \n     fn from_digit(num: uint, radix: uint) -> Option<char> { from_digit(num, radix) }\n \n-    fn escape_unicode(&self) -> ~str { escape_unicode(*self) }\n+    fn escape_unicode(&self, f: &fn(char)) { escape_unicode(*self, f) }\n \n-    fn escape_default(&self) -> ~str { escape_default(*self) }\n+    fn escape_default(&self, f: &fn(char)) { escape_default(*self, f) }\n \n     fn len_utf8_bytes(&self) -> uint { len_utf8_bytes(*self) }\n }\n@@ -392,27 +391,37 @@ fn test_is_digit() {\n \n #[test]\n fn test_escape_default() {\n-    assert_eq!('\\n'.escape_default(), ~\"\\\\n\");\n-    assert_eq!('\\r'.escape_default(), ~\"\\\\r\");\n-    assert_eq!('\\''.escape_default(), ~\"\\\\'\");\n-    assert_eq!('\"'.escape_default(), ~\"\\\\\\\"\");\n-    assert_eq!(' '.escape_default(), ~\" \");\n-    assert_eq!('a'.escape_default(), ~\"a\");\n-    assert_eq!('~'.escape_default(), ~\"~\");\n-    assert_eq!('\\x00'.escape_default(), ~\"\\\\x00\");\n-    assert_eq!('\\x1f'.escape_default(), ~\"\\\\x1f\");\n-    assert_eq!('\\x7f'.escape_default(), ~\"\\\\x7f\");\n-    assert_eq!('\\xff'.escape_default(), ~\"\\\\xff\");\n-    assert_eq!('\\u011b'.escape_default(), ~\"\\\\u011b\");\n-    assert_eq!('\\U0001d4b6'.escape_default(), ~\"\\\\U0001d4b6\");\n+    fn string(c: char) -> ~str {\n+        let mut result = ~\"\";\n+        do escape_default(c) |c| { result.push_char(c); }\n+        return result;\n+    }\n+    assert_eq!(string('\\n'), ~\"\\\\n\");\n+    assert_eq!(string('\\r'), ~\"\\\\r\");\n+    assert_eq!(string('\\''), ~\"\\\\'\");\n+    assert_eq!(string('\"'), ~\"\\\\\\\"\");\n+    assert_eq!(string(' '), ~\" \");\n+    assert_eq!(string('a'), ~\"a\");\n+    assert_eq!(string('~'), ~\"~\");\n+    assert_eq!(string('\\x00'), ~\"\\\\x00\");\n+    assert_eq!(string('\\x1f'), ~\"\\\\x1f\");\n+    assert_eq!(string('\\x7f'), ~\"\\\\x7f\");\n+    assert_eq!(string('\\xff'), ~\"\\\\xff\");\n+    assert_eq!(string('\\u011b'), ~\"\\\\u011b\");\n+    assert_eq!(string('\\U0001d4b6'), ~\"\\\\U0001d4b6\");\n }\n \n #[test]\n fn test_escape_unicode() {\n-    assert_eq!('\\x00'.escape_unicode(), ~\"\\\\x00\");\n-    assert_eq!('\\n'.escape_unicode(), ~\"\\\\x0a\");\n-    assert_eq!(' '.escape_unicode(), ~\"\\\\x20\");\n-    assert_eq!('a'.escape_unicode(), ~\"\\\\x61\");\n-    assert_eq!('\\u011b'.escape_unicode(), ~\"\\\\u011b\");\n-    assert_eq!('\\U0001d4b6'.escape_unicode(), ~\"\\\\U0001d4b6\");\n+    fn string(c: char) -> ~str {\n+        let mut result = ~\"\";\n+        do escape_unicode(c) |c| { result.push_char(c); }\n+        return result;\n+    }\n+    assert_eq!(string('\\x00'), ~\"\\\\x00\");\n+    assert_eq!(string('\\n'), ~\"\\\\x0a\");\n+    assert_eq!(string(' '), ~\"\\\\x20\");\n+    assert_eq!(string('a'), ~\"\\\\x61\");\n+    assert_eq!(string('\\u011b'), ~\"\\\\u011b\");\n+    assert_eq!(string('\\U0001d4b6'), ~\"\\\\U0001d4b6\");\n }"}, {"sha": "a96949d84c9855ed81cd8f9f47d99ac5cba7d555", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5", "patch": "@@ -57,9 +57,9 @@ impl EscapedCharWriter for @Writer {\n             '\"' => self.write_str(\"\\\\\\\"\"),\n             '\\x20'..'\\x7e' => self.write_char(ch),\n             _ => {\n-                // FIXME #4423: This is inefficient because it requires a\n-                // malloc.\n-                self.write_str(char::escape_unicode(ch))\n+                do char::escape_unicode(ch) |c| {\n+                    self.write_char(c);\n+                }\n             }\n         }\n     }"}, {"sha": "a50fa4168320cc01b8a677addea9eb87e4eeb08d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5", "patch": "@@ -16,7 +16,6 @@ use util::interner::StrInterner;\n use util::interner;\n \n use std::cast;\n-use std::char;\n use std::cmp::Equiv;\n use std::local_data;\n use std::rand;\n@@ -166,7 +165,12 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n \n       /* Literals */\n       LIT_INT(c, ast::ty_char) => {\n-        ~\"'\" + char::escape_default(c as char) + \"'\"\n+          let mut res = ~\"'\";\n+          do (c as char).escape_default |c| {\n+              res.push_char(c);\n+          }\n+          res.push_char('\\'');\n+          res\n       }\n       LIT_INT(i, t) => {\n           i.to_str() + ast_util::int_ty_to_str(t)"}, {"sha": "5e685d85f95df1bbc75716859439434abe8502ea", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8fe6fc11de4d6bfbffd8b961f5f1f24a338601d5", "patch": "@@ -27,7 +27,6 @@ use print::pp::{breaks, consistent, inconsistent, eof};\n use print::pp;\n use print::pprust;\n \n-use std::char;\n use std::io;\n use std::u64;\n use std::uint;\n@@ -2016,7 +2015,12 @@ pub fn print_literal(s: @ps, lit: @ast::lit) {\n     match lit.node {\n       ast::lit_str(st) => print_string(s, st),\n       ast::lit_int(ch, ast::ty_char) => {\n-        word(s.s, ~\"'\" + char::escape_default(ch as char) + \"'\");\n+          let mut res = ~\"'\";\n+          do (ch as char).escape_default |c| {\n+              res.push_char(c);\n+          }\n+          res.push_char('\\'');\n+          word(s.s, res);\n       }\n       ast::lit_int(i, t) => {\n         if i < 0_i64 {"}]}