{"sha": "5e319fb2827903d6cb0c0d9d0af638c3f9503c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzE5ZmIyODI3OTAzZDZjYjBjMGQ5ZDBhZjYzOGMzZjk1MDNjODE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-26T18:12:44Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-26T18:26:42Z"}, "message": "Adds (more) test cases for auto_encode.", "tree": {"sha": "66a92abc19fa2227f67a7f21fbd2b3236afd2f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66a92abc19fa2227f67a7f21fbd2b3236afd2f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e319fb2827903d6cb0c0d9d0af638c3f9503c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e319fb2827903d6cb0c0d9d0af638c3f9503c81", "html_url": "https://github.com/rust-lang/rust/commit/5e319fb2827903d6cb0c0d9d0af638c3f9503c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e319fb2827903d6cb0c0d9d0af638c3f9503c81/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5328f3c1ee50a6140638a705551d5bb232921c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5328f3c1ee50a6140638a705551d5bb232921c4d", "html_url": "https://github.com/rust-lang/rust/commit/5328f3c1ee50a6140638a705551d5bb232921c4d"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "2c685c360e9d02f92804333d462af3fd3fa6c84c", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5e319fb2827903d6cb0c0d9d0af638c3f9503c81/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e319fb2827903d6cb0c0d9d0af638c3f9503c81/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=5e319fb2827903d6cb0c0d9d0af638c3f9503c81", "patch": "@@ -1173,6 +1173,8 @@ mod test {\n         CallToEmitEnumVariantArg(uint),\n         CallToEmitUint(uint),\n         CallToEmitNil,\n+        CallToEmitStruct(~str,uint),\n+        CallToEmitField(~str,uint),\n         // all of the ones I was too lazy to handle:\n         CallToOther\n     }\n@@ -1251,11 +1253,11 @@ mod test {\n         fn emit_rec(&self, f: fn()) {\n             self.add_unknown_to_log(); f();\n         }\n-        fn emit_struct(&self, _name: &str, +_len: uint, f: fn()) {\n-            self.add_unknown_to_log(); f();\n+        fn emit_struct(&self, name: &str, +len: uint, f: fn()) {\n+            self.add_to_log(CallToEmitStruct (name.to_str(),len)); f();\n         }\n-        fn emit_field(&self, _name: &str, +_idx: uint, f: fn()) {\n-            self.add_unknown_to_log(); f();\n+        fn emit_field(&self, name: &str, +idx: uint, f: fn()) {\n+            self.add_to_log(CallToEmitField (name.to_str(),idx)); f();\n         }\n \n         fn emit_tup(&self, +_len: uint, f: fn()) {\n@@ -1267,23 +1269,12 @@ mod test {\n     }\n \n \n-    #[auto_decode]\n-    #[auto_encode]\n-    struct Node {id: uint}\n-\n     fn to_call_log (val: Encodable<TestEncoder>) -> ~[call] {\n         let mut te = TestEncoder {call_log: ~[]};\n         val.encode(&te);\n         te.call_log\n     }\n-/*\n-    #[test] fn encode_test () {\n-        check_equal (to_call_log(Node{id:34}\n-                                 as Encodable::<std::json::Encoder>),\n-                     ~[CallToEnum (~\"Node\"),\n-                       CallToEnumVariant]);\n-    }\n-*/\n+\n     #[auto_encode]\n     enum Written {\n         Book(uint,uint),\n@@ -1300,4 +1291,17 @@ mod test {\n                        CallToEmitEnumVariantArg (1),\n                        CallToEmitUint (44)]);\n         }\n+\n+    pub enum BPos = uint;\n+\n+    #[auto_encode]\n+    pub struct HasPos { pos : BPos }\n+\n+    #[test] fn encode_newtype_test () {\n+        check_equal (to_call_log (HasPos {pos:BPos(48)}\n+                                 as Encodable::<TestEncoder>),\n+                    ~[CallToEmitStruct(~\"HasPos\",1),\n+                      CallToEmitField(~\"pos\",0),\n+                      CallToEmitUint(48)]);\n+    }\n }"}]}