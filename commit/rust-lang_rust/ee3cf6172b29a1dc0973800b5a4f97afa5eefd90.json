{"sha": "ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlM2NmNjE3MmIyOWExZGMwOTczODAwYjVhNGY5N2FmYTVlZWZkOTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-16T15:57:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-17T09:53:22Z"}, "message": "rename ModuleId -> CrateModuleId", "tree": {"sha": "ff38fa199e0a4d30264107650074c8b210876cfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff38fa199e0a4d30264107650074c8b210876cfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "html_url": "https://github.com/rust-lang/rust/commit/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51a6a7bdddf885cb833889a4550150d839eefdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51a6a7bdddf885cb833889a4550150d839eefdc", "html_url": "https://github.com/rust-lang/rust/commit/c51a6a7bdddf885cb833889a4550150d839eefdc"}], "stats": {"total": 79, "additions": 40, "deletions": 39}, "files": [{"sha": "b00481cd592df1b5662f5370f9382276a3540903", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "patch": "@@ -8,7 +8,7 @@ use crate::{\n     Name, ScopesWithSourceMap, Ty, HirFileId,\n     HirDatabase, PersistentHirDatabase,\n     type_ref::TypeRef,\n-    nameres::{ModuleScope, Namespace, ImportId, ModuleId},\n+    nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n     expr::{Body, BodySourceMap},\n     ty::InferenceResult,\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n@@ -64,7 +64,7 @@ impl Crate {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Module {\n     pub(crate) krate: Crate,\n-    pub(crate) module_id: ModuleId,\n+    pub(crate) module_id: CrateModuleId,\n }\n \n /// The defs which can be visible in the module."}, {"sha": "f7d15c55e9242874d7bccc0f1e24ad2d7cb97fd8", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{ast, SyntaxNode, TreeArc, AstNode};\n \n use crate::{\n     Module, ModuleSource, Problem, Name,\n-    nameres::{ModuleId, ImportId},\n+    nameres::{CrateModuleId, ImportId},\n     HirDatabase, PersistentHirDatabase,\n     HirFileId, SourceItemId,\n };\n@@ -31,7 +31,7 @@ impl ModuleSource {\n }\n \n impl Module {\n-    fn with_module_id(&self, module_id: ModuleId) -> Module {\n+    fn with_module_id(&self, module_id: CrateModuleId) -> Module {\n         Module { module_id, krate: self.krate }\n     }\n "}, {"sha": "a144e4a1e440e9b33ab89d036be6ca9fdc25f664", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "patch": "@@ -373,6 +373,7 @@ impl SourceFileItems {\n impl std::ops::Index<SourceFileItemId> for SourceFileItems {\n     type Output = SyntaxNodePtr;\n     fn index(&self, idx: SourceFileItemId) -> &SyntaxNodePtr {\n+        eprintln!(\"invalid SourceFileItemId({:?}) for file({:?})\", idx, self.file_id);\n         &self.arena[idx]\n     }\n }"}, {"sha": "eabaa5691a8c169b542d0786f94ff2669abd78d0", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "patch": "@@ -74,28 +74,28 @@ pub struct CrateDefMap {\n     /// a dependency (`std` or `core`).\n     prelude: Option<Module>,\n     extern_prelude: FxHashMap<Name, ModuleDef>,\n-    root: ModuleId,\n-    modules: Arena<ModuleId, ModuleData>,\n+    root: CrateModuleId,\n+    modules: Arena<CrateModuleId, ModuleData>,\n     public_macros: FxHashMap<Name, mbe::MacroRules>,\n     problems: CrateDefMapProblems,\n }\n \n-impl std::ops::Index<ModuleId> for CrateDefMap {\n+impl std::ops::Index<CrateModuleId> for CrateDefMap {\n     type Output = ModuleData;\n-    fn index(&self, id: ModuleId) -> &ModuleData {\n+    fn index(&self, id: CrateModuleId) -> &ModuleData {\n         &self.modules[id]\n     }\n }\n \n /// An ID of a module, **local** to a specific crate\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub(crate) struct ModuleId(RawId);\n-impl_arena_id!(ModuleId);\n+struct CrateModuleId(RawId);\n+impl_arena_id!(CrateModuleId);\n \n #[derive(Default, Debug, PartialEq, Eq)]\n pub(crate) struct ModuleData {\n-    pub(crate) parent: Option<ModuleId>,\n-    pub(crate) children: FxHashMap<Name, ModuleId>,\n+    pub(crate) parent: Option<CrateModuleId>,\n+    pub(crate) children: FxHashMap<Name, CrateModuleId>,\n     pub(crate) scope: ModuleScope,\n     /// None for root\n     pub(crate) declaration: Option<SourceItemId>,\n@@ -183,7 +183,7 @@ impl CrateDefMap {\n         let start = std::time::Instant::now();\n         let def_map = {\n             let edition = krate.edition(db);\n-            let mut modules: Arena<ModuleId, ModuleData> = Arena::default();\n+            let mut modules: Arena<CrateModuleId, ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {\n                 krate,\n@@ -201,15 +201,15 @@ impl CrateDefMap {\n         Arc::new(def_map)\n     }\n \n-    pub(crate) fn root(&self) -> ModuleId {\n+    pub(crate) fn root(&self) -> CrateModuleId {\n         self.root\n     }\n \n     pub(crate) fn problems(&self) -> &CrateDefMapProblems {\n         &self.problems\n     }\n \n-    pub(crate) fn mk_module(&self, module_id: ModuleId) -> Module {\n+    pub(crate) fn mk_module(&self, module_id: CrateModuleId) -> Module {\n         Module { krate: self.krate, module_id }\n     }\n \n@@ -225,7 +225,7 @@ impl CrateDefMap {\n         &self,\n         file_id: HirFileId,\n         decl_id: Option<SourceFileItemId>,\n-    ) -> Option<ModuleId> {\n+    ) -> Option<CrateModuleId> {\n         let decl_id = decl_id.map(|it| it.with_file_id(file_id));\n         let (module_id, _module_data) = self.modules.iter().find(|(_module_id, module_data)| {\n             if decl_id.is_some() {\n@@ -240,7 +240,7 @@ impl CrateDefMap {\n     pub(crate) fn resolve_path(\n         &self,\n         db: &impl PersistentHirDatabase,\n-        original_module: ModuleId,\n+        original_module: CrateModuleId,\n         path: &Path,\n     ) -> (PerNs<ModuleDef>, Option<usize>) {\n         let res = self.resolve_path_fp(db, ResolveMode::Other, original_module, path);\n@@ -253,7 +253,7 @@ impl CrateDefMap {\n         &self,\n         db: &impl PersistentHirDatabase,\n         mode: ResolveMode,\n-        original_module: ModuleId,\n+        original_module: CrateModuleId,\n         path: &Path,\n     ) -> ResolvePathResult {\n         let mut segments = path.segments.iter().enumerate();\n@@ -394,7 +394,7 @@ impl CrateDefMap {\n     pub(crate) fn resolve_name_in_module(\n         &self,\n         db: &impl PersistentHirDatabase,\n-        module: ModuleId,\n+        module: CrateModuleId,\n         name: &Name,\n     ) -> PerNs<ModuleDef> {\n         // Resolve in:"}, {"sha": "f2336c271334f84a10ea0e19a47f4b508aefb749", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     ids::{AstItemDef, LocationCtx, MacroCallLoc, SourceItemId, MacroCallId},\n };\n \n-use super::{CrateDefMap, ModuleId, ModuleData};\n+use super::{CrateDefMap, CrateModuleId, ModuleData};\n \n pub(super) fn collect_defs(\n     db: &impl PersistentHirDatabase,\n@@ -49,9 +49,9 @@ pub(super) fn collect_defs(\n struct DefCollector<DB> {\n     db: DB,\n     def_map: CrateDefMap,\n-    glob_imports: FxHashMap<ModuleId, Vec<(ModuleId, raw::ImportId)>>,\n-    unresolved_imports: Vec<(ModuleId, raw::ImportId, raw::ImportData)>,\n-    unexpanded_macros: Vec<(ModuleId, MacroCallId, Path, tt::Subtree)>,\n+    glob_imports: FxHashMap<CrateModuleId, Vec<(CrateModuleId, raw::ImportId)>>,\n+    unresolved_imports: Vec<(CrateModuleId, raw::ImportId, raw::ImportData)>,\n+    unexpanded_macros: Vec<(CrateModuleId, MacroCallId, Path, tt::Subtree)>,\n     global_macro_scope: FxHashMap<Name, mbe::MacroRules>,\n }\n \n@@ -124,7 +124,7 @@ where\n \n     fn resolve_import(\n         &mut self,\n-        module_id: ModuleId,\n+        module_id: CrateModuleId,\n         import: &raw::ImportData,\n     ) -> (PerNs<ModuleDef>, ReachedFixedPoint) {\n         log::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n@@ -147,7 +147,7 @@ where\n \n     fn record_resolved_import(\n         &mut self,\n-        module_id: ModuleId,\n+        module_id: CrateModuleId,\n         def: PerNs<ModuleDef>,\n         import_id: raw::ImportId,\n         import: &raw::ImportData,\n@@ -234,7 +234,7 @@ where\n \n     fn update(\n         &mut self,\n-        module_id: ModuleId,\n+        module_id: CrateModuleId,\n         import: Option<raw::ImportId>,\n         resolutions: &[(Name, Resolution)],\n     ) {\n@@ -243,7 +243,7 @@ where\n \n     fn update_recursive(\n         &mut self,\n-        module_id: ModuleId,\n+        module_id: CrateModuleId,\n         import: Option<raw::ImportId>,\n         resolutions: &[(Name, Resolution)],\n         depth: usize,\n@@ -327,7 +327,7 @@ where\n \n     fn collect_macro_expansion(\n         &mut self,\n-        module_id: ModuleId,\n+        module_id: CrateModuleId,\n         macro_call_id: MacroCallId,\n         expansion: tt::Subtree,\n     ) {\n@@ -353,7 +353,7 @@ where\n /// Walks a single module, populating defs, imports and macros\n struct ModCollector<'a, D> {\n     def_collector: D,\n-    module_id: ModuleId,\n+    module_id: CrateModuleId,\n     file_id: HirFileId,\n     raw_items: &'a raw::RawItems,\n }\n@@ -426,7 +426,7 @@ where\n         name: Name,\n         declaration: SourceItemId,\n         definition: Option<FileId>,\n-    ) -> ModuleId {\n+    ) -> CrateModuleId {\n         let modules = &mut self.def_collector.def_map.modules;\n         let res = modules.alloc(ModuleData::default());\n         modules[res].parent = Some(self.module_id);"}, {"sha": "ac9b88520e03bfa38ed087cf6bbd0c43d72cd75a", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "patch": "@@ -27,7 +27,7 @@ fn render_crate_def_map(map: &CrateDefMap) -> String {\n     go(&mut buf, map, \"\\ncrate\", map.root);\n     return buf;\n \n-    fn go(buf: &mut String, map: &CrateDefMap, path: &str, module: ModuleId) {\n+    fn go(buf: &mut String, map: &CrateDefMap, path: &str, module: CrateModuleId) {\n         *buf += path;\n         *buf += \"\\n\";\n         for (name, res) in map.modules[module].scope.items.iter() {"}, {"sha": "59af4ec60f4f4cf02dcef9bd22be7098a3651b63", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     ModuleDef,\n     db::HirDatabase,\n     name::{Name, KnownName},\n-    nameres::{PerNs, CrateDefMap, ModuleId},\n+    nameres::{PerNs, CrateDefMap, CrateModuleId},\n     generics::GenericParams,\n     expr::{scope::{ExprScopes, ScopeId}, PatId, Body},\n     impl_block::ImplBlock,\n@@ -23,7 +23,7 @@ pub struct Resolver {\n #[derive(Debug, Clone)]\n pub(crate) struct ModuleItemMap {\n     crate_def_map: Arc<CrateDefMap>,\n-    module_id: ModuleId,\n+    module_id: CrateModuleId,\n }\n \n #[derive(Debug, Clone)]\n@@ -175,7 +175,7 @@ impl Resolver {\n         names\n     }\n \n-    fn module(&self) -> Option<(&CrateDefMap, ModuleId)> {\n+    fn module(&self) -> Option<(&CrateDefMap, CrateModuleId)> {\n         self.scopes.iter().rev().find_map(|scope| match scope {\n             Scope::ModuleScope(m) => Some((&*m.crate_def_map, m.module_id)),\n \n@@ -209,7 +209,7 @@ impl Resolver {\n     pub(crate) fn push_module_scope(\n         self,\n         crate_def_map: Arc<CrateDefMap>,\n-        module_id: ModuleId,\n+        module_id: CrateModuleId,\n     ) -> Resolver {\n         self.push_scope(Scope::ModuleScope(ModuleItemMap { crate_def_map, module_id }))\n     }"}, {"sha": "804824868505e27b197c545ff12f814585817de1", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3cf6172b29a1dc0973800b5a4f97afa5eefd90/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=ee3cf6172b29a1dc0973800b5a4f97afa5eefd90", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     ids::TraitId,\n     impl_block::{ImplId, ImplBlock, ImplItem},\n     ty::{AdtDef, Ty},\n-    nameres::ModuleId,\n+    nameres::CrateModuleId,\n \n };\n \n@@ -35,10 +35,10 @@ impl TyFingerprint {\n \n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateImplBlocks {\n-    /// To make sense of the ModuleIds, we need the source root.\n+    /// To make sense of the CrateModuleIds, we need the source root.\n     krate: Crate,\n-    impls: FxHashMap<TyFingerprint, Vec<(ModuleId, ImplId)>>,\n-    impls_by_trait: FxHashMap<TraitId, Vec<(ModuleId, ImplId)>>,\n+    impls: FxHashMap<TyFingerprint, Vec<(CrateModuleId, ImplId)>>,\n+    impls_by_trait: FxHashMap<TraitId, Vec<(CrateModuleId, ImplId)>>,\n }\n \n impl CrateImplBlocks {"}]}