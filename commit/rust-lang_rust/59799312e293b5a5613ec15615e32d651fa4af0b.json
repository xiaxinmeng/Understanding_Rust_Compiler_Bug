{"sha": "59799312e293b5a5613ec15615e32d651fa4af0b", "node_id": "C_kwDOAAsO6NoAKDU5Nzk5MzEyZTI5M2I1YTU2MTNlYzE1NjE1ZTMyZDY1MWZhNGFmMGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-16T13:25:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-16T13:25:50Z"}, "message": "Send a DidCancel event when restarting flychecks", "tree": {"sha": "2b971d27c71f0821cfbadc46a2ada46dd22fd74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b971d27c71f0821cfbadc46a2ada46dd22fd74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59799312e293b5a5613ec15615e32d651fa4af0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59799312e293b5a5613ec15615e32d651fa4af0b", "html_url": "https://github.com/rust-lang/rust/commit/59799312e293b5a5613ec15615e32d651fa4af0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59799312e293b5a5613ec15615e32d651fa4af0b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1aa93e7e85b11325cdd49c46aec23042efb180", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1aa93e7e85b11325cdd49c46aec23042efb180", "html_url": "https://github.com/rust-lang/rust/commit/bc1aa93e7e85b11325cdd49c46aec23042efb180"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "df666ae097bec4fc8f0db05e3a4a316bcf6868c9", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/59799312e293b5a5613ec15615e32d651fa4af0b/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59799312e293b5a5613ec15615e32d651fa4af0b/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=59799312e293b5a5613ec15615e32d651fa4af0b", "patch": "@@ -162,26 +162,31 @@ impl FlycheckActor {\n                         cargo_handle.cancel();\n                     }\n                     while let Ok(Restart) = inbox.recv_timeout(Duration::from_millis(50)) {}\n-\n-                    self.cancel_check_process();\n+                    self.progress(Progress::DidCancel);\n \n                     let command = self.check_command();\n-                    let command_f = format!(\"{command:?}\");\n                     tracing::debug!(?command, \"will restart flycheck\");\n                     match CargoHandle::spawn(command) {\n                         Ok(cargo_handle) => {\n-                            tracing::debug!(%command_f, \"did  restart flycheck\");\n+                            tracing::debug!(\n+                                command = ?self.check_command(),\n+                                \"did  restart flycheck\"\n+                            );\n                             self.cargo_handle = Some(cargo_handle);\n                             self.progress(Progress::DidStart);\n                         }\n                         Err(error) => {\n-                            tracing::error!(%command_f, %error, \"failed to restart flycheck\");\n+                            tracing::error!(\n+                                command = ?self.check_command(),\n+                                %error, \"failed to restart flycheck\"\n+                            );\n                         }\n                     }\n                 }\n                 Event::CheckEvent(None) => {\n-                    // Watcher finished, replace it with a never channel to\n-                    // avoid busy-waiting.\n+                    tracing::debug!(\"flycheck finished\");\n+\n+                    // Watcher finished\n                     let cargo_handle = self.cargo_handle.take().unwrap();\n                     let res = cargo_handle.join();\n                     if res.is_err() {\n@@ -209,8 +214,10 @@ impl FlycheckActor {\n         // If we rerun the thread, we need to discard the previous check results first\n         self.cancel_check_process();\n     }\n+\n     fn cancel_check_process(&mut self) {\n-        if self.cargo_handle.take().is_some() {\n+        if let Some(cargo_handle) = self.cargo_handle.take() {\n+            cargo_handle.cancel();\n             self.progress(Progress::DidCancel);\n         }\n     }"}]}