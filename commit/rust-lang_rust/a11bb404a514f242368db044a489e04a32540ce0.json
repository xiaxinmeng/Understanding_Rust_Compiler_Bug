{"sha": "a11bb404a514f242368db044a489e04a32540ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMWJiNDA0YTUxNGYyNDIzNjhkYjA0NGE0ODllMDRhMzI1NDBjZTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-28T04:23:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-28T04:23:54Z"}, "message": "Further refinement to kind system lattice and type-kind rules; first successful caught kind error (prohibits copying a pinned resource, though trans already caught it later).", "tree": {"sha": "37aed7e1c4b7f5f5167f06ead6a1ef3f2a00a4c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37aed7e1c4b7f5f5167f06ead6a1ef3f2a00a4c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a11bb404a514f242368db044a489e04a32540ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a11bb404a514f242368db044a489e04a32540ce0", "html_url": "https://github.com/rust-lang/rust/commit/a11bb404a514f242368db044a489e04a32540ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a11bb404a514f242368db044a489e04a32540ce0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7073ee4e31d32cfdc1401cfefaa2e3ed07b43f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/7073ee4e31d32cfdc1401cfefaa2e3ed07b43f48", "html_url": "https://github.com/rust-lang/rust/commit/7073ee4e31d32cfdc1401cfefaa2e3ed07b43f48"}], "stats": {"total": 89, "additions": 62, "deletions": 27}, "files": [{"sha": "d899f3f50a39b4967cab0095ec7e03551a0c2cf6", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 54, "deletions": 20, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a11bb404a514f242368db044a489e04a32540ce0/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11bb404a514f242368db044a489e04a32540ce0/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=a11bb404a514f242368db044a489e04a32540ce0", "patch": "@@ -10,24 +10,25 @@\n *\n *\n *\n-*    COPY +   SEND  =  \"Unique\": no shared substructures or pins, only\n+*    MOVE +   SEND  =  \"Unique\": no shared substructures or pins, only\n *                                interiors and ~ boxes.\n *\n-*    COPY + NOSEND  =  \"Shared\": structures containing @, fixed to the local\n-*                                task heap/pool.\n+*    MOVE + NOSEND  =  \"Shared\": structures containing @, fixed to the local\n+*                                task heap/pool; or ~ structures pointing to\n+*                                pinned values.\n *\n-*  NOCOPY + NOSEND  =  \"Pinned\": structures containing resources or\n+*  NOMOVE + NOSEND  =  \"Pinned\": structures directly containing resources, or\n *                                by-alias closures as interior or\n *                                uniquely-boxed members.\n *\n-*  NOCOPY +   SEND  =  --      : no types are like this.\n+*  NOMOVE +   SEND  =  --      : no types are like this.\n *\n *\n * Since this forms a lattice, we denote the capabilites in terms of a\n-* worst-case requirement.  That is, if your function needs to copy-and-send\n-* your T, you write fn<~T>(...). If you need to copy but not send, you write\n-* fn<@T>(...). And if you need neither -- can work with any sort of pinned\n-* data at all -- then you write fn<T>(...).\n+* worst-case requirement.  That is, if your function needs to move-and-send\n+* (or copy) your T, you write fn<~T>(...). If you need to copy but not send,\n+* you write fn<@T>(...). And if you need neither -- can work with any sort of\n+* pinned data at all -- then you write fn<T>(...).\n *\n *\n * Most types are unique or shared. Other possible name combinations for these\n@@ -54,22 +55,19 @@\n *   A copy is made any time you pass-by-value or execute the = operator in a\n *   non-init expression.\n *\n-*   ~ copies deep\n-*   @ copies shallow\n+*   @ copies shallow, is always legal\n+*   ~ copies deep, is only legal if pointee is unique.\n *     pinned values (pinned resources, alias-closures) can't be copied\n-*     all other interiors copy shallow\n+*     all other unique (eg. interior) values copy shallow\n+*\n+*   Note this means that only type parameters constrained to ~T can be copied.\n *\n * MOVING:\n * -------\n *\n *  A move is made any time you pass-by-move (that is, with 'move' mode) or\n *  execute the <- operator.\n *\n-*  Anything you can copy, you can move. Move is (semantically) just\n-*  shallow-copy + deinit.  Note that: ~ moves shallow even though it copies\n-*  deep. Move is the operator that lets ~ copy shallow: by pairing it with a\n-*  deinit.\n-*\n */\n \n \n@@ -101,11 +99,47 @@ fn kind_to_str(k: kind) -> str {\n     }\n }\n \n-fn check_expr(tcx: &ty::ctxt, e: &@ast::expr) {\n+fn type_and_kind(tcx: &ty::ctxt, e: &@ast::expr)\n+    -> {ty: ty::t, kind: ast::kind} {\n     let t = ty::expr_ty(tcx, e);\n     let k = ty::type_kind(tcx, t);\n-    log #fmt(\"%s type: %s\", kind_to_str(k),\n-             util::ppaux::ty_to_str(tcx, t));\n+    {ty: t, kind: k}\n+}\n+\n+fn need_expr_kind(tcx: &ty::ctxt, e: &@ast::expr,\n+                  k_need: ast::kind, descr: &str) {\n+    let tk = type_and_kind(tcx, e);\n+    log #fmt(\"for %s: want %s type, got %s type %s\",\n+             descr,\n+             kind_to_str(k_need),\n+             kind_to_str(tk.kind),\n+             util::ppaux::ty_to_str(tcx, tk.ty));\n+\n+    if ! kind_lteq(k_need, tk.kind) {\n+        let s =\n+            #fmt(\"mismatched kinds for %s: needed %s type, got %s type %s\",\n+                 descr,\n+                 kind_to_str(k_need),\n+                 kind_to_str(tk.kind),\n+                 util::ppaux::ty_to_str(tcx, tk.ty));\n+        tcx.sess.span_err(e.span, s);\n+    }\n+}\n+\n+fn need_shared_lhs_rhs(tcx: &ty::ctxt,\n+                       a: &@ast::expr, b: &@ast::expr,\n+                       op: &str) {\n+    need_expr_kind(tcx, a, ast::kind_shared, op + \" lhs\");\n+    need_expr_kind(tcx, b, ast::kind_shared, op + \" rhs\");\n+}\n+\n+fn check_expr(tcx: &ty::ctxt, e: &@ast::expr) {\n+    alt e.node {\n+      ast::expr_move(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<-\"); }\n+      ast::expr_assign(a, b) { need_shared_lhs_rhs(tcx, a, b, \"=\"); }\n+      ast::expr_swap(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<->\"); }\n+      _ { }\n+    }\n }\n \n fn check_crate(tcx: &ty::ctxt, crate: &@ast::crate) {"}, {"sha": "ccd11cad1309131ec578218b79b4e37c2817abf6", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a11bb404a514f242368db044a489e04a32540ce0/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11bb404a514f242368db044a489e04a32540ce0/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a11bb404a514f242368db044a489e04a32540ce0", "patch": "@@ -1058,12 +1058,10 @@ fn type_kind(cx: &ctxt, ty: &t) -> ast::kind {\n         }\n       }\n \n-      // Those with refcounts-to-inner are the lower of their\n-      // inner and shared.\n+      // Those with refcounts-to-inner raise pinned to shared,\n+      // lower unique to shared. Therefore just set result to shared.\n       ty_box(mt) | ty_vec(mt) {\n-        result = kind::lower_kind(ast::kind_shared,\n-                                  type_kind(cx, mt.ty));\n-\n+        result = ast::kind_shared;\n       }\n \n       // FIXME: remove ports. Ports currently contribute 'shared'\n@@ -1078,9 +1076,12 @@ fn type_kind(cx: &ctxt, ty: &t) -> ast::kind {\n         result = type_kind(cx, t);\n       }\n \n-      // Pointers and unique boxes / vecs lower to whatever they point to.\n+      // Pointers and unique boxes / vecs raise pinned to shared,\n+      // otherwise pass through their pointee kind.\n       ty_ptr(tm) | ty_ivec(tm) {\n-        result = type_kind(cx, tm.ty);\n+        let k = type_kind(cx, tm.ty);\n+        if k == ast::kind_pinned { k = ast::kind_shared }\n+        result = kind::lower_kind(result, k);\n       }\n \n       // Records lower to the lowest of their members."}]}