{"sha": "3e3a9b4eec790bda28a86fd204d90b527d207a5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlM2E5YjRlZWM3OTBiZGEyOGE4NmZkMjA0ZDkwYjUyN2QyMDdhNWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-04T12:30:52Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-04T12:30:52Z"}, "message": "Rollup merge of #27397 - Dangthrimble:master, r=steveklabnik\n\nClarifications for those new to Rust and Cargo:\r\n* It's a good idea to get rid of the original `main.exe` in project root\r\n* Slight clarification on the use of `main.rs` vs `lib.rs`\r\n* Clarify that the TOML file needs to be in project root", "tree": {"sha": "5d1c19bdbb2dbab7bf273eaa703cadef5724270f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1c19bdbb2dbab7bf273eaa703cadef5724270f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e3a9b4eec790bda28a86fd204d90b527d207a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3a9b4eec790bda28a86fd204d90b527d207a5f", "html_url": "https://github.com/rust-lang/rust/commit/3e3a9b4eec790bda28a86fd204d90b527d207a5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e3a9b4eec790bda28a86fd204d90b527d207a5f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f971f862384abdea40064f872308a309a8691e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f971f862384abdea40064f872308a309a8691e8d", "html_url": "https://github.com/rust-lang/rust/commit/f971f862384abdea40064f872308a309a8691e8d"}, {"sha": "c54df0e4541f66d43109c844782c43a2bd24d97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c54df0e4541f66d43109c844782c43a2bd24d97d", "html_url": "https://github.com/rust-lang/rust/commit/c54df0e4541f66d43109c844782c43a2bd24d97d"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "63a1c10f841ce484f551df999b67baf4e822f21f", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e3a9b4eec790bda28a86fd204d90b527d207a5f/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e3a9b4eec790bda28a86fd204d90b527d207a5f/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=3e3a9b4eec790bda28a86fd204d90b527d207a5f", "patch": "@@ -98,8 +98,8 @@ use std::io;\n \n We\u2019ll need to take user input, and then print the result as output. As such, we\n need the `io` library from the standard library. Rust only imports a few things\n-into every program, [the \u2018prelude\u2019][prelude]. If it\u2019s not in the prelude,\n-you\u2019ll have to `use` it directly.\n+by default into every program, [the \u2018prelude\u2019][prelude]. If it\u2019s not in the\n+prelude, you\u2019ll have to `use` it directly.\n \n [prelude]: ../std/prelude/index.html\n "}, {"sha": "4bd7de23f0cd6648b4786fa3798a9b7de0bb7b1b", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e3a9b4eec790bda28a86fd204d90b527d207a5f/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e3a9b4eec790bda28a86fd204d90b527d207a5f/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=3e3a9b4eec790bda28a86fd204d90b527d207a5f", "patch": "@@ -8,13 +8,13 @@ so it is assumed that Rust projects will use Cargo from the beginning.\n [cratesio]: http://doc.crates.io\n \n Cargo manages three things: building your code, downloading the dependencies\n-your code needs, and building those dependencies. At first, your\n-program doesn\u2019t have any dependencies, so we\u2019ll only be using the first part of\n-its functionality. Eventually, we\u2019ll add more. Since we started off by using\n-Cargo, it'll be easy to add later.\n+your code needs, and building those dependencies. At first, your program doesn\u2019t\n+have any dependencies, so we\u2019ll only be using the first part of its\n+functionality. Eventually, we\u2019ll add more. Since we started off by using Cargo,\n+it'll be easy to add later.\n \n-If you installed Rust via the official installers you will also have Cargo. If\n-you installed Rust some other way, you may want to [check the Cargo\n+If we installed Rust via the official installers we will also have Cargo. If we\n+installed Rust some other way, we may want to [check the Cargo\n README][cargoreadme] for specific instructions about installing it.\n \n [cargoreadme]: https://github.com/rust-lang/cargo#installing-cargo-from-nightlies\n@@ -23,20 +23,21 @@ README][cargoreadme] for specific instructions about installing it.\n \n Let\u2019s convert Hello World to Cargo.\n \n-To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`\n-configuration file, and put our source file in the right place. Let's\n-do that part first:\n+To Cargo-ify our project, we need to do three things: Make a `Cargo.toml`\n+configuration file, put our source file in the right place, and get rid of the\n+old executable (`main.exe` on Windows, `main` everywhere else). Let's do that part first:\n \n ```bash\n $ mkdir src\n $ mv main.rs src/main.rs\n+$ rm main  # or main.exe on Windows\n ```\n \n-Note that since we're creating an executable, we used `main.rs`. If we\n-want to make a library instead, we should use `lib.rs`. This convention is required\n-for Cargo to successfully compile our projects, but it can be overridden if we wish. \n-Custom file locations for the entry point can be specified\n-with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n+Note that since we're creating an executable, we retain `main.rs` as the source\n+filename. If we want to make a library instead, we should use `lib.rs`. This\n+convention is used by Cargo to successfully compile our projects, but it can be\n+overridden if we wish. Custom file locations for the entry point can be\n+specified with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n \n [crates-custom]: http://doc.crates.io/manifest.html#configuring-a-target\n \n@@ -63,8 +64,8 @@ version = \"0.0.1\"\n authors = [ \"Your name <you@example.com>\" ]\n ```\n \n-This file is in the [TOML][toml] format. TOML is similar to INI, but has some \n-extra goodies. According to the TOML docs, \n+This file is in the [TOML][toml] format. TOML is similar to INI, but has some\n+extra goodies. According to the TOML docs,\n \n > TOML aims to be a minimal configuration file format that's easy to read due\n > to obvious semantics. TOML is designed to map unambiguously to a hash table.\n@@ -73,7 +74,8 @@ extra goodies. According to the TOML docs,\n \n [toml]: https://github.com/toml-lang/toml\n \n-Once you have this file in place, we should be ready to build! To do so, run:\n+Once we have this file in place in our project's root directory, we should be\n+ready to build! To do so, run:\n \n ```bash\n $ cargo build"}]}