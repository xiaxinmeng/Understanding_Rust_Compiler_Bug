{"sha": "13fcf476001ff511103d9bec44e5be4e24eb0c96", "node_id": "C_kwDOAAsO6NoAKDEzZmNmNDc2MDAxZmY1MTExMDNkOWJlYzQ0ZTViZTRlMjRlYjBjOTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-05T16:37:22Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-05T16:37:22Z"}, "message": "Implement simd_select_bitmask", "tree": {"sha": "1a700e58468b3ec3846c36e7e5293d5c8487758f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a700e58468b3ec3846c36e7e5293d5c8487758f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13fcf476001ff511103d9bec44e5be4e24eb0c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13fcf476001ff511103d9bec44e5be4e24eb0c96", "html_url": "https://github.com/rust-lang/rust/commit/13fcf476001ff511103d9bec44e5be4e24eb0c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13fcf476001ff511103d9bec44e5be4e24eb0c96/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "782b5fe7ac97554f7bf4b9121e985871e650ca41", "url": "https://api.github.com/repos/rust-lang/rust/commits/782b5fe7ac97554f7bf4b9121e985871e650ca41", "html_url": "https://github.com/rust-lang/rust/commit/782b5fe7ac97554f7bf4b9121e985871e650ca41"}], "stats": {"total": 93, "additions": 28, "deletions": 65}, "files": [{"sha": "89e2b61c1fc8553be9c7668525c66e97d5fdcd52", "filename": "patches/0001-portable-simd-Disable-unsupported-tests.patch", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/13fcf476001ff511103d9bec44e5be4e24eb0c96/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/13fcf476001ff511103d9bec44e5be4e24eb0c96/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-portable-simd-Disable-unsupported-tests.patch?ref=13fcf476001ff511103d9bec44e5be4e24eb0c96", "patch": "@@ -11,44 +11,6 @@ Subject: [PATCH] Disable unsupported tests\n  crates/core_simd/tests/masks.rs          | 3 ---\n  5 files changed, 20 insertions(+), 3 deletions(-)\n \n-diff --git a/crates/core_simd/src/masks/full_masks.rs b/crates/core_simd/src/masks/full_masks.rs\n-index adf0fcb..e7e657e 100644\n---- a/crates/core_simd/src/masks/full_masks.rs\n-+++ b/crates/core_simd/src/masks/full_masks.rs\n-@@ -180,6 +180,7 @@ where\n-         super::Mask<T, LANES>: ToBitMaskArray,\n-         [(); <super::Mask<T, LANES> as ToBitMaskArray>::BYTES]: Sized,\n-     {\n-+        /*\n-         assert_eq!(<super::Mask<T, LANES> as ToBitMaskArray>::BYTES, N);\n- \n-         // Safety: N is the correct bitmask size\n-@@ -202,6 +203,8 @@ where\n-                 Self::splat(false).to_int(),\n-             ))\n-         }\n-+        */\n-+        panic!();\n-     }\n- \n-     #[inline]\n-@@ -225,6 +228,7 @@ where\n-     where\n-         super::Mask<T, LANES>: ToBitMask<BitMask = U>,\n-     {\n-+        /*\n-         // LLVM assumes bit order should match endianness\n-         let bitmask = if cfg!(target_endian = \"big\") {\n-             bitmask.reverse_bits(LANES)\n-@@ -240,6 +244,8 @@ where\n-                 Self::splat(false).to_int(),\n-             ))\n-         }\n-+        */\n-+        panic!();\n-     }\n- \n-     #[inline]\n diff --git a/crates/core_simd/src/vector.rs b/crates/core_simd/src/vector.rs\n index e8e8f68..7173c24 100644\n --- a/crates/core_simd/src/vector.rs\n@@ -69,31 +31,5 @@ index e8e8f68..7173c24 100644\n  }\n  \n  impl<T, const LANES: usize> Copy for Simd<T, LANES>\n-diff --git a/crates/core_simd/tests/masks.rs b/crates/core_simd/tests/masks.rs\n-index 673d0db..3ebfcd1 100644\n---- a/crates/core_simd/tests/masks.rs\n-+++ b/crates/core_simd/tests/masks.rs\n-@@ -78,7 +78,6 @@ macro_rules! test_mask_api {\n-                 let mask = core_simd::Mask::<$type, 16>::from_array(values);\n-                 let bitmask = mask.to_bitmask();\n-                 assert_eq!(bitmask, 0b1000001101001001);\n--                assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n-             }\n- \n-             #[test]\n-@@ -91,13 +90,11 @@ macro_rules! test_mask_api {\n-                 let mask = core_simd::Mask::<$type, 4>::from_array(values);\n-                 let bitmask = mask.to_bitmask();\n-                 assert_eq!(bitmask, 0b1000);\n--                assert_eq!(core_simd::Mask::<$type, 4>::from_bitmask(bitmask), mask);\n- \n-                 let values = [true, false];\n-                 let mask = core_simd::Mask::<$type, 2>::from_array(values);\n-                 let bitmask = mask.to_bitmask();\n-                 assert_eq!(bitmask, 0b01);\n--                assert_eq!(core_simd::Mask::<$type, 2>::from_bitmask(bitmask), mask);\n-             }\n- \n-             #[test]\n -- \n 2.25.1"}, {"sha": "51fce8c854bdb5307149680f288fa590ed8a8b53", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/13fcf476001ff511103d9bec44e5be4e24eb0c96/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13fcf476001ff511103d9bec44e5be4e24eb0c96/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=13fcf476001ff511103d9bec44e5be4e24eb0c96", "patch": "@@ -652,6 +652,34 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n         }\n \n+        sym::simd_select_bitmask => {\n+            intrinsic_args!(fx, args => (m, a, b); intrinsic);\n+\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+            assert_eq!(a.layout(), b.layout());\n+\n+            let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n+            let lane_layout = fx.layout_of(lane_ty);\n+\n+            let m = m.load_scalar(fx);\n+\n+            for lane in 0..lane_count {\n+                let m_lane = fx.bcx.ins().ushr_imm(m, u64::from(lane) as i64);\n+                let m_lane = fx.bcx.ins().band_imm(m_lane, 1);\n+                let a_lane = a.value_lane(fx, lane).load_scalar(fx);\n+                let b_lane = b.value_lane(fx, lane).load_scalar(fx);\n+\n+                let m_lane = fx.bcx.ins().icmp_imm(IntCC::Equal, m_lane, 0);\n+                let res_lane =\n+                    CValue::by_val(fx.bcx.ins().select(m_lane, b_lane, a_lane), lane_layout);\n+\n+                ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n+            }\n+        }\n+\n         sym::simd_bitmask => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n \n@@ -748,7 +776,6 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         // simd_arith_offset\n         // simd_scatter\n         // simd_gather\n-        // simd_select_bitmask\n         _ => {\n             fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n         }"}]}