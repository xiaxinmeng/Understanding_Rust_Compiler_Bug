{"sha": "fc2fc8528b699faf0993e607c842165ac65052f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmZjODUyOGI2OTlmYWYwOTkzZTYwN2M4NDIxNjVhYzY1MDUyZjU=", "commit": {"author": {"name": "Wesley Norris", "email": "repnop@outlook.com", "date": "2019-10-26T20:27:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T13:52:33Z"}, "message": "Add tests for the trait bound flip assist.\n\nCo-authored-by: vlthr <vlthr@users.noreply.github.com>", "tree": {"sha": "ff963faecb3f4ce49409eda0c42918f0a1853605", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff963faecb3f4ce49409eda0c42918f0a1853605"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2fc8528b699faf0993e607c842165ac65052f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2fc8528b699faf0993e607c842165ac65052f5", "html_url": "https://github.com/rust-lang/rust/commit/fc2fc8528b699faf0993e607c842165ac65052f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2fc8528b699faf0993e607c842165ac65052f5/comments", "author": {"login": "repnop", "id": 24203105, "node_id": "MDQ6VXNlcjI0MjAzMTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24203105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repnop", "html_url": "https://github.com/repnop", "followers_url": "https://api.github.com/users/repnop/followers", "following_url": "https://api.github.com/users/repnop/following{/other_user}", "gists_url": "https://api.github.com/users/repnop/gists{/gist_id}", "starred_url": "https://api.github.com/users/repnop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repnop/subscriptions", "organizations_url": "https://api.github.com/users/repnop/orgs", "repos_url": "https://api.github.com/users/repnop/repos", "events_url": "https://api.github.com/users/repnop/events{/privacy}", "received_events_url": "https://api.github.com/users/repnop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a64a85a5279ab0fcd45b2712cb544929e86f2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a64a85a5279ab0fcd45b2712cb544929e86f2a0", "html_url": "https://github.com/rust-lang/rust/commit/3a64a85a5279ab0fcd45b2712cb544929e86f2a0"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "203092d03fce95af60c66d2ce303f9bef8b1a964", "filename": "crates/ra_assists/src/assists/flip_trait_bound.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fc2fc8528b699faf0993e607c842165ac65052f5/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2fc8528b699faf0993e607c842165ac65052f5/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs?ref=fc2fc8528b699faf0993e607c842165ac65052f5", "patch": "@@ -30,3 +30,79 @@ pub(crate) fn flip_trait_bound(mut ctx: AssistCtx<impl HirDatabase>) -> Option<A\n \n     ctx.build()\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    #[test]\n+    fn flip_trait_bound_assist_available() {\n+        check_assist_target(flip_trait_bound, \"struct S<T> where T: A <|>+ B + C { }\", \"+\")\n+    }\n+\n+    #[test]\n+    fn flip_trait_bound_not_applicable_for_single_trait_bound() {\n+        check_assist_not_applicable(flip_trait_bound, \"struct S<T> where T: <|>A { }\")\n+    }\n+\n+    #[test]\n+    fn flip_trait_bound_works_for_struct() {\n+        check_assist(\n+            flip_trait_bound,\n+            \"struct S<T> where T: A <|>+ B { }\",\n+            \"struct S<T> where T: B <|>+ A { }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_trait_bound_works_for_trait_impl() {\n+        check_assist(\n+            flip_trait_bound,\n+            \"impl X for S<T> where T: A +<|> B { }\",\n+            \"impl X for S<T> where T: B +<|> A { }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_trait_bound_works_for_fn() {\n+        check_assist(flip_trait_bound, \"fn f<T: A <|>+ B>(t: T) { }\", \"fn f<T: B <|>+ A>(t: T) { }\")\n+    }\n+\n+    #[test]\n+    fn flip_trait_bound_works_for_fn_where_clause() {\n+        check_assist(\n+            flip_trait_bound,\n+            \"fn f<T>(t: T) where T: A +<|> B { }\",\n+            \"fn f<T>(t: T) where T: B +<|> A { }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_trait_bound_works_for_lifetime() {\n+        check_assist(\n+            flip_trait_bound,\n+            \"fn f<T>(t: T) where T: A <|>+ 'static { }\",\n+            \"fn f<T>(t: T) where T: 'static <|>+ A { }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_trait_bound_works_for_complex_bounds() {\n+        check_assist(\n+            flip_trait_bound,\n+            \"struct S<T> where T: A<T> <|>+ b_mod::B<T> + C<T> { }\",\n+            \"struct S<T> where T: b_mod::B<T> <|>+ A<T> + C<T> { }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn flip_trait_bound_works_for_long_bounds() {\n+        check_assist(\n+            flip_trait_bound,\n+            \"struct S<T> where T: A + B + C + D + E + F +<|> G + H + I + J { }\",\n+            \"struct S<T> where T: A + B + C + D + E + G +<|> F + H + I + J { }\",\n+        )\n+    }\n+}"}]}