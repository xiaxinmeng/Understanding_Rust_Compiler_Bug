{"sha": "ab579883f27e511d6325f7b20dbc147ad0ecef6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTc5ODgzZjI3ZTUxMWQ2MzI1ZjdiMjBkYmMxNDdhZDBlY2VmNmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T10:05:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-16T15:55:37Z"}, "message": "Factor out the \"region substs\" creation to occur earlier, so that the\ncomplete set of regions are available when converting types.", "tree": {"sha": "746a5779e08bc50fb64787c6dc76707f28244945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746a5779e08bc50fb64787c6dc76707f28244945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab579883f27e511d6325f7b20dbc147ad0ecef6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab579883f27e511d6325f7b20dbc147ad0ecef6f", "html_url": "https://github.com/rust-lang/rust/commit/ab579883f27e511d6325f7b20dbc147ad0ecef6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab579883f27e511d6325f7b20dbc147ad0ecef6f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d1f14e7d54291773bf208e30c1ff4555f2178d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d1f14e7d54291773bf208e30c1ff4555f2178d", "html_url": "https://github.com/rust-lang/rust/commit/80d1f14e7d54291773bf208e30c1ff4555f2178d"}], "stats": {"total": 125, "additions": 82, "deletions": 43}, "files": [{"sha": "d4252a926952c3182bd612e86bb2e59cc3d1b108", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 82, "deletions": 43, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/ab579883f27e511d6325f7b20dbc147ad0ecef6f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab579883f27e511d6325f7b20dbc147ad0ecef6f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ab579883f27e511d6325f7b20dbc147ad0ecef6f", "patch": "@@ -264,34 +264,31 @@ pub fn ast_path_substs_for_ty<'tcx>(\n \n     let (regions, types, assoc_bindings) = match path.segments.last().unwrap().parameters {\n         ast::AngleBracketedParameters(ref data) => {\n-            convert_angle_bracketed_parameters(this, rscope, data)\n+            convert_angle_bracketed_parameters(this, rscope, path.span, decl_generics, data)\n         }\n         ast::ParenthesizedParameters(ref data) => {\n             span_err!(tcx.sess, path.span, E0214,\n                 \"parenthesized parameters may only be used with a trait\");\n-            convert_parenthesized_parameters(this, data)\n+            convert_parenthesized_parameters(this, rscope, path.span, decl_generics, data)\n         }\n     };\n \n     prohibit_projections(this.tcx(), &assoc_bindings);\n \n     create_substs_for_ast_path(this,\n-                               rscope,\n                                path.span,\n                                decl_generics,\n                                None,\n                                types,\n                                regions)\n }\n \n-fn create_substs_for_ast_path<'tcx>(\n+fn create_region_substs<'tcx>(\n     this: &AstConv<'tcx>,\n     rscope: &RegionScope,\n     span: Span,\n     decl_generics: &ty::Generics<'tcx>,\n-    self_ty: Option<Ty<'tcx>>,\n-    types: Vec<Ty<'tcx>>,\n-    regions: Vec<ty::Region>)\n+    regions_provided: Vec<ty::Region>)\n     -> Substs<'tcx>\n {\n     let tcx = this.tcx();\n@@ -300,9 +297,9 @@ fn create_substs_for_ast_path<'tcx>(\n     // region with the current anon region binding (in other words,\n     // whatever & would get replaced with).\n     let expected_num_region_params = decl_generics.regions.len(TypeSpace);\n-    let supplied_num_region_params = regions.len();\n+    let supplied_num_region_params = regions_provided.len();\n     let regions = if expected_num_region_params == supplied_num_region_params {\n-        regions\n+        regions_provided\n     } else {\n         let anon_regions =\n             rscope.anon_regions(span, expected_num_region_params);\n@@ -314,51 +311,82 @@ fn create_substs_for_ast_path<'tcx>(\n         }\n \n         match anon_regions {\n-            Ok(v) => v.into_iter().collect(),\n-            Err(_) => (0..expected_num_region_params)\n-                          .map(|_| ty::ReStatic).collect() // hokey\n+            Ok(anon_regions) => anon_regions,\n+            Err(_) => (0..expected_num_region_params).map(|_| ty::ReStatic).collect()\n         }\n     };\n+    Substs::new_type(vec![], regions)\n+}\n+\n+/// Given the type/region arguments provided to some path (along with\n+/// an implicit Self, if this is a trait reference) returns the complete\n+/// set of substitutions. This may involve applying defaulted type parameters.\n+///\n+/// Note that the type listing given here is *exactly* what the user provided.\n+///\n+/// The `region_substs` should be the result of `create_region_substs`\n+/// -- that is, a substitution with no types but the correct number of\n+/// regions.\n+fn create_substs_for_ast_path<'tcx>(\n+    this: &AstConv<'tcx>,\n+    span: Span,\n+    decl_generics: &ty::Generics<'tcx>,\n+    self_ty: Option<Ty<'tcx>>,\n+    types_provided: Vec<Ty<'tcx>>,\n+    region_substs: Substs<'tcx>)\n+    -> Substs<'tcx>\n+{\n+    let tcx = this.tcx();\n+\n+    debug!(\"create_substs_for_ast_path(decl_generics={}, self_ty={}, \\\n+           types_provided={}, region_substs={}\",\n+           decl_generics.repr(tcx), self_ty.repr(tcx), types_provided.repr(tcx),\n+           region_substs.repr(tcx));\n+\n+    assert_eq!(region_substs.regions().len(TypeSpace), decl_generics.regions.len(TypeSpace));\n+    assert!(region_substs.types.is_empty());\n \n     // Convert the type parameters supplied by the user.\n     let ty_param_defs = decl_generics.types.get_slice(TypeSpace);\n-    let supplied_ty_param_count = types.len();\n-    let formal_ty_param_count =\n-        ty_param_defs.iter()\n-        .take_while(|x| !ty::is_associated_type(tcx, x.def_id))\n-        .count();\n-    let required_ty_param_count =\n-        ty_param_defs.iter()\n-        .take_while(|x| {\n-            x.default.is_none() &&\n-                !ty::is_associated_type(tcx, x.def_id)\n-        })\n-        .count();\n+    let supplied_ty_param_count = types_provided.len();\n+    let formal_ty_param_count = ty_param_defs.len();\n+    let required_ty_param_count = ty_param_defs.iter()\n+                                               .take_while(|x| x.default.is_none())\n+                                               .count();\n+\n+    let mut type_substs = types_provided;\n     if supplied_ty_param_count < required_ty_param_count {\n         let expected = if required_ty_param_count < formal_ty_param_count {\n             \"expected at least\"\n         } else {\n             \"expected\"\n         };\n-        span_fatal!(this.tcx().sess, span, E0243,\n-                                   \"wrong number of type arguments: {} {}, found {}\",\n-                                           expected,\n-                                           required_ty_param_count,\n-                                           supplied_ty_param_count);\n+        span_err!(this.tcx().sess, span, E0243,\n+                  \"wrong number of type arguments: {} {}, found {}\",\n+                  expected,\n+                  required_ty_param_count,\n+                  supplied_ty_param_count);\n+        while type_substs.len() < required_ty_param_count {\n+            type_substs.push(tcx.types.err);\n+        }\n     } else if supplied_ty_param_count > formal_ty_param_count {\n         let expected = if required_ty_param_count < formal_ty_param_count {\n             \"expected at most\"\n         } else {\n             \"expected\"\n         };\n-        span_fatal!(this.tcx().sess, span, E0244,\n-                                   \"wrong number of type arguments: {} {}, found {}\",\n-                                           expected,\n-                                           formal_ty_param_count,\n-                                           supplied_ty_param_count);\n+        span_err!(this.tcx().sess, span, E0244,\n+                  \"wrong number of type arguments: {} {}, found {}\",\n+                  expected,\n+                  formal_ty_param_count,\n+                  supplied_ty_param_count);\n+        type_substs.truncate(formal_ty_param_count);\n     }\n+    assert!(type_substs.len() >= required_ty_param_count &&\n+            type_substs.len() <= formal_ty_param_count);\n \n-    let mut substs = Substs::new_type(types, regions);\n+    let mut substs = region_substs;\n+    substs.types.extend(TypeSpace, type_substs.into_iter());\n \n     match self_ty {\n         None => {\n@@ -374,7 +402,8 @@ fn create_substs_for_ast_path<'tcx>(\n         }\n     }\n \n-    for param in &ty_param_defs[supplied_ty_param_count..] {\n+    let actual_supplied_ty_param_count = substs.types.len(TypeSpace);\n+    for param in &ty_param_defs[actual_supplied_ty_param_count..] {\n         match param.default {\n             Some(default) => {\n                 // This is a default type parameter.\n@@ -400,8 +429,10 @@ struct ConvertedBinding<'tcx> {\n \n fn convert_angle_bracketed_parameters<'tcx>(this: &AstConv<'tcx>,\n                                             rscope: &RegionScope,\n+                                            span: Span,\n+                                            decl_generics: &ty::Generics<'tcx>,\n                                             data: &ast::AngleBracketedParameterData)\n-                                            -> (Vec<ty::Region>,\n+                                            -> (Substs<'tcx>,\n                                                 Vec<Ty<'tcx>>,\n                                                 Vec<ConvertedBinding<'tcx>>)\n {\n@@ -410,6 +441,9 @@ fn convert_angle_bracketed_parameters<'tcx>(this: &AstConv<'tcx>,\n         .map(|l| ast_region_to_region(this.tcx(), l))\n         .collect();\n \n+    let region_substs =\n+        create_region_substs(this, rscope, span, decl_generics, regions);\n+\n     let types: Vec<_> =\n         data.types.iter()\n         .map(|t| ast_ty_to_ty(this, rscope, &**t))\n@@ -422,7 +456,7 @@ fn convert_angle_bracketed_parameters<'tcx>(this: &AstConv<'tcx>,\n                                     span: b.span })\n         .collect();\n \n-    (regions, types, assoc_bindings)\n+    (region_substs, types, assoc_bindings)\n }\n \n /// Returns the appropriate lifetime to use for any output lifetimes\n@@ -479,11 +513,17 @@ fn convert_ty_with_lifetime_elision<'tcx>(this: &AstConv<'tcx>,\n }\n \n fn convert_parenthesized_parameters<'tcx>(this: &AstConv<'tcx>,\n+                                          rscope: &RegionScope,\n+                                          span: Span,\n+                                          decl_generics: &ty::Generics<'tcx>,\n                                           data: &ast::ParenthesizedParameterData)\n-                                          -> (Vec<ty::Region>,\n+                                          -> (Substs<'tcx>,\n                                               Vec<Ty<'tcx>>,\n                                               Vec<ConvertedBinding<'tcx>>)\n {\n+    let region_substs =\n+        create_region_substs(this, rscope, span, decl_generics, Vec::new());\n+\n     let binding_rscope = BindingRscope::new();\n     let inputs = data.inputs.iter()\n                             .map(|a_t| ast_ty_to_ty(this, &binding_rscope, &**a_t))\n@@ -514,7 +554,7 @@ fn convert_parenthesized_parameters<'tcx>(this: &AstConv<'tcx>,\n         span: output_span\n     };\n \n-    (vec![], vec![input_ty], vec![output_binding])\n+    (region_substs, vec![input_ty], vec![output_binding])\n }\n \n pub fn instantiate_poly_trait_ref<'tcx>(\n@@ -626,7 +666,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n                             the crate attributes to enable\");\n             }\n \n-            convert_angle_bracketed_parameters(this, rscope, data)\n+            convert_angle_bracketed_parameters(this, rscope, path.span, &trait_def.generics, data)\n         }\n         ast::ParenthesizedParameters(ref data) => {\n             // For now, require that parenthetical notation be used\n@@ -640,12 +680,11 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n                             the crate attributes to enable\");\n             }\n \n-            convert_parenthesized_parameters(this, data)\n+            convert_parenthesized_parameters(this, rscope, path.span, &trait_def.generics, data)\n         }\n     };\n \n     let substs = create_substs_for_ast_path(this,\n-                                            rscope,\n                                             path.span,\n                                             &trait_def.generics,\n                                             self_ty,"}]}