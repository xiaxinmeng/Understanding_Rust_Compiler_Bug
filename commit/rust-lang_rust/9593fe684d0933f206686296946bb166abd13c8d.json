{"sha": "9593fe684d0933f206686296946bb166abd13c8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTNmZTY4NGQwOTMzZjIwNjY4NjI5Njk0NmJiMTY2YWJkMTNjOGQ=", "commit": {"author": {"name": "Yotam Ofek", "email": "yotam.ofek@gmail.com", "date": "2021-09-08T08:13:29Z"}, "committer": {"name": "Yotam Ofek", "email": "yotam.ofek@gmail.com", "date": "2021-09-08T08:49:05Z"}, "message": "Fix resolution of inherent array methods.", "tree": {"sha": "e935826db7145887a1e76be80f0a9f7aff5addce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e935826db7145887a1e76be80f0a9f7aff5addce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9593fe684d0933f206686296946bb166abd13c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9593fe684d0933f206686296946bb166abd13c8d", "html_url": "https://github.com/rust-lang/rust/commit/9593fe684d0933f206686296946bb166abd13c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9593fe684d0933f206686296946bb166abd13c8d/comments", "author": {"login": "yotamofek", "id": 1835307, "node_id": "MDQ6VXNlcjE4MzUzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1835307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yotamofek", "html_url": "https://github.com/yotamofek", "followers_url": "https://api.github.com/users/yotamofek/followers", "following_url": "https://api.github.com/users/yotamofek/following{/other_user}", "gists_url": "https://api.github.com/users/yotamofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/yotamofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yotamofek/subscriptions", "organizations_url": "https://api.github.com/users/yotamofek/orgs", "repos_url": "https://api.github.com/users/yotamofek/repos", "events_url": "https://api.github.com/users/yotamofek/events{/privacy}", "received_events_url": "https://api.github.com/users/yotamofek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yotamofek", "id": 1835307, "node_id": "MDQ6VXNlcjE4MzUzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1835307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yotamofek", "html_url": "https://github.com/yotamofek", "followers_url": "https://api.github.com/users/yotamofek/followers", "following_url": "https://api.github.com/users/yotamofek/following{/other_user}", "gists_url": "https://api.github.com/users/yotamofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/yotamofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yotamofek/subscriptions", "organizations_url": "https://api.github.com/users/yotamofek/orgs", "repos_url": "https://api.github.com/users/yotamofek/repos", "events_url": "https://api.github.com/users/yotamofek/events{/privacy}", "received_events_url": "https://api.github.com/users/yotamofek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1785493cae18d5cbd189a758e8042effbcb525ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/1785493cae18d5cbd189a758e8042effbcb525ef", "html_url": "https://github.com/rust-lang/rust/commit/1785493cae18d5cbd189a758e8042effbcb525ef"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "02a5cac1df923990d4791b42ed73aebf4e5c63a5", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9593fe684d0933f206686296946bb166abd13c8d/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9593fe684d0933f206686296946bb166abd13c8d/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=9593fe684d0933f206686296946bb166abd13c8d", "patch": "@@ -16,6 +16,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     autoderef,\n+    consteval::{self, ConstExt},\n     db::HirDatabase,\n     from_foreign_def_id,\n     primitive::{self, FloatTy, IntTy, UintTy},\n@@ -725,7 +726,27 @@ fn iterate_inherent_methods(\n     for krate in def_crates {\n         let impls = db.inherent_impls_in_crate(krate);\n \n-        for &impl_def in impls.for_self_ty(&self_ty.value) {\n+        let impls_for_self_ty = impls.for_self_ty(&self_ty.value).iter().chain(\n+            {\n+                if let TyKind::Array(parameters, array_len) = self_ty.value.kind(&Interner) {\n+                    if !array_len.is_unknown() {\n+                        let unknown_array_len_ty =\n+                            TyKind::Array(parameters.clone(), consteval::usize_const(None))\n+                                .intern(&Interner);\n+\n+                        Some(impls.for_self_ty(&unknown_array_len_ty))\n+                    } else {\n+                        None\n+                    }\n+                } else {\n+                    None\n+                }\n+            }\n+            .into_iter()\n+            .flatten(),\n+        );\n+\n+        for &impl_def in impls_for_self_ty {\n             for &item in db.impl_data(impl_def).items.iter() {\n                 if !is_valid_candidate(\n                     db,\n@@ -803,7 +824,20 @@ fn is_valid_candidate(\n                     None => return false,\n                 };\n                 if transformed_receiver_ty != receiver_ty.value {\n-                    return false;\n+                    match (\n+                        transformed_receiver_ty.kind(&Interner),\n+                        receiver_ty.value.kind(&Interner),\n+                    ) {\n+                        (\n+                            TyKind::Array(transformed_array_ty, transformed_array_len),\n+                            TyKind::Array(receiver_array_ty, receiver_array_len),\n+                        ) if transformed_array_ty == receiver_array_ty\n+                            && transformed_array_len.is_unknown()\n+                            && !receiver_array_len.is_unknown() => {}\n+                        _ => {\n+                            return false;\n+                        }\n+                    }\n                 }\n             }\n             if let Some(from_module) = visible_from_module {"}]}