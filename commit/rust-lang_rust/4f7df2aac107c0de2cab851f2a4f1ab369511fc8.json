{"sha": "4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmN2RmMmFhYzEwN2MwZGUyY2FiODUxZjJhNGYxYWIzNjk1MTFmYzg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-11T10:45:55Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-11T10:48:16Z"}, "message": "Add MacroDefKind", "tree": {"sha": "9f78811b31771c2822c0852c4527ad145f845e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f78811b31771c2822c0852c4527ad145f845e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "html_url": "https://github.com/rust-lang/rust/commit/4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4aa8b63bcea5faa23da56b679cafbdbad6892f1", "html_url": "https://github.com/rust-lang/rust/commit/c4aa8b63bcea5faa23da56b679cafbdbad6892f1"}], "stats": {"total": 80, "additions": 29, "deletions": 51}, "files": [{"sha": "6d116ee75c908f25391304922e7dd6dfac936ae4", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "patch": "@@ -6,8 +6,8 @@ use crate::{\n     adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::AstItemDef,\n-    Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef,\n-    MacroDefId, Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef, Module,\n+    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::Source;\n@@ -140,15 +140,10 @@ impl HasSource for TypeAlias {\n         self.id.source(db)\n     }\n }\n-\n impl HasSource for MacroDef {\n     type Ast = ast::MacroCall;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::MacroCall> {\n-        let ast_id = match self.id {\n-            MacroDefId::DeclarativeMacro(it) => it.ast_id,\n-            MacroDefId::BuiltinMacro(it) => it.ast_id,\n-        };\n-        Source { file_id: ast_id.file_id(), ast: ast_id.to_node(db) }\n+        Source { file_id: self.id.ast_id.file_id(), ast: self.id.ast_id.to_node(db) }\n     }\n }\n "}, {"sha": "30664278e50e4d9ff7f664b58d2a4d6b086d088b", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "patch": "@@ -3,7 +3,7 @@\n use hir_expand::{\n     builtin_macro::find_builtin_macro,\n     name::{self, AsName, Name},\n-    DeclarativeMacro, HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind,\n+    HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroDefKind, MacroFileKind,\n };\n use ra_cfg::CfgOptions;\n use ra_db::{CrateId, FileId};\n@@ -708,13 +708,12 @@ where\n         // Case 1: macro rules, define a macro in crate-global mutable scope\n         if is_macro_rules(&mac.path) {\n             if let Some(name) = &mac.name {\n-                let macro_id = DeclarativeMacro { ast_id, krate: self.def_collector.def_map.krate };\n-                self.def_collector.define_macro(\n-                    self.module_id,\n-                    name.clone(),\n-                    MacroDefId::DeclarativeMacro(macro_id),\n-                    mac.export,\n-                );\n+                let macro_id = MacroDefId {\n+                    ast_id,\n+                    krate: self.def_collector.def_map.krate,\n+                    kind: MacroDefKind::Declarative,\n+                };\n+                self.def_collector.define_macro(self.module_id, name.clone(), macro_id, mac.export);\n             }\n             return;\n         }"}, {"sha": "97fb0cb552193abea9500a678b3c8c608baeedbb", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "patch": "@@ -2,7 +2,7 @@\n use crate::db::AstDatabase;\n use crate::{\n     ast::{self, AstNode},\n-    name, AstId, BuiltinMacro, CrateId, HirFileId, MacroCallId, MacroDefId, MacroFileKind,\n+    name, AstId, CrateId, HirFileId, MacroCallId, MacroDefId, MacroDefKind, MacroFileKind,\n     TextUnit,\n };\n \n@@ -33,11 +33,7 @@ pub fn find_builtin_macro(\n ) -> Option<MacroDefId> {\n     // FIXME: Better registering method\n     if ident == &name::LINE_MACRO {\n-        Some(MacroDefId::BuiltinMacro(BuiltinMacro {\n-            expander: BuiltinExpander::Line,\n-            krate,\n-            ast_id,\n-        }))\n+        Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(BuiltinExpander::Line) })\n     } else {\n         None\n     }"}, {"sha": "5eadee9c28cc64954014645b0348d11fbc1145a4", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{AstNode, Parse, SyntaxNode};\n \n use crate::{\n     ast_id_map::AstIdMap, BuiltinExpander, HirFileId, HirFileIdRepr, MacroCallId, MacroCallLoc,\n-    MacroDefId, MacroFile, MacroFileKind,\n+    MacroDefId, MacroDefKind, MacroFile, MacroFileKind,\n };\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -69,9 +69,9 @@ pub(crate) fn macro_def(\n     db: &dyn AstDatabase,\n     id: MacroDefId,\n ) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n-    match id {\n-        MacroDefId::DeclarativeMacro(it) => {\n-            let macro_call = it.ast_id.to_node(db);\n+    match id.kind {\n+        MacroDefKind::Declarative => {\n+            let macro_call = id.ast_id.to_node(db);\n             let arg = macro_call.token_tree()?;\n             let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n                 log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n@@ -83,8 +83,8 @@ pub(crate) fn macro_def(\n             })?;\n             Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n         }\n-        MacroDefId::BuiltinMacro(it) => {\n-            Some(Arc::new((TokenExpander::Builtin(it.expander.clone()), mbe::TokenMap::default())))\n+        MacroDefKind::BuiltIn(expander) => {\n+            Some(Arc::new((TokenExpander::Builtin(expander.clone()), mbe::TokenMap::default())))\n         }\n     }\n }"}, {"sha": "379562a2c14c542f5e5ebc1b4a0ec4e36703eae5", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     db::AstDatabase,\n     either::Either,\n     name::{AsName, Name},\n-    HirFileId, HirFileIdRepr, MacroDefId,\n+    HirFileId, HirFileIdRepr, MacroDefKind,\n };\n \n #[derive(Debug)]\n@@ -24,9 +24,9 @@ impl Hygiene {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n-                match loc.def {\n-                    MacroDefId::DeclarativeMacro(it) => Some(it.krate),\n-                    MacroDefId::BuiltinMacro(_) => None,\n+                match loc.def.kind {\n+                    MacroDefKind::Declarative => Some(loc.def.krate),\n+                    MacroDefKind::BuiltIn(_) => None,\n                 }\n             }\n         };"}, {"sha": "c6ffa2c6f2f0aa08c780c0a0407ccc581bfb4997", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7df2aac107c0de2cab851f2a4f1ab369511fc8/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=4f7df2aac107c0de2cab851f2a4f1ab369511fc8", "patch": "@@ -78,23 +78,17 @@ impl HirFileId {\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n \n-                // FIXME: Do we support expansion information in builtin macro?\n-                let macro_decl = match loc.def {\n-                    MacroDefId::DeclarativeMacro(it) => (it),\n-                    MacroDefId::BuiltinMacro(_) => return None,\n-                };\n-\n                 let arg_start = loc.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n                 let def_start =\n-                    macro_decl.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n+                    loc.def.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n \n                 let macro_def = db.macro_def(loc.def)?;\n                 let shift = macro_def.0.shift();\n                 let exp_map = db.parse_macro(macro_file)?.1;\n                 let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n \n                 let arg_start = (loc.ast_id.file_id, arg_start);\n-                let def_start = (macro_decl.ast_id.file_id, def_start);\n+                let def_start = (loc.def.ast_id.file_id, def_start);\n \n                 Some(ExpansionInfo { arg_start, def_start, macro_arg, macro_def, exp_map, shift })\n             }\n@@ -128,22 +122,16 @@ impl salsa::InternKey for MacroCallId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum MacroDefId {\n-    DeclarativeMacro(DeclarativeMacro),\n-    BuiltinMacro(BuiltinMacro),\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct DeclarativeMacro {\n+pub struct MacroDefId {\n     pub krate: CrateId,\n     pub ast_id: AstId<ast::MacroCall>,\n+    pub kind: MacroDefKind,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct BuiltinMacro {\n-    pub krate: CrateId,\n-    pub ast_id: AstId<ast::MacroCall>,\n-    pub expander: BuiltinExpander,\n+pub enum MacroDefKind {\n+    Declarative,\n+    BuiltIn(BuiltinExpander),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}]}