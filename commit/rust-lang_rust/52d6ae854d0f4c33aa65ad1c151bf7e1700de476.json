{"sha": "52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZDZhZTg1NGQwZjRjMzNhYTY1YWQxYzE1MWJmN2UxNzAwZGU0NzY=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-07-11T05:58:43Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-07-13T05:51:30Z"}, "message": "Reimplement some \"add `mut`\" suggestions under NLL\n\nSpecifically, `&self` -> `&mut self` and explicit `ref` -> `ref mut`.\nImplicit `ref` isn't handled yet and causes an ICE.", "tree": {"sha": "6598e143a124dd04bf3e62f3edd80cdc24561ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6598e143a124dd04bf3e62f3edd80cdc24561ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "html_url": "https://github.com/rust-lang/rust/commit/52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8eb9a685cb58aeea3b25cecf7a510f6ba5c92d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8eb9a685cb58aeea3b25cecf7a510f6ba5c92d5", "html_url": "https://github.com/rust-lang/rust/commit/f8eb9a685cb58aeea3b25cecf7a510f6ba5c92d5"}], "stats": {"total": 123, "additions": 88, "deletions": 35}, "files": [{"sha": "243f378377f9a5ddbacf50bb26901085fb4d7fe0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 71, "deletions": 28, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "patch": "@@ -29,6 +29,8 @@ use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::small_vec::SmallVec;\n \n+use core::unicode::property::Pattern_White_Space;\n+\n use std::rc::Rc;\n \n use syntax_pos::Span;\n@@ -1837,17 +1839,45 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Place::Projection(box Projection {\n                 base: Place::Local(local),\n                 elem: ProjectionElem::Deref,\n-            }) if self.mir.local_decls[*local].is_nonref_binding() =>\n-            {\n-                let (err_help_span, suggested_code) =\n-                    find_place_to_suggest_ampmut(self.tcx, self.mir, *local);\n+            }) if self.mir.local_decls[*local].is_user_variable.is_some() => {\n+                let local_decl = &self.mir.local_decls[*local];\n+                let (err_help_span, suggested_code) = match local_decl.is_user_variable {\n+                    Some(ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf)) => {\n+                        suggest_ampmut_self(local_decl)\n+                    },\n+\n+                    Some(ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n+                        binding_mode: ty::BindingMode::BindByValue(_),\n+                        opt_ty_info,\n+                        ..\n+                    }))) => {\n+                        if let Some(x) = try_suggest_ampmut_rhs(\n+                            self.tcx, self.mir, *local,\n+                        ) {\n+                            x\n+                        } else {\n+                            suggest_ampmut_type(local_decl, opt_ty_info)\n+                        }\n+                    },\n+\n+                    Some(ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n+                        binding_mode: ty::BindingMode::BindByReference(_),\n+                        ..\n+                    }))) => {\n+                        suggest_ref_mut(self.tcx, local_decl)\n+                    },\n+\n+                    Some(ClearCrossCrate::Clear) => bug!(\"saw cleared local state\"),\n+\n+                    None => bug!(),\n+                };\n+\n                 err.span_suggestion(\n                     err_help_span,\n                     \"consider changing this to be a mutable reference\",\n                     suggested_code,\n                 );\n \n-                let local_decl = &self.mir.local_decls[*local];\n                 if let Some(name) = local_decl.name {\n                     err.span_label(\n                         span,\n@@ -1874,13 +1904,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.emit();\n         return true;\n \n-        // Returns the span to highlight and the associated text to\n-        // present when suggesting that the user use an `&mut`.\n-        //\n+        fn suggest_ampmut_self<'cx, 'gcx, 'tcx>(\n+            local_decl: &mir::LocalDecl<'tcx>,\n+        ) -> (Span, String) {\n+            (local_decl.source_info.span, \"&mut self\".to_string())\n+        }\n+\n         // When we want to suggest a user change a local variable to be a `&mut`, there\n         // are three potential \"obvious\" things to highlight:\n         //\n-        // let ident [: Type] [= RightHandSideExresssion];\n+        // let ident [: Type] [= RightHandSideExpression];\n         //     ^^^^^    ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^\n         //     (1.)     (2.)              (3.)\n         //\n@@ -1889,48 +1922,58 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // for example, if the RHS is present and the Type is not, then the type is going to\n         // be inferred *from* the RHS, which means we should highlight that (and suggest\n         // that they borrow the RHS mutably).\n-        fn find_place_to_suggest_ampmut<'cx, 'gcx, 'tcx>(\n+        //\n+        // This implementation attempts to emulate AST-borrowck prioritization\n+        // by trying (3.), then (2.) and finally falling back on (1.).\n+\n+        fn try_suggest_ampmut_rhs<'cx, 'gcx, 'tcx>(\n             tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n             mir: &Mir<'tcx>,\n             local: Local,\n-        ) -> (Span, String) {\n-            // This implementation attempts to emulate AST-borrowck prioritization\n-            // by trying (3.), then (2.) and finally falling back on (1.).\n+        ) -> Option<(Span, String)> {\n             let locations = mir.find_assignments(local);\n             if locations.len() > 0 {\n                 let assignment_rhs_span = mir.source_info(locations[0]).span;\n                 let snippet = tcx.sess.codemap().span_to_snippet(assignment_rhs_span);\n                 if let Ok(src) = snippet {\n-                    // pnkfelix inherited code; believes intention is\n-                    // highlighted text will always be `&<expr>` and\n-                    // thus can transform to `&mut` by slicing off\n-                    // first ASCII character and prepending \"&mut \".\n                     if src.starts_with('&') {\n                         let borrowed_expr = src[1..].to_string();\n-                        return (assignment_rhs_span, format!(\"&mut {}\", borrowed_expr));\n+                        return Some((assignment_rhs_span, format!(\"&mut {}\", borrowed_expr)));\n                     }\n                 }\n             }\n+            None\n+        }\n \n-            let local_decl = &mir.local_decls[local];\n-            let highlight_span = match local_decl.is_user_variable {\n+        fn suggest_ampmut_type<'tcx>(\n+            local_decl: &mir::LocalDecl<'tcx>,\n+            opt_ty_info: Option<Span>,\n+        ) -> (Span, String) {\n+            let highlight_span = match opt_ty_info {\n                 // if this is a variable binding with an explicit type,\n                 // try to highlight that for the suggestion.\n-                Some(ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n-                    opt_ty_info: Some(ty_span),\n-                    ..\n-                }))) => ty_span,\n-\n-                Some(ClearCrossCrate::Clear) => bug!(\"saw cleared local state\"),\n+                Some(ty_span) => ty_span,\n \n                 // otherwise, just highlight the span associated with\n                 // the (MIR) LocalDecl.\n-                _ => local_decl.source_info.span,\n+                None => local_decl.source_info.span,\n             };\n \n             let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n             assert_eq!(ty_mut.mutbl, hir::MutImmutable);\n-            return (highlight_span, format!(\"&mut {}\", ty_mut.ty));\n+            (highlight_span, format!(\"&mut {}\", ty_mut.ty))\n+        }\n+\n+        fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n+            tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+            local_decl: &mir::LocalDecl<'tcx>,\n+        ) -> (Span, String) {\n+            let hi_span = local_decl.source_info.span;\n+            let hi_src = tcx.sess.codemap().span_to_snippet(hi_span).unwrap();\n+            assert!(hi_src.starts_with(\"ref\"));\n+            assert!(hi_src[\"ref\".len()..].starts_with(Pattern_White_Space));\n+            let suggestion = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n+            (hi_span, suggestion)\n         }\n     }\n "}, {"sha": "92c0a2b475c20dacdeae77b02f1c6c2b505c49a9", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "patch": "@@ -33,6 +33,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]\n+#![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]\n \n@@ -56,6 +57,7 @@ extern crate rustc_target;\n extern crate log_settings;\n extern crate rustc_apfloat;\n extern crate byteorder;\n+extern crate core;\n \n mod diagnostics;\n "}, {"sha": "d156d64b9d693503dcdcce306e92bd9f047ae1da", "filename": "src/test/ui/did_you_mean/issue-38147-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr?ref=52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable item `*self.s` as mutable\n   --> $DIR/issue-38147-1.rs:27:9\n    |\n LL |     fn f(&self) {\n-   |          ----- help: consider changing this to be a mutable reference: `&mut Foo<'_>`\n+   |          ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n    |         ^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "e2d2fcd63db122c244f273ec9dee1e991ea545c7", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "patch": "@@ -10,15 +10,15 @@ error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:26:17\n    |\n LL |     fn foo<'z>(&'z self) {\n-   |                -------- help: consider changing this to be a mutable reference: `&mut Z`\n+   |                -------- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:30:17\n    |\n LL |     fn foo1(&self, other: &Z) {\n-   |             ----- help: consider changing this to be a mutable reference: `&mut Z`\n+   |             ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n@@ -35,7 +35,7 @@ error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:35:17\n    |\n LL |     fn foo2<'a>(&'a self, other: &Z) {\n-   |                 -------- help: consider changing this to be a mutable reference: `&mut Z`\n+   |                 -------- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "d1590b3934e0b37bdd91bb18c3304df1e2967cf3", "filename": "src/test/ui/suggestions/suggest-ref-mut.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52d6ae854d0f4c33aa65ad1c151bf7e1700de476/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr?ref=52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "patch": "@@ -1,20 +1,28 @@\n error[E0594]: cannot assign to `*foo` which is behind a `&` reference\n   --> $DIR/suggest-ref-mut.rs:17:5\n    |\n+LL |     let ref foo = 16;\n+   |         ------- help: consider changing this to be a mutable reference: `ref mut foo`\n+...\n LL |     *foo = 32;\n-   |     ^^^^^^^^^ cannot assign\n+   |     ^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*bar` which is behind a `&` reference\n   --> $DIR/suggest-ref-mut.rs:22:9\n    |\n+LL |     if let Some(ref bar) = Some(16) {\n+   |                 ------- help: consider changing this to be a mutable reference: `ref mut bar`\n+...\n LL |         *bar = 32;\n-   |         ^^^^^^^^^ cannot assign\n+   |         ^^^^^^^^^ `bar` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*quo` which is behind a `&` reference\n   --> $DIR/suggest-ref-mut.rs:26:22\n    |\n LL |         ref quo => { *quo = 32; },\n-   |                      ^^^^^^^^^ cannot assign\n+   |         -------      ^^^^^^^^^ `quo` is a `&` reference, so the data it refers to cannot be written\n+   |         |\n+   |         help: consider changing this to be a mutable reference: `ref mut quo`\n \n error: aborting due to 3 previous errors\n "}]}