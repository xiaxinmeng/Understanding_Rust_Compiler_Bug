{"sha": "6d67d6846c9d25b1cffdafd8c330e6374532b5d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNjdkNjg0NmM5ZDI1YjFjZmZkYWZkOGMzMzBlNjM3NDUzMmI1ZDg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-14T22:41:14Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc_codegen_utils: print all nominal types as paths, in symbol names.", "tree": {"sha": "dc12d09ccaee5bacc52d5f541ad0499ff750131c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc12d09ccaee5bacc52d5f541ad0499ff750131c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d67d6846c9d25b1cffdafd8c330e6374532b5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d67d6846c9d25b1cffdafd8c330e6374532b5d8", "html_url": "https://github.com/rust-lang/rust/commit/6d67d6846c9d25b1cffdafd8c330e6374532b5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d67d6846c9d25b1cffdafd8c330e6374532b5d8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5211e37b1dd6b7fc26d919941e958bce8f5815a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5211e37b1dd6b7fc26d919941e958bce8f5815a0", "html_url": "https://github.com/rust-lang/rust/commit/5211e37b1dd6b7fc26d919941e958bce8f5815a0"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "a17a554480eb80b313273fc3c9dae3b46fb5ca40", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d67d6846c9d25b1cffdafd8c330e6374532b5d8/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d67d6846c9d25b1cffdafd8c330e6374532b5d8/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=6d67d6846c9d25b1cffdafd8c330e6374532b5d8", "patch": "@@ -422,7 +422,18 @@ impl Printer for SymbolPath {\n         self: PrintCx<'_, '_, 'tcx, Self>,\n         ty: Ty<'tcx>,\n     ) -> Result<Self::Type, Self::Error> {\n-        self.pretty_print_type(ty)\n+        match ty.sty {\n+            // Print all nominal types as paths (unlike `pretty_print_type`).\n+            ty::FnDef(def_id, substs) |\n+            ty::Opaque(def_id, substs) |\n+            ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n+            ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n+            ty::Closure(def_id, ty::ClosureSubsts { substs }) |\n+            ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n+                self.print_def_path(def_id, Some(substs), iter::empty())\n+            }\n+            _ => self.pretty_print_type(ty),\n+        }\n     }\n \n     fn path_crate(\n@@ -437,7 +448,22 @@ impl Printer for SymbolPath {\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n     ) -> Result<Self::Path, Self::Error> {\n-        self.pretty_path_qualified(self_ty, trait_ref)\n+        // Similar to `pretty_path_qualified`, but for the other\n+        // types that are printed as paths (see `print_type` above).\n+        match self_ty.sty {\n+            ty::FnDef(..) |\n+            ty::Opaque(..) |\n+            ty::Projection(_) |\n+            ty::UnnormalizedProjection(_) |\n+            ty::Closure(..) |\n+            ty::Generator(..)\n+                if trait_ref.is_none() =>\n+            {\n+                self.print_type(self_ty)\n+            }\n+\n+            _ => self.pretty_path_qualified(self_ty, trait_ref)\n+        }\n     }\n \n     fn path_append_impl<'gcx, 'tcx>("}]}