{"sha": "b4fcf1b1dc3d0533a7fa554482e99366f532056b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZmNmMWIxZGMzZDA1MzNhN2ZhNTU0NDgyZTk5MzY2ZjUzMjA1NmI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-10T22:13:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-24T17:11:49Z"}, "message": "tests: add v0 structural const value demangling test.", "tree": {"sha": "fe20ce045fc03a1e94b82cf47aa46c73268923dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe20ce045fc03a1e94b82cf47aa46c73268923dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4fcf1b1dc3d0533a7fa554482e99366f532056b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4fcf1b1dc3d0533a7fa554482e99366f532056b", "html_url": "https://github.com/rust-lang/rust/commit/b4fcf1b1dc3d0533a7fa554482e99366f532056b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4fcf1b1dc3d0533a7fa554482e99366f532056b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af002c152413c6f566ad0def41178938f098c7c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/af002c152413c6f566ad0def41178938f098c7c1", "html_url": "https://github.com/rust-lang/rust/commit/af002c152413c6f566ad0def41178938f098c7c1"}], "stats": {"total": 257, "additions": 257, "deletions": 0}, "files": [{"sha": "9da6a0f18e6968e4ef5a30c19fe61e4e1fedeb4e", "filename": "src/test/ui/symbol-names/const-generics-structural-demangling.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b4fcf1b1dc3d0533a7fa554482e99366f532056b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fcf1b1dc3d0533a7fa554482e99366f532056b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs?ref=b4fcf1b1dc3d0533a7fa554482e99366f532056b", "patch": "@@ -0,0 +1,96 @@\n+// build-fail\n+// compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n+\n+// NOTE(eddyb) we need `core` for `core::option::Option`, normalize away its\n+// disambiguator hash, which can/should change (including between stage{1,2}).\n+// normalize-stderr-test: \"Cs[0-9a-zA-Z]+_4core\" -> \"Cs$$HASH_4core\"\n+// normalize-stderr-test: \"core\\[[0-9a-f]+\\]\" -> \"core[$$HASH_HEX]\"\n+\n+#![feature(const_generics, decl_macro, rustc_attrs)]\n+#![allow(incomplete_features)]\n+\n+pub struct RefByte<const RB: &'static u8>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMCsno73SFvQKx_1cINtB0_7RefByteKRh7b_E)\n+//~| ERROR demangling(<c[464da6a86cb672f]::RefByte<{&123u8}>>)\n+//~| ERROR demangling-alt(<c::RefByte<{&123}>>)\n+impl RefByte<{&123}> {}\n+\n+// FIXME(eddyb) this was supposed to be `RefMutZst` with `&mut []`,\n+// but that is currently not allowed in const generics.\n+pub struct RefZst<const RMZ: &'static [u8; 0]>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6RefZstKRAEE)\n+//~| ERROR demangling(<c[464da6a86cb672f]::RefZst<{&[]}>>)\n+//~| ERROR demangling-alt(<c::RefZst<{&[]}>>)\n+impl RefZst<{&[]}> {}\n+\n+pub struct Array3Bytes<const A3B: [u8; 3]>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_11Array3BytesKAh1_h2_h3_EE)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Array3Bytes<{[1u8, 2u8, 3u8]}>>)\n+//~| ERROR demangling-alt(<c::Array3Bytes<{[1, 2, 3]}>>)\n+impl Array3Bytes<{[1, 2, 3]}> {}\n+\n+pub struct TupleByteBool<const TBB: (u8, bool)>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_13TupleByteBoolKTh1_b0_EE)\n+//~| ERROR demangling(<c[464da6a86cb672f]::TupleByteBool<{(1u8, false)}>>)\n+//~| ERROR demangling-alt(<c::TupleByteBool<{(1, false)}>>)\n+impl TupleByteBool<{(1, false)}> {}\n+\n+pub struct OptionUsize<const OU: Option<usize>>;\n+\n+// HACK(eddyb) the full mangling is only in `.stderr` because we can normalize\n+// the `core` disambiguator hash away there, but not here.\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs\n+//~| ERROR demangling(<c[464da6a86cb672f]::OptionUsize<{core[\n+//~| ERROR demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::None}>>)\n+impl OptionUsize<{None}> {}\n+\n+// HACK(eddyb) the full mangling is only in `.stderr` because we can normalize\n+// the `core` disambiguator hash away there, but not here.\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs\n+//~| ERROR demangling(<c[464da6a86cb672f]::OptionUsize<{core[\n+//~| ERROR demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::Some(0)}>>)\n+impl OptionUsize<{Some(0)}> {}\n+\n+#[derive(PartialEq, Eq)]\n+pub struct Foo {\n+    s: &'static str,\n+    ch: char,\n+    slice: &'static [u8],\n+}\n+pub struct Foo_<const F: Foo>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs4_Csno73SFvQKx_1cINtB3_4Foo_KVNtB3_3FooS1sRe616263_2chc78_5sliceRAh1_h2_h3_EEE)\n+//~| ERROR demangling(<c[464da6a86cb672f]::Foo_<{c[464da6a86cb672f]::Foo { s: \"abc\", ch: 'x', slice: &[1u8, 2u8, 3u8] }}>>)\n+//~| ERROR demangling-alt(<c::Foo_<{c::Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}>>)\n+impl Foo_<{Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}> {}\n+\n+// NOTE(eddyb) this tests specifically the use of disambiguators in field names,\n+// using macros 2.0 hygiene to create a `struct` with conflicting field names.\n+macro duplicate_field_name_test($x:ident) {\n+    #[derive(PartialEq, Eq)]\n+    pub struct Bar {\n+        $x: u8,\n+        x: u16,\n+    }\n+    pub struct Bar_<const B: Bar>;\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_RMs9_Csno73SFvQKx_1cINtB3_4Bar_KVNtB3_3BarS1xh7b_s_1xt1000_EE)\n+    //~| ERROR demangling(<c[464da6a86cb672f]::Bar_<{c[464da6a86cb672f]::Bar { x: 123u8, x: 4096u16 }}>>)\n+    //~| ERROR demangling-alt(<c::Bar_<{c::Bar { x: 123, x: 4096 }}>>)\n+    impl Bar_<{Bar { $x: 123, x: 4096 }}> {}\n+}\n+duplicate_field_name_test!(x);\n+\n+fn main() {}"}, {"sha": "b3c5bd2b89d307ac2d4d6fa7a7881ccb9a33ed8e", "filename": "src/test/ui/symbol-names/const-generics-structural-demangling.stderr", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/b4fcf1b1dc3d0533a7fa554482e99366f532056b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4fcf1b1dc3d0533a7fa554482e99366f532056b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr?ref=b4fcf1b1dc3d0533a7fa554482e99366f532056b", "patch": "@@ -0,0 +1,161 @@\n+error: symbol-name(_RMCsno73SFvQKx_1cINtB0_7RefByteKRh7b_E)\n+  --> $DIR/const-generics-structural-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::RefByte<{&123u8}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::RefByte<{&123}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:14:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6RefZstKRAEE)\n+  --> $DIR/const-generics-structural-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::RefZst<{&[]}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::RefZst<{&[]}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_11Array3BytesKAh1_h2_h3_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Array3Bytes<{[1u8, 2u8, 3u8]}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Array3Bytes<{[1, 2, 3]}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_13TupleByteBoolKTh1_b0_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:40:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::TupleByteBool<{(1u8, false)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:40:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::TupleByteBool<{(1, false)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:40:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs$HASH_4core6option6OptionjE4NoneUE)\n+  --> $DIR/const-generics-structural-demangling.rs:50:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::OptionUsize<{core[$HASH_HEX]::option::Option::<usize>::None}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:50:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::None}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:50:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs$HASH_4core6option6OptionjE4SomeTj0_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:58:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::OptionUsize<{core[$HASH_HEX]::option::Option::<usize>::Some(0usize)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:58:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::Some(0)}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:58:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs4_Csno73SFvQKx_1cINtB3_4Foo_KVNtB3_3FooS1sRe616263_2chc78_5sliceRAh1_h2_h3_EEE)\n+  --> $DIR/const-generics-structural-demangling.rs:72:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[464da6a86cb672f]::Foo_<{c[464da6a86cb672f]::Foo { s: \"abc\", ch: 'x', slice: &[1u8, 2u8, 3u8] }}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:72:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Foo_<{c::Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:72:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs9_Csno73SFvQKx_1cINtB3_4Bar_KVNtB3_3BarS1xh7b_s_1xt1000_EE)\n+  --> $DIR/const-generics-structural-demangling.rs:88:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | duplicate_field_name_test!(x);\n+   | ------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: demangling(<c[464da6a86cb672f]::Bar_<{c[464da6a86cb672f]::Bar { x: 123u8, x: 4096u16 }}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:88:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | duplicate_field_name_test!(x);\n+   | ------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: demangling-alt(<c::Bar_<{c::Bar { x: 123, x: 4096 }}>>)\n+  --> $DIR/const-generics-structural-demangling.rs:88:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | duplicate_field_name_test!(x);\n+   | ------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 24 previous errors\n+"}]}