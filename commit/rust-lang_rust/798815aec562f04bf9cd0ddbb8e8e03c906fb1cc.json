{"sha": "798815aec562f04bf9cd0ddbb8e8e03c906fb1cc", "node_id": "C_kwDOAAsO6NoAKDc5ODgxNWFlYzU2MmYwNGJmOWNkMGRkYmI4ZThlMDNjOTA2ZmIxY2M", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-11-12T16:25:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-12T16:25:00Z"}, "message": "Rollup merge of #104110 - krasimirgg:msan-16, r=nagisa\n\nprevent uninitialized access in black_box for zero-sized-types\n\nDon't read the pointer location in black_box for zero sized types, just emit a memory clobber instead. Addresses  https://github.com/rust-lang/rust/issues/103304 when rust is build against LLVM at HEAD.\n\nZulip thread: https://rust-lang.zulipchat.com/#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/.28with.20llvm.20at.20HEAD.29.3A.20msan.20error.20in.20core.3A.3Ahint.3A.3Ablack_box", "tree": {"sha": "fc8a80e0b58977246cb21d404bd2d905ccbf0f4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc8a80e0b58977246cb21d404bd2d905ccbf0f4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjb8jcCRBK7hj4Ov3rIwAAKX0IAE3ENP6+FzqYWIqmZAdPjAxT\n8rptvHTdzNAjqOZB4MGt/mpSjtGGvogU33BgGWERhK7eEQb1qAwEfqMMzSyEUC6v\npAPjUkdqXuHvpe7qKAnVokA54iUjP/qSQxZPxs2T1/2Q4Sa6O0buCriXCcP1+hN/\n6RsC6AzgQoqR8iu3Uxubn0PBjjBmc6LEA1SAaFEgq7N0rEBfWAOYiK9pgoZbo5Ra\ncTrGKqFfWQZp9gImljEaFFiFJSX1Pd0iB69Fk3R1r/L+IqLSr6yKpwwMKathmaV6\nhzq4qvERRTUQYNhSvZjXXZhhV5PWTxXLZNCri3PbGbFy/oh2+RIkAtWn//CK4Ss=\n=mqdR\n-----END PGP SIGNATURE-----\n", "payload": "tree fc8a80e0b58977246cb21d404bd2d905ccbf0f4d\nparent aa05f99001924004757ebd44b54bb6a4dd30c8bd\nparent 0e0bcd95cda4293915ecd68921320a0928cdd0bb\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1668270300 +0100\ncommitter GitHub <noreply@github.com> 1668270300 +0100\n\nRollup merge of #104110 - krasimirgg:msan-16, r=nagisa\n\nprevent uninitialized access in black_box for zero-sized-types\n\nDon't read the pointer location in black_box for zero sized types, just emit a memory clobber instead. Addresses  https://github.com/rust-lang/rust/issues/103304 when rust is build against LLVM at HEAD.\n\nZulip thread: https://rust-lang.zulipchat.com/#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/.28with.20llvm.20at.20HEAD.29.3A.20msan.20error.20in.20core.3A.3Ahint.3A.3Ablack_box\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc", "html_url": "https://github.com/rust-lang/rust/commit/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa05f99001924004757ebd44b54bb6a4dd30c8bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa05f99001924004757ebd44b54bb6a4dd30c8bd", "html_url": "https://github.com/rust-lang/rust/commit/aa05f99001924004757ebd44b54bb6a4dd30c8bd"}, {"sha": "0e0bcd95cda4293915ecd68921320a0928cdd0bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0bcd95cda4293915ecd68921320a0928cdd0bb", "html_url": "https://github.com/rust-lang/rust/commit/0e0bcd95cda4293915ecd68921320a0928cdd0bb"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "cf590a43826e53407aab00b691ad66fe0744a3cd", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=798815aec562f04bf9cd0ddbb8e8e03c906fb1cc", "patch": "@@ -340,17 +340,26 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n \n             sym::black_box => {\n                 args[0].val.store(self, result);\n-\n+                let result_val_span = [result.llval];\n                 // We need to \"use\" the argument in some way LLVM can't introspect, and on\n                 // targets that support it we can typically leverage inline assembly to do\n                 // this. LLVM's interpretation of inline assembly is that it's, well, a black\n                 // box. This isn't the greatest implementation since it probably deoptimizes\n                 // more than we want, but it's so far good enough.\n+                //\n+                // For zero-sized types, the location pointed to by the result may be\n+                // uninitialized. Do not \"use\" the result in this case; instead just clobber\n+                // the memory.\n+                let (constraint, inputs): (&str, &[_]) = if result.layout.is_zst() {\n+                    (\"~{memory}\", &[])\n+                } else {\n+                    (\"r,~{memory}\", &result_val_span)\n+                };\n                 crate::asm::inline_asm_call(\n                     self,\n                     \"\",\n-                    \"r,~{memory}\",\n-                    &[result.llval],\n+                    constraint,\n+                    inputs,\n                     self.type_void(),\n                     true,\n                     false,"}, {"sha": "6d9b70ad6b1c2c45ab759ab49eec3cb4b05361c0", "filename": "src/test/ui/sanitize/memory-passing.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs?ref=798815aec562f04bf9cd0ddbb8e8e03c906fb1cc", "patch": "@@ -0,0 +1,32 @@\n+// needs-sanitizer-support\n+// needs-sanitizer-memory\n+//\n+// revisions: unoptimized optimized\n+//\n+// [optimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// [unoptimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins\n+//\n+// run-pass\n+//\n+// This test case intentionally limits the usage of the std,\n+// since it will be linked with an uninstrumented version of it.\n+\n+#![feature(core_intrinsics)]\n+#![feature(start)]\n+#![allow(invalid_value)]\n+\n+use std::hint::black_box;\n+\n+fn calling_black_box_on_zst_ok() {\n+    // It's OK to call black_box on a value of a zero-sized type, even if its\n+    // underlying the memory location is uninitialized. For non-zero-sized types,\n+    // this would be an MSAN error.\n+    let zst = ();\n+    black_box(zst);\n+}\n+\n+#[start]\n+fn main(_: isize, _: *const *const u8) -> isize {\n+    calling_black_box_on_zst_ok();\n+    0\n+}"}]}