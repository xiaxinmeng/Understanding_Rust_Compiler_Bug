{"sha": "1b60286103affa47bc28b2c505c78a0b5d16e4dc", "node_id": "C_kwDOAAsO6NoAKDFiNjAyODYxMDNhZmZhNDdiYzI4YjJjNTA1Yzc4YTBiNWQxNmU0ZGM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-10-16T19:22:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-10-18T15:44:33Z"}, "message": "Implement constraits modifiers", "tree": {"sha": "a07099df8d672cedcbffe1102270dcc9440fdf1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a07099df8d672cedcbffe1102270dcc9440fdf1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b60286103affa47bc28b2c505c78a0b5d16e4dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b60286103affa47bc28b2c505c78a0b5d16e4dc", "html_url": "https://github.com/rust-lang/rust/commit/1b60286103affa47bc28b2c505c78a0b5d16e4dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b60286103affa47bc28b2c505c78a0b5d16e4dc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "549fbe8ecb00543463e0c750bbfa32b61d206167", "url": "https://api.github.com/repos/rust-lang/rust/commits/549fbe8ecb00543463e0c750bbfa32b61d206167", "html_url": "https://github.com/rust-lang/rust/commit/549fbe8ecb00543463e0c750bbfa32b61d206167"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "486c7a3f5cb7761b352aa396ccadccc2de1f191e", "filename": "src/asm.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1b60286103affa47bc28b2c505c78a0b5d16e4dc/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b60286103affa47bc28b2c505c78a0b5d16e4dc/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=1b60286103affa47bc28b2c505c78a0b5d16e4dc", "patch": "@@ -768,34 +768,41 @@ impl<'gcc, 'tcx> AsmMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n }\n \n fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option<char>) -> Option<char> {\n+    // The modifiers can be retrieved from\n+    // https://gcc.gnu.org/onlinedocs/gcc/Modifiers.html#Modifiers\n     match reg {\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::reg) => modifier,\n-        InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => modifier,\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg)\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n-            unimplemented!()\n+            if modifier == Some('v') { None } else { modifier }\n+        }\n+        InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n+            unreachable!(\"clobber-only\")\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)  => unimplemented!(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => unimplemented!(),\n+        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low8) => unimplemented!(),\n+        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low8) => Some('P'),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => {\n-            unimplemented!()\n+            if modifier.is_none() {\n+                Some('q')\n+            } else {\n+                modifier\n+            }\n         }\n-        InlineAsmRegClass::Avr(_) => unimplemented!(),\n-        InlineAsmRegClass::Bpf(_) => unimplemented!(),\n-        InlineAsmRegClass::Hexagon(_) => unimplemented!(),\n-        InlineAsmRegClass::Mips(_) => unimplemented!(),\n-        InlineAsmRegClass::Msp430(_) => unimplemented!(),\n-        InlineAsmRegClass::Nvptx(_) => unimplemented!(),\n-        InlineAsmRegClass::PowerPC(_) => unimplemented!(),\n+        InlineAsmRegClass::Hexagon(_) => None,\n+        InlineAsmRegClass::Mips(_) => None,\n+        InlineAsmRegClass::Nvptx(_) => None,\n+        InlineAsmRegClass::PowerPC(_) => None,\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => unimplemented!(),\n-        InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => unimplemented!(),\n+        | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => None,\n+        InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd) => match modifier {\n             None => if arch == InlineAsmArch::X86_64 { Some('q') } else { Some('k') },\n@@ -819,16 +826,29 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n             _ => unreachable!(),\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n-        InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => None,\n-        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::tmm_reg) => {\n+        InlineAsmRegClass::X86(\n+            X86InlineAsmRegClass::x87_reg\n+            | X86InlineAsmRegClass::mmx_reg\n+            | X86InlineAsmRegClass::kreg0\n+            | X86InlineAsmRegClass::tmm_reg,\n+        ) => {\n             unreachable!(\"clobber-only\")\n         }\n-        InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),\n+        InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n+        InlineAsmRegClass::Bpf(_) => None,\n+        InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_pair)\n+        | InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_iw)\n+        | InlineAsmRegClass::Avr(AvrInlineAsmRegClass::reg_ptr) => match modifier {\n+            Some('h') => Some('B'),\n+            Some('l') => Some('A'),\n+            _ => None,\n+        },\n+        InlineAsmRegClass::Avr(_) => None,\n+        InlineAsmRegClass::S390x(_) => None,\n+        InlineAsmRegClass::Msp430(_) => None,\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n-        },\n-        InlineAsmRegClass::S390x(S390xInlineAsmRegClass::reg) => unimplemented!(),\n-        InlineAsmRegClass::S390x(S390xInlineAsmRegClass::freg) => unimplemented!(),\n+        }\n         InlineAsmRegClass::Err => unreachable!(),\n     }\n }"}]}