{"sha": "fae516277b6da46b6c1cf568765c90fad2f9ae4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTUxNjI3N2I2ZGE0NmI2YzFjZjU2ODc2NWM5MGZhZDJmOWFlNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-13T23:37:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-13T23:37:10Z"}, "message": "Auto merge of #31643 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #31535, #31537, #31542, #31559, #31563, #31582, #31584, #31585, #31589, #31607, #31609, #31610, #31612, #31629, #31635, #31637, #31638\n- Failed merges:", "tree": {"sha": "eeac556e235e8f655e78c9613ad3da4deef0071d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeac556e235e8f655e78c9613ad3da4deef0071d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae516277b6da46b6c1cf568765c90fad2f9ae4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae516277b6da46b6c1cf568765c90fad2f9ae4b", "html_url": "https://github.com/rust-lang/rust/commit/fae516277b6da46b6c1cf568765c90fad2f9ae4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae516277b6da46b6c1cf568765c90fad2f9ae4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e446532e835ed3c934eec5a98bb795c0ffd4e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e446532e835ed3c934eec5a98bb795c0ffd4e50", "html_url": "https://github.com/rust-lang/rust/commit/6e446532e835ed3c934eec5a98bb795c0ffd4e50"}, {"sha": "b34e625faf5e195b900f92db1ac64b4d19e9b1c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34e625faf5e195b900f92db1ac64b4d19e9b1c3", "html_url": "https://github.com/rust-lang/rust/commit/b34e625faf5e195b900f92db1ac64b4d19e9b1c3"}], "stats": {"total": 133, "additions": 104, "deletions": 29}, "files": [{"sha": "5f1778376ebf46765b126b610aca624c89ba869a", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -17,6 +17,7 @@\n *.elc\n *.epub\n *.exe\n+*.pdb\n *.fn\n *.html\n *.kdev4"}, {"sha": "0609f365de40839bc231303d84b75f5d87c6cd66", "filename": "mk/cfg/i586-unknown-linux-gnu.mk", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -0,0 +1,23 @@\n+# i586-unknown-linux-gnu configuration\n+CC_i586-unknown-linux-gnu=$(CC)\n+CXX_i586-unknown-linux-gnu=$(CXX)\n+CPP_i586-unknown-linux-gnu=$(CPP)\n+AR_i586-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_i586-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_i586-unknown-linux-gnu=lib$(1).a\n+CFG_LIB_GLOB_i586-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_i586-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_i586-unknown-linux-gnu := -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_i586-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_i586-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n+CFG_GCCISH_DEF_FLAG_i586-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_i586-unknown-linux-gnu :=\n+CFG_INSTALL_NAME_i586-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_i586-unknown-linux-gnu =\n+CFG_WINDOWSY_i586-unknown-linux-gnu :=\n+CFG_UNIXY_i586-unknown-linux-gnu := 1\n+CFG_LDPATH_i586-unknown-linux-gnu :=\n+CFG_RUN_i586-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_i586-unknown-linux-gnu=$(call CFG_RUN_i586-unknown-linux-gnu,,$(2))\n+CFG_GNU_TRIPLE_i586-unknown-linux-gnu := i586-unknown-linux-gnu"}, {"sha": "752c097210243e8d0d7d24349f21960842947959", "filename": "src/doc/book/concurrency.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Fdoc%2Fbook%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Fdoc%2Fbook%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fconcurrency.md?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -286,6 +286,8 @@ use std::sync::mpsc;\n fn main() {\n     let data = Arc::new(Mutex::new(0));\n \n+    // `tx` is the \"transmitter\" or \"sender\"\n+    // `rx` is the \"receiver\"\n     let (tx, rx) = mpsc::channel();\n \n     for _ in 0..10 {"}, {"sha": "8d1e58ac17397559b8a534c25c164b31dbf8f34f", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -319,23 +319,23 @@ our source code:\n ```text\n     First, we set `x` to five:\n \n-    ```text\n+    ```rust\n     let x = 5;\n     # let y = 6;\n     # println!(\"{}\", x + y);\n     ```\n \n     Next, we set `y` to six:\n \n-    ```text\n+    ```rust\n     # let x = 5;\n     let y = 6;\n     # println!(\"{}\", x + y);\n     ```\n \n     Finally, we print the sum of `x` and `y`:\n \n-    ```text\n+    ```rust\n     # let x = 5;\n     # let y = 6;\n     println!(\"{}\", x + y);"}, {"sha": "175960f67b6930700d740a721f5775d81ff97a1d", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -51,10 +51,11 @@ fn foo() {\n }\n ```\n \n-When `v` comes into scope, a new [vector] is created, and it allocates space on\n-[the heap][heap] for each of its elements. When `v` goes out of scope at the\n-end of `foo()`, Rust will clean up everything related to the vector, even the\n-heap-allocated memory. This happens deterministically, at the end of the scope.\n+When `v` comes into scope, a new [vector] is created on [the stack][stack],\n+and it allocates space on [the heap][heap] for its elements. When `v` goes out\n+of scope at the end of `foo()`, Rust will clean up everything related to the\n+vector, even the heap-allocated memory. This happens deterministically, at the\n+end of the scope.\n \n We'll cover [vectors] in detail later in this chapter; we only use them\n here as an example of a type that allocates space on the heap at runtime. They\n@@ -67,6 +68,7 @@ Vectors have a [generic type][generics] `Vec<T>`, so in this example `v` will ha\n [arrays]: primitive-types.html#arrays\n [vectors]: vectors.html\n [heap]: the-stack-and-the-heap.html\n+[stack]: the-stack-and-the-heap.html#the-stack\n [bindings]: variable-bindings.html\n [generics]: generics.html\n "}, {"sha": "2c7a097fe8045c4fc2f813b4d04e3caadd6b9329", "filename": "src/doc/book/using-rust-without-the-standard-library.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -11,7 +11,7 @@ don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n > For details on binaries without the standard library, see [the nightly\n > chapter on `#![no_std]`](no-stdlib.html)\n \n-To use `#![no_std]`, add a it to your crate root:\n+To use `#![no_std]`, add it to your crate root:\n \n ```rust\n #![no_std]"}, {"sha": "32158ea549627c94fadc8d71f3889ca8e8cc6e9f", "filename": "src/doc/uptack.tex", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e446532e835ed3c934eec5a98bb795c0ffd4e50/src%2Fdoc%2Fuptack.tex", "raw_url": "https://github.com/rust-lang/rust/raw/6e446532e835ed3c934eec5a98bb795c0ffd4e50/src%2Fdoc%2Fuptack.tex", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fuptack.tex?ref=6e446532e835ed3c934eec5a98bb795c0ffd4e50", "patch": "@@ -1,2 +0,0 @@\n-\\usepackage{newunicodechar}\n-\\newunicodechar\u22a5{{$\\bot$}}"}, {"sha": "1bc9e6588adb39835cab4df74320d1669194417a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -528,7 +528,7 @@ impl<T> Vec<T> {\n     }\n \n     /// Inserts an element at position `index` within the vector, shifting all\n-    /// elements after position `i` one position to the right.\n+    /// elements after it to the right.\n     ///\n     /// # Panics\n     ///\n@@ -570,7 +570,7 @@ impl<T> Vec<T> {\n     }\n \n     /// Removes and returns the element at position `index` within the vector,\n-    /// shifting all elements after position `index` one position to the left.\n+    /// shifting all elements after it to the left.\n     ///\n     /// # Panics\n     ///"}, {"sha": "d094f05374b78e5ea02d55aa4c944fbbbf4d7be9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -741,6 +741,13 @@ macro_rules! int_impl {\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n         ///\n+        /// Note that this is *not* the same as a rotate-left; the\n+        /// RHS of a wrapping shift-left is restricted to the range\n+        /// of the type, rather than the bits shifted out of the LHS\n+        /// being returned to the other end. The primitive integer\n+        /// types all implement a `rotate_left` function, which may\n+        /// be what you want instead.\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -759,6 +766,13 @@ macro_rules! int_impl {\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n         ///\n+        /// Note that this is *not* the same as a rotate-right; the\n+        /// RHS of a wrapping shift-right is restricted to the range\n+        /// of the type, rather than the bits shifted out of the LHS\n+        /// being returned to the other end. The primitive integer\n+        /// types all implement a `rotate_right` function, which may\n+        /// be what you want instead.\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:"}, {"sha": "42d5674a2c86911a00c172b4361fbbed57d518a5", "filename": "src/librustc_back/target/i586_unknown_linux_gnu.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.cpu = \"pentium\".to_string();\n+    base.pre_link_args.push(\"-m32\".to_string());\n+\n+    Target {\n+        llvm_target: \"i586-unknown-linux-gnu\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "a868178b14fb9d8aabcc8b2dc737926ef5a95133", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -89,6 +89,7 @@ macro_rules! supported_targets {\n supported_targets! {\n     (\"x86_64-unknown-linux-gnu\", x86_64_unknown_linux_gnu),\n     (\"i686-unknown-linux-gnu\", i686_unknown_linux_gnu),\n+    (\"i586-unknown-linux-gnu\", i586_unknown_linux_gnu),\n     (\"mips-unknown-linux-gnu\", mips_unknown_linux_gnu),\n     (\"mipsel-unknown-linux-gnu\", mipsel_unknown_linux_gnu),\n     (\"powerpc-unknown-linux-gnu\", powerpc_unknown_linux_gnu),"}, {"sha": "8cabdc41a0583324bb700ff8f79a88d78a78c5d9", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -45,7 +45,7 @@ pub trait AsciiExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Owned;\n \n-    /// Checks if within the ASCII range.\n+    /// Checks if the value is within the ASCII range.\n     ///\n     /// # Examples\n     ///\n@@ -55,8 +55,8 @@ pub trait AsciiExt {\n     /// let ascii = 'a';\n     /// let utf8 = '\u2764';\n     ///\n-    /// assert_eq!(true, ascii.is_ascii());\n-    /// assert_eq!(false, utf8.is_ascii())\n+    /// assert!(ascii.is_ascii());\n+    /// assert!(!utf8.is_ascii());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn is_ascii(&self) -> bool;\n@@ -114,9 +114,9 @@ pub trait AsciiExt {\n     /// let ascii3 = 'A';\n     /// let ascii4 = 'z';\n     ///\n-    /// assert_eq!(true, ascii1.eq_ignore_ascii_case(&ascii2));\n-    /// assert_eq!(true, ascii1.eq_ignore_ascii_case(&ascii3));\n-    /// assert_eq!(false, ascii1.eq_ignore_ascii_case(&ascii4));\n+    /// assert!(ascii1.eq_ignore_ascii_case(&ascii2));\n+    /// assert!(ascii1.eq_ignore_ascii_case(&ascii3));\n+    /// assert!(!ascii1.eq_ignore_ascii_case(&ascii4));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn eq_ignore_ascii_case(&self, other: &Self) -> bool;"}, {"sha": "d241cd032ed4c07872f56a632077a59fabd93d4a", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -269,9 +269,10 @@ pub mod builtin {\n     /// This macro takes any number of comma-separated identifiers, and\n     /// concatenates them all into one, yielding an expression which is a new\n     /// identifier. Note that hygiene makes it such that this macro cannot\n-    /// capture local variables, and macros are only allowed in item,\n-    /// statement or expression position, meaning this macro may be difficult to\n-    /// use in some situations.\n+    /// capture local variables. Also, as a general rule, macros are only\n+    /// allowed in item, statement or expression position. That means while\n+    /// you may use this macro for referring to existing variables, functions or\n+    /// modules etc, you cannot define a new one with it.\n     ///\n     /// # Examples\n     ///\n@@ -283,6 +284,8 @@ pub mod builtin {\n     ///\n     /// let f = concat_idents!(foo, bar);\n     /// println!(\"{}\", f());\n+    ///\n+    /// // fn concat_idents!(new, fun, name) { } // not usable in this way!\n     /// # }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ebd299efa78db9ca89206ec41af9885f921b861a", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -55,7 +55,7 @@\n //! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`]}. The marker\n //!   traits indicate fundamental properties of types.\n //! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}. Various\n-//!   operations for both destuctors and overloading `()`.\n+//!   operations for both destructors and overloading `()`.\n //! * [`std::mem`]::[`drop`], a convenience function for explicitly dropping a\n //!   value.\n //! * [`std::boxed`]::[`Box`], a way to allocate values on the heap."}, {"sha": "d858c0027558ced777dcfddd0fbe84e9ff5a7801", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -111,7 +111,7 @@ impl<T> fmt::Display for PoisonError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send + Reflect> Error for PoisonError<T> {\n+impl<T: Reflect> Error for PoisonError<T> {\n     fn description(&self) -> &str {\n         \"poisoned lock: another task failed inside\"\n     }\n@@ -158,14 +158,17 @@ impl<T> fmt::Debug for TryLockError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send + Reflect> fmt::Display for TryLockError<T> {\n+impl<T> fmt::Display for TryLockError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.description().fmt(f)\n+        match *self {\n+            TryLockError::Poisoned(..) => \"poisoned lock: another task failed inside\",\n+            TryLockError::WouldBlock => \"try_lock failed because the operation would block\"\n+        }.fmt(f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send + Reflect> Error for TryLockError<T> {\n+impl<T: Reflect> Error for TryLockError<T> {\n     fn description(&self) -> &str {\n         match *self {\n             TryLockError::Poisoned(ref p) => p.description(),"}, {"sha": "c7f8a56135d298c8a1372c6054cd10661f9d1618", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -341,7 +341,7 @@ impl MultiSpan {\n         for idx in 0.. {\n             if let Some(sp_trim) = sp.trim_start(prev) {\n                 // Implies `sp.hi > prev.hi`\n-                let cur = match self.spans.as_slice().get(idx) {\n+                let cur = match self.spans.get(idx) {\n                     Some(s) => *s,\n                     None => {\n                         sp = sp_trim;"}, {"sha": "9543fad8e533b55649e17c1c0158ec69e1199680", "filename": "src/test/run-make/codegen-options-parsing/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fae516277b6da46b6c1cf568765c90fad2f9ae4b/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile?ref=fae516277b6da46b6c1cf568765c90fad2f9ae4b", "patch": "@@ -25,7 +25,7 @@ all:\n \n \t# Should not link dead code...\n \t$(RUSTC) -Z print-link-args dummy.rs 2>&1 | \\\n-\t\tgrep -e '--gc-sections\\|-dead_strip\\|/OPT:REF,ICF'\n+\t\tgrep -e '--gc-sections' -e '-dead_strip' -e '/OPT:REF,ICF'\n \t# ... unless you specifically ask to keep it\n \t$(RUSTC) -Z print-link-args -C link-dead-code dummy.rs 2>&1 | \\\n-\t\t(! grep -e '--gc-sections\\|-dead_strip\\|/OPT:REF,ICF')\n+\t\t(! grep -e '--gc-sections' -e '-dead_strip' -e '/OPT:REF,ICF')"}]}