{"sha": "59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Y2NiN2I2ZGJhZjNhNTkwY2YzYTIzNDY2MWFhN2RjYzIxODhhZWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-24T18:10:19Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:35Z"}, "message": "Support deriving some traits for unions", "tree": {"sha": "5df2908d7ef4fe47de984b612ab9cd62d50ac02e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df2908d7ef4fe47de984b612ab9cd62d50ac02e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "html_url": "https://github.com/rust-lang/rust/commit/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "079c390d5089735b5eaa8b06ddb3beedcddbee7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/079c390d5089735b5eaa8b06ddb3beedcddbee7d", "html_url": "https://github.com/rust-lang/rust/commit/079c390d5089735b5eaa8b06ddb3beedcddbee7d"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "b37d53329839957b418b7dce11971792c73627f3", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "patch": "@@ -410,9 +410,18 @@ impl<'a> TraitDef<'a> {\n                     ast::ItemKind::Enum(ref enum_def, ref generics) => {\n                         self.expand_enum_def(cx, enum_def, &item.attrs, item.ident, generics)\n                     }\n+                    ast::ItemKind::Union(ref struct_def, ref generics) => {\n+                        if self.supports_unions {\n+                            self.expand_struct_def(cx, &struct_def, item.ident, generics)\n+                        } else {\n+                            cx.span_err(mitem.span,\n+                                        \"this trait cannot be derived for unions\");\n+                            return;\n+                        }\n+                    }\n                     _ => {\n                         cx.span_err(mitem.span,\n-                                    \"`derive` may only be applied to structs and enums\");\n+                                    \"`derive` may only be applied to structs, enums and unions\");\n                         return;\n                     }\n                 };"}, {"sha": "0f78e96f640c75b8c44b32dd28cdf6172372622b", "filename": "src/test/compile-fail/union-derive.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed/src%2Ftest%2Fcompile-fail%2Funion-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed/src%2Ftest%2Fcompile-fail%2Funion-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-derive.rs?ref=59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Most traits cannot be derived for unions.\n+\n+#![feature(untagged_unions)]\n+\n+#[derive(\n+    Clone, //~ ERROR this trait cannot be derived for unions\n+    PartialEq, //~ ERROR this trait cannot be derived for unions\n+    Eq, //~ ERROR this trait cannot be derived for unions\n+    PartialOrd, //~ ERROR this trait cannot be derived for unions\n+    Ord, //~ ERROR this trait cannot be derived for unions\n+    Hash, //~ ERROR this trait cannot be derived for unions\n+    Default, //~ ERROR this trait cannot be derived for unions\n+    Debug, //~ ERROR this trait cannot be derived for unions\n+)]\n+union U {\n+    a: u8,\n+    b: u16,\n+}\n+\n+fn main() {}"}, {"sha": "b71c23990a474ba3d618c08786c70a55dd5180bc", "filename": "src/test/run-pass/union-derive.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed/src%2Ftest%2Frun-pass%2Funion-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed/src%2Ftest%2Frun-pass%2Funion-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-derive.rs?ref=59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Some traits can be derived for unions.\n+\n+#![feature(untagged_unions)]\n+\n+#[derive(\n+    Copy,\n+)]\n+union U {\n+    a: u8,\n+    b: u16,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self { *self }\n+}\n+\n+fn main() {\n+    let u = U { b: 0 };\n+    let u1 = u;\n+    let u2 = u.clone();\n+}"}]}