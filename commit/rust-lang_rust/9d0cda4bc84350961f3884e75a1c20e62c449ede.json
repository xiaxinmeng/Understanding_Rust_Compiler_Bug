{"sha": "9d0cda4bc84350961f3884e75a1c20e62c449ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMGNkYTRiYzg0MzUwOTYxZjM4ODRlNzVhMWMyMGU2MmM0NDllZGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-20T12:03:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-20T12:03:31Z"}, "message": "slightly better name", "tree": {"sha": "729e693ca2f457f60162effbb94639da5103e4a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/729e693ca2f457f60162effbb94639da5103e4a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d0cda4bc84350961f3884e75a1c20e62c449ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0cda4bc84350961f3884e75a1c20e62c449ede", "html_url": "https://github.com/rust-lang/rust/commit/9d0cda4bc84350961f3884e75a1c20e62c449ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d0cda4bc84350961f3884e75a1c20e62c449ede/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6efe62c573c98bd0ea9eb137b4c8a5838f5a4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6efe62c573c98bd0ea9eb137b4c8a5838f5a4a", "html_url": "https://github.com/rust-lang/rust/commit/df6efe62c573c98bd0ea9eb137b4c8a5838f5a4a"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "d5a4f4d7b94bab8abaee0c485aab46dcad7817c9", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d0cda4bc84350961f3884e75a1c20e62c449ede/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0cda4bc84350961f3884e75a1c20e62c449ede/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=9d0cda4bc84350961f3884e75a1c20e62c449ede", "patch": "@@ -138,15 +138,15 @@ enum Op {\n }\n \n fn current_op(p: &Parser) -> (u8, Op) {\n-    if let Some(t) = p.next3() {\n+    if let Some(t) = p.current3() {\n         match t {\n             (L_ANGLE, L_ANGLE, EQ) => return (1, Op::Composite(SHLEQ, 3)),\n             (R_ANGLE, R_ANGLE, EQ) => return (1, Op::Composite(SHREQ, 3)),\n             _ => (),\n         }\n     }\n \n-    if let Some(t) = p.next2() {\n+    if let Some(t) = p.current2() {\n         match t {\n             (PLUS, EQ) => return (1, Op::Composite(PLUSEQ, 2)),\n             (MINUS, EQ) => return (1, Op::Composite(MINUSEQ, 2)),"}, {"sha": "dc556190d8b663f6870fd2fb18a2b470293bac52", "filename": "crates/ra_syntax/src/parser_api.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d0cda4bc84350961f3884e75a1c20e62c449ede/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0cda4bc84350961f3884e75a1c20e62c449ede/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs?ref=9d0cda4bc84350961f3884e75a1c20e62c449ede", "patch": "@@ -25,6 +25,22 @@ impl<'t> Parser<'t> {\n         self.nth(0)\n     }\n \n+    /// Returns the kinds of the current two tokens, if they are not separated\n+    /// by trivia.\n+    ///\n+    /// Useful for parsing things like `>>`.\n+    pub(crate) fn current2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n+        self.0.current2()\n+    }\n+\n+    /// Returns the kinds of the current three tokens, if they are not separated\n+    /// by trivia.\n+    ///\n+    /// Useful for parsing things like `=>>`.\n+    pub(crate) fn current3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n+        self.0.current3()\n+    }\n+\n     /// Lookahead operation: returns the kind of the next nth\n     /// token.\n     pub(crate) fn nth(&self, n: u32) -> SyntaxKind {\n@@ -41,14 +57,6 @@ impl<'t> Parser<'t> {\n         kinds.contains(self.current())\n     }\n \n-    pub(crate) fn next2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n-        self.0.next2()\n-    }\n-\n-    pub(crate) fn next3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n-        self.0.next3()\n-    }\n-\n     /// Checks if the current token is contextual keyword with text `t`.\n     pub(crate) fn at_contextual_kw(&self, t: &str) -> bool {\n         self.0.at_kw(t)"}, {"sha": "01d156899f42579ffde5f01a8b3b8d5ff007ebec", "filename": "crates/ra_syntax/src/parser_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d0cda4bc84350961f3884e75a1c20e62c449ede/crates%2Fra_syntax%2Fsrc%2Fparser_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0cda4bc84350961f3884e75a1c20e62c449ede/crates%2Fra_syntax%2Fsrc%2Fparser_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_impl.rs?ref=9d0cda4bc84350961f3884e75a1c20e62c449ede", "patch": "@@ -82,7 +82,7 @@ impl<'t> ParserImpl<'t> {\n         self.events\n     }\n \n-    pub(super) fn next2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n+    pub(super) fn current2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n         let c1 = self.parser_input.kind(self.pos);\n         let c2 = self.parser_input.kind(self.pos + 1);\n         if self.parser_input.token_start_at(self.pos + 1)\n@@ -94,7 +94,7 @@ impl<'t> ParserImpl<'t> {\n         }\n     }\n \n-    pub(super) fn next3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n+    pub(super) fn current3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n         let c1 = self.parser_input.kind(self.pos);\n         let c2 = self.parser_input.kind(self.pos + 1);\n         let c3 = self.parser_input.kind(self.pos + 2);"}]}