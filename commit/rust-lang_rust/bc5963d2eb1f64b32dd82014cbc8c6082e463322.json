{"sha": "bc5963d2eb1f64b32dd82014cbc8c6082e463322", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNTk2M2QyZWIxZjY0YjMyZGQ4MjAxNGNiYzhjNjA4MmU0NjMzMjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T18:19:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-31T18:19:34Z"}, "message": "Rollup merge of #67702 - crlf0710:normalize_ident2, r=petrochenkov\n\nAdd symbol normalization for proc_macro_server.\n\nFollow up for #66670, finishing the first bullet point in #55467.\n\nr? @petrochenkov", "tree": {"sha": "3efbea6c6a4c9297f7293405c05f9dc3790d1e01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3efbea6c6a4c9297f7293405c05f9dc3790d1e01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc5963d2eb1f64b32dd82014cbc8c6082e463322", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeC5E3CRBK7hj4Ov3rIwAAdHIIADprwVm//VKnXUvziA+O+QPS\nWJPTJdNgF+JnQx7dob2shKqEZvkgSERAKifSwCkd27qjIhXaRlGrgLKI8fETW1Bp\nqcyZy4N76VtlMixfVuRgL8P9F/+4N/NAi+9CqE4jbSp2XCNaNX6xMy27triHTxdx\nFAZHcrlI8JZlhPIl21TH8ZFgWm63HJkoab1tyyZLywSX8ajHYhw2WV3RnFyGu8F/\n+VqBjDfBc4GR63XtgGWdF2967g8L0A/Lf3gdfecKo1a+xFhjeX7tHwnqh7+VEvq/\n95DGaa7ZhjmfBimO7rWWUf+ne9YB64x1wIqpsApnS3zHzxw3/r2tC+qPCgC7pak=\n=Py7r\n-----END PGP SIGNATURE-----\n", "payload": "tree 3efbea6c6a4c9297f7293405c05f9dc3790d1e01\nparent 89fbed98c260fa30bf54138b3c8677f3d17845e2\nparent 8f84d9e1de91261682d5e4ef8f046c9491802dee\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1577816374 +0100\ncommitter GitHub <noreply@github.com> 1577816374 +0100\n\nRollup merge of #67702 - crlf0710:normalize_ident2, r=petrochenkov\n\nAdd symbol normalization for proc_macro_server.\n\nFollow up for #66670, finishing the first bullet point in #55467.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5963d2eb1f64b32dd82014cbc8c6082e463322", "html_url": "https://github.com/rust-lang/rust/commit/bc5963d2eb1f64b32dd82014cbc8c6082e463322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc5963d2eb1f64b32dd82014cbc8c6082e463322/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89fbed98c260fa30bf54138b3c8677f3d17845e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/89fbed98c260fa30bf54138b3c8677f3d17845e2", "html_url": "https://github.com/rust-lang/rust/commit/89fbed98c260fa30bf54138b3c8677f3d17845e2"}, {"sha": "8f84d9e1de91261682d5e4ef8f046c9491802dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f84d9e1de91261682d5e4ef8f046c9491802dee", "html_url": "https://github.com/rust-lang/rust/commit/8f84d9e1de91261682d5e4ef8f046c9491802dee"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "b41490011af3faf87ce70bc51a4a1c8e6b3fa04c", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc5963d2eb1f64b32dd82014cbc8c6082e463322/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5963d2eb1f64b32dd82014cbc8c6082e463322/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=bc5963d2eb1f64b32dd82014cbc8c6082e463322", "patch": "@@ -1,5 +1,6 @@\n use crate::base::ExtCtxt;\n \n+use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use syntax::ast;\n use syntax::print::pprust;\n@@ -327,6 +328,7 @@ impl Ident {\n         }\n     }\n     fn new(sym: Symbol, is_raw: bool, span: Span) -> Ident {\n+        let sym = nfc_normalize(&sym.as_str());\n         let string = sym.as_str();\n         if !Self::is_valid(&string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)"}, {"sha": "30ec202e0ffe39eea6de489acf4f0eb68bec2868", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bc5963d2eb1f64b32dd82014cbc8c6082e463322/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5963d2eb1f64b32dd82014cbc8c6082e463322/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=bc5963d2eb1f64b32dd82014cbc8c6082e463322", "patch": "@@ -220,7 +220,7 @@ impl<'a> StringReader<'a> {\n                 if is_raw_ident {\n                     ident_start = ident_start + BytePos(2);\n                 }\n-                let sym = self.nfc_symbol_from(ident_start);\n+                let sym = nfc_normalize(self.str_from(ident_start));\n                 if is_raw_ident {\n                     let span = self.mk_sp(start, self.pos);\n                     if !sym.can_be_raw() {\n@@ -469,20 +469,6 @@ impl<'a> StringReader<'a> {\n         Symbol::intern(self.str_from_to(start, end))\n     }\n \n-    /// As symbol_from, with the text normalized into Unicode NFC form.\n-    fn nfc_symbol_from(&self, start: BytePos) -> Symbol {\n-        use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};\n-        debug!(\"taking an normalized ident from {:?} to {:?}\", start, self.pos);\n-        let sym = self.str_from(start);\n-        match is_nfc_quick(sym.chars()) {\n-            IsNormalized::Yes => Symbol::intern(sym),\n-            _ => {\n-                let sym_str: String = sym.chars().nfc().collect();\n-                Symbol::intern(&sym_str)\n-            }\n-        }\n-    }\n-\n     /// Slice of the source text spanning from `start` up to but excluding `end`.\n     fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {\n         &self.src[self.src_index(start)..self.src_index(end)]\n@@ -651,3 +637,14 @@ impl<'a> StringReader<'a> {\n         }\n     }\n }\n+\n+pub fn nfc_normalize(string: &str) -> Symbol {\n+    use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};\n+    match is_nfc_quick(string.chars()) {\n+        IsNormalized::Yes => Symbol::intern(string),\n+        _ => {\n+            let normalized_str: String = string.chars().nfc().collect();\n+            Symbol::intern(&normalized_str)\n+        }\n+    }\n+}"}]}