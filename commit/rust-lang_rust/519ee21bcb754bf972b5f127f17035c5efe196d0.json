{"sha": "519ee21bcb754bf972b5f127f17035c5efe196d0", "node_id": "C_kwDOAAsO6NoAKDUxOWVlMjFiY2I3NTRiZjk3MmI1ZjEyN2YxNzAzNWM1ZWZlMTk2ZDA", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T12:39:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "internal: move block to prefix entry point", "tree": {"sha": "5aa83cd957e4e41de321d495e262dba94ae97790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aa83cd957e4e41de321d495e262dba94ae97790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/519ee21bcb754bf972b5f127f17035c5efe196d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/519ee21bcb754bf972b5f127f17035c5efe196d0", "html_url": "https://github.com/rust-lang/rust/commit/519ee21bcb754bf972b5f127f17035c5efe196d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/519ee21bcb754bf972b5f127f17035c5efe196d0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "350d5dc152fe268bc33cf8d54e8ceb06531f07a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/350d5dc152fe268bc33cf8d54e8ceb06531f07a4", "html_url": "https://github.com/rust-lang/rust/commit/350d5dc152fe268bc33cf8d54e8ceb06531f07a4"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "621ff791d4f71f7da41291c142723507dfcfd88d", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/519ee21bcb754bf972b5f127f17035c5efe196d0/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ee21bcb754bf972b5f127f17035c5efe196d0/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=519ee21bcb754bf972b5f127f17035c5efe196d0", "patch": "@@ -695,7 +695,11 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n         \"ty\" => ParserEntryPoint::Type,\n         \"pat\" | \"pat_param\" => ParserEntryPoint::Pattern, // FIXME: edition2021\n         \"stmt\" => ParserEntryPoint::Statement,\n-        \"block\" => ParserEntryPoint::Block,\n+        \"block\" => {\n+            return input\n+                .expect_fragment2(parser::PrefixEntryPoint::Block)\n+                .map(|tt| tt.map(Fragment::Tokens));\n+        }\n         \"meta\" => ParserEntryPoint::MetaItem,\n         \"item\" => ParserEntryPoint::Item,\n         _ => {\n@@ -725,7 +729,7 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                         .map_err(|()| err!())\n                 }\n                 // `vis` is optional\n-                \"vis\" => Ok(input.eat_vis()),\n+                \"vis\" => Ok(input.expect_fragment2(parser::PrefixEntryPoint::Vis).value),\n                 _ => Err(ExpandError::UnexpectedToken),\n             };\n             return tt_result.map(|it| it.map(Fragment::Tokens)).into();\n@@ -894,10 +898,6 @@ impl<'a> TtIter<'a> {\n         .into())\n     }\n \n-    fn eat_vis(&mut self) -> Option<tt::TokenTree> {\n-        self.expect_fragment2(parser::PrefixEntryPoint::Vis).value\n-    }\n-\n     fn eat_char(&mut self, c: char) -> Option<tt::TokenTree> {\n         let mut fork = self.clone();\n         match fork.expect_char(c) {"}, {"sha": "cf17e8453bacc90c1df92a2885377733700fd4b8", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/519ee21bcb754bf972b5f127f17035c5efe196d0/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ee21bcb754bf972b5f127f17035c5efe196d0/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=519ee21bcb754bf972b5f127f17035c5efe196d0", "patch": "@@ -53,6 +53,10 @@ pub(crate) mod entry {\n         pub(crate) fn vis(p: &mut Parser) {\n             let _ = opt_visibility(p, false);\n         }\n+\n+        pub(crate) fn block(p: &mut Parser) {\n+            expressions::block_expr(p);\n+        }\n     }\n }\n "}, {"sha": "778c8b10ec6dbda470ebb655a5886c37bfe68fee", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/519ee21bcb754bf972b5f127f17035c5efe196d0/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ee21bcb754bf972b5f127f17035c5efe196d0/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=519ee21bcb754bf972b5f127f17035c5efe196d0", "patch": "@@ -52,12 +52,14 @@ pub use crate::{\n #[derive(Debug)]\n pub enum PrefixEntryPoint {\n     Vis,\n+    Block,\n }\n \n impl PrefixEntryPoint {\n     pub fn parse(&self, input: &Input) -> Output {\n         let entry_point: fn(&'_ mut parser::Parser) = match self {\n             PrefixEntryPoint::Vis => grammar::entry::prefix::vis,\n+            PrefixEntryPoint::Block => grammar::entry::prefix::block,\n         };\n         let mut p = parser::Parser::new(input);\n         entry_point(&mut p);"}]}