{"sha": "c32286d1b1f1494cf46fb6403e329e7bb6d31942", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMjI4NmQxYjFmMTQ5NGNmNDZmYjY0MDNlMzI5ZTdiYjZkMzE5NDI=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-11-23T18:32:31Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-08T09:19:13Z"}, "message": "libserialize: Code cleanup", "tree": {"sha": "b4466a4ce5b2790357865be2199b539b1e4411d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4466a4ce5b2790357865be2199b539b1e4411d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32286d1b1f1494cf46fb6403e329e7bb6d31942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32286d1b1f1494cf46fb6403e329e7bb6d31942", "html_url": "https://github.com/rust-lang/rust/commit/c32286d1b1f1494cf46fb6403e329e7bb6d31942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32286d1b1f1494cf46fb6403e329e7bb6d31942/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fec0f16c98ab066ff11be35b5a8bb0d80efa90f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec0f16c98ab066ff11be35b5a8bb0d80efa90f1", "html_url": "https://github.com/rust-lang/rust/commit/fec0f16c98ab066ff11be35b5a8bb0d80efa90f1"}], "stats": {"total": 134, "additions": 65, "deletions": 69}, "files": [{"sha": "533ec38f678aaaea724593c2e03c21cedde125ad", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 65, "deletions": 69, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/c32286d1b1f1494cf46fb6403e329e7bb6d31942/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32286d1b1f1494cf46fb6403e329e7bb6d31942/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=c32286d1b1f1494cf46fb6403e329e7bb6d31942", "patch": "@@ -91,7 +91,7 @@\n //! fn main() {\n //!     let object = TestStruct {\n //!         data_int: 1,\n-//!         data_str: \"toto\".to_string(),\n+//!         data_str: \"homura\".to_string(),\n //!         data_vector: vec![2,3,4,5],\n //!     };\n //!\n@@ -178,7 +178,7 @@\n //!     // Serialize using `ToJson`\n //!     let input_data = TestStruct {\n //!         data_int: 1,\n-//!         data_str: \"toto\".to_string(),\n+//!         data_str: \"madoka\".to_string(),\n //!         data_vector: vec![2,3,4,5],\n //!     };\n //!     let json_obj: Json = input_data.to_json();\n@@ -443,7 +443,9 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n     fn emit_f64(&mut self, v: f64) -> EncodeResult {\n         write!(self.writer, \"{}\", fmt_number_or_null(v))\n     }\n-    fn emit_f32(&mut self, v: f32) -> EncodeResult { self.emit_f64(v as f64) }\n+    fn emit_f32(&mut self, v: f32) -> EncodeResult {\n+        self.emit_f64(v as f64)\n+    }\n \n     fn emit_char(&mut self, v: char) -> EncodeResult {\n         escape_char(self.writer, v)\n@@ -452,7 +454,9 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n         escape_str(self.writer, v)\n     }\n \n-    fn emit_enum(&mut self, _name: &str, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult {\n+    fn emit_enum(&mut self,\n+                 _name: &str,\n+                 f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult {\n         f(self)\n     }\n \n@@ -663,7 +667,7 @@ impl<'a> ::Encoder<io::IoError> for PrettyEncoder<'a> {\n \n     fn emit_enum_variant(&mut self,\n                          name: &str,\n-                         _: uint,\n+                         _id: uint,\n                          cnt: uint,\n                          f: |&mut PrettyEncoder<'a>| -> EncodeResult) -> EncodeResult {\n         if cnt == 0 {\n@@ -1962,30 +1966,22 @@ macro_rules! read_primitive {\n     ($name:ident, $ty:ty) => {\n         fn $name(&mut self) -> DecodeResult<$ty> {\n             match self.pop() {\n-                Json::I64(f) => {\n-                    match num::cast(f) {\n-                        Some(f) => Ok(f),\n-                        None => Err(ExpectedError(\"Number\".to_string(), format!(\"{}\", f))),\n-                    }\n-                }\n-                Json::U64(f) => {\n-                    match num::cast(f) {\n-                        Some(f) => Ok(f),\n-                        None => Err(ExpectedError(\"Number\".to_string(), format!(\"{}\", f))),\n-                    }\n-                }\n-                Json::F64(f) => {\n-                    Err(ExpectedError(\"Integer\".to_string(), format!(\"{}\", f)))\n-                }\n-                Json::String(s) => {\n-                    // re: #12967.. a type w/ numeric keys (ie HashMap<uint, V> etc)\n-                    // is going to have a string here, as per JSON spec.\n-                    match std::str::from_str(s.as_slice()) {\n-                        Some(f) => Ok(f),\n-                        None => Err(ExpectedError(\"Number\".to_string(), s)),\n-                    }\n+                Json::I64(f) => match num::cast(f) {\n+                    Some(f) => Ok(f),\n+                    None => Err(ExpectedError(\"Number\".to_string(), format!(\"{}\", f))),\n+                },\n+                Json::U64(f) => match num::cast(f) {\n+                    Some(f) => Ok(f),\n+                    None => Err(ExpectedError(\"Number\".to_string(), format!(\"{}\", f))),\n+                },\n+                Json::F64(f) => Err(ExpectedError(\"Integer\".to_string(), format!(\"{}\", f))),\n+                // re: #12967.. a type w/ numeric keys (ie HashMap<uint, V> etc)\n+                // is going to have a string here, as per JSON spec.\n+                Json::String(s) => match std::str::from_str(s.as_slice()) {\n+                    Some(f) => Ok(f),\n+                    None => Err(ExpectedError(\"Number\".to_string(), s)),\n                 },\n-                value => Err(ExpectedError(\"Number\".to_string(), format!(\"{}\", value)))\n+                value => Err(ExpectedError(\"Number\".to_string(), format!(\"{}\", value))),\n             }\n         }\n     }\n@@ -2484,75 +2480,75 @@ mod tests {\n \n     #[test]\n     fn test_write_null() {\n-        assert_eq!(Null.to_string().into_string(), \"null\");\n-        assert_eq!(Null.to_pretty_str().into_string(), \"null\");\n+        assert_eq!(Null.to_string(), \"null\");\n+        assert_eq!(Null.to_pretty_str(), \"null\");\n     }\n \n     #[test]\n     fn test_write_i64() {\n-        assert_eq!(U64(0).to_string().into_string(), \"0\");\n-        assert_eq!(U64(0).to_pretty_str().into_string(), \"0\");\n+        assert_eq!(U64(0).to_string(), \"0\");\n+        assert_eq!(U64(0).to_pretty_str(), \"0\");\n \n-        assert_eq!(U64(1234).to_string().into_string(), \"1234\");\n-        assert_eq!(U64(1234).to_pretty_str().into_string(), \"1234\");\n+        assert_eq!(U64(1234).to_string(), \"1234\");\n+        assert_eq!(U64(1234).to_pretty_str(), \"1234\");\n \n-        assert_eq!(I64(-5678).to_string().into_string(), \"-5678\");\n-        assert_eq!(I64(-5678).to_pretty_str().into_string(), \"-5678\");\n+        assert_eq!(I64(-5678).to_string(), \"-5678\");\n+        assert_eq!(I64(-5678).to_pretty_str(), \"-5678\");\n \n         assert_eq!(U64(7650007200025252000).to_string(), \"7650007200025252000\");\n         assert_eq!(U64(7650007200025252000).to_pretty_str(), \"7650007200025252000\");\n     }\n \n     #[test]\n     fn test_write_f64() {\n-        assert_eq!(F64(3.0).to_string().into_string(), \"3.0\");\n-        assert_eq!(F64(3.0).to_pretty_str().into_string(), \"3.0\");\n+        assert_eq!(F64(3.0).to_string(), \"3.0\");\n+        assert_eq!(F64(3.0).to_pretty_str(), \"3.0\");\n \n-        assert_eq!(F64(3.1).to_string().into_string(), \"3.1\");\n-        assert_eq!(F64(3.1).to_pretty_str().into_string(), \"3.1\");\n+        assert_eq!(F64(3.1).to_string(), \"3.1\");\n+        assert_eq!(F64(3.1).to_pretty_str(), \"3.1\");\n \n-        assert_eq!(F64(-1.5).to_string().into_string(), \"-1.5\");\n-        assert_eq!(F64(-1.5).to_pretty_str().into_string(), \"-1.5\");\n+        assert_eq!(F64(-1.5).to_string(), \"-1.5\");\n+        assert_eq!(F64(-1.5).to_pretty_str(), \"-1.5\");\n \n-        assert_eq!(F64(0.5).to_string().into_string(), \"0.5\");\n-        assert_eq!(F64(0.5).to_pretty_str().into_string(), \"0.5\");\n+        assert_eq!(F64(0.5).to_string(), \"0.5\");\n+        assert_eq!(F64(0.5).to_pretty_str(), \"0.5\");\n \n-        assert_eq!(F64(f64::NAN).to_string().into_string(), \"null\");\n-        assert_eq!(F64(f64::NAN).to_pretty_str().into_string(), \"null\");\n+        assert_eq!(F64(f64::NAN).to_string(), \"null\");\n+        assert_eq!(F64(f64::NAN).to_pretty_str(), \"null\");\n \n-        assert_eq!(F64(f64::INFINITY).to_string().into_string(), \"null\");\n-        assert_eq!(F64(f64::INFINITY).to_pretty_str().into_string(), \"null\");\n+        assert_eq!(F64(f64::INFINITY).to_string(), \"null\");\n+        assert_eq!(F64(f64::INFINITY).to_pretty_str(), \"null\");\n \n-        assert_eq!(F64(f64::NEG_INFINITY).to_string().into_string(), \"null\");\n-        assert_eq!(F64(f64::NEG_INFINITY).to_pretty_str().into_string(), \"null\");\n+        assert_eq!(F64(f64::NEG_INFINITY).to_string(), \"null\");\n+        assert_eq!(F64(f64::NEG_INFINITY).to_pretty_str(), \"null\");\n     }\n \n     #[test]\n     fn test_write_str() {\n-        assert_eq!(String(\"\".to_string()).to_string().into_string(), \"\\\"\\\"\");\n-        assert_eq!(String(\"\".to_string()).to_pretty_str().into_string(), \"\\\"\\\"\");\n+        assert_eq!(String(\"\".to_string()).to_string(), \"\\\"\\\"\");\n+        assert_eq!(String(\"\".to_string()).to_pretty_str(), \"\\\"\\\"\");\n \n-        assert_eq!(String(\"foo\".to_string()).to_string().into_string(), \"\\\"foo\\\"\");\n-        assert_eq!(String(\"foo\".to_string()).to_pretty_str().into_string(), \"\\\"foo\\\"\");\n+        assert_eq!(String(\"homura\".to_string()).to_string(), \"\\\"homura\\\"\");\n+        assert_eq!(String(\"madoka\".to_string()).to_pretty_str(), \"\\\"madoka\\\"\");\n     }\n \n     #[test]\n     fn test_write_bool() {\n-        assert_eq!(Boolean(true).to_string().into_string(), \"true\");\n-        assert_eq!(Boolean(true).to_pretty_str().into_string(), \"true\");\n+        assert_eq!(Boolean(true).to_string(), \"true\");\n+        assert_eq!(Boolean(true).to_pretty_str(), \"true\");\n \n-        assert_eq!(Boolean(false).to_string().into_string(), \"false\");\n-        assert_eq!(Boolean(false).to_pretty_str().into_string(), \"false\");\n+        assert_eq!(Boolean(false).to_string(), \"false\");\n+        assert_eq!(Boolean(false).to_pretty_str(), \"false\");\n     }\n \n     #[test]\n     fn test_write_array() {\n-        assert_eq!(Array(vec![]).to_string().into_string(), \"[]\");\n-        assert_eq!(Array(vec![]).to_pretty_str().into_string(), \"[]\");\n+        assert_eq!(Array(vec![]).to_string(), \"[]\");\n+        assert_eq!(Array(vec![]).to_pretty_str(), \"[]\");\n \n-        assert_eq!(Array(vec![Boolean(true)]).to_string().into_string(), \"[true]\");\n+        assert_eq!(Array(vec![Boolean(true)]).to_string(), \"[true]\");\n         assert_eq!(\n-            Array(vec![Boolean(true)]).to_pretty_str().into_string(),\n+            Array(vec![Boolean(true)]).to_pretty_str(),\n             \"\\\n             [\\n  \\\n                 true\\n\\\n@@ -2564,10 +2560,10 @@ mod tests {\n             Null,\n             Array(vec![String(\"foo\\nbar\".to_string()), F64(3.5)])]);\n \n-        assert_eq!(long_test_array.to_string().into_string(),\n+        assert_eq!(long_test_array.to_string(),\n             \"[false,null,[\\\"foo\\\\nbar\\\",3.5]]\");\n         assert_eq!(\n-            long_test_array.to_pretty_str().into_string(),\n+            long_test_array.to_pretty_str(),\n             \"\\\n             [\\n  \\\n                 false,\\n  \\\n@@ -2582,13 +2578,13 @@ mod tests {\n \n     #[test]\n     fn test_write_object() {\n-        assert_eq!(mk_object(&[]).to_string().into_string(), \"{}\");\n-        assert_eq!(mk_object(&[]).to_pretty_str().into_string(), \"{}\");\n+        assert_eq!(mk_object(&[]).to_string(), \"{}\");\n+        assert_eq!(mk_object(&[]).to_pretty_str(), \"{}\");\n \n         assert_eq!(\n             mk_object(&[\n                 (\"a\".to_string(), Boolean(true))\n-            ]).to_string().into_string(),\n+            ]).to_string(),\n             \"{\\\"a\\\":true}\"\n         );\n         assert_eq!(\n@@ -2607,7 +2603,7 @@ mod tests {\n             ]);\n \n         assert_eq!(\n-            complex_obj.to_string().into_string(),\n+            complex_obj.to_string(),\n             \"{\\\n                 \\\"b\\\":[\\\n                     {\\\"c\\\":\\\"\\\\f\\\\r\\\"},\\\n@@ -2616,7 +2612,7 @@ mod tests {\n             }\"\n         );\n         assert_eq!(\n-            complex_obj.to_pretty_str().into_string(),\n+            complex_obj.to_pretty_str(),\n             \"\\\n             {\\n  \\\n                 \\\"b\\\": [\\n    \\"}]}