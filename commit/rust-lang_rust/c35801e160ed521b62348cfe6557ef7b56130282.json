{"sha": "c35801e160ed521b62348cfe6557ef7b56130282", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTgwMWUxNjBlZDUyMWI2MjM0OGNmZTY1NTdlZjdiNTYxMzAyODI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-03-19T17:51:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-03-26T10:52:58Z"}, "message": "use slice pattern instead of calling `is_empty()` and `[0]`", "tree": {"sha": "2b83879b9fdf753955ea32a4342eaaecdb03fe33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b83879b9fdf753955ea32a4342eaaecdb03fe33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c35801e160ed521b62348cfe6557ef7b56130282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c35801e160ed521b62348cfe6557ef7b56130282", "html_url": "https://github.com/rust-lang/rust/commit/c35801e160ed521b62348cfe6557ef7b56130282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c35801e160ed521b62348cfe6557ef7b56130282/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9e09d8f65b9750ecb2f8e7860a1df9633735865", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e09d8f65b9750ecb2f8e7860a1df9633735865", "html_url": "https://github.com/rust-lang/rust/commit/b9e09d8f65b9750ecb2f8e7860a1df9633735865"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "b282c7333d617f4a163d93d4f7e5ad26126e5bab", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c35801e160ed521b62348cfe6557ef7b56130282/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35801e160ed521b62348cfe6557ef7b56130282/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c35801e160ed521b62348cfe6557ef7b56130282", "patch": "@@ -305,7 +305,11 @@ impl<'a, 'tcx> Expectation<'tcx> {\n         match *self {\n             ExpectHasType(ety) => {\n                 let ety = fcx.shallow_resolve(ety);\n-                if !ety.is_ty_var() { ExpectHasType(ety) } else { NoExpectation }\n+                if !ety.is_ty_var() {\n+                    ExpectHasType(ety)\n+                } else {\n+                    NoExpectation\n+                }\n             }\n             ExpectRvalueLikeUnsized(ety) => ExpectRvalueLikeUnsized(ety),\n             _ => NoExpectation,\n@@ -1618,7 +1622,11 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: DefId, span:\n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n-            if t == self.opaque_identity_ty { false } else { t.super_visit_with(self) }\n+            if t == self.opaque_identity_ty {\n+                false\n+            } else {\n+                t.super_visit_with(self)\n+            }\n         }\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n@@ -1978,8 +1986,8 @@ fn check_impl_items_against_trait<'tcx>(\n     match tcx.impl_polarity(impl_id) {\n         ty::ImplPolarity::Reservation | ty::ImplPolarity::Positive => {}\n         ty::ImplPolarity::Negative => {\n-            if !impl_item_refs.is_empty() {\n-                let first_item_span = tcx.hir().impl_item(impl_item_refs[0].id).span;\n+            if let [first_item_ref, ..] = impl_item_refs {\n+                let first_item_span = tcx.hir().impl_item(first_item_ref.id).span;\n                 struct_span_err!(\n                     tcx.sess,\n                     first_item_span,\n@@ -3767,8 +3775,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &'b self,\n         self_ty: ty::TyVid,\n     ) -> impl Iterator<Item = (ty::PolyTraitRef<'tcx>, traits::PredicateObligation<'tcx>)>\n-    + Captures<'tcx>\n-    + 'b {\n+           + Captures<'tcx>\n+           + 'b {\n         // FIXME: consider using `sub_root_var` here so we\n         // can see through subtyping.\n         let ty_var_root = self.root_var(self_ty);"}]}