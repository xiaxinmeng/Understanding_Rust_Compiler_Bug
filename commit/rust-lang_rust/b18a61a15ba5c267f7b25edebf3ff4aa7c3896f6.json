{"sha": "b18a61a15ba5c267f7b25edebf3ff4aa7c3896f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOGE2MWExNWJhNWMyNjdmN2IyNWVkZWJmM2ZmNGFhN2MzODk2ZjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-24T12:51:00Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(5): Do continuous error handling on main thread.", "tree": {"sha": "175ac5fe2d8fca42b203a0962ff3a1c3799ca636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/175ac5fe2d8fca42b203a0962ff3a1c3799ca636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b18a61a15ba5c267f7b25edebf3ff4aa7c3896f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b18a61a15ba5c267f7b25edebf3ff4aa7c3896f6", "html_url": "https://github.com/rust-lang/rust/commit/b18a61a15ba5c267f7b25edebf3ff4aa7c3896f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b18a61a15ba5c267f7b25edebf3ff4aa7c3896f6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6be33d84f14c286689938eb2a2686315926e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6be33d84f14c286689938eb2a2686315926e9f", "html_url": "https://github.com/rust-lang/rust/commit/df6be33d84f14c286689938eb2a2686315926e9f"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "9e4c1b87aacc5d306f20474d10dbb53c0f8a02c7", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 55, "deletions": 14, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b18a61a15ba5c267f7b25edebf3ff4aa7c3896f6/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18a61a15ba5c267f7b25edebf3ff4aa7c3896f6/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b18a61a15ba5c267f7b25edebf3ff4aa7c3896f6", "patch": "@@ -32,6 +32,7 @@ use rustc_demangle;\n \n use std::cmp;\n use std::ffi::CString;\n+use std::fmt;\n use std::fs;\n use std::io;\n use std::io::Write;\n@@ -777,7 +778,33 @@ pub fn run_passes(sess: &Session,\n         Client::new(num_workers).expect(\"failed to create jobserver\")\n     });\n \n-    execute_work(sess, work_items, client, trans.exported_symbols.clone());\n+    let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n+    let (trans_worker_send, trans_worker_receive) = channel();\n+\n+    let coordinator_thread = start_executing_work(sess,\n+                                                  work_items,\n+                                                  shared_emitter,\n+                                                  trans_worker_send,\n+                                                  client,\n+                                                  trans.exported_symbols.clone());\n+    loop {\n+        shared_emitter_main.check(sess);\n+\n+        match trans_worker_receive.recv() {\n+            Ok(Message::AllWorkDone) |\n+            Err(_) => break,\n+\n+            Ok(Message::CheckErrorMessages) => continue,\n+            Ok(msg) => {\n+                bug!(\"unexpected message {:?}\", msg);\n+            }\n+        }\n+    }\n+\n+    coordinator_thread.join().unwrap();\n+\n+    // Just in case, check this on the way out.\n+    sess.diagnostic().abort_if_errors();\n \n     // If in incr. comp. mode, preserve the `.o` files for potential re-use\n     for mtrans in modules.iter() {\n@@ -975,12 +1002,18 @@ pub fn dump_incremental_data(trans: &CrateTranslation) {\n     eprintln!(\"incremental: re-using {} out of {} modules\", reuse, trans.modules.len());\n }\n \n-struct WorkItem {\n+pub struct WorkItem {\n     mtrans: ModuleTranslation,\n     config: ModuleConfig,\n     output_names: OutputFilenames\n }\n \n+impl fmt::Debug for WorkItem {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"WorkItem({})\", self.mtrans.name)\n+    }\n+}\n+\n fn build_work_item(sess: &Session,\n                    mtrans: ModuleTranslation,\n                    config: ModuleConfig,\n@@ -1041,21 +1074,29 @@ fn execute_work_item(cgcx: &CodegenContext, work_item: WorkItem)\n     Ok(())\n }\n \n+#[derive(Debug)]\n pub enum Message {\n     Token(io::Result<Acquired>),\n     Done { success: bool },\n+    WorkItem(WorkItem),\n+    CheckErrorMessages,\n+    AllWorkDone,\n }\n \n+\n pub struct Diagnostic {\n     msg: String,\n     code: Option<String>,\n     lvl: Level,\n }\n \n-fn execute_work(sess: &Session,\n-                mut work_items: Vec<WorkItem>,\n-                jobserver: Client,\n-                exported_symbols: Arc<ExportedSymbols>) {\n+fn start_executing_work(sess: &Session,\n+                        mut work_items: Vec<WorkItem>,\n+                        shared_emitter: SharedEmitter,\n+                        trans_worker_send: Sender<Message>,\n+                        jobserver: Client,\n+                        exported_symbols: Arc<ExportedSymbols>)\n+                -> thread::JoinHandle<()> {\n     let (tx, rx) = channel();\n     let tx2 = tx.clone();\n \n@@ -1076,8 +1117,6 @@ fn execute_work(sess: &Session,\n         helper.request_token();\n     }\n \n-    let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n-\n     let mut each_linked_rlib_for_lto = Vec::new();\n     drop(link::each_linked_rlib(sess, &mut |cnum, path| {\n         if link::ignored_for_lto(sess, cnum) {\n@@ -1200,18 +1239,20 @@ fn execute_work(sess: &Session,\n                 Message::Done { success: true } => {\n                     drop(tokens.pop());\n                     running -= 1;\n+                    trans_worker_send.send(Message::CheckErrorMessages).unwrap();\n                 }\n                 Message::Done { success: false } => {\n                     shared_emitter.fatal(\"aborting due to worker thread panic\".to_string());\n+                    trans_worker_send.send(Message::CheckErrorMessages).unwrap();\n+                }\n+                msg @ Message::WorkItem(_) |\n+                msg @ Message::AllWorkDone |\n+                msg @ Message::CheckErrorMessages => {\n+                    bug!(\"unexpected message: {:?}\", msg);\n                 }\n             }\n         }\n-    }).join().unwrap();\n-\n-    shared_emitter_main.check(sess);\n-\n-    // Just in case, check this on the way out.\n-    sess.diagnostic().abort_if_errors();\n+    })\n }\n \n fn spawn_work(cgcx: CodegenContext, work: WorkItem) {"}]}