{"sha": "34f444de5d2fbab533eb523f8d8b0b75bf07217d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZjQ0NGRlNWQyZmJhYjUzM2ViNTIzZjhkOGIwYjc1YmYwNzIxN2Q=", "commit": {"author": {"name": "Son", "email": "leson.phung@gmail.com", "date": "2017-02-03T23:04:22Z"}, "committer": {"name": "Son", "email": "leson.phung@gmail.com", "date": "2017-02-03T23:04:22Z"}, "message": "Extract libcore benchmarks to a separate folder", "tree": {"sha": "394e67645d648a9d1c01609ba8657483b49c7371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394e67645d648a9d1c01609ba8657483b49c7371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f444de5d2fbab533eb523f8d8b0b75bf07217d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f444de5d2fbab533eb523f8d8b0b75bf07217d", "html_url": "https://github.com/rust-lang/rust/commit/34f444de5d2fbab533eb523f8d8b0b75bf07217d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f444de5d2fbab533eb523f8d8b0b75bf07217d/comments", "author": {"login": "phungleson", "id": 93457, "node_id": "MDQ6VXNlcjkzNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/93457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phungleson", "html_url": "https://github.com/phungleson", "followers_url": "https://api.github.com/users/phungleson/followers", "following_url": "https://api.github.com/users/phungleson/following{/other_user}", "gists_url": "https://api.github.com/users/phungleson/gists{/gist_id}", "starred_url": "https://api.github.com/users/phungleson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phungleson/subscriptions", "organizations_url": "https://api.github.com/users/phungleson/orgs", "repos_url": "https://api.github.com/users/phungleson/repos", "events_url": "https://api.github.com/users/phungleson/events{/privacy}", "received_events_url": "https://api.github.com/users/phungleson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phungleson", "id": 93457, "node_id": "MDQ6VXNlcjkzNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/93457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phungleson", "html_url": "https://github.com/phungleson", "followers_url": "https://api.github.com/users/phungleson/followers", "following_url": "https://api.github.com/users/phungleson/following{/other_user}", "gists_url": "https://api.github.com/users/phungleson/gists{/gist_id}", "starred_url": "https://api.github.com/users/phungleson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phungleson/subscriptions", "organizations_url": "https://api.github.com/users/phungleson/orgs", "repos_url": "https://api.github.com/users/phungleson/repos", "events_url": "https://api.github.com/users/phungleson/events{/privacy}", "received_events_url": "https://api.github.com/users/phungleson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ecd7aa4bc8dfd07fb0888479b25e53daf46140", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ecd7aa4bc8dfd07fb0888479b25e53daf46140", "html_url": "https://github.com/rust-lang/rust/commit/57ecd7aa4bc8dfd07fb0888479b25e53daf46140"}], "stats": {"total": 1153, "additions": 667, "deletions": 486}, "files": [{"sha": "4f7cd7b016d66ac7f8a38ab05e0516825a4e7210", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -13,7 +13,6 @@ bench = false\n name = \"coretest\"\n path = \"../libcoretest/lib.rs\"\n \n-# FIXME: need to extract benchmarks to a separate crate\n-#[[bench]]\n-#name = \"coretest\"\n-#path = \"../libcoretest/lib.rs\"\n+[[bench]]\n+name = \"corebench\"\n+path = \"../libcore/bench/lib.rs\""}, {"sha": "67e02cf9509b6cd8ba71db2be4dd19cea9946ce0", "filename": "src/libcore/bench/any.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fany.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::any::*;\n+use test::{Bencher, black_box};\n+\n+#[bench]\n+fn bench_downcast_ref(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut x = 0;\n+        let mut y = &mut x as &mut Any;\n+        black_box(&mut y);\n+        black_box(y.downcast_ref::<isize>() == Some(&0));\n+    });\n+}"}, {"sha": "55d9e3e0913801bf2a4106eee84d44015dfe6cb4", "filename": "src/libcore/bench/hash/mod.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fhash%2Fmod.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod sip;"}, {"sha": "3379c85bbec7d5985df61fa213c3da90127faeb3", "filename": "src/libcore/bench/hash/sip.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fhash%2Fsip.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,151 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(deprecated)]\n+\n+use core::hash::*;\n+use test::{Bencher, black_box};\n+\n+fn hash_bytes<H: Hasher>(mut s: H, x: &[u8]) -> u64 {\n+    Hasher::write(&mut s, x);\n+    s.finish()\n+}\n+\n+fn hash_with<H: Hasher, T: Hash>(mut st: H, x: &T) -> u64 {\n+    x.hash(&mut st);\n+    st.finish()\n+}\n+\n+fn hash<T: Hash>(x: &T) -> u64 {\n+    hash_with(SipHasher::new(), x)\n+}\n+\n+#[bench]\n+fn bench_str_under_8_bytes(b: &mut Bencher) {\n+    let s = \"foo\";\n+    b.iter(|| {\n+        assert_eq!(hash(&s), 16262950014981195938);\n+    })\n+}\n+\n+#[bench]\n+fn bench_str_of_8_bytes(b: &mut Bencher) {\n+    let s = \"foobar78\";\n+    b.iter(|| {\n+        assert_eq!(hash(&s), 4898293253460910787);\n+    })\n+}\n+\n+#[bench]\n+fn bench_str_over_8_bytes(b: &mut Bencher) {\n+    let s = \"foobarbaz0\";\n+    b.iter(|| {\n+        assert_eq!(hash(&s), 10581415515220175264);\n+    })\n+}\n+\n+#[bench]\n+fn bench_long_str(b: &mut Bencher) {\n+    let s = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor \\\n+incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud \\\n+exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \\\n+irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \\\n+pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui \\\n+officia deserunt mollit anim id est laborum.\";\n+    b.iter(|| {\n+        assert_eq!(hash(&s), 17717065544121360093);\n+    })\n+}\n+\n+#[bench]\n+fn bench_u32(b: &mut Bencher) {\n+    let u = 162629500u32;\n+    let u = black_box(u);\n+    b.iter(|| {\n+        hash(&u)\n+    });\n+    b.bytes = 8;\n+}\n+\n+#[bench]\n+fn bench_u32_keyed(b: &mut Bencher) {\n+    let u = 162629500u32;\n+    let u = black_box(u);\n+    let k1 = black_box(0x1);\n+    let k2 = black_box(0x2);\n+    b.iter(|| {\n+        hash_with(SipHasher::new_with_keys(k1, k2), &u)\n+    });\n+    b.bytes = 8;\n+}\n+\n+#[bench]\n+fn bench_u64(b: &mut Bencher) {\n+    let u = 16262950014981195938u64;\n+    let u = black_box(u);\n+    b.iter(|| {\n+        hash(&u)\n+    });\n+    b.bytes = 8;\n+}\n+\n+#[bench]\n+fn bench_bytes_4(b: &mut Bencher) {\n+    let data = black_box([b' '; 4]);\n+    b.iter(|| {\n+        hash_bytes(SipHasher::default(), &data)\n+    });\n+    b.bytes = 4;\n+}\n+\n+#[bench]\n+fn bench_bytes_7(b: &mut Bencher) {\n+    let data = black_box([b' '; 7]);\n+    b.iter(|| {\n+        hash_bytes(SipHasher::default(), &data)\n+    });\n+    b.bytes = 7;\n+}\n+\n+#[bench]\n+fn bench_bytes_8(b: &mut Bencher) {\n+    let data = black_box([b' '; 8]);\n+    b.iter(|| {\n+        hash_bytes(SipHasher::default(), &data)\n+    });\n+    b.bytes = 8;\n+}\n+\n+#[bench]\n+fn bench_bytes_a_16(b: &mut Bencher) {\n+    let data = black_box([b' '; 16]);\n+    b.iter(|| {\n+        hash_bytes(SipHasher::default(), &data)\n+    });\n+    b.bytes = 16;\n+}\n+\n+#[bench]\n+fn bench_bytes_b_32(b: &mut Bencher) {\n+    let data = black_box([b' '; 32]);\n+    b.iter(|| {\n+        hash_bytes(SipHasher::default(), &data)\n+    });\n+    b.bytes = 32;\n+}\n+\n+#[bench]\n+fn bench_bytes_c_128(b: &mut Bencher) {\n+    let data = black_box([b' '; 128]);\n+    b.iter(|| {\n+        hash_bytes(SipHasher::default(), &data)\n+    });\n+    b.bytes = 128;\n+}"}, {"sha": "93d38a5bc83bbf1e392585821c90b82d5a72d3fb", "filename": "src/libcore/bench/iter.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fiter.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,101 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::iter::*;\n+use test::{Bencher, black_box};\n+\n+#[bench]\n+fn bench_rposition(b: &mut Bencher) {\n+    let it: Vec<usize> = (0..300).collect();\n+    b.iter(|| {\n+        it.iter().rposition(|&x| x <= 150);\n+    });\n+}\n+\n+#[bench]\n+fn bench_skip_while(b: &mut Bencher) {\n+    b.iter(|| {\n+        let it = 0..100;\n+        let mut sum = 0;\n+        it.skip_while(|&x| { sum += x; sum < 4000 }).all(|_| true);\n+    });\n+}\n+\n+#[bench]\n+fn bench_multiple_take(b: &mut Bencher) {\n+    let mut it = (0..42).cycle();\n+    b.iter(|| {\n+        let n = it.next().unwrap();\n+        for _ in 0..n {\n+            it.clone().take(it.next().unwrap()).all(|_| true);\n+        }\n+    });\n+}\n+\n+fn scatter(x: i32) -> i32 { (x * 31) % 127 }\n+\n+#[bench]\n+fn bench_max_by_key(b: &mut Bencher) {\n+    b.iter(|| {\n+        let it = 0..100;\n+        it.max_by_key(|&x| scatter(x))\n+    })\n+}\n+\n+// http://www.reddit.com/r/rust/comments/31syce/using_iterators_to_find_the_index_of_the_min_or/\n+#[bench]\n+fn bench_max_by_key2(b: &mut Bencher) {\n+    fn max_index_iter(array: &[i32]) -> usize {\n+        array.iter().enumerate().max_by_key(|&(_, item)| item).unwrap().0\n+    }\n+\n+    let mut data = vec![0; 1638];\n+    data[514] = 9999;\n+\n+    b.iter(|| max_index_iter(&data));\n+}\n+\n+#[bench]\n+fn bench_max(b: &mut Bencher) {\n+    b.iter(|| {\n+        let it = 0..100;\n+        it.map(scatter).max()\n+    })\n+}\n+\n+pub fn copy_zip(xs: &[u8], ys: &mut [u8]) {\n+    for (a, b) in ys.iter_mut().zip(xs) {\n+        *a = *b;\n+    }\n+}\n+\n+pub fn add_zip(xs: &[f32], ys: &mut [f32]) {\n+    for (a, b) in ys.iter_mut().zip(xs) {\n+        *a += *b;\n+    }\n+}\n+\n+#[bench]\n+fn bench_zip_copy(b: &mut Bencher) {\n+    let source = vec![0u8; 16 * 1024];\n+    let mut dst = black_box(vec![0u8; 16 * 1024]);\n+    b.iter(|| {\n+        copy_zip(&source, &mut dst)\n+    })\n+}\n+\n+#[bench]\n+fn bench_zip_add(b: &mut Bencher) {\n+    let source = vec![1.; 16 * 1024];\n+    let mut dst = vec![0.; 16 * 1024];\n+    b.iter(|| {\n+        add_zip(&source, &mut dst)\n+    });\n+}"}, {"sha": "d2db329da799981b3a6d3a372211f21893603b6a", "filename": "src/libcore/bench/lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Flib.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(warnings)]\n+\n+#![feature(flt2dec)]\n+#![feature(slice_patterns)]\n+#![feature(test)]\n+\n+extern crate core;\n+extern crate test;\n+\n+mod any;\n+mod hash;\n+mod iter;\n+mod mem;\n+mod num;\n+mod ops;"}, {"sha": "8e541d92a7f170c366b97c57c1912d9bd19f783d", "filename": "src/libcore/bench/mem.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fmem.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use test::Bencher;\n+\n+// FIXME #13642 (these benchmarks should be in another place)\n+// Completely miscellaneous language-construct benchmarks.\n+// Static/dynamic method dispatch\n+\n+struct Struct {\n+    field: isize\n+}\n+\n+trait Trait {\n+    fn method(&self) -> isize;\n+}\n+\n+impl Trait for Struct {\n+    fn method(&self) -> isize {\n+        self.field\n+    }\n+}\n+\n+#[bench]\n+fn trait_vtable_method_call(b: &mut Bencher) {\n+    let s = Struct { field: 10 };\n+    let t = &s as &Trait;\n+    b.iter(|| {\n+        t.method()\n+    });\n+}\n+\n+#[bench]\n+fn trait_static_method_call(b: &mut Bencher) {\n+    let s = Struct { field: 10 };\n+    b.iter(|| {\n+        s.method()\n+    });\n+}\n+\n+// Overhead of various match forms\n+\n+#[bench]\n+fn match_option_some(b: &mut Bencher) {\n+    let x = Some(10);\n+    b.iter(|| {\n+        match x {\n+            Some(y) => y,\n+            None => 11\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn match_vec_pattern(b: &mut Bencher) {\n+    let x = [1,2,3,4,5,6];\n+    b.iter(|| {\n+        match x {\n+            [1,2,3,..] => 10,\n+            _ => 11,\n+        }\n+    });\n+}"}, {"sha": "562866e11777cf0e4db920ff0e9b0d4e60ea5c05", "filename": "src/libcore/bench/num/dec2flt/mod.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fnum%2Fdec2flt%2Fmod.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::f64;\n+use test::Bencher;\n+\n+#[bench]\n+fn bench_0(b: &mut Bencher) {\n+    b.iter(|| \"0.0\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_42(b: &mut Bencher) {\n+    b.iter(|| \"42\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_huge_int(b: &mut Bencher) {\n+    // 2^128 - 1\n+    b.iter(|| \"170141183460469231731687303715884105727\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_short_decimal(b: &mut Bencher) {\n+    b.iter(|| \"1234.5678\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_pi_long(b: &mut Bencher) {\n+    b.iter(|| \"3.14159265358979323846264338327950288\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_pi_short(b: &mut Bencher) {\n+    b.iter(|| \"3.141592653589793\".parse::<f64>())\n+}\n+\n+#[bench]\n+fn bench_1e150(b: &mut Bencher) {\n+    b.iter(|| \"1e150\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_long_decimal_and_exp(b: &mut Bencher) {\n+    b.iter(|| \"727501488517303786137132964064381141071e-123\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_min_subnormal(b: &mut Bencher) {\n+    b.iter(|| \"5e-324\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_min_normal(b: &mut Bencher) {\n+    b.iter(|| \"2.2250738585072014e-308\".parse::<f64>());\n+}\n+\n+#[bench]\n+fn bench_max(b: &mut Bencher) {\n+    b.iter(|| \"1.7976931348623157e308\".parse::<f64>());\n+}"}, {"sha": "1de2bf4921f589996130885f363b550cbf179695", "filename": "src/libcore/bench/num/flt2dec/mod.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fmod.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod strategy {\n+    mod dragon;\n+    mod grisu;\n+}\n+\n+use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};\n+use core::num::flt2dec::MAX_SIG_DIGITS;\n+\n+pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n+    match decode(v).1 {\n+        FullDecoded::Finite(decoded) => decoded,\n+        full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded)\n+    }\n+}"}, {"sha": "6824cf40ed2aec678ae771792ce01f9fb2a573da", "filename": "src/libcore/bench/num/flt2dec/strategy/dragon.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{i16, f64};\n+use super::super::*;\n+use core::num::flt2dec::strategy::dragon::*;\n+use test::Bencher;\n+\n+#[bench]\n+fn bench_small_shortest(b: &mut Bencher) {\n+    let decoded = decode_finite(3.141592f64);\n+    let mut buf = [0; MAX_SIG_DIGITS];\n+    b.iter(|| format_shortest(&decoded, &mut buf));\n+}\n+\n+#[bench]\n+fn bench_big_shortest(b: &mut Bencher) {\n+    let decoded = decode_finite(f64::MAX);\n+    let mut buf = [0; MAX_SIG_DIGITS];\n+    b.iter(|| format_shortest(&decoded, &mut buf));\n+}\n+\n+#[bench]\n+fn bench_small_exact_3(b: &mut Bencher) {\n+    let decoded = decode_finite(3.141592f64);\n+    let mut buf = [0; 3];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_big_exact_3(b: &mut Bencher) {\n+    let decoded = decode_finite(f64::MAX);\n+    let mut buf = [0; 3];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_small_exact_12(b: &mut Bencher) {\n+    let decoded = decode_finite(3.141592f64);\n+    let mut buf = [0; 12];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_big_exact_12(b: &mut Bencher) {\n+    let decoded = decode_finite(f64::MAX);\n+    let mut buf = [0; 12];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_small_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(3.141592f64);\n+    let mut buf = [0; 1024];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_big_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(f64::MAX);\n+    let mut buf = [0; 1024];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}"}, {"sha": "82e1a858fca9fc655a15967c43a88d7c6fd17711", "filename": "src/libcore/bench/num/flt2dec/strategy/grisu.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{i16, f64};\n+use super::super::*;\n+use core::num::flt2dec::strategy::grisu::*;\n+use test::Bencher;\n+\n+pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n+    match decode(v).1 {\n+        FullDecoded::Finite(decoded) => decoded,\n+        full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded)\n+    }\n+}\n+\n+#[bench]\n+fn bench_small_shortest(b: &mut Bencher) {\n+    let decoded = decode_finite(3.141592f64);\n+    let mut buf = [0; MAX_SIG_DIGITS];\n+    b.iter(|| format_shortest(&decoded, &mut buf));\n+}\n+\n+#[bench]\n+fn bench_big_shortest(b: &mut Bencher) {\n+    let decoded = decode_finite(f64::MAX);\n+    let mut buf = [0; MAX_SIG_DIGITS];\n+    b.iter(|| format_shortest(&decoded, &mut buf));\n+}\n+\n+#[bench]\n+fn bench_small_exact_3(b: &mut Bencher) {\n+    let decoded = decode_finite(3.141592f64);\n+    let mut buf = [0; 3];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_big_exact_3(b: &mut Bencher) {\n+    let decoded = decode_finite(f64::MAX);\n+    let mut buf = [0; 3];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_small_exact_12(b: &mut Bencher) {\n+    let decoded = decode_finite(3.141592f64);\n+    let mut buf = [0; 12];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_big_exact_12(b: &mut Bencher) {\n+    let decoded = decode_finite(f64::MAX);\n+    let mut buf = [0; 12];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_small_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(3.141592f64);\n+    let mut buf = [0; 1024];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}\n+\n+#[bench]\n+fn bench_big_exact_inf(b: &mut Bencher) {\n+    let decoded = decode_finite(f64::MAX);\n+    let mut buf = [0; 1024];\n+    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n+}"}, {"sha": "55f0bdb57ec820711fc8b8ddec0bc7981eaa6837", "filename": "src/libcore/bench/num/mod.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fnum%2Fmod.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod flt2dec;\n+mod dec2flt;"}, {"sha": "7f36a4b0771aa611d9cb2f07544787da0e28be9c", "filename": "src/libcore/bench/ops.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcore%2Fbench%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbench%2Fops.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::ops::*;\n+use test::Bencher;\n+\n+// Overhead of dtors\n+\n+struct HasDtor {\n+    _x: isize\n+}\n+\n+impl Drop for HasDtor {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+#[bench]\n+fn alloc_obj_with_dtor(b: &mut Bencher) {\n+    b.iter(|| {\n+        HasDtor { _x : 10 };\n+    })\n+}"}, {"sha": "2d3e81aa131ed4ceb5fc7d2696af966b9d9c660b", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -7,9 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n use core::any::*;\n-use test::Bencher;\n-use test;\n \n #[derive(PartialEq, Debug)]\n struct Test;\n@@ -124,13 +123,3 @@ fn any_unsized() {\n     fn is_any<T: Any + ?Sized>() {}\n     is_any::<[i32]>();\n }\n-\n-#[bench]\n-fn bench_downcast_ref(b: &mut Bencher) {\n-    b.iter(|| {\n-        let mut x = 0;\n-        let mut y = &mut x as &mut Any;\n-        test::black_box(&mut y);\n-        test::black_box(y.downcast_ref::<isize>() == Some(&0));\n-    });\n-}"}, {"sha": "4a9657e03404af4f6d02cf79a05c92e8a05c8ebb", "filename": "src/libcoretest/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fsip.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -10,8 +10,6 @@\n \n #![allow(deprecated)]\n \n-use test::{Bencher, black_box};\n-\n use core::hash::{Hash, Hasher};\n use core::hash::{SipHasher, SipHasher13, SipHasher24};\n use core::{slice, mem};\n@@ -58,11 +56,6 @@ fn hash<T: Hash>(x: &T) -> u64 {\n     hash_with(SipHasher::new(), x)\n }\n \n-fn hash_bytes<H: Hasher>(mut s: H, x: &[u8]) -> u64 {\n-    Hasher::write(&mut s, x);\n-    s.finish()\n-}\n-\n #[test]\n #[allow(unused_must_use)]\n fn test_siphash_1_3() {\n@@ -347,126 +340,3 @@ fn test_write_short_works() {\n     h2.write(&[0xFFu8, 0x01u8]);\n     assert_eq!(h1.finish(), h2.finish());\n }\n-\n-#[bench]\n-fn bench_str_under_8_bytes(b: &mut Bencher) {\n-    let s = \"foo\";\n-    b.iter(|| {\n-        assert_eq!(hash(&s), 16262950014981195938);\n-    })\n-}\n-\n-#[bench]\n-fn bench_str_of_8_bytes(b: &mut Bencher) {\n-    let s = \"foobar78\";\n-    b.iter(|| {\n-        assert_eq!(hash(&s), 4898293253460910787);\n-    })\n-}\n-\n-#[bench]\n-fn bench_str_over_8_bytes(b: &mut Bencher) {\n-    let s = \"foobarbaz0\";\n-    b.iter(|| {\n-        assert_eq!(hash(&s), 10581415515220175264);\n-    })\n-}\n-\n-#[bench]\n-fn bench_long_str(b: &mut Bencher) {\n-    let s = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor \\\n-incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud \\\n-exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \\\n-irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \\\n-pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui \\\n-officia deserunt mollit anim id est laborum.\";\n-    b.iter(|| {\n-        assert_eq!(hash(&s), 17717065544121360093);\n-    })\n-}\n-\n-#[bench]\n-fn bench_u32(b: &mut Bencher) {\n-    let u = 162629500u32;\n-    let u = black_box(u);\n-    b.iter(|| {\n-        hash(&u)\n-    });\n-    b.bytes = 8;\n-}\n-\n-#[bench]\n-fn bench_u32_keyed(b: &mut Bencher) {\n-    let u = 162629500u32;\n-    let u = black_box(u);\n-    let k1 = black_box(0x1);\n-    let k2 = black_box(0x2);\n-    b.iter(|| {\n-        hash_with(SipHasher::new_with_keys(k1, k2), &u)\n-    });\n-    b.bytes = 8;\n-}\n-\n-#[bench]\n-fn bench_u64(b: &mut Bencher) {\n-    let u = 16262950014981195938u64;\n-    let u = black_box(u);\n-    b.iter(|| {\n-        hash(&u)\n-    });\n-    b.bytes = 8;\n-}\n-\n-#[bench]\n-fn bench_bytes_4(b: &mut Bencher) {\n-    let data = black_box([b' '; 4]);\n-    b.iter(|| {\n-        hash_bytes(SipHasher::default(), &data)\n-    });\n-    b.bytes = 4;\n-}\n-\n-#[bench]\n-fn bench_bytes_7(b: &mut Bencher) {\n-    let data = black_box([b' '; 7]);\n-    b.iter(|| {\n-        hash_bytes(SipHasher::default(), &data)\n-    });\n-    b.bytes = 7;\n-}\n-\n-#[bench]\n-fn bench_bytes_8(b: &mut Bencher) {\n-    let data = black_box([b' '; 8]);\n-    b.iter(|| {\n-        hash_bytes(SipHasher::default(), &data)\n-    });\n-    b.bytes = 8;\n-}\n-\n-#[bench]\n-fn bench_bytes_a_16(b: &mut Bencher) {\n-    let data = black_box([b' '; 16]);\n-    b.iter(|| {\n-        hash_bytes(SipHasher::default(), &data)\n-    });\n-    b.bytes = 16;\n-}\n-\n-#[bench]\n-fn bench_bytes_b_32(b: &mut Bencher) {\n-    let data = black_box([b' '; 32]);\n-    b.iter(|| {\n-        hash_bytes(SipHasher::default(), &data)\n-    });\n-    b.bytes = 32;\n-}\n-\n-#[bench]\n-fn bench_bytes_c_128(b: &mut Bencher) {\n-    let data = black_box([b' '; 128]);\n-    b.iter(|| {\n-        hash_bytes(SipHasher::default(), &data)\n-    });\n-    b.bytes = 128;\n-}"}, {"sha": "89f59a9c2de7637935ad56b627ad3195c0da9e59", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -12,9 +12,6 @@ use core::iter::*;\n use core::{i8, i16, isize};\n use core::usize;\n \n-use test::Bencher;\n-use test::black_box;\n-\n #[test]\n fn test_lt() {\n     let empty: [isize; 0] = [];\n@@ -1079,91 +1076,3 @@ fn test_chain_fold() {\n     assert_eq!(&[2, 3, 1, 2, 0], &result[..]);\n }\n \n-#[bench]\n-fn bench_rposition(b: &mut Bencher) {\n-    let it: Vec<usize> = (0..300).collect();\n-    b.iter(|| {\n-        it.iter().rposition(|&x| x <= 150);\n-    });\n-}\n-\n-#[bench]\n-fn bench_skip_while(b: &mut Bencher) {\n-    b.iter(|| {\n-        let it = 0..100;\n-        let mut sum = 0;\n-        it.skip_while(|&x| { sum += x; sum < 4000 }).all(|_| true);\n-    });\n-}\n-\n-#[bench]\n-fn bench_multiple_take(b: &mut Bencher) {\n-    let mut it = (0..42).cycle();\n-    b.iter(|| {\n-        let n = it.next().unwrap();\n-        for _ in 0..n {\n-            it.clone().take(it.next().unwrap()).all(|_| true);\n-        }\n-    });\n-}\n-\n-fn scatter(x: i32) -> i32 { (x * 31) % 127 }\n-\n-#[bench]\n-fn bench_max_by_key(b: &mut Bencher) {\n-    b.iter(|| {\n-        let it = 0..100;\n-        it.max_by_key(|&x| scatter(x))\n-    })\n-}\n-\n-// http://www.reddit.com/r/rust/comments/31syce/using_iterators_to_find_the_index_of_the_min_or/\n-#[bench]\n-fn bench_max_by_key2(b: &mut Bencher) {\n-    fn max_index_iter(array: &[i32]) -> usize {\n-        array.iter().enumerate().max_by_key(|&(_, item)| item).unwrap().0\n-    }\n-\n-    let mut data = vec![0; 1638];\n-    data[514] = 9999;\n-\n-    b.iter(|| max_index_iter(&data));\n-}\n-\n-#[bench]\n-fn bench_max(b: &mut Bencher) {\n-    b.iter(|| {\n-        let it = 0..100;\n-        it.map(scatter).max()\n-    })\n-}\n-\n-pub fn copy_zip(xs: &[u8], ys: &mut [u8]) {\n-    for (a, b) in ys.iter_mut().zip(xs) {\n-        *a = *b;\n-    }\n-}\n-\n-pub fn add_zip(xs: &[f32], ys: &mut [f32]) {\n-    for (a, b) in ys.iter_mut().zip(xs) {\n-        *a += *b;\n-    }\n-}\n-\n-#[bench]\n-fn bench_zip_copy(b: &mut Bencher) {\n-    let source = vec![0u8; 16 * 1024];\n-    let mut dst = black_box(vec![0u8; 16 * 1024]);\n-    b.iter(|| {\n-        copy_zip(&source, &mut dst)\n-    })\n-}\n-\n-#[bench]\n-fn bench_zip_add(b: &mut Bencher) {\n-    let source = vec![1.; 16 * 1024];\n-    let mut dst = vec![0.; 16 * 1024];\n-    b.iter(|| {\n-        add_zip(&source, &mut dst)\n-    });\n-}"}, {"sha": "86e59c736ba4a133b8d3257a2c56661c1fa07e33", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n use core::mem::*;\n-use test::Bencher;\n \n #[test]\n fn size_of_basic() {\n@@ -121,61 +121,3 @@ fn test_transmute() {\n     }\n }\n \n-// FIXME #13642 (these benchmarks should be in another place)\n-/// Completely miscellaneous language-construct benchmarks.\n-// Static/dynamic method dispatch\n-\n-struct Struct {\n-    field: isize\n-}\n-\n-trait Trait {\n-    fn method(&self) -> isize;\n-}\n-\n-impl Trait for Struct {\n-    fn method(&self) -> isize {\n-        self.field\n-    }\n-}\n-\n-#[bench]\n-fn trait_vtable_method_call(b: &mut Bencher) {\n-    let s = Struct { field: 10 };\n-    let t = &s as &Trait;\n-    b.iter(|| {\n-        t.method()\n-    });\n-}\n-\n-#[bench]\n-fn trait_static_method_call(b: &mut Bencher) {\n-    let s = Struct { field: 10 };\n-    b.iter(|| {\n-        s.method()\n-    });\n-}\n-\n-// Overhead of various match forms\n-\n-#[bench]\n-fn match_option_some(b: &mut Bencher) {\n-    let x = Some(10);\n-    b.iter(|| {\n-        match x {\n-            Some(y) => y,\n-            None => 11\n-        }\n-    });\n-}\n-\n-#[bench]\n-fn match_vec_pattern(b: &mut Bencher) {\n-    let x = [1,2,3,4,5,6];\n-    b.iter(|| {\n-        match x {\n-            [1,2,3,..] => 10,\n-            _ => 11,\n-        }\n-    });\n-}"}, {"sha": "5d546c643e7ee5248ee42b42cc481d24a0d0bd3a", "filename": "src/libcoretest/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -11,7 +11,6 @@\n #![allow(overflowing_literals)]\n \n use std::{i64, f32, f64};\n-use test;\n \n mod parse;\n mod rawfp;\n@@ -144,59 +143,3 @@ fn borderline_overflow() {\n     // It makes no sense to enshrine that in a test, the important part is that it doesn't panic.\n     let _ = s.parse::<f64>();\n }\n-\n-#[bench]\n-fn bench_0(b: &mut test::Bencher) {\n-    b.iter(|| \"0.0\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_42(b: &mut test::Bencher) {\n-    b.iter(|| \"42\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_huge_int(b: &mut test::Bencher) {\n-    // 2^128 - 1\n-    b.iter(|| \"170141183460469231731687303715884105727\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_short_decimal(b: &mut test::Bencher) {\n-    b.iter(|| \"1234.5678\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_pi_long(b: &mut test::Bencher) {\n-    b.iter(|| \"3.14159265358979323846264338327950288\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_pi_short(b: &mut test::Bencher) {\n-    b.iter(|| \"3.141592653589793\".parse::<f64>())\n-}\n-\n-#[bench]\n-fn bench_1e150(b: &mut test::Bencher) {\n-    b.iter(|| \"1e150\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_long_decimal_and_exp(b: &mut test::Bencher) {\n-    b.iter(|| \"727501488517303786137132964064381141071e-123\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_min_subnormal(b: &mut test::Bencher) {\n-    b.iter(|| \"5e-324\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_min_normal(b: &mut test::Bencher) {\n-    b.iter(|| \"2.2250738585072014e-308\".parse::<f64>());\n-}\n-\n-#[bench]\n-fn bench_max(b: &mut test::Bencher) {\n-    b.iter(|| \"1.7976931348623157e308\".parse::<f64>());\n-}"}, {"sha": "4edb0f3df60c44ea3d0b1aa7c76c379cb5d37de5", "filename": "src/libcoretest/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::prelude::v1::*;\n-use std::{i16, f64};\n use super::super::*;\n use core::num::bignum::Big32x40 as Big;\n use core::num::flt2dec::strategy::dragon::*;\n@@ -53,62 +52,6 @@ fn exact_sanity_test() {\n     f32_exact_sanity_test(format_exact);\n }\n \n-#[bench]\n-fn bench_small_shortest(b: &mut Bencher) {\n-    let decoded = decode_finite(3.141592f64);\n-    let mut buf = [0; MAX_SIG_DIGITS];\n-    b.iter(|| format_shortest(&decoded, &mut buf));\n-}\n-\n-#[bench]\n-fn bench_big_shortest(b: &mut Bencher) {\n-    let decoded = decode_finite(f64::MAX);\n-    let mut buf = [0; MAX_SIG_DIGITS];\n-    b.iter(|| format_shortest(&decoded, &mut buf));\n-}\n-\n-#[bench]\n-fn bench_small_exact_3(b: &mut Bencher) {\n-    let decoded = decode_finite(3.141592f64);\n-    let mut buf = [0; 3];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_big_exact_3(b: &mut Bencher) {\n-    let decoded = decode_finite(f64::MAX);\n-    let mut buf = [0; 3];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_small_exact_12(b: &mut Bencher) {\n-    let decoded = decode_finite(3.141592f64);\n-    let mut buf = [0; 12];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_big_exact_12(b: &mut Bencher) {\n-    let decoded = decode_finite(f64::MAX);\n-    let mut buf = [0; 12];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_small_exact_inf(b: &mut Bencher) {\n-    let decoded = decode_finite(3.141592f64);\n-    let mut buf = [0; 1024];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_big_exact_inf(b: &mut Bencher) {\n-    let decoded = decode_finite(f64::MAX);\n-    let mut buf = [0; 1024];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n #[test]\n fn test_to_shortest_str() {\n     to_shortest_str_test(format_shortest);"}, {"sha": "79e66ee669e146d13e9addfaf635d1eee5670db4", "filename": "src/libcoretest/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::{i16, f64};\n+use std::i16;\n use super::super::*;\n use core::num::flt2dec::strategy::grisu::*;\n \n@@ -102,62 +102,6 @@ fn exact_f64_random_equivalence_test() {\n     }\n }\n \n-#[bench]\n-fn bench_small_shortest(b: &mut Bencher) {\n-    let decoded = decode_finite(3.141592f64);\n-    let mut buf = [0; MAX_SIG_DIGITS];\n-    b.iter(|| format_shortest(&decoded, &mut buf));\n-}\n-\n-#[bench]\n-fn bench_big_shortest(b: &mut Bencher) {\n-    let decoded = decode_finite(f64::MAX);\n-    let mut buf = [0; MAX_SIG_DIGITS];\n-    b.iter(|| format_shortest(&decoded, &mut buf));\n-}\n-\n-#[bench]\n-fn bench_small_exact_3(b: &mut Bencher) {\n-    let decoded = decode_finite(3.141592f64);\n-    let mut buf = [0; 3];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_big_exact_3(b: &mut Bencher) {\n-    let decoded = decode_finite(f64::MAX);\n-    let mut buf = [0; 3];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_small_exact_12(b: &mut Bencher) {\n-    let decoded = decode_finite(3.141592f64);\n-    let mut buf = [0; 12];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_big_exact_12(b: &mut Bencher) {\n-    let decoded = decode_finite(f64::MAX);\n-    let mut buf = [0; 12];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_small_exact_inf(b: &mut Bencher) {\n-    let decoded = decode_finite(3.141592f64);\n-    let mut buf = [0; 1024];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n-#[bench]\n-fn bench_big_exact_inf(b: &mut Bencher) {\n-    let decoded = decode_finite(f64::MAX);\n-    let mut buf = [0; 1024];\n-    b.iter(|| format_exact(&decoded, &mut buf, i16::MIN));\n-}\n-\n #[test]\n fn test_to_shortest_str() {\n     to_shortest_str_test(format_shortest);"}, {"sha": "1c6c13b0d02e8b6e5417bbfbc900d4ca78f21f67", "filename": "src/libcoretest/ops.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f444de5d2fbab533eb523f8d8b0b75bf07217d/src%2Flibcoretest%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fops.rs?ref=34f444de5d2fbab533eb523f8d8b0b75bf07217d", "patch": "@@ -8,27 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use test::Bencher;\n use core::ops::{Range, RangeFull, RangeFrom, RangeTo};\n \n-// Overhead of dtors\n-\n-struct HasDtor {\n-    _x: isize\n-}\n-\n-impl Drop for HasDtor {\n-    fn drop(&mut self) {\n-    }\n-}\n-\n-#[bench]\n-fn alloc_obj_with_dtor(b: &mut Bencher) {\n-    b.iter(|| {\n-        HasDtor { _x : 10 };\n-    })\n-}\n-\n // Test the Range structs without the syntactic sugar.\n \n #[test]"}]}