{"sha": "ceeb158e0a04c3a73a4c5014609020ee628b4c06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZWIxNThlMGEwNGMzYTczYTRjNTAxNDYwOTAyMGVlNjI4YjRjMDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-22T14:39:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-28T16:05:45Z"}, "message": "Address mw nits", "tree": {"sha": "541cb95ca53bee24d2e84bc176c9f9d737c0eeee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/541cb95ca53bee24d2e84bc176c9f9d737c0eeee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceeb158e0a04c3a73a4c5014609020ee628b4c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceeb158e0a04c3a73a4c5014609020ee628b4c06", "html_url": "https://github.com/rust-lang/rust/commit/ceeb158e0a04c3a73a4c5014609020ee628b4c06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceeb158e0a04c3a73a4c5014609020ee628b4c06/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a72d20c9c97ab7b1d3b023d6cc0caddcd12f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a72d20c9c97ab7b1d3b023d6cc0caddcd12f77", "html_url": "https://github.com/rust-lang/rust/commit/08a72d20c9c97ab7b1d3b023d6cc0caddcd12f77"}], "stats": {"total": 111, "additions": 54, "deletions": 57}, "files": [{"sha": "8691894b32513bc01bc2e4c3c8e476b142a22f39", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -25,17 +25,17 @@ pub struct DepGraph {\n }\n \n struct DepGraphData {\n-    /// we send messages to the thread to let it build up the dep-graph\n-    /// from the current run\n+    /// We send messages to the thread to let it build up the dep-graph\n+    /// from the current run.\n     thread: DepGraphThreadData,\n \n-    /// when we load, there may be `.o` files, cached mir, or other such\n+    /// When we load, there may be `.o` files, cached mir, or other such\n     /// things available to us. If we find that they are not dirty, we\n     /// load the path to the file storing those work-products here into\n     /// this map. We can later look for and extract that data.\n     previous_work_products: RefCell<FnvHashMap<Arc<WorkProductId>, WorkProduct>>,\n \n-    /// work-products that we generate in this run\n+    /// Work-products that we generate in this run.\n     work_products: RefCell<FnvHashMap<Arc<WorkProductId>, WorkProduct>>,\n }\n \n@@ -132,7 +132,7 @@ impl DepGraph {\n /// Each work product is associated with a dep-node, representing the\n /// process that produced the work-product. If that dep-node is found\n /// to be dirty when we load up, then we will delete the work-product\n-/// at load time. If the work-product is found to be clean, the we\n+/// at load time. If the work-product is found to be clean, then we\n /// will keep a record in the `previous_work_products` list.\n ///\n /// In addition, work products have an associated hash. This hash is"}, {"sha": "f4e1c06090e591a9d5d2abd1f33d4db4b019b10f", "filename": "src/librustc/util/fs.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc%2Futil%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc%2Futil%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ffs.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -10,6 +10,8 @@\n \n use std::path::{self, Path, PathBuf};\n use std::ffi::OsString;\n+use std::fs;\n+use std::io;\n \n // Unfortunately, on windows, it looks like msvcrt.dll is silently translating\n // verbatim paths under the hood to non-verbatim paths! This manifests itself as\n@@ -53,3 +55,15 @@ pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n         _ => p.to_path_buf(),\n     }\n }\n+\n+/// Copy `p` into `q`, preferring to use hard-linking if possible. If\n+/// `q` already exists, it is removed first.\n+pub fn link_or_copy<P: AsRef<Path>, Q: AsRef<Path>>(p: P, q: Q) -> io::Result<()> {\n+    let p = p.as_ref();\n+    let q = q.as_ref();\n+    if q.exists() {\n+        try!(fs::remove_file(&q));\n+    }\n+    fs::hard_link(p, q)\n+        .or_else(|_| fs::copy(p, q).map(|_| ()))\n+}"}, {"sha": "f172f38b809686f2995c10639ca4e05945882482", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -88,7 +88,7 @@ pub fn compile_input(sess: &Session,\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n-    let (outputs, trans, id) = {\n+    let (outputs, trans, crate_name) = {\n         let krate = match phase_1_parse_input(sess, cfg, input) {\n             Ok(krate) => krate,\n             Err(mut parse_error) => {\n@@ -113,21 +113,21 @@ pub fn compile_input(sess: &Session,\n         };\n \n         let outputs = build_output_filenames(input, outdir, output, &krate.attrs, sess);\n-        let id = link::find_crate_name(Some(sess), &krate.attrs, input);\n+        let crate_name = link::find_crate_name(Some(sess), &krate.attrs, input);\n         let ExpansionResult { expanded_crate, defs, analysis, resolutions, mut hir_forest } = {\n             phase_2_configure_and_expand(\n-                sess, &cstore, krate, &id, addl_plugins, control.make_glob_map,\n+                sess, &cstore, krate, &crate_name, addl_plugins, control.make_glob_map,\n                 |expanded_crate| {\n                     let mut state = CompileState::state_after_expand(\n-                        input, sess, outdir, output, &cstore, expanded_crate, &id,\n+                        input, sess, outdir, output, &cstore, expanded_crate, &crate_name,\n                     );\n                     controller_entry_point!(after_expand, sess, state, Ok(()));\n                     Ok(())\n                 }\n             )?\n         };\n \n-        write_out_deps(sess, &outputs, &id);\n+        write_out_deps(sess, &outputs, &crate_name);\n \n         let arenas = ty::CtxtArenas::new();\n \n@@ -151,7 +151,7 @@ pub fn compile_input(sess: &Session,\n                                                                   &resolutions,\n                                                                   &expanded_crate,\n                                                                   &hir_map.krate(),\n-                                                                  &id),\n+                                                                  &crate_name),\n                                     Ok(()));\n         }\n \n@@ -171,7 +171,7 @@ pub fn compile_input(sess: &Session,\n                                     analysis,\n                                     resolutions,\n                                     &arenas,\n-                                    &id,\n+                                    &crate_name,\n                                     |tcx, mir_map, analysis, result| {\n             {\n                 // Eventually, we will want to track plugins.\n@@ -186,7 +186,7 @@ pub fn compile_input(sess: &Session,\n                                                                    &analysis,\n                                                                    mir_map.as_ref(),\n                                                                    tcx,\n-                                                                   &id);\n+                                                                   &crate_name);\n                 (control.after_analysis.callback)(&mut state);\n \n                 if control.after_analysis.stop == Compilation::Stop {\n@@ -212,11 +212,11 @@ pub fn compile_input(sess: &Session,\n             // Discard interned strings as they are no longer required.\n             token::clear_ident_interner();\n \n-            Ok((outputs, trans, id.clone()))\n+            Ok((outputs, trans, crate_name.clone()))\n         })??\n     };\n \n-    let phase5_result = phase_5_run_llvm_passes(sess, &id, &trans, &outputs);\n+    let phase5_result = phase_5_run_llvm_passes(sess, &crate_name, &trans, &outputs);\n \n     controller_entry_point!(after_llvm,\n                             sess,\n@@ -1069,14 +1069,14 @@ fn escape_dep_filename(filename: &str) -> String {\n     filename.replace(\" \", \"\\\\ \")\n }\n \n-fn write_out_deps(sess: &Session, outputs: &OutputFilenames, id: &str) {\n+fn write_out_deps(sess: &Session, outputs: &OutputFilenames, crate_name: &str) {\n     let mut out_filenames = Vec::new();\n     for output_type in sess.opts.output_types.keys() {\n         let file = outputs.path(*output_type);\n         match *output_type {\n             OutputType::Exe => {\n                 for output in sess.crate_types.borrow().iter() {\n-                    let p = link::filename_for_input(sess, *output, id, outputs);\n+                    let p = link::filename_for_input(sess, *output, crate_name, outputs);\n                     out_filenames.push(p);\n                 }\n             }"}, {"sha": "6b856459aabfe660c18ebc7e8b6bb769075e1f87", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -63,10 +63,13 @@ fn load_dep_graph_if_exists<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     match decode_dep_graph(tcx, &dep_graph_data, &work_products_data) {\n         Ok(()) => return,\n-        Err(err) => bug!(\"decoding error in dep-graph from `{}` and `{}`: {}\",\n+        Err(err) => {\n+            tcx.sess.warn(\n+                &format!(\"decoding error in dep-graph from `{}` and `{}`: {}\",\n                          dep_graph_path.display(),\n                          work_products_path.display(),\n-                         err),\n+                         err));\n+        }\n     }\n }\n \n@@ -94,9 +97,7 @@ fn load_data(sess: &Session, path: &Path) -> Option<Vec<u8>> {\n }\n \n /// Decode the dep graph and load the edges/nodes that are still clean\n-/// into `tcx.dep_graph`. On success, returns a hashset containing all\n-/// the paths of work-products from clean nodes (any work-products not\n-/// in this set can be deleted).\n+/// into `tcx.dep_graph`.\n pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   dep_graph_data: &[u8],\n                                   work_products_data: &[u8])"}, {"sha": "7695291bf620b24e6298cd3bda8f38ef3a8e3e47", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -13,6 +13,7 @@\n use persist::util::*;\n use rustc::dep_graph::{WorkProduct, WorkProductId};\n use rustc::session::Session;\n+use rustc::util::fs::link_or_copy;\n use std::fs;\n use std::path::Path;\n use std::sync::Arc;\n@@ -39,10 +40,7 @@ pub fn save_trans_partition(sess: &Session,\n         let _ = fs::remove_file(&path_in_incr_dir);\n     }\n \n-    match\n-        fs::hard_link(path_to_obj_file, &path_in_incr_dir)\n-        .or_else(|_| fs::copy(path_to_obj_file, &path_in_incr_dir).map(|_| ()))\n-    {\n+    match link_or_copy(path_to_obj_file, &path_in_incr_dir) {\n         Ok(_) => {\n             let work_product = WorkProduct {\n                 input_hash: partition_hash,"}, {"sha": "08d7b531c2f1befe7b5ad0b0a1e4f81db197195e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -20,14 +20,14 @@ use llvm::SMDiagnosticRef;\n use {CrateTranslation, ModuleLlvm, ModuleSource, ModuleTranslation};\n use util::common::time;\n use util::common::path2cstr;\n+use util::fs::link_or_copy;\n use errors::{self, Handler, Level, DiagnosticBuilder};\n use errors::emitter::Emitter;\n use syntax_pos::MultiSpan;\n \n use std::collections::HashMap;\n use std::ffi::{CStr, CString};\n use std::fs;\n-use std::io;\n use std::path::{Path, PathBuf};\n use std::str;\n use std::sync::{Arc, Mutex};\n@@ -929,16 +929,6 @@ fn build_work_item(sess: &Session,\n     }\n }\n \n-fn link_or_copy<P: AsRef<Path>, Q: AsRef<Path>>(p: P, q: Q) -> io::Result<()> {\n-    let p = p.as_ref();\n-    let q = q.as_ref();\n-    if q.exists() {\n-        try!(fs::remove_file(&q));\n-    }\n-    fs::hard_link(p, q)\n-        .or_else(|_| fs::copy(p, q).map(|_| ()))\n-}\n-\n fn execute_work_item(cgcx: &CodegenContext,\n                      work_item: WorkItem) {\n     unsafe {"}, {"sha": "e73c4f41c9412cdf94e9dfc4b3e0d225aac52eda", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -2262,12 +2262,20 @@ fn write_metadata(cx: &SharedCrateContext,\n \n /// Find any symbols that are defined in one compilation unit, but not declared\n /// in any other compilation unit.  Give these symbols internal linkage.\n-fn internalize_symbols<'a, 'tcx>(ccxs: &CrateContextList<'a, 'tcx>,\n+fn internalize_symbols<'a, 'tcx>(sess: &Session,\n+                                 ccxs: &CrateContextList<'a, 'tcx>,\n                                  symbol_map: &SymbolMap<'tcx>,\n                                  reachable: &FnvHashSet<&str>) {\n     let scx = ccxs.shared();\n     let tcx = scx.tcx();\n \n+    // In incr. comp. mode, we can't necessarily see all refs since we\n+    // don't generate LLVM IR for reused modules, so skip this\n+    // step. Later we should get smarter.\n+    if sess.opts.debugging_opts.incremental.is_some() {\n+        return;\n+    }\n+\n     // 'unsafe' because we are holding on to CStr's from the LLVM module within\n     // this block.\n     unsafe {\n@@ -2682,7 +2690,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     time(shared_ccx.sess().time_passes(), \"internalize symbols\", || {\n-        internalize_symbols(&crate_context_list,\n+        internalize_symbols(sess,\n+                            &crate_context_list,\n                             &symbol_map,\n                             &reachable_symbols.iter()\n                                               .map(|s| &s[..])"}, {"sha": "32bcbf9f7562beb4e0b7e985d4c6e9b0cac33d58", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -362,8 +362,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if codegen_units.is_empty() {\n         let codegen_unit_name = InternedString::new(FALLBACK_CODEGEN_UNIT);\n         codegen_units.entry(codegen_unit_name.clone())\n-                     .or_insert_with(|| CodegenUnit::new(codegen_unit_name.clone(),\n-                                                         FnvHashMap()));\n+                     .or_insert_with(|| CodegenUnit::empty(codegen_unit_name.clone()));\n     }\n \n     PreInliningPartitioning {"}, {"sha": "fc2758e50f2ce2a2c703db6a7d5a0f88fef5ee4d", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -104,12 +104,8 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 }\n             }\n             TransItem::Fn(instance) => {\n-                let _task;\n-\n-                if instance.def.is_local() {\n-                    _task = ccx.tcx().dep_graph.in_task(\n-                        DepNode::TransCrateItem(instance.def)); // (*)\n-                }\n+                let _task = ccx.tcx().dep_graph.in_task(\n+                    DepNode::TransCrateItem(instance.def)); // (*)\n \n                 base::trans_instance(&ccx, instance);\n             }"}, {"sha": "b00c68a184ed015765e3384555c229a80ac83e67", "filename": "src/test/incremental/spike-neg1.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Ftest%2Fincremental%2Fspike-neg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Ftest%2Fincremental%2Fspike-neg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspike-neg1.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -39,14 +39,10 @@ mod x {\n         X { x: 11, y: 11 }\n     }\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"ItemSignature\", cfg=\"rpass2\")]\n     pub fn new() -> X {\n         make()\n     }\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"ItemSignature\", cfg=\"rpass2\")]\n     pub fn sum(x: &X) -> u32 {\n         x.x + x.y\n     }\n@@ -55,7 +51,6 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n     pub fn assert_sum() -> bool {\n         let x = x::new();\n         x::sum(&x) == 22"}, {"sha": "472d11d7f90286b1b6066529e58cbda0d8f16162", "filename": "src/test/incremental/spike-neg2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Ftest%2Fincremental%2Fspike-neg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb158e0a04c3a73a4c5014609020ee628b4c06/src%2Ftest%2Fincremental%2Fspike-neg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspike-neg2.rs?ref=ceeb158e0a04c3a73a4c5014609020ee628b4c06", "patch": "@@ -39,14 +39,10 @@ mod x {\n         X { x: 11, y: 11 }\n     }\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"ItemSignature\", cfg=\"rpass2\")]\n     pub fn new() -> X {\n         make()\n     }\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"ItemSignature\", cfg=\"rpass2\")]\n     pub fn sum(x: &X) -> u32 {\n         x.x + x.y\n     }\n@@ -55,7 +51,6 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n     pub fn assert_sum() -> bool {\n         let x = x::new();\n         x::sum(&x) == 22"}]}