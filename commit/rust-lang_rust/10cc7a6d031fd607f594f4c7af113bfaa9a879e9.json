{"sha": "10cc7a6d031fd607f594f4c7af113bfaa9a879e9", "node_id": "C_kwDOAAsO6NoAKDEwY2M3YTZkMDMxZmQ2MDdmNTk0ZjRjN2FmMTEzYmZhYTlhODc5ZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-26T19:25:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-26T19:25:04Z"}, "message": "Auto merge of #93449 - JakobDegen:restrict-hasdrop-optimization, r=cjgillot\n\nRestrict query recursion in `needs_significant_drop`\n\nOverly aggressive use of the query system to improve caching lead to query cycles and consequently ICEs. This patch fixes this by restricting the use of the query system as a cache to those cases where it is definitely correct.\n\nCloses #92725 .\n\nThis is essentially a revert of #90845 for the significant drop case only. The general `needs_drop` still does the same thing. The hope is that this is enough to preserve the performance improvements of that PR while fixing the ICE. Should get a perf run to verify that this is the case.\n\ncc `@cjgillot`", "tree": {"sha": "5a3944893475b628259ee0157f0e978445ede8da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a3944893475b628259ee0157f0e978445ede8da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10cc7a6d031fd607f594f4c7af113bfaa9a879e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10cc7a6d031fd607f594f4c7af113bfaa9a879e9", "html_url": "https://github.com/rust-lang/rust/commit/10cc7a6d031fd607f594f4c7af113bfaa9a879e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10cc7a6d031fd607f594f4c7af113bfaa9a879e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8604ef0878b42c1b89e87d42382319dceef5f01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8604ef0878b42c1b89e87d42382319dceef5f01f", "html_url": "https://github.com/rust-lang/rust/commit/8604ef0878b42c1b89e87d42382319dceef5f01f"}, {"sha": "5952d7159a0ea914ae3b2577c1e5be1ae870d9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5952d7159a0ea914ae3b2577c1e5be1ae870d9e2", "html_url": "https://github.com/rust-lang/rust/commit/5952d7159a0ea914ae3b2577c1e5be1ae870d9e2"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "322511be817fb08e6642aa7bceb5375edfc43667", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/10cc7a6d031fd607f594f4c7af113bfaa9a879e9/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cc7a6d031fd607f594f4c7af113bfaa9a879e9/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=10cc7a6d031fd607f594f4c7af113bfaa9a879e9", "patch": "@@ -199,16 +199,11 @@ fn drop_tys_helper<'tcx>(\n     fn with_query_cache<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         iter: impl IntoIterator<Item = Ty<'tcx>>,\n-        only_significant: bool,\n     ) -> NeedsDropResult<Vec<Ty<'tcx>>> {\n         iter.into_iter().try_fold(Vec::new(), |mut vec, subty| {\n             match subty.kind() {\n                 ty::Adt(adt_id, subst) => {\n-                    for subty in if only_significant {\n-                        tcx.adt_significant_drop_tys(adt_id.did)?\n-                    } else {\n-                        tcx.adt_drop_tys(adt_id.did)?\n-                    } {\n+                    for subty in tcx.adt_drop_tys(adt_id.did)? {\n                         vec.push(subty.subst(tcx, subst));\n                     }\n                 }\n@@ -234,25 +229,28 @@ fn drop_tys_helper<'tcx>(\n                     // Since the destructor is insignificant, we just want to make sure all of\n                     // the passed in type parameters are also insignificant.\n                     // Eg: Vec<T> dtor is insignificant when T=i32 but significant when T=Mutex.\n-                    with_query_cache(tcx, substs.types(), only_significant)\n+                    Ok(substs.types().collect())\n                 }\n             }\n         } else if adt_def.is_union() {\n             debug!(\"drop_tys_helper: `{:?}` is a union\", adt_def);\n             Ok(Vec::new())\n         } else {\n-            with_query_cache(\n-                tcx,\n-                adt_def.all_fields().map(|field| {\n-                    let r = tcx.type_of(field.did).subst(tcx, substs);\n-                    debug!(\n-                        \"drop_tys_helper: Subst into {:?} with {:?} gettng {:?}\",\n-                        field, substs, r\n-                    );\n-                    r\n-                }),\n-                only_significant,\n-            )\n+            let field_tys = adt_def.all_fields().map(|field| {\n+                let r = tcx.type_of(field.did).subst(tcx, substs);\n+                debug!(\"drop_tys_helper: Subst into {:?} with {:?} gettng {:?}\", field, substs, r);\n+                r\n+            });\n+            if only_significant {\n+                // We can't recurse through the query system here because we might induce a cycle\n+                Ok(field_tys.collect())\n+            } else {\n+                // We can use the query system if we consider all drops significant. In that case,\n+                // ADTs are `needs_drop` exactly if they `impl Drop` or if any of their \"transitive\"\n+                // fields do. There can be no cycles here, because ADTs cannot contain themselves as\n+                // fields.\n+                with_query_cache(tcx, field_tys)\n+            }\n         }\n         .map(|v| v.into_iter())\n     };"}, {"sha": "a3b17755faccc872ee0403441aeb8ae46579775c", "filename": "src/test/ui/closures/2229_closure_analysis/issue-92724-needsdrop-query-cycle.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10cc7a6d031fd607f594f4c7af113bfaa9a879e9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-92724-needsdrop-query-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cc7a6d031fd607f594f4c7af113bfaa9a879e9/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-92724-needsdrop-query-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-92724-needsdrop-query-cycle.rs?ref=10cc7a6d031fd607f594f4c7af113bfaa9a879e9", "patch": "@@ -0,0 +1,14 @@\n+// ICEs if checking if there is a significant destructor causes a query cycle\n+// check-pass\n+\n+#![warn(rust_2021_incompatible_closure_captures)]\n+pub struct Foo(Bar);\n+pub struct Bar(Baz);\n+pub struct Baz(Vec<Foo>);\n+\n+impl Foo {\n+    pub fn baz(self, v: Baz) -> Baz {\n+        (|| v)()\n+    }\n+}\n+fn main() {}"}]}