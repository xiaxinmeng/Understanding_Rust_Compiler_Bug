{"sha": "347da74edabf329ce84ec81cf22bd65ef944199b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0N2RhNzRlZGFiZjMyOWNlODRlYzgxY2YyMmJkNjVlZjk0NDE5OWI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-26T22:08:02Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-27T11:03:58Z"}, "message": "Avoid allocation in ast::String::value if the string needs no unescaping", "tree": {"sha": "004c9e2a1f3d0e8c8f188fd8b469556658bb4536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/004c9e2a1f3d0e8c8f188fd8b469556658bb4536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/347da74edabf329ce84ec81cf22bd65ef944199b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/347da74edabf329ce84ec81cf22bd65ef944199b", "html_url": "https://github.com/rust-lang/rust/commit/347da74edabf329ce84ec81cf22bd65ef944199b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/347da74edabf329ce84ec81cf22bd65ef944199b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "html_url": "https://github.com/rust-lang/rust/commit/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "b985861f228640fe9124891864263342c82cdf70", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/347da74edabf329ce84ec81cf22bd65ef944199b/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347da74edabf329ce84ec81cf22bd65ef944199b/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=347da74edabf329ce84ec81cf22bd65ef944199b", "patch": "@@ -130,19 +130,28 @@ impl ast::String {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n-        let mut buf = String::with_capacity(text.len());\n+        let mut buf = String::new();\n+        let mut text_iter = text.chars();\n         let mut has_error = false;\n-        unescape_literal(text, Mode::Str, &mut |_, unescaped_char| match unescaped_char {\n-            Ok(c) => buf.push(c),\n-            Err(_) => has_error = true,\n+        unescape_literal(text, Mode::Str, &mut |char_range, unescaped_char| match (\n+            unescaped_char,\n+            buf.capacity() == 0,\n+        ) {\n+            (Ok(c), false) => buf.push(c),\n+            (Ok(c), true) if Some(c) == text_iter.next() => (),\n+            (Ok(c), true) => {\n+                buf.reserve_exact(text.len());\n+                buf.push_str(&text[..char_range.start]);\n+                buf.push(c);\n+            }\n+            (Err(_), _) => has_error = true,\n         });\n \n-        if has_error {\n-            return None;\n+        match (has_error, buf.capacity() == 0) {\n+            (true, _) => None,\n+            (false, true) => Some(Cow::Borrowed(text)),\n+            (false, false) => Some(Cow::Owned(buf)),\n         }\n-        // FIXME: don't actually allocate for borrowed case\n-        let res = if buf == text { Cow::Borrowed(text) } else { Cow::Owned(buf) };\n-        Some(res)\n     }\n \n     pub fn quote_offsets(&self) -> Option<QuoteOffsets> {"}]}