{"sha": "7c3f65b3c4691ff0df270505ebfab89f171c0d28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjM2Y2NWIzYzQ2OTFmZjBkZjI3MDUwNWViZmFiODlmMTcxYzBkMjg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-04T14:46:57Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-04T15:11:33Z"}, "message": "middle::intrinsicck -> rustc_passes", "tree": {"sha": "d0fcc86a6b12d03f52e4aa6542e421a367993047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0fcc86a6b12d03f52e4aa6542e421a367993047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c3f65b3c4691ff0df270505ebfab89f171c0d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3f65b3c4691ff0df270505ebfab89f171c0d28", "html_url": "https://github.com/rust-lang/rust/commit/7c3f65b3c4691ff0df270505ebfab89f171c0d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c3f65b3c4691ff0df270505ebfab89f171c0d28/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "html_url": "https://github.com/rust-lang/rust/commit/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4"}], "stats": {"total": 232, "additions": 118, "deletions": 114}, "files": [{"sha": "512dc5fd887c62a2d5a1534642894cbb07ed4184", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c3f65b3c4691ff0df270505ebfab89f171c0d28/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7c3f65b3c4691ff0df270505ebfab89f171c0d28/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7c3f65b3c4691ff0df270505ebfab89f171c0d28", "patch": "@@ -3613,6 +3613,8 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_index\",\n+ \"rustc_target\",\n  \"syntax\",\n  \"syntax_pos\",\n ]"}, {"sha": "66c51000066b2d35e1b89d41b07ad92b0262df4e", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=7c3f65b3c4691ff0df270505ebfab89f171c0d28", "patch": "@@ -1566,33 +1566,6 @@ It is not possible to use stability attributes outside of the standard library.\n Also, for now, it is not possible to write deprecation messages either.\n \"##,\n \n-E0512: r##\"\n-Transmute with two differently sized types was attempted. Erroneous code\n-example:\n-\n-```compile_fail,E0512\n-fn takes_u8(_: u8) {}\n-\n-fn main() {\n-    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n-    // error: cannot transmute between types of different sizes,\n-    //        or dependently-sized types\n-}\n-```\n-\n-Please use types with same size or use the expected type directly. Example:\n-\n-```\n-fn takes_u8(_: u8) {}\n-\n-fn main() {\n-    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n-    // or:\n-    unsafe { takes_u8(0u8); } // ok!\n-}\n-```\n-\"##,\n-\n E0517: r##\"\n This error indicates that a `#[repr(..)]` attribute was placed on an\n unsupported item.\n@@ -1787,84 +1760,6 @@ See [RFC 1522] for more details.\n [RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n \"##,\n \n-E0591: r##\"\n-Per [RFC 401][rfc401], if you have a function declaration `foo`:\n-\n-```\n-// For the purposes of this explanation, all of these\n-// different kinds of `fn` declarations are equivalent:\n-struct S;\n-fn foo(x: S) { /* ... */ }\n-# #[cfg(for_demonstration_only)]\n-extern \"C\" { fn foo(x: S); }\n-# #[cfg(for_demonstration_only)]\n-impl S { fn foo(self) { /* ... */ } }\n-```\n-\n-the type of `foo` is **not** `fn(S)`, as one might expect.\n-Rather, it is a unique, zero-sized marker type written here as `typeof(foo)`.\n-However, `typeof(foo)` can be _coerced_ to a function pointer `fn(S)`,\n-so you rarely notice this:\n-\n-```\n-# struct S;\n-# fn foo(_: S) {}\n-let x: fn(S) = foo; // OK, coerces\n-```\n-\n-The reason that this matter is that the type `fn(S)` is not specific to\n-any particular function: it's a function _pointer_. So calling `x()` results\n-in a virtual call, whereas `foo()` is statically dispatched, because the type\n-of `foo` tells us precisely what function is being called.\n-\n-As noted above, coercions mean that most code doesn't have to be\n-concerned with this distinction. However, you can tell the difference\n-when using **transmute** to convert a fn item into a fn pointer.\n-\n-This is sometimes done as part of an FFI:\n-\n-```compile_fail,E0591\n-extern \"C\" fn foo(userdata: Box<i32>) {\n-    /* ... */\n-}\n-\n-# fn callback(_: extern \"C\" fn(*mut i32)) {}\n-# use std::mem::transmute;\n-# unsafe {\n-let f: extern \"C\" fn(*mut i32) = transmute(foo);\n-callback(f);\n-# }\n-```\n-\n-Here, transmute is being used to convert the types of the fn arguments.\n-This pattern is incorrect because, because the type of `foo` is a function\n-**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n-is a function pointer, which is not zero-sized.\n-This pattern should be rewritten. There are a few possible ways to do this:\n-\n-- change the original fn declaration to match the expected signature,\n-  and do the cast in the fn body (the preferred option)\n-- cast the fn item fo a fn pointer before calling transmute, as shown here:\n-\n-    ```\n-    # extern \"C\" fn foo(_: Box<i32>) {}\n-    # use std::mem::transmute;\n-    # unsafe {\n-    let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_));\n-    let f: extern \"C\" fn(*mut i32) = transmute(foo as usize); // works too\n-    # }\n-    ```\n-\n-The same applies to transmutes to `*mut fn()`, which were observed in practice.\n-Note though that use of this type is generally incorrect.\n-The intention is typically to describe a function pointer, but just `fn()`\n-alone suffices for that. `*mut fn()` is a pointer to a fn pointer.\n-(Since these values are typically just passed to C code, however, this rarely\n-makes a difference in practice.)\n-\n-[rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n-\"##,\n-\n E0593: r##\"\n You tried to supply an `Fn`-based type with an incorrect number of arguments\n than what was expected."}, {"sha": "0eea149f30aee2e91a04300a68685d4b8af9b949", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=7c3f65b3c4691ff0df270505ebfab89f171c0d28", "patch": "@@ -106,7 +106,6 @@ pub mod middle {\n     pub mod diagnostic_items;\n     pub mod exported_symbols;\n     pub mod free_region;\n-    pub mod intrinsicck;\n     pub mod lib_features;\n     pub mod lang_items;\n     pub mod mem_categorization;"}, {"sha": "870f804ed4478e62d32584fcc0c2717d6e3b8e9f", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=7c3f65b3c4691ff0df270505ebfab89f171c0d28", "patch": "@@ -780,7 +780,6 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     ty::provide(providers);\n     traits::provide(providers);\n     stability::provide(providers);\n-    middle::intrinsicck::provide(providers);\n     reachable::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);"}, {"sha": "9d29a230314437f8e6b887d91c901551ebffdd78", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=7c3f65b3c4691ff0df270505ebfab89f171c0d28", "patch": "@@ -15,3 +15,5 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_target = { path = \"../librustc_target\" }\n+rustc_index = { path = \"../librustc_index\" }"}, {"sha": "1c61eb35497d7ab26adbdc83533d794d2b93cadf", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=7c3f65b3c4691ff0df270505ebfab89f171c0d28", "patch": "@@ -396,6 +396,111 @@ If you don't know the basics of Rust, you can go look to the Rust Book to get\n started: https://doc.rust-lang.org/book/\n \"##,\n \n+E0591: r##\"\n+Per [RFC 401][rfc401], if you have a function declaration `foo`:\n+\n+```\n+// For the purposes of this explanation, all of these\n+// different kinds of `fn` declarations are equivalent:\n+struct S;\n+fn foo(x: S) { /* ... */ }\n+# #[cfg(for_demonstration_only)]\n+extern \"C\" { fn foo(x: S); }\n+# #[cfg(for_demonstration_only)]\n+impl S { fn foo(self) { /* ... */ } }\n+```\n+\n+the type of `foo` is **not** `fn(S)`, as one might expect.\n+Rather, it is a unique, zero-sized marker type written here as `typeof(foo)`.\n+However, `typeof(foo)` can be _coerced_ to a function pointer `fn(S)`,\n+so you rarely notice this:\n+\n+```\n+# struct S;\n+# fn foo(_: S) {}\n+let x: fn(S) = foo; // OK, coerces\n+```\n+\n+The reason that this matter is that the type `fn(S)` is not specific to\n+any particular function: it's a function _pointer_. So calling `x()` results\n+in a virtual call, whereas `foo()` is statically dispatched, because the type\n+of `foo` tells us precisely what function is being called.\n+\n+As noted above, coercions mean that most code doesn't have to be\n+concerned with this distinction. However, you can tell the difference\n+when using **transmute** to convert a fn item into a fn pointer.\n+\n+This is sometimes done as part of an FFI:\n+\n+```compile_fail,E0591\n+extern \"C\" fn foo(userdata: Box<i32>) {\n+    /* ... */\n+}\n+\n+# fn callback(_: extern \"C\" fn(*mut i32)) {}\n+# use std::mem::transmute;\n+# unsafe {\n+let f: extern \"C\" fn(*mut i32) = transmute(foo);\n+callback(f);\n+# }\n+```\n+\n+Here, transmute is being used to convert the types of the fn arguments.\n+This pattern is incorrect because, because the type of `foo` is a function\n+**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n+is a function pointer, which is not zero-sized.\n+This pattern should be rewritten. There are a few possible ways to do this:\n+\n+- change the original fn declaration to match the expected signature,\n+  and do the cast in the fn body (the preferred option)\n+- cast the fn item fo a fn pointer before calling transmute, as shown here:\n+\n+    ```\n+    # extern \"C\" fn foo(_: Box<i32>) {}\n+    # use std::mem::transmute;\n+    # unsafe {\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_));\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo as usize); // works too\n+    # }\n+    ```\n+\n+The same applies to transmutes to `*mut fn()`, which were observed in practice.\n+Note though that use of this type is generally incorrect.\n+The intention is typically to describe a function pointer, but just `fn()`\n+alone suffices for that. `*mut fn()` is a pointer to a fn pointer.\n+(Since these values are typically just passed to C code, however, this rarely\n+makes a difference in practice.)\n+\n+[rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+\"##,\n+\n+E0512: r##\"\n+Transmute with two differently sized types was attempted. Erroneous code\n+example:\n+\n+```compile_fail,E0512\n+fn takes_u8(_: u8) {}\n+\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n+    // error: cannot transmute between types of different sizes,\n+    //        or dependently-sized types\n+}\n+```\n+\n+Please use types with same size or use the expected type directly. Example:\n+\n+```\n+fn takes_u8(_: u8) {}\n+\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n+    // or:\n+    unsafe { takes_u8(0u8); } // ok!\n+}\n+```\n+\"##,\n+\n ;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target"}, {"sha": "91a7e9f5d7fcadbaf8eea16c67cc91676fd3e8f0", "filename": "src/librustc_passes/intrinsicck.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=7c3f65b3c4691ff0df270505ebfab89f171c0d28", "patch": "@@ -1,14 +1,14 @@\n-use crate::hir::def::{Res, DefKind};\n-use crate::hir::def_id::DefId;\n-use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n-use crate::ty::query::Providers;\n+use rustc::hir::def::{Res, DefKind};\n+use rustc::hir::def_id::DefId;\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n+use rustc::ty::query::Providers;\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_index::vec::Idx;\n use syntax_pos::{Span, sym};\n-use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use crate::hir;\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::hir;\n \n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(", "previous_filename": "src/librustc/middle/intrinsicck.rs"}, {"sha": "db59d8e101f77df07c0655f3e7bc5c761196cd7a", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3f65b3c4691ff0df270505ebfab89f171c0d28/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=7c3f65b3c4691ff0df270505ebfab89f171c0d28", "patch": "@@ -29,9 +29,11 @@ pub mod loops;\n pub mod dead;\n pub mod entry;\n mod liveness;\n+mod intrinsicck;\n \n pub fn provide(providers: &mut Providers<'_>) {\n     entry::provide(providers);\n     loops::provide(providers);\n     liveness::provide(providers);\n+    intrinsicck::provide(providers);\n }"}]}