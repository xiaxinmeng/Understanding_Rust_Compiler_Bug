{"sha": "26ebc3e9a10a6b8748dfe256c8f6d478c88d2ee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZWJjM2U5YTEwYTZiODc0OGRmZTI1NmM4ZjZkNDc4Yzg4ZDJlZTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-11T02:37:37Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-11T06:40:42Z"}, "message": "Fix consts.rs", "tree": {"sha": "cb9e82829fa1b3adadf2980284566e32b0114f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb9e82829fa1b3adadf2980284566e32b0114f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26ebc3e9a10a6b8748dfe256c8f6d478c88d2ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26ebc3e9a10a6b8748dfe256c8f6d478c88d2ee4", "html_url": "https://github.com/rust-lang/rust/commit/26ebc3e9a10a6b8748dfe256c8f6d478c88d2ee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26ebc3e9a10a6b8748dfe256c8f6d478c88d2ee4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9ed92ce20fbb2871311d493148523814cca7f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ed92ce20fbb2871311d493148523814cca7f1d", "html_url": "https://github.com/rust-lang/rust/commit/c9ed92ce20fbb2871311d493148523814cca7f1d"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "c96c7e7e857a3b4dc777bc546f34fc855e176eaa", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26ebc3e9a10a6b8748dfe256c8f6d478c88d2ee4/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ebc3e9a10a6b8748dfe256c8f6d478c88d2ee4/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=26ebc3e9a10a6b8748dfe256c8f6d478c88d2ee4", "patch": "@@ -1,6 +1,6 @@\n #![allow(clippy::float_cmp)]\n \n-use crate::utils::{clip, sext, unsext};\n+use crate::utils::{clip, higher, sext, unsext};\n use if_chain::if_chain;\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::*;\n@@ -15,7 +15,6 @@ use std::convert::TryFrom;\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use syntax::ast::{FloatTy, LitKind};\n-use syntax::ptr::P;\n use syntax_pos::symbol::{LocalInternedString, Symbol};\n \n /// A `LitKind`-like enum to fold constant `Expr`s into.\n@@ -222,10 +221,12 @@ pub struct ConstEvalLateContext<'a, 'tcx: 'a> {\n impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     /// Simple constant folding: Insert an expression, get a constant or none.\n     pub fn expr(&mut self, e: &Expr) -> Option<Constant> {\n+        if let Some((ref cond, ref then, otherwise)) = higher::if_block(&e) {\n+            return self.ifthenelse(cond, then, otherwise);\n+        }\n         match e.node {\n             ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id),\n             ExprKind::Block(ref block, _) => self.block(block),\n-            ExprKind::If(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, otherwise),\n             ExprKind::Lit(ref lit) => Some(lit_to_constant(&lit.node, self.tables.expr_ty(e))),\n             ExprKind::Array(ref vec) => self.multi(vec).map(Constant::Vec),\n             ExprKind::Tup(ref tup) => self.multi(tup).map(Constant::Tuple),\n@@ -358,10 +359,10 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         }\n     }\n \n-    fn ifthenelse(&mut self, cond: &Expr, then: &P<Expr>, otherwise: &Option<P<Expr>>) -> Option<Constant> {\n+    fn ifthenelse(&mut self, cond: &Expr, then: &Expr, otherwise: Option<&Expr>) -> Option<Constant> {\n         if let Some(Constant::Bool(b)) = self.expr(cond) {\n             if b {\n-                self.expr(&**then)\n+                self.expr(&*then)\n             } else {\n                 otherwise.as_ref().and_then(|expr| self.expr(expr))\n             }"}]}