{"sha": "781fc902a40001f23d24d76eb799551c308a5900", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MWZjOTAyYTQwMDAxZjIzZDI0ZDc2ZWI3OTk1NTFjMzA4YTU5MDA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-10T17:00:38Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-10T17:11:00Z"}, "message": "Incorporate repr-attr into deriving(PartialOrd) to avoid truncation errors.\n\nremove out of date fixme.", "tree": {"sha": "2585b7e36db2d982b708a246f069e568522d593e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2585b7e36db2d982b708a246f069e568522d593e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/781fc902a40001f23d24d76eb799551c308a5900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/781fc902a40001f23d24d76eb799551c308a5900", "html_url": "https://github.com/rust-lang/rust/commit/781fc902a40001f23d24d76eb799551c308a5900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/781fc902a40001f23d24d76eb799551c308a5900/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb7acff57cf301f6229eb9a07060d694ed2b3ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb7acff57cf301f6229eb9a07060d694ed2b3ed", "html_url": "https://github.com/rust-lang/rust/commit/afb7acff57cf301f6229eb9a07060d694ed2b3ed"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "6a85297b6580fbe20a2543574ba21e68e88e6439", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/781fc902a40001f23d24d76eb799551c308a5900/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781fc902a40001f23d24d76eb799551c308a5900/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=781fc902a40001f23d24d76eb799551c308a5900", "patch": "@@ -201,6 +201,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use codemap::{self, DUMMY_SP};\n use codemap::Span;\n+use diagnostic::SpanHandler;\n use fold::MoveMap;\n use owned_slice::OwnedSlice;\n use parse::token::InternedString;\n@@ -391,6 +392,7 @@ impl<'a> TraitDef<'a> {\n             ast::ItemEnum(ref enum_def, ref generics) => {\n                 self.expand_enum_def(cx,\n                                      enum_def,\n+                                     &item.attrs[..],\n                                      item.ident,\n                                      generics)\n             }\n@@ -653,6 +655,7 @@ impl<'a> TraitDef<'a> {\n     fn expand_enum_def(&self,\n                        cx: &mut ExtCtxt,\n                        enum_def: &EnumDef,\n+                       type_attrs: &[ast::Attribute],\n                        type_ident: Ident,\n                        generics: &Generics) -> P<ast::Item> {\n         let mut field_tys = Vec::new();\n@@ -687,6 +690,7 @@ impl<'a> TraitDef<'a> {\n                 method_def.expand_enum_method_body(cx,\n                                                    self,\n                                                    enum_def,\n+                                                   type_attrs,\n                                                    type_ident,\n                                                    self_args,\n                                                    &nonself_args[..])\n@@ -706,6 +710,32 @@ impl<'a> TraitDef<'a> {\n     }\n }\n \n+fn find_repr_type_name(diagnostic: &SpanHandler,\n+                       type_attrs: &[ast::Attribute]) -> &'static str {\n+    let mut repr_type_name = \"i32\";\n+    for a in type_attrs {\n+        for r in &attr::find_repr_attrs(diagnostic, a) {\n+            repr_type_name = match *r {\n+                attr::ReprAny | attr::ReprPacked => continue,\n+                attr::ReprExtern => \"i32\",\n+\n+                attr::ReprInt(_, attr::SignedInt(ast::TyIs)) => \"isize\",\n+                attr::ReprInt(_, attr::SignedInt(ast::TyI8)) => \"i8\",\n+                attr::ReprInt(_, attr::SignedInt(ast::TyI16)) => \"i16\",\n+                attr::ReprInt(_, attr::SignedInt(ast::TyI32)) => \"i32\",\n+                attr::ReprInt(_, attr::SignedInt(ast::TyI64)) => \"i64\",\n+\n+                attr::ReprInt(_, attr::UnsignedInt(ast::TyUs)) => \"usize\",\n+                attr::ReprInt(_, attr::UnsignedInt(ast::TyU8)) => \"u8\",\n+                attr::ReprInt(_, attr::UnsignedInt(ast::TyU16)) => \"u16\",\n+                attr::ReprInt(_, attr::UnsignedInt(ast::TyU32)) => \"u32\",\n+                attr::ReprInt(_, attr::UnsignedInt(ast::TyU64)) => \"u64\",\n+            }\n+        }\n+    }\n+    repr_type_name\n+}\n+\n impl<'a> MethodDef<'a> {\n     fn call_substructure_method(&self,\n                                 cx: &mut ExtCtxt,\n@@ -974,12 +1004,13 @@ impl<'a> MethodDef<'a> {\n                                cx: &mut ExtCtxt,\n                                trait_: &TraitDef,\n                                enum_def: &EnumDef,\n+                               type_attrs: &[ast::Attribute],\n                                type_ident: Ident,\n                                self_args: Vec<P<Expr>>,\n                                nonself_args: &[P<Expr>])\n                                -> P<Expr> {\n         self.build_enum_match_tuple(\n-            cx, trait_, enum_def, type_ident, self_args, nonself_args)\n+            cx, trait_, enum_def, type_attrs, type_ident, self_args, nonself_args)\n     }\n \n \n@@ -1013,6 +1044,7 @@ impl<'a> MethodDef<'a> {\n         cx: &mut ExtCtxt,\n         trait_: &TraitDef,\n         enum_def: &EnumDef,\n+        type_attrs: &[ast::Attribute],\n         type_ident: Ident,\n         self_args: Vec<P<Expr>>,\n         nonself_args: &[P<Expr>]) -> P<Expr> {\n@@ -1168,6 +1200,10 @@ impl<'a> MethodDef<'a> {\n             //     std::intrinsics::discriminant_value(&__arg2) } as isize;\n             // ```\n             let mut index_let_stmts: Vec<P<ast::Stmt>> = Vec::new();\n+\n+            let target_type_name =\n+                find_repr_type_name(&cx.parse_sess.span_diagnostic, type_attrs);\n+\n             for (&ident, self_arg) in vi_idents.iter().zip(self_args.iter()) {\n                 let path = vec![cx.ident_of_std(\"core\"),\n                                 cx.ident_of(\"intrinsics\"),\n@@ -1181,18 +1217,7 @@ impl<'a> MethodDef<'a> {\n                     rules: ast::UnsafeBlock(ast::CompilerGenerated),\n                     span: sp }));\n \n-                // FIXME: This unconditionally casts to `isize`. However:\n-                //\n-                // 1. On 32-bit platforms, that will truncate 64-bit enums\n-                //    that are making use of the upper 32 bits, and\n-                //\n-                // 2. On all platforms, it will misinterpret the sign bit\n-                //    of a 64-bit enum.\n-                //\n-                // What it should do is lookup whether the enum has an\n-                // repr-attribute and cast to that if necessary. But\n-                // attributes are not yet available to this function.\n-                let target_ty = cx.ty_ident(sp, cx.ident_of(\"isize\"));\n+                let target_ty = cx.ty_ident(sp, cx.ident_of(target_type_name));\n                 let variant_disr = cx.expr_cast(sp, variant_value, target_ty);\n                 let let_stmt = cx.stmt_let(sp, false, ident, variant_disr);\n                 index_let_stmts.push(let_stmt);"}]}