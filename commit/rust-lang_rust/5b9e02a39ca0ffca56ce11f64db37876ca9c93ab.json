{"sha": "5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOWUwMmEzOWNhMGZmY2E1NmNlMTFmNjRkYjM3ODc2Y2E5YzkzYWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-19T18:41:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-19T18:41:22Z"}, "message": "Rollup merge of #57723 - estebank:fix, r=davidtwco\n\nPoint at cause for expectation in return type type error\n\nVarious improvements and fixes for type errors in return expressions.\n\nFix #57664.", "tree": {"sha": "bbeff223155bf541e05796dae69881de52ce9627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbeff223155bf541e05796dae69881de52ce9627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQ29TCRBK7hj4Ov3rIwAAdHIIADRZkyyUPjCbnitUj5lIz7Ka\nZsllkD/SqDh9WSmNI/J1fsN1FZzQnNkbXwEZmQ3aqSDAFsVKN3Pp4OvhbXvMTtuc\nrpvRuE3TldcxWVg4OuwKw0YkOHu67W4qXXTrLxmnobFmySTCzDobcbpWUONy7LmY\nH5xFBiF7puf6sPvjVIZlR6YAcNFN6QXsc0L7rzv3SbtiPNFQX0+5xOL7qCjP91QY\nNUcWLtCRTAVUn/P1wqOivuonI/jwOx2pTgb/kic1uHyYcESi6ts21aEwhoWXFv5W\n0PRMyuPY3T998PUGNA/pNG52d4a+TfAoaSinyKvgO4jE6MD+UUDQ44C6LW8RGd0=\n=g7pw\n-----END PGP SIGNATURE-----\n", "payload": "tree bbeff223155bf541e05796dae69881de52ce9627\nparent 3bc61cd13c3284e0e6dd3a6fdc89a52f92942411\nparent 2e06d9c91b9f0bccde4a0e445ce2014c3fe85506\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547923282 +0100\ncommitter GitHub <noreply@github.com> 1547923282 +0100\n\nRollup merge of #57723 - estebank:fix, r=davidtwco\n\nPoint at cause for expectation in return type type error\n\nVarious improvements and fixes for type errors in return expressions.\n\nFix #57664.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "html_url": "https://github.com/rust-lang/rust/commit/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc61cd13c3284e0e6dd3a6fdc89a52f92942411", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc61cd13c3284e0e6dd3a6fdc89a52f92942411", "html_url": "https://github.com/rust-lang/rust/commit/3bc61cd13c3284e0e6dd3a6fdc89a52f92942411"}, {"sha": "2e06d9c91b9f0bccde4a0e445ce2014c3fe85506", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e06d9c91b9f0bccde4a0e445ce2014c3fe85506", "html_url": "https://github.com/rust-lang/rust/commit/2e06d9c91b9f0bccde4a0e445ce2014c3fe85506"}], "stats": {"total": 220, "additions": 201, "deletions": 19}, "files": [{"sha": "dd63b4f20fa55a4f92cfa832d205b52a56072eb1", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -1216,28 +1216,60 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                                       \"supposed to be part of a block tail expression, but the \\\n                                        expression is empty\");\n                         });\n-                        fcx.suggest_mismatched_types_on_tail(\n+                        let pointing_at_return_type = fcx.suggest_mismatched_types_on_tail(\n                             &mut db,\n                             expr,\n                             expected,\n                             found,\n                             cause.span,\n                             blk_id,\n                         );\n-                        if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n-                            if !sp.overlaps(cause.span) {\n+                        // FIXME: replace with navigating up the chain until hitting an fn or\n+                        // bailing if no \"pass-through\" Node is found, in order to provide a\n+                        // suggestion when encountering something like:\n+                        // ```\n+                        // fn foo(a: bool) -> impl Debug {\n+                        //     if a {\n+                        //         bar()?;\n+                        //     }\n+                        //     {\n+                        //         let x = unsafe { bar() };\n+                        //         x\n+                        //     }\n+                        // }\n+                        // ```\n+                        //\n+                        // Verify that this is a tail expression of a function, otherwise the\n+                        // label pointing out the cause for the type coercion will be wrong\n+                        // as prior return coercions would not be relevant (#57664).\n+                        let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n+                        let parent = fcx.tcx.hir().get(fcx.tcx.hir().get_parent_node(parent_id));\n+                        if fcx.get_node_fn_decl(parent).is_some() && !pointing_at_return_type {\n+                            if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n                                 db.span_label(*sp, reason_label);\n                             }\n                         }\n                     }\n-                    _ => {\n+                    ObligationCauseCode::ReturnType(_id) => {\n                         db = fcx.report_mismatched_types(cause, expected, found, err);\n-                        if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n+                        let _id = fcx.tcx.hir().get_parent_node(_id);\n+                        let mut pointing_at_return_type = false;\n+                        if let Some((fn_decl, can_suggest)) = fcx.get_fn_decl(_id) {\n+                            pointing_at_return_type = fcx.suggest_missing_return_type(\n+                                &mut db, &fn_decl, expected, found, can_suggest);\n+                        }\n+                        if let (Some(sp), false) = (\n+                            fcx.ret_coercion_span.borrow().as_ref(),\n+                            pointing_at_return_type,\n+                        ) {\n                             if !sp.overlaps(cause.span) {\n                                 db.span_label(*sp, reason_label);\n                             }\n                         }\n                     }\n+                    _ => {\n+                        db = fcx.report_mismatched_types(cause, expected, found, err);\n+                    }\n                 }\n \n                 if let Some(augment_error) = augment_error {"}, {"sha": "c9173dfea940cbe0f0ccdedfd3d8d32d60bf5b8e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -4347,11 +4347,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     struct_span_err!(self.tcx.sess, expr.span, E0572,\n                                      \"return statement outside of function body\").emit();\n                 } else if let Some(ref e) = *expr_opt {\n-                    *self.ret_coercion_span.borrow_mut() = Some(e.span);\n+                    if self.ret_coercion_span.borrow().is_none() {\n+                        *self.ret_coercion_span.borrow_mut() = Some(e.span);\n+                    }\n                     self.check_return_expr(e);\n                 } else {\n                     let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n-                    *self.ret_coercion_span.borrow_mut() = Some(expr.span);\n+                    if self.ret_coercion_span.borrow().is_none() {\n+                        *self.ret_coercion_span.borrow_mut() = Some(expr.span);\n+                    }\n                     let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n                     if let Some((fn_decl, _)) = self.get_fn_decl(expr.id) {\n                         coercion.coerce_forced_unit(\n@@ -5081,12 +5085,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         found: Ty<'tcx>,\n         cause_span: Span,\n         blk_id: ast::NodeId,\n-    ) {\n+    ) -> bool {\n         self.suggest_missing_semicolon(err, expression, expected, cause_span);\n+        let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n-            self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n+            pointing_at_return_type = self.suggest_missing_return_type(\n+                err, &fn_decl, expected, found, can_suggest);\n         }\n         self.suggest_ref_or_into(err, expression, expected, found);\n+        pointing_at_return_type\n     }\n \n     pub fn suggest_ref_or_into(\n@@ -5185,12 +5192,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// This routine checks if the return type is left as default, the method is not part of an\n     /// `impl` block and that it isn't the `main` method. If so, it suggests setting the return\n     /// type.\n-    fn suggest_missing_return_type(&self,\n-                                   err: &mut DiagnosticBuilder<'tcx>,\n-                                   fn_decl: &hir::FnDecl,\n-                                   expected: Ty<'tcx>,\n-                                   found: Ty<'tcx>,\n-                                   can_suggest: bool) {\n+    fn suggest_missing_return_type(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        fn_decl: &hir::FnDecl,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+        can_suggest: bool,\n+    ) -> bool {\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n         match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_unit()) {\n@@ -5200,16 +5209,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     \"try adding a return type\",\n                     format!(\"-> {} \", self.resolve_type_vars_with_obligations(found)),\n                     Applicability::MachineApplicable);\n+                true\n             }\n             (&hir::FunctionRetTy::DefaultReturn(span), false, true, true) => {\n                 err.span_label(span, \"possibly return type missing here?\");\n+                true\n             }\n             (&hir::FunctionRetTy::DefaultReturn(span), _, false, true) => {\n                 // `fn main()` must return `()`, do not suggest changing return type\n                 err.span_label(span, \"expected `()` because of default return type\");\n+                true\n             }\n             // expectation was caused by something else, not the default return\n-            (&hir::FunctionRetTy::DefaultReturn(_), _, _, false) => {}\n+            (&hir::FunctionRetTy::DefaultReturn(_), _, _, false) => false,\n             (&hir::FunctionRetTy::Return(ref ty), _, _, _) => {\n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n@@ -5221,7 +5233,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if ty.sty == expected.sty {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\",\n                                                expected));\n+                    return true;\n                 }\n+                false\n             }\n         }\n     }"}, {"sha": "47bb5e475b473e5ee4ff2886e04fcb6dbc39bb74", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/fully-qualified-type-name2.rs:12:12\n    |\n+LL | fn bar(x: x::Foo) -> y::Foo {\n+   |                      ------ expected `y::Foo` because of return type\n LL |     return x;\n    |            ^ expected enum `y::Foo`, found enum `x::Foo`\n    |"}, {"sha": "b341879ab919afaf78070b8058ad81f129da47a8", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/fully-qualified-type-name4.rs:6:12\n    |\n+LL | fn bar(x: usize) -> Option<usize> {\n+   |                     ------------- expected `std::option::Option<usize>` because of return type\n LL |     return x;\n    |            ^ expected enum `std::option::Option`, found usize\n    |"}, {"sha": "a970b80fdbbd93e9da12b018c0207f75487675a5", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-forgot-ret.rs:3:19\n    |\n LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n-   |    -              ^^^^^ expected isize, found ()    - expected because of this statement\n+   |    -              ^^^^^ expected isize, found ()\n    |    |\n    |    this function's body doesn't return\n    |"}, {"sha": "50f1fe873cb5fa1cd96f0eb31a185c3c161d4299", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.rs?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -0,0 +1,17 @@\n+fn unrelated() -> Result<(), std::string::ParseError> {  // #57664\n+    let x = 0;\n+\n+    match x {\n+        1 => {\n+            let property_value_as_string = \"a\".parse()?;\n+        }\n+        2 => {\n+            let value: &bool = unsafe { &42 };\n+            //~^ ERROR mismatched types\n+        }\n+    };\n+\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "edaa60e5b8d8b84a8cd8025b62ca7321cc85b299", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return-2.rs:9:41\n+   |\n+LL |             let value: &bool = unsafe { &42 };\n+   |                                         ^^^ expected bool, found integer\n+   |\n+   = note: expected type `&bool`\n+              found type `&{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "95b40368143efd6da0d1ec9be7c02153015ba075", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -0,0 +1,36 @@\n+fn foo() -> impl std::fmt::Display {\n+    if false {\n+        return 0i32;\n+    }\n+    1u32\n+    //~^ ERROR mismatched types\n+}\n+\n+fn bar() -> impl std::fmt::Display {\n+    if false {\n+        return 0i32;\n+    } else {\n+        return 1u32;\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn baz() -> impl std::fmt::Display {\n+    if false {\n+    //~^ ERROR mismatched types\n+        return 0i32;\n+    } else {\n+        1u32\n+    }\n+}\n+\n+fn qux() -> impl std::fmt::Display {\n+    if false {\n+        0i32\n+    } else {\n+        1u32\n+        //~^ ERROR if and else have incompatible types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "62da0787b02a9350dba5b7eaa871076ca0cd6f90", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -0,0 +1,58 @@\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:5:5\n+   |\n+LL |         return 0i32;\n+   |                ---- expected because of this statement\n+LL |     }\n+LL |     1u32\n+   |     ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:13:16\n+   |\n+LL |         return 0i32;\n+   |                ---- expected because of this statement\n+LL |     } else {\n+LL |         return 1u32;\n+   |                ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:19:5\n+   |\n+LL | /     if false {\n+LL | |     //~^ ERROR mismatched types\n+LL | |         return 0i32;\n+   | |                ---- expected because of this statement\n+LL | |     } else {\n+LL | |         1u32\n+LL | |     }\n+   | |_____^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:31:9\n+   |\n+LL | /     if false {\n+LL | |         0i32\n+   | |         ---- expected because of this\n+LL | |     } else {\n+LL | |         1u32\n+   | |         ^^^^ expected i32, found u32\n+LL | |         //~^ ERROR if and else have incompatible types\n+LL | |     }\n+   | |_____- if and else have incompatible types\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "db524907b656f4760625c69c1cd1583bf8b52757", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -15,6 +15,9 @@ LL |     let x: usize = \"hello\";;;;; //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:19:29\n    |\n+LL | fn b(x: Option<isize>) -> usize {\n+   |                           ----- expected `usize` because of return type\n+LL |     match x {\n LL |         Some(x) => { return x }, //~ ERROR mismatched types\n    |                             ^ expected usize, found isize\n "}, {"sha": "2862ae641df15b3341c6700cfd3f786e08a6a687", "filename": "src/test/ui/return/return-from-diverging.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/return-from-diverging.rs:4:12\n    |\n+LL | fn fail() -> ! {\n+   |              - expected `!` because of return type\n LL |     return \"wow\"; //~ ERROR mismatched types\n    |            ^^^^^ expected !, found reference\n    |"}, {"sha": "1170f5c17c18ab648658a716562dec311259ef48", "filename": "src/test/ui/tail-typeck.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Ftail-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Ftail-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftail-typeck.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/tail-typeck.rs:3:26\n    |\n LL | fn f() -> isize { return g(); }\n-   |                          ^^^ expected isize, found usize\n+   |           -----          ^^^ expected isize, found usize\n+   |           |\n+   |           expected `isize` because of return type\n \n error: aborting due to previous error\n "}, {"sha": "cf59f42683d721647c54a17bfcf7165d6730b5f0", "filename": "src/test/ui/wrong-ret-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e02a39ca0ffca56ce11f64db37876ca9c93ab/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-ret-type.stderr?ref=5b9e02a39ca0ffca56ce11f64db37876ca9c93ab", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/wrong-ret-type.rs:2:49\n    |\n LL | fn mk_int() -> usize { let i: isize = 3; return i; }\n-   |                                                 ^ expected usize, found isize\n+   |                -----                            ^ expected usize, found isize\n+   |                |\n+   |                expected `usize` because of return type\n \n error: aborting due to previous error\n "}]}