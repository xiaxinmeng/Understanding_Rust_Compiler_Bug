{"sha": "b8dcd2fbce4550b1ef46d270546bd8480098cdca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZGNkMmZiY2U0NTUwYjFlZjQ2ZDI3MDU0NmJkODQ4MDA5OGNkY2E=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T17:01:27Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-16T04:18:59Z"}, "message": "Take sys/vxworks/mutex from sys/unix instead.", "tree": {"sha": "4a612f828b6a39f158ab5f678d1761db4feab554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a612f828b6a39f158ab5f678d1761db4feab554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8dcd2fbce4550b1ef46d270546bd8480098cdca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8dcd2fbce4550b1ef46d270546bd8480098cdca", "html_url": "https://github.com/rust-lang/rust/commit/b8dcd2fbce4550b1ef46d270546bd8480098cdca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8dcd2fbce4550b1ef46d270546bd8480098cdca/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e2dc6cdece6b498b876bc7e9377ff7d63d93e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e2dc6cdece6b498b876bc7e9377ff7d63d93e7", "html_url": "https://github.com/rust-lang/rust/commit/b6e2dc6cdece6b498b876bc7e9377ff7d63d93e7"}], "stats": {"total": 134, "additions": 1, "deletions": 133}, "files": [{"sha": "3f47c7bda60535050582d9d03b38b1a1eb2a6b7f", "filename": "library/std/src/sys/vxworks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8dcd2fbce4550b1ef46d270546bd8480098cdca/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dcd2fbce4550b1ef46d270546bd8480098cdca/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs?ref=b8dcd2fbce4550b1ef46d270546bd8480098cdca", "patch": "@@ -17,6 +17,7 @@ pub mod fd;\n pub mod fs;\n pub mod io;\n pub mod memchr;\n+#[path = \"../unix/mutex.rs\"]\n pub mod mutex;\n pub mod net;\n pub mod os;"}, {"sha": "dd7582c21a72725ae20e6b7c42f8ffbac3ca3377", "filename": "library/std/src/sys/vxworks/mutex.rs", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/b6e2dc6cdece6b498b876bc7e9377ff7d63d93e7/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e2dc6cdece6b498b876bc7e9377ff7d63d93e7/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmutex.rs?ref=b6e2dc6cdece6b498b876bc7e9377ff7d63d93e7", "patch": "@@ -1,133 +0,0 @@\n-use crate::cell::UnsafeCell;\n-use crate::mem::MaybeUninit;\n-\n-pub struct Mutex {\n-    inner: UnsafeCell<libc::pthread_mutex_t>,\n-}\n-\n-pub type MovableMutex = Box<Mutex>;\n-\n-#[inline]\n-pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n-    m.inner.get()\n-}\n-\n-unsafe impl Send for Mutex {}\n-unsafe impl Sync for Mutex {}\n-\n-#[allow(dead_code)] // sys isn't exported yet\n-impl Mutex {\n-    pub const fn new() -> Mutex {\n-        // Might be moved to a different address, so it is better to avoid\n-        // initialization of potentially opaque OS data before it landed.\n-        // Be very careful using this newly constructed `Mutex`, reentrant\n-        // locking is undefined behavior until `init` is called!\n-        Mutex { inner: UnsafeCell::new(libc::PTHREAD_MUTEX_INITIALIZER) }\n-    }\n-    #[inline]\n-    pub unsafe fn init(&mut self) {\n-        // Issue #33770\n-        //\n-        // A pthread mutex initialized with PTHREAD_MUTEX_INITIALIZER will have\n-        // a type of PTHREAD_MUTEX_DEFAULT, which has undefined behavior if you\n-        // try to re-lock it from the same thread when you already hold a lock.\n-        //\n-        // In practice, glibc takes advantage of this undefined behavior to\n-        // implement hardware lock elision, which uses hardware transactional\n-        // memory to avoid acquiring the lock. While a transaction is in\n-        // progress, the lock appears to be unlocked. This isn't a problem for\n-        // other threads since the transactional memory will abort if a conflict\n-        // is detected, however no abort is generated if re-locking from the\n-        // same thread.\n-        //\n-        // Since locking the same mutex twice will result in two aliasing &mut\n-        // references, we instead create the mutex with type\n-        // PTHREAD_MUTEX_NORMAL which is guaranteed to deadlock if we try to\n-        // re-lock it from the same thread, thus avoiding undefined behavior.\n-        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n-        let r = libc::pthread_mutexattr_init(attr.as_mut_ptr());\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutexattr_settype(attr.as_mut_ptr(), libc::PTHREAD_MUTEX_NORMAL);\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutex_init(self.inner.get(), attr.as_ptr());\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n-        debug_assert_eq!(r, 0);\n-    }\n-    #[inline]\n-    pub unsafe fn lock(&self) {\n-        let r = libc::pthread_mutex_lock(self.inner.get());\n-        debug_assert_eq!(r, 0);\n-    }\n-    #[inline]\n-    pub unsafe fn unlock(&self) {\n-        let r = libc::pthread_mutex_unlock(self.inner.get());\n-        debug_assert_eq!(r, 0);\n-    }\n-    #[inline]\n-    pub unsafe fn try_lock(&self) -> bool {\n-        libc::pthread_mutex_trylock(self.inner.get()) == 0\n-    }\n-    #[inline]\n-    #[cfg(not(target_os = \"dragonfly\"))]\n-    pub unsafe fn destroy(&self) {\n-        let r = libc::pthread_mutex_destroy(self.inner.get());\n-        debug_assert_eq!(r, 0);\n-    }\n-    #[inline]\n-    #[cfg(target_os = \"dragonfly\")]\n-    pub unsafe fn destroy(&self) {\n-        let r = libc::pthread_mutex_destroy(self.inner.get());\n-        // On DragonFly pthread_mutex_destroy() returns EINVAL if called on a\n-        // mutex that was just initialized with libc::PTHREAD_MUTEX_INITIALIZER.\n-        // Once it is used (locked/unlocked) or pthread_mutex_init() is called,\n-        // this behaviour no longer occurs.\n-        debug_assert!(r == 0 || r == libc::EINVAL);\n-    }\n-}\n-\n-pub struct ReentrantMutex {\n-    inner: UnsafeCell<libc::pthread_mutex_t>,\n-}\n-\n-unsafe impl Send for ReentrantMutex {}\n-unsafe impl Sync for ReentrantMutex {}\n-\n-impl ReentrantMutex {\n-    pub const unsafe fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { inner: UnsafeCell::new(libc::PTHREAD_MUTEX_INITIALIZER) }\n-    }\n-\n-    pub unsafe fn init(&self) {\n-        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n-        let result = libc::pthread_mutexattr_init(attr.as_mut_ptr());\n-        debug_assert_eq!(result, 0);\n-        let result =\n-            libc::pthread_mutexattr_settype(attr.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE);\n-        debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutex_init(self.inner.get(), attr.as_ptr());\n-        debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n-        debug_assert_eq!(result, 0);\n-    }\n-\n-    pub unsafe fn lock(&self) {\n-        let result = libc::pthread_mutex_lock(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-\n-    #[inline]\n-    pub unsafe fn try_lock(&self) -> bool {\n-        libc::pthread_mutex_trylock(self.inner.get()) == 0\n-    }\n-\n-    pub unsafe fn unlock(&self) {\n-        let result = libc::pthread_mutex_unlock(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-\n-    pub unsafe fn destroy(&self) {\n-        let result = libc::pthread_mutex_destroy(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-}"}]}