{"sha": "01882733c99dedfc075a6e9d0c9f866b7787c996", "node_id": "C_kwDOAAsO6NoAKDAxODgyNzMzYzk5ZGVkZmMwNzVhNmU5ZDBjOWY4NjZiNzc4N2M5OTY", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-28T21:52:48Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-02T10:36:52Z"}, "message": "fix #102320, suggest unwrap_or_else when a closure is passed to unwrap_or instead of suggesting calling it", "tree": {"sha": "cdc5d29262c232a135ebcef814911c2aca67368c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdc5d29262c232a135ebcef814911c2aca67368c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01882733c99dedfc075a6e9d0c9f866b7787c996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01882733c99dedfc075a6e9d0c9f866b7787c996", "html_url": "https://github.com/rust-lang/rust/commit/01882733c99dedfc075a6e9d0c9f866b7787c996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01882733c99dedfc075a6e9d0c9f866b7787c996/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756e7be5eb923ec955dfd8dec2a0d3ac81cfdf55", "url": "https://api.github.com/repos/rust-lang/rust/commits/756e7be5eb923ec955dfd8dec2a0d3ac81cfdf55", "html_url": "https://github.com/rust-lang/rust/commit/756e7be5eb923ec955dfd8dec2a0d3ac81cfdf55"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "7b1a2ad35cdfe7c10de9f1a1fd4b7c8d24d228ad", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01882733c99dedfc075a6e9d0c9f866b7787c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01882733c99dedfc075a6e9d0c9f866b7787c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=01882733c99dedfc075a6e9d0c9f866b7787c996", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// When encountering an fn-like type, try accessing the output of the type\n-    /// // and suggesting calling it if it satisfies a predicate (i.e. if the\n+    /// and suggesting calling it if it satisfies a predicate (i.e. if the\n     /// output has a method or a field):\n     /// ```compile_fail,E0308\n     /// fn foo(x: usize) -> usize { x }\n@@ -139,7 +139,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 sugg,\n                 applicability,\n             );\n-\n             return true;\n         }\n         false\n@@ -338,6 +337,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 err.span_suggestion(sp, &msg, suggestion, applicability);\n             }\n+        } else if self.suggest_else_fn_with_closure(err, expr, found, expected)\n+        {\n         } else if self.suggest_fn_call(err, expr, found, |output| self.can_coerce(output, expected))\n             && let ty::FnDef(def_id, ..) = &found.kind()\n             && let Some(sp) = self.tcx.hir().span_if_local(*def_id)"}, {"sha": "ad1084bd1b1b6b319f2038db7ddbf5b7794b262d", "filename": "compiler/rustc_hir_analysis/src/check/method/suggest.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/01882733c99dedfc075a6e9d0c9f866b7787c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01882733c99dedfc075a6e9d0c9f866b7787c996/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=01882733c99dedfc075a6e9d0c9f866b7787c996", "patch": "@@ -2324,6 +2324,60 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// issue #102320, for `unwrap_or` with closure as argument, suggest `unwrap_or_else`\n+    /// FIXME: currently not working for suggesting `map_or_else`, see #102408\n+    pub(crate) fn suggest_else_fn_with_closure(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        found: Ty<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) -> bool {\n+        let Some((_def_id_or_name, output, _inputs)) = self.extract_callable_info(expr, found)\n+        else { return false; };\n+\n+        if !self.can_coerce(output, expected) {\n+            return false;\n+        }\n+\n+        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        if  let Some(Node::Expr(call_expr)) = self.tcx.hir().find(parent) &&\n+            let hir::ExprKind::MethodCall(\n+                hir::PathSegment { ident: method_name, .. },\n+                self_expr,\n+                args,\n+                ..,\n+             ) = call_expr.kind &&\n+            let Some(self_ty) = self.typeck_results.borrow().expr_ty_opt(self_expr) {\n+            let new_name = Ident {\n+                name: Symbol::intern(&format!(\"{}_else\", method_name.as_str())),\n+                span: method_name.span,\n+            };\n+            let probe = self.lookup_probe(\n+                expr.span,\n+                new_name,\n+                self_ty,\n+                self_expr,\n+                ProbeScope::TraitsInScope,\n+            );\n+\n+            // check the method arguments number\n+            if let Ok(pick) = probe &&\n+                let fn_sig = self.tcx.fn_sig(pick.item.def_id) &&\n+                let fn_args = fn_sig.skip_binder().inputs() &&\n+                fn_args.len() == args.len() + 1 {\n+                err.span_suggestion_verbose(\n+                    method_name.span.shrink_to_hi(),\n+                    &format!(\"try calling `{}` instead\", new_name.name.as_str()),\n+                    \"_else\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     /// Checks whether there is a local type somewhere in the chain of\n     /// autoderefs of `rcvr_ty`.\n     fn type_derefs_to_local("}, {"sha": "cf381d9da8be98cef2bdad6d69ca62713d24a95b", "filename": "src/test/ui/suggestions/sugg-else-for-closure.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01882733c99dedfc075a6e9d0c9f866b7787c996/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01882733c99dedfc075a6e9d0c9f866b7787c996/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.fixed?ref=01882733c99dedfc075a6e9d0c9f866b7787c996", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn main() {\n+    let x = \"com.example.app\";\n+    let y: Option<&str> = None;\n+    let _s = y.unwrap_or_else(|| x.split('.').nth(1).unwrap());\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "540ced91fc950690a93efaf6cebc97628c4a5c86", "filename": "src/test/ui/suggestions/sugg-else-for-closure.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01882733c99dedfc075a6e9d0c9f866b7787c996/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01882733c99dedfc075a6e9d0c9f866b7787c996/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.rs?ref=01882733c99dedfc075a6e9d0c9f866b7787c996", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn main() {\n+    let x = \"com.example.app\";\n+    let y: Option<&str> = None;\n+    let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "55a0eee18179a17b4a1afab55efbe4eafd1a389a", "filename": "src/test/ui/suggestions/sugg-else-for-closure.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01882733c99dedfc075a6e9d0c9f866b7787c996/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01882733c99dedfc075a6e9d0c9f866b7787c996/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr?ref=01882733c99dedfc075a6e9d0c9f866b7787c996", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/sugg-else-for-closure.rs:6:26\n+   |\n+LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n+   |                --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found closure\n+   |                |\n+   |                arguments to this function are incorrect\n+   |\n+   = note: expected reference `&str`\n+                found closure `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]`\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub const fn unwrap_or(self, default: T) -> T\n+   |                  ^^^^^^^^^\n+help: try calling `unwrap_or_else` instead\n+   |\n+LL |     let _s = y.unwrap_or_else(|| x.split('.').nth(1).unwrap());\n+   |                         +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}