{"sha": "bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMTJjZDNkMmZlMmZkNjljZmYwNWQ0YjcxMGM4MDIwZGVhMmNkZjc=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-02-15T23:06:39Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-02-15T23:17:51Z"}, "message": "Formatter::sign is &'static str\n\nThe contents were always UTF-8 anyway, and &str has an equivalent representation\nto &[u8], so this should not affect performance while removing unsafety at\nedges.\n\nIt may be worth exploring a further adjustment that stores a single byte\n(instead of 16) as the contents are always \"\", \"-\", or \"+\".", "tree": {"sha": "b3c40b22aa5dc50853794108093a4efb447954d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3c40b22aa5dc50853794108093a4efb447954d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7", "html_url": "https://github.com/rust-lang/rust/commit/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d9231ff2604a0467987042d9ebf9ff9ea739b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d9231ff2604a0467987042d9ebf9ff9ea739b5", "html_url": "https://github.com/rust-lang/rust/commit/61d9231ff2604a0467987042d9ebf9ff9ea739b5"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "3f2c965470652137410d250a9f385c197da62514", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7", "patch": "@@ -1356,11 +1356,11 @@ impl<'a> Formatter<'a> {\n             let mut align = old_align;\n             if self.sign_aware_zero_pad() {\n                 // a sign always goes first\n-                let sign = unsafe { str::from_utf8_unchecked(formatted.sign) };\n+                let sign = formatted.sign;\n                 self.buf.write_str(sign)?;\n \n                 // remove the sign from the formatted parts\n-                formatted.sign = b\"\";\n+                formatted.sign = \"\";\n                 width = width.saturating_sub(sign.len());\n                 align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n@@ -1392,7 +1392,7 @@ impl<'a> Formatter<'a> {\n         }\n \n         if !formatted.sign.is_empty() {\n-            write_bytes(self.buf, formatted.sign)?;\n+            self.buf.write_str(formatted.sign)?;\n         }\n         for part in formatted.parts {\n             match *part {"}, {"sha": "5dfd3a8ecdbd695672699c9621995f40229fac16", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7", "patch": "@@ -369,11 +369,11 @@ macro_rules! impl_Exp {\n                 flt2dec::Part::Copy(exp_slice)\n             ];\n             let sign = if !is_nonnegative {\n-                &b\"-\"[..]\n+                \"-\"\n             } else if f.sign_plus() {\n-                &b\"+\"[..]\n+                \"+\"\n             } else {\n-                &b\"\"[..]\n+                \"\"\n             };\n             let formatted = flt2dec::Formatted{sign, parts};\n             f.pad_formatted_parts(&formatted)"}, {"sha": "93a2348447e15dd9342416dbb2afdc2c6f3bc026", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=bd12cd3d2fe2fd69cff05d4b710c8020dea2cdf7", "patch": "@@ -237,7 +237,7 @@ impl<'a> Part<'a> {\n #[derive(Clone)]\n pub struct Formatted<'a> {\n     /// A byte slice representing a sign, either `\"\"`, `\"-\"` or `\"+\"`.\n-    pub sign: &'static [u8],\n+    pub sign: &'static str,\n     /// Formatted parts to be rendered after a sign and optional zero padding.\n     pub parts: &'a [Part<'a>],\n }\n@@ -259,7 +259,7 @@ impl<'a> Formatted<'a> {\n         if out.len() < self.sign.len() {\n             return None;\n         }\n-        out[..self.sign.len()].copy_from_slice(self.sign);\n+        out[..self.sign.len()].copy_from_slice(self.sign.as_bytes());\n \n         let mut written = self.sign.len();\n         for part in self.parts {\n@@ -402,38 +402,38 @@ pub enum Sign {\n }\n \n /// Returns the static byte string corresponding to the sign to be formatted.\n-/// It can be either `b\"\"`, `b\"+\"` or `b\"-\"`.\n-fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static [u8] {\n+/// It can be either `\"\"`, `\"+\"` or `\"-\"`.\n+fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static str {\n     match (*decoded, sign) {\n-        (FullDecoded::Nan, _) => b\"\",\n-        (FullDecoded::Zero, Sign::Minus) => b\"\",\n+        (FullDecoded::Nan, _) => \"\",\n+        (FullDecoded::Zero, Sign::Minus) => \"\",\n         (FullDecoded::Zero, Sign::MinusRaw) => {\n             if negative {\n-                b\"-\"\n+                \"-\"\n             } else {\n-                b\"\"\n+                \"\"\n             }\n         }\n-        (FullDecoded::Zero, Sign::MinusPlus) => b\"+\",\n+        (FullDecoded::Zero, Sign::MinusPlus) => \"+\",\n         (FullDecoded::Zero, Sign::MinusPlusRaw) => {\n             if negative {\n-                b\"-\"\n+                \"-\"\n             } else {\n-                b\"+\"\n+                \"+\"\n             }\n         }\n         (_, Sign::Minus) | (_, Sign::MinusRaw) => {\n             if negative {\n-                b\"-\"\n+                \"-\"\n             } else {\n-                b\"\"\n+                \"\"\n             }\n         }\n         (_, Sign::MinusPlus) | (_, Sign::MinusPlusRaw) => {\n             if negative {\n-                b\"-\"\n+                \"-\"\n             } else {\n-                b\"+\"\n+                \"+\"\n             }\n         }\n     }"}]}