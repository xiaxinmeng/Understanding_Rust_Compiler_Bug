{"sha": "9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZDFhMTE1NzE5OWI4MzAzYmM0ZmI1YWYzYWUwZmFiNmI5MWU3ODY=", "commit": {"author": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-08-16T13:42:22Z"}, "committer": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-09-04T07:46:44Z"}, "message": "Polonius: don't emit `region_live_at`", "tree": {"sha": "d919f2e2deb716347ea7c87644a650987c133126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d919f2e2deb716347ea7c87644a650987c133126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "html_url": "https://github.com/rust-lang/rust/commit/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786/comments", "author": null, "committer": null, "parents": [{"sha": "6568b086a27c750c9ac69a00f5146a3b51881fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6568b086a27c750c9ac69a00f5146a3b51881fb7", "html_url": "https://github.com/rust-lang/rust/commit/6568b086a27c750c9ac69a00f5146a3b51881fb7"}], "stats": {"total": 21, "additions": 1, "deletions": 20}, "files": [{"sha": "b11e5e7a85d0ebb9f3c2e65b1093f22705e8a7bc", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "patch": "@@ -58,7 +58,6 @@ impl AllFactsExt for AllFacts {\n                 cfg_edge,\n                 killed,\n                 outlives,\n-                region_live_at,\n                 invalidates,\n                 var_used,\n                 var_defined,"}, {"sha": "25d7985653c0ea2454f3a39ccd8ebc8d246ec467", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "patch": "@@ -58,7 +58,7 @@ pub(super) fn generate<'tcx>(\n     };\n \n     if !live_locals.is_empty() {\n-        trace::trace(typeck, body, elements, flow_inits, move_data, live_locals, location_table);\n+        trace::trace(typeck, body, elements, flow_inits, move_data, live_locals);\n \n         polonius::populate_var_liveness_facts(typeck, body, location_table);\n     }"}, {"sha": "eba52ae3384b0922bb5e9b6816b77258188e1d17", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "patch": "@@ -1,4 +1,3 @@\n-use crate::borrow_check::location::LocationTable;\n use crate::borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n use crate::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n use crate::borrow_check::nll::type_check::liveness::polonius;\n@@ -38,7 +37,6 @@ pub(super) fn trace(\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     live_locals: Vec<Local>,\n-    location_table: &LocationTable,\n ) {\n     debug!(\"trace()\");\n \n@@ -52,7 +50,6 @@ pub(super) fn trace(\n         local_use_map,\n         move_data,\n         drop_data: FxHashMap::default(),\n-        location_table,\n     };\n \n     LivenessResults::new(cx).compute_for_all_locals(live_locals);\n@@ -82,9 +79,6 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n     /// Index indicating where each variable is assigned, used, or\n     /// dropped.\n     local_use_map: &'me LocalUseMap,\n-\n-    /// Maps between a MIR Location and a LocationIndex\n-    location_table: &'me LocationTable,\n }\n \n struct DropData<'tcx> {\n@@ -405,7 +399,6 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n             &mut self.typeck,\n             value,\n             live_at,\n-            self.location_table,\n         )\n     }\n \n@@ -462,7 +455,6 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n                 &mut self.typeck,\n                 kind,\n                 live_at,\n-                self.location_table,\n             );\n \n             polonius::add_var_drops_regions(&mut self.typeck, dropped_local, &kind);\n@@ -474,7 +466,6 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n         typeck: &mut TypeChecker<'_, 'tcx>,\n         value: impl TypeFoldable<'tcx>,\n         live_at: &HybridBitSet<PointIndex>,\n-        location_table: &LocationTable,\n     ) {\n         debug!(\"make_all_regions_live(value={:?})\", value);\n         debug!(\n@@ -491,15 +482,6 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n                 .constraints\n                 .liveness_constraints\n                 .add_elements(live_region_vid, live_at);\n-\n-            // FIXME: remove this when we can generate our own region-live-at reliably\n-            if let Some(facts) = typeck.borrowck_context.all_facts {\n-                for point in live_at.iter() {\n-                    let loc = elements.to_location(point);\n-                    facts.region_live_at.push((live_region_vid, location_table.start_index(loc)));\n-                    facts.region_live_at.push((live_region_vid, location_table.mid_index(loc)));\n-                }\n-            }\n         });\n     }\n "}]}