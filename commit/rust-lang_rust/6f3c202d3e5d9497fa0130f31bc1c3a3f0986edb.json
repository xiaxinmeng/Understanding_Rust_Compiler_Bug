{"sha": "6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmM2MyMDJkM2U1ZDk0OTdmYTAxMzBmMzFiYzFjM2EzZjA5ODZlZGI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-19T07:29:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-19T07:48:20Z"}, "message": "rustc: check instantiability of fixed length vectors properly.\n\nPreviously, they were treated like ~[] and &[] (which can have length\n0), but fixed length vectors are fixed length, i.e. we know at compile\ntime if it's possible to have length zero (which is only for [T, .. 0]).\n\nFixes #11659.", "tree": {"sha": "cc89c9e2a06caad493867a5e70fba29133d1f449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc89c9e2a06caad493867a5e70fba29133d1f449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb", "html_url": "https://github.com/rust-lang/rust/commit/6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f6ef080bb69ce4370c04c92cc92b9a860e5725", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f6ef080bb69ce4370c04c92cc92b9a860e5725", "html_url": "https://github.com/rust-lang/rust/commit/d0f6ef080bb69ce4370c04c92cc92b9a860e5725"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "5e0a40b90dd377dca3a871edefcce948dad1ffa0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb", "patch": "@@ -2287,6 +2287,12 @@ pub fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n                ::util::ppaux::ty_to_str(cx, ty));\n \n         let r = match get(ty).sty {\n+            // fixed length vectors need special treatment compared to\n+            // normal vectors, since they don't necessarily have the\n+            // possibilty to have length zero.\n+            ty_vec(_, vstore_fixed(0)) => false, // don't need no contents\n+            ty_vec(mt, vstore_fixed(_)) => type_requires(cx, seen, r_ty, mt.ty),\n+\n             ty_nil |\n             ty_bot |\n             ty_bool |"}, {"sha": "bb2c3247e030f1f73cb482c8111812d15ea58598", "filename": "src/test/compile-fail/uninstantiable-fixed-length-vec.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb/src%2Ftest%2Fcompile-fail%2Funinstantiable-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb/src%2Ftest%2Fcompile-fail%2Funinstantiable-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinstantiable-fixed-length-vec.rs?ref=6f3c202d3e5d9497fa0130f31bc1c3a3f0986edb", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// issue #11659, the compiler needs to know that a fixed length vector\n+// always requires instantiable contents to instantiable itself\n+// (unlike a ~[] vector which can have length zero).\n+\n+// ~ to avoid infinite size.\n+struct Uninstantiable { //~ ERROR cannot be instantiated without an instance of itself\n+    p: ~[Uninstantiable, .. 1]\n+}\n+\n+struct Instantiable { p: ~[Instantiable, .. 0] }\n+\n+\n+fn main() {\n+    let _ = None::<Uninstantiable>;\n+    let _ = Instantiable { p: ~([]) };\n+}"}]}