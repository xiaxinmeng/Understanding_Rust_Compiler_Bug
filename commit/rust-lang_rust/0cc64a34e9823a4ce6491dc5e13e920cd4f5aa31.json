{"sha": "0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYzY0YTM0ZTk4MjNhNGNlNjQ5MWRjNWUxM2U5MjBjZDRmNWFhMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-12T09:05:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-12T09:05:38Z"}, "message": "Auto merge of #82935 - henryboisdequin:diagnostic-cleanups, r=estebank\n\nDiagnostic cleanups\n\nFollow up to #81503\nHelps with #82916 (don't show note if `span` is `DUMMY_SP`)", "tree": {"sha": "dbf82e6f2a66e98345aa2054823f8ce383bb5e30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf82e6f2a66e98345aa2054823f8ce383bb5e30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "html_url": "https://github.com/rust-lang/rust/commit/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77b996e1c628e8089f058244b011a2ee945a8984", "url": "https://api.github.com/repos/rust-lang/rust/commits/77b996e1c628e8089f058244b011a2ee945a8984", "html_url": "https://github.com/rust-lang/rust/commit/77b996e1c628e8089f058244b011a2ee945a8984"}, {"sha": "26478c81fd3152eb0d272209dc02cdacfcb22aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/26478c81fd3152eb0d272209dc02cdacfcb22aba", "html_url": "https://github.com/rust-lang/rust/commit/26478c81fd3152eb0d272209dc02cdacfcb22aba"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "eb942b195b252f5c34b262010a7bcd13c67da05d", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TypeFoldable};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MoveOutIndex, MovePathIndex};\n@@ -216,12 +216,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 );\n                             }\n                             // Avoid pointing to the same function in multiple different\n-                            // error messages\n-                            if self.fn_self_span_reported.insert(self_arg.span) {\n+                            // error messages.\n+                            if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span)\n+                            {\n                                 err.span_note(\n-                                    self_arg.span,\n-                                    &format!(\"this function takes ownership of the receiver `self`, which moves {}\", place_name)\n-                                );\n+                                        self_arg.span,\n+                                        &format!(\"this function takes ownership of the receiver `self`, which moves {}\", place_name)\n+                                    );\n                             }\n                         }\n                         // Deref::deref takes &self, which cannot cause a move"}, {"sha": "c1b105f1d8489a666e975a1f2993a97ce105bbcb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "patch": "@@ -1908,15 +1908,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 if is_const_fn {\n                     err.help(\n-                        \"consider creating a new `const` item and initializing with the result \\\n+                        \"consider creating a new `const` item and initializing it with the result \\\n                         of the function call to be used in the repeat position, like \\\n                         `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\",\n                     );\n                 }\n \n                 if self.tcx.sess.is_nightly_build() && is_const_fn {\n                     err.help(\n-                        \"create an inline `const` block, see PR \\\n+                        \"create an inline `const` block, see RFC \\\n                         #2920 <https://github.com/rust-lang/rfcs/pull/2920> \\\n                         for more information\",\n                     );"}, {"sha": "329c6cb2b1285e67bd87b3a4a9a7d10fadb56bf2", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "patch": "@@ -7,8 +7,8 @@ LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    = help: the following implementations were found:\n              <Option<T> as Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n-   = help: consider creating a new `const` item and initializing with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n-   = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+   = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n+   = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n \n error: aborting due to previous error\n "}, {"sha": "f02cb4f1ff193f21149f5098df0f061cd103397b", "filename": "src/test/ui/consts/const-fn-in-vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr?ref=0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "patch": "@@ -5,8 +5,8 @@ LL |     let strings: [String; 5] = [String::new(); 5];\n    |                                ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n-   = help: consider creating a new `const` item and initializing with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n-   = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+   = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n+   = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n \n error: aborting due to previous error\n "}, {"sha": "8633ea1e8cb3dc2466174104c9cd53ca1c809fb4", "filename": "src/test/ui/loops/issue-82916.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/src%2Ftest%2Fui%2Floops%2Fissue-82916.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/src%2Ftest%2Fui%2Floops%2Fissue-82916.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Fissue-82916.rs?ref=0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "patch": "@@ -0,0 +1,10 @@\n+struct S(i32);\n+\n+fn foo(x: Vec<S>) {\n+    for y in x {\n+\n+    }\n+    let z = x; //~ ERROR use of moved value: `x`\n+}\n+\n+fn main() {}"}, {"sha": "ad42cce71f6865a31262142deb1ef984763cb8a3", "filename": "src/test/ui/loops/issue-82916.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Fissue-82916.stderr?ref=0cc64a34e9823a4ce6491dc5e13e920cd4f5aa31", "patch": "@@ -0,0 +1,23 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/issue-82916.rs:7:13\n+   |\n+LL | fn foo(x: Vec<S>) {\n+   |        - move occurs because `x` has type `Vec<S>`, which does not implement the `Copy` trait\n+LL |     for y in x {\n+   |              -\n+   |              |\n+   |              `x` moved due to this implicit call to `.into_iter()`\n+   |              help: consider borrowing to avoid moving into the for loop: `&x`\n+...\n+LL |     let z = x;\n+   |             ^ value used here after move\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `x`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}]}