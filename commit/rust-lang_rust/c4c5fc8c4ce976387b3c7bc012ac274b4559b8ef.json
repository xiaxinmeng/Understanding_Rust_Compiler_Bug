{"sha": "c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YzVmYzhjNGNlOTc2Mzg3YjNjN2JjMDEyYWMyNzRiNDU1OWI4ZWY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-17T13:59:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-17T19:37:12Z"}, "message": "Add nofallback tests", "tree": {"sha": "fb11e275e5579833273ad06077148450600f3e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb11e275e5579833273ad06077148450600f3e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "html_url": "https://github.com/rust-lang/rust/commit/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "078e3fd4bab601f1f8ecfdc1e7fdb6103e9e2b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/078e3fd4bab601f1f8ecfdc1e7fdb6103e9e2b6c", "html_url": "https://github.com/rust-lang/rust/commit/078e3fd4bab601f1f8ecfdc1e7fdb6103e9e2b6c"}], "stats": {"total": 118, "additions": 95, "deletions": 23}, "files": [{"sha": "fbaa874792a0180031fb706523a303daac511232", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.nofallback.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n+  --> $DIR/coerce-issue-49593-box-never.rs:17:53\n+   |\n+LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n+   |\n+   = note: required for the cast to the object type `dyn std::error::Error`\n+\n+error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n+  --> $DIR/coerce-issue-49593-box-never.rs:22:49\n+   |\n+LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n+   |\n+   = note: required for the cast to the object type `(dyn std::error::Error + 'static)`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7a4324bd5adcedd124b9473e4e742cb1ea3fd4e8", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -1,5 +1,9 @@\n-// check-pass\n-#![feature(never_type, never_type_fallback)]\n+// revisions: nofallback fallback\n+//[fallback] check-pass\n+//[nofallback] check-fail\n+\n+#![feature(never_type)]\n+#![cfg_attr(fallback, feature(never_type_fallback))]\n #![allow(unreachable_code)]\n \n use std::error::Error;\n@@ -11,10 +15,12 @@ fn raw_ptr_box<T>(t: T) -> *mut T {\n \n fn foo(x: !) -> Box<dyn Error> {\n     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n+    //[nofallback]~^ ERROR trait bound `(): std::error::Error` is not satisfied\n }\n \n fn foo_raw_ptr(x: !) -> *mut dyn Error {\n     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n+    //[nofallback]~^ ERROR trait bound `(): std::error::Error` is not satisfied\n }\n \n fn no_coercion(d: *mut dyn Error) -> *mut dyn Error {"}, {"sha": "588d644c77b0dc159d5a056c30fb087d339bb400", "filename": "src/test/ui/never_type/defaulted-never-note.fallback.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n-  --> $DIR/defaulted-never-note.rs:26:5\n+  --> $DIR/defaulted-never-note.rs:30:5\n    |\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n@@ -8,7 +8,7 @@ LL |     foo(_x);\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information).\n    = help: did you intend to use the type `()` here instead?\n note: required by a bound in `foo`\n-  --> $DIR/defaulted-never-note.rs:21:11\n+  --> $DIR/defaulted-never-note.rs:25:11\n    |\n LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`", "previous_filename": "src/test/ui/never_type/defaulted-never-note.stderr"}, {"sha": "54f551759cb3926f9cf7cdf02865e6c171bd64ff", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -1,6 +1,10 @@\n+// revisions: nofallback fallback\n+//[nofallback] run-pass\n+//[fallback] check-fail\n+\n // We need to opt into the `never_type_fallback` feature\n // to trigger the requirement that this is testing.\n-#![feature(never_type, never_type_fallback)]\n+#![cfg_attr(fallback, feature(never_type, never_type_fallback))]\n \n #![allow(unused)]\n \n@@ -19,16 +23,16 @@ trait ImplementedForUnitButNotNever {}\n impl ImplementedForUnitButNotNever for () {}\n \n fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-//~^ NOTE required by this bound in `foo`\n-//~| NOTE required by a bound in `foo`\n+//[fallback]~^ NOTE required by this bound in `foo`\n+//[fallback]~| NOTE required by a bound in `foo`\n fn smeg() {\n     let _x = return;\n     foo(_x);\n-    //~^ ERROR the trait bound\n-    //~| NOTE the trait `ImplementedForUnitButNotNever` is not implemented\n-    //~| NOTE this trait is implemented for `()`\n-    //~| NOTE this error might have been caused\n-    //~| HELP did you intend\n+    //[fallback]~^ ERROR the trait bound\n+    //[fallback]~| NOTE the trait `ImplementedForUnitButNotNever` is not implemented\n+    //[fallback]~| NOTE this trait is implemented for `()`\n+    //[fallback]~| NOTE this error might have been caused\n+    //[fallback]~| HELP did you intend\n }\n \n fn main() {"}, {"sha": "45a3362fa6d8ea07dc6eab46c26da2bbe14182ba", "filename": "src/test/ui/never_type/diverging-fallback-control-flow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -1,3 +1,4 @@\n+// revisions: nofallback fallback\n // run-pass\n \n #![allow(dead_code)]\n@@ -8,7 +9,7 @@\n // to fallback based on control-flow. In all of these cases,\n // the type variable winds up being the target of both a `!` coercion\n // and a coercion from a non-`!` variable, and hence falls back to `()`.\n-#![feature(never_type, never_type_fallback)]\n+#![cfg_attr(fallback, feature(never_type, never_type_fallback))]\n \n trait UnitDefault {\n     fn default() -> Self;"}, {"sha": "3a5b602f1118fc196623978bf86cef4b2135b583", "filename": "src/test/ui/never_type/diverging-fallback-no-leak.fallback.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `!: Test` is not satisfied\n-  --> $DIR/diverging-fallback-no-leak.rs:14:5\n+  --> $DIR/diverging-fallback-no-leak.rs:17:5\n    |\n LL |     unconstrained_arg(return);\n    |     ^^^^^^^^^^^^^^^^^ the trait `Test` is not implemented for `!`\n@@ -8,7 +8,7 @@ LL |     unconstrained_arg(return);\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information).\n    = help: did you intend to use the type `()` here instead?\n note: required by a bound in `unconstrained_arg`\n-  --> $DIR/diverging-fallback-no-leak.rs:9:25\n+  --> $DIR/diverging-fallback-no-leak.rs:12:25\n    |\n LL | fn unconstrained_arg<T: Test>(_: T) {}\n    |                         ^^^^ required by this bound in `unconstrained_arg`", "previous_filename": "src/test/ui/never_type/diverging-fallback-no-leak.stderr"}, {"sha": "03478e19ddcddbb5bf57adf7c147a5ce4c3b1058", "filename": "src/test/ui/never_type/diverging-fallback-no-leak.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.rs?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -1,4 +1,7 @@\n-#![feature(never_type_fallback)]\n+// revisions: nofallback fallback\n+//[nofallback] check-pass\n+\n+#![cfg_attr(fallback, feature(never_type, never_type_fallback))]\n \n fn make_unit() {}\n \n@@ -10,6 +13,7 @@ fn unconstrained_arg<T: Test>(_: T) {}\n \n fn main() {\n     // Here the type variable falls back to `!`,\n-    // and hence we get a type error:\n-    unconstrained_arg(return); //~ ERROR trait bound `!: Test` is not satisfied\n+    // and hence we get a type error.\n+    unconstrained_arg(return);\n+    //[fallback]~^ ERROR trait bound `!: Test` is not satisfied\n }"}, {"sha": "7ea97126f89c992c12111a802dfec18142219318", "filename": "src/test/ui/never_type/diverging-fallback-unconstrained-return.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-unconstrained-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-unconstrained-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-unconstrained-return.rs?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -6,7 +6,10 @@\n //\n // check-pass\n \n-#![feature(never_type_fallback)]\n+// revisions: nofallback fallback\n+\n+#![cfg_attr(fallback, feature(never_type, never_type_fallback))]\n+\n \n fn make_unit() {}\n "}, {"sha": "78d1a3caf4a30e379e01860e4b3fb3a65535aa4a", "filename": "src/test/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -0,0 +1,17 @@\n+error[E0271]: type mismatch resolving `<[closure@$DIR/fallback-closure-wrap.rs:18:40: 21:6] as FnOnce<()>>::Output == ()`\n+  --> $DIR/fallback-closure-wrap.rs:18:31\n+   |\n+LL |       let error = Closure::wrap(Box::new(move || {\n+   |  _______________________________^\n+LL | |\n+LL | |         panic!(\"Can't connect to server.\");\n+LL | |     }) as Box<dyn FnMut()>);\n+   | |______^ expected `()`, found `!`\n+   |\n+   = note: expected unit type `()`\n+                   found type `!`\n+   = note: required for the cast to the object type `dyn FnMut()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "f374266626bcc4c517d47de601b08ab3231f44ca", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.nofallback.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `E: From<()>` is not satisfied\n+  --> $DIR/never-value-fallback-issue-66757.rs:27:5\n+   |\n+LL |     <E as From<_>>::from(never);\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `From<()>` is not implemented for `E`\n+   |\n+   = help: the following implementations were found:\n+             <E as From<!>>\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6dc7e6ad2d93de43f267af45bfa69836d55cfbe4", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.rs?ref=c4c5fc8c4ce976387b3c7bc012ac274b4559b8ef", "patch": "@@ -4,12 +4,13 @@\n // never) and an uninferred variable (here the argument to `From`) it\n // doesn't fallback to `()` but rather `!`.\n //\n-// run-pass\n+// revisions: nofallback fallback\n+//[fallback] run-pass\n+//[nofallback] check-fail\n \n #![feature(never_type)]\n \n-// FIXME(#67225) -- this should be true even without the fallback gate.\n-#![feature(never_type_fallback)]\n+#![cfg_attr(fallback, feature(never_type_fallback))]\n \n struct E;\n \n@@ -23,7 +24,7 @@ impl From<!> for E {\n #[allow(dead_code)]\n fn foo(never: !) {\n     <E as From<!>>::from(never);  // Ok\n-    <E as From<_>>::from(never);  // Inference fails here\n+    <E as From<_>>::from(never);  //[nofallback]~ ERROR trait bound `E: From<()>` is not satisfied\n }\n \n fn main() { }"}]}