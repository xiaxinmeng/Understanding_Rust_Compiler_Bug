{"sha": "bdd20000665a35e14b4ec2c54f893fc80fe451ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZDIwMDAwNjY1YTM1ZTE0YjRlYzJjNTRmODkzZmM4MGZlNDUxZWY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-13T17:46:33Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-13T18:17:02Z"}, "message": "Some cleanup in tvec.", "tree": {"sha": "788a24120d4524e057e20a4314808b5e1aa74e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/788a24120d4524e057e20a4314808b5e1aa74e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdd20000665a35e14b4ec2c54f893fc80fe451ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd20000665a35e14b4ec2c54f893fc80fe451ef", "html_url": "https://github.com/rust-lang/rust/commit/bdd20000665a35e14b4ec2c54f893fc80fe451ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdd20000665a35e14b4ec2c54f893fc80fe451ef/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920ea63f53bbbe46cdcbaead12720871b5fb00b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/920ea63f53bbbe46cdcbaead12720871b5fb00b9", "html_url": "https://github.com/rust-lang/rust/commit/920ea63f53bbbe46cdcbaead12720871b5fb00b9"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "0760bdaf24e2b75a5bdfd9a84d34fea86bbff102", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdd20000665a35e14b4ec2c54f893fc80fe451ef/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd20000665a35e14b4ec2c54f893fc80fe451ef/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=bdd20000665a35e14b4ec2c54f893fc80fe451ef", "patch": "@@ -69,18 +69,15 @@ fn alloc_uniq(bcx: block, unit_ty: ty::t, elts: uint) -> result {\n \n fn duplicate_uniq(bcx: block, vptr: ValueRef, vec_ty: ty::t) -> result {\n     let _icx = bcx.insn_ctxt(\"tvec::duplicate_uniq\");\n-    let ccx = bcx.ccx();\n-    let body_ptr = get_bodyptr(bcx, vptr);\n-    let fill = get_fill(bcx, body_ptr);\n-    let size = Add(bcx, fill, llsize_of(ccx, ccx.opaque_vec_type));\n \n+    let fill = get_fill(bcx, get_bodyptr(bcx, vptr));\n     let unit_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n-    let vecbodyty = ty::mk_mut_unboxed_vec(bcx.tcx(), unit_ty);\n-    let {box: newptr, body: new_body_ptr} =\n-        base::malloc_unique_dyn(bcx, vecbodyty, size);\n-    call_memmove(bcx, new_body_ptr, body_ptr, size);\n+    let {bcx, val: newptr} = alloc_uniq_raw(bcx, unit_ty, fill, fill);\n+\n+    let data_ptr = get_dataptr(bcx, get_bodyptr(bcx, vptr));\n+    let new_data_ptr = get_dataptr(bcx, get_bodyptr(bcx, newptr));\n+    call_memmove(bcx, new_data_ptr, data_ptr, fill);\n \n-    Store(bcx, fill, GEPi(bcx, new_body_ptr, [0u, abi::vec_elt_alloc]));\n     let bcx = if ty::type_needs_drop(bcx.tcx(), unit_ty) {\n         iter_vec(bcx, newptr, vec_ty, base::take_ty)\n     } else { bcx };"}]}