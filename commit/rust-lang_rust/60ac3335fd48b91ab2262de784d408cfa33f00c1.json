{"sha": "60ac3335fd48b91ab2262de784d408cfa33f00c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWMzMzM1ZmQ0OGI5MWFiMjI2MmRlNzg0ZDQwOGNmYTMzZjAwYzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-17T11:46:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-17T11:46:06Z"}, "message": "Rollup merge of #65319 - RalfJung:memory, r=Centril\n\nInterpCx: make memory field public\n\nI made this field private forever ago because I thought sealing things might be nice. But with the `memory_mut` getter it doesn't actually seal anything, and it's not like we need to invalidate caches on writes to memory or so. And moreover, having to use the getters leads to some annoying borrow checking interactions.\n\nSo, let's just make it public (again).\n\nr? @oli-obk", "tree": {"sha": "b0a1735d28e1b0c76f051a97c7fb0f42dca6d46f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a1735d28e1b0c76f051a97c7fb0f42dca6d46f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ac3335fd48b91ab2262de784d408cfa33f00c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqFSACRBK7hj4Ov3rIwAAdHIIAK63sJOpIkEaJO/tBCAZ2Mdh\n3UOLIgAzQ+ikBU5WEn4wWkOM3F5ft5XqOxCMJVWXjtiKpAECdlx0LHKMrr2t/m9a\nGOW2mcYrVtFkjlwQM4KhJC4nFVK+Z4hG4pmCmH3m3KOcgKKILtF95uUop0hfq6Dh\n+JIHB+sOI7flG+fDJxnMtN9lh3qGKTUlQ4WBTQTx32qfUeu6/Dm8Zs18QLZOzAdv\nmx9TqGEBpUHM+yEpdWKiIDz3AMb4Xx85EkVdn+Sy9hTTT7MFY/Lgt4xQX+b23NYv\nElk5H4KpDkybq+HzyzDK1Msio8uMeo4jqVml7GQhlb7q8SjcS3/0ed7e1NeDG1c=\n=TSZZ\n-----END PGP SIGNATURE-----\n", "payload": "tree b0a1735d28e1b0c76f051a97c7fb0f42dca6d46f\nparent 10b580a1d12691850e2ed1fed42582602a9b97c2\nparent 715ffab116b4dddad98c088eeb1b5ad0dc9c0b16\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571312766 +0200\ncommitter GitHub <noreply@github.com> 1571312766 +0200\n\nRollup merge of #65319 - RalfJung:memory, r=Centril\n\nInterpCx: make memory field public\n\nI made this field private forever ago because I thought sealing things might be nice. But with the `memory_mut` getter it doesn't actually seal anything, and it's not like we need to invalidate caches on writes to memory or so. And moreover, having to use the getters leads to some annoying borrow checking interactions.\n\nSo, let's just make it public (again).\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ac3335fd48b91ab2262de784d408cfa33f00c1", "html_url": "https://github.com/rust-lang/rust/commit/60ac3335fd48b91ab2262de784d408cfa33f00c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ac3335fd48b91ab2262de784d408cfa33f00c1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b580a1d12691850e2ed1fed42582602a9b97c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b580a1d12691850e2ed1fed42582602a9b97c2", "html_url": "https://github.com/rust-lang/rust/commit/10b580a1d12691850e2ed1fed42582602a9b97c2"}, {"sha": "715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "html_url": "https://github.com/rust-lang/rust/commit/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "06fdd407951c1f76c6bb3c27ee3426ad52445943", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60ac3335fd48b91ab2262de784d408cfa33f00c1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ac3335fd48b91ab2262de784d408cfa33f00c1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=60ac3335fd48b91ab2262de784d408cfa33f00c1", "patch": "@@ -35,7 +35,7 @@ pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     pub(crate) param_env: ty::ParamEnv<'tcx>,\n \n     /// The virtual memory system.\n-    pub(crate) memory: Memory<'mir, 'tcx, M>,\n+    pub memory: Memory<'mir, 'tcx, M>,\n \n     /// The virtual call stack.\n     pub(crate) stack: Vec<Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>>,\n@@ -211,16 +211,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    #[inline(always)]\n-    pub fn memory(&self) -> &Memory<'mir, 'tcx, M> {\n-        &self.memory\n-    }\n-\n-    #[inline(always)]\n-    pub fn memory_mut(&mut self) -> &mut Memory<'mir, 'tcx, M> {\n-        &mut self.memory\n-    }\n-\n     #[inline(always)]\n     pub fn force_ptr(\n         &self,"}, {"sha": "646d1783c8ec96356a97120f3d379b424a0d6ea2", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60ac3335fd48b91ab2262de784d408cfa33f00c1/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ac3335fd48b91ab2262de784d408cfa33f00c1/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=60ac3335fd48b91ab2262de784d408cfa33f00c1", "patch": "@@ -73,8 +73,7 @@ fn intern_shallow<'rt, 'mir, 'tcx>(\n     );\n     // remove allocation\n     let tcx = ecx.tcx;\n-    let memory = ecx.memory_mut();\n-    let (kind, mut alloc) = match memory.alloc_map.remove(&alloc_id) {\n+    let (kind, mut alloc) = match ecx.memory.alloc_map.remove(&alloc_id) {\n         Some(entry) => entry,\n         None => {\n             // Pointer not found in local memory map. It is either a pointer to the global\n@@ -332,7 +331,7 @@ pub fn intern_const_alloc_recursive(\n \n     let mut todo: Vec<_> = leftover_allocations.iter().cloned().collect();\n     while let Some(alloc_id) = todo.pop() {\n-        if let Some((_, mut alloc)) = ecx.memory_mut().alloc_map.remove(&alloc_id) {\n+        if let Some((_, mut alloc)) = ecx.memory.alloc_map.remove(&alloc_id) {\n             // We can't call the `intern_shallow` method here, as its logic is tailored to safe\n             // references and a `leftover_allocations` set (where we only have a todo-list here).\n             // So we hand-roll the interning logic here again.\n@@ -350,7 +349,7 @@ pub fn intern_const_alloc_recursive(\n                     todo.push(reloc);\n                 }\n             }\n-        } else if ecx.memory().dead_alloc_map.contains_key(&alloc_id) {\n+        } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // dangling pointer\n             throw_unsup!(ValidationFailure(\"encountered dangling pointer in final constant\".into()))\n         }"}, {"sha": "7f6baf0bb49c13e34c7af4ae2b77720c41ed3983", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ac3335fd48b91ab2262de784d408cfa33f00c1/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ac3335fd48b91ab2262de784d408cfa33f00c1/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=60ac3335fd48b91ab2262de784d408cfa33f00c1", "patch": "@@ -140,12 +140,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                                 .read_immediate(self.eval_operand(len, None)?)\n                                 .expect(\"can't eval len\")\n                                 .to_scalar()?\n-                                .to_bits(self.memory().pointer_size())? as u64;\n+                                .to_bits(self.memory.pointer_size())? as u64;\n                             let index = self\n                                 .read_immediate(self.eval_operand(index, None)?)\n                                 .expect(\"can't eval index\")\n                                 .to_scalar()?\n-                                .to_bits(self.memory().pointer_size())? as u64;\n+                                .to_bits(self.memory.pointer_size())? as u64;\n                             err_panic!(BoundsCheck { len, index })\n                         }\n                         Overflow(op) => err_panic!(Overflow(*op)),"}]}