{"sha": "1391154b1492987a357293c1e3774f9326fc640b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOTExNTRiMTQ5Mjk4N2EzNTcyOTNjMWUzNzc0ZjkzMjZmYzY0MGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-03T21:45:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T04:35:06Z"}, "message": "Use util::filesearch to locate intrinsics.bc and main.o", "tree": {"sha": "90ff5eabf0738f497bba8785c53a81824fba68cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90ff5eabf0738f497bba8785c53a81824fba68cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1391154b1492987a357293c1e3774f9326fc640b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1391154b1492987a357293c1e3774f9326fc640b", "html_url": "https://github.com/rust-lang/rust/commit/1391154b1492987a357293c1e3774f9326fc640b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1391154b1492987a357293c1e3774f9326fc640b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebcc76d68d5ab13cd7abc6d47c91471740f0899e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebcc76d68d5ab13cd7abc6d47c91471740f0899e", "html_url": "https://github.com/rust-lang/rust/commit/ebcc76d68d5ab13cd7abc6d47c91471740f0899e"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "c9c03e82775219c57fb99f6b59ca176776b77a5b", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1391154b1492987a357293c1e3774f9326fc640b/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1391154b1492987a357293c1e3774f9326fc640b/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=1391154b1492987a357293c1e3774f9326fc640b", "patch": "@@ -23,6 +23,7 @@ import lib::llvm::mk_target_data;\n import lib::llvm::mk_type_names;\n import lib::llvm::False;\n import lib::llvm::True;\n+import util::filesearch;\n \n tag output_type {\n     output_type_none;\n@@ -40,8 +41,12 @@ fn llvm_err(sess: session::session, msg: str) {\n }\n \n fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n-    let path = sess.filesearch()\n-        .get_target_lib_file_path(\"intrinsics.bc\");\n+    let path = alt filesearch::search(\n+        sess.filesearch(),\n+        bind filesearch::pick_file(\"intrinsics.bc\", _)) {\n+      option::some(path) { path }\n+      option::none. { sess.fatal(\"couldn't find intrinsics.bc\") }\n+    };\n     let membuf = str::as_buf(path, {|buf|\n         llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n     });\n@@ -497,8 +502,12 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n // gcc to link the object file with some libs\n fn link_binary(sess: session::session,\n                saved_out_filename: str) {\n-    let main: str = sess.filesearch()\n-        .get_target_lib_file_path(\"main.o\");\n+    let main: str = alt filesearch::search(\n+        sess.filesearch(), bind filesearch::pick_file(\"main.o\", _)) {\n+      option::some(f) { f }\n+      option::none. { sess.fatal(\"can't find main.o\") }\n+    };\n+\n     let stage: str = \"-L\" + sess.filesearch().get_target_lib_path();\n     let prog: str = \"gcc\";\n     // The invocations of gcc share some flags across platforms"}, {"sha": "90da54f36b314aa6d7ab066a1b2c196cb8146ba6", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1391154b1492987a357293c1e3774f9326fc640b/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1391154b1492987a357293c1e3774f9326fc640b/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=1391154b1492987a357293c1e3774f9326fc640b", "patch": "@@ -60,6 +60,7 @@ fn visit_item(e: env, i: @ast::item) {\n         if !cstore::add_used_library(cstore, m.native_name) { ret; }\n         for a: ast::attribute in\n             attr::find_attrs_by_name(i.attrs, \"link_args\") {\n+\n             alt attr::get_meta_item_value_str(attr::attr_meta(a)) {\n               some(linkarg) { cstore::add_used_link_args(cstore, linkarg); }\n               none. {/* fallthrough */ }"}, {"sha": "9e2644a2a98fb64fa9cc63530266fb28f1d40004", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1391154b1492987a357293c1e3774f9326fc640b/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1391154b1492987a357293c1e3774f9326fc640b/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=1391154b1492987a357293c1e3774f9326fc640b", "patch": "@@ -9,10 +9,16 @@ import back::link;\n export filesearch;\n export mk_filesearch;\n export pick;\n+export pick_file;\n export search;\n \n type pick<@T> = block(path: fs::path) -> option::t<T>;\n \n+fn pick_file(file: fs::path, path: fs::path) -> option::t<fs::path> {\n+    if fs::basename(path) == file { option::some(path) }\n+    else { option::none }\n+}\n+\n type filesearch = obj {\n     fn sysroot() -> fs::path;\n     fn lib_search_paths() -> [fs::path];"}]}