{"sha": "153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1M2FhNzFjMTRkMzllZTFjYjdmOTg5ZDg5YjFmMjg5MWZkZmNiNmQ=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-01T07:00:50Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-03T08:38:28Z"}, "message": "2229: Don't move out of drop type", "tree": {"sha": "7fccf522968f7d872775dfaa79f549fe30f698b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fccf522968f7d872775dfaa79f549fe30f698b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d", "html_url": "https://github.com/rust-lang/rust/commit/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2a408840ad18f74280805535f0b7193528ff3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a408840ad18f74280805535f0b7193528ff3df", "html_url": "https://github.com/rust-lang/rust/commit/c2a408840ad18f74280805535f0b7193528ff3df"}], "stats": {"total": 240, "additions": 239, "deletions": 1}, "files": [{"sha": "2758b23a762f89e507aafd1fcb0861a0d80125cd", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d", "patch": "@@ -399,7 +399,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             };\n \n+            // This restriction needs to be applied after we have handled adjustments for `move`\n+            // closures. We want to make sure any adjustment that might make us move the place into\n+            // the closure gets handled.\n+            let (place, capture_kind) =\n+                restrict_precision_for_drop_types(self, place, capture_kind, usage_span);\n+\n             capture_info.capture_kind = capture_kind;\n+\n             let capture_info = if let Some(existing) = processed.get(&place) {\n                 determine_capture_info(*existing, capture_info)\n             } else {\n@@ -626,7 +633,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.struct_span_lint_hir(\n                 lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n                 closure_hir_id,\n-                closure_head_span,\n+                 closure_head_span,\n                 |lint| {\n                     let mut diagnostics_builder = lint.build(\n                         format!(\n@@ -1835,6 +1842,31 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n         self.borrow(assignee_place, diag_expr_id, ty::BorrowKind::MutBorrow);\n     }\n }\n+\n+/// Rust doesn't permit moving fields out of a type that implements drop\n+fn restrict_precision_for_drop_types<'a, 'tcx>(\n+    fcx: &'a FnCtxt<'a, 'tcx>,\n+    mut place: Place<'tcx>,\n+    mut curr_mode: ty::UpvarCapture<'tcx>,\n+    span: Span,\n+) -> (Place<'tcx>, ty::UpvarCapture<'tcx>) {\n+    let is_copy_type = fcx.infcx.type_is_copy_modulo_regions(fcx.param_env, place.ty(), span);\n+\n+    if let (false, UpvarCapture::ByValue(..)) = (is_copy_type, curr_mode) {\n+        for i in 0..place.projections.len() {\n+            match place.ty_before_projection(i).kind() {\n+                ty::Adt(def, _) if def.destructor(fcx.tcx).is_some() => {\n+                    truncate_place_to_len_and_update_capture_kind(&mut place, &mut curr_mode, i);\n+                    break;\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+\n+    (place, curr_mode)\n+}\n+\n /// Truncate `place` so that an `unsafe` block isn't required to capture it.\n /// - No projections are applied to raw pointers, since these require unsafe blocks. We capture\n ///   them completely."}, {"sha": "f5906d306007e16e536bcd772eeb4990fb704479", "filename": "src/test/ui/closures/2229_closure_analysis/issue-88476.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88476.rs?ref=153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d", "patch": "@@ -0,0 +1,62 @@\n+// edition:2021\n+\n+#![feature(rustc_attrs)]\n+\n+// Test that we can't move out of struct that impls `Drop`.\n+\n+\n+use std::rc::Rc;\n+\n+// Test that we restrict precision when moving not-`Copy` types, if any of the parent paths\n+// implement `Drop`. This is to ensure that we don't move out of a type that implements Drop.\n+pub fn test1() {\n+    struct Foo(Rc<i32>);\n+\n+    impl Drop for Foo {\n+        fn drop(self: &mut Foo) {}\n+    }\n+\n+    let f = Foo(Rc::new(1));\n+    let x = #[rustc_capture_analysis] move || {\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    //~| ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        println!(\"{:?}\", f.0);\n+        //~^ NOTE: Capturing f[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture f[] -> ByValue\n+    };\n+\n+    x();\n+}\n+\n+// Test that we don't restrict precision when moving `Copy` types(i.e. when copying),\n+// even if any of the parent paths implement `Drop`.\n+fn test2() {\n+    struct Character {\n+        hp: u32,\n+        name: String,\n+    }\n+\n+    impl Drop for Character {\n+        fn drop(&mut self) {}\n+    }\n+\n+    let character = Character { hp: 100, name: format!(\"A\") };\n+\n+    let c = #[rustc_capture_analysis] move || {\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    //~| ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        println!(\"{}\", character.hp)\n+        //~^ NOTE: Capturing character[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture character[(0, 0)] -> ByValue\n+    };\n+\n+    c();\n+\n+    println!(\"{}\", character.name);\n+}\n+\n+fn main() {}"}, {"sha": "c7c9ecbbb0e8e75bc827d07b8999ced2f194acef", "filename": "src/test/ui/closures/2229_closure_analysis/issue-88476.stderr", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88476.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88476.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88476.stderr?ref=153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d", "patch": "@@ -0,0 +1,97 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/issue-88476.rs:20:13\n+   |\n+LL |     let x = #[rustc_capture_analysis] move || {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/issue-88476.rs:47:13\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error: First Pass analysis includes:\n+  --> $DIR/issue-88476.rs:20:39\n+   |\n+LL |       let x = #[rustc_capture_analysis] move || {\n+   |  _______________________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing f[(0, 0)] -> ImmBorrow\n+  --> $DIR/issue-88476.rs:25:26\n+   |\n+LL |         println!(\"{:?}\", f.0);\n+   |                          ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/issue-88476.rs:20:39\n+   |\n+LL |       let x = #[rustc_capture_analysis] move || {\n+   |  _______________________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture f[] -> ByValue\n+  --> $DIR/issue-88476.rs:25:26\n+   |\n+LL |         println!(\"{:?}\", f.0);\n+   |                          ^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/issue-88476.rs:47:39\n+   |\n+LL |       let c = #[rustc_capture_analysis] move || {\n+   |  _______________________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing character[(0, 0)] -> ImmBorrow\n+  --> $DIR/issue-88476.rs:52:24\n+   |\n+LL |         println!(\"{}\", character.hp)\n+   |                        ^^^^^^^^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/issue-88476.rs:47:39\n+   |\n+LL |       let c = #[rustc_capture_analysis] move || {\n+   |  _______________________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture character[(0, 0)] -> ByValue\n+  --> $DIR/issue-88476.rs:52:24\n+   |\n+LL |         println!(\"{}\", character.hp)\n+   |                        ^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f44c2af803bcb5aa61056c35f0d7f194642b33ec", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/issue-88476.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-88476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-88476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-88476.rs?ref=153aa71c14d39ee1cb7f989d89b1f2891fdfcb6d", "patch": "@@ -0,0 +1,47 @@\n+// check-pass\n+// edition:2021\n+\n+use std::rc::Rc;\n+\n+// Test that we restrict precision when moving not-`Copy` types, if any of the parent paths\n+// implement `Drop`. This is to ensure that we don't move out of a type that implements Drop.\n+pub fn test1() {\n+    struct Foo(Rc<i32>);\n+\n+    impl Drop for Foo {\n+        fn drop(self: &mut Foo) {}\n+    }\n+\n+    let f = Foo(Rc::new(1));\n+    let x = move || {\n+        println!(\"{:?}\", f.0);\n+    };\n+\n+    x();\n+}\n+\n+\n+// Test that we don't restrict precision when moving `Copy` types(i.e. when copying),\n+// even if any of the parent paths implement `Drop`.\n+pub fn test2() {\n+    struct Character {\n+        hp: u32,\n+        name: String,\n+    }\n+\n+    impl Drop for Character {\n+        fn drop(&mut self) {}\n+    }\n+\n+    let character = Character { hp: 100, name: format!(\"A\") };\n+\n+    let c = move || {\n+        println!(\"{}\", character.hp)\n+    };\n+\n+    c();\n+\n+    println!(\"{}\", character.name);\n+}\n+\n+fn main() {}"}]}