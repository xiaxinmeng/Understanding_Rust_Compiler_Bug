{"sha": "0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlODc5MTg1MzZiOTgzM2JiYzZjNjgzZDFmOWQ1MWVlMmJmMDNlZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-25T17:49:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-25T17:49:06Z"}, "message": "Auto merge of #6971 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "334fb691ef118bb2fd3b2a6cb31a2dfa9eb9a85d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/334fb691ef118bb2fd3b2a6cb31a2dfa9eb9a85d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "html_url": "https://github.com/rust-lang/rust/commit/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "981ffa7c14c1cfd16390d5d92d7ca0b548477b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/981ffa7c14c1cfd16390d5d92d7ca0b548477b95", "html_url": "https://github.com/rust-lang/rust/commit/981ffa7c14c1cfd16390d5d92d7ca0b548477b95"}, {"sha": "40e68e5956685fb8ae2848421a9926e5fa6d13ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/40e68e5956685fb8ae2848421a9926e5fa6d13ca", "html_url": "https://github.com/rust-lang/rust/commit/40e68e5956685fb8ae2848421a9926e5fa6d13ca"}], "stats": {"total": 301, "additions": 145, "deletions": 156}, "files": [{"sha": "cade44a0a9ab4a8bc0cd4a3ad2489f86a4dded74", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.52\"\n+version = \"0.1.53\"\n authors = [\"The Rust Clippy Developers\"]\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\""}, {"sha": "05cdd9d064a8e44b3d0d4d28361afe4b74ffc126", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.1.52\"\n+version = \"0.1.53\"\n # end automatic update\n authors = [\"The Rust Clippy Developers\"]\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\""}, {"sha": "3cef8d2a78bf727eb6e99e0414b29ca1f216ac48", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -564,7 +564,7 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n         // check for `rustfmt_skip` and `rustfmt::skip`\n         if let Some(skip_item) = &items[1].meta_item();\n         if skip_item.has_name(sym!(rustfmt_skip)) ||\n-            skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym!(skip);\n+            skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym::skip;\n         // Only lint outer attributes, because custom inner attributes are unstable\n         // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n         if let AttrStyle::Outer = attr.style;"}, {"sha": "3581ab41906f414f26e97311c5d8360c2c855f21", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -4,6 +4,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n@@ -184,6 +185,8 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {"}, {"sha": "d7ca24487a884ba0d374c91ea44bb93898a5099f", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -120,7 +120,7 @@ impl LateLintPass<'_> for InconsistentStructConstructor {\n \n // Check whether the order of the fields in the constructor is consistent with the order in the\n // definition.\n-fn is_consistent_order<'tcx>(fields: &'tcx [hir::Field<'tcx>], def_order_map: &FxHashMap<Symbol, usize>) -> bool {\n+fn is_consistent_order<'tcx>(fields: &'tcx [hir::ExprField<'tcx>], def_order_map: &FxHashMap<Symbol, usize>) -> bool {\n     let mut cur_idx = usize::MIN;\n     for f in fields {\n         let next_idx = def_order_map[&f.ident.name];"}, {"sha": "3a9236d8735b546fae020c1622c61b477affe866", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -5,7 +5,6 @@\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n #![feature(control_flow_enum)]"}, {"sha": "e3b3fa21cabb4a5298d9ec2436e4a87c4476338f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -388,7 +388,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n                 return;\n             },\n-            TyKind::TraitObject(bounds, ref lt) => {\n+            TyKind::TraitObject(bounds, ref lt, _) => {\n                 if !lt.is_elided() {\n                     self.unelided_trait_object_lifetime = true;\n                 }"}, {"sha": "1425d50f56046c2fcc9abc8a31be988154e1bc74", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -5,7 +5,7 @@ use if_chain::if_chain;\n use rustc_hir::{BindingAnnotation, Expr, HirId, Node, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n-use rustc_middle::ty;\n+use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n@@ -107,6 +107,8 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n             }\n         }\n     }\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n impl MutatePairDelegate<'_, '_> {"}, {"sha": "95261580b8e7413d9cd60caa45d6d460ec02d91d", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::meets_msrv;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n-use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantData, VisibilityKind};\n+use rustc_ast::ast::{Attribute, FieldDef, Item, ItemKind, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -144,11 +144,11 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n }\n \n fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data: &VariantData) {\n-    fn is_private(field: &StructField) -> bool {\n+    fn is_private(field: &FieldDef) -> bool {\n         matches!(field.vis.kind, VisibilityKind::Inherited)\n     }\n \n-    fn is_non_exhaustive_marker(field: &StructField) -> bool {\n+    fn is_non_exhaustive_marker(field: &FieldDef) -> bool {\n         is_private(field) && field.ty.kind.is_unit() && field.ident.map_or(true, |n| n.as_str().starts_with('_'))\n     }\n "}, {"sha": "3680429fed7d8709ba446ec993d6a39da6fd6d39", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -29,7 +29,7 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::sym;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n-use std::collections::Bound;\n+use std::ops::Bound;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for matches with a single arm where an `if let`"}, {"sha": "89dedc5f0d80715d1d5db376d78fcd869e8f7067", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -155,6 +155,7 @@ pub(super) fn check<'tcx>(\n             }\n         }\n     }\n+\n     if args.len() == 2 {\n         match args[1].kind {\n             hir::ExprKind::Call(ref fun, ref or_args) => {"}, {"sha": "ff87828c2e777811450bca1be835d91e46e435ef", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -188,7 +188,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n             let attrs = cx.tcx.hir().attrs(sf.hir_id);\n             self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");"}, {"sha": "e70c248e87bea066b31200ca2829f764f5b10548", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Node, PatKind, QPath, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n@@ -333,4 +334,6 @@ impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n     fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {}\n \n     fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n }"}, {"sha": "aa1d8fbe300ce9f83d8c6c543791fb613e5699b0", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -179,9 +179,15 @@ fn is_value_unfrozen_poly<'tcx>(cx: &LateContext<'tcx>, body_id: BodyId, ty: Ty<\n fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: DefId, ty: Ty<'tcx>) -> bool {\n     let substs = cx.typeck_results().node_substs(hir_id);\n \n-    let result = cx\n-        .tcx\n-        .const_eval_resolve(cx.param_env, ty::WithOptConstParam::unknown(def_id), substs, None, None);\n+    let result = cx.tcx.const_eval_resolve(\n+        cx.param_env,\n+        ty::Unevaluated {\n+            def: ty::WithOptConstParam::unknown(def_id),\n+            substs,\n+            promoted: None,\n+        },\n+        None,\n+    );\n     is_value_unfrozen_raw(cx, result, ty)\n }\n "}, {"sha": "4550b367da4bf92fd9a39493554c9e105dc2621b", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::last_path_segment;\n use rustc_hir::{\n-    intravisit, Body, Expr, ExprKind, FieldPat, FnDecl, HirId, LocalSource, MatchSource, Mutability, Pat, PatKind,\n+    intravisit, Body, Expr, ExprKind, FnDecl, HirId, LocalSource, MatchSource, Mutability, Pat, PatField, PatKind,\n     QPath, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -282,7 +282,7 @@ where\n \n fn find_first_mismatch_in_struct<'tcx>(\n     cx: &LateContext<'tcx>,\n-    field_pats: &[FieldPat<'_>],\n+    field_pats: &[PatField<'_>],\n     field_defs: &[FieldDef],\n     substs_ref: SubstsRef<'tcx>,\n ) -> Option<(Span, Mutability, Level)> {"}, {"sha": "abebd4227975ef3425c2edb2ffefc5ebc7613761", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -59,8 +59,8 @@ impl EarlyLintPass for RedundantFieldNames {\n         if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n-        if let ExprKind::Struct(_, ref fields, _) = expr.kind {\n-            for field in fields {\n+        if let ExprKind::Struct(ref se) = expr.kind {\n+            for field in &se.fields {\n                 if field.is_shorthand {\n                     continue;\n                 }"}, {"sha": "46f423204a21d3282ed3cb1097e9826b32980bf1", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -565,7 +565,7 @@ fn ident_difference_expr_with_base_location(\n         | (Try(_), Try(_))\n         | (Paren(_), Paren(_))\n         | (Repeat(_, _), Repeat(_, _))\n-        | (Struct(_, _, _), Struct(_, _, _))\n+        | (Struct(_), Struct(_))\n         | (MacCall(_), MacCall(_))\n         | (LlvmInlineAsm(_), LlvmInlineAsm(_))\n         | (InlineAsm(_), InlineAsm(_))"}, {"sha": "d68c6db4e23343b4055b4a0f55ee1190aa400616", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -50,7 +50,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                     // Originally reported as the issue #3128.\n                     let inner_snippet = snippet(cx, inner.span, \"..\");\n                     let suggestion = match &inner.kind {\n-                        TyKind::TraitObject(bounds, lt_bound) if bounds.len() > 1 || !lt_bound.is_elided() => {\n+                        TyKind::TraitObject(bounds, lt_bound, _) if bounds.len() > 1 || !lt_bound.is_elided() => {\n                             format!(\"&{}({})\", ltopt, &inner_snippet)\n                         },\n                         TyKind::Path(qpath)\n@@ -86,7 +86,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n // Returns true if given type is `Any` trait.\n fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n     if_chain! {\n-        if let TyKind::TraitObject(ref traits, _) = t.kind;\n+        if let TyKind::TraitObject(ref traits, ..) = t.kind;\n         if !traits.is_empty();\n         // Only Send/Sync can be used as additional traits, so it is enough to\n         // check only the first trait."}, {"sha": "c73c1c9d92db65b27e12ab9fc39995bf37d68319", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -268,7 +268,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         self.check_fn_decl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_>, field: &hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         self.check_ty(cx, &field.ty, false);\n     }\n \n@@ -434,7 +434,7 @@ impl<'tcx> LateLintPass<'tcx> for TypeComplexity {\n         self.check_fndecl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::FieldDef<'_>) {\n         // enum variants are also struct fields now\n         self.check_type(cx, &field.ty);\n     }\n@@ -524,7 +524,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n             // function types bring a lot of overhead\n             TyKind::BareFn(ref bare) if bare.abi == Abi::Rust => (50 * self.nest, 1),\n \n-            TyKind::TraitObject(ref param_bounds, _) => {\n+            TyKind::TraitObject(ref param_bounds, _, _) => {\n                 let has_lifetime_parameters = param_bounds.iter().any(|bound| {\n                     bound\n                         .bound_generic_params"}, {"sha": "2b9479365c67d3659bc09accbdaf9dd4b33f671d", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -73,11 +73,6 @@ impl EarlyLintPass for UnnestedOrPatterns {\n }\n \n fn lint_unnested_or_patterns(cx: &EarlyContext<'_>, pat: &Pat) {\n-    if !cx.sess.features_untracked().or_patterns {\n-        // Do not suggest nesting the patterns if the feature `or_patterns` is not enabled.\n-        return;\n-    }\n-\n     if let Ident(.., None) | Lit(_) | Wild | Path(..) | Range(..) | Rest | MacCall(_) = pat.kind {\n         // This is a leaf pattern, so cloning is unprofitable.\n         return;\n@@ -277,7 +272,7 @@ fn transform_with_focus_on_idx(alternatives: &mut Vec<P<Pat>>, focus_idx: usize)\n /// and check that all `fp_i` where `i \u2208 ((0...n) \\ k)` between two patterns are equal.\n fn extend_with_struct_pat(\n     path1: &ast::Path,\n-    fps1: &mut Vec<ast::FieldPat>,\n+    fps1: &mut Vec<ast::PatField>,\n     rest1: bool,\n     start: usize,\n     alternatives: &mut Vec<P<Pat>>,"}, {"sha": "a92c987014f195b946dd329aa8afcd6ff7298a9d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -101,12 +101,12 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n         done();\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::FieldDef<'_>) {\n         if !has_attr(cx, field.hir_id) {\n             return;\n         }\n         prelude();\n-        PrintVisitor::new(\"field\").visit_struct_field(field);\n+        PrintVisitor::new(\"field\").visit_field_def(field);\n         done();\n     }\n "}, {"sha": "6fd3c9d7dec25856f661f2f26e3e73d0d7b7e6dd", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -80,8 +80,8 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     // }\n     // }\n     //\n-    // fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx\n-    // hir::StructField) {\n+    // fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx\n+    // hir::FieldDef) {\n     // if !has_attr(&field.attrs) {\n     // return;\n     // }"}, {"sha": "d04c5f889dda0f24a6f9ff408cc02002b1a098a9", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.52\"\n+version = \"0.1.53\"\n authors = [\"The Rust Clippy Developers\"]\n edition = \"2018\"\n publish = false"}, {"sha": "eaea3e636f9c39bcc25b5e5260077d74e589b1fd", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -66,7 +66,7 @@ pub fn eq_range_end(l: &RangeEnd, r: &RangeEnd) -> bool {\n     }\n }\n \n-pub fn eq_field_pat(l: &FieldPat, r: &FieldPat) -> bool {\n+pub fn eq_field_pat(l: &PatField, r: &PatField) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n         && eq_pat(&l.pat, &r.pat)\n@@ -168,14 +168,16 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (AddrOf(lbk, lm, le), AddrOf(rbk, rm, re)) => lbk == rbk && lm == rm && eq_expr(le, re),\n         (Path(lq, lp), Path(rq, rp)) => both(lq, rq, |l, r| eq_qself(l, r)) && eq_path(lp, rp),\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n-        (Struct(lp, lfs, lb), Struct(rp, rfs, rb)) => {\n-            eq_path(lp, rp) && eq_struct_rest(lb, rb) && unordered_over(lfs, rfs, |l, r| eq_field(l, r))\n+        (Struct(lse), Struct(rse)) => {\n+            eq_path(&lse.path, &rse.path)\n+                && eq_struct_rest(&lse.rest, &rse.rest)\n+                && unordered_over(&lse.fields, &rse.fields, |l, r| eq_field(l, r))\n         },\n         _ => false,\n     }\n }\n \n-pub fn eq_field(l: &Field, r: &Field) -> bool {\n+pub fn eq_field(l: &ExprField, r: &ExprField) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n         && eq_expr(&l.expr, &r.expr)\n@@ -359,7 +361,7 @@ pub fn eq_variant_data(l: &VariantData, r: &VariantData) -> bool {\n     }\n }\n \n-pub fn eq_struct_field(l: &StructField, r: &StructField) -> bool {\n+pub fn eq_struct_field(l: &FieldDef, r: &FieldDef) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n         && eq_vis(&l.vis, &r.vis)\n@@ -406,6 +408,10 @@ pub fn eq_use_tree(l: &UseTree, r: &UseTree) -> bool {\n     eq_path(&l.prefix, &r.prefix) && eq_use_tree_kind(&l.kind, &r.kind)\n }\n \n+pub fn eq_anon_const(l: &AnonConst, r: &AnonConst) -> bool {\n+    eq_expr(&l.value, &r.value)\n+}\n+\n pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     use UseTreeKind::*;\n     match (l, r) {\n@@ -416,10 +422,6 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     }\n }\n \n-pub fn eq_anon_const(l: &AnonConst, r: &AnonConst) -> bool {\n-    eq_expr(&l.value, &r.value)\n-}\n-\n pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n     matches!(\n         (l, r),"}, {"sha": "ebe896b7ae86771c13ecabf27d3434a7d53ec6e0", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -341,9 +341,11 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::WithOptConstParam::unknown(def_id),\n-                        substs,\n-                        None,\n+                        ty::Unevaluated {\n+                            def: ty::WithOptConstParam::unknown(def_id),\n+                            substs,\n+                            promoted: None,\n+                        },\n                         None,\n                     )\n                     .ok()"}, {"sha": "0c0e4d3b4ce80ada140aff0ba44192048c84be2a", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -51,7 +51,7 @@ pub struct Range<'a> {\n pub fn range<'a>(expr: &'a hir::Expr<'_>) -> Option<Range<'a>> {\n     /// Finds the field named `name` in the field. Always return `Some` for\n     /// convenience.\n-    fn get_field<'c>(name: &str, fields: &'c [hir::Field<'_>]) -> Option<&'c hir::Expr<'c>> {\n+    fn get_field<'c>(name: &str, fields: &'c [hir::ExprField<'_>]) -> Option<&'c hir::Expr<'c>> {\n         let expr = &fields.iter().find(|field| field.ident.name.as_str() == name)?.expr;\n \n         Some(expr)"}, {"sha": "618d33545a4e3fe6c92f61070cb59a0c711468fc", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -6,8 +6,8 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def::Res;\n use rustc_hir::{\n-    BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, Field, FieldPat, FnRetTy,\n-    GenericArg, GenericArgs, Guard, HirId, InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatKind, Path,\n+    BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprField, ExprKind, FnRetTy, GenericArg,\n+    GenericArgs, Guard, HirId, InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path,\n     PathSegment, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lexer::{tokenize, TokenKind};\n@@ -248,7 +248,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::Struct(ref l_path, ref lf, ref lo), &ExprKind::Struct(ref r_path, ref rf, ref ro)) => {\n                 self.eq_qpath(l_path, r_path)\n                     && both(lo, ro, |l, r| self.eq_expr(l, r))\n-                    && over(lf, rf, |l, r| self.eq_field(l, r))\n+                    && over(lf, rf, |l, r| self.eq_expr_field(l, r))\n             },\n             (&ExprKind::Tup(l_tup), &ExprKind::Tup(r_tup)) => self.eq_exprs(l_tup, r_tup),\n             (&ExprKind::Unary(l_op, ref le), &ExprKind::Unary(r_op, ref re)) => l_op == r_op && self.eq_expr(le, re),\n@@ -263,7 +263,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         over(left, right, |l, r| self.eq_expr(l, r))\n     }\n \n-    fn eq_field(&mut self, left: &Field<'_>, right: &Field<'_>) -> bool {\n+    fn eq_expr_field(&mut self, left: &ExprField<'_>, right: &ExprField<'_>) -> bool {\n         left.ident.name == right.ident.name && self.eq_expr(&left.expr, &right.expr)\n     }\n \n@@ -287,8 +287,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n         left.name == right.name\n     }\n \n-    fn eq_fieldpat(&mut self, left: &FieldPat<'_>, right: &FieldPat<'_>) -> bool {\n-        let (FieldPat { ident: li, pat: lp, .. }, FieldPat { ident: ri, pat: rp, .. }) = (&left, &right);\n+    fn eq_pat_field(&mut self, left: &PatField<'_>, right: &PatField<'_>) -> bool {\n+        let (PatField { ident: li, pat: lp, .. }, PatField { ident: ri, pat: rp, .. }) = (&left, &right);\n         li.name == ri.name && self.eq_pat(lp, rp)\n     }\n \n@@ -297,7 +297,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         match (&left.kind, &right.kind) {\n             (&PatKind::Box(ref l), &PatKind::Box(ref r)) => self.eq_pat(l, r),\n             (&PatKind::Struct(ref lp, ref la, ..), &PatKind::Struct(ref rp, ref ra, ..)) => {\n-                self.eq_qpath(lp, rp) && over(la, ra, |l, r| self.eq_fieldpat(l, r))\n+                self.eq_qpath(lp, rp) && over(la, ra, |l, r| self.eq_pat_field(l, r))\n             },\n             (&PatKind::TupleStruct(ref lp, ref la, ls), &PatKind::TupleStruct(ref rp, ref ra, rs)) => {\n                 self.eq_qpath(lp, rp) && over(la, ra, |l, r| self.eq_pat(l, r)) && ls == rs\n@@ -885,7 +885,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::OpaqueDef(_, arg_list) => {\n                 self.hash_generic_args(arg_list);\n             },\n-            TyKind::TraitObject(_, lifetime) => {\n+            TyKind::TraitObject(_, lifetime, _) => {\n                 self.hash_lifetime(lifetime);\n             },\n             TyKind::Typeof(anon_const) => {"}, {"sha": "9e4dcb600ed94ea0a698164835a9a75fe1f45833", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,6 +1,5 @@\n #![feature(box_patterns)]\n #![feature(in_band_lifetimes)]\n-#![feature(or_patterns)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]\n #![allow(clippy::missing_errors_doc, clippy::missing_panics_doc, clippy::must_use_candidate)]\n@@ -61,9 +60,9 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    def, Arm, BindingAnnotation, Block, Body, Constness, CrateItem, Expr, ExprKind, FnDecl, ForeignItem, GenericArgs,\n-    GenericParam, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, LangItem, Lifetime, Local, MacroDef,\n-    MatchSource, Node, Param, Pat, PatKind, Path, PathSegment, QPath, Stmt, StructField, TraitItem, TraitItemKind,\n+    def, Arm, BindingAnnotation, Block, Body, Constness, CrateItem, Expr, ExprKind, FieldDef, FnDecl, ForeignItem,\n+    GenericArgs, GenericParam, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, LangItem, Lifetime, Local,\n+    MacroDef, MatchSource, Node, Param, Pat, PatKind, Path, PathSegment, QPath, Stmt, TraitItem, TraitItemKind,\n     TraitRef, TyKind, Variant, Visibility,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -722,7 +721,7 @@ pub fn get_node_span(node: Node<'_>) -> Option<Span> {\n         | Node::TraitItem(TraitItem { span, .. })\n         | Node::ImplItem(ImplItem { span, .. })\n         | Node::Variant(Variant { span, .. })\n-        | Node::Field(StructField { span, .. })\n+        | Node::Field(FieldDef { span, .. })\n         | Node::Expr(Expr { span, .. })\n         | Node::Stmt(Stmt { span, .. })\n         | Node::PathSegment(PathSegment {"}, {"sha": "54f110988d7352f63e5b75ea32f776d5e58ab2c0", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::{Expr, ExprKind, HirId, Path};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n@@ -77,6 +78,8 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n         self.update(&cmt)\n     }\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n pub struct ParamBindingIdCollector {"}, {"sha": "c2821f31fd7c30ae38fb66c8790db02d9a4875bd", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-03-11\"\n+channel = \"nightly-2021-03-25\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "b6aed862e895fde53dfdeb385932acfda624cc76", "filename": "src/driver.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -15,7 +15,7 @@ extern crate rustc_session;\n extern crate rustc_span;\n \n use rustc_interface::interface;\n-use rustc_session::Session;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::Symbol;\n use rustc_tools_util::VersionInfo;\n \n@@ -63,8 +63,8 @@ fn test_arg_value() {\n     assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n }\n \n-fn track_clippy_args(sess: &Session, args_env_var: &Option<String>) {\n-    sess.parse_sess.env_depinfo.borrow_mut().insert((\n+fn track_clippy_args(parse_sess: &mut ParseSess, args_env_var: &Option<String>) {\n+    parse_sess.env_depinfo.get_mut().insert((\n         Symbol::intern(\"CLIPPY_ARGS\"),\n         args_env_var.as_deref().map(Symbol::intern),\n     ));\n@@ -81,14 +81,9 @@ struct RustcCallbacks {\n \n impl rustc_driver::Callbacks for RustcCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n-        let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n-        config.register_lints = Some(Box::new(move |sess, lint_store| {\n-            if let Some(ref previous) = previous {\n-                (previous)(sess, lint_store);\n-            }\n-\n-            track_clippy_args(sess, &clippy_args_var);\n+        config.parse_sess_created = Some(Box::new(move |parse_sess| {\n+            track_clippy_args(parse_sess, &clippy_args_var);\n         }));\n     }\n }\n@@ -101,15 +96,16 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n     fn config(&mut self, config: &mut interface::Config) {\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n+        config.parse_sess_created = Some(Box::new(move |parse_sess| {\n+            track_clippy_args(parse_sess, &clippy_args_var);\n+        }));\n         config.register_lints = Some(Box::new(move |sess, mut lint_store| {\n             // technically we're ~guaranteed that this is none but might as well call anything that\n             // is there already. Certainly it can't hurt.\n             if let Some(previous) = &previous {\n                 (previous)(sess, lint_store);\n             }\n \n-            track_clippy_args(sess, &clippy_args_var);\n-\n             let conf = clippy_lints::read_conf(&[], &sess);\n             clippy_lints::register_plugins(&mut lint_store, &sess, &conf);\n             clippy_lints::register_pre_expansion_lints(&mut lint_store);"}, {"sha": "46463a29e9b20deec853a9a7fab3293cad5017d5", "filename": "tests/ui/unnested_or_patterns.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.fixed?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]"}, {"sha": "8ce0738bfc27b3c31cfe88e858544cf8d3bddc71", "filename": "tests/ui/unnested_or_patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]"}, {"sha": "f7cb513c15c90867ec1eceab3a656d66a0ba4bb7", "filename": "tests/ui/unnested_or_patterns.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.stderr?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,5 +1,5 @@\n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:10:12\n+  --> $DIR/unnested_or_patterns.rs:9:12\n    |\n LL |     if let box 0 | box 2 = Box::new(0) {}\n    |            ^^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     if let box (0 | 2) = Box::new(0) {}\n    |            ^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:11:12\n+  --> $DIR/unnested_or_patterns.rs:10:12\n    |\n LL |     if let box ((0 | 1)) | box (2 | 3) | box 4 = Box::new(0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     if let box (0 | 1 | 2 | 3 | 4) = Box::new(0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:13:12\n+  --> $DIR/unnested_or_patterns.rs:12:12\n    |\n LL |     if let &0 | C0 | &2 = &0 {}\n    |            ^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     if let &(0 | 2) | C0 = &0 {}\n    |            ^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:14:12\n+  --> $DIR/unnested_or_patterns.rs:13:12\n    |\n LL |     if let &mut 0 | &mut 2 = &mut 0 {}\n    |            ^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     if let &mut (0 | 2) = &mut 0 {}\n    |            ^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:15:12\n+  --> $DIR/unnested_or_patterns.rs:14:12\n    |\n LL |     if let x @ 0 | x @ 2 = 0 {}\n    |            ^^^^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     if let x @ (0 | 2) = 0 {}\n    |            ^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:16:12\n+  --> $DIR/unnested_or_patterns.rs:15:12\n    |\n LL |     if let (0, 1) | (0, 2) | (0, 3) = (0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     if let (0, 1 | 2 | 3) = (0, 0) {}\n    |            ^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:17:12\n+  --> $DIR/unnested_or_patterns.rs:16:12\n    |\n LL |     if let (1, 0) | (2, 0) | (3, 0) = (0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL |     if let (1 | 2 | 3, 0) = (0, 0) {}\n    |            ^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:18:12\n+  --> $DIR/unnested_or_patterns.rs:17:12\n    |\n LL |     if let (x, ..) | (x, 1) | (x, 2) = (0, 1) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -88,7 +88,7 @@ LL |     if let (x, ..) | (x, 1 | 2) = (0, 1) {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:19:12\n+  --> $DIR/unnested_or_patterns.rs:18:12\n    |\n LL |     if let [0] | [1] = [0] {}\n    |            ^^^^^^^^^\n@@ -99,7 +99,7 @@ LL |     if let [0 | 1] = [0] {}\n    |            ^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:20:12\n+  --> $DIR/unnested_or_patterns.rs:19:12\n    |\n LL |     if let [x, 0] | [x, 1] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ LL |     if let [x, 0 | 1] = [0, 1] {}\n    |            ^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:21:12\n+  --> $DIR/unnested_or_patterns.rs:20:12\n    |\n LL |     if let [x, 0] | [x, 1] | [x, 2] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -121,7 +121,7 @@ LL |     if let [x, 0 | 1 | 2] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:22:12\n+  --> $DIR/unnested_or_patterns.rs:21:12\n    |\n LL |     if let [x, ..] | [x, 1] | [x, 2] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ LL |     if let [x, ..] | [x, 1 | 2] = [0, 1] {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:24:12\n+  --> $DIR/unnested_or_patterns.rs:23:12\n    |\n LL |     if let TS(0, x) | TS(1, x) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^\n@@ -143,7 +143,7 @@ LL |     if let TS(0 | 1, x) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:25:12\n+  --> $DIR/unnested_or_patterns.rs:24:12\n    |\n LL |     if let TS(1, 0) | TS(2, 0) | TS(3, 0) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     if let TS(1 | 2 | 3, 0) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:26:12\n+  --> $DIR/unnested_or_patterns.rs:25:12\n    |\n LL |     if let TS(x, ..) | TS(x, 1) | TS(x, 2) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -165,7 +165,7 @@ LL |     if let TS(x, ..) | TS(x, 1 | 2) = TS(0, 0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns.rs:31:12\n+  --> $DIR/unnested_or_patterns.rs:30:12\n    |\n LL |     if let S { x: 0, y } | S { y, x: 1 } = (S { x: 0, y: 1 }) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d3539d798157b699c7aee8aea479741d38e8bbba", "filename": "tests/ui/unnested_or_patterns2.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns2.fixed?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats)]"}, {"sha": "9cea5cdea69977755613df2f9d58e351406cb7df", "filename": "tests/ui/unnested_or_patterns2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns2.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n #![allow(clippy::cognitive_complexity, clippy::match_ref_pats)]"}, {"sha": "9042c9c00b1ac525a6c448fe9ea9a7a2343b448b", "filename": "tests/ui/unnested_or_patterns2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Funnested_or_patterns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns2.stderr?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,5 +1,5 @@\n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:10:12\n+  --> $DIR/unnested_or_patterns2.rs:9:12\n    |\n LL |     if let Some(Some(0)) | Some(Some(1)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     if let Some(Some(0 | 1)) = None {}\n    |            ^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:11:12\n+  --> $DIR/unnested_or_patterns2.rs:10:12\n    |\n LL |     if let Some(Some(0)) | Some(Some(1) | Some(2)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     if let Some(Some(0 | 1 | 2)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:12:12\n+  --> $DIR/unnested_or_patterns2.rs:11:12\n    |\n LL |     if let Some(Some(0 | 1) | Some(2)) | Some(Some(3) | Some(4)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     if let Some(Some(0 | 1 | 2 | 3 | 4)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:13:12\n+  --> $DIR/unnested_or_patterns2.rs:12:12\n    |\n LL |     if let Some(Some(0) | Some(1 | 2)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     if let Some(Some(0 | 1 | 2)) = None {}\n    |            ^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:14:12\n+  --> $DIR/unnested_or_patterns2.rs:13:12\n    |\n LL |     if let ((0,),) | ((1,) | (2,),) = ((0,),) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     if let ((0 | 1 | 2,),) = ((0,),) {}\n    |            ^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:15:12\n+  --> $DIR/unnested_or_patterns2.rs:14:12\n    |\n LL |     if let 0 | (1 | 2) = 0 {}\n    |            ^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     if let 0 | 1 | 2 = 0 {}\n    |            ^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:16:12\n+  --> $DIR/unnested_or_patterns2.rs:15:12\n    |\n LL |     if let box (0 | 1) | (box 2 | box (3 | 4)) = Box::new(0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL |     if let box (0 | 1 | 2 | 3 | 4) = Box::new(0) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnested or-patterns\n-  --> $DIR/unnested_or_patterns2.rs:17:12\n+  --> $DIR/unnested_or_patterns2.rs:16:12\n    |\n LL |     if let box box 0 | box (box 2 | box 4) = Box::new(Box::new(0)) {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6bd35057bfad12f8ef301d808fc12e38db203a4c", "filename": "tests/ui/unnested_or_patterns3.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/981ffa7c14c1cfd16390d5d92d7ca0b548477b95/tests%2Fui%2Funnested_or_patterns3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/981ffa7c14c1cfd16390d5d92d7ca0b548477b95/tests%2Fui%2Funnested_or_patterns3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns3.rs?ref=981ffa7c14c1cfd16390d5d92d7ca0b548477b95", "patch": "@@ -1,6 +0,0 @@\n-#![warn(clippy::unnested_or_patterns)]\n-\n-// Test that `unnested_or_patterns` does not trigger without enabling `or_patterns`\n-fn main() {\n-    if let (0, 1) | (0, 2) | (0, 3) = (0, 0) {}\n-}"}, {"sha": "1282befdfb36b9e3b9759583672492960b453708", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -312,17 +312,18 @@ mod issue4140 {\n         fn try_from(value: T) -> Result<Self, Error<Self::From, Self::To>>;\n     }\n \n-    impl<F, T> TryFrom<F> for T\n-    where\n-        T: From<F>,\n-    {\n-        type From = Self;\n-        type To = Self;\n-\n-        fn try_from(value: F) -> Result<Self, Error<Self::From, Self::To>> {\n-            Ok(From::from(value))\n-        }\n-    }\n+    // FIXME: Suggested fix results in infinite recursion.\n+    // impl<F, T> TryFrom<F> for T\n+    // where\n+    //     T: From<F>,\n+    // {\n+    //     type From = Self::From;\n+    //     type To = Self::To;\n+\n+    //     fn try_from(value: F) -> Result<Self, Error<Self::From, Self::To>> {\n+    //         Ok(From::from(value))\n+    //     }\n+    // }\n \n     impl From<bool> for i64 {\n         type From = bool;"}, {"sha": "7aaac7b2414e6fa1bf906f905d4b6e49dd645014", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -312,17 +312,18 @@ mod issue4140 {\n         fn try_from(value: T) -> Result<Self, Error<Self::From, Self::To>>;\n     }\n \n-    impl<F, T> TryFrom<F> for T\n-    where\n-        T: From<F>,\n-    {\n-        type From = T::From;\n-        type To = T::To;\n-\n-        fn try_from(value: F) -> Result<Self, Error<Self::From, Self::To>> {\n-            Ok(From::from(value))\n-        }\n-    }\n+    // FIXME: Suggested fix results in infinite recursion.\n+    // impl<F, T> TryFrom<F> for T\n+    // where\n+    //     T: From<F>,\n+    // {\n+    //     type From = Self::From;\n+    //     type To = Self::To;\n+\n+    //     fn try_from(value: F) -> Result<Self, Error<Self::From, Self::To>> {\n+    //         Ok(From::from(value))\n+    //     }\n+    // }\n \n     impl From<bool> for i64 {\n         type From = bool;"}, {"sha": "a32a9b9157d7408e7aa58c75cb088c5621bd9588", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -157,22 +157,10 @@ LL |             Foo { value }\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:319:21\n-   |\n-LL |         type From = T::From;\n-   |                     ^^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:320:19\n-   |\n-LL |         type To = T::To;\n-   |                   ^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:453:13\n+  --> $DIR/use_self.rs:454:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "749393db124b67bed265c18304c7b3966043115e", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -2,7 +2,6 @@\n \n #![warn(clippy::while_let_on_iterator)]\n #![allow(clippy::never_loop, unreachable_code, unused_mut)]\n-#![feature(or_patterns)]\n \n fn base() {\n     let mut iter = 1..20;"}, {"sha": "30e3b82a7ccdd9e8669ec9cc4ed6d22e5645c9a8", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -2,7 +2,6 @@\n \n #![warn(clippy::while_let_on_iterator)]\n #![allow(clippy::never_loop, unreachable_code, unused_mut)]\n-#![feature(or_patterns)]\n \n fn base() {\n     let mut iter = 1..20;"}, {"sha": "6554977c798bc4195a9688b5c51d3b7afe7d1d81", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -1,43 +1,43 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:9:5\n+  --> $DIR/while_let_on_iterator.rs:8:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:14:5\n+  --> $DIR/while_let_on_iterator.rs:13:5\n    |\n LL |     while let Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:19:5\n+  --> $DIR/while_let_on_iterator.rs:18:5\n    |\n LL |     while let Some(_) = iter.next() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:102:9\n+  --> $DIR/while_let_on_iterator.rs:101:9\n    |\n LL |         while let Some([..]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [..] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:109:9\n+  --> $DIR/while_let_on_iterator.rs:108:9\n    |\n LL |         while let Some([_x]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [_x] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:122:9\n+  --> $DIR/while_let_on_iterator.rs:121:9\n    |\n LL |         while let Some(x @ [_]) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x @ [_] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:154:9\n+  --> $DIR/while_let_on_iterator.rs:153:9\n    |\n LL |         while let Some(_) = y.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`"}, {"sha": "d924f33797d299ee73793255dcb8ab1e0ff6b3d4", "filename": "tests/ui/zero_sized_btreemap_values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fzero_sized_btreemap_values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fzero_sized_btreemap_values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_sized_btreemap_values.stderr?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -83,7 +83,7 @@ error: map with zero-sized value type\n   --> $DIR/zero_sized_btreemap_values.rs:64:35\n    |\n LL |     let _: BTreeMap<String, ()> = BTreeMap::new();\n-   |                                   ^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^\n    |\n    = help: consider using a set instead\n "}, {"sha": "79770bf90d7012556666cd92eaf18c81cc09983d", "filename": "tests/ui/zero_sized_hashmap_values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fzero_sized_hashmap_values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e87918536b9833bbc6c683d1f9d51ee2bf03ef1/tests%2Fui%2Fzero_sized_hashmap_values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_sized_hashmap_values.stderr?ref=0e87918536b9833bbc6c683d1f9d51ee2bf03ef1", "patch": "@@ -83,7 +83,7 @@ error: map with zero-sized value type\n   --> $DIR/zero_sized_hashmap_values.rs:64:34\n    |\n LL |     let _: HashMap<String, ()> = HashMap::new();\n-   |                                  ^^^^^^^^^^^^\n+   |                                  ^^^^^^^\n    |\n    = help: consider using a set instead\n "}]}