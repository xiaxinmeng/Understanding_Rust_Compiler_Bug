{"sha": "6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NDhmNzhjYjFmMzYwZTJiMTUxZWQ5ZWIzZTQ4N2NmMWM2MWVmMGU=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T17:13:37Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T19:12:26Z"}, "message": "Polymorphic protocols work well enough to do MapReduce.\n\nI did some horrible things with type variable naming here. It should do the right thing in most cases, but we'll need to go through and make it correct someday.", "tree": {"sha": "e610ab3c0aa2b6ffebd3b3495624aa51796eb56c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e610ab3c0aa2b6ffebd3b3495624aa51796eb56c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e", "html_url": "https://github.com/rust-lang/rust/commit/6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14adb98b64d45c42c256d56e3f0fd167abd36434", "url": "https://api.github.com/repos/rust-lang/rust/commits/14adb98b64d45c42c256d56e3f0fd167abd36434", "html_url": "https://github.com/rust-lang/rust/commit/14adb98b64d45c42c256d56e3f0fd167abd36434"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "392e6ba392acc28119f8ca48dbe0daf73deeda26", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e", "patch": "@@ -319,11 +319,12 @@ impl compile of gen_init for protocol {\n     }\n \n     fn buffer_ty_path(cx: ext_ctxt) -> @ast::ty {\n-        let mut params = ~[];\n+        let mut params: ~[ast::ty_param] = ~[];\n         for (copy self.states).each |s| {\n             for s.ty_params.each |tp| {\n-                if !params.contains(tp) {\n-                    vec::push(params, tp);\n+                alt params.find(|tpp| *tp.ident == *tpp.ident) {\n+                  none { vec::push(params, tp) }\n+                  _ { }\n                 }\n             }\n         }\n@@ -334,11 +335,12 @@ impl compile of gen_init for protocol {\n \n     fn gen_buffer_type(cx: ext_ctxt) -> @ast::item {\n         let ext_cx = cx;\n-        let mut params = ~[];\n+        let mut params: ~[ast::ty_param] = ~[];\n         let fields = do (copy self.states).map_to_vec |s| {\n             for s.ty_params.each |tp| {\n-                if !params.contains(tp) {\n-                    vec::push(params, tp);\n+                alt params.find(|tpp| *tp.ident == *tpp.ident) {\n+                  none { vec::push(params, tp) }\n+                  _ { }\n                 }\n             }\n             let ty = s.to_ty(cx);"}, {"sha": "47bb538d03d7e54c0458c1791d48194aed508d10", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=6748f78cb1f360e2b151ed9eb3e487cf1c61ef0e", "patch": "@@ -143,14 +143,12 @@ mod map_reduce {\n     proto! ctrl_proto {\n         open: send<K: copy send, V: copy send> {\n             find_reducer(K) -> reducer_response<K, V>,\n-            mapper_done -> terminated\n+            mapper_done -> !\n         }\n \n         reducer_response: recv<K: copy send, V: copy send> {\n             reducer(chan<reduce_proto<V>>) -> open<K, V>\n         }\n-\n-        terminated: send { }\n     }\n \n     enum reduce_proto<V: copy send> { emit_val(V), done, ref, release }\n@@ -261,7 +259,7 @@ mod map_reduce {\n         while num_mappers > 0 {\n             let (_ready, message, ctrls) = pipes::select(ctrl);\n             alt option::unwrap(message) {\n-              ctrl_proto::mapper_done(_) {\n+              ctrl_proto::mapper_done {\n                 // #error(\"received mapper terminated.\");\n                 num_mappers -= 1;\n                 ctrl = ctrls;"}]}