{"sha": "440912b74f5ac063d8993741120a519bed3882f2", "node_id": "C_kwDOAAsO6NoAKDQ0MDkxMmI3NGY1YWMwNjNkODk5Mzc0MTEyMGE1MTliZWQzODgyZjI", "commit": {"author": {"name": "Colin Walters", "email": "walters@verbum.org", "date": "2023-05-17T21:29:02Z"}, "committer": {"name": "Colin Walters", "email": "walters@verbum.org", "date": "2023-05-18T12:02:53Z"}, "message": "Option::map_or_else: Show an example of integrating with Result\n\nMoving this from https://github.com/rust-lang/libs-team/issues/59\nwhere an API addition was rejected.  But I think it's valuable\nto add this example to the documentation at least.", "tree": {"sha": "79a349c13aac83ee5cabec1def20f2b26a512171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79a349c13aac83ee5cabec1def20f2b26a512171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440912b74f5ac063d8993741120a519bed3882f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440912b74f5ac063d8993741120a519bed3882f2", "html_url": "https://github.com/rust-lang/rust/commit/440912b74f5ac063d8993741120a519bed3882f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440912b74f5ac063d8993741120a519bed3882f2/comments", "author": {"login": "cgwalters", "id": 244096, "node_id": "MDQ6VXNlcjI0NDA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/244096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgwalters", "html_url": "https://github.com/cgwalters", "followers_url": "https://api.github.com/users/cgwalters/followers", "following_url": "https://api.github.com/users/cgwalters/following{/other_user}", "gists_url": "https://api.github.com/users/cgwalters/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgwalters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgwalters/subscriptions", "organizations_url": "https://api.github.com/users/cgwalters/orgs", "repos_url": "https://api.github.com/users/cgwalters/repos", "events_url": "https://api.github.com/users/cgwalters/events{/privacy}", "received_events_url": "https://api.github.com/users/cgwalters/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cgwalters", "id": 244096, "node_id": "MDQ6VXNlcjI0NDA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/244096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgwalters", "html_url": "https://github.com/cgwalters", "followers_url": "https://api.github.com/users/cgwalters/followers", "following_url": "https://api.github.com/users/cgwalters/following{/other_user}", "gists_url": "https://api.github.com/users/cgwalters/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgwalters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgwalters/subscriptions", "organizations_url": "https://api.github.com/users/cgwalters/orgs", "repos_url": "https://api.github.com/users/cgwalters/repos", "events_url": "https://api.github.com/users/cgwalters/events{/privacy}", "received_events_url": "https://api.github.com/users/cgwalters/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c180c438b5ee9a150d20b9822bd7712bef8f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c180c438b5ee9a150d20b9822bd7712bef8f62", "html_url": "https://github.com/rust-lang/rust/commit/24c180c438b5ee9a150d20b9822bd7712bef8f62"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "b93b40e300361765ec6ec1f76ce19bb887c29a5f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/440912b74f5ac063d8993741120a519bed3882f2/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440912b74f5ac063d8993741120a519bed3882f2/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=440912b74f5ac063d8993741120a519bed3882f2", "patch": "@@ -1138,7 +1138,7 @@ impl<T> Option<T> {\n     /// Computes a default function result (if none), or\n     /// applies a different function to the contained value (if any).\n     ///\n-    /// # Examples\n+    /// # Basic examples\n     ///\n     /// ```\n     /// let k = 21;\n@@ -1149,6 +1149,25 @@ impl<T> Option<T> {\n     /// let x: Option<&str> = None;\n     /// assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);\n     /// ```\n+    ///\n+    /// # Handling a Result-based fallback\n+    ///\n+    /// A somewhat common occurrence when dealing with optional values\n+    /// in combination with [`Result<T, E>`] is the case where one wants to invoke\n+    /// a fallible fallback if the option is not present.  This example\n+    /// parses a command line argument (if present), or the contents of a file to\n+    /// an integer.  However, unlike accessing the command line argument, reading\n+    /// the file is fallible, so it must be wrapped with `Ok`.\n+    ///\n+    /// ```no_run\n+    /// # fn main() -> Result<(), Box<dyn std::error::Error>> {\n+    /// let v: u64 = std::env::args()\n+    ///    .nth(1)\n+    ///    .map_or_else(|| std::fs::read_to_string(\"/etc/someconfig.conf\"), Ok)?\n+    ///    .parse()?;\n+    /// #   Ok(())\n+    /// # }\n+    /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U"}]}