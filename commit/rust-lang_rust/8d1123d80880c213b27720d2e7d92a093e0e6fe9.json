{"sha": "8d1123d80880c213b27720d2e7d92a093e0e6fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMTEyM2Q4MDg4MGMyMTNiMjc3MjBkMmU3ZDkyYTA5M2UwZTZmZTk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T00:52:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T00:52:39Z"}, "message": "Rollup merge of #65365 - skinny121:const-args-metadata, r=varkor\n\nInclude const generic arguments in metadata\n\nFixes #64707\nFixes #61624\nFixes #64730\n\nr? @varkor", "tree": {"sha": "4ff3c49779419f3caa77dfd503971c8c069cde40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff3c49779419f3caa77dfd503971c8c069cde40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1123d80880c213b27720d2e7d92a093e0e6fe9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpRhXCRBK7hj4Ov3rIwAAdHIIAJDYReAzVhv5ASmk4MWF8w38\nz2JnPArZs9mYuZ7Z/EIucQN39+65fPK5QWTNCzcX8a5Awmxpd5kkHL9UDw6gE9TN\nybTRNzc5eLfPxY0dQVnAGl3X8eRGXq0m2bt+zKTJC4eNAfYsGAuXOuQ2OdSjh8Ts\nE5YYgWzvhFdYIBEEtRmvr9Bw5aUB+V2P7S2t009AUWTOBadsVAGlb28NgXSAloBl\n4QPLE/yhjYV8PZgevVnj86bZQtVtVV8lnozcrA86fv8+dVOhLoaIdBoqSimNtFwA\nCcc8QrGixtS8Ce3qwXkvMU+/xmX8fvXm7PQ906EbTGfN2rrKZFDUQy4YaJ2Dets=\n=1ets\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ff3c49779419f3caa77dfd503971c8c069cde40\nparent 6241a4a108131a3812fb600f3a0f0eb7ba75ad76\nparent eb68bbb2b0a8fa78c81fc2a224133d480431fcfc\nauthor Tyler Mandry <tmandry@gmail.com> 1571100759 -0700\ncommitter GitHub <noreply@github.com> 1571100759 -0700\n\nRollup merge of #65365 - skinny121:const-args-metadata, r=varkor\n\nInclude const generic arguments in metadata\n\nFixes #64707\nFixes #61624\nFixes #64730\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1123d80880c213b27720d2e7d92a093e0e6fe9", "html_url": "https://github.com/rust-lang/rust/commit/8d1123d80880c213b27720d2e7d92a093e0e6fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1123d80880c213b27720d2e7d92a093e0e6fe9/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "url": "https://api.github.com/repos/rust-lang/rust/commits/6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "html_url": "https://github.com/rust-lang/rust/commit/6241a4a108131a3812fb600f3a0f0eb7ba75ad76"}, {"sha": "eb68bbb2b0a8fa78c81fc2a224133d480431fcfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb68bbb2b0a8fa78c81fc2a224133d480431fcfc", "html_url": "https://github.com/rust-lang/rust/commit/eb68bbb2b0a8fa78c81fc2a224133d480431fcfc"}], "stats": {"total": 84, "additions": 58, "deletions": 26}, "files": [{"sha": "03a14f886455af38b2e6b74c7492c6aef5e1ef24", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8d1123d80880c213b27720d2e7d92a093e0e6fe9", "patch": "@@ -5,7 +5,7 @@ use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n-use rustc::hir::GenericParamKind;\n+use rustc::hir::{GenericParamKind, AnonConst};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_index::vec::IndexVec;\n@@ -1712,6 +1712,11 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n         intravisit::walk_expr(self, ex);\n         self.encode_info_for_expr(ex);\n     }\n+    fn visit_anon_const(&mut self, c: &'tcx AnonConst) {\n+        intravisit::walk_anon_const(self, c);\n+        let def_id = self.tcx.hir().local_def_id(c.hir_id);\n+        self.record(def_id, EncodeContext::encode_info_for_anon_const, def_id);\n+    }\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         intravisit::walk_item(self, item);\n         let def_id = self.tcx.hir().local_def_id(item.hir_id);\n@@ -1729,25 +1734,10 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n                           EncodeContext::encode_info_for_foreign_item,\n                           (def_id, ni));\n     }\n-    fn visit_variant(&mut self,\n-                     v: &'tcx hir::Variant,\n-                     g: &'tcx hir::Generics,\n-                     id: hir::HirId) {\n-        intravisit::walk_variant(self, v, g, id);\n-\n-        if let Some(ref discr) = v.disr_expr {\n-            let def_id = self.tcx.hir().local_def_id(discr.hir_id);\n-            self.record(def_id, EncodeContext::encode_info_for_anon_const, def_id);\n-        }\n-    }\n     fn visit_generics(&mut self, generics: &'tcx hir::Generics) {\n         intravisit::walk_generics(self, generics);\n         self.encode_info_for_generics(generics);\n     }\n-    fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-        intravisit::walk_ty(self, ty);\n-        self.encode_info_for_ty(ty);\n-    }\n     fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef) {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         self.record(def_id, EncodeContext::encode_info_for_macro_def, macro_def);\n@@ -1785,16 +1775,6 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n-    fn encode_info_for_ty(&mut self, ty: &hir::Ty) {\n-        match ty.kind {\n-            hir::TyKind::Array(_, ref length) => {\n-                let def_id = self.tcx.hir().local_def_id(length.hir_id);\n-                self.record(def_id, EncodeContext::encode_info_for_anon_const, def_id);\n-            }\n-            _ => {}\n-        }\n-    }\n-\n     fn encode_info_for_expr(&mut self, expr: &hir::Expr) {\n         match expr.kind {\n             hir::ExprKind::Closure(..) => {"}, {"sha": "901fb5dd054e2f6f28853b73c96a6066e37ebf23", "filename": "src/test/ui/const-generics/auxiliary/const_generic_lib.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs?ref=8d1123d80880c213b27720d2e7d92a093e0e6fe9", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics)]\n+\n+pub struct Struct<const N: usize>(pub [u8; N]);\n+\n+pub type Alias = Struct<2>;\n+\n+pub fn function(value: Struct<3>) -> u8 {\n+    value.0[0]\n+}"}, {"sha": "d863d097d5caf324554f323cf7f3bb0953205027", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs?ref=8d1123d80880c213b27720d2e7d92a093e0e6fe9", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:const_generic_lib.rs\n+\n+extern crate const_generic_lib;\n+\n+fn main() {\n+    let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n+    //~^ ERROR mismatched types\n+    let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "b7fd29ce7067a266180f3697f0a10fd3a31e52be", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=8d1123d80880c213b27720d2e7d92a093e0e6fe9", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:6:41\n+   |\n+LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `2usize`\n+   |\n+   = note: expected type `const_generic_lib::Struct<3usize>`\n+              found type `const_generic_lib::Struct<_: usize>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:8:39\n+   |\n+LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2usize`, found `3usize`\n+   |\n+   = note: expected type `const_generic_lib::Struct<2usize>`\n+              found type `const_generic_lib::Struct<_: usize>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "98cf39a7ee11cdb38485d856fdd73b429bf64af9", "filename": "src/test/ui/const-generics/const-argument-cross-crate.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1123d80880c213b27720d2e7d92a093e0e6fe9/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate.rs?ref=8d1123d80880c213b27720d2e7d92a093e0e6fe9", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+// aux-build:const_generic_lib.rs\n+\n+extern crate const_generic_lib;\n+\n+struct Container(const_generic_lib::Alias);\n+\n+fn main() {\n+    let res = const_generic_lib::function(const_generic_lib::Struct([14u8, 1u8, 2u8]));\n+    assert_eq!(res, 14u8);\n+    let _ = Container(const_generic_lib::Struct([0u8, 1u8]));\n+}"}]}