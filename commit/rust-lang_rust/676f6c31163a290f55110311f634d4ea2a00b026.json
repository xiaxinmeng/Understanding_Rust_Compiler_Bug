{"sha": "676f6c31163a290f55110311f634d4ea2a00b026", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NmY2YzMxMTYzYTI5MGY1NTExMDMxMWY2MzRkNGVhMmEwMGIwMjY=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-28T21:03:47Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc_passes: use bug!(), span_bug!()", "tree": {"sha": "932f397fb6833b94cfe8c5f269776ffa87ca2165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932f397fb6833b94cfe8c5f269776ffa87ca2165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/676f6c31163a290f55110311f634d4ea2a00b026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/676f6c31163a290f55110311f634d4ea2a00b026", "html_url": "https://github.com/rust-lang/rust/commit/676f6c31163a290f55110311f634d4ea2a00b026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/676f6c31163a290f55110311f634d4ea2a00b026/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0305537652821c86cfb073901d1ecd93378e3382", "url": "https://api.github.com/repos/rust-lang/rust/commits/0305537652821c86cfb073901d1ecd93378e3382", "html_url": "https://github.com/rust-lang/rust/commit/0305537652821c86cfb073901d1ecd93378e3382"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "97a4c14863d59c083b54ea56fce231dea707ede8", "filename": "src/librustc_passes/const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/676f6c31163a290f55110311f634d4ea2a00b026/src%2Flibrustc_passes%2Fconst_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676f6c31163a290f55110311f634d4ea2a00b026/src%2Flibrustc_passes%2Fconst_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconst_fn.rs?ref=676f6c31163a290f55110311f634d4ea2a00b026", "patch": "@@ -44,13 +44,13 @@ impl<'a, 'v> Visitor<'v> for CheckBlock<'a> {\n             visit::walk_expr(self, e);\n         }\n     }\n-    fn visit_item(&mut self, _i: &'v ast::Item) { panic!(\"should be handled in CheckConstFn\") }\n+    fn visit_item(&mut self, _i: &'v ast::Item) { bug!(\"should be handled in CheckConstFn\") }\n     fn visit_fn(&mut self,\n                 _fk: FnKind<'v>,\n                 _fd: &'v ast::FnDecl,\n                 _b: &'v ast::Block,\n                 _s: Span,\n-                _fn_id: ast::NodeId) { panic!(\"should be handled in CheckConstFn\") }\n+                _fn_id: ast::NodeId) { bug!(\"should be handled in CheckConstFn\") }\n }\n \n fn check_block(sess: &Session, b: &ast::Block, kind: &'static str) {\n@@ -67,7 +67,7 @@ fn check_block(sess: &Session, b: &ast::Block, kind: &'static str) {\n             }\n             ast::StmtKind::Expr(ref expr, _) => expr.span,\n             ast::StmtKind::Semi(ref semi, _) => semi.span,\n-            ast::StmtKind::Mac(..) => unreachable!(),\n+            ast::StmtKind::Mac(..) => bug!(),\n         };\n         span_err!(sess, span, E0016,\n                   \"blocks in {}s are limited to items and tail expressions\", kind);"}, {"sha": "a7f0088873506ecc9c154f755cdf6961f4fede86", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/676f6c31163a290f55110311f634d4ea2a00b026/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676f6c31163a290f55110311f634d4ea2a00b026/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=676f6c31163a290f55110311f634d4ea2a00b026", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n             Mode::Const => \"constant\",\n             Mode::ConstFn => \"constant function\",\n             Mode::StaticMut | Mode::Static => \"static\",\n-            Mode::Var => unreachable!(),\n+            Mode::Var => bug!(),\n         }\n     }\n \n@@ -400,7 +400,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 // The count is checked elsewhere (typeck).\n                 let count = match node_ty.sty {\n                     ty::TyArray(_, n) => n,\n-                    _ => unreachable!()\n+                    _ => bug!()\n                 };\n                 // [element; 0] is always zero-sized.\n                 if count == 0 {\n@@ -570,7 +570,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n         hir::ExprCast(ref from, _) => {\n             debug!(\"Checking const cast(id={})\", from.id);\n             match v.tcx.cast_kinds.borrow().get(&from.id) {\n-                None => v.tcx.sess.span_bug(e.span, \"no kind for cast\"),\n+                None => span_bug!(e.span, \"no kind for cast\"),\n                 Some(&CastKind::PtrAddrCast) | Some(&CastKind::FnPtrAddrCast) => {\n                     v.add_qualif(ConstQualif::NOT_CONST);\n                     if v.mode != Mode::Var {"}, {"sha": "44bcdcdb364953a32227322f0b77ae9d0fb605df", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/676f6c31163a290f55110311f634d4ea2a00b026/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676f6c31163a290f55110311f634d4ea2a00b026/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=676f6c31163a290f55110311f634d4ea2a00b026", "patch": "@@ -28,7 +28,7 @@\n #![feature(rustc_private)]\n \n extern crate core;\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n extern crate rustc_front;\n extern crate rustc_const_eval;\n "}, {"sha": "2230283c9777ee529a5d6e2547bd3d7e86b3e340", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/676f6c31163a290f55110311f634d4ea2a00b026/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676f6c31163a290f55110311f634d4ea2a00b026/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=676f6c31163a290f55110311f634d4ea2a00b026", "patch": "@@ -218,9 +218,9 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n             // borrow fall out of scope, so that we can reborrow farther down.\n             maybe_expr = (*get_expr).clone();\n         } else {\n-            self.sess.span_bug(variant.span,\n-                               \"`check_static_recursion` attempted to visit \\\n-                                variant with unknown discriminant\")\n+            span_bug!(variant.span,\n+                      \"`check_static_recursion` attempted to visit \\\n+                      variant with unknown discriminant\")\n         }\n         // If `maybe_expr` is `None`, that's because no discriminant is\n         // specified that affects this variant. Thus, no risk of recursion.\n@@ -254,10 +254,10 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n                                     self.visit_impl_item(item),\n                                 ast_map::NodeForeignItem(_) => {},\n                                 _ => {\n-                                    self.sess.span_bug(\n+                                    span_bug!(\n                                         e.span,\n-                                        &format!(\"expected item, found {}\",\n-                                                 self.ast_map.node_to_string(node_id)));\n+                                        \"expected item, found {}\",\n+                                        self.ast_map.node_to_string(node_id));\n                                 }\n                             }\n                         }\n@@ -277,9 +277,9 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n                                 let variant = self.ast_map.expect_variant(variant_id);\n                                 self.visit_variant(variant, generics, enum_id);\n                             } else {\n-                                self.sess.span_bug(e.span,\n-                                                   \"`check_static_recursion` found \\\n-                                                    non-enum in Def::Variant\");\n+                                span_bug!(e.span,\n+                                          \"`check_static_recursion` found \\\n+                                           non-enum in Def::Variant\");\n                             }\n                         }\n                     }"}]}