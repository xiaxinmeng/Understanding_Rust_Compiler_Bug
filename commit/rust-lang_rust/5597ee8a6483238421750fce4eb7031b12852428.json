{"sha": "5597ee8a6483238421750fce4eb7031b12852428", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OTdlZThhNjQ4MzIzODQyMTc1MGZjZTRlYjcwMzFiMTI4NTI0Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-03T18:12:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-03T18:12:22Z"}, "message": "Auto merge of #54605 - petrochenkov:mambig, r=alexcrichton\n\nresolve: Disambiguate a subset of conflicts \"macro_rules\" vs \"macro name in module\"\n\nCurrently if macro name may refer to both a `macro_rules` macro definition and a macro defined/imported into module we conservatively report an ambiguity error.\nUnfortunately, these errors became a source of regressions when macro modularization was enabled - see issue https://github.com/rust-lang/rust/issues/54472.\n\nThis PR disambiguates such conflicts in favor of `macro_rules` if both the `macro_rules` item and in-module macro name are defined in the same normal (named) module and `macro_rules` is closer in scope to the point of use (see the tests for examples).\nThis is a subset of more general approach described in https://github.com/rust-lang/rust/issues/54472#issuecomment-424666659.\nThe subset is enough to fix all the regressions from https://github.com/rust-lang/rust/issues/54472, but it can be extended to apply to all \"macro_rules\" vs \"macro name in module\" conflicts in the future.\n\nTo give an analogy, this is equivalent to scoping rules for `let` variables and items defined in blocks (`macro_rules` behaves like \"`let` at module level\" in general).\n```rust\n{ // beginning of the block\n    use xxx::m; // (1)\n\n    // Starting from the beginning of the block and until here m!() refers to (1)\n    macro_rules! m { ... } // (2)\n    // Starting from here and until the end of the block m!() refers to (2)\n} // end of the block\n```\nMore complex examples with `use` and `macro_rules` from different modules still report ambiguity errors, even if equivalent examples with `let` are legal.\n\nFixes https://github.com/rust-lang/rust/issues/54472 (stable-to-beta regression)", "tree": {"sha": "d2fcfc72a9247c36e11589d9f34f6b9b41665a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2fcfc72a9247c36e11589d9f34f6b9b41665a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5597ee8a6483238421750fce4eb7031b12852428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5597ee8a6483238421750fce4eb7031b12852428", "html_url": "https://github.com/rust-lang/rust/commit/5597ee8a6483238421750fce4eb7031b12852428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5597ee8a6483238421750fce4eb7031b12852428/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ddab3e078bc25bd101d6885427b8a1032f8f60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ddab3e078bc25bd101d6885427b8a1032f8f60c", "html_url": "https://github.com/rust-lang/rust/commit/6ddab3e078bc25bd101d6885427b8a1032f8f60c"}, {"sha": "078fc52cbc437b5adab20953b37715f8b08d83c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/078fc52cbc437b5adab20953b37715f8b08d83c2", "html_url": "https://github.com/rust-lang/rust/commit/078fc52cbc437b5adab20953b37715f8b08d83c2"}], "stats": {"total": 153, "additions": 130, "deletions": 23}, "files": [{"sha": "e97d8efe800a432ea47fd360a292764b6dba11eb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5597ee8a6483238421750fce4eb7031b12852428/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5597ee8a6483238421750fce4eb7031b12852428/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5597ee8a6483238421750fce4eb7031b12852428", "patch": "@@ -72,11 +72,10 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n use std::cell::{Cell, RefCell};\n-use std::cmp;\n+use std::{cmp, fmt, iter, ptr};\n use std::collections::BTreeSet;\n-use std::fmt;\n-use std::iter;\n use std::mem::replace;\n+use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n \n use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution, ImportResolver};\n@@ -1114,6 +1113,17 @@ impl<'a> ModuleData<'a> {\n     fn nearest_item_scope(&'a self) -> Module<'a> {\n         if self.is_trait() { self.parent.unwrap() } else { self }\n     }\n+\n+    fn is_ancestor_of(&self, mut other: &Self) -> bool {\n+        while !ptr::eq(self, other) {\n+            if let Some(parent) = other.parent {\n+                other = parent;\n+            } else {\n+                return false;\n+            }\n+        }\n+        true\n+    }\n }\n \n impl<'a> fmt::Debug for ModuleData<'a> {\n@@ -1411,6 +1421,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     block_map: NodeMap<Module<'a>>,\n     module_map: FxHashMap<DefId, Module<'a>>,\n     extern_module_map: FxHashMap<(DefId, bool /* MacrosOnly? */), Module<'a>>,\n+    binding_parent_modules: FxHashMap<PtrKey<'a, NameBinding<'a>>, Module<'a>>,\n \n     pub make_glob_map: bool,\n     /// Maps imports to the names of items actually imported (this actually maps\n@@ -1714,6 +1725,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             module_map,\n             block_map: NodeMap(),\n             extern_module_map: FxHashMap(),\n+            binding_parent_modules: FxHashMap(),\n \n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n             glob_map: NodeMap(),\n@@ -4596,6 +4608,31 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         vis.is_accessible_from(module.normal_ancestor_id, self)\n     }\n \n+    fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {\n+        if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {\n+            if !ptr::eq(module, old_module) {\n+                span_bug!(binding.span, \"parent module is reset for binding\");\n+            }\n+        }\n+    }\n+\n+    fn disambiguate_legacy_vs_modern(\n+        &self,\n+        legacy: &'a NameBinding<'a>,\n+        modern: &'a NameBinding<'a>,\n+    ) -> bool {\n+        // Some non-controversial subset of ambiguities \"modern macro name\" vs \"macro_rules\"\n+        // is disambiguated to mitigate regressions from macro modularization.\n+        // Scoping for `macro_rules` behaves like scoping for `let` at module level, in general.\n+        match (self.binding_parent_modules.get(&PtrKey(legacy)),\n+               self.binding_parent_modules.get(&PtrKey(modern))) {\n+            (Some(legacy), Some(modern)) =>\n+                legacy.normal_ancestor_id == modern.normal_ancestor_id &&\n+                modern.is_ancestor_of(legacy),\n+            _ => false,\n+        }\n+    }\n+\n     fn report_ambiguity_error(&self, ident: Ident, b1: &NameBinding, b2: &NameBinding) {\n         let participle = |is_import: bool| if is_import { \"imported\" } else { \"defined\" };\n         let msg1 ="}, {"sha": "ff6e8a96f30ba645be1452eb36f39f374b9f6387", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5597ee8a6483238421750fce4eb7031b12852428/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5597ee8a6483238421750fce4eb7031b12852428/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=5597ee8a6483238421750fce4eb7031b12852428", "patch": "@@ -957,11 +957,13 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 },\n                 (Some(legacy_binding), Ok((binding, FromPrelude(from_prelude))))\n                         if legacy_binding.def() != binding.def_ignoring_ambiguity() &&\n-                           (!from_prelude ||\n+                           (!from_prelude &&\n+                            !self.disambiguate_legacy_vs_modern(legacy_binding, binding) ||\n                             legacy_binding.may_appear_after(parent_scope.expansion, binding)) => {\n                     self.report_ambiguity_error(ident, legacy_binding, binding);\n                 },\n                 // OK, non-macro-expanded legacy wins over prelude even if defs are different\n+                // Also, non-macro-expanded legacy wins over modern from the same module\n                 // Also, legacy and modern can co-exist if their defs are same\n                 (Some(legacy_binding), Ok(_)) |\n                 // OK, unambiguous resolution\n@@ -1097,6 +1099,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             let def = Def::Macro(def_id, MacroKind::Bang);\n             let vis = ty::Visibility::Invisible; // Doesn't matter for legacy bindings\n             let binding = (def, vis, item.span, expansion).to_name_binding(self.arenas);\n+            self.set_binding_parent_module(binding, self.current_module);\n             let legacy_binding = self.arenas.alloc_legacy_binding(LegacyBinding {\n                 parent_legacy_scope: *current_legacy_scope, binding, ident\n             });"}, {"sha": "4cf1a0d89356e896580f52aecaff4345990edeb9", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5597ee8a6483238421750fce4eb7031b12852428/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5597ee8a6483238421750fce4eb7031b12852428/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5597ee8a6483238421750fce4eb7031b12852428", "patch": "@@ -478,6 +478,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                       binding: &'a NameBinding<'a>)\n                       -> Result<(), &'a NameBinding<'a>> {\n         self.check_reserved_macro_name(ident, ns);\n+        self.set_binding_parent_module(binding, module);\n         self.update_resolution(module, ident, ns, |this, resolution| {\n             if let Some(old_binding) = resolution.binding {\n                 if binding.is_glob_import() {"}, {"sha": "f7dc7ac9eac81a4e0e65010b47afb308ab726ad1", "filename": "src/test/ui/imports/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5597ee8a6483238421750fce4eb7031b12852428/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5597ee8a6483238421750fce4eb7031b12852428/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.rs?ref=5597ee8a6483238421750fce4eb7031b12852428", "patch": "@@ -45,7 +45,7 @@ mod m3 {\n mod m4 {\n     macro_rules! m { () => {} }\n     use two_macros::m;\n-    m!(); //~ ERROR ambiguous\n+    m!();\n }\n \n fn main() {}"}, {"sha": "209d449dfd84016acb13a3417fe0293c86ccf6b6", "filename": "src/test/ui/imports/macros.stderr", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5597ee8a6483238421750fce4eb7031b12852428/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5597ee8a6483238421750fce4eb7031b12852428/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr?ref=5597ee8a6483238421750fce4eb7031b12852428", "patch": "@@ -1,20 +1,3 @@\n-error[E0659]: `m` is ambiguous\n-  --> $DIR/macros.rs:48:5\n-   |\n-LL |     m!(); //~ ERROR ambiguous\n-   |     ^ ambiguous name\n-   |\n-note: `m` could refer to the name defined here\n-  --> $DIR/macros.rs:46:5\n-   |\n-LL |     macro_rules! m { () => {} }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: `m` could also refer to the name imported here\n-  --> $DIR/macros.rs:47:9\n-   |\n-LL |     use two_macros::m;\n-   |         ^^^^^^^^^^^^^\n-\n error[E0659]: `m` is ambiguous\n   --> $DIR/macros.rs:26:5\n    |\n@@ -51,6 +34,6 @@ LL |     use two_macros::m;\n    |         ^^^^^^^^^^^^^\n    = note: macro-expanded macro imports do not shadow\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}, {"sha": "216b9dd0526d2768d961f17bf9b669eb7ed5070a", "filename": "src/test/ui/macros/ambiguity-legacy-vs-modern.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5597ee8a6483238421750fce4eb7031b12852428/src%2Ftest%2Fui%2Fmacros%2Fambiguity-legacy-vs-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5597ee8a6483238421750fce4eb7031b12852428/src%2Ftest%2Fui%2Fmacros%2Fambiguity-legacy-vs-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fambiguity-legacy-vs-modern.rs?ref=5597ee8a6483238421750fce4eb7031b12852428", "patch": "@@ -0,0 +1,46 @@\n+// Some non-controversial subset of ambiguities \"modern macro name\" vs \"macro_rules\"\n+// is disambiguated to mitigate regressions from macro modularization.\n+// Scoping for `macro_rules` behaves like scoping for `let` at module level, in general.\n+\n+#![feature(decl_macro)]\n+\n+fn same_unnamed_mod() {\n+    macro m() { 0 }\n+\n+    macro_rules! m { () => (()) }\n+\n+    m!() // OK\n+}\n+\n+fn nested_unnamed_mod() {\n+    macro m() { 0 }\n+\n+    {\n+        macro_rules! m { () => (()) }\n+\n+        m!() // OK\n+    }\n+}\n+\n+fn nested_unnamed_mod_fail() {\n+    macro_rules! m { () => (()) }\n+\n+    {\n+        macro m() { 0 }\n+\n+        m!() //~ ERROR `m` is ambiguous\n+    }\n+}\n+\n+fn nexted_named_mod_fail() {\n+    macro m() { 0 }\n+\n+    #[macro_use]\n+    mod inner {\n+        macro_rules! m { () => (()) }\n+    }\n+\n+    m!() //~ ERROR `m` is ambiguous\n+}\n+\n+fn main() {}"}, {"sha": "b5e1e751737b4b39f37bfc78307069bf602e45da", "filename": "src/test/ui/macros/ambiguity-legacy-vs-modern.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5597ee8a6483238421750fce4eb7031b12852428/src%2Ftest%2Fui%2Fmacros%2Fambiguity-legacy-vs-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5597ee8a6483238421750fce4eb7031b12852428/src%2Ftest%2Fui%2Fmacros%2Fambiguity-legacy-vs-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fambiguity-legacy-vs-modern.stderr?ref=5597ee8a6483238421750fce4eb7031b12852428", "patch": "@@ -0,0 +1,37 @@\n+error[E0659]: `m` is ambiguous\n+  --> $DIR/ambiguity-legacy-vs-modern.rs:31:9\n+   |\n+LL |         m!() //~ ERROR `m` is ambiguous\n+   |         ^ ambiguous name\n+   |\n+note: `m` could refer to the name defined here\n+  --> $DIR/ambiguity-legacy-vs-modern.rs:26:5\n+   |\n+LL |     macro_rules! m { () => (()) }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `m` could also refer to the name defined here\n+  --> $DIR/ambiguity-legacy-vs-modern.rs:29:9\n+   |\n+LL |         macro m() { 0 }\n+   |         ^^^^^^^^^^^^^^^\n+\n+error[E0659]: `m` is ambiguous\n+  --> $DIR/ambiguity-legacy-vs-modern.rs:43:5\n+   |\n+LL |     m!() //~ ERROR `m` is ambiguous\n+   |     ^ ambiguous name\n+   |\n+note: `m` could refer to the name defined here\n+  --> $DIR/ambiguity-legacy-vs-modern.rs:40:9\n+   |\n+LL |         macro_rules! m { () => (()) }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `m` could also refer to the name defined here\n+  --> $DIR/ambiguity-legacy-vs-modern.rs:36:5\n+   |\n+LL |     macro m() { 0 }\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0659`."}]}