{"sha": "f3e9b38e26646a75fdb3c25a2909bce68cde596c", "node_id": "C_kwDOAAsO6NoAKGYzZTliMzhlMjY2NDZhNzVmZGIzYzI1YTI5MDliY2U2OGNkZTU5NmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T10:51:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T10:51:31Z"}, "message": "Auto merge of #12646 - lowr:fix/11897, r=lowr\n\nfix: escape receiver texts in completion\n\nThis PR fixes #11897 by escaping '\\\\' and '$' in the text of the receiver position expression. See [here](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#snippet_syntax) for the specification of the snippet syntax (especially [this section](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#grammar) discusses escaping).\n\nAlthough not all occurrences of '\\\\' and '$' have to be replaced, I chose to replace all as that's simpler and easier to understand. There *are* more clever ways to implement it, but I thought they were premature optimization for the time being (maybe I should put FIXME notes?).", "tree": {"sha": "a38761d98c53fd2dbffd30b0956796f41ed603b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a38761d98c53fd2dbffd30b0956796f41ed603b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e9b38e26646a75fdb3c25a2909bce68cde596c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e9b38e26646a75fdb3c25a2909bce68cde596c", "html_url": "https://github.com/rust-lang/rust/commit/f3e9b38e26646a75fdb3c25a2909bce68cde596c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e9b38e26646a75fdb3c25a2909bce68cde596c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84544134f6e2e1f53a9ce3f821dbe7a70f924145", "url": "https://api.github.com/repos/rust-lang/rust/commits/84544134f6e2e1f53a9ce3f821dbe7a70f924145", "html_url": "https://github.com/rust-lang/rust/commit/84544134f6e2e1f53a9ce3f821dbe7a70f924145"}, {"sha": "cfc52adc65327190b5027de19a1a6d96dcf504ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc52adc65327190b5027de19a1a6d96dcf504ab", "html_url": "https://github.com/rust-lang/rust/commit/cfc52adc65327190b5027de19a1a6d96dcf504ab"}], "stats": {"total": 99, "additions": 84, "deletions": 15}, "files": [{"sha": "b09f4634c6514378e7174e08836702dd4cb37539", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 67, "deletions": 14, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9b38e26646a75fdb3c25a2909bce68cde596c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9b38e26646a75fdb3c25a2909bce68cde596c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=f3e9b38e26646a75fdb3c25a2909bce68cde596c", "patch": "@@ -193,13 +193,21 @@ pub(crate) fn complete_postfix(\n }\n \n fn get_receiver_text(receiver: &ast::Expr, receiver_is_ambiguous_float_literal: bool) -> String {\n-    if receiver_is_ambiguous_float_literal {\n+    let text = if receiver_is_ambiguous_float_literal {\n         let text = receiver.syntax().text();\n         let without_dot = ..text.len() - TextSize::of('.');\n         text.slice(without_dot).to_string()\n     } else {\n         receiver.to_string()\n-    }\n+    };\n+\n+    // The receiver texts should be interpreted as-is, as they are expected to be\n+    // normal Rust expressions. We escape '\\' and '$' so they don't get treated as\n+    // snippet-specific constructs.\n+    //\n+    // Note that we don't need to escape the other characters that can be escaped,\n+    // because they wouldn't be treated as snippet-specific constructs without '$'.\n+    text.replace('\\\\', \"\\\\\\\\\").replace('$', \"\\\\$\")\n }\n \n fn include_references(initial_element: &ast::Expr) -> ast::Expr {\n@@ -494,19 +502,21 @@ fn main() {\n \n     #[test]\n     fn custom_postfix_completion() {\n+        let config = CompletionConfig {\n+            snippets: vec![Snippet::new(\n+                &[],\n+                &[\"break\".into()],\n+                &[\"ControlFlow::Break(${receiver})\".into()],\n+                \"\",\n+                &[\"core::ops::ControlFlow\".into()],\n+                crate::SnippetScope::Expr,\n+            )\n+            .unwrap()],\n+            ..TEST_CONFIG\n+        };\n+\n         check_edit_with_config(\n-            CompletionConfig {\n-                snippets: vec![Snippet::new(\n-                    &[],\n-                    &[\"break\".into()],\n-                    &[\"ControlFlow::Break(${receiver})\".into()],\n-                    \"\",\n-                    &[\"core::ops::ControlFlow\".into()],\n-                    crate::SnippetScope::Expr,\n-                )\n-                .unwrap()],\n-                ..TEST_CONFIG\n-            },\n+            config.clone(),\n             \"break\",\n             r#\"\n //- minicore: try\n@@ -516,6 +526,49 @@ fn main() { 42.$0 }\n use core::ops::ControlFlow;\n \n fn main() { ControlFlow::Break(42) }\n+\"#,\n+        );\n+\n+        // The receiver texts should be escaped, see comments in `get_receiver_text()`\n+        // for detail.\n+        //\n+        // Note that the last argument is what *lsp clients would see* rather than\n+        // what users would see. Unescaping happens thereafter.\n+        check_edit_with_config(\n+            config.clone(),\n+            \"break\",\n+            r#\"\n+//- minicore: try\n+fn main() { '\\\\'.$0 }\n+\"#,\n+            r#\"\n+use core::ops::ControlFlow;\n+\n+fn main() { ControlFlow::Break('\\\\\\\\') }\n+\"#,\n+        );\n+\n+        check_edit_with_config(\n+            config.clone(),\n+            \"break\",\n+            r#\"\n+//- minicore: try\n+fn main() {\n+    match true {\n+        true => \"${1:placeholder}\",\n+        false => \"\\$\",\n+    }.$0\n+}\n+\"#,\n+            r#\"\n+use core::ops::ControlFlow;\n+\n+fn main() {\n+    ControlFlow::Break(match true {\n+        true => \"\\${1:placeholder}\",\n+        false => \"\\\\\\$\",\n+    })\n+}\n \"#,\n         );\n     }"}, {"sha": "16f902489b57d57966fe3c008d76bea5f23b39f2", "filename": "crates/ide-completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9b38e26646a75fdb3c25a2909bce68cde596c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9b38e26646a75fdb3c25a2909bce68cde596c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=f3e9b38e26646a75fdb3c25a2909bce68cde596c", "patch": "@@ -115,6 +115,7 @@ impl FormatStrParser {\n         // \"{MyStruct { val_a: 0, val_b: 1 }}\".\n         let mut inexpr_open_count = 0;\n \n+        // We need to escape '\\' and '$'. See the comments on `get_receiver_text()` for detail.\n         let mut chars = self.input.chars().peekable();\n         while let Some(chr) = chars.next() {\n             match (self.state, chr) {\n@@ -127,6 +128,9 @@ impl FormatStrParser {\n                     self.state = State::MaybeIncorrect;\n                 }\n                 (State::NotExpr, _) => {\n+                    if matches!(chr, '\\\\' | '$') {\n+                        self.output.push('\\\\');\n+                    }\n                     self.output.push(chr);\n                 }\n                 (State::MaybeIncorrect, '}') => {\n@@ -150,6 +154,9 @@ impl FormatStrParser {\n                     self.state = State::NotExpr;\n                 }\n                 (State::MaybeExpr, _) => {\n+                    if matches!(chr, '\\\\' | '$') {\n+                        current_expr.push('\\\\');\n+                    }\n                     current_expr.push(chr);\n                     self.state = State::Expr;\n                 }\n@@ -187,13 +194,19 @@ impl FormatStrParser {\n                     inexpr_open_count += 1;\n                 }\n                 (State::Expr, _) => {\n+                    if matches!(chr, '\\\\' | '$') {\n+                        current_expr.push('\\\\');\n+                    }\n                     current_expr.push(chr);\n                 }\n                 (State::FormatOpts, '}') => {\n                     self.output.push(chr);\n                     self.state = State::NotExpr;\n                 }\n                 (State::FormatOpts, _) => {\n+                    if matches!(chr, '\\\\' | '$') {\n+                        self.output.push('\\\\');\n+                    }\n                     self.output.push(chr);\n                 }\n             }\n@@ -241,8 +254,11 @@ mod tests {\n     fn format_str_parser() {\n         let test_vector = &[\n             (\"no expressions\", expect![[\"no expressions\"]]),\n+            (r\"no expressions with \\$0$1\", expect![r\"no expressions with \\\\\\$0\\$1\"]),\n             (\"{expr} is {2 + 2}\", expect![[\"{} is {}; expr, 2 + 2\"]]),\n             (\"{expr:?}\", expect![[\"{:?}; expr\"]]),\n+            (\"{expr:1$}\", expect![[r\"{:1\\$}; expr\"]]),\n+            (\"{$0}\", expect![[r\"{}; \\$0\"]]),\n             (\"{malformed\", expect![[\"-\"]]),\n             (\"malformed}\", expect![[\"-\"]]),\n             (\"{{correct\", expect![[\"{{correct\"]]),"}, {"sha": "40c72b535119fd4aee6a94c5075f9a82b357c10d", "filename": "crates/ide-completion/src/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9b38e26646a75fdb3c25a2909bce68cde596c/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9b38e26646a75fdb3c25a2909bce68cde596c/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fsnippet.rs?ref=f3e9b38e26646a75fdb3c25a2909bce68cde596c", "patch": "@@ -17,7 +17,7 @@\n //       \"body\": [\n //         \"thread::spawn(move || {\",\n //         \"\\t$0\",\n-//         \")};\",\n+//         \"});\",\n //       ],\n //       \"description\": \"Insert a thread::spawn call\",\n //       \"requires\": \"std::thread\","}]}