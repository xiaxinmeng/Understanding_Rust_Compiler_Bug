{"sha": "5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOGJhMDczYmNkNmVlNmZkMzRmZjU0NTg0NWE3NDZjZGRjNDkwNGY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-11T21:12:50Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-11T21:17:59Z"}, "message": "Make to_str pure and fix const parameters for str-mutating functions\n\nTwo separate changes that got intertwined (sorry):\n\nMake to_str pure. Closes #3691\n\nIn str, change functions like push_char to take an &mut str instead of\nan &str. Closes #3710", "tree": {"sha": "ac61c449c7178937914d59a8c6c84bed74a52bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac61c449c7178937914d59a8c6c84bed74a52bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "html_url": "https://github.com/rust-lang/rust/commit/5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41bce91cb871ba90caf7d3e56243141dd3390bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/41bce91cb871ba90caf7d3e56243141dd3390bca", "html_url": "https://github.com/rust-lang/rust/commit/41bce91cb871ba90caf7d3e56243141dd3390bca"}], "stats": {"total": 162, "additions": 87, "deletions": 75}, "files": [{"sha": "dd46d30d6bad6d521bcafd690d9958962daa234d", "filename": "src/libcore/float.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -91,7 +91,7 @@ pub mod consts {\n  * * digits - The number of significant digits\n  * * exact - Whether to enforce the exact number of significant digits\n  */\n-pub fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n+pub pure fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n     if is_NaN(num) { return ~\"NaN\"; }\n     if num == infinity { return ~\"inf\"; }\n     if num == neg_infinity { return ~\"-inf\"; }\n@@ -125,7 +125,8 @@ pub fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n         // store the next digit\n         frac *= 10.0;\n         let digit = frac as uint;\n-        fractionalParts.push(digit);\n+        // Bleh: not really unsafe.\n+        unsafe { fractionalParts.push(digit); }\n \n         // calculate the next frac\n         frac -= digit as float;\n@@ -140,7 +141,8 @@ pub fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n     // turn digits into string\n     // using stack of digits\n     while fractionalParts.is_not_empty() {\n-        let mut adjusted_digit = carry + fractionalParts.pop();\n+        // Bleh; shouldn't need to be unsafe\n+        let mut adjusted_digit = carry + unsafe { fractionalParts.pop() };\n \n         if adjusted_digit == 10 {\n             carry = 1;\n@@ -196,7 +198,7 @@ pub fn test_to_str_exact_do_decimal() {\n  * * num - The float value\n  * * digits - The number of significant digits\n  */\n-pub fn to_str(num: float, digits: uint) -> ~str {\n+pub pure fn to_str(num: float, digits: uint) -> ~str {\n     to_str_common(num, digits, false)\n }\n \n@@ -361,7 +363,7 @@ pub fn from_str(num: &str) -> Option<float> {\n  *\n  * `NaN` if both `x` and `pow` are `0u`, otherwise `x^pow`\n  */\n-pub fn pow_with_uint(base: uint, pow: uint) -> float {\n+pub pure fn pow_with_uint(base: uint, pow: uint) -> float {\n     if base == 0u {\n         if pow == 0u {\n             return NaN as float;"}, {"sha": "0ea7e1d29440268935a74078b7016cf479d1701c", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -154,15 +154,15 @@ impl T : FromStr {\n }\n \n /// Convert to a string in a given base\n-pub fn to_str(n: T, radix: uint) -> ~str {\n+pub pure fn to_str(n: T, radix: uint) -> ~str {\n     do to_str_bytes(n, radix) |slice| {\n         do vec::as_imm_buf(slice) |p, len| {\n             unsafe { str::raw::from_buf_len(p, len) }\n         }\n     }\n }\n \n-pub fn to_str_bytes<U>(n: T, radix: uint, f: fn(v: &[u8]) -> U) -> U {\n+pub pure fn to_str_bytes<U>(n: T, radix: uint, f: fn(v: &[u8]) -> U) -> U {\n     if n < 0 as T {\n         uint::to_str_bytes(true, -n as uint, radix, f)\n     } else {\n@@ -171,7 +171,7 @@ pub fn to_str_bytes<U>(n: T, radix: uint, f: fn(v: &[u8]) -> U) -> U {\n }\n \n /// Convert to a string\n-pub fn str(i: T) -> ~str { return to_str(i, 10u); }\n+pub pure fn str(i: T) -> ~str { return to_str(i, 10u); }\n \n // FIXME: Has alignment issues on windows and 32-bit linux (#2609)\n #[test]"}, {"sha": "e5d2397da0d7eb2d0e11b6c49b651abc144a15f8", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -61,7 +61,7 @@ pub pure fn Path(s: &str) -> Path {\n }\n \n impl PosixPath : ToStr {\n-    fn to_str() -> ~str {\n+    pure fn to_str() -> ~str {\n         let mut s = ~\"\";\n         if self.is_absolute {\n             s += \"/\";\n@@ -236,7 +236,7 @@ impl PosixPath : GenericPath {\n \n \n impl WindowsPath : ToStr {\n-    fn to_str() -> ~str {\n+    pure fn to_str() -> ~str {\n         let mut s = ~\"\";\n         match self.host {\n           Some(ref h) => { s += \"\\\\\\\\\"; s += *h; }"}, {"sha": "aff4c50cfd2d4860dc394c6aa8e384b961af9a4a", "filename": "src/libcore/str.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -49,7 +49,7 @@ pub pure fn from_byte(b: u8) -> ~str {\n }\n \n /// Appends a character at the end of a string\n-pub fn push_char(s: &const ~str, ch: char) {\n+pub fn push_char(s: &mut ~str, ch: char) {\n     unsafe {\n         let code = ch as uint;\n         let nb = if code < max_one_b { 1u }\n@@ -140,7 +140,7 @@ pub pure fn from_chars(chs: &[char]) -> ~str {\n \n /// Appends a string slice to the back of a string, without overallocating\n #[inline(always)]\n-pub fn push_str_no_overallocate(lhs: &const ~str, rhs: &str) {\n+pub fn push_str_no_overallocate(lhs: &mut ~str, rhs: &str) {\n     unsafe {\n         let llen = lhs.len();\n         let rlen = rhs.len();\n@@ -157,7 +157,7 @@ pub fn push_str_no_overallocate(lhs: &const ~str, rhs: &str) {\n }\n /// Appends a string slice to the back of a string\n #[inline(always)]\n-pub fn push_str(lhs: &const ~str, rhs: &str) {\n+pub fn push_str(lhs: &mut ~str, rhs: &str) {\n     unsafe {\n         let llen = lhs.len();\n         let rlen = rhs.len();\n@@ -214,7 +214,7 @@ Section: Adding to and removing from a string\n  *\n  * If the string does not contain any characters\n  */\n-pub fn pop_char(s: &const ~str) -> char {\n+pub fn pop_char(s: &mut ~str) -> char {\n     let end = len(*s);\n     assert end > 0u;\n     let {ch, prev} = char_range_at_reverse(*s, end);\n@@ -1802,9 +1802,9 @@ pub pure fn as_buf<T>(s: &str, f: fn(*u8, uint) -> T) -> T {\n  * * s - A string\n  * * n - The number of bytes to reserve space for\n  */\n-pub fn reserve(s: &const ~str, n: uint) {\n+pub fn reserve(s: &mut ~str, n: uint) {\n     unsafe {\n-        let v: *mut ~[u8] = cast::transmute(copy s);\n+        let v: *mut ~[u8] = cast::transmute(s);\n         vec::reserve(&mut *v, n + 1);\n     }\n }\n@@ -1829,7 +1829,7 @@ pub fn reserve(s: &const ~str, n: uint) {\n  * * s - A string\n  * * n - The number of bytes to reserve space for\n  */\n-pub fn reserve_at_least(s: &const ~str, n: uint) {\n+pub fn reserve_at_least(s: &mut ~str, n: uint) {\n     reserve(s, uint::next_power_of_two(n + 1u) - 1u)\n }\n \n@@ -1974,7 +1974,7 @@ pub mod raw {\n     }\n \n     /// Appends a byte to a string. (Not UTF-8 safe).\n-    pub unsafe fn push_byte(s: &const ~str, b: u8) {\n+    pub unsafe fn push_byte(s: &mut ~str, b: u8) {\n         reserve_at_least(s, s.len() + 1);\n         do as_buf(*s) |buf, len| {\n             let buf: *mut u8 = ::cast::reinterpret_cast(&buf);\n@@ -1984,13 +1984,13 @@ pub mod raw {\n     }\n \n     /// Appends a vector of bytes to a string. (Not UTF-8 safe).\n-    unsafe fn push_bytes(s: &const ~str, bytes: &[u8]) {\n+    unsafe fn push_bytes(s: &mut ~str, bytes: &[u8]) {\n         reserve_at_least(s, s.len() + bytes.len());\n         for vec::each(bytes) |byte| { push_byte(s, *byte); }\n     }\n \n     /// Removes the last byte from a string and returns it. (Not UTF-8 safe).\n-    pub unsafe fn pop_byte(s: &const ~str) -> u8 {\n+    pub unsafe fn pop_byte(s: &mut ~str) -> u8 {\n         let len = len(*s);\n         assert (len > 0u);\n         let b = s[len - 1u];\n@@ -2008,7 +2008,7 @@ pub mod raw {\n     }\n \n     /// Sets the length of the string and adds the null terminator\n-    pub unsafe fn set_len(v: &const ~str, new_len: uint) {\n+    pub unsafe fn set_len(v: &mut ~str, new_len: uint) {\n         let v: **vec::raw::VecRepr = cast::transmute(copy v);\n         let repr: *vec::raw::VecRepr = *v;\n         (*repr).unboxed.fill = new_len + 1u;"}, {"sha": "fb0608906a115318f7bd9847f205d1f9d0c92f4a", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -8,80 +8,82 @@ The `ToStr` trait for converting to strings\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-pub trait ToStr { fn to_str() -> ~str; }\n+pub trait ToStr { pure fn to_str() -> ~str; }\n \n impl int: ToStr {\n-    fn to_str() -> ~str { int::str(self) }\n+    pure fn to_str() -> ~str { int::str(self) }\n }\n impl i8: ToStr {\n-    fn to_str() -> ~str { i8::str(self) }\n+    pure fn to_str() -> ~str { i8::str(self) }\n }\n impl i16: ToStr {\n-    fn to_str() -> ~str { i16::str(self) }\n+    pure fn to_str() -> ~str { i16::str(self) }\n }\n impl i32: ToStr {\n-    fn to_str() -> ~str { i32::str(self) }\n+    pure fn to_str() -> ~str { i32::str(self) }\n }\n impl i64: ToStr {\n-    fn to_str() -> ~str { i64::str(self) }\n+    pure fn to_str() -> ~str { i64::str(self) }\n }\n impl uint: ToStr {\n-    fn to_str() -> ~str { uint::str(self) }\n+    pure fn to_str() -> ~str { uint::str(self) }\n }\n impl u8: ToStr {\n-    fn to_str() -> ~str { u8::str(self) }\n+    pure fn to_str() -> ~str { u8::str(self) }\n }\n impl u16: ToStr {\n-    fn to_str() -> ~str { u16::str(self) }\n+    pure fn to_str() -> ~str { u16::str(self) }\n }\n impl u32: ToStr {\n-    fn to_str() -> ~str { u32::str(self) }\n+    pure fn to_str() -> ~str { u32::str(self) }\n }\n impl u64: ToStr {\n-    fn to_str() -> ~str { u64::str(self) }\n+    pure fn to_str() -> ~str { u64::str(self) }\n }\n impl float: ToStr {\n-    fn to_str() -> ~str { float::to_str(self, 4u) }\n+    pure fn to_str() -> ~str { float::to_str(self, 4u) }\n }\n impl f32: ToStr {\n-    fn to_str() -> ~str { float::to_str(self as float, 4u) }\n+    pure fn to_str() -> ~str { float::to_str(self as float, 4u) }\n }\n impl f64: ToStr {\n-    fn to_str() -> ~str { float::to_str(self as float, 4u) }\n+    pure fn to_str() -> ~str { float::to_str(self as float, 4u) }\n }\n impl bool: ToStr {\n-    fn to_str() -> ~str { bool::to_str(self) }\n+    pure fn to_str() -> ~str { bool::to_str(self) }\n }\n impl (): ToStr {\n-    fn to_str() -> ~str { ~\"()\" }\n+    pure fn to_str() -> ~str { ~\"()\" }\n }\n impl ~str: ToStr {\n-    fn to_str() -> ~str { copy self }\n+    pure fn to_str() -> ~str { copy self }\n }\n impl &str: ToStr {\n-    fn to_str() -> ~str { str::from_slice(self) }\n+    pure fn to_str() -> ~str { str::from_slice(self) }\n }\n impl @str: ToStr {\n-    fn to_str() -> ~str { str::from_slice(self) }\n+    pure fn to_str() -> ~str { str::from_slice(self) }\n }\n \n impl<A: ToStr Copy, B: ToStr Copy> (A, B): ToStr {\n-    fn to_str() -> ~str {\n+    pure fn to_str() -> ~str {\n         let (a, b) = self;\n         ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\")\"\n     }\n }\n impl<A: ToStr Copy, B: ToStr Copy, C: ToStr Copy> (A, B, C): ToStr {\n-    fn to_str() -> ~str {\n+    pure fn to_str() -> ~str {\n         let (a, b, c) = self;\n         ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\", \" + c.to_str() + ~\")\"\n     }\n }\n \n impl<A: ToStr> ~[A]: ToStr {\n-    fn to_str() -> ~str {\n+    pure fn to_str() -> ~str unsafe {\n+        // Bleh -- not really unsafe\n+        // push_str and push_char\n         let mut acc = ~\"[\", first = true;\n-        for vec::each(self) |elt| {\n+        for vec::each(self) |elt| unsafe {\n             if first { first = false; }\n             else { str::push_str(&mut acc, ~\", \"); }\n             str::push_str(&mut acc, elt.to_str());\n@@ -92,10 +94,10 @@ impl<A: ToStr> ~[A]: ToStr {\n }\n \n impl<A: ToStr> @A: ToStr {\n-    fn to_str() -> ~str { ~\"@\" + (*self).to_str() }\n+    pure fn to_str() -> ~str { ~\"@\" + (*self).to_str() }\n }\n impl<A: ToStr> ~A: ToStr {\n-    fn to_str() -> ~str { ~\"~\" + (*self).to_str() }\n+    pure fn to_str() -> ~str { ~\"~\" + (*self).to_str() }\n }\n \n #[cfg(test)]"}, {"sha": "00dd9be76db07dc92816ed35c72914443af56d7b", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -232,7 +232,7 @@ pub pure fn to_str_bytes<U>(neg: bool, num: T, radix: uint,\n }\n \n /// Convert to a string\n-pub fn str(i: T) -> ~str { return to_str(i, 10u); }\n+pub pure fn str(i: T) -> ~str { return to_str(i, 10u); }\n \n #[test]\n pub fn test_to_str() {"}, {"sha": "bb331240b7657200cbb85e0ac1223afd6deb0f0b", "filename": "src/libstd/json.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -51,7 +51,7 @@ fn escape_str(s: &str) -> ~str {\n \n fn spaces(n: uint) -> ~str {\n     let mut ss = ~\"\";\n-    for n.times { str::push_str(&ss, \" \"); }\n+    for n.times { str::push_str(&mut ss, \" \"); }\n     return ss;\n }\n \n@@ -302,7 +302,8 @@ pub fn to_writer(wr: io::Writer, json: &Json) {\n }\n \n /// Serializes a json value into a string\n-pub fn to_str(json: &Json) -> ~str {\n+pub pure fn to_str(json: &Json) -> ~str unsafe {\n+    // ugh, should be safe\n     io::with_str_writer(|wr| to_writer(wr, json))\n }\n \n@@ -546,14 +547,14 @@ priv impl Parser {\n \n             if (escape) {\n                 match self.ch {\n-                  '\"' => str::push_char(&res, '\"'),\n-                  '\\\\' => str::push_char(&res, '\\\\'),\n-                  '/' => str::push_char(&res, '/'),\n-                  'b' => str::push_char(&res, '\\x08'),\n-                  'f' => str::push_char(&res, '\\x0c'),\n-                  'n' => str::push_char(&res, '\\n'),\n-                  'r' => str::push_char(&res, '\\r'),\n-                  't' => str::push_char(&res, '\\t'),\n+                  '\"' => str::push_char(&mut res, '\"'),\n+                  '\\\\' => str::push_char(&mut res, '\\\\'),\n+                  '/' => str::push_char(&mut res, '/'),\n+                  'b' => str::push_char(&mut res, '\\x08'),\n+                  'f' => str::push_char(&mut res, '\\x0c'),\n+                  'n' => str::push_char(&mut res, '\\n'),\n+                  'r' => str::push_char(&mut res, '\\r'),\n+                  't' => str::push_char(&mut res, '\\t'),\n                   'u' => {\n                       // Parse \\u1234.\n                       let mut i = 0u;\n@@ -582,7 +583,7 @@ priv impl Parser {\n                             ~\"invalid \\\\u escape (not four digits)\");\n                       }\n \n-                      str::push_char(&res, n as char);\n+                      str::push_char(&mut res, n as char);\n                   }\n                   _ => return self.error(~\"invalid escape\")\n                 }\n@@ -594,7 +595,7 @@ priv impl Parser {\n                     self.bump();\n                     return Ok(res);\n                 }\n-                str::push_char(&res, self.ch);\n+                str::push_char(&mut res, self.ch);\n             }\n         }\n \n@@ -1166,11 +1167,11 @@ impl <A: ToJson> Option<A>: ToJson {\n }\n \n impl Json: to_str::ToStr {\n-    fn to_str() -> ~str { to_str(&self) }\n+    pure fn to_str() -> ~str { to_str(&self) }\n }\n \n impl Error: to_str::ToStr {\n-    fn to_str() -> ~str {\n+    pure fn to_str() -> ~str {\n         fmt!(\"%u:%u: %s\", self.line, self.col, *self.msg)\n     }\n }"}, {"sha": "9f78f98fa316e51319293318238e19e5155b2cf8", "filename": "src/libstd/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -341,7 +341,8 @@ pub mod chained {\n             wr.write_str(~\" }\");\n         }\n \n-        fn to_str() -> ~str {\n+        pure fn to_str() -> ~str unsafe {\n+            // Meh -- this should be safe\n             do io::with_str_writer |wr| { self.to_writer(wr) }\n         }\n     }"}, {"sha": "c3fd3383979b650307ebbc80f81782f160d06fe0", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -94,7 +94,8 @@ pub fn encode(s: &str) -> ~str {\n  *\n  * This function is compliant with RFC 3986.\n  */\n-pub fn encode_component(s: &str) -> ~str {\n+\n+fn encode_component(s: &str) -> ~str {\n     encode_inner(s, false)\n }\n \n@@ -297,7 +298,7 @@ fn userinfo_from_str(uinfo: &str) -> UserInfo {\n     return UserInfo(user, pass);\n }\n \n-fn userinfo_to_str(userinfo: UserInfo) -> ~str {\n+pure fn userinfo_to_str(userinfo: UserInfo) -> ~str {\n     if option::is_some(&userinfo.pass) {\n         return str::concat(~[copy userinfo.user, ~\":\",\n                           option::unwrap(copy userinfo.pass),\n@@ -325,11 +326,15 @@ fn query_from_str(rawquery: &str) -> Query {\n     return query;\n }\n \n-pub fn query_to_str(query: Query) -> ~str {\n+pub pure fn query_to_str(query: Query) -> ~str {\n     let mut strvec = ~[];\n     for query.each |kv| {\n         let (k, v) = copy *kv;\n-        strvec += ~[#fmt(\"%s=%s\", encode_component(k), encode_component(v))];\n+        // This is really safe...\n+        unsafe {\n+          strvec += ~[#fmt(\"%s=%s\",\n+                           encode_component(k), encode_component(v))];\n+        }\n     };\n     return str::connect(strvec, ~\"&\");\n }\n@@ -672,7 +677,7 @@ impl Url : FromStr {\n  * result in just \"http://somehost.com\".\n  *\n  */\n-pub fn to_str(url: Url) -> ~str {\n+pub pure fn to_str(url: Url) -> ~str {\n     let user = if url.user.is_some() {\n       userinfo_to_str(option::unwrap(copy url.user))\n     } else {\n@@ -688,7 +693,8 @@ pub fn to_str(url: Url) -> ~str {\n     } else {\n         str::concat(~[~\"?\", query_to_str(url.query)])\n     };\n-    let fragment = if url.fragment.is_some() {\n+    // ugh, this really is safe\n+    let fragment = if url.fragment.is_some() unsafe {\n         str::concat(~[~\"#\", encode_component(\n             option::unwrap(copy url.fragment))])\n     } else {\n@@ -704,7 +710,7 @@ pub fn to_str(url: Url) -> ~str {\n }\n \n impl Url: to_str::ToStr {\n-    pub fn to_str() -> ~str {\n+    pub pure fn to_str() -> ~str {\n         to_str(self)\n     }\n }"}, {"sha": "a501df4c32d2b645c87a5e22d4b61edba6ec22c3", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -18,7 +18,7 @@ impl direction : cmp::Eq {\n }\n \n impl direction: ToStr {\n-    fn to_str() -> ~str {\n+    pure fn to_str() -> ~str {\n         match self {\n           send => ~\"Send\",\n           recv => ~\"Recv\""}, {"sha": "3ae0727de60d6c997b6dc7a1f44c7a2a36c2ef07", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -195,11 +195,11 @@ fn check_crate(tcx: ty::ctxt,\n }\n \n impl LiveNode: to_str::ToStr {\n-    fn to_str() -> ~str { fmt!(\"ln(%u)\", *self) }\n+    pure fn to_str() -> ~str { fmt!(\"ln(%u)\", *self) }\n }\n \n impl Variable: to_str::ToStr {\n-    fn to_str() -> ~str { fmt!(\"v(%u)\", *self) }\n+    pure fn to_str() -> ~str { fmt!(\"v(%u)\", *self) }\n }\n \n // ______________________________________________________________________"}, {"sha": "ca2af38758779ae32927f528e96a60975045d85d", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -13,7 +13,7 @@ struct cat {\n }\n \n     impl cat : ToStr {\n-        fn to_str() -> ~str { self.name }\n+       pure fn to_str() -> ~str { self.name }\n     }\n \n     priv impl cat {"}, {"sha": "8a51eb33857b8eb411107c855e020cbc837e6bd3", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -45,7 +45,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n impl cat: ToStr {\n-  fn to_str() -> ~str { self.name }\n+  pure fn to_str() -> ~str { self.name }\n }\n \n fn print_out<T: ToStr>(thing: T, expected: ~str) {"}, {"sha": "4bb2c561422cec5fdee893a5562fabd3e0df5133", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8ba073bcd6ee6fd34ff545845a746cddc4904f/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=5a8ba073bcd6ee6fd34ff545845a746cddc4904f", "patch": "@@ -16,7 +16,7 @@ enum square {\n }\n \n impl square: to_str::ToStr {\n-    fn to_str() -> ~str {\n+    pure fn to_str() -> ~str {\n         match self {\n           bot => { ~\"R\" }\n           wall => { ~\"#\" }"}]}