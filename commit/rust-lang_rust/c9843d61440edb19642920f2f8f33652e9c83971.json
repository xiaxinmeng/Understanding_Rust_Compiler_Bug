{"sha": "c9843d61440edb19642920f2f8f33652e9c83971", "node_id": "C_kwDOAAsO6NoAKGM5ODQzZDYxNDQwZWRiMTk2NDI5MjBmMmY4ZjMzNjUyZTljODM5NzE", "commit": {"author": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-02-20T21:57:03Z"}, "committer": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-02-20T22:00:30Z"}, "message": "remove cfg attributes", "tree": {"sha": "5b8804dd171209c4fb8b74c9e5307641a1ccb17c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b8804dd171209c4fb8b74c9e5307641a1ccb17c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9843d61440edb19642920f2f8f33652e9c83971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9843d61440edb19642920f2f8f33652e9c83971", "html_url": "https://github.com/rust-lang/rust/commit/c9843d61440edb19642920f2f8f33652e9c83971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9843d61440edb19642920f2f8f33652e9c83971/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0725d0ceee13d3484b2b7117e4cff82c01d8f868", "url": "https://api.github.com/repos/rust-lang/rust/commits/0725d0ceee13d3484b2b7117e4cff82c01d8f868", "html_url": "https://github.com/rust-lang/rust/commit/0725d0ceee13d3484b2b7117e4cff82c01d8f868"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "b2548b61cc5f9a64f5738375379e242cd908d562", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9843d61440edb19642920f2f8f33652e9c83971/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9843d61440edb19642920f2f8f33652e9c83971/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=c9843d61440edb19642920f2f8f33652e9c83971", "patch": "@@ -244,7 +244,6 @@ pub enum ExtraConstraintInfo {\n     PlaceholderFromPredicate(Span),\n }\n \n-#[cfg(debug_assertions)]\n #[instrument(skip(infcx, sccs), level = \"debug\")]\n fn sccs_info<'cx, 'tcx>(\n     infcx: &'cx BorrowckInferCtxt<'cx, 'tcx>,\n@@ -271,10 +270,10 @@ fn sccs_info<'cx, 'tcx>(\n         components[scc_idx.as_usize()].insert((reg_var, *origin));\n     }\n \n-    let mut components_str = \"strongly connected components:\";\n+    let mut components_str = \"strongly connected components:\".to_string();\n     for (scc_idx, reg_vars_origins) in components.iter().enumerate() {\n         let regions_info = reg_vars_origins.clone().into_iter().collect::<Vec<_>>();\n-        components_str.push(&format(\n+        components_str.push_str(&format!(\n             \"{:?}: {:?})\",\n             ConstraintSccIndex::from_usize(scc_idx),\n             regions_info,\n@@ -346,8 +345,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let fr_static = universal_regions.fr_static;\n         let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph, fr_static));\n \n-        #[cfg(debug_assertions)]\n-        sccs_info(_infcx, constraint_sccs.clone());\n+        if cfg!(debug_assertions) {\n+            sccs_info(_infcx, constraint_sccs.clone());\n+        }\n \n         let mut scc_values =\n             RegionValues::new(elements, universal_regions.len(), &placeholder_indices);"}, {"sha": "960dedc74efbbaf6db2dc869b964f26b91a31f16", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9843d61440edb19642920f2f8f33652e9c83971/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9843d61440edb19642920f2f8f33652e9c83971/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=c9843d61440edb19642920f2f8f33652e9c83971", "patch": "@@ -62,14 +62,12 @@ pub(crate) enum RegionCtxt {\n     LateBound(BoundRegionInfo),\n     Existential(Option<Symbol>),\n     Placeholder(BoundRegionInfo),\n-    #[cfg(debug_assertions)]\n     Unknown,\n }\n \n impl RegionCtxt {\n     /// Used to determine the representative of a component in the strongly connected\n     /// constraint graph\n-    #[cfg(debug_assertions)]\n     pub(crate) fn preference_value(self) -> usize {\n         let _anon = Symbol::intern(\"anon\");\n "}, {"sha": "e993fb4c22bb989d33c73d2f60e2190696284ff9", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9843d61440edb19642920f2f8f33652e9c83971/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9843d61440edb19642920f2f8f33652e9c83971/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=c9843d61440edb19642920f2f8f33652e9c83971", "patch": "@@ -318,11 +318,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n                 // Screen out `'a: 'a` cases.\n                 let ty::OutlivesPredicate(k1, r2) = r_c.0;\n-                if k1 != r2.into() {\n-                    Some(r_c)\n-                } else {\n-                    None\n-                }\n+                if k1 != r2.into() { Some(r_c) } else { None }\n             }),\n         );\n "}]}