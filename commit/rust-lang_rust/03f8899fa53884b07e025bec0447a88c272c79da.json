{"sha": "03f8899fa53884b07e025bec0447a88c272c79da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZjg4OTlmYTUzODg0YjA3ZTAyNWJlYzA0NDdhODhjMjcyYzc5ZGE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-24T07:59:06Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-24T07:59:06Z"}, "message": "Merge #3350\n\n3350: Don't emit `new_without_default_derive` if an impl of Default exists regardless of generics r=oli-obk a=pengowen123\n\nFixes #2226\n\nCo-authored-by: Owen Sanchez <pengowen816@gmail.com>", "tree": {"sha": "26a0dd93e802273ecf0bf02cdaca8b7d301fa08a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a0dd93e802273ecf0bf02cdaca8b7d301fa08a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03f8899fa53884b07e025bec0447a88c272c79da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03f8899fa53884b07e025bec0447a88c272c79da", "html_url": "https://github.com/rust-lang/rust/commit/03f8899fa53884b07e025bec0447a88c272c79da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03f8899fa53884b07e025bec0447a88c272c79da/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "122da1de3bb45f73f97af6e8a94436907e9a3928", "url": "https://api.github.com/repos/rust-lang/rust/commits/122da1de3bb45f73f97af6e8a94436907e9a3928", "html_url": "https://github.com/rust-lang/rust/commit/122da1de3bb45f73f97af6e8a94436907e9a3928"}, {"sha": "50b9e7aebc2e7b00f098736ff67f94300106f7fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b9e7aebc2e7b00f098736ff67f94300106f7fc", "html_url": "https://github.com/rust-lang/rust/commit/50b9e7aebc2e7b00f098736ff67f94300106f7fc"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "bf37b239064ec16b543a2cba3a642ec55e1ce1b1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03f8899fa53884b07e025bec0447a88c272c79da/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f8899fa53884b07e025bec0447a88c272c79da/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=03f8899fa53884b07e025bec0447a88c272c79da", "patch": "@@ -391,7 +391,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_early_lint_pass(box int_plus_one::IntPlusOne);\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n-    reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n+    reg.register_late_lint_pass(box new_without_default::NewWithoutDefault::default());\n     reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names.clone()));\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n     reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents.clone()));"}, {"sha": "21b966a6bd956255ebdd35bf901641f4dc35fd58", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/03f8899fa53884b07e025bec0447a88c272c79da/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f8899fa53884b07e025bec0447a88c272c79da/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=03f8899fa53884b07e025bec0447a88c272c79da", "patch": "@@ -11,6 +11,7 @@\n use crate::rustc::hir::def_id::DefId;\n use crate::rustc::hir;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::util::nodemap::NodeSet;\n use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::rustc::ty::{self, Ty};\n@@ -91,8 +92,10 @@ declare_clippy_lint! {\n     \"`fn new() -> Self` without `#[derive]`able `Default` implementation\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NewWithoutDefault;\n+#[derive(Clone, Default)]\n+pub struct NewWithoutDefault {\n+    impling_types: Option<NodeSet>,\n+}\n \n impl LintPass for NewWithoutDefault {\n     fn get_lints(&self) -> LintArray {\n@@ -130,13 +133,39 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             return;\n                         }\n                         if sig.decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n+                            let self_did = cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id));\n                             let self_ty = cx.tcx\n-                                .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n+                                .type_of(self_did);\n                             if_chain! {\n                                 if same_tys(cx, self_ty, return_ty(cx, id));\n                                 if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n-                                if !implements_trait(cx, self_ty, default_trait_id, &[]);\n                                 then {\n+                                    if self.impling_types.is_none() {\n+                                        let mut impls = NodeSet();\n+                                        cx.tcx.for_each_impl(default_trait_id, |d| {\n+                                            if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n+                                                if let Some(node_id) = cx.tcx.hir.as_local_node_id(ty_def.did) {\n+                                                    impls.insert(node_id);\n+                                                }\n+                                            }\n+                                        });\n+                                        self.impling_types = Some(impls);\n+                                    }\n+\n+                                    // Check if a Default implementation exists for the Self type, regardless of\n+                                    // generics\n+                                    if_chain! {\n+                                        if let Some(ref impling_types) = self.impling_types;\n+                                        if let Some(self_def) = cx.tcx.type_of(self_did).ty_adt_def();\n+                                        if self_def.did.is_local();\n+                                        then {\n+                                            let self_id = cx.tcx.hir.local_def_id_to_node_id(self_def.did.to_local());\n+                                            if impling_types.contains(&self_id) {\n+                                                return;\n+                                            }\n+                                        }\n+                                    }\n+\n                                     if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n                                         span_lint_and_then(\n                                             cx,"}, {"sha": "16b9bd5c71bfba82a479cc7f9334bd28ff5a3ec5", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03f8899fa53884b07e025bec0447a88c272c79da/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f8899fa53884b07e025bec0447a88c272c79da/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=03f8899fa53884b07e025bec0447a88c272c79da", "patch": "@@ -107,4 +107,13 @@ impl IgnoreUnsafeNew {\n     pub unsafe fn new() -> Self { IgnoreUnsafeNew }\n }\n \n+#[derive(Default)]\n+pub struct OptionRefWrapper<'a, T: 'a>(Option<&'a T>);\n+\n+impl<'a, T: 'a> OptionRefWrapper<'a, T> {\n+    pub fn new() -> Self {\n+        OptionRefWrapper(None)\n+    }\n+}\n+\n fn main() {}"}]}