{"sha": "c731d625fe5f7626b41c7241893350b8b27b1dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MzFkNjI1ZmU1Zjc2MjZiNDFjNzI0MTg5MzM1MGI4YjI3YjFkYmU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-03-10T14:56:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T21:57:13Z"}, "message": "Add basic file-system functionality\n\nstd.fs.list_dir will list the files in a directory, std.fs.file_is_dir\nwill, given a pathname, determine whether it is a directory or not.", "tree": {"sha": "9b5c8f5071d44d601914fa9ea1e44e07fe6f23db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b5c8f5071d44d601914fa9ea1e44e07fe6f23db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c731d625fe5f7626b41c7241893350b8b27b1dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c731d625fe5f7626b41c7241893350b8b27b1dbe", "html_url": "https://github.com/rust-lang/rust/commit/c731d625fe5f7626b41c7241893350b8b27b1dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c731d625fe5f7626b41c7241893350b8b27b1dbe/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3436979b175496a3936f00e90748e2fad0343ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3436979b175496a3936f00e90748e2fad0343ae9", "html_url": "https://github.com/rust-lang/rust/commit/3436979b175496a3936f00e90748e2fad0343ae9"}], "stats": {"total": 207, "additions": 146, "deletions": 61}, "files": [{"sha": "77f3acd1886752dc14c368fd1e3c74c39c52bcd4", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -391,7 +391,7 @@ impure fn eval_crate_directive(parser p,\n                 case (none[filename]) {}\n             }\n \n-            auto full_path = prefix + std.os.path_sep() + file_path;\n+            auto full_path = prefix + std.fs.path_sep() + file_path;\n \n             auto start_id = p.next_def_id();\n             auto p0 = new_parser(p.get_session(), e, start_id, full_path);\n@@ -414,7 +414,7 @@ impure fn eval_crate_directive(parser p,\n                 case (none[filename]) {}\n             }\n \n-            auto full_path = prefix + std.os.path_sep() + path;\n+            auto full_path = prefix + std.fs.path_sep() + path;\n             auto m0 = eval_crate_directives_to_mod(p, e, cdirs, full_path);\n             auto im = ast.item_mod(id, m0, p.next_def_id());\n             auto i = @spanned(cdir.span, cdir.span, im);"}, {"sha": "2ae3b84442bbd367ee940a3959f0813c40c287d4", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -2373,7 +2373,7 @@ impure fn parse_crate_directives(parser p, token.token term)\n impure fn parse_crate_from_crate_file(parser p) -> @ast.crate {\n     auto lo = p.get_span();\n     auto hi = lo;\n-    auto prefix = std.path.dirname(lo.filename);\n+    auto prefix = std.fs.dirname(lo.filename);\n     auto cdirs = parse_crate_directives(p, token.EOF);\n     auto m = eval.eval_crate_directives_to_mod(p, p.get_env(),\n                                                cdirs, prefix);"}, {"sha": "526dac8f21fb71e00f606d5f94923f46f6e894f5", "filename": "src/lib/_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2F_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2F_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_str.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -106,6 +106,11 @@ fn from_bytes(vec[u8] v) : is_utf8(v) -> str {\n     ret rustrt.str_from_vec(v);\n }\n \n+// FIXME temp thing\n+fn unsafe_from_bytes(vec[u8] v) -> str {\n+    ret rustrt.str_from_vec(v);\n+}\n+\n fn refcount(str s) -> uint {\n     auto r = rustrt.refcount[u8](s);\n     if (r == dbg.const_refcount) {"}, {"sha": "55f4f9793d0d120ec3356437c2989dc627fa4bcb", "filename": "src/lib/fs.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -0,0 +1,37 @@\n+native \"rust\" mod rustrt {\n+  fn rust_file_is_dir(str path) -> int;\n+}\n+\n+fn path_sep() -> str {\n+  ret _str.unsafe_from_bytes(vec(os_fs.path_sep as u8));\n+}\n+\n+type path = str;\n+\n+fn dirname(path p) -> path {\n+    auto sep = path_sep();\n+    check (_str.byte_len(sep) == 1u);\n+    let int i = _str.rindex(p, sep.(0));\n+    if (i == -1) {\n+        ret p;\n+    }\n+    ret _str.substr(p, 0u, i as uint);\n+}\n+\n+impure fn file_is_dir(path p) -> bool {\n+  ret rustrt.rust_file_is_dir(p) != 0;\n+}\n+\n+impure fn list_dir(path p) -> vec[str] {\n+  auto pl = _str.byte_len(p);\n+  if (pl == 0u || p.(pl - 1u) as char != os_fs.path_sep) {\n+    p += path_sep();\n+  }\n+  let vec[str] full_paths = vec();\n+  for (str filename in os_fs.list_dir(p)) {\n+    if (!_str.eq(filename, \".\")) {if (!_str.eq(filename, \"..\")) {\n+      full_paths = _vec.push[str](full_paths, p + filename);\n+    }}\n+  }\n+  ret full_paths;\n+}"}, {"sha": "219125c5f3d0b07ac0241bb4236e1447427a95c2", "filename": "src/lib/io.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -86,6 +86,7 @@ tag fileflag {\n     append;\n     create;\n     truncate;\n+    none;\n }\n \n state obj fd_buf_writer(int fd, bool must_close) {\n@@ -120,6 +121,7 @@ fn file_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n             case (append)   { fflags |= os.libc_constants.O_APPEND(); }\n             case (create)   { fflags |= os.libc_constants.O_CREAT(); }\n             case (truncate) { fflags |= os.libc_constants.O_TRUNC(); }\n+            case (none) {}\n         }\n     }\n "}, {"sha": "e05a69b30921fecec2f10ab4b256cc950ecee6a1", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -15,9 +15,10 @@ native mod libc = \"libc.so.6\" {\n     fn ungetc(int c, FILE f);\n \n     type dir;\n-    // readdir is a mess; handle via wrapper function in rustrt.\n     fn opendir(sbuf d) -> dir;\n     fn closedir(dir d) -> int;\n+    type dirent;\n+    fn readdir(dir d) -> dirent;\n \n     fn getenv(sbuf n) -> sbuf;\n     fn setenv(sbuf n, sbuf v, int overwrite) -> int;\n@@ -39,10 +40,6 @@ mod libc_constants {\n     fn S_IWUSR() -> uint { ret 0x0080u; }\n }\n \n-fn path_sep() -> str {\n-    ret \"/\";\n-}\n-\n fn exec_suffix() -> str {\n     ret \"\";\n }"}, {"sha": "3dc63bad82481b3dc77a3ae9f7f56f85d735f836", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -1,5 +1,4 @@\n-import _str.sbuf;\n-import _vec.vbuf;\n+import libc = posix;\n \n native mod libc = \"libc.dylib\" {\n \n@@ -15,9 +14,10 @@ native mod libc = \"libc.dylib\" {\n     fn ungetc(int c, FILE f);\n \n     type dir;\n-    // readdir is a mess; handle via wrapper function in rustrt.\n     fn opendir(sbuf d) -> dir;\n     fn closedir(dir d) -> int;\n+    type dirent;\n+    fn readdir(dir d) -> dirent;\n \n     fn getenv(sbuf n) -> sbuf;\n     fn setenv(sbuf n, sbuf v, int overwrite) -> int;\n@@ -39,10 +39,6 @@ mod libc_constants {\n     fn S_IWUSR() -> uint { ret 0x0200u; }\n }\n \n-fn path_sep() -> str {\n-    ret \"/\";\n-}\n-\n fn exec_suffix() -> str {\n     ret \"\";\n }"}, {"sha": "9cda93d6e55700286e00ced1a5db918d23614cb4", "filename": "src/lib/path.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3436979b175496a3936f00e90748e2fad0343ae9/src%2Flib%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436979b175496a3936f00e90748e2fad0343ae9/src%2Flib%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fpath.rs?ref=3436979b175496a3936f00e90748e2fad0343ae9", "patch": "@@ -1,21 +0,0 @@\n-\n-type path = str;\n-\n-fn dirname(path p) -> path {\n-    auto sep = os.path_sep();\n-    check (_str.byte_len(sep) == 1u);\n-    let int i = _str.rindex(p, sep.(0));\n-    if (i == -1) {\n-        ret p;\n-    }\n-    ret _str.substr(p, 0u, i as uint);\n-}\n-\n-// Local Variables:\n-// mode: rust;\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:"}, {"sha": "05366a15dbfd23a84c188b235a09f9673efb9b4f", "filename": "src/lib/posix_fs.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fposix_fs.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -0,0 +1,19 @@\n+native \"rust\" mod rustrt {\n+  fn rust_dirent_filename(os.libc.dirent ent) -> str;\n+}\n+\n+impure fn list_dir(str path) -> vec[str] {\n+  // TODO ensure this is always closed\n+  auto dir = os.libc.opendir(_str.buf(path));\n+  check (dir as uint != 0u);\n+  let vec[str] result = vec();\n+  while (true) {\n+    auto ent = os.libc.readdir(dir);\n+    if (ent as int == 0) {break;}\n+    result = _vec.push[str](result, rustrt.rust_dirent_filename(ent));\n+  }\n+  os.libc.closedir(dir);\n+  ret result;\n+}\n+\n+const char path_sep = '/';"}, {"sha": "8098a4e9b0f5661c734d32b0673788fd4f25f721", "filename": "src/lib/std.rc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -26,6 +26,8 @@ mod util;\n // Authorize various rule-bendings.\n \n auth io = unsafe;\n+auth fs = unsafe;\n+auth os_fs = unsafe;\n auth _str = unsafe;\n auth _vec = unsafe;\n auth _task = unsafe;\n@@ -41,12 +43,17 @@ auth rand.mk_rng = unsafe;\n alt (target_os) {\n     case (\"win32\") {\n         mod os = \"win32_os.rs\";\n+        mod os_fs = \"win32_fs.rs\";\n     } case (\"macos\") {\n         mod os = \"macos_os.rs\";\n+        mod os_fs = \"posix_fs.rs\";\n     } else {\n         mod os = \"linux_os.rs\";\n+        mod os_fs = \"posix_fs.rs\";\n     }\n- }\n+}\n+mod fs;\n+\n \n // FIXME: parametric\n mod map;\n@@ -56,7 +63,6 @@ mod rand;\n mod dbg;\n mod bitv;\n mod sort;\n-mod path;\n mod sha1;\n \n // Local Variables:"}, {"sha": "641ef33eb1b73022ed65b8607ae9e04d6728e707", "filename": "src/lib/win32_fs.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fwin32_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fwin32_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_fs.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -0,0 +1,10 @@\n+native \"rust\" mod rustrt {\n+  fn rust_list_files(str path) -> vec[str];\n+  fn rust_file_is_dir(str path) -> int;\n+}\n+\n+impure fn list_dir(str path) -> vec[str] {\n+  ret rustrt.rust_list_files(path+\"*\");\n+}\n+\n+const char path_sep = '\\\\';"}, {"sha": "0c6a23a6832fa930ab041593729b1b21e5f48e84", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -29,11 +29,6 @@ mod libc_constants {\n     fn S_IWUSR() -> uint { ret 0x0080u; } // really _S_IWRITE in win32\n }\n \n-\n-fn path_sep() -> str {\n-    ret \"\\\\\";\n-}\n-\n fn exec_suffix() -> str {\n     ret \".exe\";\n }"}, {"sha": "250280f209c02e85cab34e987f538513c3d53aed", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -1,4 +1,7 @@\n \n+#include <dirent.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n #include \"rust_internal.h\"\n \n /* Native builtins. */\n@@ -150,28 +153,27 @@ vec_print_debug_info(rust_task *task, type_desc *ty, rust_vec *v)\n }\n \n /* Helper for str_alloc and str_from_vec.  Returns NULL as failure. */\n-static rust_str *\n-str_alloc_with_data(rust_task *task,\n-                    size_t n_bytes,\n+static rust_vec*\n+vec_alloc_with_data(rust_task *task,\n+                    size_t n_elts,\n                     size_t fill,\n-                    uint8_t const *d)\n+                    size_t elt_size,\n+                    void *d)\n {\n     rust_dom *dom = task->dom;\n-    size_t alloc = next_power_of_two(sizeof(rust_str) + n_bytes);\n+    size_t alloc = next_power_of_two(sizeof(rust_vec) + (n_elts * elt_size));\n     void *mem = dom->malloc(alloc, memory_region::LOCAL);\n-    if (!mem)\n-        return NULL;\n-    rust_str *st = new (mem) rust_str(dom, alloc, fill, d);\n-    return st;\n+    if (!mem) return NULL;\n+    return new (mem) rust_vec(dom, alloc, fill * elt_size, (uint8_t*)d);\n }\n \n extern \"C\" CDECL rust_str*\n str_alloc(rust_task *task, size_t n_bytes)\n {\n-    rust_str *st = str_alloc_with_data(task,\n+    rust_str *st = vec_alloc_with_data(task,\n                                        n_bytes + 1,  // +1 to fit at least \"\"\n-                                       1,\n-                                       (uint8_t const *)\"\");\n+                                       1, 1,\n+                                       (void*)\"\");\n     if (!st) {\n         task->fail(2);\n         return NULL;\n@@ -195,10 +197,11 @@ extern \"C\" CDECL rust_str *\n str_from_vec(rust_task *task, rust_vec *v)\n {\n     rust_str *st =\n-        str_alloc_with_data(task,\n+        vec_alloc_with_data(task,\n                             v->fill + 1,  // +1 to fit at least '\\0'\n                             v->fill,\n-                            v->fill ? (uint8_t const *)v->data : NULL);\n+                            1,\n+                            v->fill ? (void*)v->data : NULL);\n     if (!st) {\n         task->fail(2);\n         return NULL;\n@@ -371,6 +374,39 @@ debug_trap(rust_task *task, rust_str *s)\n     __asm__(\"int3\");\n }\n \n+rust_str* c_str_to_rust(rust_task *task, char const *str) {\n+    size_t len = strlen(str) + 1;\n+    return vec_alloc_with_data(task, len, len, 1, (void*)str);\n+}\n+\n+#if defined(__WIN32__)\n+extern \"C\" CDECL rust_vec*\n+rust_list_files(rust_task *task, rust_str *path) {\n+    array_list<rust_str*> strings;\n+    WIN32_FIND_DATA FindFileData;\n+    HANDLE hFind = FindFirstFile((char*)path->data, &FindFileData);\n+    if (hFind != INVALID_HANDLE_VALUE) {\n+        do {\n+            strings.push(c_str_to_rust(task, FindFileData.cFileName));\n+        } while (FindNextFile(hFind, &FindFileData));\n+        FindClose(hFind);\n+    }\n+    return vec_alloc_with_data(task, strings.size(), strings.size(),\n+                               sizeof(rust_str*), strings.data());\n+}\n+#else\n+extern \"C\" CDECL rust_str *\n+rust_dirent_filename(rust_task *task, dirent* ent) {\n+    return c_str_to_rust(task, ent->d_name);\n+}\n+#endif\n+\n+extern \"C\" CDECL int\n+rust_file_is_dir(rust_task *task, rust_str *path) {\n+    struct stat buf;\n+    stat((char*)path->data, &buf);\n+    return S_ISDIR(buf.st_mode);\n+}\n \n //\n // Local Variables:"}, {"sha": "5f13a3c81bf08650d779f3e3c8b46e000df69550", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -177,11 +177,8 @@ rust_vec : public rc_base<rust_vec>\n         alloc(alloc),\n         fill(fill)\n     {\n-        if (d || fill) {\n-            I(dom, d);\n-            I(dom, fill);\n+        if (d)\n             memcpy(&data[0], d, fill);\n-        }\n     }\n     ~rust_vec() {}\n };"}, {"sha": "9ad4b2080417fb56ddc2512b46c232c82932879c", "filename": "src/rt/util/array_list.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Frt%2Futil%2Farray_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/c731d625fe5f7626b41c7241893350b8b27b1dbe/src%2Frt%2Futil%2Farray_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Farray_list.h?ref=c731d625fe5f7626b41c7241893350b8b27b1dbe", "patch": "@@ -19,6 +19,7 @@ template<typename T> class array_list {\n     bool replace(T old_value, T new_value);\n     int32_t index_of(T value);\n     bool is_empty();\n+    T* data();\n     T & operator[](size_t index);\n };\n \n@@ -101,4 +102,9 @@ array_list<T>::is_empty() {\n     return _size == 0;\n }\n \n+template<typename T> T*\n+array_list<T>::data() {\n+    return _data;\n+}\n+\n #endif /* ARRAY_LIST_H */"}]}