{"sha": "cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "node_id": "C_kwDOAAsO6NoAKGNjYTQzZmU4ZTIwYWY1NGJkN2Y0ZmEwNGYyZmVjOTMzYTY0YjA3ZWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-05T15:08:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-05T15:08:11Z"}, "message": "Rollup merge of #98888 - RalfJung:interpret-checked-bin, r=oli-obk\n\ninterpret: fix CheckedBinOp behavior when overflow checking is disabled\n\nAdjusts the interpreter to https://github.com/rust-lang/rust/pull/98738.\n\nr? `@oli-obk`", "tree": {"sha": "9e41b7001df24b3e40bc5984b75a5000e57012df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e41b7001df24b3e40bc5984b75a5000e57012df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixFPbCRBK7hj4Ov3rIwAA308IAG3PWG3rn9cvdOF089FBgqAV\nzkP6VhU8fRQhjYsPGJ8vpfDHNkXQhRoNWUseZfH2vrcoDonjaep82Trk/BtaqqRR\n2imh2BWB/MXbIoL3wt2ZlwOf4AHnEdrullvhavE1bngPm5lYmoy9sCKG16saI7Su\nXzcH4QzK5bqcZoeAHkGFXnEjswm8v8k3/QpoEruJ7+nfxH2n237wVdjBBpyuFXAQ\nBmr2em9/MerYRYISbnQhP/qoTVUy2b+QpH3V9AFnrIAAvIb43EjWFgyvoYk8lc+j\n/YoYkbHlfCgQGa1uPBpttYmdWGdAl4UVTlmGDEYgIl5NSgyxw1wWtcigolZWbw8=\n=IErz\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e41b7001df24b3e40bc5984b75a5000e57012df\nparent 69195c026e5e38df43c77f0a36c10c230e3adcfe\nparent 2f6e99666218a2f4c0e6b958d710aac445ff85c0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657033691 +0200\ncommitter GitHub <noreply@github.com> 1657033691 +0200\n\nRollup merge of #98888 - RalfJung:interpret-checked-bin, r=oli-obk\n\ninterpret: fix CheckedBinOp behavior when overflow checking is disabled\n\nAdjusts the interpreter to https://github.com/rust-lang/rust/pull/98738.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "html_url": "https://github.com/rust-lang/rust/commit/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69195c026e5e38df43c77f0a36c10c230e3adcfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/69195c026e5e38df43c77f0a36c10c230e3adcfe", "html_url": "https://github.com/rust-lang/rust/commit/69195c026e5e38df43c77f0a36c10c230e3adcfe"}, {"sha": "2f6e99666218a2f4c0e6b958d710aac445ff85c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6e99666218a2f4c0e6b958d710aac445ff85c0", "html_url": "https://github.com/rust-lang/rust/commit/2f6e99666218a2f4c0e6b958d710aac445ff85c0"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "6744aace84969f773888ff6f9eca46b39dfb2e32", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "patch": "@@ -217,7 +217,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::mul_with_overflow => BinOp::Mul,\n                     _ => bug!(),\n                 };\n-                self.binop_with_overflow(bin_op, &lhs, &rhs, dest)?;\n+                self.binop_with_overflow(\n+                    bin_op, /*force_overflow_checks*/ true, &lhs, &rhs, dest,\n+                )?;\n             }\n             sym::saturating_add | sym::saturating_sub => {\n                 let l = self.read_immediate(&args[0])?;"}, {"sha": "54c9e99cf97c81b6fd2e8311f35379627323af14", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "patch": "@@ -144,6 +144,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         true\n     }\n \n+    /// Whether CheckedBinOp MIR statements should actually check for overflow.\n+    fn check_binop_checks_overflow(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+\n     /// Entry point for obtaining the MIR of anything that should get evaluated.\n     /// So not just functions and shims, but also const/static initializers, anonymous\n     /// constants, ...\n@@ -468,6 +471,11 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         true\n     }\n \n+    #[inline(always)]\n+    fn check_binop_checks_overflow(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+        true\n+    }\n+\n     #[inline(always)]\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,"}, {"sha": "942bdb36645bde6cc3add4e810f6537994ffef35", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "patch": "@@ -12,9 +12,13 @@ use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};\n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Applies the binary operation `op` to the two operands and writes a tuple of the result\n     /// and a boolean signifying the potential overflow to the destination.\n+    ///\n+    /// `force_overflow_checks` indicates whether overflow checks should be done even when\n+    /// `tcx.sess.overflow_checks()` is `false`.\n     pub fn binop_with_overflow(\n         &mut self,\n         op: mir::BinOp,\n+        force_overflow_checks: bool,\n         left: &ImmTy<'tcx, M::PointerTag>,\n         right: &ImmTy<'tcx, M::PointerTag>,\n         dest: &PlaceTy<'tcx, M::PointerTag>,\n@@ -26,6 +30,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             \"type mismatch for result of {:?}\",\n             op,\n         );\n+        // As per https://github.com/rust-lang/rust/pull/98738, we always return `false` in the 2nd\n+        // component when overflow checking is disabled.\n+        let overflowed =\n+            overflowed && (force_overflow_checks || M::check_binop_checks_overflow(self));\n+        // Write the result to `dest`.\n         if let Abi::ScalarPair(..) = dest.layout.abi {\n             // We can use the optimized path and avoid `place_field` (which might do\n             // `force_allocation`)."}, {"sha": "2ee7ed57ab5a7f1f033a24ef63eeb55e3674d533", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "patch": "@@ -185,7 +185,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let left = self.read_immediate(&self.eval_operand(left, None)?)?;\n                 let layout = binop_right_homogeneous(bin_op).then_some(left.layout);\n                 let right = self.read_immediate(&self.eval_operand(right, layout)?)?;\n-                self.binop_with_overflow(bin_op, &left, &right, &dest)?;\n+                self.binop_with_overflow(\n+                    bin_op, /*force_overflow_checks*/ false, &left, &right, &dest,\n+                )?;\n             }\n \n             UnaryOp(un_op, ref operand) => {"}, {"sha": "2f4c0ae96b38391f4800f41f37616f380c8ad577", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca43fe8e20af54bd7f4fa04f2fec933a64b07ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=cca43fe8e20af54bd7f4fa04f2fec933a64b07ef", "patch": "@@ -993,8 +993,9 @@ pub enum Rvalue<'tcx> {\n \n     /// Same as `BinaryOp`, but yields `(T, bool)` with a `bool` indicating an error condition.\n     ///\n-    /// When overflow checking is disabled, the error condition is false. Otherwise, the error\n-    /// condition is determined as described below.\n+    /// When overflow checking is disabled and we are generating run-time code, the error condition\n+    /// is false. Otherwise, and always during CTFE, the error condition is determined as described\n+    /// below.\n     ///\n     /// For addition, subtraction, and multiplication on integers the error condition is set when\n     /// the infinite precision result would be unequal to the actual result."}]}