{"sha": "08b235b5bed1a53311da34fa12966cd42a2a5abe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YjIzNWI1YmVkMWE1MzMxMWRhMzRmYTEyOTY2Y2Q0MmEyYTVhYmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-05T19:55:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-05T22:06:38Z"}, "message": "Point at formatting descriptor string when it is invalid\n\nWhen a formatting string contains an invalid descriptor, point at it\ninstead of the argument:\n\n```\nerror: unknown format trait `foo`\n  --> $DIR/ifmt-bad-arg.rs:86:17\n   |\nLL |     println!(\"{:foo}\", 1);\n   |                 ^^^\n   |\n   = note: the only appropriate formatting traits are:\n           - ``, which uses the `Display` trait\n           - `?`, which uses the `Debug` trait\n           - `e`, which uses the `LowerExp` trait\n           - `E`, which uses the `UpperExp` trait\n           - `o`, which uses the `Octal` trait\n           - `p`, which uses the `Pointer` trait\n           - `b`, which uses the `Binary` trait\n           - `x`, which uses the `LowerHex` trait\n           - `X`, which uses the `UpperHex` trait\n```", "tree": {"sha": "2cbd042c2d9d566b1bc6d62d7b5d02e255d21b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cbd042c2d9d566b1bc6d62d7b5d02e255d21b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08b235b5bed1a53311da34fa12966cd42a2a5abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08b235b5bed1a53311da34fa12966cd42a2a5abe", "html_url": "https://github.com/rust-lang/rust/commit/08b235b5bed1a53311da34fa12966cd42a2a5abe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08b235b5bed1a53311da34fa12966cd42a2a5abe/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a1b3b30c6cdd674049b144a3ced7b711de962b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1b3b30c6cdd674049b144a3ced7b711de962b2", "html_url": "https://github.com/rust-lang/rust/commit/3a1b3b30c6cdd674049b144a3ced7b711de962b2"}], "stats": {"total": 84, "additions": 47, "deletions": 37}, "files": [{"sha": "3896612ea0388eec23a0c59c5f8d486c3542b260", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08b235b5bed1a53311da34fa12966cd42a2a5abe/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b235b5bed1a53311da34fa12966cd42a2a5abe/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=08b235b5bed1a53311da34fa12966cd42a2a5abe", "patch": "@@ -74,6 +74,8 @@ pub struct FormatSpec<'a> {\n     /// this argument, this can be empty or any number of characters, although\n     /// it is required to be one word.\n     pub ty: &'a str,\n+    /// The span of the descriptor string (for diagnostics).\n+    pub ty_span: Option<InnerSpan>,\n }\n \n /// Enum describing where an argument for a format can be located.\n@@ -475,6 +477,7 @@ impl<'a> Parser<'a> {\n             width: CountImplied,\n             width_span: None,\n             ty: &self.input[..0],\n+            ty_span: None,\n         };\n         if !self.consume(':') {\n             return spec;\n@@ -548,6 +551,7 @@ impl<'a> Parser<'a> {\n                 spec.precision_span = sp;\n             }\n         }\n+        let ty_span_start = self.cur.peek().map(|(pos, _)| *pos);\n         // Optional radix followed by the actual format specifier\n         if self.consume('x') {\n             if self.consume('?') {\n@@ -567,6 +571,11 @@ impl<'a> Parser<'a> {\n             spec.ty = \"?\";\n         } else {\n             spec.ty = self.word();\n+            let ty_span_end = self.cur.peek().map(|(pos, _)| *pos);\n+            let this = self;\n+            spec.ty_span = ty_span_start\n+                .and_then(|s| ty_span_end.map(|e| (s, e)))\n+                .map(|(start, end)| this.to_span_index(start).to(this.to_span_index(end)));\n         }\n         spec\n     }"}, {"sha": "b8d053a2162de8a62b457d4ae9dc07315b3aed70", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/08b235b5bed1a53311da34fa12966cd42a2a5abe/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b235b5bed1a53311da34fa12966cd42a2a5abe/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=08b235b5bed1a53311da34fa12966cd42a2a5abe", "patch": "@@ -21,7 +21,7 @@ use std::collections::hash_map::Entry;\n \n #[derive(PartialEq)]\n enum ArgumentType {\n-    Placeholder(String),\n+    Placeholder(&'static str),\n     Count,\n }\n \n@@ -244,7 +244,36 @@ impl<'a, 'b> Context<'a, 'b> {\n                     parse::ArgumentNamed(s) => Named(s),\n                 };\n \n-                let ty = Placeholder(arg.format.ty.to_string());\n+                let ty = Placeholder(match &arg.format.ty[..] {\n+                    \"\" => \"Display\",\n+                    \"?\" => \"Debug\",\n+                    \"e\" => \"LowerExp\",\n+                    \"E\" => \"UpperExp\",\n+                    \"o\" => \"Octal\",\n+                    \"p\" => \"Pointer\",\n+                    \"b\" => \"Binary\",\n+                    \"x\" => \"LowerHex\",\n+                    \"X\" => \"UpperHex\",\n+                    _ => {\n+                        let fmtsp = self.fmtsp;\n+                        let mut err = self.ecx.struct_span_err(\n+                            arg.format.ty_span.map(|sp| fmtsp.from_inner(sp)).unwrap_or(fmtsp),\n+                            &format!(\"unknown format trait `{}`\", arg.format.ty),\n+                        );\n+                        err.note(\"the only appropriate formatting traits are:\\n\\\n+                                - ``, which uses the `Display` trait\\n\\\n+                                - `?`, which uses the `Debug` trait\\n\\\n+                                - `e`, which uses the `LowerExp` trait\\n\\\n+                                - `E`, which uses the `UpperExp` trait\\n\\\n+                                - `o`, which uses the `Octal` trait\\n\\\n+                                - `p`, which uses the `Pointer` trait\\n\\\n+                                - `b`, which uses the `Binary` trait\\n\\\n+                                - `x`, which uses the `LowerHex` trait\\n\\\n+                                - `X`, which uses the `UpperHex` trait\");\n+                        err.emit();\n+                        \"<invalid>\"\n+                    }\n+                });\n                 self.verify_arg_type(pos, ty);\n                 self.curpiece += 1;\n             }\n@@ -588,6 +617,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                         width: parse::CountImplied,\n                         width_span: None,\n                         ty: arg.format.ty,\n+                        ty_span: arg.format.ty_span,\n                     },\n                 };\n \n@@ -759,37 +789,8 @@ impl<'a, 'b> Context<'a, 'b> {\n         sp = ecx.with_def_site_ctxt(sp);\n         let arg = ecx.expr_ident(sp, arg);\n         let trait_ = match *ty {\n-            Placeholder(ref tyname) => {\n-                match &tyname[..] {\n-                    \"\" => \"Display\",\n-                    \"?\" => \"Debug\",\n-                    \"e\" => \"LowerExp\",\n-                    \"E\" => \"UpperExp\",\n-                    \"o\" => \"Octal\",\n-                    \"p\" => \"Pointer\",\n-                    \"b\" => \"Binary\",\n-                    \"x\" => \"LowerHex\",\n-                    \"X\" => \"UpperHex\",\n-                    _ => {\n-                        let mut err = ecx.struct_span_err(\n-                            sp,\n-                            &format!(\"unknown format trait `{}`\", *tyname),\n-                        );\n-                        err.note(\"the only appropriate formatting traits are:\\n\\\n-                                  - ``, which uses the `Display` trait\\n\\\n-                                  - `?`, which uses the `Debug` trait\\n\\\n-                                  - `e`, which uses the `LowerExp` trait\\n\\\n-                                  - `E`, which uses the `UpperExp` trait\\n\\\n-                                  - `o`, which uses the `Octal` trait\\n\\\n-                                  - `p`, which uses the `Pointer` trait\\n\\\n-                                  - `b`, which uses the `Binary` trait\\n\\\n-                                  - `x`, which uses the `LowerHex` trait\\n\\\n-                                  - `X`, which uses the `UpperHex` trait\");\n-                        err.emit();\n-                        return DummyResult::raw_expr(sp, true);\n-                    }\n-                }\n-            }\n+            Placeholder(trait_) if trait_ == \"<invalid>\" => return DummyResult::raw_expr(sp, true),\n+            Placeholder(trait_) => trait_,\n             Count => {\n                 let path = ecx.std_path(&[sym::fmt, sym::ArgumentV1, sym::from_usize]);\n                 return ecx.expr_call_global(macsp, path, vec![arg]);"}, {"sha": "7a76f0e7c47890186049f66437615594eeaf37df", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08b235b5bed1a53311da34fa12966cd42a2a5abe/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08b235b5bed1a53311da34fa12966cd42a2a5abe/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=08b235b5bed1a53311da34fa12966cd42a2a5abe", "patch": "@@ -257,10 +257,10 @@ LL |     println!(\"{} {:07$} {}\", 1, 3.2, 4);\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n error: unknown format trait `foo`\n-  --> $DIR/ifmt-bad-arg.rs:86:24\n+  --> $DIR/ifmt-bad-arg.rs:86:17\n    |\n LL |     println!(\"{:foo}\", 1);\n-   |                        ^\n+   |                 ^^^\n    |\n    = note: the only appropriate formatting traits are:\n            - ``, which uses the `Display` trait"}, {"sha": "459432bf4e4266391843e40de84d7d586d36f399", "filename": "src/test/ui/if/ifmt-unknown-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08b235b5bed1a53311da34fa12966cd42a2a5abe/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08b235b5bed1a53311da34fa12966cd42a2a5abe/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr?ref=08b235b5bed1a53311da34fa12966cd42a2a5abe", "patch": "@@ -1,8 +1,8 @@\n error: unknown format trait `notimplemented`\n-  --> $DIR/ifmt-unknown-trait.rs:2:34\n+  --> $DIR/ifmt-unknown-trait.rs:2:16\n    |\n LL |     format!(\"{:notimplemented}\", \"3\");\n-   |                                  ^^^\n+   |                ^^^^^^^^^^^^^^\n    |\n    = note: the only appropriate formatting traits are:\n            - ``, which uses the `Display` trait"}]}