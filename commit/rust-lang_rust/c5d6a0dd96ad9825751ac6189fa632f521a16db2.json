{"sha": "c5d6a0dd96ad9825751ac6189fa632f521a16db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZDZhMGRkOTZhZDk4MjU3NTFhYzYxODlmYTYzMmY1MjFhMTZkYjI=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2020-10-02T03:26:36Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2020-10-05T20:55:48Z"}, "message": "Implement iter::Chain::{advance_by, advance_back_by}", "tree": {"sha": "31a3c852b668ef2615fd5951455b71a9a962b1f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a3c852b668ef2615fd5951455b71a9a962b1f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d6a0dd96ad9825751ac6189fa632f521a16db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d6a0dd96ad9825751ac6189fa632f521a16db2", "html_url": "https://github.com/rust-lang/rust/commit/c5d6a0dd96ad9825751ac6189fa632f521a16db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d6a0dd96ad9825751ac6189fa632f521a16db2/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cba260df0f1c67ea3690035cd5611a7465a1560", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cba260df0f1c67ea3690035cd5611a7465a1560", "html_url": "https://github.com/rust-lang/rust/commit/9cba260df0f1c67ea3690035cd5611a7465a1560"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "dadd7bfb0f70de35682036b7fbd3440272325065", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 64, "deletions": 12, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c5d6a0dd96ad9825751ac6189fa632f521a16db2/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d6a0dd96ad9825751ac6189fa632f521a16db2/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=c5d6a0dd96ad9825751ac6189fa632f521a16db2", "patch": "@@ -115,16 +115,42 @@ where\n     }\n \n     #[inline]\n-    fn nth(&mut self, mut n: usize) -> Option<A::Item> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let mut rem = n;\n+\n         if let Some(ref mut a) = self.a {\n-            while let Some(x) = a.next() {\n-                if n == 0 {\n-                    return Some(x);\n-                }\n-                n -= 1;\n+            match a.advance_by(rem) {\n+                Ok(()) => return Ok(()),\n+                Err(k) => rem -= k,\n             }\n             self.a = None;\n         }\n+\n+        if let Some(ref mut b) = self.b {\n+            match b.advance_by(rem) {\n+                Ok(()) => return Ok(()),\n+                Err(k) => rem -= k,\n+            }\n+            // we don't fuse the second iterator\n+        }\n+\n+        if rem == 0 { Ok(()) } else { Err(n - rem) }\n+    }\n+\n+    #[inline]\n+    fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n+        if let Some(ref mut a) = self.a {\n+            match a.advance_by(n) {\n+                Ok(()) => match a.next() {\n+                    None => n = 0,\n+                    x => return x,\n+                },\n+                Err(k) => n -= k,\n+            }\n+\n+            self.a = None;\n+        }\n+\n         maybe!(self.b.nth(n))\n     }\n \n@@ -191,16 +217,42 @@ where\n     }\n \n     #[inline]\n-    fn nth_back(&mut self, mut n: usize) -> Option<A::Item> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let mut rem = n;\n+\n         if let Some(ref mut b) = self.b {\n-            while let Some(x) = b.next_back() {\n-                if n == 0 {\n-                    return Some(x);\n-                }\n-                n -= 1;\n+            match b.advance_back_by(rem) {\n+                Ok(()) => return Ok(()),\n+                Err(k) => rem -= k,\n             }\n             self.b = None;\n         }\n+\n+        if let Some(ref mut a) = self.a {\n+            match a.advance_back_by(rem) {\n+                Ok(()) => return Ok(()),\n+                Err(k) => rem -= k,\n+            }\n+            // we don't fuse the second iterator\n+        }\n+\n+        if rem == 0 { Ok(()) } else { Err(n - rem) }\n+    }\n+\n+    #[inline]\n+    fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n+        if let Some(ref mut b) = self.b {\n+            match b.advance_back_by(n) {\n+                Ok(()) => match b.next_back() {\n+                    None => n = 0,\n+                    x => return x,\n+                },\n+                Err(k) => n -= k,\n+            }\n+\n+            self.b = None;\n+        }\n+\n         maybe!(self.a.nth_back(n))\n     }\n "}]}