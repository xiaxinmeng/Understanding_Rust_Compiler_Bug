{"sha": "8afaaa54b0fc920780011d74723b44e2e8a760a4", "node_id": "C_kwDOAAsO6NoAKDhhZmFhYTU0YjBmYzkyMDc4MDAxMWQ3NDcyM2I0NGUyZThhNzYwYTQ", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-14T17:31:59Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-16T11:55:51Z"}, "message": "Add `TraitRef` for HIR", "tree": {"sha": "99654839a6851dc258c525ce377e9735aeb4557f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99654839a6851dc258c525ce377e9735aeb4557f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afaaa54b0fc920780011d74723b44e2e8a760a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPFO0cACgkQ4laYqTBY\nYXFUhw/+MdemMwH6TZ+Uzxf1ML18atUtPz7ukOgXGE/cL7aCcmQyATnWgdDkikkH\nXuwJVPRKLgBBRGxEbXzgxxXYU9MoqKYf+Pp6Ed82WkWb3X+Qgvnb9GVZFFpyDv21\nhnNUSWP74v067n4tUJP2WfLX3usNW3/Qp/PeO9I0Ien5EyCwFg9O3fecCMtEy+AY\n6mhcGU+FXSCM5GIcOUC9uDJ+gbkz9jKHHH/pD/o+Ate6OBfrJpy8RRvEr8k9jUeG\nYqHbuQTzoewjrM7U5mWxA+Fi/p5xbZ2GCmCNp4QPRz9gNhRW5JR/NlkLDN5rfair\nHXmpwaKMLLDN3T4xaTl2fo3EIqo0aYM9k8XrJwJXkuv4VQb9NjA9UN6b+OP6F0ej\ncIb1v1IVWMu5G12zHvq3ryyGiqRY0fKBeW9GAaCmlmcS962Yre2wI4mxSFLFpK6W\nVWKUN1IxFHwrrszAOFuD5HQ0a81AfS7tH2JREj3kY6p0a4DWbkGrUDwAOMp82Gqw\nKihfu5AgB6fujevpwCDY3VfKXu0AW+g8THFlzxMTNm3FZwHpFslbD3bsZU00YsvH\n4lyc6lcHHn92jCQefzTQVhuRp34GuMTMSiDVOvem1TeT4tMKfpKrBnf/jBAAeniA\nnqLxqEMQ0VutURQOkA2Dhmo1eLyIBgosu1pxJi9sUqjYbYIMmd0=\n=mCHI\n-----END PGP SIGNATURE-----", "payload": "tree 99654839a6851dc258c525ce377e9735aeb4557f\nparent ff4d55e480470fd6e3c3c003703612294fd09d15\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1673717519 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1673870151 +0900\n\nAdd `TraitRef` for HIR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afaaa54b0fc920780011d74723b44e2e8a760a4", "html_url": "https://github.com/rust-lang/rust/commit/8afaaa54b0fc920780011d74723b44e2e8a760a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afaaa54b0fc920780011d74723b44e2e8a760a4/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4d55e480470fd6e3c3c003703612294fd09d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4d55e480470fd6e3c3c003703612294fd09d15", "html_url": "https://github.com/rust-lang/rust/commit/ff4d55e480470fd6e3c3c003703612294fd09d15"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "54342f1b7c44f660aa5fdf1e7778621ec40a2811", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8afaaa54b0fc920780011d74723b44e2e8a760a4/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afaaa54b0fc920780011d74723b44e2e8a760a4/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8afaaa54b0fc920780011d74723b44e2e8a760a4", "patch": "@@ -2791,14 +2791,19 @@ impl Impl {\n         all\n     }\n \n-    // FIXME: the return type is wrong. This should be a hir version of\n-    // `TraitRef` (to account for parameters and qualifiers)\n     pub fn trait_(self, db: &dyn HirDatabase) -> Option<Trait> {\n-        let trait_ref = db.impl_trait(self.id)?.skip_binders().clone();\n-        let id = hir_ty::from_chalk_trait_id(trait_ref.trait_id);\n+        let trait_ref = db.impl_trait(self.id)?;\n+        let id = trait_ref.skip_binders().hir_trait_id();\n         Some(Trait { id })\n     }\n \n+    pub fn trait_ref(self, db: &dyn HirDatabase) -> Option<TraitRef> {\n+        let substs = TyBuilder::placeholder_subst(db, self.id);\n+        let trait_ref = db.impl_trait(self.id)?.substitute(Interner, &substs);\n+        let resolver = self.id.resolver(db.upcast());\n+        Some(TraitRef::new_with_resolver(db, &resolver, trait_ref))\n+    }\n+\n     pub fn self_ty(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.resolver(db.upcast());\n         let substs = TyBuilder::placeholder_subst(db, self.id);\n@@ -2824,6 +2829,48 @@ impl Impl {\n     }\n }\n \n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct TraitRef {\n+    env: Arc<TraitEnvironment>,\n+    trait_ref: hir_ty::TraitRef,\n+}\n+\n+impl TraitRef {\n+    pub(crate) fn new_with_resolver(\n+        db: &dyn HirDatabase,\n+        resolver: &Resolver,\n+        trait_ref: hir_ty::TraitRef,\n+    ) -> TraitRef {\n+        let env = resolver.generic_def().map_or_else(\n+            || Arc::new(TraitEnvironment::empty(resolver.krate())),\n+            |d| db.trait_environment(d),\n+        );\n+        TraitRef { env, trait_ref }\n+    }\n+\n+    pub fn trait_(&self) -> Trait {\n+        let id = self.trait_ref.hir_trait_id();\n+        Trait { id }\n+    }\n+\n+    pub fn self_ty(&self) -> Type {\n+        let ty = self.trait_ref.self_type_parameter(Interner);\n+        Type { env: self.env.clone(), ty }\n+    }\n+\n+    /// Returns `idx`-th argument of this trait reference if it is a type argument. Note that the\n+    /// first argument is the `Self` type.\n+    pub fn get_type_argument(&self, idx: usize) -> Option<Type> {\n+        self.trait_ref\n+            .substitution\n+            .as_slice(Interner)\n+            .get(idx)\n+            .and_then(|arg| arg.ty(Interner))\n+            .cloned()\n+            .map(|ty| Type { env: self.env.clone(), ty })\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n     env: Arc<TraitEnvironment>,"}]}