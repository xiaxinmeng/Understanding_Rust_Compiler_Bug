{"sha": "5c0b4b369167060aa73368374d48a7de6c812376", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMGI0YjM2OTE2NzA2MGFhNzMzNjgzNzRkNDhhN2RlNmM4MTIzNzY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-02-25T12:13:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-25T12:13:28Z"}, "message": "Rollup merge of #39995 - Aatch:vtable-ptr-metadata, r=arielb1\n\nSet metadata for vtable-related loads\n\nGive LLVM much more information about vtable pointers. Without the extra\ninformation, LLVM has to be rather pessimistic about vtables, preventing\na number of obvious optimisations.\n\n* Makes the vtable pointer argument noalias and readonly.\n* Marks loads of the vtable pointer as nonnull.\n* Marks load from the vtable with `!invariant.load` metadata.\n\nFixes #39992", "tree": {"sha": "ca2af1e18df25368b90b2334c1dab4c16c0c3292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2af1e18df25368b90b2334c1dab4c16c0c3292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0b4b369167060aa73368374d48a7de6c812376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0b4b369167060aa73368374d48a7de6c812376", "html_url": "https://github.com/rust-lang/rust/commit/5c0b4b369167060aa73368374d48a7de6c812376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0b4b369167060aa73368374d48a7de6c812376/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a950bdb3d39dc3ed12b9cfb06ba4deed1a96194", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a950bdb3d39dc3ed12b9cfb06ba4deed1a96194", "html_url": "https://github.com/rust-lang/rust/commit/0a950bdb3d39dc3ed12b9cfb06ba4deed1a96194"}, {"sha": "d80cf80b16660289ebc9765940d02b36ef1032b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80cf80b16660289ebc9765940d02b36ef1032b6", "html_url": "https://github.com/rust-lang/rust/commit/d80cf80b16660289ebc9765940d02b36ef1032b6"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "f742cca5b980a28cbbc9481b87a9a2a92a6a5bad", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=5c0b4b369167060aa73368374d48a7de6c812376", "patch": "@@ -506,7 +506,11 @@ impl FnType {\n                 if let Some(inner) = rust_ptr_attrs(ty, &mut data) {\n                     data.attrs.set(ArgAttribute::NonNull);\n                     if ccx.tcx().struct_tail(inner).is_trait() {\n+                        // vtables can be safely marked non-null, readonly\n+                        // and noalias.\n                         info.attrs.set(ArgAttribute::NonNull);\n+                        info.attrs.set(ArgAttribute::ReadOnly);\n+                        info.attrs.set(ArgAttribute::NoAlias);\n                     }\n                 }\n                 args.push(data);"}, {"sha": "0f7a510c363854b91b547f139930f1f9ff640208", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=5c0b4b369167060aa73368374d48a7de6c812376", "patch": "@@ -472,8 +472,15 @@ pub fn load_fat_ptr<'a, 'tcx>(\n         b.load(ptr, alignment.to_align())\n     };\n \n-    // FIXME: emit metadata on `meta`.\n-    let meta = b.load(get_meta(b, src), alignment.to_align());\n+    let meta = get_meta(b, src);\n+    let meta_ty = val_ty(meta);\n+    // If the 'meta' field is a pointer, it's a vtable, so use load_nonnull\n+    // instead\n+    let meta = if meta_ty.element_type().kind() == llvm::TypeKind::Pointer {\n+        b.load_nonnull(meta, None)\n+    } else {\n+        b.load(meta, None)\n+    };\n \n     (ptr, meta)\n }"}, {"sha": "99738dd6872e8df6d12929ecdbf3ed318996c216", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=5c0b4b369167060aa73368374d48a7de6c812376", "patch": "@@ -1149,6 +1149,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    pub fn set_invariant_load(&self, load: ValueRef) {\n+        unsafe {\n+            llvm::LLVMSetMetadata(load, llvm::MD_invariant_load as c_uint,\n+                                  llvm::LLVMMDNodeInContext(self.ccx.llcx(), ptr::null(), 0));\n+        }\n+    }\n+\n     /// Returns the ptr value that should be used for storing `val`.\n     fn check_store<'b>(&self,\n                        val: ValueRef,"}, {"sha": "9963514acd73619b0b939b488e03d0a7fe16bf87", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=5c0b4b369167060aa73368374d48a7de6c812376", "patch": "@@ -386,7 +386,15 @@ pub fn size_and_align_of_dst<'a, 'tcx>(bcx: &Builder<'a, 'tcx>, t: Ty<'tcx>, inf\n             let info = bcx.pointercast(info, Type::int(bcx.ccx).ptr_to());\n             let size_ptr = bcx.gepi(info, &[1]);\n             let align_ptr = bcx.gepi(info, &[2]);\n-            (bcx.load(size_ptr, None), bcx.load(align_ptr, None))\n+\n+            let size = bcx.load(size_ptr, None);\n+            let align = bcx.load(align_ptr, None);\n+\n+            // Vtable loads are invariant\n+            bcx.set_invariant_load(size);\n+            bcx.set_invariant_load(align);\n+\n+            (size, align)\n         }\n         ty::TySlice(_) | ty::TyStr => {\n             let unit_ty = t.sequence_element_type(bcx.tcx());"}, {"sha": "a3f4168e96f2a0c5e2bdc13d824a0846e34c7a5b", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b4b369167060aa73368374d48a7de6c812376/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=5c0b4b369167060aa73368374d48a7de6c812376", "patch": "@@ -30,13 +30,15 @@ const VTABLE_OFFSET: usize = 3;\n /// Extracts a method from a trait object's vtable, at the specified index.\n pub fn get_virtual_method<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                                     llvtable: ValueRef,\n-                                    vtable_index: usize)\n-                                    -> ValueRef {\n+                                    vtable_index: usize) -> ValueRef {\n     // Load the data pointer from the object.\n     debug!(\"get_virtual_method(vtable_index={}, llvtable={:?})\",\n            vtable_index, Value(llvtable));\n \n-    bcx.load(bcx.gepi(llvtable, &[vtable_index + VTABLE_OFFSET]), None)\n+    let ptr = bcx.load_nonnull(bcx.gepi(llvtable, &[vtable_index + VTABLE_OFFSET]), None);\n+    // Vtable loads are invariant\n+    bcx.set_invariant_load(ptr);\n+    ptr\n }\n \n /// Generate a shim function that allows an object type like `SomeTrait` to"}, {"sha": "76313b158ab1109422938a7368706a81838b5d9f", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c0b4b369167060aa73368374d48a7de6c812376/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0b4b369167060aa73368374d48a7de6c812376/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=5c0b4b369167060aa73368374d48a7de6c812376", "patch": "@@ -121,13 +121,13 @@ pub fn unsafe_slice(_: &[UnsafeInner]) {\n fn str(_: &[u8]) {\n }\n \n-// CHECK: @trait_borrow(i8* nonnull, void (i8*)** nonnull)\n+// CHECK: @trait_borrow(i8* nonnull, void (i8*)** noalias nonnull readonly)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n fn trait_borrow(_: &Drop) {\n }\n \n-// CHECK: @trait_box(i8* noalias nonnull, void (i8*)** nonnull)\n+// CHECK: @trait_box(i8* noalias nonnull, void (i8*)** noalias nonnull readonly)\n #[no_mangle]\n fn trait_box(_: Box<Drop>) {\n }"}]}