{"sha": "683085b3f069b771d48d9ae3f20edb9670451b88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MzA4NWIzZjA2OWI3NzFkNDhkOWFlM2YyMGVkYjk2NzA0NTFiODg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T11:57:37Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T11:57:37Z"}, "message": "Stop trying to link intrinsics.bc", "tree": {"sha": "4eca42aeb4aea9feedb1045acf1ea5555972a058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eca42aeb4aea9feedb1045acf1ea5555972a058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683085b3f069b771d48d9ae3f20edb9670451b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683085b3f069b771d48d9ae3f20edb9670451b88", "html_url": "https://github.com/rust-lang/rust/commit/683085b3f069b771d48d9ae3f20edb9670451b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683085b3f069b771d48d9ae3f20edb9670451b88/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca71e01bcedd56bf6343223da1ddf5adc8fe5fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca71e01bcedd56bf6343223da1ddf5adc8fe5fc2", "html_url": "https://github.com/rust-lang/rust/commit/ca71e01bcedd56bf6343223da1ddf5adc8fe5fc2"}], "stats": {"total": 64, "additions": 0, "deletions": 64}, "files": [{"sha": "cf01d9507f2289296648a92fd5f8e634c167913a", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/683085b3f069b771d48d9ae3f20edb9670451b88/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683085b3f069b771d48d9ae3f20edb9670451b88/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=683085b3f069b771d48d9ae3f20edb9670451b88", "patch": "@@ -30,69 +30,6 @@ fn llvm_err(sess: session, msg: str) -> ! unsafe {\n     } else { sess.fatal(msg + \": \" + str::unsafe::from_c_str(cstr)); }\n }\n \n-fn load_intrinsics_bc(sess: session) -> option<ModuleRef> {\n-    let path = alt filesearch::search(\n-        sess.filesearch,\n-        bind filesearch::pick_file(\"intrinsics.bc\", _)) {\n-      option::some(path) { path }\n-      option::none {\n-        sess.warn(\"couldn't find intrinsics.bc\");\n-        ret option::none;\n-      }\n-    };\n-    let membuf = str::as_c_str(path, {|buf|\n-        llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n-                                   });\n-    if membuf as uint == 0u {\n-        llvm_err(sess, \"installation problem: couldn't open \" + path);\n-    }\n-    let llintrinsicsmod = llvm::LLVMRustParseBitcode(membuf);\n-    llvm::LLVMDisposeMemoryBuffer(membuf);\n-    if llintrinsicsmod as uint == 0u {\n-        sess.warn(\"couldn't parse intrinsics.bc\");\n-        ret option::none;\n-    }\n-\n-    ret option::some(llintrinsicsmod);\n-}\n-\n-fn load_intrinsics_ll(sess: session) -> ModuleRef {\n-    let path = alt filesearch::search(\n-        sess.filesearch,\n-        bind filesearch::pick_file(\"intrinsics.ll\", _)) {\n-      option::some(path) { path }\n-      option::none { sess.fatal(\"couldn't find intrinsics.ll\") }\n-    };\n-    let llintrinsicsmod = str::as_c_str(path, { |buf|\n-        llvm::LLVMRustParseAssemblyFile(buf)\n-                                        });\n-    if llintrinsicsmod as uint == 0u {\n-        llvm_err(sess, \"couldn't parse intrinsics.ll\");\n-    }\n-    ret llintrinsicsmod;\n-}\n-\n-fn link_intrinsics(sess: session, llmod: ModuleRef) {\n-    let llintrinsicsmod = {\n-        alt load_intrinsics_bc(sess) {\n-          option::some(m) { m }\n-          option::none {\n-            // When the bitcode format changes we can't parse a .bc\n-            // file produced with a newer LLVM (as happens when stage0\n-            // is trying to build against a new LLVM revision), in\n-            // that case we'll try to parse the assembly.\n-            sess.warn(\"couldn't parse intrinsics.bc, trying intrinsics.ll\");\n-            load_intrinsics_ll(sess)\n-          }\n-        }\n-    };\n-    let linkres = llvm::LLVMLinkModules(llmod, llintrinsicsmod);\n-    llvm::LLVMDisposeModule(llintrinsicsmod);\n-    if linkres == False {\n-        llvm_err(sess, \"couldn't link the module with the intrinsics\");\n-    }\n-}\n-\n mod write {\n     fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||\n@@ -115,7 +52,6 @@ mod write {\n     fn run_passes(sess: session, llmod: ModuleRef, output: str) {\n         let opts = sess.opts;\n         if opts.time_llvm_passes { llvm::LLVMRustEnableTimePasses(); }\n-        link_intrinsics(sess, llmod);\n         let mut pm = mk_pass_manager();\n         let td = mk_target_data(\n             sess.targ_cfg.target_strs.data_layout);"}]}