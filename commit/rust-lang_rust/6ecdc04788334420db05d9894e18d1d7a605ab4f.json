{"sha": "6ecdc04788334420db05d9894e18d1d7a605ab4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlY2RjMDQ3ODgzMzQ0MjBkYjA1ZDk4OTRlMThkMWQ3YTYwNWFiNGY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-03-25T15:28:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-03-27T12:11:23Z"}, "message": "Add support for break and cont to rustc\n\nTesting proper cleanup is hampered by\nhttps://github.com/graydon/rust/issues/293", "tree": {"sha": "aba6169530f041b59507490b9ab28b1ac2835d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba6169530f041b59507490b9ab28b1ac2835d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ecdc04788334420db05d9894e18d1d7a605ab4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecdc04788334420db05d9894e18d1d7a605ab4f", "html_url": "https://github.com/rust-lang/rust/commit/6ecdc04788334420db05d9894e18d1d7a605ab4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ecdc04788334420db05d9894e18d1d7a605ab4f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5affda1a17532109f919df954ee743b850544e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5affda1a17532109f919df954ee743b850544e", "html_url": "https://github.com/rust-lang/rust/commit/9c5affda1a17532109f919df954ee743b850544e"}], "stats": {"total": 173, "additions": 164, "deletions": 9}, "files": [{"sha": "b1dbd80e54ad103141e2addf71e2c291ad49ce18", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=6ecdc04788334420db05d9894e18d1d7a605ab4f", "patch": "@@ -246,6 +246,8 @@ tag expr_ {\n     expr_path(path, option.t[def], ann);\n     expr_ext(path, vec[@expr], option.t[@expr], @expr, ann);\n     expr_fail;\n+    expr_break;\n+    expr_cont;\n     expr_ret(option.t[@expr]);\n     expr_put(option.t[@expr]);\n     expr_be(@expr);"}, {"sha": "878940b73bc98100522d8403a371d7700ad90733", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=6ecdc04788334420db05d9894e18d1d7a605ab4f", "patch": "@@ -111,6 +111,8 @@ impure fn new_reader(io.reader rdr, str filename) -> reader\n \n     keywords.insert(\"for\", token.FOR);\n     keywords.insert(\"each\", token.EACH);\n+    keywords.insert(\"break\", token.BREAK);\n+    keywords.insert(\"cont\", token.CONT);\n     keywords.insert(\"put\", token.PUT);\n     keywords.insert(\"ret\", token.RET);\n     keywords.insert(\"be\", token.BE);"}, {"sha": "c8130b0b965398afc71a4f7e9f46aedf8a1a8ba0", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=6ecdc04788334420db05d9894e18d1d7a605ab4f", "patch": "@@ -829,6 +829,16 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n             }\n         }\n \n+        case (token.BREAK) {\n+            p.bump();\n+            ex = ast.expr_break;\n+        }\n+\n+        case (token.CONT) {\n+            p.bump();\n+            ex = ast.expr_cont;\n+        }\n+\n         case (token.PUT) {\n             p.bump();\n             alt (p.peek()) {"}, {"sha": "bb0cea80bb81280f037cd73a042ffd28acbd3637", "filename": "src/comp/front/token.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=6ecdc04788334420db05d9894e18d1d7a605ab4f", "patch": "@@ -74,6 +74,9 @@ tag token {\n     ALT;\n     CASE;\n \n+    BREAK;\n+    CONT;\n+\n     FAIL;\n     DROP;\n \n@@ -242,6 +245,9 @@ fn to_str(token t) -> str {\n         case (ALT) { ret \"alt\"; }\n         case (CASE) { ret \"case\"; }\n \n+        case (BREAK) { ret \"break\"; }\n+        case (CONT) { ret \"cont\"; }\n+\n         case (FAIL) { ret \"fail\"; }\n         case (DROP) { ret \"drop\"; }\n "}, {"sha": "76715a28a9b7b88b0025eac3251d5c75d54c697c", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=6ecdc04788334420db05d9894e18d1d7a605ab4f", "patch": "@@ -170,6 +170,10 @@ type ast_fold[ENV] =\n \n      (fn(&ENV e, &span sp) -> @expr)              fold_expr_fail,\n \n+     (fn(&ENV e, &span sp) -> @expr)              fold_expr_break,\n+\n+     (fn(&ENV e, &span sp) -> @expr)              fold_expr_cont,\n+\n      (fn(&ENV e, &span sp,\n          &option.t[@expr] rv) -> @expr)           fold_expr_ret,\n \n@@ -695,6 +699,14 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_fail(env_, e.span);\n         }\n \n+        case (ast.expr_break) {\n+            ret fld.fold_expr_break(env_, e.span);\n+        }\n+\n+        case (ast.expr_cont) {\n+            ret fld.fold_expr_cont(env_, e.span);\n+        }\n+\n         case (ast.expr_ret(?oe)) {\n             auto oee = none[@expr];\n             alt (oe) {\n@@ -1266,6 +1278,14 @@ fn identity_fold_expr_fail[ENV](&ENV env, &span sp) -> @expr {\n     ret @respan(sp, ast.expr_fail);\n }\n \n+fn identity_fold_expr_break[ENV](&ENV env, &span sp) -> @expr {\n+    ret @respan(sp, ast.expr_break);\n+}\n+\n+fn identity_fold_expr_cont[ENV](&ENV env, &span sp) -> @expr {\n+    ret @respan(sp, ast.expr_cont);\n+}\n+\n fn identity_fold_expr_ret[ENV](&ENV env, &span sp,\n                                &option.t[@expr] rv) -> @expr {\n     ret @respan(sp, ast.expr_ret(rv));\n@@ -1565,6 +1585,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_path   = bind identity_fold_expr_path[ENV](_,_,_,_,_),\n          fold_expr_ext    = bind identity_fold_expr_ext[ENV](_,_,_,_,_,_,_),\n          fold_expr_fail   = bind identity_fold_expr_fail[ENV](_,_),\n+         fold_expr_break  = bind identity_fold_expr_break[ENV](_,_),\n+         fold_expr_cont   = bind identity_fold_expr_cont[ENV](_,_),\n          fold_expr_ret    = bind identity_fold_expr_ret[ENV](_,_,_),\n          fold_expr_put    = bind identity_fold_expr_put[ENV](_,_,_),\n          fold_expr_be     = bind identity_fold_expr_be[ENV](_,_,_),"}, {"sha": "9eb208597e0d43275e671657a5bb6763c4fa83d5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 72, "deletions": 9, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6ecdc04788334420db05d9894e18d1d7a605ab4f", "patch": "@@ -130,6 +130,7 @@ tag cleanup {\n \n tag block_kind {\n     SCOPE_BLOCK;\n+    LOOP_SCOPE_BLOCK(option.t[@block_ctxt], @block_ctxt);\n     NON_SCOPE_BLOCK;\n }\n \n@@ -990,7 +991,7 @@ fn trans_non_gc_free(@block_ctxt cx, ValueRef v) -> result {\n }\n \n fn find_scope_cx(@block_ctxt cx) -> @block_ctxt {\n-    if (cx.kind == SCOPE_BLOCK) {\n+    if (cx.kind != NON_SCOPE_BLOCK) {\n         ret cx;\n     }\n     alt (cx.parent) {\n@@ -3043,13 +3044,15 @@ fn trans_for(@block_ctxt cx,\n              @ast.decl decl,\n              @ast.expr seq,\n              &ast.block body) -> result {\n-\n     fn inner(@block_ctxt cx,\n              @ast.local local, ValueRef curr,\n-             @ty.t t, ast.block body) -> result {\n+             @ty.t t, ast.block body,\n+             @block_ctxt outer_next_cx) -> result {\n \n-        auto scope_cx = new_scope_block_ctxt(cx, \"for loop scope\");\n         auto next_cx = new_sub_block_ctxt(cx, \"next\");\n+        auto scope_cx =\n+            new_loop_scope_block_ctxt(cx, option.some[@block_ctxt](next_cx),\n+                                      outer_next_cx, \"for loop scope\");\n \n         cx.build.Br(scope_cx.llbb);\n         auto local_res = alloc_local(scope_cx, local);\n@@ -3069,10 +3072,13 @@ fn trans_for(@block_ctxt cx,\n         }\n     }\n \n+    auto next_cx = new_sub_block_ctxt(cx, \"next\");\n     auto seq_ty = ty.expr_ty(seq);\n     auto seq_res = trans_expr(cx, seq);\n-    ret iter_sequence(seq_res.bcx, seq_res.val, seq_ty,\n-                      bind inner(_, local, _, _, body));\n+    auto it = iter_sequence(seq_res.bcx, seq_res.val, seq_ty,\n+                            bind inner(_, local, _, _, body, next_cx));\n+    it.bcx.build.Br(next_cx.llbb);\n+    ret res(next_cx, it.val);\n }\n \n \n@@ -3308,8 +3314,9 @@ fn trans_while(@block_ctxt cx, @ast.expr cond,\n                &ast.block body) -> result {\n \n     auto cond_cx = new_scope_block_ctxt(cx, \"while cond\");\n-    auto body_cx = new_scope_block_ctxt(cx, \"while loop body\");\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n+    auto body_cx = new_loop_scope_block_ctxt(cx, option.none[@block_ctxt],\n+                                             next_cx, \"while loop body\");\n \n     auto body_res = trans_block(body_cx, body);\n     auto cond_res = trans_expr(cond_cx, cond);\n@@ -3326,8 +3333,9 @@ fn trans_while(@block_ctxt cx, @ast.expr cond,\n fn trans_do_while(@block_ctxt cx, &ast.block body,\n                   @ast.expr cond) -> result {\n \n-    auto body_cx = new_scope_block_ctxt(cx, \"do-while loop body\");\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n+    auto body_cx = new_loop_scope_block_ctxt(cx, option.none[@block_ctxt],\n+                                             next_cx, \"do-while loop body\");\n \n     auto body_res = trans_block(body_cx, body);\n     auto cond_res = trans_expr(body_res.bcx, cond);\n@@ -4599,6 +4607,14 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_check_expr(cx, a);\n         }\n \n+        case (ast.expr_break) {\n+            ret trans_break(cx);\n+        }\n+\n+        case (ast.expr_cont) {\n+            ret trans_cont(cx);\n+        }\n+\n         case (ast.expr_ret(?e)) {\n             ret trans_ret(cx, e);\n         }\n@@ -4770,6 +4786,47 @@ fn trans_put(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n     ret res(bcx, bcx.build.FastCall(llcallee, llargs));\n }\n \n+fn trans_break_cont(@block_ctxt cx, bool to_end) -> result {\n+    auto bcx = cx;\n+    // Locate closest loop block, outputting cleanup as we go.\n+    auto cleanup_cx = cx;\n+    while (true) {\n+        bcx = trans_block_cleanups(bcx, cleanup_cx);\n+        alt (cleanup_cx.kind) {\n+            case (LOOP_SCOPE_BLOCK(?_cont, ?_break)) {\n+                if (to_end) {\n+                    bcx.build.Br(_break.llbb);\n+                } else {\n+                    alt (_cont) {\n+                        case (option.some[@block_ctxt](?_cont)) {\n+                            bcx.build.Br(_cont.llbb);\n+                        }\n+                        case (_) {\n+                            bcx.build.Br(cleanup_cx.llbb);\n+                        }\n+                    }\n+                }\n+                ret res(new_sub_block_ctxt(cx, \"unreachable\"), C_nil());\n+            }\n+            case (_) {\n+                alt (cleanup_cx.parent) {\n+                    case (parent_some(?cx)) { cleanup_cx = cx; }\n+                }\n+            }\n+        }\n+    }\n+    ret res(cx, C_nil()); // Never reached. Won't compile otherwise.\n+}\n+\n+fn trans_break(@block_ctxt cx) -> result {\n+    ret trans_break_cont(cx, true);\n+}\n+\n+fn trans_cont(@block_ctxt cx) -> result {\n+    ret trans_break_cont(cx, false);\n+}\n+\n+\n fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n     auto bcx = cx;\n     auto val = C_nil();\n@@ -5033,6 +5090,12 @@ fn new_scope_block_ctxt(@block_ctxt bcx, str n) -> @block_ctxt {\n     ret new_block_ctxt(bcx.fcx, parent_some(bcx), SCOPE_BLOCK, n);\n }\n \n+fn new_loop_scope_block_ctxt(@block_ctxt bcx, option.t[@block_ctxt] _cont,\n+                             @block_ctxt _break, str n) -> @block_ctxt {\n+    ret new_block_ctxt(bcx.fcx, parent_some(bcx),\n+                       LOOP_SCOPE_BLOCK(_cont, _break), n);\n+}\n+\n // Use this when you're making a general CFG BB within a scope.\n fn new_sub_block_ctxt(@block_ctxt bcx, str n) -> @block_ctxt {\n     ret new_block_ctxt(bcx.fcx, parent_some(bcx), NON_SCOPE_BLOCK, n);\n@@ -5043,7 +5106,7 @@ fn trans_block_cleanups(@block_ctxt cx,\n                         @block_ctxt cleanup_cx) -> @block_ctxt {\n     auto bcx = cx;\n \n-    if (cleanup_cx.kind != SCOPE_BLOCK) {\n+    if (cleanup_cx.kind == NON_SCOPE_BLOCK) {\n         check (_vec.len[cleanup](cleanup_cx.cleanups) == 0u);\n     }\n "}, {"sha": "f7d9e564c11e09fa656ec7d5d650fb0c8a66e0d0", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6ecdc04788334420db05d9894e18d1d7a605ab4f", "patch": "@@ -1413,6 +1413,8 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n         }\n         case (ast.expr_fail) { e_1 = e.node; }\n         case (ast.expr_log(_)) { e_1 = e.node; }\n+        case (ast.expr_break) { e_1 = e.node; }\n+        case (ast.expr_cont) { e_1 = e.node; }\n         case (ast.expr_ret(_)) { e_1 = e.node; }\n         case (ast.expr_put(_)) { e_1 = e.node; }\n         case (ast.expr_be(_)) { e_1 = e.node; }\n@@ -1806,6 +1808,14 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             ret expr;\n         }\n \n+        case (ast.expr_break) {\n+            ret expr;\n+        }\n+\n+        case (ast.expr_cont) {\n+            ret expr;\n+        }\n+\n         case (ast.expr_ret(?expr_opt)) {\n             alt (expr_opt) {\n                 case (none[@ast.expr]) {"}, {"sha": "48c3b091f08b0233ce7570d3440a6b234bacd6c8", "filename": "src/test/run-pass/break.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecdc04788334420db05d9894e18d1d7a605ab4f/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=6ecdc04788334420db05d9894e18d1d7a605ab4f", "patch": "@@ -0,0 +1,40 @@\n+// xfail-boot\n+\n+fn main() {\n+  auto i = 0;\n+  while (i < 20) {\n+    i += 1;\n+    if (i == 10) { break; }\n+  }\n+  check(i == 10);\n+\n+  do {\n+    i += 1;\n+    if (i == 20) { break; }\n+  } while (i < 30);\n+  check(i == 20);\n+\n+  for (int x in vec(1, 2, 3, 4, 5, 6)) {\n+    if (x == 3) { break; }\n+    check(x <= 3);\n+  }\n+\n+  i = 0;\n+  while (i < 10) {\n+    i += 1;\n+    if (i % 2 == 0) { cont; }\n+    check(i % 2 != 0);\n+  }\n+\n+  i = 0;\n+  do {\n+    i += 1;\n+    if (i % 2 == 0) { cont; }\n+    check(i % 2 != 0);\n+  } while (i < 10);\n+\n+  for (int x in vec(1, 2, 3, 4, 5, 6)) {\n+    if (x % 2 == 0) { cont; }\n+    check(x % 2 != 0);\n+  }\n+}"}]}