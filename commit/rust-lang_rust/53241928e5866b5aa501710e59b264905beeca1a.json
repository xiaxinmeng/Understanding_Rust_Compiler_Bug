{"sha": "53241928e5866b5aa501710e59b264905beeca1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMjQxOTI4ZTU4NjZiNWFhNTAxNzEwZTU5YjI2NDkwNWJlZWNhMWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-19T09:37:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-19T09:37:03Z"}, "message": "Merge #1697\n\n1697: Use quote instead of tera for boilerplate generation r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2e1533cdefd25cda25f02711632ae8e206cc68f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1533cdefd25cda25f02711632ae8e206cc68f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53241928e5866b5aa501710e59b264905beeca1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdWm2/CRBK7hj4Ov3rIwAAdHIIACZ8wFa2BYo3PlBHDX4w5ToV\nbg9lceRwSPol6wuh/LyHHewx2HRh7I4tmhjlAQwfSi01zNJ2rBMMM5AFuAAyyvxD\nZR6V3QqwjDW044jNImvVwjS+4AfnkxntaoYP589yNDBQsZQbknb+/K4a8g9e1YAb\neg+oy2RMo/CxVjaAXmphsnIEwrcF+U3wWbaU1EnxL/dti77+Hts9PZrxwjrUO5Vc\nDiAQCRIU+pHsG+QaxDJDWc7Kmo8ww5tmRQF10UGleRUoNQah80pGDPB1Ers5xYAc\nhnycw7rZ4M2fuQnwijtvDKgzNMIbE7hD/ReszqBrvlzvMfhbk6CKD7IX3i3pZEc=\n=CTvo\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e1533cdefd25cda25f02711632ae8e206cc68f6\nparent 83413cc9ef73d578f2e42c21f7aa85ef296be8c0\nparent 038975b348b03dd3063d14cabd30fa71b010baea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1566207423 +0000\ncommitter GitHub <noreply@github.com> 1566207423 +0000\n\nMerge #1697\n\n1697: Use quote instead of tera for boilerplate generation r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53241928e5866b5aa501710e59b264905beeca1a", "html_url": "https://github.com/rust-lang/rust/commit/53241928e5866b5aa501710e59b264905beeca1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53241928e5866b5aa501710e59b264905beeca1a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83413cc9ef73d578f2e42c21f7aa85ef296be8c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/83413cc9ef73d578f2e42c21f7aa85ef296be8c0", "html_url": "https://github.com/rust-lang/rust/commit/83413cc9ef73d578f2e42c21f7aa85ef296be8c0"}, {"sha": "038975b348b03dd3063d14cabd30fa71b010baea", "url": "https://api.github.com/repos/rust-lang/rust/commits/038975b348b03dd3063d14cabd30fa71b010baea", "html_url": "https://github.com/rust-lang/rust/commit/038975b348b03dd3063d14cabd30fa71b010baea"}], "stats": {"total": 4547, "additions": 2427, "deletions": 2120}, "files": [{"sha": "4ef0134d7de523acae53abda14f8a519b0a8edb5", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 155, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=53241928e5866b5aa501710e59b264905beeca1a", "patch": "@@ -352,11 +352,6 @@ dependencies = [\n  \"syn 0.15.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"deunicode\"\n-version = \"0.4.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"difference\"\n version = \"2.0.0\"\n@@ -406,15 +401,6 @@ name = \"encode_unicode\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"error-chain\"\n-version = \"0.12.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"backtrace 0.3.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"failure\"\n version = \"0.1.5\"\n@@ -556,11 +542,6 @@ dependencies = [\n  \"wasi 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"glob\"\n-version = \"0.2.11\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"glob\"\n version = \"0.3.0\"\n@@ -586,21 +567,6 @@ dependencies = [\n  \"unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"humansize\"\n-version = \"1.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"idna\"\n-version = \"0.1.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-normalization 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"idna\"\n version = \"0.2.0\"\n@@ -1003,15 +969,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro-hack 0.5.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"percent-encoding\"\n-version = \"1.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"percent-encoding\"\n version = \"2.1.0\"\n@@ -1076,7 +1037,7 @@ version = \"0.5.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1128,7 +1089,7 @@ dependencies = [\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.1\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1362,8 +1323,12 @@ name = \"ra_tools\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"teraron 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ron 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1613,6 +1578,16 @@ dependencies = [\n  \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ron\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rowan\"\n version = \"0.6.2\"\n@@ -1717,7 +1692,7 @@ version = \"1.0.99\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1737,7 +1712,7 @@ version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1768,14 +1743,6 @@ name = \"slab\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"slug\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"deunicode 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"smallvec\"\n version = \"0.6.10\"\n@@ -1826,7 +1793,7 @@ version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1854,36 +1821,6 @@ dependencies = [\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"tera\"\n-version = \"0.11.20\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"chrono 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pest 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pest_derive 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unic-segment 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"teraron\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ron 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tera 0.11.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"termios\"\n version = \"0.3.1\"\n@@ -1958,50 +1895,6 @@ name = \"ucd-trie\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"unic-char-property\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unic-char-range 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"unic-char-range\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"unic-common\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"unic-segment\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unic-ucd-segment 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"unic-ucd-segment\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unic-char-property 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unic-char-range 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unic-ucd-version 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"unic-ucd-version\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unic-common 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"unicase\"\n version = \"2.4.0\"\n@@ -2046,16 +1939,6 @@ name = \"unicode-xid\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"url\"\n-version = \"1.7.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"url\"\n version = \"2.1.0\"\n@@ -2200,7 +2083,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum crossbeam-queue 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c979cd6cfe72335896575c6b5688da489e420d36a27a0b9eb0c73db574b4a4b\"\n \"checksum crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n \"checksum derive-new 0.5.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c3fd04571b29c91cfbe1e7c9a228e069ac8635f180ffb4ccd6a6907617ee8bb0\"\n-\"checksum deunicode 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"850878694b7933ca4c9569d30a34b55031b9b139ee1fc7b94a527c4ef960d690\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n \"checksum drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"69b26e475fd29098530e709294e94e661974c851aed42512793f120fed4e199f\"\n@@ -2209,7 +2091,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ena 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25b4e5febb25f08c49f1b07dc33a182729a6b21edfb562b5aef95f78e0dbe5bb\"\n \"checksum ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dc01d68e08ca384955a3aeba9217102ca1aa85b6e168639bf27739f1d749d87\"\n \"checksum encode_unicode 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b2c9496c001e8cb61827acdefad780795c42264c137744cae6f7d9e3450abd\"\n-\"checksum error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n \"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2\"\n \"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1\"\n \"checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n@@ -2227,12 +2108,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \"checksum generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n \"checksum getrandom 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2512b3191f22e2763a5db387f1c9409379772e2050841722eb4a8c4f497bf096\"\n-\"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n \"checksum glob 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\n \"checksum globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n \"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n-\"checksum humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e\"\n-\"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n \"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\n \"checksum indicatif 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2c60da1c9abea75996b70a931bba6c750730399005b61ccd853cee50ef3d0d0c\"\n@@ -2279,7 +2157,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum parking_lot_core 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b876b1b9e7ac6e1a74a6da34d25c42e17e8862aa409cbbbdcfc8d86c6f3bc62b\"\n \"checksum paste 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"423a519e1c6e828f1e73b720f9d9ed2fa643dce8a7737fb43235ce0b41eeaa49\"\n \"checksum paste-impl 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4214c9e912ef61bf42b81ba9a47e8aad1b2ffaf739ab162bf96d1e011f54e6c5\"\n-\"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \"checksum pest 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"933085deae3f32071f135d799d75667b63c8dc1f4537159756e3d4ceab41868c\"\n \"checksum pest_derive 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"833d1ae558dc601e9a60366421196a8d94bc0ac980476d0b67e1d0988d72b2d0\"\n@@ -2293,7 +2170,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum proptest 0.9.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf147e022eacf0c8a054ab864914a7602618adba841d800a9a9868a5237a529f\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\n-\"checksum quote 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49d77c41ca8767f2f41394c11a4eebccab83da25e7cc035387a3125f02be90a3\"\n+\"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n \"checksum ra_rustc_lexer 0.1.0-pre.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6baccda91574dfadd7f8a0bc8f9f110f874b6b484289b2536d3dbf4f0d5d97bb\"\n \"checksum ra_vfs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb7cd4e302032c5ab514f1c01c89727cd96fd950dd36f9ebee9252df45d9fb1a\"\n \"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n@@ -2320,6 +2197,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e7790c7f1cc73d831d28dc5a7deb316a006e7848e6a7f467cdb10a0a9e0fb1c\"\n \"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n \"checksum ron 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17f52a24414403f81528b67488cf8edc4eda977d3af1646bb6b106a600ead78f\"\n+\"checksum ron 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ece421e0c4129b90e4a35b6f625e472e96c552136f5093a2f4fa2bbb75a62d5\"\n \"checksum rowan 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc2b79612dedc9004083a61448eb669d336d56690aab29fbd7249e8c8ab41d8c\"\n \"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n@@ -2338,7 +2216,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38b08a9a90e5260fe01c6480ec7c811606df6d3a660415808c3c3fa8ed95b582\"\n \"checksum sha-1 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23962131a91661d643c98940b20fcaffe62d776a823247be80a48fcb8b6fce68\"\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n-\"checksum slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3bc762e6a4b6c6fcaade73e77f9ebc6991b676f88bb2358bddb56560f073373\"\n \"checksum smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n \"checksum smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"590700be3630457c56f8c73c0ea39881476ad7076cd84057d44f4f38f79914fb\"\n \"checksum stacker 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb79482f57cf598af52094ec4cc3b3c42499d3ce5bd426f2ac41515b7e57404b\"\n@@ -2348,8 +2225,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum syn 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ae5cd13590144ea968ba5d5520da7a4c08415861014399b5b349f74591c375f\"\n \"checksum synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\n \"checksum tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n-\"checksum tera 0.11.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b505279e19d8f7d24b1a9dc58327c9c36174b1a2c7ebdeac70792d017cb64f3\"\n-\"checksum teraron 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a447d012fef5c222f4b11a98fcef2a7e347a57f28be9957c5c390ac9a0e41e0\"\n \"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n \"checksum text_unit 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e08bbcb7a3adbda0eb23431206b653bdad3d8dea311e72d36bf2215e27a42579\"\n \"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n@@ -2358,20 +2233,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n \"checksum typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"612d636f949607bdf9b123b4a6f6d966dedf3ff669f7f045890d3a4a73948169\"\n \"checksum ucd-trie 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f00ed7be0c1ff1e24f46c3d2af4859f7e863672ba3a6e92e7cff702bf9f06c2\"\n-\"checksum unic-char-property 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce36d3f7ce754afdbccccf8ff0dd0134e50fb44aaae579f96218856e9e5dbd1e\"\n-\"checksum unic-char-range 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab85fab42ad1b26cafc03bf891f69cb4d6e15f491030e89a0122197baa8ae8\"\n-\"checksum unic-common 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff8d4a7ade929ef7d971e16ced21a8cd56a63869aa6032dfb8cb083cf7d077bf\"\n-\"checksum unic-segment 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c9ca47cbb09fb5fcd066b5867d11dc528302fa465277882797d6a836e1ee6f9e\"\n-\"checksum unic-ucd-segment 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48f1a08ce0409a9e391b88d1930118eec48af12742fc538bcec55f775865776e\"\n-\"checksum unic-ucd-version 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf1f5e6c6c53c2d0ece4a5964bc55fcff8602153063cb4fab20958ff32998ff6\"\n \"checksum unicase 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a84e5511b2a947f3ae965dcb29b13b7b1691b6e7332cf5dbc1744138d5acb7f6\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"141339a08b982d942be2ca06ff8b076563cbe223d1befd5450716790d44e2426\"\n \"checksum unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1967f4cdfc355b37fd76d2a954fb2ed3871034eb4f26d60537d88795cfc332a9\"\n \"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n-\"checksum url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a\"\n \"checksum url 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75b414f6c464c879d7f9babf951f23bc3743fb7313c081b2e6ca719067ea9d61\"\n \"checksum uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90dbc611eb48397705a6b0f6e917da23ae517e4d127123d2cf7674206627d32a\"\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\""}, {"sha": "415839cb5f4d65a182e4699036cdb1d6a07c13ae", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 534, "deletions": 449, "changes": 983, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=53241928e5866b5aa501710e59b264905beeca1a", "patch": "@@ -1,16 +1,11 @@\n-// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-syntax` is run\n-// Do not edit manually\n+// Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\n \n #![allow(bad_style, missing_docs, unreachable_pub)]\n-#![cfg_attr(rustfmt, rustfmt_skip)]\n use super::SyntaxInfo;\n-\n-/// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n+#[doc = r\" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\"]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[repr(u16)]\n pub enum SyntaxKind {\n-    // Technical SyntaxKinds: they appear temporally during parsing,\n-    // but never end up in the final tree\n     #[doc(hidden)]\n     TOMBSTONE,\n     #[doc(hidden)]\n@@ -242,477 +237,280 @@ pub enum SyntaxKind {\n     TYPE_BOUND_LIST,\n     MACRO_ITEMS,\n     MACRO_STMTS,\n-    // Technical kind so that we can cast from u16 safely\n     #[doc(hidden)]\n     __LAST,\n }\n use self::SyntaxKind::*;\n-\n-#[macro_export]\n-macro_rules! T {\n-    (;) => { $crate::SyntaxKind::SEMI };\n-    (,) => { $crate::SyntaxKind::COMMA };\n-    ('(') => { $crate::SyntaxKind::L_PAREN };\n-    (')') => { $crate::SyntaxKind::R_PAREN };\n-    ('{') => { $crate::SyntaxKind::L_CURLY };\n-    ('}') => { $crate::SyntaxKind::R_CURLY };\n-    ('[') => { $crate::SyntaxKind::L_BRACK };\n-    (']') => { $crate::SyntaxKind::R_BRACK };\n-    (<) => { $crate::SyntaxKind::L_ANGLE };\n-    (>) => { $crate::SyntaxKind::R_ANGLE };\n-    (@) => { $crate::SyntaxKind::AT };\n-    (#) => { $crate::SyntaxKind::POUND };\n-    (~) => { $crate::SyntaxKind::TILDE };\n-    (?) => { $crate::SyntaxKind::QUESTION };\n-    ($) => { $crate::SyntaxKind::DOLLAR };\n-    (&) => { $crate::SyntaxKind::AMP };\n-    (|) => { $crate::SyntaxKind::PIPE };\n-    (+) => { $crate::SyntaxKind::PLUS };\n-    (*) => { $crate::SyntaxKind::STAR };\n-    (/) => { $crate::SyntaxKind::SLASH };\n-    (^) => { $crate::SyntaxKind::CARET };\n-    (%) => { $crate::SyntaxKind::PERCENT };\n-    (_) => { $crate::SyntaxKind::UNDERSCORE };\n-    (.) => { $crate::SyntaxKind::DOT };\n-    (..) => { $crate::SyntaxKind::DOTDOT };\n-    (...) => { $crate::SyntaxKind::DOTDOTDOT };\n-    (..=) => { $crate::SyntaxKind::DOTDOTEQ };\n-    (:) => { $crate::SyntaxKind::COLON };\n-    (::) => { $crate::SyntaxKind::COLONCOLON };\n-    (=) => { $crate::SyntaxKind::EQ };\n-    (==) => { $crate::SyntaxKind::EQEQ };\n-    (=>) => { $crate::SyntaxKind::FAT_ARROW };\n-    (!) => { $crate::SyntaxKind::EXCL };\n-    (!=) => { $crate::SyntaxKind::NEQ };\n-    (-) => { $crate::SyntaxKind::MINUS };\n-    (->) => { $crate::SyntaxKind::THIN_ARROW };\n-    (<=) => { $crate::SyntaxKind::LTEQ };\n-    (>=) => { $crate::SyntaxKind::GTEQ };\n-    (+=) => { $crate::SyntaxKind::PLUSEQ };\n-    (-=) => { $crate::SyntaxKind::MINUSEQ };\n-    (|=) => { $crate::SyntaxKind::PIPEEQ };\n-    (&=) => { $crate::SyntaxKind::AMPEQ };\n-    (^=) => { $crate::SyntaxKind::CARETEQ };\n-    (/=) => { $crate::SyntaxKind::SLASHEQ };\n-    (*=) => { $crate::SyntaxKind::STAREQ };\n-    (%=) => { $crate::SyntaxKind::PERCENTEQ };\n-    (&&) => { $crate::SyntaxKind::AMPAMP };\n-    (||) => { $crate::SyntaxKind::PIPEPIPE };\n-    (<<) => { $crate::SyntaxKind::SHL };\n-    (>>) => { $crate::SyntaxKind::SHR };\n-    (<<=) => { $crate::SyntaxKind::SHLEQ };\n-    (>>=) => { $crate::SyntaxKind::SHREQ };\n-    (async) => { $crate::SyntaxKind::ASYNC_KW };\n-    (use) => { $crate::SyntaxKind::USE_KW };\n-    (fn) => { $crate::SyntaxKind::FN_KW };\n-    (struct) => { $crate::SyntaxKind::STRUCT_KW };\n-    (enum) => { $crate::SyntaxKind::ENUM_KW };\n-    (trait) => { $crate::SyntaxKind::TRAIT_KW };\n-    (impl) => { $crate::SyntaxKind::IMPL_KW };\n-    (dyn) => { $crate::SyntaxKind::DYN_KW };\n-    (true) => { $crate::SyntaxKind::TRUE_KW };\n-    (false) => { $crate::SyntaxKind::FALSE_KW };\n-    (as) => { $crate::SyntaxKind::AS_KW };\n-    (extern) => { $crate::SyntaxKind::EXTERN_KW };\n-    (crate) => { $crate::SyntaxKind::CRATE_KW };\n-    (mod) => { $crate::SyntaxKind::MOD_KW };\n-    (pub) => { $crate::SyntaxKind::PUB_KW };\n-    (self) => { $crate::SyntaxKind::SELF_KW };\n-    (super) => { $crate::SyntaxKind::SUPER_KW };\n-    (in) => { $crate::SyntaxKind::IN_KW };\n-    (where) => { $crate::SyntaxKind::WHERE_KW };\n-    (for) => { $crate::SyntaxKind::FOR_KW };\n-    (loop) => { $crate::SyntaxKind::LOOP_KW };\n-    (while) => { $crate::SyntaxKind::WHILE_KW };\n-    (continue) => { $crate::SyntaxKind::CONTINUE_KW };\n-    (break) => { $crate::SyntaxKind::BREAK_KW };\n-    (if) => { $crate::SyntaxKind::IF_KW };\n-    (else) => { $crate::SyntaxKind::ELSE_KW };\n-    (match) => { $crate::SyntaxKind::MATCH_KW };\n-    (const) => { $crate::SyntaxKind::CONST_KW };\n-    (static) => { $crate::SyntaxKind::STATIC_KW };\n-    (mut) => { $crate::SyntaxKind::MUT_KW };\n-    (unsafe) => { $crate::SyntaxKind::UNSAFE_KW };\n-    (type) => { $crate::SyntaxKind::TYPE_KW };\n-    (ref) => { $crate::SyntaxKind::REF_KW };\n-    (let) => { $crate::SyntaxKind::LET_KW };\n-    (move) => { $crate::SyntaxKind::MOVE_KW };\n-    (return) => { $crate::SyntaxKind::RETURN_KW };\n-    (try) => { $crate::SyntaxKind::TRY_KW };\n-    (box) => { $crate::SyntaxKind::BOX_KW };\n-    (await) => { $crate::SyntaxKind::AWAIT_KW };\n-    (auto) => { $crate::SyntaxKind::AUTO_KW };\n-    (default) => { $crate::SyntaxKind::DEFAULT_KW };\n-    (existential) => { $crate::SyntaxKind::EXISTENTIAL_KW };\n-    (union) => { $crate::SyntaxKind::UNION_KW };\n-}\n-\n impl From<u16> for SyntaxKind {\n     fn from(d: u16) -> SyntaxKind {\n         assert!(d <= (__LAST as u16));\n         unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n     }\n }\n-\n impl From<SyntaxKind> for u16 {\n     fn from(k: SyntaxKind) -> u16 {\n         k as u16\n     }\n }\n-\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n         match self {\n-            | ASYNC_KW\n-            | USE_KW\n-            | FN_KW\n-            | STRUCT_KW\n-            | ENUM_KW\n-            | TRAIT_KW\n-            | IMPL_KW\n-            | DYN_KW\n-            | TRUE_KW\n-            | FALSE_KW\n-            | AS_KW\n-            | EXTERN_KW\n-            | CRATE_KW\n-            | MOD_KW\n-            | PUB_KW\n-            | SELF_KW\n-            | SUPER_KW\n-            | IN_KW\n-            | WHERE_KW\n-            | FOR_KW\n-            | LOOP_KW\n-            | WHILE_KW\n-            | CONTINUE_KW\n-            | BREAK_KW\n-            | IF_KW\n-            | ELSE_KW\n-            | MATCH_KW\n-            | CONST_KW\n-            | STATIC_KW\n-            | MUT_KW\n-            | UNSAFE_KW\n-            | TYPE_KW\n-            | REF_KW\n-            | LET_KW\n-            | MOVE_KW\n-            | RETURN_KW\n-            | TRY_KW\n-            | BOX_KW\n-            | AWAIT_KW\n-            | AUTO_KW\n-            | DEFAULT_KW\n-            | EXISTENTIAL_KW\n-            | UNION_KW\n-                => true,\n-            _ => false\n+            ASYNC_KW | USE_KW | FN_KW | STRUCT_KW | ENUM_KW | TRAIT_KW | IMPL_KW | DYN_KW\n+            | TRUE_KW | FALSE_KW | AS_KW | EXTERN_KW | CRATE_KW | MOD_KW | PUB_KW | SELF_KW\n+            | SUPER_KW | IN_KW | WHERE_KW | FOR_KW | LOOP_KW | WHILE_KW | CONTINUE_KW\n+            | BREAK_KW | IF_KW | ELSE_KW | MATCH_KW | CONST_KW | STATIC_KW | MUT_KW | UNSAFE_KW\n+            | TYPE_KW | REF_KW | LET_KW | MOVE_KW | RETURN_KW | TRY_KW | BOX_KW | AWAIT_KW\n+            | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW => true,\n+            _ => false,\n         }\n     }\n-\n     pub fn is_punct(self) -> bool {\n         match self {\n-            | SEMI\n-            | COMMA\n-            | L_PAREN\n-            | R_PAREN\n-            | L_CURLY\n-            | R_CURLY\n-            | L_BRACK\n-            | R_BRACK\n-            | L_ANGLE\n-            | R_ANGLE\n-            | AT\n-            | POUND\n-            | TILDE\n-            | QUESTION\n-            | DOLLAR\n-            | AMP\n-            | PIPE\n-            | PLUS\n-            | STAR\n-            | SLASH\n-            | CARET\n-            | PERCENT\n-            | UNDERSCORE\n-            | DOT\n-            | DOTDOT\n-            | DOTDOTDOT\n-            | DOTDOTEQ\n-            | COLON\n-            | COLONCOLON\n-            | EQ\n-            | EQEQ\n-            | FAT_ARROW\n-            | EXCL\n-            | NEQ\n-            | MINUS\n-            | THIN_ARROW\n-            | LTEQ\n-            | GTEQ\n-            | PLUSEQ\n-            | MINUSEQ\n-            | PIPEEQ\n-            | AMPEQ\n-            | CARETEQ\n-            | SLASHEQ\n-            | STAREQ\n-            | PERCENTEQ\n-            | AMPAMP\n-            | PIPEPIPE\n-            | SHL\n-            | SHR\n-            | SHLEQ\n-            | SHREQ\n-                => true,\n-            _ => false\n+            SEMI | COMMA | L_PAREN | R_PAREN | L_CURLY | R_CURLY | L_BRACK | R_BRACK | L_ANGLE\n+            | R_ANGLE | AT | POUND | TILDE | QUESTION | DOLLAR | AMP | PIPE | PLUS | STAR\n+            | SLASH | CARET | PERCENT | UNDERSCORE | DOT | DOTDOT | DOTDOTDOT | DOTDOTEQ\n+            | COLON | COLONCOLON | EQ | EQEQ | FAT_ARROW | EXCL | NEQ | MINUS | THIN_ARROW\n+            | LTEQ | GTEQ | PLUSEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ | SLASHEQ | STAREQ\n+            | PERCENTEQ | AMPAMP | PIPEPIPE | SHL | SHR | SHLEQ | SHREQ => true,\n+            _ => false,\n         }\n     }\n     pub fn is_literal(self) -> bool {\n         match self {\n-            | INT_NUMBER\n-            | FLOAT_NUMBER\n-            | CHAR\n-            | BYTE\n-            | STRING\n-            | RAW_STRING\n-            | BYTE_STRING\n-            | RAW_BYTE_STRING\n-                => true,\n-            _ => false\n+            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | RAW_STRING | BYTE_STRING\n+            | RAW_BYTE_STRING => true,\n+            _ => false,\n         }\n     }\n-\n     pub(crate) fn info(self) -> &'static SyntaxInfo {\n         match self {\n-            SEMI => &SyntaxInfo { name: \"SEMI\" },\n-            COMMA => &SyntaxInfo { name: \"COMMA\" },\n-            L_PAREN => &SyntaxInfo { name: \"L_PAREN\" },\n-            R_PAREN => &SyntaxInfo { name: \"R_PAREN\" },\n-            L_CURLY => &SyntaxInfo { name: \"L_CURLY\" },\n-            R_CURLY => &SyntaxInfo { name: \"R_CURLY\" },\n-            L_BRACK => &SyntaxInfo { name: \"L_BRACK\" },\n-            R_BRACK => &SyntaxInfo { name: \"R_BRACK\" },\n-            L_ANGLE => &SyntaxInfo { name: \"L_ANGLE\" },\n-            R_ANGLE => &SyntaxInfo { name: \"R_ANGLE\" },\n-            AT => &SyntaxInfo { name: \"AT\" },\n-            POUND => &SyntaxInfo { name: \"POUND\" },\n-            TILDE => &SyntaxInfo { name: \"TILDE\" },\n-            QUESTION => &SyntaxInfo { name: \"QUESTION\" },\n-            DOLLAR => &SyntaxInfo { name: \"DOLLAR\" },\n-            AMP => &SyntaxInfo { name: \"AMP\" },\n-            PIPE => &SyntaxInfo { name: \"PIPE\" },\n-            PLUS => &SyntaxInfo { name: \"PLUS\" },\n-            STAR => &SyntaxInfo { name: \"STAR\" },\n-            SLASH => &SyntaxInfo { name: \"SLASH\" },\n-            CARET => &SyntaxInfo { name: \"CARET\" },\n-            PERCENT => &SyntaxInfo { name: \"PERCENT\" },\n-            UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n-            DOT => &SyntaxInfo { name: \"DOT\" },\n-            DOTDOT => &SyntaxInfo { name: \"DOTDOT\" },\n-            DOTDOTDOT => &SyntaxInfo { name: \"DOTDOTDOT\" },\n-            DOTDOTEQ => &SyntaxInfo { name: \"DOTDOTEQ\" },\n-            COLON => &SyntaxInfo { name: \"COLON\" },\n-            COLONCOLON => &SyntaxInfo { name: \"COLONCOLON\" },\n-            EQ => &SyntaxInfo { name: \"EQ\" },\n-            EQEQ => &SyntaxInfo { name: \"EQEQ\" },\n-            FAT_ARROW => &SyntaxInfo { name: \"FAT_ARROW\" },\n-            EXCL => &SyntaxInfo { name: \"EXCL\" },\n-            NEQ => &SyntaxInfo { name: \"NEQ\" },\n-            MINUS => &SyntaxInfo { name: \"MINUS\" },\n-            THIN_ARROW => &SyntaxInfo { name: \"THIN_ARROW\" },\n-            LTEQ => &SyntaxInfo { name: \"LTEQ\" },\n-            GTEQ => &SyntaxInfo { name: \"GTEQ\" },\n-            PLUSEQ => &SyntaxInfo { name: \"PLUSEQ\" },\n-            MINUSEQ => &SyntaxInfo { name: \"MINUSEQ\" },\n-            PIPEEQ => &SyntaxInfo { name: \"PIPEEQ\" },\n-            AMPEQ => &SyntaxInfo { name: \"AMPEQ\" },\n-            CARETEQ => &SyntaxInfo { name: \"CARETEQ\" },\n-            SLASHEQ => &SyntaxInfo { name: \"SLASHEQ\" },\n-            STAREQ => &SyntaxInfo { name: \"STAREQ\" },\n-            PERCENTEQ => &SyntaxInfo { name: \"PERCENTEQ\" },\n-            AMPAMP => &SyntaxInfo { name: \"AMPAMP\" },\n-            PIPEPIPE => &SyntaxInfo { name: \"PIPEPIPE\" },\n-            SHL => &SyntaxInfo { name: \"SHL\" },\n-            SHR => &SyntaxInfo { name: \"SHR\" },\n-            SHLEQ => &SyntaxInfo { name: \"SHLEQ\" },\n-            SHREQ => &SyntaxInfo { name: \"SHREQ\" },\n-            ASYNC_KW => &SyntaxInfo { name: \"ASYNC_KW\" },\n-            USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n-            FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n-            STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n-            ENUM_KW => &SyntaxInfo { name: \"ENUM_KW\" },\n-            TRAIT_KW => &SyntaxInfo { name: \"TRAIT_KW\" },\n-            IMPL_KW => &SyntaxInfo { name: \"IMPL_KW\" },\n-            DYN_KW => &SyntaxInfo { name: \"DYN_KW\" },\n-            TRUE_KW => &SyntaxInfo { name: \"TRUE_KW\" },\n-            FALSE_KW => &SyntaxInfo { name: \"FALSE_KW\" },\n-            AS_KW => &SyntaxInfo { name: \"AS_KW\" },\n-            EXTERN_KW => &SyntaxInfo { name: \"EXTERN_KW\" },\n-            CRATE_KW => &SyntaxInfo { name: \"CRATE_KW\" },\n-            MOD_KW => &SyntaxInfo { name: \"MOD_KW\" },\n-            PUB_KW => &SyntaxInfo { name: \"PUB_KW\" },\n-            SELF_KW => &SyntaxInfo { name: \"SELF_KW\" },\n-            SUPER_KW => &SyntaxInfo { name: \"SUPER_KW\" },\n-            IN_KW => &SyntaxInfo { name: \"IN_KW\" },\n-            WHERE_KW => &SyntaxInfo { name: \"WHERE_KW\" },\n-            FOR_KW => &SyntaxInfo { name: \"FOR_KW\" },\n-            LOOP_KW => &SyntaxInfo { name: \"LOOP_KW\" },\n-            WHILE_KW => &SyntaxInfo { name: \"WHILE_KW\" },\n-            CONTINUE_KW => &SyntaxInfo { name: \"CONTINUE_KW\" },\n-            BREAK_KW => &SyntaxInfo { name: \"BREAK_KW\" },\n-            IF_KW => &SyntaxInfo { name: \"IF_KW\" },\n-            ELSE_KW => &SyntaxInfo { name: \"ELSE_KW\" },\n-            MATCH_KW => &SyntaxInfo { name: \"MATCH_KW\" },\n-            CONST_KW => &SyntaxInfo { name: \"CONST_KW\" },\n-            STATIC_KW => &SyntaxInfo { name: \"STATIC_KW\" },\n-            MUT_KW => &SyntaxInfo { name: \"MUT_KW\" },\n-            UNSAFE_KW => &SyntaxInfo { name: \"UNSAFE_KW\" },\n-            TYPE_KW => &SyntaxInfo { name: \"TYPE_KW\" },\n-            REF_KW => &SyntaxInfo { name: \"REF_KW\" },\n-            LET_KW => &SyntaxInfo { name: \"LET_KW\" },\n-            MOVE_KW => &SyntaxInfo { name: \"MOVE_KW\" },\n-            RETURN_KW => &SyntaxInfo { name: \"RETURN_KW\" },\n-            TRY_KW => &SyntaxInfo { name: \"TRY_KW\" },\n-            BOX_KW => &SyntaxInfo { name: \"BOX_KW\" },\n-            AWAIT_KW => &SyntaxInfo { name: \"AWAIT_KW\" },\n-            AUTO_KW => &SyntaxInfo { name: \"AUTO_KW\" },\n-            DEFAULT_KW => &SyntaxInfo { name: \"DEFAULT_KW\" },\n-            EXISTENTIAL_KW => &SyntaxInfo { name: \"EXISTENTIAL_KW\" },\n-            UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n-            INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n-            FLOAT_NUMBER => &SyntaxInfo { name: \"FLOAT_NUMBER\" },\n-            CHAR => &SyntaxInfo { name: \"CHAR\" },\n-            BYTE => &SyntaxInfo { name: \"BYTE\" },\n-            STRING => &SyntaxInfo { name: \"STRING\" },\n-            RAW_STRING => &SyntaxInfo { name: \"RAW_STRING\" },\n-            BYTE_STRING => &SyntaxInfo { name: \"BYTE_STRING\" },\n-            RAW_BYTE_STRING => &SyntaxInfo { name: \"RAW_BYTE_STRING\" },\n-            ERROR => &SyntaxInfo { name: \"ERROR\" },\n-            IDENT => &SyntaxInfo { name: \"IDENT\" },\n-            WHITESPACE => &SyntaxInfo { name: \"WHITESPACE\" },\n-            LIFETIME => &SyntaxInfo { name: \"LIFETIME\" },\n-            COMMENT => &SyntaxInfo { name: \"COMMENT\" },\n-            SHEBANG => &SyntaxInfo { name: \"SHEBANG\" },\n-            L_DOLLAR => &SyntaxInfo { name: \"L_DOLLAR\" },\n-            R_DOLLAR => &SyntaxInfo { name: \"R_DOLLAR\" },\n-            SOURCE_FILE => &SyntaxInfo { name: \"SOURCE_FILE\" },\n-            STRUCT_DEF => &SyntaxInfo { name: \"STRUCT_DEF\" },\n-            ENUM_DEF => &SyntaxInfo { name: \"ENUM_DEF\" },\n-            FN_DEF => &SyntaxInfo { name: \"FN_DEF\" },\n-            RET_TYPE => &SyntaxInfo { name: \"RET_TYPE\" },\n-            EXTERN_CRATE_ITEM => &SyntaxInfo { name: \"EXTERN_CRATE_ITEM\" },\n-            MODULE => &SyntaxInfo { name: \"MODULE\" },\n-            USE_ITEM => &SyntaxInfo { name: \"USE_ITEM\" },\n-            STATIC_DEF => &SyntaxInfo { name: \"STATIC_DEF\" },\n-            CONST_DEF => &SyntaxInfo { name: \"CONST_DEF\" },\n-            TRAIT_DEF => &SyntaxInfo { name: \"TRAIT_DEF\" },\n-            IMPL_BLOCK => &SyntaxInfo { name: \"IMPL_BLOCK\" },\n-            TYPE_ALIAS_DEF => &SyntaxInfo { name: \"TYPE_ALIAS_DEF\" },\n-            MACRO_CALL => &SyntaxInfo { name: \"MACRO_CALL\" },\n-            TOKEN_TREE => &SyntaxInfo { name: \"TOKEN_TREE\" },\n-            PAREN_TYPE => &SyntaxInfo { name: \"PAREN_TYPE\" },\n-            TUPLE_TYPE => &SyntaxInfo { name: \"TUPLE_TYPE\" },\n-            NEVER_TYPE => &SyntaxInfo { name: \"NEVER_TYPE\" },\n-            PATH_TYPE => &SyntaxInfo { name: \"PATH_TYPE\" },\n-            POINTER_TYPE => &SyntaxInfo { name: \"POINTER_TYPE\" },\n-            ARRAY_TYPE => &SyntaxInfo { name: \"ARRAY_TYPE\" },\n-            SLICE_TYPE => &SyntaxInfo { name: \"SLICE_TYPE\" },\n-            REFERENCE_TYPE => &SyntaxInfo { name: \"REFERENCE_TYPE\" },\n-            PLACEHOLDER_TYPE => &SyntaxInfo { name: \"PLACEHOLDER_TYPE\" },\n-            FN_POINTER_TYPE => &SyntaxInfo { name: \"FN_POINTER_TYPE\" },\n-            FOR_TYPE => &SyntaxInfo { name: \"FOR_TYPE\" },\n-            IMPL_TRAIT_TYPE => &SyntaxInfo { name: \"IMPL_TRAIT_TYPE\" },\n-            DYN_TRAIT_TYPE => &SyntaxInfo { name: \"DYN_TRAIT_TYPE\" },\n-            REF_PAT => &SyntaxInfo { name: \"REF_PAT\" },\n-            BIND_PAT => &SyntaxInfo { name: \"BIND_PAT\" },\n-            PLACEHOLDER_PAT => &SyntaxInfo { name: \"PLACEHOLDER_PAT\" },\n-            PATH_PAT => &SyntaxInfo { name: \"PATH_PAT\" },\n-            STRUCT_PAT => &SyntaxInfo { name: \"STRUCT_PAT\" },\n-            FIELD_PAT_LIST => &SyntaxInfo { name: \"FIELD_PAT_LIST\" },\n-            FIELD_PAT => &SyntaxInfo { name: \"FIELD_PAT\" },\n-            TUPLE_STRUCT_PAT => &SyntaxInfo { name: \"TUPLE_STRUCT_PAT\" },\n-            TUPLE_PAT => &SyntaxInfo { name: \"TUPLE_PAT\" },\n-            SLICE_PAT => &SyntaxInfo { name: \"SLICE_PAT\" },\n-            RANGE_PAT => &SyntaxInfo { name: \"RANGE_PAT\" },\n-            LITERAL_PAT => &SyntaxInfo { name: \"LITERAL_PAT\" },\n-            TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n-            ARRAY_EXPR => &SyntaxInfo { name: \"ARRAY_EXPR\" },\n-            PAREN_EXPR => &SyntaxInfo { name: \"PAREN_EXPR\" },\n-            PATH_EXPR => &SyntaxInfo { name: \"PATH_EXPR\" },\n-            LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n-            IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n-            WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n-            CONDITION => &SyntaxInfo { name: \"CONDITION\" },\n-            LOOP_EXPR => &SyntaxInfo { name: \"LOOP_EXPR\" },\n-            FOR_EXPR => &SyntaxInfo { name: \"FOR_EXPR\" },\n-            CONTINUE_EXPR => &SyntaxInfo { name: \"CONTINUE_EXPR\" },\n-            BREAK_EXPR => &SyntaxInfo { name: \"BREAK_EXPR\" },\n-            LABEL => &SyntaxInfo { name: \"LABEL\" },\n-            BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n-            RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n-            MATCH_EXPR => &SyntaxInfo { name: \"MATCH_EXPR\" },\n-            MATCH_ARM_LIST => &SyntaxInfo { name: \"MATCH_ARM_LIST\" },\n-            MATCH_ARM => &SyntaxInfo { name: \"MATCH_ARM\" },\n-            MATCH_GUARD => &SyntaxInfo { name: \"MATCH_GUARD\" },\n-            STRUCT_LIT => &SyntaxInfo { name: \"STRUCT_LIT\" },\n-            NAMED_FIELD_LIST => &SyntaxInfo { name: \"NAMED_FIELD_LIST\" },\n-            NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },\n-            TRY_BLOCK_EXPR => &SyntaxInfo { name: \"TRY_BLOCK_EXPR\" },\n-            BOX_EXPR => &SyntaxInfo { name: \"BOX_EXPR\" },\n-            CALL_EXPR => &SyntaxInfo { name: \"CALL_EXPR\" },\n-            INDEX_EXPR => &SyntaxInfo { name: \"INDEX_EXPR\" },\n-            METHOD_CALL_EXPR => &SyntaxInfo { name: \"METHOD_CALL_EXPR\" },\n-            FIELD_EXPR => &SyntaxInfo { name: \"FIELD_EXPR\" },\n-            AWAIT_EXPR => &SyntaxInfo { name: \"AWAIT_EXPR\" },\n-            TRY_EXPR => &SyntaxInfo { name: \"TRY_EXPR\" },\n-            CAST_EXPR => &SyntaxInfo { name: \"CAST_EXPR\" },\n-            REF_EXPR => &SyntaxInfo { name: \"REF_EXPR\" },\n-            PREFIX_EXPR => &SyntaxInfo { name: \"PREFIX_EXPR\" },\n-            RANGE_EXPR => &SyntaxInfo { name: \"RANGE_EXPR\" },\n-            BIN_EXPR => &SyntaxInfo { name: \"BIN_EXPR\" },\n-            BLOCK => &SyntaxInfo { name: \"BLOCK\" },\n-            EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n-            EXTERN_ITEM_LIST => &SyntaxInfo { name: \"EXTERN_ITEM_LIST\" },\n-            ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n-            NAMED_FIELD_DEF_LIST => &SyntaxInfo { name: \"NAMED_FIELD_DEF_LIST\" },\n-            NAMED_FIELD_DEF => &SyntaxInfo { name: \"NAMED_FIELD_DEF\" },\n-            POS_FIELD_DEF_LIST => &SyntaxInfo { name: \"POS_FIELD_DEF_LIST\" },\n-            POS_FIELD_DEF => &SyntaxInfo { name: \"POS_FIELD_DEF\" },\n-            ENUM_VARIANT_LIST => &SyntaxInfo { name: \"ENUM_VARIANT_LIST\" },\n-            ITEM_LIST => &SyntaxInfo { name: \"ITEM_LIST\" },\n-            ATTR => &SyntaxInfo { name: \"ATTR\" },\n-            META_ITEM => &SyntaxInfo { name: \"META_ITEM\" },\n-            USE_TREE => &SyntaxInfo { name: \"USE_TREE\" },\n-            USE_TREE_LIST => &SyntaxInfo { name: \"USE_TREE_LIST\" },\n-            PATH => &SyntaxInfo { name: \"PATH\" },\n-            PATH_SEGMENT => &SyntaxInfo { name: \"PATH_SEGMENT\" },\n-            LITERAL => &SyntaxInfo { name: \"LITERAL\" },\n-            ALIAS => &SyntaxInfo { name: \"ALIAS\" },\n-            VISIBILITY => &SyntaxInfo { name: \"VISIBILITY\" },\n-            WHERE_CLAUSE => &SyntaxInfo { name: \"WHERE_CLAUSE\" },\n-            WHERE_PRED => &SyntaxInfo { name: \"WHERE_PRED\" },\n-            ABI => &SyntaxInfo { name: \"ABI\" },\n-            NAME => &SyntaxInfo { name: \"NAME\" },\n-            NAME_REF => &SyntaxInfo { name: \"NAME_REF\" },\n-            LET_STMT => &SyntaxInfo { name: \"LET_STMT\" },\n-            EXPR_STMT => &SyntaxInfo { name: \"EXPR_STMT\" },\n-            TYPE_PARAM_LIST => &SyntaxInfo { name: \"TYPE_PARAM_LIST\" },\n-            LIFETIME_PARAM => &SyntaxInfo { name: \"LIFETIME_PARAM\" },\n-            TYPE_PARAM => &SyntaxInfo { name: \"TYPE_PARAM\" },\n-            TYPE_ARG_LIST => &SyntaxInfo { name: \"TYPE_ARG_LIST\" },\n-            LIFETIME_ARG => &SyntaxInfo { name: \"LIFETIME_ARG\" },\n-            TYPE_ARG => &SyntaxInfo { name: \"TYPE_ARG\" },\n-            ASSOC_TYPE_ARG => &SyntaxInfo { name: \"ASSOC_TYPE_ARG\" },\n-            PARAM_LIST => &SyntaxInfo { name: \"PARAM_LIST\" },\n-            PARAM => &SyntaxInfo { name: \"PARAM\" },\n-            SELF_PARAM => &SyntaxInfo { name: \"SELF_PARAM\" },\n-            ARG_LIST => &SyntaxInfo { name: \"ARG_LIST\" },\n-            TYPE_BOUND => &SyntaxInfo { name: \"TYPE_BOUND\" },\n-            TYPE_BOUND_LIST => &SyntaxInfo { name: \"TYPE_BOUND_LIST\" },\n-            MACRO_ITEMS => &SyntaxInfo { name: \"MACRO_ITEMS\" },\n-            MACRO_STMTS => &SyntaxInfo { name: \"MACRO_STMTS\" },\n+            SEMI => &SyntaxInfo { name: stringify!(SEMI) },\n+            COMMA => &SyntaxInfo { name: stringify!(COMMA) },\n+            L_PAREN => &SyntaxInfo { name: stringify!(L_PAREN) },\n+            R_PAREN => &SyntaxInfo { name: stringify!(R_PAREN) },\n+            L_CURLY => &SyntaxInfo { name: stringify!(L_CURLY) },\n+            R_CURLY => &SyntaxInfo { name: stringify!(R_CURLY) },\n+            L_BRACK => &SyntaxInfo { name: stringify!(L_BRACK) },\n+            R_BRACK => &SyntaxInfo { name: stringify!(R_BRACK) },\n+            L_ANGLE => &SyntaxInfo { name: stringify!(L_ANGLE) },\n+            R_ANGLE => &SyntaxInfo { name: stringify!(R_ANGLE) },\n+            AT => &SyntaxInfo { name: stringify!(AT) },\n+            POUND => &SyntaxInfo { name: stringify!(POUND) },\n+            TILDE => &SyntaxInfo { name: stringify!(TILDE) },\n+            QUESTION => &SyntaxInfo { name: stringify!(QUESTION) },\n+            DOLLAR => &SyntaxInfo { name: stringify!(DOLLAR) },\n+            AMP => &SyntaxInfo { name: stringify!(AMP) },\n+            PIPE => &SyntaxInfo { name: stringify!(PIPE) },\n+            PLUS => &SyntaxInfo { name: stringify!(PLUS) },\n+            STAR => &SyntaxInfo { name: stringify!(STAR) },\n+            SLASH => &SyntaxInfo { name: stringify!(SLASH) },\n+            CARET => &SyntaxInfo { name: stringify!(CARET) },\n+            PERCENT => &SyntaxInfo { name: stringify!(PERCENT) },\n+            UNDERSCORE => &SyntaxInfo { name: stringify!(UNDERSCORE) },\n+            DOT => &SyntaxInfo { name: stringify!(DOT) },\n+            DOTDOT => &SyntaxInfo { name: stringify!(DOTDOT) },\n+            DOTDOTDOT => &SyntaxInfo { name: stringify!(DOTDOTDOT) },\n+            DOTDOTEQ => &SyntaxInfo { name: stringify!(DOTDOTEQ) },\n+            COLON => &SyntaxInfo { name: stringify!(COLON) },\n+            COLONCOLON => &SyntaxInfo { name: stringify!(COLONCOLON) },\n+            EQ => &SyntaxInfo { name: stringify!(EQ) },\n+            EQEQ => &SyntaxInfo { name: stringify!(EQEQ) },\n+            FAT_ARROW => &SyntaxInfo { name: stringify!(FAT_ARROW) },\n+            EXCL => &SyntaxInfo { name: stringify!(EXCL) },\n+            NEQ => &SyntaxInfo { name: stringify!(NEQ) },\n+            MINUS => &SyntaxInfo { name: stringify!(MINUS) },\n+            THIN_ARROW => &SyntaxInfo { name: stringify!(THIN_ARROW) },\n+            LTEQ => &SyntaxInfo { name: stringify!(LTEQ) },\n+            GTEQ => &SyntaxInfo { name: stringify!(GTEQ) },\n+            PLUSEQ => &SyntaxInfo { name: stringify!(PLUSEQ) },\n+            MINUSEQ => &SyntaxInfo { name: stringify!(MINUSEQ) },\n+            PIPEEQ => &SyntaxInfo { name: stringify!(PIPEEQ) },\n+            AMPEQ => &SyntaxInfo { name: stringify!(AMPEQ) },\n+            CARETEQ => &SyntaxInfo { name: stringify!(CARETEQ) },\n+            SLASHEQ => &SyntaxInfo { name: stringify!(SLASHEQ) },\n+            STAREQ => &SyntaxInfo { name: stringify!(STAREQ) },\n+            PERCENTEQ => &SyntaxInfo { name: stringify!(PERCENTEQ) },\n+            AMPAMP => &SyntaxInfo { name: stringify!(AMPAMP) },\n+            PIPEPIPE => &SyntaxInfo { name: stringify!(PIPEPIPE) },\n+            SHL => &SyntaxInfo { name: stringify!(SHL) },\n+            SHR => &SyntaxInfo { name: stringify!(SHR) },\n+            SHLEQ => &SyntaxInfo { name: stringify!(SHLEQ) },\n+            SHREQ => &SyntaxInfo { name: stringify!(SHREQ) },\n+            ASYNC_KW => &SyntaxInfo { name: stringify!(ASYNC_KW) },\n+            USE_KW => &SyntaxInfo { name: stringify!(USE_KW) },\n+            FN_KW => &SyntaxInfo { name: stringify!(FN_KW) },\n+            STRUCT_KW => &SyntaxInfo { name: stringify!(STRUCT_KW) },\n+            ENUM_KW => &SyntaxInfo { name: stringify!(ENUM_KW) },\n+            TRAIT_KW => &SyntaxInfo { name: stringify!(TRAIT_KW) },\n+            IMPL_KW => &SyntaxInfo { name: stringify!(IMPL_KW) },\n+            DYN_KW => &SyntaxInfo { name: stringify!(DYN_KW) },\n+            TRUE_KW => &SyntaxInfo { name: stringify!(TRUE_KW) },\n+            FALSE_KW => &SyntaxInfo { name: stringify!(FALSE_KW) },\n+            AS_KW => &SyntaxInfo { name: stringify!(AS_KW) },\n+            EXTERN_KW => &SyntaxInfo { name: stringify!(EXTERN_KW) },\n+            CRATE_KW => &SyntaxInfo { name: stringify!(CRATE_KW) },\n+            MOD_KW => &SyntaxInfo { name: stringify!(MOD_KW) },\n+            PUB_KW => &SyntaxInfo { name: stringify!(PUB_KW) },\n+            SELF_KW => &SyntaxInfo { name: stringify!(SELF_KW) },\n+            SUPER_KW => &SyntaxInfo { name: stringify!(SUPER_KW) },\n+            IN_KW => &SyntaxInfo { name: stringify!(IN_KW) },\n+            WHERE_KW => &SyntaxInfo { name: stringify!(WHERE_KW) },\n+            FOR_KW => &SyntaxInfo { name: stringify!(FOR_KW) },\n+            LOOP_KW => &SyntaxInfo { name: stringify!(LOOP_KW) },\n+            WHILE_KW => &SyntaxInfo { name: stringify!(WHILE_KW) },\n+            CONTINUE_KW => &SyntaxInfo { name: stringify!(CONTINUE_KW) },\n+            BREAK_KW => &SyntaxInfo { name: stringify!(BREAK_KW) },\n+            IF_KW => &SyntaxInfo { name: stringify!(IF_KW) },\n+            ELSE_KW => &SyntaxInfo { name: stringify!(ELSE_KW) },\n+            MATCH_KW => &SyntaxInfo { name: stringify!(MATCH_KW) },\n+            CONST_KW => &SyntaxInfo { name: stringify!(CONST_KW) },\n+            STATIC_KW => &SyntaxInfo { name: stringify!(STATIC_KW) },\n+            MUT_KW => &SyntaxInfo { name: stringify!(MUT_KW) },\n+            UNSAFE_KW => &SyntaxInfo { name: stringify!(UNSAFE_KW) },\n+            TYPE_KW => &SyntaxInfo { name: stringify!(TYPE_KW) },\n+            REF_KW => &SyntaxInfo { name: stringify!(REF_KW) },\n+            LET_KW => &SyntaxInfo { name: stringify!(LET_KW) },\n+            MOVE_KW => &SyntaxInfo { name: stringify!(MOVE_KW) },\n+            RETURN_KW => &SyntaxInfo { name: stringify!(RETURN_KW) },\n+            TRY_KW => &SyntaxInfo { name: stringify!(TRY_KW) },\n+            BOX_KW => &SyntaxInfo { name: stringify!(BOX_KW) },\n+            AWAIT_KW => &SyntaxInfo { name: stringify!(AWAIT_KW) },\n+            AUTO_KW => &SyntaxInfo { name: stringify!(AUTO_KW) },\n+            DEFAULT_KW => &SyntaxInfo { name: stringify!(DEFAULT_KW) },\n+            EXISTENTIAL_KW => &SyntaxInfo { name: stringify!(EXISTENTIAL_KW) },\n+            UNION_KW => &SyntaxInfo { name: stringify!(UNION_KW) },\n+            INT_NUMBER => &SyntaxInfo { name: stringify!(INT_NUMBER) },\n+            FLOAT_NUMBER => &SyntaxInfo { name: stringify!(FLOAT_NUMBER) },\n+            CHAR => &SyntaxInfo { name: stringify!(CHAR) },\n+            BYTE => &SyntaxInfo { name: stringify!(BYTE) },\n+            STRING => &SyntaxInfo { name: stringify!(STRING) },\n+            RAW_STRING => &SyntaxInfo { name: stringify!(RAW_STRING) },\n+            BYTE_STRING => &SyntaxInfo { name: stringify!(BYTE_STRING) },\n+            RAW_BYTE_STRING => &SyntaxInfo { name: stringify!(RAW_BYTE_STRING) },\n+            ERROR => &SyntaxInfo { name: stringify!(ERROR) },\n+            IDENT => &SyntaxInfo { name: stringify!(IDENT) },\n+            WHITESPACE => &SyntaxInfo { name: stringify!(WHITESPACE) },\n+            LIFETIME => &SyntaxInfo { name: stringify!(LIFETIME) },\n+            COMMENT => &SyntaxInfo { name: stringify!(COMMENT) },\n+            SHEBANG => &SyntaxInfo { name: stringify!(SHEBANG) },\n+            L_DOLLAR => &SyntaxInfo { name: stringify!(L_DOLLAR) },\n+            R_DOLLAR => &SyntaxInfo { name: stringify!(R_DOLLAR) },\n+            SOURCE_FILE => &SyntaxInfo { name: stringify!(SOURCE_FILE) },\n+            STRUCT_DEF => &SyntaxInfo { name: stringify!(STRUCT_DEF) },\n+            ENUM_DEF => &SyntaxInfo { name: stringify!(ENUM_DEF) },\n+            FN_DEF => &SyntaxInfo { name: stringify!(FN_DEF) },\n+            RET_TYPE => &SyntaxInfo { name: stringify!(RET_TYPE) },\n+            EXTERN_CRATE_ITEM => &SyntaxInfo { name: stringify!(EXTERN_CRATE_ITEM) },\n+            MODULE => &SyntaxInfo { name: stringify!(MODULE) },\n+            USE_ITEM => &SyntaxInfo { name: stringify!(USE_ITEM) },\n+            STATIC_DEF => &SyntaxInfo { name: stringify!(STATIC_DEF) },\n+            CONST_DEF => &SyntaxInfo { name: stringify!(CONST_DEF) },\n+            TRAIT_DEF => &SyntaxInfo { name: stringify!(TRAIT_DEF) },\n+            IMPL_BLOCK => &SyntaxInfo { name: stringify!(IMPL_BLOCK) },\n+            TYPE_ALIAS_DEF => &SyntaxInfo { name: stringify!(TYPE_ALIAS_DEF) },\n+            MACRO_CALL => &SyntaxInfo { name: stringify!(MACRO_CALL) },\n+            TOKEN_TREE => &SyntaxInfo { name: stringify!(TOKEN_TREE) },\n+            PAREN_TYPE => &SyntaxInfo { name: stringify!(PAREN_TYPE) },\n+            TUPLE_TYPE => &SyntaxInfo { name: stringify!(TUPLE_TYPE) },\n+            NEVER_TYPE => &SyntaxInfo { name: stringify!(NEVER_TYPE) },\n+            PATH_TYPE => &SyntaxInfo { name: stringify!(PATH_TYPE) },\n+            POINTER_TYPE => &SyntaxInfo { name: stringify!(POINTER_TYPE) },\n+            ARRAY_TYPE => &SyntaxInfo { name: stringify!(ARRAY_TYPE) },\n+            SLICE_TYPE => &SyntaxInfo { name: stringify!(SLICE_TYPE) },\n+            REFERENCE_TYPE => &SyntaxInfo { name: stringify!(REFERENCE_TYPE) },\n+            PLACEHOLDER_TYPE => &SyntaxInfo { name: stringify!(PLACEHOLDER_TYPE) },\n+            FN_POINTER_TYPE => &SyntaxInfo { name: stringify!(FN_POINTER_TYPE) },\n+            FOR_TYPE => &SyntaxInfo { name: stringify!(FOR_TYPE) },\n+            IMPL_TRAIT_TYPE => &SyntaxInfo { name: stringify!(IMPL_TRAIT_TYPE) },\n+            DYN_TRAIT_TYPE => &SyntaxInfo { name: stringify!(DYN_TRAIT_TYPE) },\n+            REF_PAT => &SyntaxInfo { name: stringify!(REF_PAT) },\n+            BIND_PAT => &SyntaxInfo { name: stringify!(BIND_PAT) },\n+            PLACEHOLDER_PAT => &SyntaxInfo { name: stringify!(PLACEHOLDER_PAT) },\n+            PATH_PAT => &SyntaxInfo { name: stringify!(PATH_PAT) },\n+            STRUCT_PAT => &SyntaxInfo { name: stringify!(STRUCT_PAT) },\n+            FIELD_PAT_LIST => &SyntaxInfo { name: stringify!(FIELD_PAT_LIST) },\n+            FIELD_PAT => &SyntaxInfo { name: stringify!(FIELD_PAT) },\n+            TUPLE_STRUCT_PAT => &SyntaxInfo { name: stringify!(TUPLE_STRUCT_PAT) },\n+            TUPLE_PAT => &SyntaxInfo { name: stringify!(TUPLE_PAT) },\n+            SLICE_PAT => &SyntaxInfo { name: stringify!(SLICE_PAT) },\n+            RANGE_PAT => &SyntaxInfo { name: stringify!(RANGE_PAT) },\n+            LITERAL_PAT => &SyntaxInfo { name: stringify!(LITERAL_PAT) },\n+            TUPLE_EXPR => &SyntaxInfo { name: stringify!(TUPLE_EXPR) },\n+            ARRAY_EXPR => &SyntaxInfo { name: stringify!(ARRAY_EXPR) },\n+            PAREN_EXPR => &SyntaxInfo { name: stringify!(PAREN_EXPR) },\n+            PATH_EXPR => &SyntaxInfo { name: stringify!(PATH_EXPR) },\n+            LAMBDA_EXPR => &SyntaxInfo { name: stringify!(LAMBDA_EXPR) },\n+            IF_EXPR => &SyntaxInfo { name: stringify!(IF_EXPR) },\n+            WHILE_EXPR => &SyntaxInfo { name: stringify!(WHILE_EXPR) },\n+            CONDITION => &SyntaxInfo { name: stringify!(CONDITION) },\n+            LOOP_EXPR => &SyntaxInfo { name: stringify!(LOOP_EXPR) },\n+            FOR_EXPR => &SyntaxInfo { name: stringify!(FOR_EXPR) },\n+            CONTINUE_EXPR => &SyntaxInfo { name: stringify!(CONTINUE_EXPR) },\n+            BREAK_EXPR => &SyntaxInfo { name: stringify!(BREAK_EXPR) },\n+            LABEL => &SyntaxInfo { name: stringify!(LABEL) },\n+            BLOCK_EXPR => &SyntaxInfo { name: stringify!(BLOCK_EXPR) },\n+            RETURN_EXPR => &SyntaxInfo { name: stringify!(RETURN_EXPR) },\n+            MATCH_EXPR => &SyntaxInfo { name: stringify!(MATCH_EXPR) },\n+            MATCH_ARM_LIST => &SyntaxInfo { name: stringify!(MATCH_ARM_LIST) },\n+            MATCH_ARM => &SyntaxInfo { name: stringify!(MATCH_ARM) },\n+            MATCH_GUARD => &SyntaxInfo { name: stringify!(MATCH_GUARD) },\n+            STRUCT_LIT => &SyntaxInfo { name: stringify!(STRUCT_LIT) },\n+            NAMED_FIELD_LIST => &SyntaxInfo { name: stringify!(NAMED_FIELD_LIST) },\n+            NAMED_FIELD => &SyntaxInfo { name: stringify!(NAMED_FIELD) },\n+            TRY_BLOCK_EXPR => &SyntaxInfo { name: stringify!(TRY_BLOCK_EXPR) },\n+            BOX_EXPR => &SyntaxInfo { name: stringify!(BOX_EXPR) },\n+            CALL_EXPR => &SyntaxInfo { name: stringify!(CALL_EXPR) },\n+            INDEX_EXPR => &SyntaxInfo { name: stringify!(INDEX_EXPR) },\n+            METHOD_CALL_EXPR => &SyntaxInfo { name: stringify!(METHOD_CALL_EXPR) },\n+            FIELD_EXPR => &SyntaxInfo { name: stringify!(FIELD_EXPR) },\n+            AWAIT_EXPR => &SyntaxInfo { name: stringify!(AWAIT_EXPR) },\n+            TRY_EXPR => &SyntaxInfo { name: stringify!(TRY_EXPR) },\n+            CAST_EXPR => &SyntaxInfo { name: stringify!(CAST_EXPR) },\n+            REF_EXPR => &SyntaxInfo { name: stringify!(REF_EXPR) },\n+            PREFIX_EXPR => &SyntaxInfo { name: stringify!(PREFIX_EXPR) },\n+            RANGE_EXPR => &SyntaxInfo { name: stringify!(RANGE_EXPR) },\n+            BIN_EXPR => &SyntaxInfo { name: stringify!(BIN_EXPR) },\n+            BLOCK => &SyntaxInfo { name: stringify!(BLOCK) },\n+            EXTERN_BLOCK => &SyntaxInfo { name: stringify!(EXTERN_BLOCK) },\n+            EXTERN_ITEM_LIST => &SyntaxInfo { name: stringify!(EXTERN_ITEM_LIST) },\n+            ENUM_VARIANT => &SyntaxInfo { name: stringify!(ENUM_VARIANT) },\n+            NAMED_FIELD_DEF_LIST => &SyntaxInfo { name: stringify!(NAMED_FIELD_DEF_LIST) },\n+            NAMED_FIELD_DEF => &SyntaxInfo { name: stringify!(NAMED_FIELD_DEF) },\n+            POS_FIELD_DEF_LIST => &SyntaxInfo { name: stringify!(POS_FIELD_DEF_LIST) },\n+            POS_FIELD_DEF => &SyntaxInfo { name: stringify!(POS_FIELD_DEF) },\n+            ENUM_VARIANT_LIST => &SyntaxInfo { name: stringify!(ENUM_VARIANT_LIST) },\n+            ITEM_LIST => &SyntaxInfo { name: stringify!(ITEM_LIST) },\n+            ATTR => &SyntaxInfo { name: stringify!(ATTR) },\n+            META_ITEM => &SyntaxInfo { name: stringify!(META_ITEM) },\n+            USE_TREE => &SyntaxInfo { name: stringify!(USE_TREE) },\n+            USE_TREE_LIST => &SyntaxInfo { name: stringify!(USE_TREE_LIST) },\n+            PATH => &SyntaxInfo { name: stringify!(PATH) },\n+            PATH_SEGMENT => &SyntaxInfo { name: stringify!(PATH_SEGMENT) },\n+            LITERAL => &SyntaxInfo { name: stringify!(LITERAL) },\n+            ALIAS => &SyntaxInfo { name: stringify!(ALIAS) },\n+            VISIBILITY => &SyntaxInfo { name: stringify!(VISIBILITY) },\n+            WHERE_CLAUSE => &SyntaxInfo { name: stringify!(WHERE_CLAUSE) },\n+            WHERE_PRED => &SyntaxInfo { name: stringify!(WHERE_PRED) },\n+            ABI => &SyntaxInfo { name: stringify!(ABI) },\n+            NAME => &SyntaxInfo { name: stringify!(NAME) },\n+            NAME_REF => &SyntaxInfo { name: stringify!(NAME_REF) },\n+            LET_STMT => &SyntaxInfo { name: stringify!(LET_STMT) },\n+            EXPR_STMT => &SyntaxInfo { name: stringify!(EXPR_STMT) },\n+            TYPE_PARAM_LIST => &SyntaxInfo { name: stringify!(TYPE_PARAM_LIST) },\n+            LIFETIME_PARAM => &SyntaxInfo { name: stringify!(LIFETIME_PARAM) },\n+            TYPE_PARAM => &SyntaxInfo { name: stringify!(TYPE_PARAM) },\n+            TYPE_ARG_LIST => &SyntaxInfo { name: stringify!(TYPE_ARG_LIST) },\n+            LIFETIME_ARG => &SyntaxInfo { name: stringify!(LIFETIME_ARG) },\n+            TYPE_ARG => &SyntaxInfo { name: stringify!(TYPE_ARG) },\n+            ASSOC_TYPE_ARG => &SyntaxInfo { name: stringify!(ASSOC_TYPE_ARG) },\n+            PARAM_LIST => &SyntaxInfo { name: stringify!(PARAM_LIST) },\n+            PARAM => &SyntaxInfo { name: stringify!(PARAM) },\n+            SELF_PARAM => &SyntaxInfo { name: stringify!(SELF_PARAM) },\n+            ARG_LIST => &SyntaxInfo { name: stringify!(ARG_LIST) },\n+            TYPE_BOUND => &SyntaxInfo { name: stringify!(TYPE_BOUND) },\n+            TYPE_BOUND_LIST => &SyntaxInfo { name: stringify!(TYPE_BOUND_LIST) },\n+            MACRO_ITEMS => &SyntaxInfo { name: stringify!(MACRO_ITEMS) },\n+            MACRO_STMTS => &SyntaxInfo { name: stringify!(MACRO_STMTS) },\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },\n             __LAST => &SyntaxInfo { name: \"__LAST\" },\n@@ -763,7 +561,6 @@ impl SyntaxKind {\n         };\n         Some(kw)\n     }\n-\n     pub fn from_char(c: char) -> Option<SyntaxKind> {\n         let tok = match c {\n             ';' => SEMI,\n@@ -794,3 +591,291 @@ impl SyntaxKind {\n         Some(tok)\n     }\n }\n+#[macro_export]\n+macro_rules! T {\n+    ( ; ) => {\n+        $crate::SyntaxKind::SEMI\n+    };\n+    ( , ) => {\n+        $crate::SyntaxKind::COMMA\n+    };\n+    ( '(' ) => {\n+        $crate::SyntaxKind::L_PAREN\n+    };\n+    ( ')' ) => {\n+        $crate::SyntaxKind::R_PAREN\n+    };\n+    ( '{' ) => {\n+        $crate::SyntaxKind::L_CURLY\n+    };\n+    ( '}' ) => {\n+        $crate::SyntaxKind::R_CURLY\n+    };\n+    ( '[' ) => {\n+        $crate::SyntaxKind::L_BRACK\n+    };\n+    ( ']' ) => {\n+        $crate::SyntaxKind::R_BRACK\n+    };\n+    ( < ) => {\n+        $crate::SyntaxKind::L_ANGLE\n+    };\n+    ( > ) => {\n+        $crate::SyntaxKind::R_ANGLE\n+    };\n+    ( @ ) => {\n+        $crate::SyntaxKind::AT\n+    };\n+    ( # ) => {\n+        $crate::SyntaxKind::POUND\n+    };\n+    ( ~ ) => {\n+        $crate::SyntaxKind::TILDE\n+    };\n+    ( ? ) => {\n+        $crate::SyntaxKind::QUESTION\n+    };\n+    ( $ ) => {\n+        $crate::SyntaxKind::DOLLAR\n+    };\n+    ( & ) => {\n+        $crate::SyntaxKind::AMP\n+    };\n+    ( | ) => {\n+        $crate::SyntaxKind::PIPE\n+    };\n+    ( + ) => {\n+        $crate::SyntaxKind::PLUS\n+    };\n+    ( * ) => {\n+        $crate::SyntaxKind::STAR\n+    };\n+    ( / ) => {\n+        $crate::SyntaxKind::SLASH\n+    };\n+    ( ^ ) => {\n+        $crate::SyntaxKind::CARET\n+    };\n+    ( % ) => {\n+        $crate::SyntaxKind::PERCENT\n+    };\n+    ( _ ) => {\n+        $crate::SyntaxKind::UNDERSCORE\n+    };\n+    ( . ) => {\n+        $crate::SyntaxKind::DOT\n+    };\n+    ( .. ) => {\n+        $crate::SyntaxKind::DOTDOT\n+    };\n+    ( ... ) => {\n+        $crate::SyntaxKind::DOTDOTDOT\n+    };\n+    ( ..= ) => {\n+        $crate::SyntaxKind::DOTDOTEQ\n+    };\n+    ( : ) => {\n+        $crate::SyntaxKind::COLON\n+    };\n+    ( :: ) => {\n+        $crate::SyntaxKind::COLONCOLON\n+    };\n+    ( = ) => {\n+        $crate::SyntaxKind::EQ\n+    };\n+    ( == ) => {\n+        $crate::SyntaxKind::EQEQ\n+    };\n+    ( => ) => {\n+        $crate::SyntaxKind::FAT_ARROW\n+    };\n+    ( ! ) => {\n+        $crate::SyntaxKind::EXCL\n+    };\n+    ( != ) => {\n+        $crate::SyntaxKind::NEQ\n+    };\n+    ( - ) => {\n+        $crate::SyntaxKind::MINUS\n+    };\n+    ( -> ) => {\n+        $crate::SyntaxKind::THIN_ARROW\n+    };\n+    ( <= ) => {\n+        $crate::SyntaxKind::LTEQ\n+    };\n+    ( >= ) => {\n+        $crate::SyntaxKind::GTEQ\n+    };\n+    ( += ) => {\n+        $crate::SyntaxKind::PLUSEQ\n+    };\n+    ( -= ) => {\n+        $crate::SyntaxKind::MINUSEQ\n+    };\n+    ( |= ) => {\n+        $crate::SyntaxKind::PIPEEQ\n+    };\n+    ( &= ) => {\n+        $crate::SyntaxKind::AMPEQ\n+    };\n+    ( ^= ) => {\n+        $crate::SyntaxKind::CARETEQ\n+    };\n+    ( /= ) => {\n+        $crate::SyntaxKind::SLASHEQ\n+    };\n+    ( *= ) => {\n+        $crate::SyntaxKind::STAREQ\n+    };\n+    ( %= ) => {\n+        $crate::SyntaxKind::PERCENTEQ\n+    };\n+    ( && ) => {\n+        $crate::SyntaxKind::AMPAMP\n+    };\n+    ( || ) => {\n+        $crate::SyntaxKind::PIPEPIPE\n+    };\n+    ( << ) => {\n+        $crate::SyntaxKind::SHL\n+    };\n+    ( >> ) => {\n+        $crate::SyntaxKind::SHR\n+    };\n+    ( <<= ) => {\n+        $crate::SyntaxKind::SHLEQ\n+    };\n+    ( >>= ) => {\n+        $crate::SyntaxKind::SHREQ\n+    };\n+    ( async ) => {\n+        $crate::SyntaxKind::ASYNC_KW\n+    };\n+    ( use ) => {\n+        $crate::SyntaxKind::USE_KW\n+    };\n+    ( fn ) => {\n+        $crate::SyntaxKind::FN_KW\n+    };\n+    ( struct ) => {\n+        $crate::SyntaxKind::STRUCT_KW\n+    };\n+    ( enum ) => {\n+        $crate::SyntaxKind::ENUM_KW\n+    };\n+    ( trait ) => {\n+        $crate::SyntaxKind::TRAIT_KW\n+    };\n+    ( impl ) => {\n+        $crate::SyntaxKind::IMPL_KW\n+    };\n+    ( dyn ) => {\n+        $crate::SyntaxKind::DYN_KW\n+    };\n+    ( true ) => {\n+        $crate::SyntaxKind::TRUE_KW\n+    };\n+    ( false ) => {\n+        $crate::SyntaxKind::FALSE_KW\n+    };\n+    ( as ) => {\n+        $crate::SyntaxKind::AS_KW\n+    };\n+    ( extern ) => {\n+        $crate::SyntaxKind::EXTERN_KW\n+    };\n+    ( crate ) => {\n+        $crate::SyntaxKind::CRATE_KW\n+    };\n+    ( mod ) => {\n+        $crate::SyntaxKind::MOD_KW\n+    };\n+    ( pub ) => {\n+        $crate::SyntaxKind::PUB_KW\n+    };\n+    ( self ) => {\n+        $crate::SyntaxKind::SELF_KW\n+    };\n+    ( super ) => {\n+        $crate::SyntaxKind::SUPER_KW\n+    };\n+    ( in ) => {\n+        $crate::SyntaxKind::IN_KW\n+    };\n+    ( where ) => {\n+        $crate::SyntaxKind::WHERE_KW\n+    };\n+    ( for ) => {\n+        $crate::SyntaxKind::FOR_KW\n+    };\n+    ( loop ) => {\n+        $crate::SyntaxKind::LOOP_KW\n+    };\n+    ( while ) => {\n+        $crate::SyntaxKind::WHILE_KW\n+    };\n+    ( continue ) => {\n+        $crate::SyntaxKind::CONTINUE_KW\n+    };\n+    ( break ) => {\n+        $crate::SyntaxKind::BREAK_KW\n+    };\n+    ( if ) => {\n+        $crate::SyntaxKind::IF_KW\n+    };\n+    ( else ) => {\n+        $crate::SyntaxKind::ELSE_KW\n+    };\n+    ( match ) => {\n+        $crate::SyntaxKind::MATCH_KW\n+    };\n+    ( const ) => {\n+        $crate::SyntaxKind::CONST_KW\n+    };\n+    ( static ) => {\n+        $crate::SyntaxKind::STATIC_KW\n+    };\n+    ( mut ) => {\n+        $crate::SyntaxKind::MUT_KW\n+    };\n+    ( unsafe ) => {\n+        $crate::SyntaxKind::UNSAFE_KW\n+    };\n+    ( type ) => {\n+        $crate::SyntaxKind::TYPE_KW\n+    };\n+    ( ref ) => {\n+        $crate::SyntaxKind::REF_KW\n+    };\n+    ( let ) => {\n+        $crate::SyntaxKind::LET_KW\n+    };\n+    ( move ) => {\n+        $crate::SyntaxKind::MOVE_KW\n+    };\n+    ( return ) => {\n+        $crate::SyntaxKind::RETURN_KW\n+    };\n+    ( try ) => {\n+        $crate::SyntaxKind::TRY_KW\n+    };\n+    ( box ) => {\n+        $crate::SyntaxKind::BOX_KW\n+    };\n+    ( await ) => {\n+        $crate::SyntaxKind::AWAIT_KW\n+    };\n+    ( auto ) => {\n+        $crate::SyntaxKind::AUTO_KW\n+    };\n+    ( default ) => {\n+        $crate::SyntaxKind::DEFAULT_KW\n+    };\n+    ( existential ) => {\n+        $crate::SyntaxKind::EXISTENTIAL_KW\n+    };\n+    ( union ) => {\n+        $crate::SyntaxKind::UNION_KW\n+    };\n+}"}, {"sha": "f5abbec4bcf97c10058aa5ce2b301ae7286678c6", "filename": "crates/ra_parser/src/syntax_kind/generated.rs.tera", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/83413cc9ef73d578f2e42c21f7aa85ef296be8c0/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/83413cc9ef73d578f2e42c21f7aa85ef296be8c0/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera?ref=83413cc9ef73d578f2e42c21f7aa85ef296be8c0", "patch": "@@ -1,128 +0,0 @@\n-{# THIS File is not automatically generated:\n-the below applies to the result of this template\n-#}// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-syntax` is run\n-// Do not edit manually\n-\n-#![allow(bad_style, missing_docs, unreachable_pub)]\n-#![cfg_attr(rustfmt, rustfmt_skip)]\n-use super::SyntaxInfo;\n-\n-/// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-#[repr(u16)]\n-pub enum SyntaxKind {\n-    // Technical SyntaxKinds: they appear temporally during parsing,\n-    // but never end up in the final tree\n-    #[doc(hidden)]\n-    TOMBSTONE,\n-    #[doc(hidden)]\n-    EOF,\n-\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-    {{t.1}},\n-{%- endfor -%}\n-{% for kw in concat(a=keywords, b=contextual_keywords) %}\n-    {{kw | upper}}_KW,\n-{%- endfor -%}\n-{% for t in concat(a=literals, b=tokens, c=nodes) %}\n-    {{t}},\n-{%- endfor %}\n-    // Technical kind so that we can cast from u16 safely\n-    #[doc(hidden)]\n-    __LAST,\n-}\n-use self::SyntaxKind::*;\n-\n-#[macro_export]\n-macro_rules! T {\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-    {%- if t.0 == '{' or t.0 == '}' or t.0 == '[' or t.0 == ']' or t.0 == '(' or t.0 == ')' %}\n-    ('{{t.0}}') => { $crate::SyntaxKind::{{t.1}} };\n-    {%- else %}\n-    ({{t.0}}) => { $crate::SyntaxKind::{{t.1}} };\n-    {%- endif %}\n-{%- endfor -%}\n-{% for kw in concat(a=keywords, b=contextual_keywords) %}\n-    ({{kw}}) => { $crate::SyntaxKind::{{kw | upper}}_KW };\n-{%- endfor %}\n-}\n-\n-impl From<u16> for SyntaxKind {\n-    fn from(d: u16) -> SyntaxKind {\n-        assert!(d <= (__LAST as u16));\n-        unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n-    }\n-}\n-\n-impl From<SyntaxKind> for u16 {\n-    fn from(k: SyntaxKind) -> u16 {\n-        k as u16\n-    }\n-}\n-\n-impl SyntaxKind {\n-    pub fn is_keyword(self) -> bool {\n-        match self {\n-{%- for kw in concat(a=keywords, b=contextual_keywords) %}\n-            | {{kw | upper}}_KW\n-{%- endfor %}\n-                => true,\n-            _ => false\n-        }\n-    }\n-\n-    pub fn is_punct(self) -> bool {\n-        match self {\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-            | {{t.1}}\n-{%- endfor %}\n-                => true,\n-            _ => false\n-        }\n-    }\n-    pub fn is_literal(self) -> bool {\n-        match self {\n-{%- for t in literals %}\n-            | {{t}}\n-{%- endfor %}\n-                => true,\n-            _ => false\n-        }\n-    }\n-\n-    pub(crate) fn info(self) -> &'static SyntaxInfo {\n-        match self {\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-            {{t.1}} => &SyntaxInfo { name: \"{{t.1}}\" },\n-{%- endfor -%}\n-{% for kw in concat(a=keywords, b=contextual_keywords) %}\n-            {{kw | upper}}_KW => &SyntaxInfo { name: \"{{kw | upper}}_KW\" },\n-{%- endfor -%}\n-{% for t in concat(a=literals, b=tokens, c=nodes) %}\n-            {{t}} => &SyntaxInfo { name: \"{{t}}\" },\n-{%- endfor %}\n-            TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n-            EOF => &SyntaxInfo { name: \"EOF\" },\n-            __LAST => &SyntaxInfo { name: \"__LAST\" },\n-        }\n-    }\n-    pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n-        let kw = match ident {\n-{%- for kw in keywords %}\n-            \"{{kw}}\" => {{kw | upper}}_KW,\n-{%- endfor %}\n-            _ => return None,\n-        };\n-        Some(kw)\n-    }\n-\n-    pub fn from_char(c: char) -> Option<SyntaxKind> {\n-        let tok = match c {\n-{%- for t in single_byte_tokens %}\n-            '{{t.0}}' => {{t.1}},\n-{%- endfor %}\n-            _ => return None,\n-        };\n-        Some(tok)\n-    }\n-}"}, {"sha": "01666838077bfd55a647d336680d66d9c0f816cf", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1408, "deletions": 1188, "changes": 2596, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=53241928e5866b5aa501710e59b264905beeca1a"}, {"sha": "03b4bf3a1e3f39250b2cb905d35dcc76116e4bc7", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/83413cc9ef73d578f2e42c21f7aa85ef296be8c0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/83413cc9ef73d578f2e42c21f7aa85ef296be8c0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=83413cc9ef73d578f2e42c21f7aa85ef296be8c0", "patch": "@@ -1,101 +0,0 @@\n-{# THIS File is not automatically generated:\n-the below applies to the result of this template\n-#}// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-syntax` is run\n-// Do not edit manually\n-\n-//! This module contains auto-generated Rust AST. Like `SyntaxNode`s, AST nodes\n-//! are generic over ownership: `X<'a>` things are `Copy` references, `XNode`\n-//! are Arc-based. You can switch between the two variants using `.owned` and\n-//! `.borrowed` functions. Most of the code works with borowed mode, and only\n-//! this mode has all AST accessors.\n-\n-#![cfg_attr(rustfmt, rustfmt_skip)]\n-\n-use crate::{\n-    SyntaxNode, SyntaxKind::{self, *},\n-    ast::{self, AstNode},\n-};\n-{% for node, methods in ast %}\n-// {{ node }}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct {{ node }} {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-\n-impl AstNode for {{ node }} {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            {%- if methods.enum %}\n-            {% for kind in methods.enum %} | {{ kind | SCREAM }} {%- endfor -%}\n-            {% else %}\n-            {{ node | SCREAM }}\n-            {%- endif %} => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) { Some({{ node }} { syntax }) } else { None }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-\n-{% if methods.enum %}\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub enum {{ node }}Kind {\n-{%- for kind in methods.enum %}\n-    {{ kind }}({{ kind }}),\n-{%- endfor %}\n-}\n-\n-{%- for kind in methods.enum %}\n-impl From<{{ kind }}> for {{ node }} {\n-    fn from(n: {{ kind }}) -> {{ node }} { {{ node }} { syntax: n.syntax } }\n-}\n-{%- endfor %}\n-impl {{ node }} {\n-    pub fn kind(&self) -> {{ node }}Kind {\n-        match self.syntax.kind() {\n-            {%- for kind in methods.enum %}\n-            {{ kind | SCREAM }} => {{ node }}Kind::{{ kind }}({{ kind }}::cast(self.syntax.clone()).unwrap()),\n-            {%- endfor %}\n-            _ => unreachable!(),\n-        }\n-    }\n-}\n-{% endif %}\n-{% if methods.traits -%}\n-\n-{%- for t in methods.traits -%}\n-impl ast::{{ t }} for {{ node }} {}\n-{% endfor -%}\n-\n-{%- endif -%}\n-\n-impl {{ node }} {\n-{%- if methods.collections -%}\n-{%- for m in methods.collections -%}\n-{%- set method_name = m.0 -%}\n-{%- set ChildName = m.1 %}\n-    pub fn {{ method_name }}(&self) -> impl Iterator<Item = {{ ChildName }}> {\n-        super::children(self)\n-    }\n-{% endfor -%}\n-{%- endif -%}\n-\n-{%- if methods.options -%}\n-{%- for m in methods.options -%}\n-\n-{%- if m is string -%}\n-{%- set method_name = m | snake -%}\n-{%- set ChildName = m %}\n-{%- else -%}\n-{%- set method_name = m.0 -%}\n-{%- set ChildName = m.1 %}\n-{%- endif %}\n-    pub fn {{ method_name }}(&self) -> Option<{{ ChildName }}> {\n-        super::child_opt(self)\n-    }\n-{% endfor -%}\n-{%- endif -%}\n-}\n-{% endfor %}"}, {"sha": "26efeeba996b104c064eafdb26131c18895199c7", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=53241928e5866b5aa501710e59b264905beeca1a", "patch": "@@ -2,61 +2,61 @@\n // See `cargo gen-syntax` (defined in crates/tools/src/main.rs)\n Grammar(\n     single_byte_tokens: [\n-        [\";\", \"SEMI\"],\n-        [\",\", \"COMMA\"],\n-        [\"(\", \"L_PAREN\"],\n-        [\")\", \"R_PAREN\"],\n-        [\"{\", \"L_CURLY\"],\n-        [\"}\", \"R_CURLY\"],\n-        [\"[\", \"L_BRACK\"],\n-        [\"]\", \"R_BRACK\"],\n-        [\"<\", \"L_ANGLE\"],\n-        [\">\", \"R_ANGLE\"],\n-        [\"@\", \"AT\"],\n-        [\"#\", \"POUND\"],\n-        [\"~\", \"TILDE\"],\n-        [\"?\", \"QUESTION\"],\n-        [\"$\", \"DOLLAR\"],\n-        [\"&\", \"AMP\"],\n-        [\"|\", \"PIPE\"],\n-        [\"+\", \"PLUS\"],\n-        [\"*\", \"STAR\"],\n-        [\"/\", \"SLASH\"],\n-        [\"^\", \"CARET\"],\n-        [\"%\", \"PERCENT\"],\n-        [\"_\", \"UNDERSCORE\"],\n+        (\";\", \"SEMI\"),\n+        (\",\", \"COMMA\"),\n+        (\"(\", \"L_PAREN\"),\n+        (\")\", \"R_PAREN\"),\n+        (\"{\", \"L_CURLY\"),\n+        (\"}\", \"R_CURLY\"),\n+        (\"[\", \"L_BRACK\"),\n+        (\"]\", \"R_BRACK\"),\n+        (\"<\", \"L_ANGLE\"),\n+        (\">\", \"R_ANGLE\"),\n+        (\"@\", \"AT\"),\n+        (\"#\", \"POUND\"),\n+        (\"~\", \"TILDE\"),\n+        (\"?\", \"QUESTION\"),\n+        (\"$\", \"DOLLAR\"),\n+        (\"&\", \"AMP\"),\n+        (\"|\", \"PIPE\"),\n+        (\"+\", \"PLUS\"),\n+        (\"*\", \"STAR\"),\n+        (\"/\", \"SLASH\"),\n+        (\"^\", \"CARET\"),\n+        (\"%\", \"PERCENT\"),\n+        (\"_\", \"UNDERSCORE\"),\n     ],\n     // Tokens for which the longest match must be chosen (e.g. `..` is a DOTDOT, but `.` is a DOT)\n     multi_byte_tokens: [\n-        [\".\", \"DOT\"],\n-        [\"..\", \"DOTDOT\"],\n-        [\"...\", \"DOTDOTDOT\"],\n-        [\"..=\", \"DOTDOTEQ\"],\n-        [\":\", \"COLON\"],\n-        [\"::\", \"COLONCOLON\"],\n-        [\"=\", \"EQ\"],\n-        [\"==\", \"EQEQ\"],\n-        [\"=>\", \"FAT_ARROW\"],\n-        [\"!\", \"EXCL\"],\n-        [\"!=\", \"NEQ\"],\n-        [\"-\", \"MINUS\"],\n-        [\"->\", \"THIN_ARROW\"],\n-        [\"<=\", \"LTEQ\"],\n-        [\">=\", \"GTEQ\"],\n-        [\"+=\", \"PLUSEQ\"],\n-        [\"-=\", \"MINUSEQ\"],\n-        [\"|=\", \"PIPEEQ\"],\n-        [\"&=\", \"AMPEQ\"],\n-        [\"^=\", \"CARETEQ\"],\n-        [\"/=\", \"SLASHEQ\"],\n-        [\"*=\", \"STAREQ\"],\n-        [\"%=\", \"PERCENTEQ\"],\n-        [\"&&\", \"AMPAMP\"],\n-        [\"||\", \"PIPEPIPE\"],\n-        [\"<<\", \"SHL\"],\n-        [\">>\", \"SHR\"],\n-        [\"<<=\", \"SHLEQ\"],\n-        [\">>=\", \"SHREQ\"],\n+        (\".\", \"DOT\"),\n+        (\"..\", \"DOTDOT\"),\n+        (\"...\", \"DOTDOTDOT\"),\n+        (\"..=\", \"DOTDOTEQ\"),\n+        (\":\", \"COLON\"),\n+        (\"::\", \"COLONCOLON\"),\n+        (\"=\", \"EQ\"),\n+        (\"==\", \"EQEQ\"),\n+        (\"=>\", \"FAT_ARROW\"),\n+        (\"!\", \"EXCL\"),\n+        (\"!=\", \"NEQ\"),\n+        (\"-\", \"MINUS\"),\n+        (\"->\", \"THIN_ARROW\"),\n+        (\"<=\", \"LTEQ\"),\n+        (\">=\", \"GTEQ\"),\n+        (\"+=\", \"PLUSEQ\"),\n+        (\"-=\", \"MINUSEQ\"),\n+        (\"|=\", \"PIPEEQ\"),\n+        (\"&=\", \"AMPEQ\"),\n+        (\"^=\", \"CARETEQ\"),\n+        (\"/=\", \"SLASHEQ\"),\n+        (\"*=\", \"STAREQ\"),\n+        (\"%=\", \"PERCENTEQ\"),\n+        (\"&&\", \"AMPAMP\"),\n+        (\"||\", \"PIPEPIPE\"),\n+        (\"<<\", \"SHL\"),\n+        (\">>\", \"SHR\"),\n+        (\"<<=\", \"SHLEQ\"),\n+        (\">>=\", \"SHREQ\"),\n     ],\n     keywords: [\n         \"async\",\n@@ -263,7 +263,7 @@ Grammar(\n         \"SourceFile\": (\n             traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],\n             collections: [\n-                [\"modules\", \"Module\"],\n+                (\"modules\", \"Module\"),\n             ]\n         ),\n         \"FnDef\": (\n@@ -286,7 +286,7 @@ Grammar(\n                 \"DocCommentsOwner\"\n             ]\n         ),\n-        \"NamedFieldDefList\": (collections: [[\"fields\", \"NamedFieldDef\"]]),\n+        \"NamedFieldDefList\": (collections: [(\"fields\", \"NamedFieldDef\")]),\n         \"NamedFieldDef\": (\n             traits: [\n                 \"VisibilityOwner\",\n@@ -296,7 +296,7 @@ Grammar(\n                 \"TypeAscriptionOwner\"\n             ]\n         ),\n-        \"PosFieldDefList\": (collections: [[\"fields\", \"PosFieldDef\"]]),\n+        \"PosFieldDefList\": (collections: [(\"fields\", \"PosFieldDef\")]),\n         \"PosFieldDef\": ( traits: [\"VisibilityOwner\", \"AttrsOwner\"], options: [\"TypeRef\"]),\n         \"EnumDef\": ( traits: [\n             \"VisibilityOwner\",\n@@ -305,7 +305,7 @@ Grammar(\n             \"AttrsOwner\",\n             \"DocCommentsOwner\"\n         ], options: [[\"variant_list\", \"EnumVariantList\"]] ),\n-        \"EnumVariantList\": ( collections: [[\"variants\", \"EnumVariant\"]] ),\n+        \"EnumVariantList\": ( collections: [(\"variants\", \"EnumVariant\")] ),\n         \"EnumVariant\": ( traits: [\"NameOwner\", \"DocCommentsOwner\", \"AttrsOwner\"], options: [\"Expr\"] ),\n         \"TraitDef\": (\n             traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\", \"TypeParamsOwner\", \"TypeBoundsOwner\"],\n@@ -316,7 +316,7 @@ Grammar(\n             options: [ \"ItemList\" ]\n         ),\n         \"ItemList\": (\n-            collections: [[\"impl_items\", \"ImplItem\"]],\n+            collections: [(\"impl_items\", \"ImplItem\")],\n             traits: [ \"FnDefOwner\", \"ModuleItemOwner\" ],\n         ),\n         \"ConstDef\": (\n@@ -355,7 +355,7 @@ Grammar(\n         \"ImplBlock\": (options: [\"ItemList\"], traits: [\"TypeParamsOwner\", \"AttrsOwner\"]),\n \n         \"ParenType\": (options: [\"TypeRef\"]),\n-        \"TupleType\": ( collections: [[\"fields\", \"TypeRef\"]] ),\n+        \"TupleType\": ( collections: [(\"fields\", \"TypeRef\")] ),\n         \"NeverType\": (),\n         \"PathType\": (options: [\"Path\"]),\n         \"PointerType\": (options: [\"TypeRef\"]),\n@@ -405,10 +405,10 @@ Grammar(\n         ),\n \n         \"TupleExpr\": (\n-            collections: [[\"exprs\", \"Expr\"]]\n+            collections: [(\"exprs\", \"Expr\")]\n         ),\n         \"ArrayExpr\": (\n-            collections: [[\"exprs\", \"Expr\"]]\n+            collections: [(\"exprs\", \"Expr\")]\n         ),\n         \"ParenExpr\": (options: [\"Expr\"]),\n         \"PathExpr\": (options: [\"Path\"]),\n@@ -449,21 +449,21 @@ Grammar(\n             options: [ \"Expr\", \"MatchArmList\" ],\n         ),\n         \"MatchArmList\": (\n-            collections: [ [\"arms\", \"MatchArm\"] ],\n+            collections: [ (\"arms\", \"MatchArm\") ],\n             traits: [ \"AttrsOwner\" ]\n         ),\n         \"MatchArm\": (\n             options: [\n                 [ \"guard\", \"MatchGuard\" ],\n                 \"Expr\",\n             ],\n-            collections: [ [ \"pats\", \"Pat\" ] ],\n+            collections: [ (\"pats\", \"Pat\") ],\n             traits: [ \"AttrsOwner\" ]\n         ),\n         \"MatchGuard\": (options: [\"Expr\"]),\n         \"StructLit\": (options: [\"Path\", \"NamedFieldList\"]),\n         \"NamedFieldList\": (\n-            collections: [ [\"fields\", \"NamedField\"] ],\n+            collections: [ (\"fields\", \"NamedField\") ],\n             options: [[\"spread\", \"Expr\"]]\n         ),\n         \"NamedField\": (options: [\"NameRef\", \"Expr\"]),\n@@ -532,8 +532,8 @@ Grammar(\n         \"StructPat\": ( options: [\"FieldPatList\", \"Path\"] ),\n         \"FieldPatList\": (\n             collections: [\n-                [\"field_pats\", \"FieldPat\"],\n-                [\"bind_pats\", \"BindPat\"],\n+                (\"field_pats\", \"FieldPat\"),\n+                (\"bind_pats\", \"BindPat\"),\n             ]\n         ),\n         \"FieldPat\": (\n@@ -542,9 +542,9 @@ Grammar(\n         ),\n         \"TupleStructPat\": (\n             options: [\"Path\"],\n-            collections: [[\"args\", \"Pat\"]],\n+            collections: [(\"args\", \"Pat\")],\n         ),\n-        \"TuplePat\": ( collections: [[\"args\", \"Pat\"]] ),\n+        \"TuplePat\": ( collections: [(\"args\", \"Pat\")] ),\n         \"SlicePat\": (),\n         \"RangePat\": (),\n         \"LiteralPat\": (options: [\"Literal\"]),\n@@ -575,8 +575,8 @@ Grammar(\n         \"TokenTree\": (),\n         \"TypeParamList\": (\n             collections: [\n-                [\"type_params\", \"TypeParam\" ],\n-                [\"lifetime_params\", \"LifetimeParam\" ],\n+                (\"type_params\", \"TypeParam\" ),\n+                (\"lifetime_params\", \"LifetimeParam\" ),\n             ]\n         ),\n         \"TypeParam\": ( traits: [\"NameOwner\", \"AttrsOwner\", \"TypeBoundsOwner\", \"DefaultTypeParamOwner\"] ),\n@@ -590,7 +590,7 @@ Grammar(\n         ),\n         \"TypeBoundList\": (\n             collections: [\n-                [\"bounds\", \"TypeBound\"],\n+                (\"bounds\", \"TypeBound\"),\n             ]\n         ),\n         \"WherePred\": (\n@@ -603,7 +603,7 @@ Grammar(\n         ),\n         \"WhereClause\": (\n             collections: [\n-                [\"predicates\", \"WherePred\"],\n+                (\"predicates\", \"WherePred\"),\n             ],\n         ),\n         \"ExprStmt\": (\n@@ -627,7 +627,7 @@ Grammar(\n         \"Block\": (\n             options: [ \"Expr\" ],\n             collections: [\n-                [\"statements\", \"Stmt\"],\n+                (\"statements\", \"Stmt\"),\n             ],\n             traits: [\n                 \"AttrsOwner\",\n@@ -636,7 +636,7 @@ Grammar(\n         \"ParamList\": (\n             options: [ \"SelfParam\" ],\n             collections: [\n-                [\"params\", \"Param\"]\n+                (\"params\", \"Param\"),\n             ]\n         ),\n         \"SelfParam\": (\n@@ -663,14 +663,14 @@ Grammar(\n             traits: [\"NameOwner\"],\n         ),\n         \"UseTreeList\": (\n-            collections: [[\"use_trees\", \"UseTree\"]]\n+            collections: [(\"use_trees\", \"UseTree\")]\n         ),\n         \"ExternCrateItem\": (\n             options: [\"NameRef\", \"Alias\"],\n         ),\n         \"ArgList\": (\n             collections: [\n-                [\"args\", \"Expr\"]\n+                (\"args\", \"Expr\"),\n             ]\n         ),\n         \"Path\": (\n@@ -683,22 +683,22 @@ Grammar(\n             options: [ \"NameRef\", \"TypeArgList\" ]\n         ),\n         \"TypeArgList\": (collections: [\n-            [\"type_args\", \"TypeArg\"],\n-            [\"lifetime_args\", \"LifetimeArg\"],\n-            [\"assoc_type_args\", \"AssocTypeArg\"],\n+            (\"type_args\", \"TypeArg\"),\n+            (\"lifetime_args\", \"LifetimeArg\"),\n+            (\"assoc_type_args\", \"AssocTypeArg\"),\n         ]),\n         \"TypeArg\": (options: [\"TypeRef\"]),\n         \"AssocTypeArg\": (options: [\"NameRef\", \"TypeRef\"]),\n         \"LifetimeArg\": (),\n \n         \"MacroItems\": (\n-            traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],            \n+            traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],\n         ),\n \n         \"MacroStmts\" : (\n             options: [ \"Expr\" ],\n             collections: [\n-                [\"statements\", \"Stmt\"],\n+                (\"statements\", \"Stmt\"),\n             ],\n         )\n     },"}, {"sha": "4c9aa1cc3f7a6daa427e1a1df5379600297cd01c", "filename": "crates/ra_tools/Cargo.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2FCargo.toml?ref=53241928e5866b5aa501710e59b264905beeca1a", "patch": "@@ -6,7 +6,11 @@ authors = [\"rust-analyzer developers\"]\n publish = false\n \n [dependencies]\n-teraron = \"0.1.0\"\n walkdir = \"2.1.3\"\n itertools = \"0.8.0\"\n clap = \"2.32.0\"\n+quote = \"1.0.2\"\n+proc-macro2 = \"1.0.1\"\n+ron = \"0.5.1\"\n+heck = \"0.3.0\"\n+serde = { version = \"1.0.0\", features = [\"derive\"] }"}, {"sha": "7ef51e82ad48ed2de849ab91c5403471ff05a58b", "filename": "crates/ra_tools/src/boilerplate_gen.rs", "status": "added", "additions": 342, "deletions": 0, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs?ref=53241928e5866b5aa501710e59b264905beeca1a", "patch": "@@ -0,0 +1,342 @@\n+use std::{\n+    collections::BTreeMap,\n+    fs,\n+    io::Write,\n+    process::{Command, Stdio},\n+};\n+\n+use heck::{ShoutySnakeCase, SnakeCase};\n+use proc_macro2::{Punct, Spacing};\n+use quote::{format_ident, quote};\n+use ron;\n+use serde::Deserialize;\n+\n+use crate::{project_root, update, Mode, Result, AST, GRAMMAR, SYNTAX_KINDS};\n+\n+pub fn generate_boilerplate(mode: Mode) -> Result<()> {\n+    let grammar = project_root().join(GRAMMAR);\n+    let grammar: Grammar = {\n+        let text = fs::read_to_string(grammar)?;\n+        ron::de::from_str(&text)?\n+    };\n+\n+    let syntax_kinds_file = project_root().join(SYNTAX_KINDS);\n+    let syntax_kinds = generate_syntax_kinds(&grammar)?;\n+    update(syntax_kinds_file.as_path(), &syntax_kinds, mode)?;\n+\n+    let ast_file = project_root().join(AST);\n+    let ast = generate_ast(&grammar)?;\n+    update(ast_file.as_path(), &ast, mode)?;\n+\n+    Ok(())\n+}\n+\n+fn generate_ast(grammar: &Grammar) -> Result<String> {\n+    let nodes = grammar.ast.iter().map(|(name, ast_node)| {\n+        let variants =\n+            ast_node.variants.iter().map(|var| format_ident!(\"{}\", var)).collect::<Vec<_>>();\n+        let name = format_ident!(\"{}\", name);\n+\n+        let kinds = if variants.is_empty() { vec![name.clone()] } else { variants.clone() }\n+            .into_iter()\n+            .map(|name| format_ident!(\"{}\", name.to_string().to_shouty_snake_case()))\n+            .collect::<Vec<_>>();\n+\n+        let variants = if variants.is_empty() {\n+            None\n+        } else {\n+            let kind_enum = format_ident!(\"{}Kind\", name);\n+            Some(quote!(\n+                pub enum #kind_enum {\n+                    #(#variants(#variants),)*\n+                }\n+\n+                #(\n+                impl From<#variants> for #name {\n+                    fn from(node: #variants) -> #name {\n+                        #name { syntax: node.syntax }\n+                    }\n+                }\n+                )*\n+\n+                impl #name {\n+                    pub fn kind(&self) -> #kind_enum {\n+                        let syntax = self.syntax.clone();\n+                        match syntax.kind() {\n+                            #(\n+                            #kinds =>\n+                                #kind_enum::#variants(#variants { syntax }),\n+                            )*\n+                            _ => unreachable!(),\n+                        }\n+                    }\n+                }\n+            ))\n+        };\n+\n+        let traits = ast_node.traits.iter().map(|trait_name| {\n+            let trait_name = format_ident!(\"{}\", trait_name);\n+            quote!(impl ast::#trait_name for #name {})\n+        });\n+\n+        let collections = ast_node.collections.iter().map(|(name, kind)| {\n+            let method_name = format_ident!(\"{}\", name);\n+            let kind = format_ident!(\"{}\", kind);\n+            quote! {\n+                pub fn #method_name(&self) -> AstChildren<#kind> {\n+                    AstChildren::new(&self.syntax)\n+                }\n+            }\n+        });\n+\n+        let options = ast_node.options.iter().map(|attr| {\n+            let method_name = match attr {\n+                Attr::Type(t) => format_ident!(\"{}\", t.to_snake_case()),\n+                Attr::NameType(n, _) => format_ident!(\"{}\", n),\n+            };\n+            let ty = match attr {\n+                Attr::Type(t) | Attr::NameType(_, t) => format_ident!(\"{}\", t),\n+            };\n+            quote! {\n+                pub fn #method_name(&self) -> Option<#ty> {\n+                    AstChildren::new(&self.syntax).next()\n+                }\n+            }\n+        });\n+\n+        quote! {\n+            #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+            pub struct #name {\n+                pub(crate) syntax: SyntaxNode,\n+            }\n+\n+            impl AstNode for #name {\n+                fn can_cast(kind: SyntaxKind) -> bool {\n+                    match kind {\n+                        #(#kinds)|* => true,\n+                        _ => false,\n+                    }\n+                }\n+                fn cast(syntax: SyntaxNode) -> Option<Self> {\n+                    if Self::can_cast(syntax.kind()) { Some(Self { syntax }) } else { None }\n+                }\n+                fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+            }\n+\n+            #variants\n+\n+            #(#traits)*\n+\n+            impl #name {\n+                #(#collections)*\n+                #(#options)*\n+            }\n+        }\n+    });\n+\n+    let ast = quote! {\n+        use crate::{\n+            SyntaxNode, SyntaxKind::{self, *},\n+            ast::{self, AstNode, AstChildren},\n+        };\n+\n+        #(#nodes)*\n+    };\n+\n+    let pretty = reformat(ast)?;\n+    Ok(pretty)\n+}\n+\n+fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n+    let single_byte_tokens_values =\n+        grammar.single_byte_tokens.iter().map(|(token, _name)| token.chars().next().unwrap());\n+    let single_byte_tokens = grammar\n+        .single_byte_tokens\n+        .iter()\n+        .map(|(_token, name)| format_ident!(\"{}\", name))\n+        .collect::<Vec<_>>();\n+\n+    let punctuation_values =\n+        grammar.single_byte_tokens.iter().chain(grammar.multi_byte_tokens.iter()).map(\n+            |(token, _name)| {\n+                if \"{}[]()\".contains(token) {\n+                    let c = token.chars().next().unwrap();\n+                    quote! { #c }\n+                } else {\n+                    let cs = token.chars().map(|c| Punct::new(c, Spacing::Joint));\n+                    quote! { #(#cs)* }\n+                }\n+            },\n+        );\n+    let punctuation = single_byte_tokens\n+        .clone()\n+        .into_iter()\n+        .chain(grammar.multi_byte_tokens.iter().map(|(_token, name)| format_ident!(\"{}\", name)))\n+        .collect::<Vec<_>>();\n+\n+    let full_keywords_values = &grammar.keywords;\n+    let full_keywords =\n+        full_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", kw.to_shouty_snake_case()));\n+\n+    let all_keywords_values =\n+        grammar.keywords.iter().chain(grammar.contextual_keywords.iter()).collect::<Vec<_>>();\n+    let all_keywords_idents = all_keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n+    let all_keywords = all_keywords_values\n+        .iter()\n+        .map(|name| format_ident!(\"{}_KW\", name.to_shouty_snake_case()))\n+        .collect::<Vec<_>>();\n+\n+    let literals =\n+        grammar.literals.iter().map(|name| format_ident!(\"{}\", name)).collect::<Vec<_>>();\n+\n+    let tokens = grammar.tokens.iter().map(|name| format_ident!(\"{}\", name)).collect::<Vec<_>>();\n+\n+    let nodes = grammar.nodes.iter().map(|name| format_ident!(\"{}\", name)).collect::<Vec<_>>();\n+\n+    let ast = quote! {\n+        #![allow(bad_style, missing_docs, unreachable_pub)]\n+        use super::SyntaxInfo;\n+\n+        /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n+        #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+        #[repr(u16)]\n+        pub enum SyntaxKind {\n+            // Technical SyntaxKinds: they appear temporally during parsing,\n+            // but never end up in the final tree\n+            #[doc(hidden)]\n+            TOMBSTONE,\n+            #[doc(hidden)]\n+            EOF,\n+            #(#punctuation,)*\n+            #(#all_keywords,)*\n+            #(#literals,)*\n+            #(#tokens,)*\n+            #(#nodes,)*\n+\n+            // Technical kind so that we can cast from u16 safely\n+            #[doc(hidden)]\n+            __LAST,\n+        }\n+        use self::SyntaxKind::*;\n+\n+        impl From<u16> for SyntaxKind {\n+            fn from(d: u16) -> SyntaxKind {\n+                assert!(d <= (__LAST as u16));\n+                unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n+            }\n+        }\n+\n+        impl From<SyntaxKind> for u16 {\n+            fn from(k: SyntaxKind) -> u16 {\n+                k as u16\n+            }\n+        }\n+\n+        impl SyntaxKind {\n+            pub fn is_keyword(self) -> bool {\n+                match self {\n+                    #(#all_keywords)|* => true,\n+                    _ => false,\n+                }\n+            }\n+\n+            pub fn is_punct(self) -> bool {\n+                match self {\n+                    #(#punctuation)|* => true,\n+                    _ => false,\n+                }\n+            }\n+\n+            pub fn is_literal(self) -> bool {\n+                match self {\n+                    #(#literals)|* => true,\n+                    _ => false,\n+                }\n+            }\n+\n+            pub(crate) fn info(self) -> &'static SyntaxInfo {\n+                match self {\n+                    #(#punctuation => &SyntaxInfo { name: stringify!(#punctuation) },)*\n+                    #(#all_keywords => &SyntaxInfo { name: stringify!(#all_keywords) },)*\n+                    #(#literals => &SyntaxInfo { name: stringify!(#literals) },)*\n+                    #(#tokens => &SyntaxInfo { name: stringify!(#tokens) },)*\n+                    #(#nodes => &SyntaxInfo { name: stringify!(#nodes) },)*\n+                    TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n+                    EOF => &SyntaxInfo { name: \"EOF\" },\n+                    __LAST => &SyntaxInfo { name: \"__LAST\" },\n+                }\n+            }\n+\n+            pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n+                let kw = match ident {\n+                    #(#full_keywords_values => #full_keywords,)*\n+                    _ => return None,\n+                };\n+                Some(kw)\n+            }\n+\n+            pub fn from_char(c: char) -> Option<SyntaxKind> {\n+                let tok = match c {\n+                    #(#single_byte_tokens_values => #single_byte_tokens,)*\n+                    _ => return None,\n+                };\n+                Some(tok)\n+            }\n+        }\n+\n+        #[macro_export]\n+        macro_rules! T {\n+            #((#punctuation_values) => { $crate::SyntaxKind::#punctuation };)*\n+            #((#all_keywords_idents) => { $crate::SyntaxKind::#all_keywords };)*\n+        }\n+    };\n+\n+    reformat(ast)\n+}\n+\n+fn reformat(text: impl std::fmt::Display) -> Result<String> {\n+    let mut rustfmt = Command::new(\"rustfmt\")\n+        .arg(\"--config-path\")\n+        .arg(project_root().join(\"rustfmt.toml\"))\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .spawn()?;\n+    write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n+    let output = rustfmt.wait_with_output()?;\n+    let stdout = String::from_utf8(output.stdout)?;\n+    let preamble = \"Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\";\n+    Ok(format!(\"// {}\\n\\n{}\", preamble, stdout))\n+}\n+\n+#[derive(Deserialize, Debug)]\n+struct Grammar {\n+    single_byte_tokens: Vec<(String, String)>,\n+    multi_byte_tokens: Vec<(String, String)>,\n+    keywords: Vec<String>,\n+    contextual_keywords: Vec<String>,\n+    literals: Vec<String>,\n+    tokens: Vec<String>,\n+    nodes: Vec<String>,\n+    ast: BTreeMap<String, AstNode>,\n+}\n+\n+#[derive(Deserialize, Debug)]\n+struct AstNode {\n+    #[serde(default)]\n+    #[serde(rename = \"enum\")]\n+    variants: Vec<String>,\n+\n+    #[serde(default)]\n+    traits: Vec<String>,\n+    #[serde(default)]\n+    collections: Vec<(String, String)>,\n+    #[serde(default)]\n+    options: Vec<Attr>,\n+}\n+\n+#[derive(Deserialize, Debug)]\n+#[serde(untagged)]\n+enum Attr {\n+    Type(String),\n+    NameType(String, String),\n+}"}, {"sha": "d47660369e85081d3fe058d16e205100521b2c34", "filename": "crates/ra_tools/src/lib.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Flib.rs?ref=53241928e5866b5aa501710e59b264905beeca1a", "patch": "@@ -1,3 +1,5 @@\n+mod boilerplate_gen;\n+\n use std::{\n     collections::HashMap,\n     error::Error,\n@@ -9,7 +11,7 @@ use std::{\n \n use itertools::Itertools;\n \n-pub use teraron::{Mode, Overwrite, Verify};\n+pub use self::boilerplate_gen::generate_boilerplate;\n \n pub type Result<T> = std::result::Result<T, Box<dyn Error>>;\n \n@@ -18,10 +20,17 @@ const GRAMMAR_DIR: &str = \"crates/ra_parser/src/grammar\";\n const OK_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/ok\";\n const ERR_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/err\";\n \n-pub const SYNTAX_KINDS: &str = \"crates/ra_parser/src/syntax_kind/generated.rs.tera\";\n-pub const AST: &str = \"crates/ra_syntax/src/ast/generated.rs.tera\";\n+pub const SYNTAX_KINDS: &str = \"crates/ra_parser/src/syntax_kind/generated.rs\";\n+pub const AST: &str = \"crates/ra_syntax/src/ast/generated.rs\";\n const TOOLCHAIN: &str = \"stable\";\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub enum Mode {\n+    Overwrite,\n+    Verify,\n+}\n+pub use Mode::*;\n+\n #[derive(Debug)]\n pub struct Test {\n     pub name: String,\n@@ -66,15 +75,6 @@ pub fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n     res\n }\n \n-pub fn generate(mode: Mode) -> Result<()> {\n-    let grammar = project_root().join(GRAMMAR);\n-    let syntax_kinds = project_root().join(SYNTAX_KINDS);\n-    let ast = project_root().join(AST);\n-    teraron::generate(&syntax_kinds, &grammar, mode)?;\n-    teraron::generate(&ast, &grammar, mode)?;\n-    Ok(())\n-}\n-\n pub fn project_root() -> PathBuf {\n     Path::new(&env!(\"CARGO_MANIFEST_DIR\")).ancestors().nth(2).unwrap().to_path_buf()\n }\n@@ -227,7 +227,7 @@ pub fn gen_tests(mode: Mode) -> Result<()> {\n                     tests_dir.join(file_name)\n                 }\n             };\n-            teraron::update(&path, &test.text, mode)?;\n+            update(&path, &test.text, mode)?;\n         }\n         Ok(())\n     }\n@@ -311,3 +311,20 @@ fn existing_tests(dir: &Path, ok: bool) -> Result<HashMap<String, (PathBuf, Test\n     }\n     Ok(res)\n }\n+\n+/// A helper to update file on disk if it has changed.\n+/// With verify = false,\n+pub fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n+    match fs::read_to_string(path) {\n+        Ok(ref old_contents) if old_contents == contents => {\n+            return Ok(());\n+        }\n+        _ => (),\n+    }\n+    if mode == Verify {\n+        Err(format!(\"`{}` is not up-to-date\", path.display()))?;\n+    }\n+    eprintln!(\"updating {}\", path.display());\n+    fs::write(path, contents)?;\n+    Ok(())\n+}"}, {"sha": "03cb9d5a73dad220ce2e02b593d35fc5e11d1213", "filename": "crates/ra_tools/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fmain.rs?ref=53241928e5866b5aa501710e59b264905beeca1a", "patch": "@@ -1,8 +1,8 @@\n use clap::{App, Arg, SubCommand};\n use core::str;\n use ra_tools::{\n-    gen_tests, generate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt, Cmd,\n-    Overwrite, Result,\n+    gen_tests, generate_boilerplate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt,\n+    Cmd, Overwrite, Result,\n };\n use std::{env, path::PathBuf};\n \n@@ -49,7 +49,7 @@ fn main() -> Result<()> {\n             install(opts)?\n         }\n         (\"gen-tests\", _) => gen_tests(Overwrite)?,\n-        (\"gen-syntax\", _) => generate(Overwrite)?,\n+        (\"gen-syntax\", _) => generate_boilerplate(Overwrite)?,\n         (\"format\", _) => run_rustfmt(Overwrite)?,\n         (\"format-hook\", _) => install_format_hook()?,\n         (\"lint\", _) => run_clippy()?,"}, {"sha": "c672e578895378e5b4c1f043d22ae2e1c1867926", "filename": "crates/ra_tools/tests/cli.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2Ftests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53241928e5866b5aa501710e59b264905beeca1a/crates%2Fra_tools%2Ftests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Ftests%2Fcli.rs?ref=53241928e5866b5aa501710e59b264905beeca1a", "patch": "@@ -1,10 +1,10 @@\n use walkdir::WalkDir;\n \n-use ra_tools::{gen_tests, generate, project_root, run_rustfmt, Verify};\n+use ra_tools::{gen_tests, generate_boilerplate, project_root, run_rustfmt, Verify};\n \n #[test]\n fn generated_grammar_is_fresh() {\n-    if let Err(error) = generate(Verify) {\n+    if let Err(error) = generate_boilerplate(Verify) {\n         panic!(\"{}. Please update it by running `cargo gen-syntax`\", error);\n     }\n }"}]}