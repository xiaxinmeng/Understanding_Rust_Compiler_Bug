{"sha": "7be8f0af0393dcdb077c2f6b1653836fd3fba235", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZThmMGFmMDM5M2RjZGIwNzdjMmY2YjE2NTM4MzZmZDNmYmEyMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-07T02:26:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-07T02:26:07Z"}, "message": "auto merge of #16306 : pnkfelix/rust/fsk-ast-refactor-PatWild, r=alexcrichton\n\nAST refactoring: merge PatWild and PatWildMulti into one variant with a flag", "tree": {"sha": "7e256e2ccf9815a98746d80f61d34b63782887d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e256e2ccf9815a98746d80f61d34b63782887d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be8f0af0393dcdb077c2f6b1653836fd3fba235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be8f0af0393dcdb077c2f6b1653836fd3fba235", "html_url": "https://github.com/rust-lang/rust/commit/7be8f0af0393dcdb077c2f6b1653836fd3fba235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be8f0af0393dcdb077c2f6b1653836fd3fba235/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe73f1166c0d3765cabb26680b82175ec4429cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe73f1166c0d3765cabb26680b82175ec4429cd", "html_url": "https://github.com/rust-lang/rust/commit/8fe73f1166c0d3765cabb26680b82175ec4429cd"}, {"sha": "d3202354f5fe3860c429adc4bab6e6dc88ee83bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3202354f5fe3860c429adc4bab6e6dc88ee83bc", "html_url": "https://github.com/rust-lang/rust/commit/d3202354f5fe3860c429adc4bab6e6dc88ee83bc"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "8610621d30ae83b352a99c29740db4142f4e4e4c", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -594,7 +594,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n             pats: vec!(box(GC) ast::Pat{\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.sp,\n-                node: ast::PatWild,\n+                node: ast::PatWild(ast::PatWildSingle),\n             }),\n             guard: None,\n             body: body,"}, {"sha": "dba873a72b6b8bfe3fb317577703bc0f3d1db280", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -112,7 +112,7 @@ impl<'a> CFGBuilder<'a> {\n             ast::PatEnum(_, None) |\n             ast::PatLit(..) |\n             ast::PatRange(..) |\n-            ast::PatWild | ast::PatWildMulti => {\n+            ast::PatWild(_) => {\n                 self.add_node(pat.id, [pred])\n             }\n "}, {"sha": "d8a88b66310d9b2d9ac705d1dddf792695bd4806", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -344,7 +344,7 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n                 let fields = ty::lookup_struct_fields(cx.tcx, vid);\n                 let field_pats: Vec<FieldPat> = fields.move_iter()\n                     .zip(pats.iter())\n-                    .filter(|&(_, pat)| pat.node != PatWild)\n+                    .filter(|&(_, pat)| pat.node != PatWild(PatWildSingle))\n                     .map(|(field, pat)| FieldPat {\n                         ident: Ident::new(field.name),\n                         pat: pat.clone()\n@@ -372,7 +372,7 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n                     },\n                     _ => unreachable!()\n                 },\n-                ty::ty_str => PatWild,\n+                ty::ty_str => PatWild(PatWildSingle),\n \n                 _ => {\n                     assert_eq!(pats.len(), 1);\n@@ -394,7 +394,7 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n         _ => {\n             match *ctor {\n                 ConstantValue(ref v) => PatLit(const_val_to_expr(v)),\n-                _ => PatWild\n+                _ => PatWild(PatWildSingle),\n             }\n         }\n     };\n@@ -599,7 +599,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: Gc<Pat>,\n             },\n         PatBox(_) | PatTup(_) | PatRegion(..) =>\n             vec!(Single),\n-        PatWild | PatWildMulti =>\n+        PatWild(_) =>\n             vec!(),\n         PatMac(_) =>\n             cx.tcx.sess.bug(\"unexpanded macro\")\n@@ -666,10 +666,7 @@ pub fn specialize(cx: &MatchCheckCtxt, r: &[Gc<Pat>],\n         id: pat_id, node: ref node, span: pat_span\n     } = &(*raw_pat(r[col]));\n     let head: Option<Vec<Gc<Pat>>> = match node {\n-        &PatWild =>\n-            Some(Vec::from_elem(arity, wild())),\n-\n-        &PatWildMulti =>\n+        &PatWild(_) =>\n             Some(Vec::from_elem(arity, wild())),\n \n         &PatIdent(_, _, _) => {"}, {"sha": "83f4fbaed67928f21f01ae701bbf27471f4bdbb9", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -706,7 +706,7 @@ fn check_sized(tcx: &ty::ctxt, ty: ty::t, name: String, sp: Span) {\n // Check that any variables in a pattern have types with statically known size.\n fn check_pat(cx: &mut Context, pat: &Pat) {\n     let var_name = match pat.node {\n-        PatWild => Some(\"_\".to_string()),\n+        PatWild(PatWildSingle) => Some(\"_\".to_string()),\n         PatIdent(_, ref path1, _) => Some(ident_to_string(&path1.node).to_string()),\n         _ => None\n     };"}, {"sha": "52a32241faf7ce8817442ab74afa2cfe39df3687", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -1026,7 +1026,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n         op(self, cmt.clone(), pat);\n \n         match pat.node {\n-          ast::PatWild | ast::PatWildMulti => {\n+          ast::PatWild(_) => {\n             // _\n           }\n "}, {"sha": "2d9e4ee45be95708813897c89c1d53fafbb32b96", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -68,7 +68,7 @@ pub fn pat_is_binding(dm: &resolve::DefMap, pat: &Pat) -> bool {\n pub fn pat_is_binding_or_wild(dm: &resolve::DefMap, pat: &Pat) -> bool {\n     match pat.node {\n         PatIdent(..) => pat_is_binding(dm, pat),\n-        PatWild | PatWildMulti => true,\n+        PatWild(_) => true,\n         _ => false\n     }\n }\n@@ -116,7 +116,7 @@ pub fn simple_identifier<'a>(pat: &'a Pat) -> Option<&'a Ident> {\n }\n \n pub fn wild() -> Gc<Pat> {\n-    box (GC) Pat { id: 0, node: PatWild, span: DUMMY_SP }\n+    box (GC) Pat { id: 0, node: PatWild(PatWildSingle), span: DUMMY_SP }\n }\n \n pub fn def_to_path(tcx: &ty::ctxt, id: DefId) -> Path {"}, {"sha": "5334205aa52347b1d9d62fff9ac1477b45966c97", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -1392,7 +1392,7 @@ fn trans_match_inner<'a>(scope_cx: &'a Block<'a>,\n     // to the default arm.\n     let has_default = arms.last().map_or(false, |arm| {\n         arm.pats.len() == 1\n-        && arm.pats.last().unwrap().node == ast::PatWild\n+        && arm.pats.last().unwrap().node == ast::PatWild(ast::PatWildSingle)\n     });\n \n     compile_submatch(bcx, matches.as_slice(), [discr_datum.val], &chk, has_default);\n@@ -1762,7 +1762,7 @@ fn bind_irrefutable_pat<'a>(\n         ast::PatMac(..) => {\n             bcx.sess().span_bug(pat.span, \"unexpanded macro\");\n         }\n-        ast::PatWild | ast::PatWildMulti | ast::PatLit(_) | ast::PatRange(_, _) => ()\n+        ast::PatWild(_) | ast::PatLit(_) | ast::PatRange(_, _) => ()\n     }\n     return bcx;\n }"}, {"sha": "e35f60d0c3ca8f021e2601469cf63a20d4f23250", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -1032,7 +1032,7 @@ pub fn store_ty(cx: &Block, v: ValueRef, dst: ValueRef, t: ty::t) {\n \n pub fn ignore_lhs(_bcx: &Block, local: &ast::Local) -> bool {\n     match local.pat.node {\n-        ast::PatWild => true, _ => false\n+        ast::PatWild(ast::PatWildSingle) => true, _ => false\n     }\n }\n "}, {"sha": "6b3964115293032a3e78907c2dc3101c2e066059", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -3429,7 +3429,7 @@ fn populate_scope_map(cx: &CrateContext,\n                 }\n             }\n \n-            ast::PatWild | ast::PatWildMulti => {\n+            ast::PatWild(_) => {\n                 scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);\n             }\n "}, {"sha": "76823155155f613e22f2dc9f957b2a4f5ea64ba8", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -412,7 +412,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n     let tcx = pcx.fcx.ccx.tcx;\n \n     match pat.node {\n-      ast::PatWild | ast::PatWildMulti => {\n+      ast::PatWild(_) => {\n         fcx.write_ty(pat.id, expected);\n       }\n       ast::PatLit(ref lt) => {"}, {"sha": "9a48045b369bde5a8abf00cddbd1f9941d1c1caf", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -1257,7 +1257,7 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n     for i in decl.inputs.iter() {\n         match (*i).pat.node {\n             ast::PatIdent(_, _, _) => (),\n-            ast::PatWild => (),\n+            ast::PatWild(ast::PatWildSingle) => (),\n             _ => {\n                 span_err!(ccx.tcx.sess, (*i).pat.span, E0130,\n                           \"patterns aren't allowed in foreign function declarations\");"}, {"sha": "e9d5fb70281e7c8a9091646bb4404af4dc984e4c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -1959,8 +1959,8 @@ fn name_from_pat(p: &ast::Pat) -> String {\n     debug!(\"Trying to get a name from pattern: {:?}\", p);\n \n     match p.node {\n-        PatWild => \"_\".to_string(),\n-        PatWildMulti => \"..\".to_string(),\n+        PatWild(PatWildSingle) => \"_\".to_string(),\n+        PatWild(PatWildMulti) => \"..\".to_string(),\n         PatIdent(_, ref p, _) => token::get_ident(p.node).get().to_string(),\n         PatEnum(ref p, _) => path_to_string(p),\n         PatStruct(ref name, ref fields, etc) => {"}, {"sha": "2d39a47a85e674647a2a292dca84a611a18325cd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -324,9 +324,19 @@ pub enum BindingMode {\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n-pub enum Pat_ {\n-    PatWild,\n+pub enum PatWildKind {\n+    /// Represents the wildcard pattern `_`\n+    PatWildSingle,\n+\n+    /// Represents the wildcard pattern `..`\n     PatWildMulti,\n+}\n+\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+pub enum Pat_ {\n+    /// Represents a wildcard pattern (either `_` or `..`)\n+    PatWild(PatWildKind),\n+\n     /// A PatIdent may either be a new bound variable,\n     /// or a nullary enum (in which case the third field\n     /// is None)."}, {"sha": "e58187fe30d130eeb5ee19c5cdf668ffecc6cbd5", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -636,7 +636,7 @@ pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n             after.iter().all(|p| walk_pat(&**p, |p| it(p)))\n         }\n         PatMac(_) => fail!(\"attempted to analyze unexpanded pattern\"),\n-        PatWild | PatWildMulti | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |\n+        PatWild(_) | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |\n         PatEnum(_, _) => {\n             true\n         }"}, {"sha": "01d3920a25463b899b85a54bf733dd8d21291df2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -229,7 +229,7 @@ impl DummyResult {\n     pub fn raw_pat(sp: Span) -> Gc<ast::Pat> {\n         box(GC) ast::Pat {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::PatWild,\n+            node: ast::PatWild(ast::PatWildSingle),\n             span: sp,\n         }\n     }"}, {"sha": "d500600e25d0c80436cbf3e557a66d2493499c21", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -763,7 +763,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         box(GC) ast::Pat { id: ast::DUMMY_NODE_ID, node: pat, span: span }\n     }\n     fn pat_wild(&self, span: Span) -> Gc<ast::Pat> {\n-        self.pat(span, ast::PatWild)\n+        self.pat(span, ast::PatWild(ast::PatWildSingle))\n     }\n     fn pat_lit(&self, span: Span, expr: Gc<ast::Expr>) -> Gc<ast::Pat> {\n         self.pat(span, ast::PatLit(expr))"}, {"sha": "2f82702ece4975a591e3cd4455d38f428b21cdba", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -969,8 +969,7 @@ pub fn noop_fold_method<T: Folder>(m: &Method, folder: &mut T) -> SmallVector<Gc\n pub fn noop_fold_pat<T: Folder>(p: Gc<Pat>, folder: &mut T) -> Gc<Pat> {\n     let id = folder.new_id(p.id);\n     let node = match p.node {\n-        PatWild => PatWild,\n-        PatWildMulti => PatWildMulti,\n+        PatWild(k) => PatWild(k),\n         PatIdent(binding_mode, ref pth1, ref sub) => {\n             PatIdent(binding_mode,\n                      Spanned{span: folder.new_span(pth1.span),"}, {"sha": "c9fba355c4d589d4a36195bf6183369bde0207c6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -39,7 +39,7 @@ use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal}\n use ast::{MatchSeq, MatchTok, Method, MutTy, BiMul, Mutability};\n use ast::{NamedField, UnNeg, NoReturn, UnNot, P, Pat, PatEnum};\n use ast::{PatIdent, PatLit, PatRange, PatRegion, PatStruct};\n-use ast::{PatTup, PatBox, PatWild, PatWildMulti};\n+use ast::{PatTup, PatBox, PatWild, PatWildMulti, PatWildSingle};\n use ast::{BiRem, Required};\n use ast::{RetStyle, Return, BiShl, BiShr, Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, StructDef, StructField};\n@@ -2822,7 +2822,7 @@ impl<'a> Parser<'a> {\n                 if self.token == token::COMMA || self.token == token::RBRACKET {\n                     slice = Some(box(GC) ast::Pat {\n                         id: ast::DUMMY_NODE_ID,\n-                        node: PatWildMulti,\n+                        node: PatWild(PatWildMulti),\n                         span: self.span,\n                     })\n                 } else {\n@@ -2920,7 +2920,7 @@ impl<'a> Parser<'a> {\n             // parse _\n           token::UNDERSCORE => {\n             self.bump();\n-            pat = PatWild;\n+            pat = PatWild(PatWildSingle);\n             hi = self.last_span.hi;\n             return box(GC) ast::Pat {\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "ab0269f807a8d800fc5e6c3dc39bb90db83fbb13", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -1732,8 +1732,8 @@ impl<'a> State<'a> {\n         /* Pat isn't normalized, but the beauty of it\n          is that it doesn't matter */\n         match pat.node {\n-            ast::PatWild => try!(word(&mut self.s, \"_\")),\n-            ast::PatWildMulti => try!(word(&mut self.s, \"..\")),\n+            ast::PatWild(ast::PatWildSingle) => try!(word(&mut self.s, \"_\")),\n+            ast::PatWild(ast::PatWildMulti) => try!(word(&mut self.s, \"..\")),\n             ast::PatIdent(binding_mode, ref path1, sub) => {\n                 match binding_mode {\n                     ast::BindByRef(mutbl) => {\n@@ -1822,7 +1822,7 @@ impl<'a> State<'a> {\n                 for p in slice.iter() {\n                     if !before.is_empty() { try!(self.word_space(\",\")); }\n                     match **p {\n-                        ast::Pat { node: ast::PatWildMulti, .. } => {\n+                        ast::Pat { node: ast::PatWild(ast::PatWildMulti), .. } => {\n                             // this case is handled by print_pat\n                         }\n                         _ => try!(word(&mut self.s, \"..\")),"}, {"sha": "733c4bfc2b00bfa44fd7793e98f718611ed6b332", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be8f0af0393dcdb077c2f6b1653836fd3fba235/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7be8f0af0393dcdb077c2f6b1653836fd3fba235", "patch": "@@ -481,7 +481,7 @@ pub fn walk_pat<E: Clone, V: Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E)\n             visitor.visit_expr(&**lower_bound, env.clone());\n             visitor.visit_expr(&**upper_bound, env)\n         }\n-        PatWild | PatWildMulti => (),\n+        PatWild(_) => (),\n         PatVec(ref prepattern, ref slice_pattern, ref postpatterns) => {\n             for prepattern in prepattern.iter() {\n                 visitor.visit_pat(&**prepattern, env.clone())"}]}