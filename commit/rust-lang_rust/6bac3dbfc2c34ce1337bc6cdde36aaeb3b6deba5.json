{"sha": "6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYWMzZGJmYzJjMzRjZTEzMzdiYzZjZGRlMzZhYWViM2I2ZGViYTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-29T01:07:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-22T19:25:54Z"}, "message": "Add more context to diagnostic", "tree": {"sha": "5733ea746df512523060e329903c549a6e1d2ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5733ea746df512523060e329903c549a6e1d2ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5", "html_url": "https://github.com/rust-lang/rust/commit/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e08bab87dbddea55247013bab9735fa2148ec84", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e08bab87dbddea55247013bab9735fa2148ec84", "html_url": "https://github.com/rust-lang/rust/commit/4e08bab87dbddea55247013bab9735fa2148ec84"}], "stats": {"total": 114, "additions": 96, "deletions": 18}, "files": [{"sha": "36d354ea777a4ad816e59ee5c13fb9d4a98f7b4d", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 64, "deletions": 14, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5", "patch": "@@ -8,8 +8,10 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorRepor\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n-use rustc_middle::ty::{self, AssocItemContainer, RegionKind, Ty, TypeFoldable, TypeVisitor};\n-use rustc_span::Span;\n+use rustc_middle::ty::{\n+    self, AssocItem, AssocItemContainer, RegionKind, Ty, TypeFoldable, TypeVisitor,\n+};\n+use rustc_span::{MultiSpan, Span};\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait.\n@@ -51,7 +53,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         cause.span,\n                         \"...is captured and required to live as long as `'static` here\",\n                     );\n-                    if self.find_impl_on_dyn_trait(&mut err, param.param_ty, &assoc.container) {\n+                    if self.find_impl_on_dyn_trait(&mut err, param.param_ty, assoc) {\n                         err.emit();\n                         return Some(ErrorReported);\n                     } else {\n@@ -131,7 +133,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sup_origin {\n             if let ObligationCauseCode::UnifyReceiver(assoc) = &cause.code {\n-                self.find_impl_on_dyn_trait(&mut err, param.param_ty, &assoc.container);\n+                self.find_impl_on_dyn_trait(&mut err, param.param_ty, assoc);\n             }\n         }\n \n@@ -263,7 +265,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         ty: Ty<'_>,\n-        container: &AssocItemContainer,\n+        assoc: &AssocItem,\n     ) -> bool {\n         let tcx = self.tcx();\n         let mut suggested = false;\n@@ -272,7 +274,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let mut v = TraitObjectVisitor(vec![]);\n         v.visit_ty(ty);\n \n-        let container_id = match container {\n+        let container_id = match assoc.container {\n             // When the obligation comes from an `impl Foo for dyn Bar {}`, we\n             // have the `DefId` of the `trait` itself, not the relevant `impl`\n             // block. Because of this, we have to look at all the `trait`s\n@@ -284,16 +286,35 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             // have the `DefId` of the relevant `Item`, so we use it directly.\n             AssocItemContainer::ImplContainer(def_id) => {\n                 if let Some(Node::Item(Item { kind: ItemKind::Impl { self_ty, .. }, .. })) =\n-                    tcx.hir().get_if_local(*def_id)\n+                    tcx.hir().get_if_local(def_id)\n                 {\n                     for found_did in &v.0 {\n                         let mut hir_v = HirTraitObjectVisitor(vec![], *found_did);\n                         hir_v.visit_ty(self_ty);\n                         if let [span] = &hir_v.0[..] {\n+                            let mut multi_span: MultiSpan = vec![*span].into();\n+                            multi_span.push_span_label(\n+                                *span,\n+                                \"this trait object has an implicit `'static` lifetime requirement\"\n+                                    .to_string(),\n+                            );\n+                            multi_span.push_span_label(\n+                                assoc.ident.span,\n+                                \"the `'static` requirement is introduced when calling this method\"\n+                                    .to_string(),\n+                            );\n+                            err.span_note(\n+                                multi_span,\n+                                &format!(\n+                                    \"when using method `{}` on `{}`, an implicit `'static` \\\n+                                     requirement is introduced\",\n+                                    assoc.ident,\n+                                    tcx.def_path_str(*found_did),\n+                                ),\n+                            );\n                             err.span_suggestion_verbose(\n                                 span.shrink_to_hi(),\n-                                \"this `impl` introduces an implicit `'static` requirement, \\\n-                                 consider changing it\",\n+                                \"consider relaxing the implicit `'static` requirement\",\n                                 \" + '_\".to_string(),\n                                 Applicability::MaybeIncorrect,\n                             );\n@@ -316,24 +337,53 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 let impl_did = tcx.hir().local_def_id(*impl_node);\n                 match tcx.hir().get_if_local(impl_did.to_def_id()) {\n                     Some(Node::Item(Item {\n-                        kind: ItemKind::Impl { self_ty, of_trait: Some(of_trait), .. },\n+                        kind: ItemKind::Impl { self_ty, of_trait: Some(of_trait), items, .. },\n                         ..\n-                    })) if of_trait.trait_def_id() == Some(*container_id) => Some(self_ty),\n+                    })) if of_trait.trait_def_id() == Some(container_id) => Some((\n+                        self_ty,\n+                        // Get the ident of the method, in order to use its `Span`.\n+                        items\n+                            .iter()\n+                            .filter(|item| item.ident == assoc.ident)\n+                            .map(|item| item.ident)\n+                            .next()\n+                            .unwrap_or(assoc.ident),\n+                    )),\n                     _ => None,\n                 }\n             });\n \n         // Given all the `impl`s of the relevant `trait`, look for those that are implemented for\n         // the trait object in the `fn` parameter type.\n-        for self_ty in impl_self_tys {\n+        for (self_ty, method) in impl_self_tys {\n             for found_did in &v.0 {\n                 let mut hir_v = HirTraitObjectVisitor(vec![], *found_did);\n                 hir_v.visit_ty(self_ty);\n                 if let [span] = &hir_v.0[..] {\n+                    let mut multi_span: MultiSpan = vec![*span].into();\n+                    multi_span.push_span_label(\n+                        *span,\n+                        \"this trait object has an implicit `'static` lifetime requirement\"\n+                            .to_string(),\n+                    );\n+                    multi_span.push_span_label(\n+                        method.span,\n+                        \"the `'static` requirement is introduced when calling this method\"\n+                            .to_string(),\n+                    );\n+                    err.span_note(\n+                        multi_span,\n+                        &format!(\n+                            \"when using method `{}` of trait `{}` on `{}`, an implicit `'static` \\\n+                             requirement is introduced\",\n+                            method,\n+                            tcx.def_path_str(container_id),\n+                            tcx.def_path_str(*found_did),\n+                        ),\n+                    );\n                     err.span_suggestion_verbose(\n                         span.shrink_to_hi(),\n-                        \"this `impl` introduces an implicit `'static` requirement, \\\n-                            consider changing it\",\n+                        \"consider relaxing the implicit `'static` requirement\",\n                         \" + '_\".to_string(),\n                         Applicability::MaybeIncorrect,\n                     );"}, {"sha": "8f8fd9dc32402c497a631bebdbb85e8060872200", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5", "patch": "@@ -6,7 +6,14 @@ LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-help: this `impl` introduces an implicit `'static` requirement, consider changing it\n+note: when using method `use_self` of trait `foo::MyTrait` on `foo::ObjectTrait`, an implicit `'static` requirement is introduced\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:14:26\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait {\n+   |                          ^^^^^^^^^^^ this trait object has an implicit `'static` lifetime requirement\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- the `'static` requirement is introduced when calling this method\n+help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl MyTrait for dyn ObjectTrait + '_ {\n    |                                      ^^^^\n@@ -19,7 +26,14 @@ LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-help: this `impl` introduces an implicit `'static` requirement, consider changing it\n+note: when using method `use_self` on `bat::ObjectTrait`, an implicit `'static` requirement is introduced\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:64:14\n+   |\n+LL |     impl dyn ObjectTrait {\n+   |              ^^^^^^^^^^^ this trait object has an implicit `'static` lifetime requirement\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- the `'static` requirement is introduced when calling this method\n+help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl dyn ObjectTrait + '_ {\n    |                          ^^^^\n@@ -32,7 +46,14 @@ LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-help: this `impl` introduces an implicit `'static` requirement, consider changing it\n+note: when using method `use_self` of trait `bar::MyTrait` on `bar::ObjectTrait`, an implicit `'static` requirement is introduced\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:31:26\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait {\n+   |                          ^^^^^^^^^^^ this trait object has an implicit `'static` lifetime requirement\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- the `'static` requirement is introduced when calling this method\n+help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl MyTrait for dyn ObjectTrait + '_ {\n    |                                      ^^^^\n@@ -45,7 +66,14 @@ LL |     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-help: this `impl` introduces an implicit `'static` requirement, consider changing it\n+note: when using method `use_self` of trait `baz::MyTrait` on `baz::ObjectTrait`, an implicit `'static` requirement is introduced\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:48:30\n+   |\n+LL |     impl MyTrait for Box<dyn ObjectTrait> {\n+   |                              ^^^^^^^^^^^ this trait object has an implicit `'static` lifetime requirement\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- the `'static` requirement is introduced when calling this method\n+help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl MyTrait for Box<dyn ObjectTrait + '_> {\n    |                                          ^^^^"}]}