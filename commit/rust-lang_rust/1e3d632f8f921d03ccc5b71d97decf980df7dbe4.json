{"sha": "1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlM2Q2MzJmOGY5MjFkMDNjY2M1YjcxZDk3ZGVjZjk4MGRmN2RiZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-20T23:04:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-20T23:04:57Z"}, "message": "Auto merge of #88087 - jesyspa:issue-87935-box, r=jackh726\n\nCheck that a box expression's type is Sized\n\nThis resolves [issue 87935](https://github.com/rust-lang/rust/issues/87935).\n\nThis makes E0161 (move from an unsized rvalue) much less common.  I've replaced the test to use [this case](https://github.com/rust-lang/rust/blob/master/src/test/ui/object-safety/object-safety-by-value-self-use.rs), when a boxed `dyn` trait is passed by value, but that isn't an error when `unsized_locals` is enabled.  I think it may be possible to get rid of E0161 entirely by checking that case earlier, but I'm not sure if that's desirable?", "tree": {"sha": "7bc2ba77dbc9b6e8ff164d449f2d0fe6d1ac17cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bc2ba77dbc9b6e8ff164d449f2d0fe6d1ac17cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "html_url": "https://github.com/rust-lang/rust/commit/1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0035916e01d8e644ccd44554c57f0874cef8c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0035916e01d8e644ccd44554c57f0874cef8c8c", "html_url": "https://github.com/rust-lang/rust/commit/a0035916e01d8e644ccd44554c57f0874cef8c8c"}, {"sha": "c75a93023a77dc9c468519e79a1206e5b56b33b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75a93023a77dc9c468519e79a1206e5b56b33b9", "html_url": "https://github.com/rust-lang/rust/commit/c75a93023a77dc9c468519e79a1206e5b56b33b9"}], "stats": {"total": 180, "additions": 90, "deletions": 90}, "files": [{"sha": "ebd2c97698bedfb2c752ec6341847439da976f5f", "filename": "compiler/rustc_error_codes/src/error_codes/E0161.md", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0161.md", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0161.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0161.md?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -4,11 +4,18 @@ Erroneous code example:\n \n ```compile_fail,E0161\n #![feature(box_syntax)]\n+trait Bar {\n+    fn f(self);\n+}\n+\n+impl Bar for i32 {\n+    fn f(self) {}\n+}\n \n fn main() {\n-    let array: &[isize] = &[1, 2, 3];\n-    let _x: Box<[isize]> = box *array;\n-    // error: cannot move a value of type [isize]: the size of [isize] cannot\n+    let b: Box<dyn Bar> = box (0 as i32);\n+    b.f();\n+    // error: cannot move a value of type dyn Bar: the size of dyn Bar cannot\n     //        be statically determined\n }\n ```\n@@ -22,8 +29,17 @@ it around as usual. Example:\n ```\n #![feature(box_syntax)]\n \n+trait Bar {\n+    fn f(&self);\n+}\n+\n+impl Bar for i32 {\n+    fn f(&self) {}\n+}\n+\n fn main() {\n-    let array: &[isize] = &[1, 2, 3];\n-    let _x: Box<&[isize]> = box array; // ok!\n+    let b: Box<dyn Bar> = box (0 as i32);\n+    b.f();\n+    // ok!\n }\n ```"}, {"sha": "d8d98bba3fba4240614fd7a09076aba39df096ab", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -225,6 +225,8 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedReturnType,\n     /// Yield type must be `Sized`.\n     SizedYieldType,\n+    /// Box expression result type must be `Sized`.\n+    SizedBoxType,\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n     /// `[T, ..n]` implies that `T` must be `Copy`."}, {"sha": "35bb6ef6c2d6e1ee5678e18d0d3604f15f6130eb", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -1893,9 +1893,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 // While this is located in `nll::typeck` this error is not\n                 // an NLL error, it's a required check to prevent creation\n-                // of unsized rvalues in certain cases:\n-                // * operand of a box expression\n-                // * callee in a call expression\n+                // of unsized rvalues in a call expression.\n                 diag.emit();\n             }\n         }"}, {"sha": "003642ff259ebfdb4b6277e82033711345f5e4fe", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -2072,6 +2072,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::SizedYieldType => {\n                 err.note(\"the yield type of a generator must have a statically known size\");\n             }\n+            ObligationCauseCode::SizedBoxType => {\n+                err.note(\"the type of a box expression must have a statically known size\");\n+            }\n             ObligationCauseCode::AssignmentLhsSized => {\n                 err.note(\"the left-hand-side of an assignment must have a statically known size\");\n             }"}, {"sha": "9cbd3f7bb33a3f9f0b1987e90a89e24c0c80aae6", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -313,6 +313,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => NoExpectation,\n         });\n         let referent_ty = self.check_expr_with_expectation(expr, expected_inner);\n+        self.require_type_is_sized(referent_ty, expr.span, traits::SizedBoxType);\n         self.tcx.mk_box(referent_ty)\n     }\n "}, {"sha": "b52a95a701f540fe10fd63894420f7350b4367dd", "filename": "src/test/ui/dst/dst-rvalue.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -4,11 +4,9 @@\n \n pub fn main() {\n     let _x: Box<str> = box *\"hello world\";\n-    //~^ ERROR E0161\n-    //~^^ ERROR cannot move out of a shared reference\n+    //~^ ERROR E0277\n \n     let array: &[isize] = &[1, 2, 3];\n     let _x: Box<[isize]> = box *array;\n-    //~^ ERROR E0161\n-    //~^^ ERROR cannot move out of type `[isize]`, a non-copy slice\n+    //~^ ERROR E0277\n }"}, {"sha": "15830636b51fe1e5c6f22a32345384dfd51000ed", "filename": "src/test/ui/dst/dst-rvalue.stderr", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -1,31 +1,21 @@\n-error[E0161]: cannot move a value of type str: the size of str cannot be statically determined\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/dst-rvalue.rs:6:28\n    |\n LL |     let _x: Box<str> = box *\"hello world\";\n-   |                            ^^^^^^^^^^^^^^\n-\n-error[E0161]: cannot move a value of type [isize]: the size of [isize] cannot be statically determined\n-  --> $DIR/dst-rvalue.rs:11:32\n+   |                            ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-LL |     let _x: Box<[isize]> = box *array;\n-   |                                ^^^^^^\n+   = help: the trait `Sized` is not implemented for `str`\n+   = note: the type of a box expression must have a statically known size\n \n-error[E0507]: cannot move out of a shared reference\n-  --> $DIR/dst-rvalue.rs:6:28\n-   |\n-LL |     let _x: Box<str> = box *\"hello world\";\n-   |                            ^^^^^^^^^^^^^^ move occurs because value has type `str`, which does not implement the `Copy` trait\n-\n-error[E0508]: cannot move out of type `[isize]`, a non-copy slice\n-  --> $DIR/dst-rvalue.rs:11:32\n+error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n+  --> $DIR/dst-rvalue.rs:10:32\n    |\n LL |     let _x: Box<[isize]> = box *array;\n-   |                                ^^^^^^\n-   |                                |\n-   |                                cannot move out of here\n-   |                                move occurs because `*array` has type `[isize]`, which does not implement the `Copy` trait\n+   |                                ^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[isize]`\n+   = note: the type of a box expression must have a statically known size\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0161, E0507, E0508.\n-For more information about an error, try `rustc --explain E0161`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6beb29c57d52772f0bc4d98633023069760b59c0", "filename": "src/test/ui/error-codes/E0161.edition.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -1,8 +1,8 @@\n-error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n-  --> $DIR/E0161.rs:22:9\n+error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n+  --> $DIR/E0161.rs:29:5\n    |\n-LL |     box *x;\n-   |         ^^\n+LL |     x.f();\n+   |     ^\n \n error: aborting due to previous error\n "}, {"sha": "2baba998f12fe14db2938a44253951c99372ed6f", "filename": "src/test/ui/error-codes/E0161.editionul.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0035916e01d8e644ccd44554c57f0874cef8c8c/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0035916e01d8e644ccd44554c57f0874cef8c8c/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr?ref=a0035916e01d8e644ccd44554c57f0874cef8c8c", "patch": "@@ -1,9 +0,0 @@\n-error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n-  --> $DIR/E0161.rs:22:5\n-   |\n-LL |     box *x;\n-   |     ^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0161`."}, {"sha": "6beb29c57d52772f0bc4d98633023069760b59c0", "filename": "src/test/ui/error-codes/E0161.migrate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -1,8 +1,8 @@\n-error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n-  --> $DIR/E0161.rs:22:9\n+error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n+  --> $DIR/E0161.rs:29:5\n    |\n-LL |     box *x;\n-   |         ^^\n+LL |     x.f();\n+   |     ^\n \n error: aborting due to previous error\n "}, {"sha": "2baba998f12fe14db2938a44253951c99372ed6f", "filename": "src/test/ui/error-codes/E0161.migrateul.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0035916e01d8e644ccd44554c57f0874cef8c8c/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrateul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0035916e01d8e644ccd44554c57f0874cef8c8c/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrateul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrateul.stderr?ref=a0035916e01d8e644ccd44554c57f0874cef8c8c", "patch": "@@ -1,9 +0,0 @@\n-error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n-  --> $DIR/E0161.rs:22:5\n-   |\n-LL |     box *x;\n-   |     ^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0161`."}, {"sha": "6beb29c57d52772f0bc4d98633023069760b59c0", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -1,8 +1,8 @@\n-error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n-  --> $DIR/E0161.rs:22:9\n+error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n+  --> $DIR/E0161.rs:29:5\n    |\n-LL |     box *x;\n-   |         ^^\n+LL |     x.f();\n+   |     ^\n \n error: aborting due to previous error\n "}, {"sha": "2baba998f12fe14db2938a44253951c99372ed6f", "filename": "src/test/ui/error-codes/E0161.nllul.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0035916e01d8e644ccd44554c57f0874cef8c8c/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0035916e01d8e644ccd44554c57f0874cef8c8c/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr?ref=a0035916e01d8e644ccd44554c57f0874cef8c8c", "patch": "@@ -1,9 +0,0 @@\n-error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n-  --> $DIR/E0161.rs:22:5\n-   |\n-LL |     box *x;\n-   |     ^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0161`."}, {"sha": "ba74529e4b6e43f6bdf837c88333b60891bb843a", "filename": "src/test/ui/error-codes/E0161.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -8,6 +8,10 @@\n //[edition]edition:2018\n //[zflagsul]compile-flags: -Z borrowck=migrate\n //[editionul]edition:2018\n+//[migrateul] check-pass\n+//[nllul] check-pass\n+//[zflagsul] check-pass\n+//[editionul] check-pass\n \n #![allow(incomplete_features)]\n #![cfg_attr(nll, feature(nll))]\n@@ -16,12 +20,14 @@\n #![cfg_attr(zflagsul, feature(unsized_locals))]\n #![cfg_attr(nllul, feature(unsized_locals))]\n #![cfg_attr(editionul, feature(unsized_locals))]\n-#![feature(box_syntax)]\n \n-fn foo(x: Box<[i32]>) {\n-    box *x;\n+trait Bar {\n+    fn f(self);\n+}\n+\n+fn foo(x: Box<dyn Bar>) {\n+    x.f();\n     //[migrate,nll,zflags,edition]~^ ERROR E0161\n-    //[migrateul,nllul,zflagsul,editionul]~^^ ERROR E0161\n }\n \n fn main() {}"}, {"sha": "6beb29c57d52772f0bc4d98633023069760b59c0", "filename": "src/test/ui/error-codes/E0161.zflags.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -1,8 +1,8 @@\n-error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n-  --> $DIR/E0161.rs:22:9\n+error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n+  --> $DIR/E0161.rs:29:5\n    |\n-LL |     box *x;\n-   |         ^^\n+LL |     x.f();\n+   |     ^\n \n error: aborting due to previous error\n "}, {"sha": "2baba998f12fe14db2938a44253951c99372ed6f", "filename": "src/test/ui/error-codes/E0161.zflagsul.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0035916e01d8e644ccd44554c57f0874cef8c8c/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0035916e01d8e644ccd44554c57f0874cef8c8c/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr?ref=a0035916e01d8e644ccd44554c57f0874cef8c8c", "patch": "@@ -1,9 +0,0 @@\n-error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n-  --> $DIR/E0161.rs:22:5\n-   |\n-LL |     box *x;\n-   |     ^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0161`."}, {"sha": "cd2a82074ed420e237ca98173565f45f8585aaff", "filename": "src/test/ui/typeck/issue-87935-unsized-box-expr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.rs?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -0,0 +1,10 @@\n+#![feature(box_syntax)]\n+// Box expression needs to be movable, and hence has to be of a Sized type.\n+fn main() {\n+    let _x: Box<[u32]> = box { loop {} };\n+    //~^ ERROR: the size for values of type `[u32]` cannot be known at compilation time\n+\n+    // Check that a deduced size does not cause issues.\n+    let _y: Box<[u32]> = box [];\n+    let _z: Box<[u32; 0]> = box { loop {} };\n+}"}, {"sha": "9ff822352a1551ea8989a3ad3030e5c4a649c08f", "filename": "src/test/ui/typeck/issue-87935-unsized-box-expr.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3d632f8f921d03ccc5b71d97decf980df7dbe4/src%2Ftest%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.stderr?ref=1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `[u32]` cannot be known at compilation time\n+  --> $DIR/issue-87935-unsized-box-expr.rs:4:30\n+   |\n+LL |     let _x: Box<[u32]> = box { loop {} };\n+   |                              ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u32]`\n+   = note: the type of a box expression must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}