{"sha": "ff859edb8579be4694fe490249e9800cefe50c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmODU5ZWRiODU3OWJlNDY5NGZlNDkwMjQ5ZTk4MDBjZWZlNTBjOGM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-11-03T23:23:34Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-11-04T06:23:47Z"}, "message": "Ensure rustpkg test fails if tests failed\n\nIt previously set the exit status, but the main wrapper paved over that\nwith an exit code of 0.\n\nCloses #9761", "tree": {"sha": "c96f99e7fc64b123b8043d13e89412ebbeca411f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c96f99e7fc64b123b8043d13e89412ebbeca411f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff859edb8579be4694fe490249e9800cefe50c8c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff859edb8579be4694fe490249e9800cefe50c8c", "html_url": "https://github.com/rust-lang/rust/commit/ff859edb8579be4694fe490249e9800cefe50c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff859edb8579be4694fe490249e9800cefe50c8c/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702767db65c9b9d4e601ec5de836246fb9a9e462", "url": "https://api.github.com/repos/rust-lang/rust/commits/702767db65c9b9d4e601ec5de836246fb9a9e462", "html_url": "https://github.com/rust-lang/rust/commit/702767db65c9b9d4e601ec5de836246fb9a9e462"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "80f1dc2fe93859a8edbfde2072e546594911c76c", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff859edb8579be4694fe490249e9800cefe50c8c/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff859edb8579be4694fe490249e9800cefe50c8c/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=ff859edb8579be4694fe490249e9800cefe50c8c", "patch": "@@ -699,7 +699,9 @@ impl CtxMethods for BuildContext {\n                 debug!(\"test: test_exec = {}\", test_exec.display());\n                 // FIXME (#9639): This needs to handle non-utf8 paths\n                 let status = run::process_status(test_exec.as_str().unwrap(), [~\"--test\"]);\n-                os::set_exit_status(status);\n+                if status != 0 {\n+                    fail!(\"Some tests failed\");\n+                }\n             }\n             None => {\n                 error(format!(\"Internal error: test executable for package ID {} in workspace {} \\"}, {"sha": "072c165cd96e730aa9ad0b948aee0165ea0fd6c6", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff859edb8579be4694fe490249e9800cefe50c8c/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff859edb8579be4694fe490249e9800cefe50c8c/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=ff859edb8579be4694fe490249e9800cefe50c8c", "patch": "@@ -2097,6 +2097,20 @@ fn test_rustpkg_test_output() {\n     assert!(output_str.contains(\"1 passed; 0 failed; 0 ignored; 0 measured\"));\n }\n \n+#[test]\n+fn test_rustpkg_test_failure_exit_status() {\n+    let foo_id = PkgId::new(\"foo\");\n+    let foo_workspace = create_local_package(&foo_id);\n+    let foo_workspace = foo_workspace.path();\n+    writeFile(&foo_workspace.join_many([\"src\", \"foo-0.1\", \"test.rs\"]),\n+              \"#[test] fn f() { assert!('a' != 'a'); }\");\n+    let res = command_line_test_partial([~\"test\", ~\"foo\"], foo_workspace);\n+    match res {\n+        Fail(_) => {},\n+        Success(*) => fail!(\"Expected test failure but got success\")\n+    }\n+}\n+\n #[test]\n fn test_rebuild_when_needed() {\n     let foo_id = PkgId::new(\"foo\");\n@@ -2118,6 +2132,7 @@ fn test_rebuild_when_needed() {\n }\n \n #[test]\n+#[ignore] // FIXME (#10257): This doesn't work as is since a read only file can't execute\n fn test_no_rebuilding() {\n     let foo_id = PkgId::new(\"foo\");\n     let foo_workspace = create_local_package(&foo_id);"}]}