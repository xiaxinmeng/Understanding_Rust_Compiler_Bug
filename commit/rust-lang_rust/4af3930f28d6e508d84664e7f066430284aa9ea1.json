{"sha": "4af3930f28d6e508d84664e7f066430284aa9ea1", "node_id": "C_kwDOAAsO6NoAKDRhZjM5MzBmMjhkNmU1MDhkODQ2NjRlN2YwNjY0MzAyODRhYTllYTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-27T21:32:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-27T21:32:23Z"}, "message": "Rollup merge of #91641 - dtolnay:cchar-if, r=Mark-Simulacrum\n\nDefine c_char using cfg_if rather than repeating 40-line cfg\n\nLibstd has a 40-line cfg that defines the targets on which `c_char` is unsigned, and then repeats the same cfg with `not(\u2026)` for the targets on which `c_char` is signed.\n\nThis PR replaces it with a `cfg_if!` in which an `else` takes care of the signed case.\n\nI confirmed that `x.py doc library/std` inlines the type alias because c_char_definition is not a publicly accessible path:\n\n![Screenshot from 2021-12-07 13-42-07](https://user-images.githubusercontent.com/1940490/145110596-f1058406-9f32-44ff-9a81-1dfd19b4a24f.png)", "tree": {"sha": "4fc0cd03b79019381e81eb0c40e0814830e84f03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc0cd03b79019381e81eb0c40e0814830e84f03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af3930f28d6e508d84664e7f066430284aa9ea1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8w9nCRBK7hj4Ov3rIwAAlYYIAJBsqit+IAnPXcDFWOJptYrd\nrqNNpmNR076rhhLzOz/oPT9uTLnohB5IUgSJt1MXTuDLc+JmElll/o8gWbe3CD13\nbucHg559HtLc5sY5jLr+nCv6lNMONob3lvVB29C/jEqpveMdEDXVANB8QBb52Btf\ntk1ZVzOd5HASpZFnxLnPA3vKX5+UbhMytTjWhk99Op01g/ATftLYscvnsTgpXfQ1\nxYMtiJm5VzNrWmcKPYycWuVboG8a2HkLpSjM1CmbNgx1TUTErb3iS3Mpq9DD4db5\nWoJVC/7MEtYrGICbSEQMBQvYY0DM6H9WGZazrSBeik6dMz16XIcrScAuKDd8nhU=\n=vdE7\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fc0cd03b79019381e81eb0c40e0814830e84f03\nparent 21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093\nparent 4e8b91a920ce7bdb2284e39121bcda2294dc41a8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643319143 +0100\ncommitter GitHub <noreply@github.com> 1643319143 +0100\n\nRollup merge of #91641 - dtolnay:cchar-if, r=Mark-Simulacrum\n\nDefine c_char using cfg_if rather than repeating 40-line cfg\n\nLibstd has a 40-line cfg that defines the targets on which `c_char` is unsigned, and then repeats the same cfg with `not(\u2026)` for the targets on which `c_char` is signed.\n\nThis PR replaces it with a `cfg_if!` in which an `else` takes care of the signed case.\n\nI confirmed that `x.py doc library/std` inlines the type alias because c_char_definition is not a publicly accessible path:\n\n![Screenshot from 2021-12-07 13-42-07](https://user-images.githubusercontent.com/1940490/145110596-f1058406-9f32-44ff-9a81-1dfd19b4a24f.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af3930f28d6e508d84664e7f066430284aa9ea1", "html_url": "https://github.com/rust-lang/rust/commit/4af3930f28d6e508d84664e7f066430284aa9ea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af3930f28d6e508d84664e7f066430284aa9ea1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "html_url": "https://github.com/rust-lang/rust/commit/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093"}, {"sha": "4e8b91a920ce7bdb2284e39121bcda2294dc41a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8b91a920ce7bdb2284e39121bcda2294dc41a8", "html_url": "https://github.com/rust-lang/rust/commit/4e8b91a920ce7bdb2284e39121bcda2294dc41a8"}], "stats": {"total": 150, "additions": 62, "deletions": 88}, "files": [{"sha": "b6d5199341c7db7739874300b8fa8a45cc4fa7e4", "filename": "library/std/src/os/raw/mod.rs", "status": "modified", "additions": 62, "deletions": 88, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/4af3930f28d6e508d84664e7f066430284aa9ea1/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3930f28d6e508d84664e7f066430284aa9ea1/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs?ref=4af3930f28d6e508d84664e7f066430284aa9ea1", "patch": "@@ -45,94 +45,13 @@ macro_rules! type_alias {\n     }\n }\n \n-type_alias! { \"char.md\", c_char = u8, NonZero_c_char = NonZeroU8;\n-#[doc(cfg(all()))]\n-#[cfg(any(\n-    all(\n-        target_os = \"linux\",\n-        any(\n-            target_arch = \"aarch64\",\n-            target_arch = \"arm\",\n-            target_arch = \"hexagon\",\n-            target_arch = \"powerpc\",\n-            target_arch = \"powerpc64\",\n-            target_arch = \"s390x\",\n-            target_arch = \"riscv64\",\n-            target_arch = \"riscv32\"\n-        )\n-    ),\n-    all(target_os = \"android\", any(target_arch = \"aarch64\", target_arch = \"arm\")),\n-    all(target_os = \"l4re\", target_arch = \"x86_64\"),\n-    all(\n-        target_os = \"freebsd\",\n-        any(\n-            target_arch = \"aarch64\",\n-            target_arch = \"arm\",\n-            target_arch = \"powerpc\",\n-            target_arch = \"powerpc64\",\n-            target_arch = \"riscv64\"\n-        )\n-    ),\n-    all(\n-        target_os = \"netbsd\",\n-        any(target_arch = \"aarch64\", target_arch = \"arm\", target_arch = \"powerpc\")\n-    ),\n-    all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n-    all(\n-        target_os = \"vxworks\",\n-        any(\n-            target_arch = \"aarch64\",\n-            target_arch = \"arm\",\n-            target_arch = \"powerpc64\",\n-            target_arch = \"powerpc\"\n-        )\n-    ),\n-    all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n-))]}\n-type_alias! { \"char.md\", c_char = i8, NonZero_c_char = NonZeroI8;\n-#[doc(cfg(all()))]\n-#[cfg(not(any(\n-    all(\n-        target_os = \"linux\",\n-        any(\n-            target_arch = \"aarch64\",\n-            target_arch = \"arm\",\n-            target_arch = \"hexagon\",\n-            target_arch = \"powerpc\",\n-            target_arch = \"powerpc64\",\n-            target_arch = \"s390x\",\n-            target_arch = \"riscv64\",\n-            target_arch = \"riscv32\"\n-        )\n-    ),\n-    all(target_os = \"android\", any(target_arch = \"aarch64\", target_arch = \"arm\")),\n-    all(target_os = \"l4re\", target_arch = \"x86_64\"),\n-    all(\n-        target_os = \"freebsd\",\n-        any(\n-            target_arch = \"aarch64\",\n-            target_arch = \"arm\",\n-            target_arch = \"powerpc\",\n-            target_arch = \"powerpc64\",\n-            target_arch = \"riscv64\"\n-        )\n-    ),\n-    all(\n-        target_os = \"netbsd\",\n-        any(target_arch = \"aarch64\", target_arch = \"arm\", target_arch = \"powerpc\")\n-    ),\n-    all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n-    all(\n-        target_os = \"vxworks\",\n-        any(\n-            target_arch = \"aarch64\",\n-            target_arch = \"arm\",\n-            target_arch = \"powerpc64\",\n-            target_arch = \"powerpc\"\n-        )\n-    ),\n-    all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n-)))]}\n+type_alias! { \"char.md\", c_char = c_char_definition::c_char, NonZero_c_char = c_char_definition::NonZero_c_char;\n+// Make this type alias appear cfg-dependent so that Clippy does not suggest\n+// replacing `0 as c_char` with `0_i8`/`0_u8`. This #[cfg(all())] can be removed\n+// after the false positive in https://github.com/rust-lang/rust-clippy/issues/8093\n+// is fixed.\n+#[cfg(all())]\n+#[doc(cfg(all()))] }\n type_alias! { \"schar.md\", c_schar = i8, NonZero_c_schar = NonZeroI8; }\n type_alias! { \"uchar.md\", c_uchar = u8, NonZero_c_uchar = NonZeroU8; }\n type_alias! { \"short.md\", c_short = i16, NonZero_c_short = NonZeroI16; }\n@@ -180,3 +99,58 @@ pub type c_ptrdiff_t = isize;\n /// platforms where this is not the case.\n #[unstable(feature = \"c_size_t\", issue = \"88345\")]\n pub type c_ssize_t = isize;\n+\n+mod c_char_definition {\n+    cfg_if::cfg_if! {\n+        // These are the targets on which c_char is unsigned.\n+        if #[cfg(any(\n+            all(\n+                target_os = \"linux\",\n+                any(\n+                    target_arch = \"aarch64\",\n+                    target_arch = \"arm\",\n+                    target_arch = \"hexagon\",\n+                    target_arch = \"powerpc\",\n+                    target_arch = \"powerpc64\",\n+                    target_arch = \"s390x\",\n+                    target_arch = \"riscv64\",\n+                    target_arch = \"riscv32\"\n+                )\n+            ),\n+            all(target_os = \"android\", any(target_arch = \"aarch64\", target_arch = \"arm\")),\n+            all(target_os = \"l4re\", target_arch = \"x86_64\"),\n+            all(\n+                target_os = \"freebsd\",\n+                any(\n+                    target_arch = \"aarch64\",\n+                    target_arch = \"arm\",\n+                    target_arch = \"powerpc\",\n+                    target_arch = \"powerpc64\",\n+                    target_arch = \"riscv64\"\n+                )\n+            ),\n+            all(\n+                target_os = \"netbsd\",\n+                any(target_arch = \"aarch64\", target_arch = \"arm\", target_arch = \"powerpc\")\n+            ),\n+            all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n+            all(\n+                target_os = \"vxworks\",\n+                any(\n+                    target_arch = \"aarch64\",\n+                    target_arch = \"arm\",\n+                    target_arch = \"powerpc64\",\n+                    target_arch = \"powerpc\"\n+                )\n+            ),\n+            all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n+        ))] {\n+            pub type c_char = u8;\n+            pub type NonZero_c_char = core::num::NonZeroU8;\n+        } else {\n+            // On every other target, c_char is signed.\n+            pub type c_char = i8;\n+            pub type NonZero_c_char = core::num::NonZeroI8;\n+        }\n+    }\n+}"}]}