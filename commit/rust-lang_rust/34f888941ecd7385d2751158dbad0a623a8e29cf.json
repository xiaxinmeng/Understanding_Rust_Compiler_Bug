{"sha": "34f888941ecd7385d2751158dbad0a623a8e29cf", "node_id": "C_kwDOAAsO6NoAKDM0Zjg4ODk0MWVjZDczODVkMjc1MTE1OGRiYWQwYTYyM2E4ZTI5Y2Y", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-04-29T06:56:04Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:51:42Z"}, "message": "seek and write the root position to the metadata file", "tree": {"sha": "3b9bfc3e2125df959068f146d4faf31303bb00fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9bfc3e2125df959068f146d4faf31303bb00fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f888941ecd7385d2751158dbad0a623a8e29cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f888941ecd7385d2751158dbad0a623a8e29cf", "html_url": "https://github.com/rust-lang/rust/commit/34f888941ecd7385d2751158dbad0a623a8e29cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f888941ecd7385d2751158dbad0a623a8e29cf/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336af60eae7cd272f702f0420723a733008f0161", "url": "https://api.github.com/repos/rust-lang/rust/commits/336af60eae7cd272f702f0420723a733008f0161", "html_url": "https://github.com/rust-lang/rust/commit/336af60eae7cd272f702f0420723a733008f0161"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "2d038fba17ad9c2d55062e9e34aa03f975750274", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/34f888941ecd7385d2751158dbad0a623a8e29cf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f888941ecd7385d2751158dbad0a623a8e29cf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=34f888941ecd7385d2751158dbad0a623a8e29cf", "patch": "@@ -40,7 +40,7 @@ use rustc_span::{\n use rustc_target::abi::VariantIdx;\n use std::borrow::Borrow;\n use std::hash::Hash;\n-use std::io::Write;\n+use std::io::{Seek, Write};\n use std::iter;\n use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n@@ -2165,7 +2165,7 @@ impl EncodedMetadata {\n }\n \n impl<S: Encoder> Encodable<S> for EncodedMetadata {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+    fn encode(&self, s: &mut S) {\n         let slice = self.raw_data();\n         slice.encode(s)\n     }\n@@ -2248,20 +2248,25 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: impl AsRef<Path>) {\n     let root = ecx.encode_crate_root();\n \n     ecx.opaque.flush();\n-    let mut result = std::fs::read(path.as_ref()).unwrap();\n+    let mut file = std::fs::OpenOptions::new()\n+        .write(true)\n+        .open(path.as_ref())\n+        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to open the file: {}\", err)));\n \n     // Encode the root position.\n     let header = METADATA_HEADER.len();\n+    file.seek(std::io::SeekFrom::Start(header as u64))\n+        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to seek the file: {}\", err)));\n     let pos = root.position.get();\n-    result[header + 0] = (pos >> 24) as u8;\n-    result[header + 1] = (pos >> 16) as u8;\n-    result[header + 2] = (pos >> 8) as u8;\n-    result[header + 3] = (pos >> 0) as u8;\n-\n-    std::fs::write(path, &result).unwrap();\n+    file.write_all(&[(pos >> 24) as u8, (pos >> 16) as u8, (pos >> 8) as u8, (pos >> 0) as u8])\n+        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to write to the file: {}\", err)));\n \n     // Record metadata size for self-profiling\n-    tcx.prof.artifact_size(\"crate_metadata\", \"crate_metadata\", result.len() as u64);\n+    tcx.prof.artifact_size(\n+        \"crate_metadata\",\n+        \"crate_metadata\",\n+        file.metadata().unwrap().len() as u64,\n+    );\n }\n \n pub fn provide(providers: &mut Providers) {"}]}