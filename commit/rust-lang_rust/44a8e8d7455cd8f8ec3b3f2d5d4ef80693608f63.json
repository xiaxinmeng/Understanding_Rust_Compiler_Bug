{"sha": "44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YThlOGQ3NDU1Y2Q4ZjhlYzNiM2YyZDVkNGVmODA2OTM2MDhmNjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-09T12:21:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-12T14:15:27Z"}, "message": "entirely remove rustc_args_required_const attribute", "tree": {"sha": "85f45da51bcc24e5895d8e19f11969ebc688f0ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85f45da51bcc24e5895d8e19f11969ebc688f0ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "html_url": "https://github.com/rust-lang/rust/commit/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e1778ec0e7fc77ae465bd0f69ead91447be742", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e1778ec0e7fc77ae465bd0f69ead91447be742", "html_url": "https://github.com/rust-lang/rust/commit/22e1778ec0e7fc77ae465bd0f69ead91447be742"}], "stats": {"total": 258, "additions": 4, "deletions": 254}, "files": [{"sha": "530de3de9e870e9604afe0526ea6e4f59dc0a346", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n-use rustc_span::symbol::sym;\n use rustc_target::abi::{Abi, Int, LayoutOf, Variants};\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n@@ -187,9 +186,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::CastKind::Pointer(PointerCast::ReifyFnPointer) => {\n                         match *operand.layout.ty.kind() {\n                             ty::FnDef(def_id, substs) => {\n-                                if bx.cx().tcx().has_attr(def_id, sym::rustc_args_required_const) {\n-                                    bug!(\"reifying a fn ptr that requires const arguments\");\n-                                }\n                                 let instance = ty::Instance::resolve_for_fn_ptr(\n                                     bx.tcx(),\n                                     ty::ParamEnv::reveal_all(),"}, {"sha": "24b53bcf82af83240de8538ee684401c18057b70", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -469,7 +469,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_args_required_const, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n     rustc_attr!(rustc_legacy_const_generics, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n \n     // =========================================================================="}, {"sha": "848b44d13aadf7b7101aa80add0900333daf7fe0", "filename": "compiler/rustc_mir/src/interpret/cast.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::mir::CastKind;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::{IntegerExt, TyAndLayout};\n use rustc_middle::ty::{self, FloatTy, Ty, TypeAndMut};\n-use rustc_span::symbol::sym;\n use rustc_target::abi::{Integer, LayoutOf, Variants};\n \n use super::{\n@@ -49,13 +48,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // All reifications must be monomorphic, bail out otherwise.\n                         ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n \n-                        if self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n-                            span_bug!(\n-                                self.cur_span(),\n-                                \"reifying a fn ptr that requires const arguments\"\n-                            );\n-                        }\n-\n                         let instance = ty::Instance::resolve_for_fn_ptr(\n                             *self.tcx,\n                             self.param_env,"}, {"sha": "23c0fe97c5f693b7657f316f48299063518d274d", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -305,7 +305,6 @@ where\n     let base_intern_mode = match intern_kind {\n         InternKind::Static(mutbl) => InternMode::Static(mutbl),\n         // `Constant` includes array lengths.\n-        // `Promoted` includes non-`Copy` array initializers and `rustc_args_required_const` arguments.\n         InternKind::Constant | InternKind::Promoted => InternMode::Const,\n     };\n "}, {"sha": "f6b1323e107977445a81679dbf846e3afe430d97", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -32,8 +32,8 @@ use crate::transform::MirPass;\n \n /// A `MirPass` for promotion.\n ///\n-/// Promotion is the extraction of promotable temps into separate MIR bodies. This pass also emits\n-/// errors when promotion of `#[rustc_args_required_const]` arguments fails.\n+/// Promotion is the extraction of promotable temps into separate MIR bodies so they can have\n+/// `'static` lifetime.\n ///\n /// After this pass is run, `promoted_fragments` will hold the MIR body corresponding to each\n /// newly created `Constant`."}, {"sha": "bf574bbfbb5aefc9f23c9f7f43f800ef90d09281", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 79, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -13,9 +13,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{\n-    self, FnSig, ForeignItem, ForeignItemKind, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID,\n-};\n+use rustc_hir::{self, FnSig, ForeignItem, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_hir::{MethodKind, Target};\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, UNUSED_ATTRIBUTES,\n@@ -81,9 +79,6 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::doc => self.check_doc_attrs(attr, hir_id, target, &mut specified_inline),\n                 sym::no_link => self.check_no_link(hir_id, &attr, span, target),\n                 sym::export_name => self.check_export_name(hir_id, &attr, span, target),\n-                sym::rustc_args_required_const => {\n-                    self.check_rustc_args_required_const(&attr, span, target, item)\n-                }\n                 sym::rustc_layout_scalar_valid_range_start\n                 | sym::rustc_layout_scalar_valid_range_end => {\n                     self.check_rustc_layout_scalar_valid_range(&attr, span, target)\n@@ -948,79 +943,6 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    /// Checks if `#[rustc_args_required_const]` is applied to a function and has a valid argument.\n-    fn check_rustc_args_required_const(\n-        &self,\n-        attr: &Attribute,\n-        span: &Span,\n-        target: Target,\n-        item: Option<ItemLike<'_>>,\n-    ) -> bool {\n-        let is_function = matches!(target, Target::Fn | Target::Method(..) | Target::ForeignFn);\n-        if !is_function {\n-            self.tcx\n-                .sess\n-                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                .span_label(*span, \"not a function\")\n-                .emit();\n-            return false;\n-        }\n-\n-        let list = match attr.meta_item_list() {\n-            // The attribute form is validated on AST.\n-            None => return false,\n-            Some(it) => it,\n-        };\n-\n-        let mut invalid_args = vec![];\n-        for meta in list {\n-            if let Some(LitKind::Int(val, _)) = meta.literal().map(|lit| &lit.kind) {\n-                if let Some(ItemLike::Item(Item {\n-                    kind: ItemKind::Fn(FnSig { decl, .. }, ..),\n-                    ..\n-                }))\n-                | Some(ItemLike::ForeignItem(ForeignItem {\n-                    kind: ForeignItemKind::Fn(decl, ..),\n-                    ..\n-                })) = item\n-                {\n-                    let arg_count = decl.inputs.len() as u128;\n-                    if *val >= arg_count {\n-                        let span = meta.span();\n-                        self.tcx\n-                            .sess\n-                            .struct_span_err(span, \"index exceeds number of arguments\")\n-                            .span_label(\n-                                span,\n-                                format!(\n-                                    \"there {} only {} argument{}\",\n-                                    if arg_count != 1 { \"are\" } else { \"is\" },\n-                                    arg_count,\n-                                    pluralize!(arg_count)\n-                                ),\n-                            )\n-                            .emit();\n-                        return false;\n-                    }\n-                } else {\n-                    bug!(\"should be a function item\");\n-                }\n-            } else {\n-                invalid_args.push(meta.span());\n-            }\n-        }\n-\n-        if !invalid_args.is_empty() {\n-            self.tcx\n-                .sess\n-                .struct_span_err(invalid_args, \"arguments should be non-negative integers\")\n-                .emit();\n-            false\n-        } else {\n-            true\n-        }\n-    }\n-\n     fn check_rustc_layout_scalar_valid_range(\n         &self,\n         attr: &Attribute,"}, {"sha": "a65c66f8ee7a821777cd95945160d6cf173dd2e1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -992,7 +992,6 @@ symbols! {\n         rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_unstable,\n-        rustc_args_required_const,\n         rustc_attrs,\n         rustc_builtin_macro,\n         rustc_capture_analysis,"}, {"sha": "4de8216884a6877ca81dc6d3bd5f875795973cdf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -1537,8 +1537,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        self.check_rustc_args_require_const(def_id, hir_id, span);\n-\n         debug!(\"instantiate_value_path: type of {:?} is {:?}\", hir_id, ty_substituted);\n         self.write_substs(hir_id, substs);\n "}, {"sha": "49aea19c8d099970e72e2ec57fb5ddbc58478f0c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::Session;\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::Ident;\n use rustc_span::{self, MultiSpan, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, StatementAsExpression};\n \n@@ -720,34 +720,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    pub(in super::super) fn check_rustc_args_require_const(\n-        &self,\n-        def_id: DefId,\n-        hir_id: hir::HirId,\n-        span: Span,\n-    ) {\n-        // We're only interested in functions tagged with\n-        // #[rustc_args_required_const], so ignore anything that's not.\n-        if !self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n-            return;\n-        }\n-\n-        // If our calling expression is indeed the function itself, we're good!\n-        // If not, generate an error that this can only be called directly.\n-        if let Node::Expr(expr) = self.tcx.hir().get(self.tcx.hir().get_parent_node(hir_id)) {\n-            if let ExprKind::Call(ref callee, ..) = expr.kind {\n-                if callee.hir_id == hir_id {\n-                    return;\n-                }\n-            }\n-        }\n-\n-        self.tcx.sess.span_err(\n-            span,\n-            \"this function can only be invoked directly, not through a function pointer\",\n-        );\n-    }\n-\n     /// A common error is to add an extra semicolon:\n     ///\n     /// ```"}, {"sha": "9ee2777a647e0202ac9d44fd94c9db2de886336d", "filename": "src/test/ui/consts/const-eval/double_promotion.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs?ref=22e1778ec0e7fc77ae465bd0f69ead91447be742", "patch": "@@ -1,17 +0,0 @@\n-// check-pass\n-\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)]\n-pub const fn a(value: u8) -> u8 {\n-    value\n-}\n-\n-#[rustc_args_required_const(0)]\n-pub fn b(_: u8) {\n-    unimplemented!()\n-}\n-\n-fn main() {\n-    let _ = b(a(0));\n-}"}, {"sha": "99508baeb0070b56d002896f8def14877ae83640", "filename": "src/test/ui/invalid/invalid-rustc_args_required_const-arguments.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.rs?ref=22e1778ec0e7fc77ae465bd0f69ead91447be742", "patch": "@@ -1,32 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)] //~ ERROR index exceeds number of arguments\n-fn foo1() {}\n-\n-#[rustc_args_required_const(1)] //~ ERROR index exceeds number of arguments\n-fn foo2(_: u8) {}\n-\n-#[rustc_args_required_const(a)] //~ ERROR arguments should be non-negative integers\n-fn foo4() {}\n-\n-#[rustc_args_required_const(1, a, 2, b)] //~ ERROR arguments should be non-negative integers\n-fn foo5(_: u8, _: u8, _: u8) {}\n-\n-#[rustc_args_required_const(0)] //~ ERROR attribute should be applied to a function\n-struct S;\n-\n-#[rustc_args_required_const(0usize)] //~ ERROR suffixed literals are not allowed in attributes\n-fn foo6(_: u8) {}\n-\n-extern {\n-    #[rustc_args_required_const(1)] //~ ERROR index exceeds number of arguments\n-    fn foo7(_: u8);\n-}\n-\n-#[rustc_args_required_const] //~ ERROR malformed `rustc_args_required_const` attribute\n-fn bar1() {}\n-\n-#[rustc_args_required_const = 1] //~ ERROR malformed `rustc_args_required_const` attribute\n-fn bar2() {}\n-\n-fn main() {}"}, {"sha": "932344f0a33c5877fa1bfd357714e180bcc146ff", "filename": "src/test/ui/invalid/invalid-rustc_args_required_const-arguments.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_args_required_const-arguments.stderr?ref=22e1778ec0e7fc77ae465bd0f69ead91447be742", "patch": "@@ -1,60 +0,0 @@\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:18:29\n-   |\n-LL | #[rustc_args_required_const(0usize)]\n-   |                             ^^^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: malformed `rustc_args_required_const` attribute input\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:26:1\n-   |\n-LL | #[rustc_args_required_const]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_args_required_const(N)]`\n-\n-error: malformed `rustc_args_required_const` attribute input\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:29:1\n-   |\n-LL | #[rustc_args_required_const = 1]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_args_required_const(N)]`\n-\n-error: index exceeds number of arguments\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:3:29\n-   |\n-LL | #[rustc_args_required_const(0)]\n-   |                             ^ there are only 0 arguments\n-\n-error: index exceeds number of arguments\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:6:29\n-   |\n-LL | #[rustc_args_required_const(1)]\n-   |                             ^ there is only 1 argument\n-\n-error: arguments should be non-negative integers\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:9:29\n-   |\n-LL | #[rustc_args_required_const(a)]\n-   |                             ^\n-\n-error: arguments should be non-negative integers\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:12:32\n-   |\n-LL | #[rustc_args_required_const(1, a, 2, b)]\n-   |                                ^     ^\n-\n-error: attribute should be applied to a function\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:15:1\n-   |\n-LL | #[rustc_args_required_const(0)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | struct S;\n-   | --------- not a function\n-\n-error: index exceeds number of arguments\n-  --> $DIR/invalid-rustc_args_required_const-arguments.rs:22:33\n-   |\n-LL |     #[rustc_args_required_const(1)]\n-   |                                 ^ there is only 1 argument\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "06457bc5ca65a1465da34ca75195ab43752445cf", "filename": "src/test/ui/rustc-args-required-const2.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Frustc-args-required-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Frustc-args-required-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const2.rs?ref=22e1778ec0e7fc77ae465bd0f69ead91447be742", "patch": "@@ -1,10 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-#[rustc_args_required_const(0)]\n-fn foo(_a: i32) {\n-}\n-\n-fn main() {\n-    let a = foo; //~ ERROR: this function can only be invoked directly\n-    a(2);\n-}"}, {"sha": "a8906ad3bc55123da6e7310b1c6a4ccdc2c00b57", "filename": "src/test/ui/rustc-args-required-const2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Frustc-args-required-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22e1778ec0e7fc77ae465bd0f69ead91447be742/src%2Ftest%2Fui%2Frustc-args-required-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const2.stderr?ref=22e1778ec0e7fc77ae465bd0f69ead91447be742", "patch": "@@ -1,8 +0,0 @@\n-error: this function can only be invoked directly, not through a function pointer\n-  --> $DIR/rustc-args-required-const2.rs:8:13\n-   |\n-LL |     let a = foo;\n-   |             ^^^\n-\n-error: aborting due to previous error\n-"}]}