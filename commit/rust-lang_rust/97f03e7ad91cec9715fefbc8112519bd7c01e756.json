{"sha": "97f03e7ad91cec9715fefbc8112519bd7c01e756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZjAzZTdhZDkxY2VjOTcxNWZlZmJjODExMjUxOWJkN2MwMWU3NTY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-20T00:00:06Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-20T00:00:06Z"}, "message": "Rollup merge of #23489 - michaelwoerister:span-artihmetic-overflow-bug, r=alexcrichton\n\n This should solve issues #23115, #23469, and #23407.\n\nAs the title says, this is just a workaround. The underlying problem is that macro expansion can produce invalid spans. I've opened issue #23480 so we don't forget about that.", "tree": {"sha": "374c2f155453c909a26b3c3bb4aba4fa5bf2661c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374c2f155453c909a26b3c3bb4aba4fa5bf2661c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97f03e7ad91cec9715fefbc8112519bd7c01e756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97f03e7ad91cec9715fefbc8112519bd7c01e756", "html_url": "https://github.com/rust-lang/rust/commit/97f03e7ad91cec9715fefbc8112519bd7c01e756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97f03e7ad91cec9715fefbc8112519bd7c01e756/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f53b943f94b338e4c5401f1ce9efbe7da92b0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f53b943f94b338e4c5401f1ce9efbe7da92b0c5", "html_url": "https://github.com/rust-lang/rust/commit/7f53b943f94b338e4c5401f1ce9efbe7da92b0c5"}, {"sha": "1ea971ff87e7aee729c7330a394b975fb3a598b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea971ff87e7aee729c7330a394b975fb3a598b1", "html_url": "https://github.com/rust-lang/rust/commit/1ea971ff87e7aee729c7330a394b975fb3a598b1"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "8b2a94025f337441a3fa44b86d7e9d4dd549b228", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97f03e7ad91cec9715fefbc8112519bd7c01e756/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f03e7ad91cec9715fefbc8112519bd7c01e756/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=97f03e7ad91cec9715fefbc8112519bd7c01e756", "patch": "@@ -235,12 +235,27 @@ impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> {\n     pub fn tr_span(&self, span: Span) -> Span {\n         let imported_filemaps = &self.cdata.codemap_import_info[..];\n \n+        let span = if span.lo > span.hi {\n+            // Currently macro expansion sometimes produces invalid Span values\n+            // where lo > hi. In order not to crash the compiler when trying to\n+            // translate these values, let's transform them into something we\n+            // can handle (and which will produce useful debug locations at\n+            // least some of the time).\n+            // This workaround is only necessary as long as macro expansion is\n+            // not fixed. FIXME(#23480)\n+            codemap::mk_sp(span.lo, span.lo)\n+        } else {\n+            span\n+        };\n+\n         let filemap_index = {\n             // Optimize for the case that most spans within a translated item\n             // originate from the same filemap.\n             let last_filemap_index = self.last_filemap_index.get();\n \n             if span.lo >= imported_filemaps[last_filemap_index].original_start_pos &&\n+               span.lo <= imported_filemaps[last_filemap_index].original_end_pos &&\n+               span.hi >= imported_filemaps[last_filemap_index].original_start_pos &&\n                span.hi <= imported_filemaps[last_filemap_index].original_end_pos {\n                 last_filemap_index\n             } else {"}, {"sha": "b37533d2da76337c6eb1bdccd2c47341aef82870", "filename": "src/test/auxiliary/crate_with_invalid_spans.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97f03e7ad91cec9715fefbc8112519bd7c01e756/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f03e7ad91cec9715fefbc8112519bd7c01e756/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans.rs?ref=97f03e7ad91cec9715fefbc8112519bd7c01e756", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+// no-prefer-dynamic\n+\n+// compile-flags: -g\n+\n+#[macro_use]\n+mod crate_with_invalid_spans_macros;\n+\n+pub fn exported_generic<T>(x: T, y: u32) -> (T, u32) {\n+    // Using the add1 macro will produce an invalid span, because the `y` passed\n+    // to the macro will have a span from this file, but the rest of the code\n+    // generated from the macro will have spans from the macro-defining file.\n+    // The AST node for the (1 + y) expression generated by the macro will then\n+    // take it's `lo` span bound from the `1` literal in the macro-defining file\n+    // and it's `hi` bound from `y` in this file, which should be lower than the\n+    // `lo` and even lower than the lower bound of the FileMap it is supposedly\n+    // contained in because the FileMap for this file was allocated earlier than\n+    // the FileMap of the macro-defining file.\n+    return (x, add1!(y));\n+}"}, {"sha": "112315af8448555ba326ad700118bb96abc57a21", "filename": "src/test/auxiliary/crate_with_invalid_spans_macros.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97f03e7ad91cec9715fefbc8112519bd7c01e756/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f03e7ad91cec9715fefbc8112519bd7c01e756/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate_with_invalid_spans_macros.rs?ref=97f03e7ad91cec9715fefbc8112519bd7c01e756", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! add1 {\n+    ($e:expr) => ({\n+        let a = 1 + $e;\n+        let b = $e + 1;\n+        a + b - 1\n+    })\n+}"}, {"sha": "a949f25f41e095a5e83f86d27f3724b1c6ace29b", "filename": "src/test/run-pass/import-crate-with-invalid-spans.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97f03e7ad91cec9715fefbc8112519bd7c01e756/src%2Ftest%2Frun-pass%2Fimport-crate-with-invalid-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f03e7ad91cec9715fefbc8112519bd7c01e756/src%2Ftest%2Frun-pass%2Fimport-crate-with-invalid-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-crate-with-invalid-spans.rs?ref=97f03e7ad91cec9715fefbc8112519bd7c01e756", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:crate_with_invalid_spans.rs\n+\n+extern crate crate_with_invalid_spans;\n+\n+fn main() {\n+    // The AST of `exported_generic` stored in crate_with_invalid_spans's\n+    // metadata should contain an invalid span where span.lo > span.hi.\n+    // Let's make sure the compiler doesn't crash when encountering this.\n+    let _ = crate_with_invalid_spans::exported_generic(32u32, 7u32);\n+}"}]}