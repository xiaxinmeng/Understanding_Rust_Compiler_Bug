{"sha": "95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZjA0ZjgwZmI1MGRjM2MzNjQ4Y2JkZDRlY2VmYjlmZTUwOGYzMDM=", "commit": {"author": {"name": "messense", "email": "messense@icloud.com", "date": "2017-07-03T04:37:14Z"}, "committer": {"name": "messense", "email": "messense@icloud.com", "date": "2017-07-03T04:37:14Z"}, "message": "Update ui tests", "tree": {"sha": "19e4b62d7da441c082058174196e0a9b2b2ec4e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e4b62d7da441c082058174196e0a9b2b2ec4e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGWGgMoNGfisvor0Vu0GooscWzKkFAllZyfoACgkQu0GooscW\nzKkhcRAAl7mF1PvGobHppFqxUtgQuAjQQlZCzDgwrFurHdhRbX9Qbjl6CSMcAoP0\nqpg2U618TVGTb7fNiqsgYVzEnDBYgAO6HzNAmP5semsWcKfJa52N77RcRQHRE405\nGXPZBYAfSMe2jqiFuyEwRPObFaC1uAObTIon4RLNyxI3sVLXVGV7hSCoE416oJn1\n2guH7mkTLsg3s7BXCtFWtr0CzQmwBIByJO3mPD7c76hUwXf0mcGnhdnJ9Thvyomk\nr8at3qvE0H5a5dyr1R5XCzBH6gsngrUohuVG4lD+75seWX2q8tGG3ehMrqV63swx\nRDG3MDGg0lC8WjVylqgg8efXlVwyv5CJIh4B3ebn9gxVmsL0vAn2HklYgfTHphYw\nA8sowQIhrvtlnnOjg6XbI+Xe8YK5ivSk+bYTAfTbQ+pv5UgV+6Br6txsB5DAi3Mv\nJcGMVA84c1ktGwwp9JntNuARjOREXtP8UbNSybHG4LzLoIWDcO6jp3YUaCzi+c3O\n+I1N4SUdXJz0zGUgSdqb+Z4rK7GiHsGUfG38/qwieRHRuk4nHI3lxVDNlf0+O/NV\nVqBI282i6aO4uzxNBB/llIq5jYQfXo0/XY0ThIGPU6Yn3CeOOIHqQCX4GfGGjG3I\n397mKllH9QPuqo7r7Qahv0Nvw/cLoqSqE79lsBP32z5dRF6sI4Q=\n=2VHz\n-----END PGP SIGNATURE-----", "payload": "tree 19e4b62d7da441c082058174196e0a9b2b2ec4e9\nparent edadbff4eadae43ec5f6845c69ad653566c0e6f3\nauthor messense <messense@icloud.com> 1499056634 +0800\ncommitter messense <messense@icloud.com> 1499056634 +0800\n\nUpdate ui tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "html_url": "https://github.com/rust-lang/rust/commit/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/comments", "author": {"login": "messense", "id": 1556054, "node_id": "MDQ6VXNlcjE1NTYwNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1556054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/messense", "html_url": "https://github.com/messense", "followers_url": "https://api.github.com/users/messense/followers", "following_url": "https://api.github.com/users/messense/following{/other_user}", "gists_url": "https://api.github.com/users/messense/gists{/gist_id}", "starred_url": "https://api.github.com/users/messense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/messense/subscriptions", "organizations_url": "https://api.github.com/users/messense/orgs", "repos_url": "https://api.github.com/users/messense/repos", "events_url": "https://api.github.com/users/messense/events{/privacy}", "received_events_url": "https://api.github.com/users/messense/received_events", "type": "User", "site_admin": false}, "committer": {"login": "messense", "id": 1556054, "node_id": "MDQ6VXNlcjE1NTYwNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1556054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/messense", "html_url": "https://github.com/messense", "followers_url": "https://api.github.com/users/messense/followers", "following_url": "https://api.github.com/users/messense/following{/other_user}", "gists_url": "https://api.github.com/users/messense/gists{/gist_id}", "starred_url": "https://api.github.com/users/messense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/messense/subscriptions", "organizations_url": "https://api.github.com/users/messense/orgs", "repos_url": "https://api.github.com/users/messense/repos", "events_url": "https://api.github.com/users/messense/events{/privacy}", "received_events_url": "https://api.github.com/users/messense/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edadbff4eadae43ec5f6845c69ad653566c0e6f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/edadbff4eadae43ec5f6845c69ad653566c0e6f3", "html_url": "https://github.com/rust-lang/rust/commit/edadbff4eadae43ec5f6845c69ad653566c0e6f3"}], "stats": {"total": 74, "additions": 8, "deletions": 66}, "files": [{"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui-posix/conf_non_existant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui-posix%2Fconf_non_existant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui-posix%2Fconf_non_existant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fconf_non_existant.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -1,4 +1,4 @@\n error: error reading Clippy's configuration file: No such file or directory (os error 2)\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "269ff9a0eef5ac04deb43c57cf6027e92b3a9018", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -15,5 +15,5 @@ error[E0308]: mismatched types\n   = note: expected type `u32`\n              found type `{integer}`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "92b3c82d45831eb04d640d8b3ecb903af85ae300", "filename": "tests/ui/conf_bad_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_bad_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_bad_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -10,5 +10,5 @@ note: Clippy will use default configuration\n 4 | #![plugin(clippy(conf_file))]\n   |                  ^^^^^^^^^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "8ee392f8924820f46a2ef6edb6d2a1c6340153d5", "filename": "tests/ui/conf_bad_toml.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -1,4 +1,4 @@\n error: error reading Clippy's configuration file: expected an equals, found an identifier at line 1\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "5cb4d05afef2770fa0e343af07e503b8e40c047f", "filename": "tests/ui/conf_bad_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -1,4 +1,4 @@\n error: error reading Clippy's configuration file: invalid type: integer `42`, expected a sequence\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "b6782ae4212e28aa663a6046ce2aee682dafaa55", "filename": "tests/ui/conf_french_blacklisted_name.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -11,46 +11,34 @@ warning: use of a blacklisted/placeholder name `toto`\n    |\n 12 |     let toto = 42;\n    |         ^^^^\n-   |\n-   = note: #[warn(blacklisted_name)] on by default\n \n warning: use of a blacklisted/placeholder name `tata`\n   --> $DIR/conf_french_blacklisted_name.rs:13:9\n    |\n 13 |     let tata = 42;\n    |         ^^^^\n-   |\n-   = note: #[warn(blacklisted_name)] on by default\n \n warning: use of a blacklisted/placeholder name `titi`\n   --> $DIR/conf_french_blacklisted_name.rs:14:9\n    |\n 14 |     let titi = 42;\n    |         ^^^^\n-   |\n-   = note: #[warn(blacklisted_name)] on by default\n \n warning: use of a blacklisted/placeholder name `toto`\n   --> $DIR/conf_french_blacklisted_name.rs:20:10\n    |\n 20 |         (toto, Some(tata), titi @ Some(_)) => (),\n    |          ^^^^\n-   |\n-   = note: #[warn(blacklisted_name)] on by default\n \n warning: use of a blacklisted/placeholder name `tata`\n   --> $DIR/conf_french_blacklisted_name.rs:20:21\n    |\n 20 |         (toto, Some(tata), titi @ Some(_)) => (),\n    |                     ^^^^\n-   |\n-   = note: #[warn(blacklisted_name)] on by default\n \n warning: use of a blacklisted/placeholder name `titi`\n   --> $DIR/conf_french_blacklisted_name.rs:20:28\n    |\n 20 |         (toto, Some(tata), titi @ Some(_)) => (),\n    |                            ^^^^\n-   |\n-   = note: #[warn(blacklisted_name)] on by default\n "}, {"sha": "3bf53f10cce47aae44724247807ae20ca7a44f90", "filename": "tests/ui/conf_path_non_string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_path_non_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_path_non_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -10,5 +10,5 @@ note: Clippy will use default configuration\n 3 | #![plugin(clippy(conf_file=42))]\n   |                            ^^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "bd16dfd47da9e195f10a5bc48260b055e60f03ed", "filename": "tests/ui/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -1,4 +1,4 @@\n error: error reading Clippy's configuration file: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `third-party`\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "cadd7cd417d4cc8187ca1831f32ea2a9ffb0e91a", "filename": "tests/ui/ices.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fices.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Fices.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fices.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -4,5 +4,5 @@ error: cannot find macro `fubar!` in this scope\n 3 | fubar!();\n   | ^^^^^\n \n-error: aborting due to previous error(s)\n+error: aborting due to previous error\n "}, {"sha": "f878b6ad1730a7f57f9cd1e6b7c4c70b3fae01e7", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -11,24 +11,18 @@ warning: transmute from a reference to a pointer\n    |\n 26 |     let _: *const T = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `t as *const T`\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from a reference to a pointer\n   --> $DIR/transmute.rs:28:21\n    |\n 28 |     let _: *mut T = core::intrinsics::transmute(t);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `t as *const T as *mut T`\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from a reference to a pointer\n   --> $DIR/transmute.rs:30:23\n    |\n 30 |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `t as *const T as *const U`\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n   --> $DIR/transmute.rs:35:17\n@@ -43,128 +37,96 @@ warning: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n    |\n 38 |     let _: &mut T = std::mem::transmute(m);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try `&mut *m`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n   --> $DIR/transmute.rs:41:17\n    |\n 41 |     let _: &T = std::mem::transmute(m);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `&*m`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n   --> $DIR/transmute.rs:44:21\n    |\n 44 |     let _: &mut T = std::mem::transmute(p as *mut T);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&mut *(p as *mut T)`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n   --> $DIR/transmute.rs:47:17\n    |\n 47 |     let _: &T = std::mem::transmute(o);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(o as *const T)`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n   --> $DIR/transmute.rs:50:21\n    |\n 50 |     let _: &mut T = std::mem::transmute(om);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try `&mut *(om as *mut T)`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n   --> $DIR/transmute.rs:53:17\n    |\n 53 |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(om as *const T)`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, u8>`)\n   --> $DIR/transmute.rs:64:32\n    |\n 64 |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(raw as *const Foo<_>)`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, &u8>`)\n   --> $DIR/transmute.rs:66:33\n    |\n 66 |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(raw as *const Foo<&_>)`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n   --> $DIR/transmute.rs:70:14\n    |\n 70 |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `&*(raw as *const u8)`\n-   |\n-   = note: #[warn(transmute_ptr_to_ref)] on by default\n \n warning: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:76:27\n    |\n 76 |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:78:27\n    |\n 78 |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:80:27\n    |\n 80 |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:82:27\n    |\n 82 |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:84:27\n    |\n 84 |         let _: Vec<i32> = my_transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from an integer to a pointer\n   --> $DIR/transmute.rs:92:31\n    |\n 92 |         let _: *const usize = std::mem::transmute(5_isize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `5_isize as *const usize`\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from an integer to a pointer\n   --> $DIR/transmute.rs:96:31\n    |\n 96 |         let _: *const usize = std::mem::transmute(1+1usize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `(1+1usize) as *const usize`\n-   |\n-   = note: #[warn(useless_transmute)] on by default\n \n warning: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n    --> $DIR/transmute.rs:111:24\n@@ -179,22 +141,16 @@ warning: transmute from a type (`*mut Usize`) to the type that it points to (`Us\n     |\n 113 |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: #[warn(crosspointer_transmute)] on by default\n \n warning: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n    --> $DIR/transmute.rs:115:31\n     |\n 115 |         let _: *const Usize = core::intrinsics::transmute(my_int());\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: #[warn(crosspointer_transmute)] on by default\n \n warning: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n    --> $DIR/transmute.rs:117:29\n     |\n 117 |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: #[warn(crosspointer_transmute)] on by default\n "}, {"sha": "595696180457c11612aba6cc2bf0a7bef170739d", "filename": "tests/ui/transmute_64bit.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Ftransmute_64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f04f80fb50dc3c3648cbdd4ecefb9fe508f303/tests%2Fui%2Ftransmute_64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.stderr?ref=95f04f80fb50dc3c3648cbdd4ecefb9fe508f303", "patch": "@@ -11,6 +11,4 @@ warning: transmute from a `f64` to a pointer\n    |\n 11 |         let _: *mut usize = std::mem::transmute(6.0f64);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(wrong_transmute)] on by default\n "}]}