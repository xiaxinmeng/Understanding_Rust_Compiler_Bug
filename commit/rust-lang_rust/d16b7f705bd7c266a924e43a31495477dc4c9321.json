{"sha": "d16b7f705bd7c266a924e43a31495477dc4c9321", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNmI3ZjcwNWJkN2MyNjZhOTI0ZTQzYTMxNDk1NDc3ZGM0YzkzMjE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-06T04:38:45Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-06T04:38:45Z"}, "message": "Revert \"Auto merge of #63649 - tlively:emscripten-upstream-upgrade, r=alexcrichton\"\n\nThis reverts commit 7870050796e5904a0fc85ecbe6fa6dde1cfe0c91, reversing\nchanges made to 2e7244807a7878f6eca3eb7d97ae9b413aa49014.", "tree": {"sha": "6ea9a6b182816a2b05e5d82d64f03bee1208e938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea9a6b182816a2b05e5d82d64f03bee1208e938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d16b7f705bd7c266a924e43a31495477dc4c9321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d16b7f705bd7c266a924e43a31495477dc4c9321", "html_url": "https://github.com/rust-lang/rust/commit/d16b7f705bd7c266a924e43a31495477dc4c9321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d16b7f705bd7c266a924e43a31495477dc4c9321/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "html_url": "https://github.com/rust-lang/rust/commit/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91"}], "stats": {"total": 914, "additions": 537, "deletions": 377}, "files": [{"sha": "848147c2974c1d77bc1a7c7c4e88c6cb7bef9cfe", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -377,7 +377,6 @@\n # but you can also optionally enable the \"emscripten\" backend for asm.js or\n # make this an empty array (but that probably won't get too far in the\n # bootstrap)\n-# FIXME: remove the obsolete emscripten backend option.\n #codegen-backends = [\"llvm\"]\n \n # This is the name of the directory in which codegen backends will get installed"}, {"sha": "5d586f0c461dbd722c1d3d9aec881049c2a5b0d5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -970,7 +970,6 @@ impl<'a> Builder<'a> {\n                 Some(\"-Wl,-rpath,@loader_path/../lib\")\n             } else if !target.contains(\"windows\") &&\n                       !target.contains(\"wasm32\") &&\n-                      !target.contains(\"emscripten\") &&\n                       !target.contains(\"fuchsia\") {\n                 Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n             } else {"}, {"sha": "b7ce9c7b39709e34d4e30d987ff5dd5561aa4d4b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1047,11 +1047,10 @@ impl Step for Compiletest {\n         // Also provide `rust_test_helpers` for the host.\n         builder.ensure(native::TestHelpers { target: compiler.host });\n \n-        // As well as the target, except for plain wasm32, which can't build it\n-        if !target.contains(\"wasm32\") || target.contains(\"emscripten\") {\n+        // wasm32 can't build the test helpers\n+        if !target.contains(\"wasm32\") {\n             builder.ensure(native::TestHelpers { target });\n         }\n-\n         builder.ensure(RemoteCopyLibs { compiler, target });\n \n         let mut cmd = builder.tool_cmd(Tool::Compiletest);"}, {"sha": "3abaab6b34ef0dece78106d7955dc7f24c084a5d", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -11,8 +11,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils \\\n-  bzip2\n+  xz-utils\n \n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n@@ -21,16 +20,28 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n-ENV PATH=$PATH:/emsdk-portable/upstream/emscripten/\n-ENV PATH=$PATH:/emsdk-portable/node/12.9.1_64bit/bin/\n-ENV BINARYEN_ROOT=/emsdk-portable/upstream/\n+ENV PATH=$PATH:/emsdk-portable/clang/e1.38.15_64bit/\n+ENV PATH=$PATH:/emsdk-portable/emscripten/1.38.15/\n+ENV PATH=$PATH:/emsdk-portable/node/8.9.1_64bit/bin/\n+ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.38.15/\n+ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.38.15_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=asmjs-unknown-emscripten\n \n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n+ENV RUST_CONFIGURE_ARGS --enable-emscripten --disable-optimize-tests\n \n-# This is almost identical to the wasm32-unknown-emscripten target, so\n-# running with assertions again is not useful\n-ENV NO_DEBUG_ASSERTIONS=1\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n+  src/test/ui \\\n+  src/test/run-fail \\\n+  src/libstd \\\n+  src/liballoc \\\n+  src/libcore\n+\n+# Debug assertions in rustc are largely covered by other builders, and LLVM\n+# assertions cause this builder to slow down by quite a large amount and don't\n+# buy us a huge amount over other builders (not sure if we've ever seen an\n+# asmjs-specific backend assertion trip), so disable assertions for these\n+# tests.\n ENV NO_LLVM_ASSERTIONS=1\n+ENV NO_DEBUG_ASSERTIONS=1"}, {"sha": "420d47b314c0f63da8e006eb78688c6051eec6c5", "filename": "src/ci/docker/disabled/wasm32-exp/Dockerfile", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -0,0 +1,35 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  jq \\\n+  bzip2\n+\n+# emscripten\n+COPY scripts/emscripten-wasm.sh /scripts/\n+COPY wasm32-exp/node.sh /usr/local/bin/node\n+RUN bash /scripts/emscripten-wasm.sh\n+\n+# cache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# env\n+ENV PATH=/wasm-install/emscripten:/wasm-install/bin:$PATH\n+ENV EM_CONFIG=/root/.emscripten\n+\n+ENV TARGETS=wasm32-experimental-emscripten\n+\n+ENV RUST_CONFIGURE_ARGS --experimental-targets=WebAssembly\n+\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "aa938971c702f713e857c159d8bd8b67003ff982", "filename": "src/ci/docker/disabled/wasm32-exp/node.sh", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+\n+path=\"$(dirname $1)\"\n+file=\"$(basename $1)\"\n+\n+shift\n+\n+cd \"$path\"\n+exec /node-v8.0.0-linux-x64/bin/node \"$file\" \"$@\""}, {"sha": "0d2bd39303ef8e1191b6986be45d546842b2b734", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -11,28 +11,22 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils \\\n-  bzip2\n+  xz-utils\n \n+# emscripten\n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n-ENV PATH=$PATH:/emsdk-portable/upstream/emscripten/\n-ENV PATH=$PATH:/emsdk-portable/node/12.9.1_64bit/bin/\n-ENV BINARYEN_ROOT=/emsdk-portable/upstream/\n+ENV PATH=$PATH:/emsdk-portable/clang/e1.38.15_64bit/\n+ENV PATH=$PATH:/emsdk-portable/emscripten/1.38.15/\n+ENV PATH=$PATH:/emsdk-portable/node/8.9.1_64bit/bin/\n+ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.38.15/\n+ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.38.15_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=wasm32-unknown-emscripten\n-\n-# FIXME: Re-enable these tests once Cargo stops trying to execute wasms\n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n-    --exclude src/libcore \\\n-    --exclude src/liballoc \\\n-    --exclude src/libproc_macro \\\n-    --exclude src/libstd \\\n-    --exclude src/libterm \\\n-    --exclude src/libtest\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "e4a93d7a100920a6941c97bb1e62e095b8b74a83", "filename": "src/ci/docker/scripts/emscripten-wasm.sh", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -0,0 +1,37 @@\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  rm -f /tmp/build.log\n+  set -x\n+}\n+\n+# Download last known good emscripten from WebAssembly waterfall\n+BUILD=$(curl -fL https://storage.googleapis.com/wasm-llvm/builds/linux/lkgr.json | \\\n+    jq '.build | tonumber')\n+curl -sL https://storage.googleapis.com/wasm-llvm/builds/linux/$BUILD/wasm-binaries.tbz2 | \\\n+    hide_output tar xvkj\n+\n+# node 8 is required to run wasm\n+cd /\n+curl -sL https://nodejs.org/dist/v8.0.0/node-v8.0.0-linux-x64.tar.xz | \\\n+    tar -xJ\n+\n+# Make emscripten use wasm-ready node and LLVM tools\n+echo \"EMSCRIPTEN_ROOT = '/wasm-install/emscripten'\" >> /root/.emscripten\n+echo \"NODE_JS='/usr/local/bin/node'\" >> /root/.emscripten\n+echo \"LLVM_ROOT='/wasm-install/bin'\" >> /root/.emscripten\n+echo \"BINARYEN_ROOT = '/wasm-install'\" >> /root/.emscripten\n+echo \"COMPILER_ENGINE = NODE_JS\" >> /root/.emscripten\n+echo \"JS_ENGINES = [NODE_JS]\" >> /root/.emscripten"}, {"sha": "47196e8939626a69bc82255bac116f0a68981459", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -17,15 +17,20 @@ exit 1\n   set -x\n }\n \n-git clone https://github.com/emscripten-core/emsdk.git /emsdk-portable\n+cd /\n+curl -fL https://mozilla-games.s3.amazonaws.com/emscripten/releases/emsdk-portable.tar.gz | \\\n+    tar -xz\n+\n cd /emsdk-portable\n-hide_output ./emsdk install 1.38.46-upstream\n-./emsdk activate 1.38.46-upstream\n+./emsdk update\n+hide_output ./emsdk install sdk-1.38.15-64bit\n+./emsdk activate sdk-1.38.15-64bit\n \n # Compile and cache libc\n source ./emsdk_env.sh\n echo \"main(){}\" > a.c\n HOME=/emsdk-portable/ emcc a.c\n+HOME=/emsdk-portable/ emcc -s BINARYEN=1 a.c\n rm -f a.*\n \n # Make emsdk usable by any user"}, {"sha": "0685fa943c0b87a78c4312cb4e8cee7789b0776c", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,10 @@\n+use std::cmp;\n use std::collections::BinaryHeap;\n use std::collections::binary_heap::{Drain, PeekMut};\n+use std::panic::{self, AssertUnwindSafe};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+use rand::{thread_rng, seq::SliceRandom};\n \n #[test]\n fn test_iterator() {\n@@ -276,15 +281,9 @@ fn assert_covariance() {\n // even if the order may not be correct.\n //\n // Destructors must be called exactly once per element.\n-// FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn panic_safe() {\n-    use std::cmp;\n-    use std::panic::{self, AssertUnwindSafe};\n-    use std::sync::atomic::{AtomicUsize, Ordering};\n-    use rand::{thread_rng, seq::SliceRandom};\n-\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n \n     #[derive(Eq, PartialEq, Ord, Clone, Debug)]"}, {"sha": "4332b2e90fdaf0493deb3f1489137632fa2ede6e", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -483,7 +483,7 @@ mod slice_index {\n     }\n \n     #[test]\n-    #[cfg(not(target_os = \"emscripten\"))] // hits an OOM\n+    #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n     #[cfg(not(miri))] // Miri is too slow\n     fn simple_big() {\n         fn a_million_letter_x() -> String {"}, {"sha": "abcba0c2e8479a314a6ae30552ce3053e1ffd82f", "filename": "src/liballoc/tests/str.rs.rej", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fstr.rs.rej", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fstr.rs.rej", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs.rej?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,10 +0,0 @@\n-diff a/src/liballoc/tests/str.rs b/src/liballoc/tests/str.rs\t(rejected hunks)\n-@@ -483,7 +483,7 @@ mod slice_index {\n-     }\n- \n-     #[test]\n--    #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n-+    #[cfg(not(target_arch = \"js\"))] // hits an OOM\n-     #[cfg(not(miri))] // Miri is too slow\n-     fn simple_big() {\n-         fn a_million_letter_x() -> String {"}, {"sha": "98d013dfa2b57616889bb8b3150111077fe90fcf", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -944,10 +944,8 @@ fn drain_filter_complex() {\n     }\n }\n \n-// Miri does not support catching panics\n-// FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))]\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn drain_filter_consumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;\n@@ -997,9 +995,8 @@ fn drain_filter_consumed_panic() {\n     }\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn drain_filter_unconsumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;"}, {"sha": "eda0e7c518c58290b6f212c2319dae92ee038948", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -49,10 +49,8 @@ impl fmt::Debug for c_void {\n /// Basic implementation of a `va_list`.\n // The name is WIP, using `VaListImpl` for now.\n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\")),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n-          target_arch = \"wasm32\",\n-          target_arch = \"asmjs\",\n           windows))]\n #[repr(transparent)]\n #[unstable(feature = \"c_variadic\",\n@@ -69,10 +67,8 @@ pub struct VaListImpl<'f> {\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\")),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n-          target_arch = \"wasm32\",\n-          target_arch = \"asmjs\",\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -141,6 +137,38 @@ pub struct VaListImpl<'f> {\n     _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n+/// asm.js ABI implementation of a `va_list`.\n+// asm.js uses the PNaCl ABI, which specifies that a `va_list` is\n+// an array of 4 32-bit integers, according to the old PNaCl docs at\n+// https://web.archive.org/web/20130518054430/https://www.chromium.org/nativeclient/pnacl/bitcode-abi#TOC-Derived-Types\n+// and clang does the same in `CreatePNaClABIBuiltinVaListDecl` from `lib/AST/ASTContext.cpp`\n+#[cfg(all(target_arch = \"asmjs\", not(windows)))]\n+#[repr(C)]\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+#[lang = \"va_list\"]\n+pub struct VaListImpl<'f> {\n+    inner: [crate::mem::MaybeUninit<i32>; 4],\n+    _marker: PhantomData<&'f mut &'f c_void>,\n+}\n+\n+#[cfg(all(target_arch = \"asmjs\", not(windows)))]\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+impl<'f> fmt::Debug for VaListImpl<'f> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unsafe {\n+            write!(f, \"va_list* [{:#x}, {:#x}, {:#x}, {:#x}]\",\n+                   self.inner[0].read(), self.inner[1].read(),\n+                   self.inner[2].read(), self.inner[3].read())\n+        }\n+    }\n+}\n+\n /// A wrapper for a `va_list`\n #[repr(transparent)]\n #[derive(Debug)]\n@@ -150,29 +178,23 @@ pub struct VaListImpl<'f> {\n            issue = \"44930\")]\n pub struct VaList<'a, 'f: 'a> {\n     #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-                  not(target_arch = \"x86_64\")),\n+                  not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n               all(target_arch = \"aarch64\", target_os = \"ios\"),\n-              target_arch = \"wasm32\",\n-              target_arch = \"asmjs\",\n               windows))]\n     inner: VaListImpl<'f>,\n \n     #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\",\n-                  target_arch = \"x86_64\"),\n+                  target_arch = \"x86_64\", target_arch = \"asmjs\"),\n               any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n-              not(target_arch = \"wasm32\"),\n-              not(target_arch = \"asmjs\"),\n               not(windows)))]\n     inner: &'a mut VaListImpl<'f>,\n \n     _marker: PhantomData<&'a mut VaListImpl<'f>>,\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\")),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n-          target_arch = \"wasm32\",\n-          target_arch = \"asmjs\",\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -190,10 +212,8 @@ impl<'f> VaListImpl<'f> {\n }\n \n #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\",\n-              target_arch = \"x86_64\"),\n+              target_arch = \"x86_64\", target_arch = \"asmjs\"),\n           any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n-          not(target_arch = \"wasm32\"),\n-          not(target_arch = \"asmjs\"),\n           not(windows)))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\"}, {"sha": "ee4be6c9151194b0e7a58e32b8be797e188bd933", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -114,8 +114,24 @@ pub fn black_box<T>(dummy: T) -> T {\n     // this. LLVM's intepretation of inline assembly is that it's, well, a black\n     // box. This isn't the greatest implementation since it probably deoptimizes\n     // more than we want, but it's so far good enough.\n+    #[cfg(not(any(\n+        target_arch = \"asmjs\",\n+        all(\n+            target_arch = \"wasm32\",\n+            target_os = \"emscripten\"\n+        )\n+    )))]\n     unsafe {\n         asm!(\"\" : : \"r\"(&dummy));\n         return dummy;\n     }\n+\n+    // Not all platforms support inline assembly so try to do something without\n+    // inline assembly which in theory still hinders at least some optimizations\n+    // on those targets. This is the \"best effort\" scenario.\n+    unsafe {\n+        let ret = crate::ptr::read_volatile(&dummy);\n+        crate::mem::forget(dummy);\n+        ret\n+    }\n }"}, {"sha": "541d3d98b79bda83cbc591d2273b8f48a32b6a81", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -257,7 +257,8 @@ pub fn target_feature_whitelist(sess: &Session)\n         \"hexagon\" => HEXAGON_WHITELIST,\n         \"mips\" | \"mips64\" => MIPS_WHITELIST,\n         \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n-        \"wasm32\" => WASM_WHITELIST,\n+        // wasm32 on emscripten does not support these target features\n+        \"wasm32\" if !sess.target.target.options.is_like_emscripten => WASM_WHITELIST,\n         _ => &[],\n     }\n }"}, {"sha": "f1cfac270332223d80d3a766bd22889208a934f2", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -142,12 +142,15 @@ impl ModuleConfig {\n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n         // of this pass manager builder.\n+        // Turn off vectorization for emscripten, as it's not very well supported.\n         self.vectorize_loop = !sess.opts.cg.no_vectorize_loops &&\n                              (sess.opts.optimize == config::OptLevel::Default ||\n-                              sess.opts.optimize == config::OptLevel::Aggressive);\n+                              sess.opts.optimize == config::OptLevel::Aggressive) &&\n+                             !sess.target.target.options.is_like_emscripten;\n \n         self.vectorize_slp = !sess.opts.cg.no_vectorize_slp &&\n-                            sess.opts.optimize == config::OptLevel::Aggressive;\n+                            sess.opts.optimize == config::OptLevel::Aggressive &&\n+                            !sess.target.target.options.is_like_emscripten;\n \n         // Some targets (namely, NVPTX) interact badly with the MergeFunctions\n         // pass. This is because MergeFunctions can generate new function calls"}, {"sha": "92c86372a86f331c5b7a0ab137958e1996fe9b1f", "filename": "src/librustc_target/abi/call/asmjs.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -0,0 +1,47 @@\n+use crate::abi::call::{FnType, ArgType, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+\n+// Data layout: e-p:32:32-i64:64-v128:32:128-n32-S128\n+\n+// See the https://github.com/kripken/emscripten-fastcomp-clang repository.\n+// The class `EmscriptenABIInfo` in `/lib/CodeGen/TargetInfo.cpp` contains the ABI definitions.\n+\n+fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    if ret.layout.is_aggregate() {\n+        if let Some(unit) = ret.layout.homogeneous_aggregate(cx).unit() {\n+            let size = ret.layout.size;\n+            if unit.size == size {\n+                ret.cast_to(Uniform {\n+                    unit,\n+                    total: size\n+                });\n+                return;\n+            }\n+        }\n+\n+        ret.make_indirect();\n+    }\n+}\n+\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n+    if arg.layout.is_aggregate() {\n+        arg.make_indirect_byval();\n+    }\n+}\n+\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(cx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(arg);\n+    }\n+}"}, {"sha": "bc21113527ecfa83b7602319689a882517713c5d", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -5,6 +5,7 @@ use crate::spec::{self, HasTargetSpec};\n mod aarch64;\n mod amdgpu;\n mod arm;\n+mod asmjs;\n mod hexagon;\n mod mips;\n mod mips64;\n@@ -21,7 +22,6 @@ mod x86;\n mod x86_64;\n mod x86_win64;\n mod wasm32;\n-mod wasm32_bindgen_compat;\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum PassMode {\n@@ -557,6 +557,14 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"powerpc\" => powerpc::compute_abi_info(cx, self),\n             \"powerpc64\" => powerpc64::compute_abi_info(cx, self),\n             \"s390x\" => s390x::compute_abi_info(cx, self),\n+            \"asmjs\" => asmjs::compute_abi_info(cx, self),\n+            \"wasm32\" => {\n+                if cx.target_spec().llvm_target.contains(\"emscripten\") {\n+                    asmjs::compute_abi_info(cx, self)\n+                } else {\n+                    wasm32::compute_abi_info(self)\n+                }\n+            }\n             \"msp430\" => msp430::compute_abi_info(self),\n             \"sparc\" => sparc::compute_abi_info(cx, self),\n             \"sparc64\" => sparc64::compute_abi_info(cx, self),\n@@ -565,9 +573,6 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" => riscv::compute_abi_info(self, 32),\n             \"riscv64\" => riscv::compute_abi_info(self, 64),\n-            \"wasm32\" if cx.target_spec().target_os != \"emscripten\"\n-                => wasm32_bindgen_compat::compute_abi_info(self),\n-            \"wasm32\" | \"asmjs\" => wasm32::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "1fdcbb8e39bdff0397f0aaa6a3599d6dcc301f3c", "filename": "src/librustc_target/abi/call/wasm32.rs", "status": "modified", "additions": 6, "deletions": 46, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,60 +1,20 @@\n-use crate::abi::call::{FnType, ArgType, Uniform};\n-use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{FnType, ArgType};\n \n-fn unwrap_trivial_aggregate<'a, Ty, C>(cx: &C, val: &mut ArgType<'a, Ty>) -> bool\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n-    if val.layout.is_aggregate() {\n-        if let Some(unit) = val.layout.homogeneous_aggregate(cx).unit() {\n-            let size = val.layout.size;\n-            if unit.size == size {\n-                val.cast_to(Uniform {\n-                    unit,\n-                    total: size\n-                });\n-                return true;\n-            }\n-        }\n-    }\n-    false\n-}\n-\n-\n-fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n     ret.extend_integer_width_to(32);\n-    if ret.layout.is_aggregate() {\n-        if !unwrap_trivial_aggregate(cx, ret) {\n-            ret.make_indirect();\n-        }\n-    }\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>)\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n     arg.extend_integer_width_to(32);\n-    if arg.layout.is_aggregate() {\n-        if !unwrap_trivial_aggregate(cx, arg) {\n-            arg.make_indirect_byval();\n-        }\n-    }\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n     if !fty.ret.is_ignore() {\n-        classify_ret_ty(cx, &mut fty.ret);\n+        classify_ret_ty(&mut fty.ret);\n     }\n \n     for arg in &mut fty.args {\n         if arg.is_ignore() { continue; }\n-        classify_arg_ty(cx, arg);\n+        classify_arg_ty(arg);\n     }\n }"}, {"sha": "2645e30594ceae0725fff9690ba20309bf6156b6", "filename": "src/librustc_target/abi/call/wasm32_bindgen_compat.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,27 +0,0 @@\n-// This is not and has never been a correct C ABI for WebAssembly, but\n-// for a long time this was the C ABI that Rust used. wasm-bindgen\n-// depends on ABI details for this ABI and is incompatible with the\n-// correct C ABI, so this ABI is being kept around until wasm-bindgen\n-// can be fixed to work with the correct ABI. See #63649 for further\n-// discussion.\n-\n-use crate::abi::call::{FnType, ArgType};\n-\n-fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n-    ret.extend_integer_width_to(32);\n-}\n-\n-fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n-    arg.extend_integer_width_to(32);\n-}\n-\n-pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n-    if !fty.ret.is_ignore() {\n-        classify_ret_ty(&mut fty.ret);\n-    }\n-\n-    for arg in &mut fty.args {\n-        if arg.is_ignore() { continue; }\n-        classify_arg_ty(arg);\n-    }\n-}"}, {"sha": "6dc140cf160eadb6e727d5f2abf99831ea5153fb", "filename": "src/librustc_target/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,10 +1,40 @@\n-use super::{LinkerFlavor, Target, wasm32_unknown_emscripten};\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n-    let mut target = wasm32_unknown_emscripten::target()?;\n-    target.options.post_link_args\n-        .entry(LinkerFlavor::Em)\n-        .or_default()\n-        .extend(vec![\"-s\".to_string(), \"WASM=0\".to_string()]);\n-    Ok(target)\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Em,\n+                vec![\"-s\".to_string(),\n+                     \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n+                     \"-s\".to_string(),\n+                     \"ABORTING_MALLOC=0\".to_string(),\n+                     \"-s\".to_string(),\n+                     \"WASM=0\".to_string()]);\n+\n+    let opts = TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        exe_suffix: \".js\".to_string(),\n+        linker_is_gnu: true,\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n+        is_like_emscripten: true,\n+        max_atomic_width: Some(32),\n+        post_link_args: args,\n+        target_family: Some(\"unix\".to_string()),\n+        codegen_backend: \"emscripten\".to_string(),\n+        .. Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n+        arch: \"asmjs\".to_string(),\n+        linker_flavor: LinkerFlavor::Em,\n+        options: opts,\n+    })\n }"}, {"sha": "25add0cc6a4be2cede092124a1ed10954cbdf989", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -462,6 +462,7 @@ supported_targets! {\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-unknown-unknown\", wasm32_unknown_unknown),\n     (\"wasm32-wasi\", wasm32_wasi),\n+    (\"wasm32-experimental-emscripten\", wasm32_experimental_emscripten),\n \n     (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),\n     (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),"}, {"sha": "b802bee25ae7a04ee301dc597e6e1c048694452e", "filename": "src/librustc_target/spec/wasm32_experimental_emscripten.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -0,0 +1,44 @@\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n+\n+pub fn target() -> Result<Target, String> {\n+    let mut post_link_args = LinkArgs::new();\n+    post_link_args.insert(LinkerFlavor::Em,\n+                          vec![\"-s\".to_string(),\n+                               \"WASM=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"ASSERTIONS=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n+                               \"-g3\".to_string()]);\n+\n+    let opts = TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        // Today emcc emits two files - a .js file to bootstrap and\n+        // possibly interpret the wasm, and a .wasm file\n+        exe_suffix: \".js\".to_string(),\n+        linker_is_gnu: true,\n+        link_env: vec![(\"EMCC_WASM_BACKEND\".to_string(), \"1\".to_string())],\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n+        is_like_emscripten: true,\n+        max_atomic_width: Some(32),\n+        post_link_args,\n+        limit_rdylib_exports: false,\n+        target_family: Some(\"unix\".to_string()),\n+        .. Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"wasm32-unknown-unknown\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"wasm32\".to_string(),\n+        linker_flavor: LinkerFlavor::Em,\n+        options: opts,\n+    })\n+}"}, {"sha": "e0df36884bf5629f6325948002fbf61ea6224cf7", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,46 +1,45 @@\n-use super::wasm32_base;\n-use super::{LinkArgs, LinkerFlavor, Target, TargetOptions, PanicStrategy};\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n+    // FIXME(nikic) BINARYEN_TRAP_MODE=clamp is needed to avoid trapping in our\n+    // -Zsaturating-float-casts implementation. This can be dropped if/when\n+    // we have native fpto[su]i.sat intrinsics, or the implementation otherwise\n+    // stops relying on non-trapping fpto[su]i.\n     let mut post_link_args = LinkArgs::new();\n     post_link_args.insert(LinkerFlavor::Em,\n                           vec![\"-s\".to_string(),\n-                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n-                               \"-s\".to_string(),\n-                               \"ASSERTIONS=1\".to_string(),\n+                               \"BINARYEN=1\".to_string(),\n                                \"-s\".to_string(),\n-                               \"DISABLE_EXCEPTION_CATCHING=1\".to_string(),\n+                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n                                \"-s\".to_string(),\n-                               \"ABORTING_MALLOC=0\".to_string(),\n-                               // FIXME(tlively): Enable this linker option once libc type errors\n-                               // are resolved. See https://github.com/rust-lang/libc/pull/1478.\n-                               // \"-Wl,--fatal-warnings\".to_string(),\n-                               ]);\n+                               \"BINARYEN_TRAP_MODE='clamp'\".to_string()]);\n \n     let opts = TargetOptions {\n-        // emcc emits two files - a .js file to instantiate the wasm and supply platform\n-        // functionality, and a .wasm file.\n+        dynamic_linking: false,\n+        executables: true,\n+        // Today emcc emits two files - a .js file to bootstrap and\n+        // possibly interpret the wasm, and a .wasm file\n         exe_suffix: \".js\".to_string(),\n-        linker: None,\n         linker_is_gnu: true,\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n         is_like_emscripten: true,\n-        // FIXME(tlively): Emscripten supports unwinding, but we would have to pass\n-        // -enable-emscripten-cxx-exceptions to LLVM at codegen time and merge\n-        // https://reviews.llvm.org/rG5c3cdef84b82464756bb571c13c31cf7773860c3to use it.\n-        panic_strategy: PanicStrategy::Abort,\n+        max_atomic_width: Some(32),\n         post_link_args,\n+        limit_rdylib_exports: false,\n         target_family: Some(\"unix\".to_string()),\n-        .. wasm32_base::options()\n+        codegen_backend: \"emscripten\".to_string(),\n+        .. Default::default()\n     };\n     Ok(Target {\n-        llvm_target: \"wasm32-unknown-emscripten\".to_string(),\n+        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n         linker_flavor: LinkerFlavor::Em,\n         options: opts,"}, {"sha": "da3b52afadffb50a6252d2e43e9cef0fac1dbe0a", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -360,7 +360,7 @@ impl<'a> fmt::Display for Html<'a> {\n                     (\"target_arch\", Some(arch)) => match &*arch.as_str() {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n-                        \"asmjs\" => \"JavaScript\",\n+                        \"asmjs\" => \"asm.js\",\n                         \"mips\" => \"MIPS\",\n                         \"mips64\" => \"MIPS-64\",\n                         \"msp430\" => \"MSP430\","}, {"sha": "952ba40ee87a9d786a2762d1d6546f26a150edc4", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -10,8 +10,7 @@\n // fallback implementation to use as well.\n //\n // Due to rust-lang/rust#18804, make sure this is not generic!\n-#[cfg(any(target_os = \"linux\", target_os = \"fuchsia\", target_os = \"hermit\", target_os = \"redox\",\n-          target_os = \"emscripten\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"fuchsia\", target_os = \"hermit\", target_os = \"redox\"))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n     use crate::mem;\n     use crate::sys_common::thread_local::register_dtor_fallback;"}, {"sha": "8b76080fc68c61718d6e3e69c59a07e9691d8df2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1478,9 +1478,9 @@ pub fn run_test(\n ) {\n     let TestDescAndFn { desc, testfn } = test;\n \n-    // FIXME: Re-enable emscripten once it can catch panics again\n-    let ignore_because_no_process_support = desc.should_panic != ShouldPanic::No\n-        && (cfg!(target_arch = \"wasm32\") || cfg!(target_os = \"emscripten\"));\n+    let ignore_because_no_process_support = cfg!(target_arch = \"wasm32\")\n+        && !cfg!(target_os = \"emscripten\")\n+        && desc.should_panic != ShouldPanic::No;\n \n     if force_ignore || desc.ignore || ignore_because_no_process_support {\n         monitor_ch.send((desc, TrIgnored, None, Vec::new())).unwrap();"}, {"sha": "b95fb5df710d35873be882a3900c6b8c4dd97ac7", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use crate::test::{\n     filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored, RunStrategy,\n-    ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts,\n+    ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailedMsg,\n     TrIgnored, TrOk,\n };\n use std::sync::mpsc::channel;\n@@ -90,9 +90,7 @@ pub fn ignored_tests_result_in_ignored() {\n     assert!(res == TrIgnored);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n-#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic() {\n     fn f() {\n         panic!();\n@@ -112,9 +110,7 @@ fn test_should_panic() {\n     assert!(res == TrOk);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n-#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_good_message() {\n     fn f() {\n         panic!(\"an error message\");\n@@ -134,11 +130,8 @@ fn test_should_panic_good_message() {\n     assert!(res == TrOk);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n-#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_bad_message() {\n-    use crate::tests::TrFailedMsg;\n     fn f() {\n         panic!(\"an error message\");\n     }\n@@ -159,9 +152,7 @@ fn test_should_panic_bad_message() {\n     assert!(res == TrFailedMsg(format!(\"{} '{}'\", failed_msg, expected)));\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n-#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_but_succeeds() {\n     fn f() {}\n     let desc = TestDescAndFn {"}, {"sha": "2acf95de97ee8fcf4ecd83829ac3f92b274cb8a2", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n "}, {"sha": "307c4e2c1e273b061c987bc20c538996e42c4c68", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "a935d8865226777371e97ea07c52039f46ddaead", "filename": "src/test/codegen/extern-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fextern-functions.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "e44373926b76aa45cb952d54f11808fe367fe62d", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten default visibility is hidden\n // compile-flags: -O\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions"}, {"sha": "86c1365fdb7118977c0db1d29cfe9a9a9afdf026", "filename": "src/test/codegen/link_section.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink_section.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten default visibility is hidden\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "ad497b25a9ec52e8330b41bf4d3c616002428e65", "filename": "src/test/codegen/no-output-asm-is-volatile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -O\n \n+// ignore-asmjs\n+\n #![feature(asm)]\n #![crate_type = \"lib\"]\n "}, {"sha": "05888c0e733ad10bbcb52a7a40a238d9e29c319c", "filename": "src/test/codegen/personality_lifetimes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,4 @@\n // ignore-msvc\n-// ignore-emscripten compiled with panic=abort by default\n \n // compile-flags: -O -C no-prepopulate-passes\n "}, {"sha": "5521c3c849f5363a661ec24f58235e503cfae22f", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,14 +1,15 @@\n // compile-flags: -C no-prepopulate-passes\n \n // ignore-aarch64\n-// ignore-emscripten\n+// ignore-asmjs\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64\n+// ignore-wasm\n // ignore-x86\n // ignore-x86_64\n // See repr-transparent.rs"}, {"sha": "acb993d51fb8c928aa9138d1cc3c14f8e4ac95f9", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-abs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "58667af7e50edcb0dcd7eff217adcea710616ac7", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-ceil.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "affbe17d3341f22f870846c0caf3e8ac52300470", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-cos.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "43472d9dece8ea98f278cb887f1f197262b3b61d", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "471d49b7841eceea455f324229930bdb2917ed12", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "bd8ba8b6cd774a286cc0ea39e7c5274c0921b232", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-floor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "8ad9e9004c2cd77b578f399f5c3c3141ca613ae1", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fma.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "ecffca960dab4d4d2646cdaf9898a81e86d01c48", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fsqrt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "79e6ed54690bf9628eafd64dbc119d3861802222", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "db92a94fca84b32c6cb59e783b11b7d1df470e89", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log10.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "90d9ec3cedd6f5a7d1ffb419721cc48bdb0a5e49", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "2761392e6a92357be53c3a39e4466d7a8136b4a0", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten\n // min-llvm-version 7.0\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "1dd2c2ccb83db98c6f70bb6c77efecf4bfbf6088", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-pow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "09f31bdd6bbdfa56de0fa80e88c061b91f0103b9", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-powi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "dc87651c2aa1f058d81fcef013132b7ada2d0120", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-sin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "adee796d2475a19302082318c19a93dfef86bf48", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -119,140 +119,140 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @sadd_i8x2\n #[no_mangle]\n pub unsafe fn sadd_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x4\n #[no_mangle]\n pub unsafe fn sadd_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x8\n #[no_mangle]\n pub unsafe fn sadd_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x16\n #[no_mangle]\n pub unsafe fn sadd_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x32\n #[no_mangle]\n pub unsafe fn sadd_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x64\n #[no_mangle]\n pub unsafe fn sadd_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x2\n #[no_mangle]\n pub unsafe fn sadd_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x4\n #[no_mangle]\n pub unsafe fn sadd_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x8\n #[no_mangle]\n pub unsafe fn sadd_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x16\n #[no_mangle]\n pub unsafe fn sadd_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x32\n #[no_mangle]\n pub unsafe fn sadd_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x2\n #[no_mangle]\n pub unsafe fn sadd_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x4\n #[no_mangle]\n pub unsafe fn sadd_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x8\n #[no_mangle]\n pub unsafe fn sadd_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x16\n #[no_mangle]\n pub unsafe fn sadd_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x2\n #[no_mangle]\n pub unsafe fn sadd_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x4\n #[no_mangle]\n pub unsafe fn sadd_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x8\n #[no_mangle]\n pub unsafe fn sadd_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x2\n #[no_mangle]\n pub unsafe fn sadd_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x4\n #[no_mangle]\n pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n@@ -261,140 +261,140 @@ pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @uadd_u8x2\n #[no_mangle]\n pub unsafe fn uadd_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x4\n #[no_mangle]\n pub unsafe fn uadd_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x8\n #[no_mangle]\n pub unsafe fn uadd_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x16\n #[no_mangle]\n pub unsafe fn uadd_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x32\n #[no_mangle]\n pub unsafe fn uadd_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x64\n #[no_mangle]\n pub unsafe fn uadd_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x2\n #[no_mangle]\n pub unsafe fn uadd_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x4\n #[no_mangle]\n pub unsafe fn uadd_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x8\n #[no_mangle]\n pub unsafe fn uadd_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x16\n #[no_mangle]\n pub unsafe fn uadd_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x32\n #[no_mangle]\n pub unsafe fn uadd_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x2\n #[no_mangle]\n pub unsafe fn uadd_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x4\n #[no_mangle]\n pub unsafe fn uadd_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x8\n #[no_mangle]\n pub unsafe fn uadd_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x16\n #[no_mangle]\n pub unsafe fn uadd_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x2\n #[no_mangle]\n pub unsafe fn uadd_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x4\n #[no_mangle]\n pub unsafe fn uadd_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x8\n #[no_mangle]\n pub unsafe fn uadd_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x2\n #[no_mangle]\n pub unsafe fn uadd_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x4\n #[no_mangle]\n pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n@@ -405,140 +405,140 @@ pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n // CHECK-LABEL: @ssub_i8x2\n #[no_mangle]\n pub unsafe fn ssub_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x4\n #[no_mangle]\n pub unsafe fn ssub_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x8\n #[no_mangle]\n pub unsafe fn ssub_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x16\n #[no_mangle]\n pub unsafe fn ssub_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x32\n #[no_mangle]\n pub unsafe fn ssub_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x64\n #[no_mangle]\n pub unsafe fn ssub_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x2\n #[no_mangle]\n pub unsafe fn ssub_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x4\n #[no_mangle]\n pub unsafe fn ssub_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x8\n #[no_mangle]\n pub unsafe fn ssub_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x16\n #[no_mangle]\n pub unsafe fn ssub_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x32\n #[no_mangle]\n pub unsafe fn ssub_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x2\n #[no_mangle]\n pub unsafe fn ssub_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x4\n #[no_mangle]\n pub unsafe fn ssub_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x8\n #[no_mangle]\n pub unsafe fn ssub_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x16\n #[no_mangle]\n pub unsafe fn ssub_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x2\n #[no_mangle]\n pub unsafe fn ssub_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x4\n #[no_mangle]\n pub unsafe fn ssub_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x8\n #[no_mangle]\n pub unsafe fn ssub_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x2\n #[no_mangle]\n pub unsafe fn ssub_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x4\n #[no_mangle]\n pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n@@ -547,139 +547,139 @@ pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @usub_u8x2\n #[no_mangle]\n pub unsafe fn usub_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x4\n #[no_mangle]\n pub unsafe fn usub_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x8\n #[no_mangle]\n pub unsafe fn usub_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x16\n #[no_mangle]\n pub unsafe fn usub_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x32\n #[no_mangle]\n pub unsafe fn usub_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x64\n #[no_mangle]\n pub unsafe fn usub_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x2\n #[no_mangle]\n pub unsafe fn usub_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x4\n #[no_mangle]\n pub unsafe fn usub_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x8\n #[no_mangle]\n pub unsafe fn usub_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x16\n #[no_mangle]\n pub unsafe fn usub_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x32\n #[no_mangle]\n pub unsafe fn usub_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x2\n #[no_mangle]\n pub unsafe fn usub_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x4\n #[no_mangle]\n pub unsafe fn usub_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x8\n #[no_mangle]\n pub unsafe fn usub_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x16\n #[no_mangle]\n pub unsafe fn usub_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x2\n #[no_mangle]\n pub unsafe fn usub_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x4\n #[no_mangle]\n pub unsafe fn usub_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x8\n #[no_mangle]\n pub unsafe fn usub_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x2\n #[no_mangle]\n pub unsafe fn usub_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x4\n #[no_mangle]\n pub unsafe fn usub_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }"}, {"sha": "cd8130f92314856320a11dbb181882a71ca856ea", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -29,7 +29,7 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @bitmask_int\n #[no_mangle]\n pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9a-z]+}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -39,7 +39,7 @@ pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n // CHECK-LABEL: @bitmask_uint\n #[no_mangle]\n pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9a-z]+}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -49,7 +49,7 @@ pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n // CHECK-LABEL: @bitmask_int16\n #[no_mangle]\n pub unsafe fn bitmask_int16(x: i8x16) -> u16 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9a-z]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n+    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n     // CHECK: [[B:%[0-9]+]] = trunc <16 x i8> [[A]] to <16 x i1>\n     // CHECK: %{{[0-9]+}} = bitcast <16 x i1> [[B]] to i16\n     // CHECK-NOT: zext"}, {"sha": "3389104219ddf7df27afbb77ab9a062c05148d5b", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-gather.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten\n // ignore-tidy-linelength\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "dd0a9801bc5fa6b9b59e9093fea6b44df3fced0e", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-scatter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten\n // ignore-tidy-linelength\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "7339df17b057a230004e2eb3fbc703fc534ce668", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten vectors passed directly\n // compile-flags: -C no-prepopulate-passes\n \n // This test that using union forward the abi of the inner type, as"}, {"sha": "768b936dc2713492462dbc190fea536e871c28e6", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,7 @@\n // aux-build:weak-lang-items.rs\n // error-pattern: `#[panic_handler]` function required, but not found\n // error-pattern: language item required, but not found: `eh_personality`\n-// ignore-emscripten compiled with panic=abort, personality not required\n+// ignore-wasm32-bare compiled with panic=abort, personality not required\n \n #![no_std]\n "}, {"sha": "f5d1acb621be38e65e868ab3ef75df8b297c5bb4", "filename": "src/test/incremental/change_crate_dep_kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,6 @@\n // Test that we detect changes to the `dep_kind` query. If the change is not\n // detected then -Zincremental-verify-ich will trigger an assertion.\n \n-// ignore-emscripten compiled with panic=abort by default\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph -Cpanic=unwind\n // build-pass (FIXME(62277): could be check-pass?)"}, {"sha": "e5b84267b290312ecf08518de9b08518d1ea78ee", "filename": "src/test/incremental/commandline-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fcommandline-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fcommandline-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcommandline-args.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,6 @@\n // Test that changing a tracked commandline argument invalidates\n // the cache while changing an untracked one doesn't.\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2 rpass3\n // compile-flags: -Z query-dep-graph\n "}, {"sha": "12411a928799f2e3a39cbfc6708fdb98f325f924", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -2,7 +2,6 @@\n // compile-flags: -Z query-dep-graph -g\n // aux-build:extern_crate.rs\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // This test case makes sure that we detect if paths emitted into debuginfo\n // are changed, even when the change happens in an external crate.\n "}, {"sha": "f1d7de1455938d218b8e47cff51d45d7a8db2d74", "filename": "src/test/incremental/span_hash_stable/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -3,7 +3,6 @@\n // the spans and this test makes sure that we handle them correctly by hashing\n // file:line:column instead of raw byte offset.\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2\n // compile-flags: -g -Z query-dep-graph\n "}, {"sha": "8ed469db6e6336b7c8a810a2d249f4394443b690", "filename": "src/test/incremental/spans_in_type_debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,6 @@\n // Test that moving a type definition within a source file does not affect\n // re-compilation.\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2\n // compile-flags: -Z query-dep-graph -g\n "}, {"sha": "87c97ba06c46a0c97b0d25bb02179f1243e466f8", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -3,7 +3,6 @@\n \n // revisions:rpass1 rpass2\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g -Z query-dep-graph\n \n #![feature(rustc_attrs)]"}, {"sha": "8dc6b73edf6d473ecd804cdd314597fbdb86dcd9", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "109304d6d22ccdd4cb9368c12bbea673702e2f76", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that we generate StorageDead on unwind paths for generators.\n //"}, {"sha": "e73390f52b5d552fc3287e923a0f52ac9a117c52", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // check that we don't emit multiple drop flags when they are not needed.\n "}, {"sha": "a3b517e9bca87bfa0cf295af84a7496c3ad5fe65", "filename": "src/test/mir-opt/issue-62289.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,7 @@\n // check that we don't forget to drop the Box if we early return before\n // initializing it\n // ignore-tidy-linelength\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "782bc31186ca5fb8eb8a4931bc077d8579e4d351", "filename": "src/test/mir-opt/no-spurious-drop-after-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that after the call to `std::mem::drop` we do not generate a\n // MIR drop of the argument. (We used to have a `DROP(_2)` in the code"}, {"sha": "da73cc96348f059e4c15e29ce839204b2b824ed4", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));"}, {"sha": "3245d38b2580bd20a03a44463524eee16b645ca9", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n // Test that the fake borrows for matches are removed after borrow checking.\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare\n \n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {"}, {"sha": "db36a1fab5f2104f48e2dc3a3dedea1532753d86", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // ignore-tidy-linelength\n // compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats\n "}, {"sha": "7c64dc58bf791a7561ff5fe2e1da263a0b67f2d5", "filename": "src/test/run-make/wasm-custom-section/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "fec7643d20c537151e3c3a6aaafad8047893c239", "filename": "src/test/run-make/wasm-custom-sections-opt/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs -O --target wasm32-unknown-unknown"}, {"sha": "15403d8d4109d88ba8b4088ab691493304f0ad81", "filename": "src/test/run-make/wasm-export-all-symbols/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) bar.rs --target wasm32-unknown-unknown"}, {"sha": "255d8f1ef0e63f3bd6b76da6b96a8afa46be1585", "filename": "src/test/run-make/wasm-import-module/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n- # only-wasm32-bare\n+ # only-wasm32\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "b9141f93d538ceb07e8ce82f54fff10cdce4746e", "filename": "src/test/run-make/wasm-panic-small/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg a"}, {"sha": "b17e04b77177356822bca5ff7a6b1e06582d7ea1", "filename": "src/test/run-make/wasm-symbols-not-exported/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "b8f64e06f31ef844accfbd0b4a16f4e8d19f7544", "filename": "src/test/run-make/wasm-symbols-not-imported/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "5d6fa416b9895e7e3aa2a1890a64f3c9846589cb", "filename": "src/test/ui/abi/statics/static-mut-foreign.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -5,10 +5,6 @@\n \n // ignore-wasm32-bare no libc to test ffi with\n \n-// FIXME: This will work on emscripten once libc is updated to include\n-// rust-lang/libc/#1478\n-// ignore-emscripten libc type mismatch\n-\n #![feature(rustc_private)]\n \n extern crate libc;"}, {"sha": "3ffcbb58595eb75807f772be549d11f4cdda2726", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -7,7 +7,7 @@\n //\n // See issue #59123 for a full explanation.\n \n-// ignore-emscripten (sizes don't match)\n+// ignore-wasm32-bare (sizes don't match)\n // run-pass\n \n // edition:2018"}, {"sha": "9ee419c4a56fb16c0d2058c50cc33d8ef2f7c49c", "filename": "src/test/ui/async-await/issue-60709.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -3,7 +3,6 @@\n // compile-flags: -Copt-level=z -Cdebuginfo=2 --edition=2018\n \n // run-pass\n-// ignore-asmjs wasm2js does not support source maps yet\n \n use std::future::Future;\n use std::task::Poll;"}, {"sha": "ea4a9e5afa50157279c76ac8d737e16e329f2ab7", "filename": "src/test/ui/binding/fn-arg-incomplete-pattern-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -2,7 +2,7 @@\n // Check that partially moved from function parameters are dropped after the\n // named bindings that move from them.\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::{panic, cell::RefCell};\n "}, {"sha": "5f7e357eeb2a9f591c03502c1a516c64512c461c", "filename": "src/test/ui/binding/match-arm-statics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n #[derive(PartialEq, Eq)]\n struct NewBool(bool);"}, {"sha": "339bcfa1060a48e6a3c560176a987535317c2230", "filename": "src/test/ui/builtin-clone-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused_variables)]\n #![allow(unused_imports)]\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that builtin implementations of `Clone` cleanup everything\n // in case of unwinding."}, {"sha": "f181991713b2cd3fb4add9cec8f6f0db83a35bfb", "filename": "src/test/ui/catch-unwind-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n fn worker() -> ! {\n     panic!()"}, {"sha": "394d6c17f5adfcb69b760274be4e062a50be7a91", "filename": "src/test/ui/consts/const-int-saturating-arith.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-emscripten no i128 support\n #![feature(const_saturating_int_methods)]\n \n const INT_U32_NO: u32 = (42 as u32).saturating_add(2);"}, {"sha": "e4beee9e737ba3cc0e6d0773ddc45143b30f5344", "filename": "src/test/ui/debuginfo-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fdebuginfo-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fdebuginfo-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo-lto.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -7,7 +7,6 @@\n // aux-build:debuginfo-lto-aux.rs\n // compile-flags: -C lto -g\n // no-prefer-dynamic\n-// ignore-asmjs wasm2js does not support source maps yet\n \n extern crate debuginfo_lto_aux;\n "}, {"sha": "91063edf0f6c4badf45a759ad86bcb9722290287", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -5,7 +5,7 @@\n \n // run-pass\n // edition:2018\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(slice_patterns)]\n #![allow(unused)]"}, {"sha": "8516bc3d96424cb452adb6ccd7051d11d21728b0", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait, untagged_unions)]\n #![feature(slice_patterns)]"}, {"sha": "0eec9fb3ee647c3143b0c7bc4d8e695f48c07fcd", "filename": "src/test/ui/extern/extern-const.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -5,8 +5,7 @@\n // compile. To sidestep this by using one that *is* defined.\n \n // run-rustfix\n-// ignore-wasm32-bare no external library to link to.\n-// ignore-asmjs wasm2js does not support source maps yet\n+// ignore-wasm32 no external library to link to.\n // compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "ca5d7ddf27e3ab9a1f84e5bc9edd1795a4f6ccf4", "filename": "src/test/ui/extern/extern-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -5,8 +5,7 @@\n // compile. To sidestep this by using one that *is* defined.\n \n // run-rustfix\n-// ignore-wasm32-bare no external library to link to.\n-// ignore-asmjs wasm2js does not support source maps yet\n+// ignore-wasm32 no external library to link to.\n // compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "77406be2095cff1d52277d043441650d501a8040", "filename": "src/test/ui/extern/extern-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n error: extern items cannot be `const`\n-  --> $DIR/extern-const.rs:16:5\n+  --> $DIR/extern-const.rs:15:5\n    |\n LL |     const rust_dbg_static_mut: libc::c_int;\n    |     ^^^^^ help: try using a static value: `static`"}, {"sha": "43b37a9afc2cc9f26284625ef86f912e14557424", "filename": "src/test/ui/generator/issue-58888.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "5ac97585f4b575339f8f06cdeb6eb2d06cd391b6", "filename": "src/test/ui/generator/panic-drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled as panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "5f6778674dce13a5e9fd32e8ff61ff3c2bbef2bb", "filename": "src/test/ui/generator/panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "71a68ff684af31c6656fb61cc9bd20ecafa0e7fa", "filename": "src/test/ui/generator/resume-after-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "01db971434bbc8c9e0e36ab34cdd41dbc854ba33", "filename": "src/test/ui/generator/size-moved-locals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -11,7 +11,6 @@\n \n // edition:2018\n // ignore-wasm32 issue #62807\n-// ignore-asmjs issue #62807\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "0154f0499502959fe95372e12aa730acd6f61217", "filename": "src/test/ui/intrinsics/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-emscripten no i128 support\n \n #![feature(intrinsics)]\n "}, {"sha": "a2fd796245822dcb3056890324bc512574f2c170", "filename": "src/test/ui/issues/issue-14875.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare always compiled as panic=abort right now\n \n // Check that values are not leaked when a dtor panics (#14875)\n "}, {"sha": "1ce05ba390d76aee7401a08636191c2b982881b4", "filename": "src/test/ui/issues/issue-23477.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,4 @@\n // build-pass\n-// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g\n \n pub struct Dst {"}, {"sha": "773792c7a3f1f3492ecf737a50ea7d5fa50eb6a4", "filename": "src/test/ui/issues/issue-24687-embed-debuginfo/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // aux-build:issue-24687-lib.rs\n // compile-flags:-g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n extern crate issue_24687_lib as d;\n "}, {"sha": "cf3834952c6a6da264c672e4e8da017a41b45f8b", "filename": "src/test/ui/issues/issue-24945-repeat-dash-opts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -3,7 +3,6 @@\n // as options to the compiler.\n \n // compile-flags:-g -g -O -O\n-// ignore-asmjs wasm2js does not support source maps yet\n \n fn main() {\n     assert_eq!(1, 1);"}, {"sha": "3b40b3dd8f075480a4fb09e392540cceafd439f9", "filename": "src/test/ui/issues/issue-26484.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags:-g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n fn helper<F: FnOnce(usize) -> bool>(_f: F) {\n     print!(\"\");"}, {"sha": "8ede8143ea6572a1b718fb0298ccde7248f6e1b9", "filename": "src/test/ui/issues/issue-29948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::panic;\n "}, {"sha": "f0b472e2fe821e8a489f56eee942cb6618c5410c", "filename": "src/test/ui/issues/issue-33096.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n use std::ops::Deref;\n "}, {"sha": "94fccff9fc65db7908ad92af58e516019a816104", "filename": "src/test/ui/issues/issue-33992.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // ignore-windows\n // ignore-macos\n-// ignore-emscripten common linkage not implemented right now\n+// ignore-wasm32-bare common linkage not implemented right now\n \n #![feature(linkage)]\n "}, {"sha": "1f68560509e8c6a5c2e24ad04912c91f8780cb02", "filename": "src/test/ui/issues/issue-34569.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags:-g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n // In this test we just want to make sure that the code below does not lead to\n // a debuginfo verification assertion during compilation. This was caused by the"}, {"sha": "f2dfaf3dd367e71b368949866f7dc8182766d4d1", "filename": "src/test/ui/issues/issue-36856.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -2,7 +2,6 @@\n // Regression test for #36856.\n \n // compile-flags:-g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n fn g() -> bool {\n     false"}, {"sha": "318e3099f98ba4139df86f2dbaf881881d5ed754", "filename": "src/test/ui/issues/issue-42210.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -2,7 +2,6 @@\n // Regression test for #42210.\n \n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n trait Foo {\n     fn foo() { }"}, {"sha": "47c3ab59aa2eb9c2eba273f77eb142336a9cbc48", "filename": "src/test/ui/issues/issue-43853.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::panic;\n "}, {"sha": "d20c07276a8c50667fda628a0456540c8ec00be9", "filename": "src/test/ui/issues/issue-45731.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(unused_variables)]\n // compile-flags:--test -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n #[cfg(target_os = \"macos\")]\n #[test]"}, {"sha": "461ea2498b0d47f0f4c633fe639e839ee65db00e", "filename": "src/test/ui/issues/issue-46519.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // compile-flags:--test -O\n \n-// ignore-emscripten compiled with panic=abort by default\n-\n #[test]\n #[should_panic(expected = \"creating inhabited type\")]\n fn test() {"}, {"sha": "385192b882ba80acf76c84d9e1e4a8678e7f5d07", "filename": "src/test/ui/issues/issue-48508.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -8,7 +8,6 @@\n \n // compile-flags:-g\n // ignore-pretty issue #37195\n-// ignore-asmjs wasm2js does not support source maps yet\n \n #![feature(non_ascii_idents)]\n "}, {"sha": "79cc107d4fec216eb56e66f707a76c477362cce8", "filename": "src/test/ui/issues/issue-49579.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,5 @@\n // build-pass (FIXME(62277): could be check-pass?)\n+// ignore-emscripten no i128 support\n \n fn fibs(n: u32) -> impl Iterator<Item=u128> {\n     (0 .. n)"}, {"sha": "8ab845366b7b4b873687dbc9e7aa6c4b82cd4237", "filename": "src/test/ui/issues/issue-58463.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n // compile-flags:-C debuginfo=2\n-// ignore-asmjs wasm2js does not support source maps yet\n-\n fn foo() -> impl Copy {\n     foo\n }"}, {"sha": "d6612035750836e49accc865a8f2d05dcaeb35b3", "filename": "src/test/ui/iterators/iter-count-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;"}, {"sha": "f1eded31702c4449d4ebf383127d13b251d84b81", "filename": "src/test/ui/iterators/iter-position-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;"}, {"sha": "5d67c7cbb42565e00898ee95cb7d5b155a201c7f", "filename": "src/test/ui/iterators/iter-step-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n \n use std::panic;"}, {"sha": "ee4ab4d24c6ab22da3d6c2579bf01308c144c0cf", "filename": "src/test/ui/iterators/iter-sum-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n \n use std::panic;"}, {"sha": "429f8e0bc9648a61aeecc631e91202fce4770891", "filename": "src/test/ui/iterators/iter-sum-overflow-overflow-checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C overflow-checks\n \n use std::panic;"}, {"sha": "9f1a31d1ae2741cb033adf3598d713f25211c1e9", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -13,8 +13,6 @@\n // compile-flags: --test -C debug_assertions=yes\n // revisions: std core\n \n-// ignore-emscripten compiled with panic=abort by default\n-\n #![cfg_attr(core, no_std)]\n \n #[cfg(std)] use std::fmt;"}, {"sha": "6f13d5612ce51b93a333eaf4dfbcb558e68f5b17", "filename": "src/test/ui/mir/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n #![feature(never_type)]"}, {"sha": "2949437b1e4b659db6463f812ae0239c8c6fdb5b", "filename": "src/test/ui/mir/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::cell::RefCell;\n use std::panic;"}, {"sha": "d210abdf499d0422e94cbe1ef49635a48381c278", "filename": "src/test/ui/numbers-arithmetic/float-int-invalid-const-cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-emscripten no i128 support\n \n #![deny(const_err)]\n "}, {"sha": "ea0ef95e4f1af3d5c8bf3a1ff6aa6eb10221ea1a", "filename": "src/test/ui/numbers-arithmetic/i128.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,9 @@\n // run-pass\n #![allow(overflowing_literals)]\n \n+// ignore-emscripten i128 doesn't work\n+\n+\n #![feature(test)]\n \n extern crate test;"}, {"sha": "e9927304f23f8c380a0f1c9ea5fa0d76a79e2536", "filename": "src/test/ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // compile-flags: -C debug_assertions=yes\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // ignore-emscripten dies with an LLVM error\n \n use std::panic;"}, {"sha": "bef7deb62760e45191fbb7d118a1429a0ab3df75", "filename": "src/test/ui/numbers-arithmetic/u128-as-f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-emscripten u128 not supported\n \n #![feature(test)]\n #![deny(overflowing_literals)]"}, {"sha": "9394071632377eec0b7ec4baa72fb1d9cdeba500", "filename": "src/test/ui/numbers-arithmetic/u128.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// ignore-emscripten u128 not supported\n+\n \n #![feature(test)]\n "}, {"sha": "5d72771c2dcff1bdff532ec1214b0acb67daa901", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -4,7 +4,7 @@\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n // error-pattern: is not compiled with this crate's panic strategy `unwind`\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "4c25c09d6438f3146ca04a355be849481707add5", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "478af451e7f657bbd73ecceb3ca5b180027019ca", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -2,7 +2,7 @@\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "b0d6629561803077c5324c0c2d9d61e553657557", "filename": "src/test/ui/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare always compiled as panic=abort right now and this requires unwinding\n // This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n // in a runtime panic.\n "}, {"sha": "418178d0f0ead071c24efda048d43721ac535eec", "filename": "src/test/ui/proc-macro/expand-with-a-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // aux-build:expand-with-a-macro.rs\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![deny(warnings)]\n "}, {"sha": "f1e53a0d8b4266658134f0953db9b546126ee211", "filename": "src/test/ui/reachable-unnameable-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable-unnameable-items.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // aux-build:reachable-unnameable-items.rs\n \n extern crate reachable_unnameable_items;"}, {"sha": "39825c4f9a93890ce663f31422b39d0b33a3cdcb", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: --test\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n-\n #![feature(test)]\n \n extern crate test;"}, {"sha": "7923aa7c0e22f31affe992fabc45afaa67d844f9", "filename": "src/test/ui/rfcs/rfc1857-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![allow(dead_code, unreachable_code)]\n "}, {"sha": "164ae79c254faaeb6ce9ad8e3cf5ee327cfac3e0", "filename": "src/test/ui/sepcomp/sepcomp-lib-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -4,7 +4,6 @@\n \n // aux-build:sepcomp_lib.rs\n // compile-flags: -C lto -g\n-// ignore-asmjs wasm2js does not support source maps yet\n // no-prefer-dynamic\n \n extern crate sepcomp_lib;"}, {"sha": "1a478460efc6c8954c6714450b848652cd700a85", "filename": "src/test/ui/test-attrs/test-allow-fail-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: --test\n #![feature(allow_fail)]\n "}, {"sha": "9fa759f9eb4837a25ff0b215cba976b78f849412", "filename": "src/test/ui/test-attrs/test-should-fail-good-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: --test\n #[test]\n #[should_panic(expected = \"foo\")]"}, {"sha": "f86499e2e3f86d9130f34c69da1ecef4844af05d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -10,7 +10,6 @@\n // This is a regression test for issue #17021.\n //\n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n use std::ptr;\n "}, {"sha": "df56448dd225df39686f1ef541cb395776f8ee5d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16b7f705bd7c266a924e43a31495477dc4c9321/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=d16b7f705bd7c266a924e43a31495477dc4c9321", "patch": "@@ -141,10 +141,7 @@ impl EarlyProps {\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n-                // FIXME: Re-enable run-fail once panics are handled correctly\n-                if config.target.contains(\"emscripten\") && config.mode == common::RunFail {\n-                    props.ignore = Ignore::Ignore;\n-                }\n+\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoGdbLldb) &&"}]}