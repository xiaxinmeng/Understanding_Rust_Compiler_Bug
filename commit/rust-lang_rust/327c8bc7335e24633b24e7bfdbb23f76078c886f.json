{"sha": "327c8bc7335e24633b24e7bfdbb23f76078c886f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyN2M4YmM3MzM1ZTI0NjMzYjI0ZTdiZmRiYjIzZjc2MDc4Yzg4NmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-21T02:05:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-21T03:56:06Z"}, "message": "build: Run tutorial tests", "tree": {"sha": "632e8c3efc2c3463afd811a556ea98fa7f6d5e83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632e8c3efc2c3463afd811a556ea98fa7f6d5e83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/327c8bc7335e24633b24e7bfdbb23f76078c886f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/327c8bc7335e24633b24e7bfdbb23f76078c886f", "html_url": "https://github.com/rust-lang/rust/commit/327c8bc7335e24633b24e7bfdbb23f76078c886f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/327c8bc7335e24633b24e7bfdbb23f76078c886f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba5cc236f7596148ad560b0bb651d82d15f0fc7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5cc236f7596148ad560b0bb651d82d15f0fc7f", "html_url": "https://github.com/rust-lang/rust/commit/ba5cc236f7596148ad560b0bb651d82d15f0fc7f"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "5d94b854ea289be547f017de4d968378a04bf8db", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/327c8bc7335e24633b24e7bfdbb23f76078c886f/configure", "raw_url": "https://github.com/rust-lang/rust/raw/327c8bc7335e24633b24e7bfdbb23f76078c886f/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=327c8bc7335e24633b24e7bfdbb23f76078c886f", "patch": "@@ -460,6 +460,7 @@ do\n     make_dir $h/test/bench\n     make_dir $h/test/perf\n     make_dir $h/test/pretty\n+    make_dir $h/test/doc-tutorial\n done\n \n # Configure submodules"}, {"sha": "e2fbe7653e96ce34d930bf191306c82f6d479a04", "filename": "doc/tutorial.md", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/327c8bc7335e24633b24e7bfdbb23f76078c886f/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/327c8bc7335e24633b24e7bfdbb23f76078c886f/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=327c8bc7335e24633b24e7bfdbb23f76078c886f", "patch": "@@ -642,6 +642,7 @@ you use the matching to get at the contents of data types. Remember\n that `(float, float)` is a tuple of two floats:\n \n ~~~~\n+## xfail-test\n fn angle(vec: (float, float)) -> float {\n     alt vec {\n       (0f, y) if y < 0f { 1.5 * float::consts::pi }\n@@ -895,6 +896,7 @@ should almost always specify the type of that argument as `fn()`, so\n that callers have the flexibility to pass whatever they want.\n \n ~~~~\n+## xfail-test\n fn call_twice(f: fn()) { f(); f(); }\n call_twice({|| \"I am a stack closure; });\n call_twice(fn@() { \"I am a boxed closure\"; });\n@@ -1154,6 +1156,7 @@ get at their contents. All variant constructors can be used as\n patterns, as in this definition of `area`:\n \n ~~~~\n+## xfail-test\n # type point = {x: float, y: float};\n # enum shape { circle(point, float), rectangle(point, point) }\n fn area(sh: shape) -> float {\n@@ -2152,6 +2155,7 @@ hexadecimal string and prints to standard output. If you have the\n OpenSSL libraries installed, it should 'just work'.\n \n ~~~~\n+## xfail-test\n use std;\n \n native mod crypto {\n@@ -2182,6 +2186,7 @@ Before we can call `SHA1`, we have to declare it. That is what this\n part of the program is responsible for:\n \n ~~~~\n+## xfail-test\n native mod crypto {\n     fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n }\n@@ -2197,6 +2202,7 @@ link that in. If you want the module to have a different name from the\n actual library, you can use the `\"link_name\"` attribute, like:\n \n ~~~~\n+## xfail-test\n #[link_name = \"crypto\"]\n native mod something {\n     fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n@@ -2229,6 +2235,7 @@ The native `SHA1` function is declared to take three arguments, and\n return a pointer.\n \n ~~~~\n+## xfail-test\n # native mod crypto {\n fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n # }\n@@ -2407,6 +2414,7 @@ For example, imagine we wish to perform two expensive computations\n in parallel.  We might write something like:\n \n ~~~~\n+## xfail-test\n # fn some_expensive_computation() -> int { 42 }\n # fn some_other_expensive_computation() {}\n let port = comm::port::<int>();\n@@ -2454,6 +2462,7 @@ some other expensive computation and then waiting for the child's result\n to arrive on the port:\n \n ~~~~\n+## xfail-test\n # fn some_other_expensive_computation() {}\n # let port = comm::port::<int>();\n some_other_expensive_computation();\n@@ -2492,7 +2501,7 @@ strified version of the received value, `uint::to_str(value)`.\n \n Here is the code for the parent task:\n ~~~~\n-\n+## xfail-test\n # fn stringifier(from_par: comm::port<uint>,\n #                to_par: comm::chan<str>) {}\n fn main() {"}, {"sha": "4bc72c35fd289a40972f56e148db968a7a5149fb", "filename": "mk/tests.mk", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/327c8bc7335e24633b24e7bfdbb23f76078c886f/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/327c8bc7335e24633b24e7bfdbb23f76078c886f/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=327c8bc7335e24633b24e7bfdbb23f76078c886f", "patch": "@@ -99,6 +99,24 @@ tidy:\n \t  \t| xargs -n 10 python $(S)src/etc/tidy.py\n endif\n \n+\n+######################################################################\n+# Extracting tests for docs\n+######################################################################\n+\n+EXTRACT_TESTS := $(CFG_PYTHON) $(S)src/etc/extract-tests.py\n+\n+define DEF_DOC_TEST_HOST\n+\n+doc-tutorial-extract$(1):\n+\t@$$(call E, extract: tutorial tests)\n+\t$$(Q)$$(EXTRACT_TESTS) $$(S)doc/tutorial.md $(1)/test/doc-tutorial\n+\n+endef\n+\n+$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(call DEF_DOC_TEST_HOST,$(host))))\n+\n ######################################################################\n # Rules for the test runners\n ######################################################################\n@@ -121,7 +139,8 @@ check-stage$(1)-T-$(2)-H-$(3): tidy\t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-cfail\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-bench\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty                    \\\n-        check-stage$(1)-T-$(2)-H-$(3)-rustdoc\n+        check-stage$(1)-T-$(2)-H-$(3)-rustdoc                   \\\n+        check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial\n \n check-stage$(1)-T-$(2)-H-$(3)-core:\t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-core-dummy\n@@ -168,6 +187,9 @@ check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty:\t\t\t\t\\\n check-stage$(1)-T-$(2)-H-$(3)-rustdoc:\t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rustdoc-dummy\n \n+check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial: \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-dummy\n+\n # Rules for the core library test runner\n \n $(3)/test/coretest.stage$(1)-$(2)$$(X):\t\t\t\\\n@@ -293,6 +315,12 @@ PRETTY_PRETTY_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n         --build-base $(3)/test/pretty/\t\t\t\\\n         --mode pretty\n \n+DOC_TUTORIAL_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\\\n+\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n+        --src-base $(3)/test/doc-tutorial/\t\t\\\n+        --build-base $(3)/test/doc-tutorial/\t\t\\\n+        --mode run-pass\n+\n check-stage$(1)-T-$(2)-H-$(3)-cfail-dummy:\t\t\\\n \t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n \t\t$$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n@@ -365,6 +393,14 @@ check-stage$(1)-T-$(2)-H-$(3)-pretty-pretty-dummy:\t\\\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n \t\t$$(PRETTY_PRETTY_ARGS$(1)-T-$(2)-H-$(3))\n \n+check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-dummy:       \\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+\t        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n+                doc-tutorial-extract$(3)\n+\t@$$(call E, run doc-tutorial: $$<)\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n+                $$(DOC_TUTORIAL_ARGS$(1)-T-$(2)-H-$(3))\n+\n endef\n \n # Instantiate the template for stage 0, 1, 2, 3\n@@ -471,6 +507,9 @@ check-stage$(1)-H-$(2)-pretty-pretty:\t\t\t\t\\\n check-stage$(1)-H-$(2)-rustdoc:\t\t\t\t\t\\\n \t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n \t check-stage$(1)-T-$$(target)-H-$(2)-rustdoc)\n+check-stage$(1)-H-$(2)-doc-tutorial:\t\t\t\t\\\n+\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n+\t check-stage$(1)-T-$$(target)-H-$(2)-doc-tutorial)\n \n endef\n \n@@ -534,6 +573,9 @@ check-stage$(1)-H-all-pretty-pretty: \\\n check-stage$(1)-H-all-rustdoc: \\\n \t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n \t check-stage$(1)-H-$$(target)-rustdoc)\n+check-stage$(1)-H-all-doc-tutorial: \\\n+\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n+\t check-stage$(1)-H-$$(target)-doc-tutorial)\n \n endef\n \n@@ -557,6 +599,7 @@ check-stage$(1)-pretty-rfail: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-rfail\n check-stage$(1)-pretty-bench: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-bench\n check-stage$(1)-pretty-pretty: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-pretty\n check-stage$(1)-rustdoc: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rustdoc\n+check-stage$(1)-doc-tutorial: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial\n \n endef\n "}, {"sha": "32fc25a685a0099368cf0be654cd470d481f496f", "filename": "src/etc/extract-tests.py", "status": "renamed", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/327c8bc7335e24633b24e7bfdbb23f76078c886f/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/327c8bc7335e24633b24e7bfdbb23f76078c886f/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=327c8bc7335e24633b24e7bfdbb23f76078c886f", "patch": "@@ -6,11 +6,12 @@\n \n import sys, re;\n \n-if len(sys.argv) < 2:\n+if len(sys.argv) < 3:\n     print(\"Please provide an input filename\")\n     sys.exit(1)\n \n filename = sys.argv[1]\n+dest = sys.argv[2]\n f = open(filename)\n lines = f.readlines()\n f.close()\n@@ -30,24 +31,31 @@\n     elif re.match(\"~~~\", line):\n         block = \"\"\n         ignore = False\n+        xfail = False\n         while cur < len(lines):\n             line = lines[cur]\n             cur += 1\n             if re.match(r\"\\s*## (notrust|ignore)\", line):\n                 ignore = True\n+            elif re.match(r\"\\s*## xfail-test\", line):\n+                xfail = True\n             elif re.match(\"~~~\", line):\n                 break\n             else:\n                 block += re.sub(\"^# \", \"\", line)\n         if not ignore:\n             if not re.search(r\"\\bfn main\\b\", block):\n-                if re.search(r\"(^|\\n) *(native|use|mod|import|export)\\b\", block):\n+                if re.search(\n+                    r\"(^|\\n) *(native|use|mod|import|export)\\b\", block):\n                     block += \"\\nfn main() {}\\n\"\n                 else:\n                     block = \"fn main() {\\n\" + block + \"\\n}\\n\"\n             if not re.search(r\"\\buse std\\b\", block):\n                 block = \"use std;\\n\" + block;\n-            filename = \"fragments/\" + str(chapter) + \"_\" + str(chapter_n) + \".rs\"\n+            if xfail:\n+                block = \"// xfail-test\\n\" + block\n+            filename = (dest + \"/\" + str(chapter)\n+                        + \"_\" + str(chapter_n) + \".rs\")\n             chapter_n += 1\n             f = open(filename, 'w')\n             f.write(block)", "previous_filename": "doc/extract-tests.py"}]}