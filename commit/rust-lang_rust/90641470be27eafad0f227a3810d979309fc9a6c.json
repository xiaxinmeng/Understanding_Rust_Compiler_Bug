{"sha": "90641470be27eafad0f227a3810d979309fc9a6c", "node_id": "C_kwDOAAsO6NoAKDkwNjQxNDcwYmUyN2VhZmFkMGYyMjdhMzgxMGQ5NzkzMDlmYzlhNmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-07T18:33:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T18:33:26Z"}, "message": "Rollup merge of #98979 - RalfJung:more-alloc-range, r=oli-obk\n\ninterpret: use AllocRange in UninitByteAccess\n\nalso use nice new format string syntax in `interpret/error.rs`, and use the `#` flag to add `0x` prefixes where applicable.\n\nr? ``@oli-obk``", "tree": {"sha": "dd55f35ba9c3729066833f324ba8419058215808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd55f35ba9c3729066833f324ba8419058215808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90641470be27eafad0f227a3810d979309fc9a6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixyb2CRBK7hj4Ov3rIwAAxSQIAEAgWWOT977SZvfvP2lc8UvU\nvi7EhSGteK2eRDo3+Xa0VbMA2C8hTHfFjotShlIRY3g+eZqZEm1KSK7UUpMVu0Ic\nxBQbWOoEiBpyoQS/P9bx0VKAwOQcU2JIqNQd/xbXzO0e5RRo9FUmtkeD1QMWvs6a\nGII4RoL7gkYWVMW818jgY3x43L3zqLwLDPCzWwm7N9VsWCIXVvAkIMJsOgJxGoMF\nVt0uV7ARhcJK2YkfsjQojf4uLE8Oy3A3Vpa9DKhM7JTAW5JwuCMscXsRJaizxoK9\nLW4FIlW+r87wQ+yGvPyUh69DKcBxZhIKZp9vf5kecgXgGiSVEUeOlc6s3ZFsZ4M=\n=nXcU\n-----END PGP SIGNATURE-----\n", "payload": "tree dd55f35ba9c3729066833f324ba8419058215808\nparent 8cc6bb3d5df18dba0094897e1239bf7507a029f4\nparent 27b7b3dcd6b0dddc1dae6d4412f05c4aec8aa72f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657218806 +0200\ncommitter GitHub <noreply@github.com> 1657218806 +0200\n\nRollup merge of #98979 - RalfJung:more-alloc-range, r=oli-obk\n\ninterpret: use AllocRange in UninitByteAccess\n\nalso use nice new format string syntax in `interpret/error.rs`, and use the `#` flag to add `0x` prefixes where applicable.\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90641470be27eafad0f227a3810d979309fc9a6c", "html_url": "https://github.com/rust-lang/rust/commit/90641470be27eafad0f227a3810d979309fc9a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90641470be27eafad0f227a3810d979309fc9a6c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cc6bb3d5df18dba0094897e1239bf7507a029f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc6bb3d5df18dba0094897e1239bf7507a029f4", "html_url": "https://github.com/rust-lang/rust/commit/8cc6bb3d5df18dba0094897e1239bf7507a029f4"}, {"sha": "27b7b3dcd6b0dddc1dae6d4412f05c4aec8aa72f", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b7b3dcd6b0dddc1dae6d4412f05c4aec8aa72f", "html_url": "https://github.com/rust-lang/rust/commit/27b7b3dcd6b0dddc1dae6d4412f05c4aec8aa72f"}], "stats": {"total": 117, "additions": 54, "deletions": 63}, "files": [{"sha": "08102585a7b743342e526dbecd5ec94145105e7b", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90641470be27eafad0f227a3810d979309fc9a6c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90641470be27eafad0f227a3810d979309fc9a6c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=90641470be27eafad0f227a3810d979309fc9a6c", "patch": "@@ -427,7 +427,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             err_ub!(DanglingIntPointer(0, _)) =>\n                 { \"a null {kind}\" },\n             err_ub!(DanglingIntPointer(i, _)) =>\n-                { \"a dangling {kind} (address 0x{i:x} is unallocated)\" },\n+                { \"a dangling {kind} (address {i:#x} is unallocated)\" },\n             err_ub!(PointerOutOfBounds { .. }) =>\n                 { \"a dangling {kind} (going beyond the bounds of its allocation)\" },\n             // This cannot happen during const-eval (because interning already detects\n@@ -941,7 +941,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                                 // element that byte belongs to so we can\n                                 // provide an index.\n                                 let i = usize::try_from(\n-                                    access.uninit_offset.bytes() / layout.size.bytes(),\n+                                    access.uninit.start.bytes() / layout.size.bytes(),\n                                 )\n                                 .unwrap();\n                                 self.path.push(PathElem::ArrayElem(i));"}, {"sha": "ae333846f067c73fce5f891d9831ed27fc5c28a8", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/90641470be27eafad0f227a3810d979309fc9a6c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90641470be27eafad0f227a3810d979309fc9a6c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=90641470be27eafad0f227a3810d979309fc9a6c", "patch": "@@ -179,6 +179,11 @@ pub fn alloc_range(start: Size, size: Size) -> AllocRange {\n }\n \n impl AllocRange {\n+    #[inline]\n+    pub fn from(r: Range<Size>) -> Self {\n+        alloc_range(r.start, r.end - r.start) // `Size` subtraction (overflow-checked)\n+    }\n+\n     #[inline(always)]\n     pub fn end(self) -> Size {\n         self.start + self.size // This does overflow checking.\n@@ -1095,17 +1100,17 @@ impl InitMask {\n     /// Returns `Ok(())` if it's initialized. Otherwise returns a range of byte\n     /// indexes for the first contiguous span of the uninitialized access.\n     #[inline]\n-    pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), Range<Size>> {\n+    pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), AllocRange> {\n         if end > self.len {\n-            return Err(self.len..end);\n+            return Err(AllocRange::from(self.len..end));\n         }\n \n         let uninit_start = self.find_bit(start, end, false);\n \n         match uninit_start {\n             Some(uninit_start) => {\n                 let uninit_end = self.find_bit(uninit_start, end, true).unwrap_or(end);\n-                Err(uninit_start..uninit_end)\n+                Err(AllocRange::from(uninit_start..uninit_end))\n             }\n             None => Ok(()),\n         }\n@@ -1176,19 +1181,17 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     ///\n     /// Returns `Ok(())` if it's initialized. Otherwise returns the range of byte\n     /// indexes of the first contiguous uninitialized access.\n-    fn is_init(&self, range: AllocRange) -> Result<(), Range<Size>> {\n+    fn is_init(&self, range: AllocRange) -> Result<(), AllocRange> {\n         self.init_mask.is_range_initialized(range.start, range.end()) // `Size` addition\n     }\n \n     /// Checks that a range of bytes is initialized. If not, returns the `InvalidUninitBytes`\n     /// error which will report the first range of bytes which is uninitialized.\n     fn check_init(&self, range: AllocRange) -> AllocResult {\n-        self.is_init(range).map_err(|idx_range| {\n+        self.is_init(range).map_err(|uninit_range| {\n             AllocError::InvalidUninitBytes(Some(UninitBytesAccess {\n-                access_offset: range.start,\n-                access_size: range.size,\n-                uninit_offset: idx_range.start,\n-                uninit_size: idx_range.end - idx_range.start, // `Size` subtraction\n+                access: range,\n+                uninit: uninit_range,\n             }))\n         })\n     }"}, {"sha": "795f23edb318641df48bdf93fcaafa027b27676e", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 39, "deletions": 51, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/90641470be27eafad0f227a3810d979309fc9a6c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90641470be27eafad0f227a3810d979309fc9a6c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=90641470be27eafad0f227a3810d979309fc9a6c", "patch": "@@ -1,4 +1,4 @@\n-use super::{AllocId, ConstAlloc, Pointer, Scalar};\n+use super::{AllocId, AllocRange, ConstAlloc, Pointer, Scalar};\n \n use crate::mir::interpret::ConstValue;\n use crate::ty::{layout, query::TyCtxtAt, tls, FnSig, Ty, ValTree};\n@@ -162,9 +162,9 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n             AlreadyReported(ErrorGuaranteed { .. }) => {\n                 write!(f, \"encountered constants with type errors, stopping evaluation\")\n             }\n-            Layout(ref err) => write!(f, \"{}\", err),\n-            FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{}\", err),\n-            SizeOfUnsizedType(ty) => write!(f, \"size_of called on unsized type `{}`\", ty),\n+            Layout(ref err) => write!(f, \"{err}\"),\n+            FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{err}\"),\n+            SizeOfUnsizedType(ty) => write!(f, \"size_of called on unsized type `{ty}`\"),\n         }\n     }\n }\n@@ -205,14 +205,10 @@ impl fmt::Display for CheckInAllocMsg {\n /// Details of an access to uninitialized bytes where it is not allowed.\n #[derive(Debug)]\n pub struct UninitBytesAccess {\n-    /// Location of the original memory access.\n-    pub access_offset: Size,\n-    /// Size of the original memory access.\n-    pub access_size: Size,\n-    /// Location of the first uninitialized byte that was accessed.\n-    pub uninit_offset: Size,\n-    /// Number of consecutive uninitialized bytes that were accessed.\n-    pub uninit_size: Size,\n+    /// Range of the original memory access.\n+    pub access: AllocRange,\n+    /// Range of the uninit memory that was encountered. (Might not be maximal.)\n+    pub uninit: AllocRange,\n }\n \n /// Information about a size mismatch.\n@@ -308,30 +304,28 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UndefinedBehaviorInfo::*;\n         match self {\n-            Ub(msg) => write!(f, \"{}\", msg),\n+            Ub(msg) => write!(f, \"{msg}\"),\n             Unreachable => write!(f, \"entering unreachable code\"),\n             BoundsCheckFailed { ref len, ref index } => {\n-                write!(f, \"indexing out of bounds: the len is {} but the index is {}\", len, index)\n+                write!(f, \"indexing out of bounds: the len is {len} but the index is {index}\")\n             }\n             DivisionByZero => write!(f, \"dividing by zero\"),\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n             DivisionOverflow => write!(f, \"overflow in signed division (dividing MIN by -1)\"),\n             RemainderOverflow => write!(f, \"overflow in signed remainder (dividing MIN by -1)\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n-            InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n+            InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {msg}\"),\n             InvalidVtableDropFn(sig) => write!(\n                 f,\n-                \"invalid drop function signature: got {}, expected exactly one argument which must be a pointer type\",\n-                sig\n+                \"invalid drop function signature: got {sig}, expected exactly one argument which must be a pointer type\",\n             ),\n             InvalidVtableSize => {\n                 write!(f, \"invalid vtable: size is bigger than largest supported object\")\n             }\n-            InvalidVtableAlignment(msg) => write!(f, \"invalid vtable: alignment {}\", msg),\n+            InvalidVtableAlignment(msg) => write!(f, \"invalid vtable: alignment {msg}\"),\n             UnterminatedCString(p) => write!(\n                 f,\n-                \"reading a null-terminated string starting at {:?} with no null found before end of allocation\",\n-                p,\n+                \"reading a null-terminated string starting at {p:?} with no null found before end of allocation\",\n             ),\n             PointerUseAfterFree(a) => {\n                 write!(f, \"pointer to {a:?} was dereferenced after this allocation got freed\")\n@@ -359,41 +353,36 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,\n-                \"accessing memory with alignment {}, but alignment {} is required\",\n-                has.bytes(),\n-                required.bytes()\n+                \"accessing memory with alignment {has}, but alignment {required} is required\",\n+                has = has.bytes(),\n+                required = required.bytes()\n             ),\n             WriteToReadOnly(a) => write!(f, \"writing to {a:?} which is read-only\"),\n             DerefFunctionPointer(a) => write!(f, \"accessing {a:?} which contains a function\"),\n             ValidationFailure { path: None, msg } => {\n-                write!(f, \"constructing invalid value: {}\", msg)\n+                write!(f, \"constructing invalid value: {msg}\")\n             }\n             ValidationFailure { path: Some(path), msg } => {\n-                write!(f, \"constructing invalid value at {}: {}\", path, msg)\n+                write!(f, \"constructing invalid value at {path}: {msg}\")\n             }\n             InvalidBool(b) => {\n-                write!(f, \"interpreting an invalid 8-bit value as a bool: 0x{:02x}\", b)\n+                write!(f, \"interpreting an invalid 8-bit value as a bool: 0x{b:02x}\")\n             }\n             InvalidChar(c) => {\n-                write!(f, \"interpreting an invalid 32-bit value as a char: 0x{:08x}\", c)\n+                write!(f, \"interpreting an invalid 32-bit value as a char: 0x{c:08x}\")\n             }\n-            InvalidTag(val) => write!(f, \"enum value has invalid tag: {:x}\", val),\n+            InvalidTag(val) => write!(f, \"enum value has invalid tag: {val:x}\"),\n             InvalidFunctionPointer(p) => {\n-                write!(f, \"using {:?} as function pointer but it does not point to a function\", p)\n+                write!(f, \"using {p:?} as function pointer but it does not point to a function\")\n             }\n-            InvalidStr(err) => write!(f, \"this string is not valid UTF-8: {}\", err),\n-            InvalidUninitBytes(Some((alloc, access))) => write!(\n+            InvalidStr(err) => write!(f, \"this string is not valid UTF-8: {err}\"),\n+            InvalidUninitBytes(Some((alloc, info))) => write!(\n                 f,\n-                \"reading {} byte{} of memory starting at {:?}, \\\n-                 but {} byte{} {} uninitialized starting at {:?}, \\\n+                \"reading memory at {alloc:?}{access:?}, \\\n+                 but memory is uninitialized at {uninit:?}, \\\n                  and this operation requires initialized memory\",\n-                access.access_size.bytes(),\n-                pluralize!(access.access_size.bytes()),\n-                Pointer::new(*alloc, access.access_offset),\n-                access.uninit_size.bytes(),\n-                pluralize!(access.uninit_size.bytes()),\n-                pluralize!(\"is\", access.uninit_size.bytes()),\n-                Pointer::new(*alloc, access.uninit_offset),\n+                access = info.access,\n+                uninit = info.uninit,\n             ),\n             InvalidUninitBytes(None) => write!(\n                 f,\n@@ -402,8 +391,7 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             DeadLocal => write!(f, \"accessing a dead local variable\"),\n             ScalarSizeMismatch(self::ScalarSizeMismatch { target_size, data_size }) => write!(\n                 f,\n-                \"scalar size mismatch: expected {} bytes but got {} bytes instead\",\n-                target_size, data_size\n+                \"scalar size mismatch: expected {target_size} bytes but got {data_size} bytes instead\",\n             ),\n             UninhabitedEnumVariantWritten => {\n                 write!(f, \"writing discriminant of an uninhabited enum\")\n@@ -437,13 +425,13 @@ impl fmt::Display for UnsupportedOpInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UnsupportedOpInfo::*;\n         match self {\n-            Unsupported(ref msg) => write!(f, \"{}\", msg),\n+            Unsupported(ref msg) => write!(f, \"{msg}\"),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\"),\n             PartialPointerOverwrite(ptr) => {\n-                write!(f, \"unable to overwrite parts of a pointer in memory at {:?}\", ptr)\n+                write!(f, \"unable to overwrite parts of a pointer in memory at {ptr:?}\")\n             }\n-            ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({:?})\", did),\n-            ReadExternStatic(did) => write!(f, \"cannot read from extern static ({:?})\", did),\n+            ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({did:?})\"),\n+            ReadExternStatic(did) => write!(f, \"cannot read from extern static ({did:?})\"),\n         }\n     }\n }\n@@ -526,11 +514,11 @@ impl fmt::Display for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use InterpError::*;\n         match *self {\n-            Unsupported(ref msg) => write!(f, \"{}\", msg),\n-            InvalidProgram(ref msg) => write!(f, \"{}\", msg),\n-            UndefinedBehavior(ref msg) => write!(f, \"{}\", msg),\n-            ResourceExhaustion(ref msg) => write!(f, \"{}\", msg),\n-            MachineStop(ref msg) => write!(f, \"{}\", msg),\n+            Unsupported(ref msg) => write!(f, \"{msg}\"),\n+            InvalidProgram(ref msg) => write!(f, \"{msg}\"),\n+            UndefinedBehavior(ref msg) => write!(f, \"{msg}\"),\n+            ResourceExhaustion(ref msg) => write!(f, \"{msg}\"),\n+            MachineStop(ref msg) => write!(f, \"{msg}\"),\n         }\n     }\n }"}, {"sha": "9322654b2928b3e14c81696cb126e6e84a2a2ac3", "filename": "src/test/ui/intrinsics/intrinsic-raw_eq-const-padding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90641470be27eafad0f227a3810d979309fc9a6c/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90641470be27eafad0f227a3810d979309fc9a6c/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-raw_eq-const-padding.stderr?ref=90641470be27eafad0f227a3810d979309fc9a6c", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/intrinsic-raw_eq-const-padding.rs:6:5\n    |\n LL |     std::intrinsics::raw_eq(&(1_u8, 2_u16), &(1_u8, 2_u16))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reading 4 bytes of memory starting at alloc3, but 1 byte is uninitialized starting at alloc3+0x1, and this operation requires initialized memory\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reading memory at alloc3[0x0..0x4], but memory is uninitialized at [0x1..0x2], and this operation requires initialized memory\n \n error: aborting due to previous error\n "}]}