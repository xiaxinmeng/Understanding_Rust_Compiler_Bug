{"sha": "704e47f78b4c8801a3c76f235a5a152e1b60b300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNGU0N2Y3OGI0Yzg4MDFhM2M3NmYyMzVhNWExNTJlMWI2MGIzMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-12T17:26:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-12T17:26:56Z"}, "message": "Auto merge of #78407 - oli-obk:ub_checkable_ctfe, r=RalfJung,pnkfelix\n\nMake CTFE able to check for UB...\n\n... by not doing any optimizations on the `const fn` MIR used in CTFE. This means we duplicate all `const fn`'s MIR now, once for CTFE, once for runtime. This PR is for checking the perf effect, so we have some data when talking about https://github.com/rust-lang/const-eval/blob/master/rfcs/0000-const-ub.md\n\nTo do this, we now have two queries for obtaining mir: `optimized_mir` and `mir_for_ctfe`. It is now illegal to invoke `optimized_mir` to obtain the MIR of a const/static item's initializer, an array length, an inline const expression or an enum discriminant initializer. For `const fn`, both `optimized_mir` and `mir_for_ctfe` work, the former returning the MIR that LLVM should use if the function is called at runtime. Similarly it is illegal to invoke `mir_for_ctfe` on regular functions.\n\nThis is all checked via appropriate assertions and I don't think it is easy to get wrong, as there should be no `mir_for_ctfe` calls outside the const evaluator or metadata encoding. Almost all rustc devs should keep using `optimized_mir` (or `instance_mir` for that matter).", "tree": {"sha": "867a118a9e4fd8490e80316fd699e8533a2c0815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/867a118a9e4fd8490e80316fd699e8533a2c0815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/704e47f78b4c8801a3c76f235a5a152e1b60b300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/704e47f78b4c8801a3c76f235a5a152e1b60b300", "html_url": "https://github.com/rust-lang/rust/commit/704e47f78b4c8801a3c76f235a5a152e1b60b300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/704e47f78b4c8801a3c76f235a5a152e1b60b300/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497c9a256b1c2961e91565ccc6e0dd3a87a031ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/497c9a256b1c2961e91565ccc6e0dd3a87a031ed", "html_url": "https://github.com/rust-lang/rust/commit/497c9a256b1c2961e91565ccc6e0dd3a87a031ed"}, {"sha": "53e3a23572b599844653fe8f4add4a02966dcd9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/53e3a23572b599844653fe8f4add4a02966dcd9b", "html_url": "https://github.com/rust-lang/rust/commit/53e3a23572b599844653fe8f4add4a02966dcd9b"}], "stats": {"total": 776, "additions": 556, "deletions": 220}, "files": [{"sha": "eace17475771d6707aef9adab44ea58b0765123f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -1160,6 +1160,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n+    fn is_ctfe_mir_available(&self, id: DefIndex) -> bool {\n+        self.root.tables.mir_for_ctfe.get(self, id).is_some()\n+    }\n+\n     fn is_item_mir_available(&self, id: DefIndex) -> bool {\n         self.root.tables.mir.get(self, id).is_some()\n     }\n@@ -1183,6 +1187,17 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, tcx))\n     }\n \n+    fn get_mir_for_ctfe(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n+        self.root\n+            .tables\n+            .mir_for_ctfe\n+            .get(self, id)\n+            .unwrap_or_else(|| {\n+                bug!(\"get_mir_for_ctfe: missing MIR for `{:?}`\", self.local_def_id(id))\n+            })\n+            .decode((self, tcx))\n+    }\n+\n     fn get_mir_abstract_const(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "96db0157422a7e58c1d01d8804977f515a46bd46", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -115,6 +115,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         })\n     }\n     optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n+    mir_for_ctfe => { tcx.arena.alloc(cdata.get_mir_for_ctfe(tcx, def_id.index)) }\n     promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     mir_abstract_const => { cdata.get_mir_abstract_const(tcx, def_id.index) }\n     unused_generic_params => { cdata.get_unused_generic_params(def_id.index) }\n@@ -145,6 +146,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n+    is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }\n \n     dylib_dependency_formats => { cdata.get_dylib_dependency_formats(tcx) }\n     is_panic_runtime => { cdata.root.panic_runtime }"}, {"sha": "ccaee8608b61822a78ba4ed5dcedc1e15c87dee9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 87, "deletions": 33, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -758,8 +758,6 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n-        self.encode_optimized_mir(def_id.expect_local());\n-        self.encode_promoted_mir(def_id.expect_local());\n     }\n \n     fn encode_enum_variant_ctor(&mut self, def: &ty::AdtDef, index: VariantIdx) {\n@@ -789,6 +787,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n+        self.encode_mir_for_ctfe(def_id.expect_local());\n         self.encode_optimized_mir(def_id.expect_local());\n         self.encode_promoted_mir(def_id.expect_local());\n     }\n@@ -897,6 +896,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n         self.encode_optimized_mir(def_id.expect_local());\n+        self.encode_mir_for_ctfe(def_id.expect_local());\n         self.encode_promoted_mir(def_id.expect_local());\n     }\n \n@@ -1015,8 +1015,21 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_inferred_outlives(def_id);\n \n         // This should be kept in sync with `PrefetchVisitor.visit_trait_item`.\n-        self.encode_optimized_mir(def_id.expect_local());\n-        self.encode_promoted_mir(def_id.expect_local());\n+        match trait_item.kind {\n+            ty::AssocKind::Type => {}\n+            ty::AssocKind::Const => {\n+                if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id.expect_local()) {\n+                    self.encode_mir_for_ctfe(def_id.expect_local());\n+                    self.encode_promoted_mir(def_id.expect_local());\n+                }\n+            }\n+            ty::AssocKind::Fn => {\n+                if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id.expect_local()) {\n+                    self.encode_optimized_mir(def_id.expect_local());\n+                    self.encode_promoted_mir(def_id.expect_local());\n+                }\n+            }\n+        }\n     }\n \n     fn metadata_output_only(&self) -> bool {\n@@ -1089,23 +1102,28 @@ impl EncodeContext<'a, 'tcx> {\n \n         // The following part should be kept in sync with `PrefetchVisitor.visit_impl_item`.\n \n-        let mir = match ast_item.kind {\n-            hir::ImplItemKind::Const(..) => true,\n+        let (mir, mir_const) = match ast_item.kind {\n+            hir::ImplItemKind::Const(..) => (false, true),\n             hir::ImplItemKind::Fn(ref sig, _) => {\n                 let generics = self.tcx.generics_of(def_id);\n                 let needs_inline = (generics.requires_monomorphization(self.tcx)\n                     || tcx.codegen_fn_attrs(def_id).requests_inline())\n                     && !self.metadata_output_only();\n                 let is_const_fn = sig.header.constness == hir::Constness::Const;\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || is_const_fn || always_encode_mir\n+                (needs_inline || always_encode_mir, is_const_fn)\n             }\n-            hir::ImplItemKind::TyAlias(..) => false,\n+            hir::ImplItemKind::TyAlias(..) => (false, false),\n         };\n         if mir {\n             self.encode_optimized_mir(def_id.expect_local());\n+        }\n+        if mir || mir_const {\n             self.encode_promoted_mir(def_id.expect_local());\n         }\n+        if mir_const {\n+            self.encode_mir_for_ctfe(def_id.expect_local());\n+        }\n     }\n \n     fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {\n@@ -1116,28 +1134,34 @@ impl EncodeContext<'a, 'tcx> {\n         self.lazy(param_names.iter())\n     }\n \n-    fn encode_optimized_mir(&mut self, def_id: LocalDefId) {\n-        debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n-        if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n-            record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n+    fn encode_mir_for_ctfe(&mut self, def_id: LocalDefId) {\n+        debug!(\"EntryBuilder::encode_mir_for_ctfe({:?})\", def_id);\n+        record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));\n \n-            let unused = self.tcx.unused_generic_params(def_id);\n-            if !unused.is_empty() {\n-                record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n-            }\n+        let unused = self.tcx.unused_generic_params(def_id);\n+        if !unused.is_empty() {\n+            record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n+        }\n \n-            let abstract_const = self.tcx.mir_abstract_const(def_id);\n-            if let Ok(Some(abstract_const)) = abstract_const {\n-                record!(self.tables.mir_abstract_consts[def_id.to_def_id()] <- abstract_const);\n-            }\n+        let abstract_const = self.tcx.mir_abstract_const(def_id);\n+        if let Ok(Some(abstract_const)) = abstract_const {\n+            record!(self.tables.mir_abstract_consts[def_id.to_def_id()] <- abstract_const);\n+        }\n+    }\n+\n+    fn encode_optimized_mir(&mut self, def_id: LocalDefId) {\n+        debug!(\"EntryBuilder::encode_optimized_mir({:?})\", def_id);\n+        record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n+\n+        let unused = self.tcx.unused_generic_params(def_id);\n+        if !unused.is_empty() {\n+            record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n         }\n     }\n \n     fn encode_promoted_mir(&mut self, def_id: LocalDefId) {\n         debug!(\"EncodeContext::encode_promoted_mir({:?})\", def_id);\n-        if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n-            record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));\n-        }\n+        record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));\n     }\n \n     // Encodes the inherent implementations of a structure, enumeration, or trait.\n@@ -1406,22 +1430,31 @@ impl EncodeContext<'a, 'tcx> {\n \n         // The following part should be kept in sync with `PrefetchVisitor.visit_item`.\n \n-        let mir = match item.kind {\n-            hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n+        let (mir, const_mir) = match item.kind {\n+            hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => (false, true),\n             hir::ItemKind::Fn(ref sig, ..) => {\n                 let generics = tcx.generics_of(def_id);\n                 let needs_inline = (generics.requires_monomorphization(tcx)\n                     || tcx.codegen_fn_attrs(def_id).requests_inline())\n                     && !self.metadata_output_only();\n+\n+                let is_const_fn = sig.header.constness == hir::Constness::Const;\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || sig.header.constness == hir::Constness::Const || always_encode_mir\n+                let mir = needs_inline || always_encode_mir;\n+                // We don't need the optimized MIR for const fns.\n+                (mir, is_const_fn)\n             }\n-            _ => false,\n+            _ => (false, false),\n         };\n         if mir {\n             self.encode_optimized_mir(def_id.expect_local());\n+        }\n+        if mir || const_mir {\n             self.encode_promoted_mir(def_id.expect_local());\n         }\n+        if const_mir {\n+            self.encode_mir_for_ctfe(def_id.expect_local());\n+        }\n     }\n \n     /// Serialize the text of exported macros\n@@ -1486,7 +1519,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_generics(def_id.to_def_id());\n         self.encode_explicit_predicates(def_id.to_def_id());\n         self.encode_inferred_outlives(def_id.to_def_id());\n-        self.encode_optimized_mir(def_id);\n+        self.encode_mir_for_ctfe(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n \n@@ -1951,6 +1984,12 @@ struct PrefetchVisitor<'tcx> {\n }\n \n impl<'tcx> PrefetchVisitor<'tcx> {\n+    fn prefetch_ctfe_mir(&self, def_id: LocalDefId) {\n+        if self.mir_keys.contains(&def_id) {\n+            self.tcx.ensure().mir_for_ctfe(def_id);\n+            self.tcx.ensure().promoted_mir(def_id);\n+        }\n+    }\n     fn prefetch_mir(&self, def_id: LocalDefId) {\n         if self.mir_keys.contains(&def_id) {\n             self.tcx.ensure().optimized_mir(def_id);\n@@ -1965,42 +2004,57 @@ impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n         let tcx = self.tcx;\n         match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => {\n-                self.prefetch_mir(tcx.hir().local_def_id(item.hir_id))\n+                self.prefetch_ctfe_mir(tcx.hir().local_def_id(item.hir_id))\n             }\n             hir::ItemKind::Fn(ref sig, ..) => {\n                 let def_id = tcx.hir().local_def_id(item.hir_id);\n                 let generics = tcx.generics_of(def_id.to_def_id());\n                 let needs_inline = generics.requires_monomorphization(tcx)\n                     || tcx.codegen_fn_attrs(def_id.to_def_id()).requests_inline();\n-                if needs_inline || sig.header.constness == hir::Constness::Const {\n+                if needs_inline {\n                     self.prefetch_mir(def_id)\n                 }\n+                if sig.header.constness == hir::Constness::Const {\n+                    self.prefetch_ctfe_mir(def_id);\n+                }\n             }\n             _ => (),\n         }\n     }\n \n     fn visit_trait_item(&self, trait_item: &'v hir::TraitItem<'v>) {\n         // This should be kept in sync with `encode_info_for_trait_item`.\n-        self.prefetch_mir(self.tcx.hir().local_def_id(trait_item.hir_id));\n+        let def_id = self.tcx.hir().local_def_id(trait_item.hir_id);\n+        match trait_item.kind {\n+            hir::TraitItemKind::Type(..) => {}\n+            hir::TraitItemKind::Const(..) => {\n+                self.prefetch_ctfe_mir(def_id);\n+            }\n+            hir::TraitItemKind::Fn(..) => {\n+                self.prefetch_mir(def_id);\n+            }\n+        }\n     }\n \n     fn visit_impl_item(&self, impl_item: &'v hir::ImplItem<'v>) {\n         // This should be kept in sync with `encode_info_for_impl_item`.\n         let tcx = self.tcx;\n         match impl_item.kind {\n             hir::ImplItemKind::Const(..) => {\n-                self.prefetch_mir(tcx.hir().local_def_id(impl_item.hir_id))\n+                self.prefetch_ctfe_mir(tcx.hir().local_def_id(impl_item.hir_id))\n             }\n             hir::ImplItemKind::Fn(ref sig, _) => {\n                 let def_id = tcx.hir().local_def_id(impl_item.hir_id);\n                 let generics = tcx.generics_of(def_id.to_def_id());\n                 let needs_inline = generics.requires_monomorphization(tcx)\n                     || tcx.codegen_fn_attrs(def_id.to_def_id()).requests_inline();\n                 let is_const_fn = sig.header.constness == hir::Constness::Const;\n-                if needs_inline || is_const_fn {\n+                if needs_inline {\n                     self.prefetch_mir(def_id)\n                 }\n+                if is_const_fn {\n+                    self.prefetch_ctfe_mir(def_id);\n+                }\n             }\n             hir::ImplItemKind::TyAlias(..) => (),\n         }"}, {"sha": "59a8bc7fac1be941776f095231252922d0185330", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -302,6 +302,7 @@ define_tables! {\n     // As an optimization, a missing entry indicates an empty `&[]`.\n     explicit_item_bounds: Table<DefIndex, Lazy!([(ty::Predicate<'tcx>, Span)])>,\n     mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n+    mir_for_ctfe: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n     mir_abstract_consts: Table<DefIndex, Lazy!(&'tcx [mir::abstract_const::Node<'tcx>])>,\n     unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,"}, {"sha": "a7b847fc5e0eebecfa5ec9c3d1ac498b3e3c43d7", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -439,17 +439,26 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn optimized_mir_opt_const_arg(\n+    pub fn optimized_mir_or_const_arg_mir(\n         self,\n         def: ty::WithOptConstParam<DefId>,\n     ) -> &'tcx Body<'tcx> {\n         if let Some((did, param_did)) = def.as_const_arg() {\n-            self.optimized_mir_of_const_arg((did, param_did))\n+            self.mir_for_ctfe_of_const_arg((did, param_did))\n         } else {\n             self.optimized_mir(def.did)\n         }\n     }\n \n+    #[inline]\n+    pub fn mir_for_ctfe_opt_const_arg(self, def: ty::WithOptConstParam<DefId>) -> &'tcx Body<'tcx> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.mir_for_ctfe_of_const_arg((did, param_did))\n+        } else {\n+            self.mir_for_ctfe(def.did)\n+        }\n+    }\n+\n     #[inline]\n     pub fn mir_abstract_const_opt_const_arg(\n         self,"}, {"sha": "fd8c1ac23d104bc2f421ffaa5e8c8044c41f59ff", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -312,6 +312,20 @@ rustc_queries! {\n             desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n         }\n \n+        query mir_for_ctfe(\n+            key: DefId\n+        ) -> &'tcx mir::Body<'tcx> {\n+            desc { |tcx| \"caching mir of `{}` for CTFE\", tcx.def_path_str(key) }\n+            cache_on_disk_if { key.is_local() }\n+        }\n+\n+        query mir_for_ctfe_of_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::Body<'tcx> {\n+            desc {\n+                |tcx| \"MIR for CTFE of the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n+            }\n+        }\n+\n         query mir_promoted(key: ty::WithOptConstParam<LocalDefId>) ->\n             (\n                 &'tcx Steal<mir::Body<'tcx>>,\n@@ -331,12 +345,6 @@ rustc_queries! {\n             desc { |tcx| \"optimizing MIR for `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { key.is_local() }\n         }\n-        query optimized_mir_of_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::Body<'tcx> {\n-            desc {\n-                |tcx| \"optimizing MIR for the const argument `{}`\",\n-                tcx.def_path_str(key.0.to_def_id())\n-            }\n-        }\n \n         /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n         /// MIR pass (assuming the -Zinstrument-coverage option is enabled).\n@@ -927,6 +935,9 @@ rustc_queries! {\n     }\n \n     Codegen {\n+        query is_ctfe_mir_available(key: DefId) -> bool {\n+            desc { |tcx| \"checking if item has ctfe mir available: `{}`\", tcx.def_path_str(key) }\n+        }\n         query is_mir_available(key: DefId) -> bool {\n             desc { |tcx| \"checking if item has mir available: `{}`\", tcx.def_path_str(key) }\n         }"}, {"sha": "cebe0594c02a9f9acc4708880802a31d6a1f2586", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -3010,7 +3010,16 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(def) => self.optimized_mir_opt_const_arg(def),\n+            ty::InstanceDef::Item(def) => match self.def_kind(def.did) {\n+                DefKind::Const\n+                | DefKind::Static\n+                | DefKind::AssocConst\n+                | DefKind::Ctor(..)\n+                | DefKind::AnonConst => self.mir_for_ctfe_opt_const_arg(def),\n+                // If the caller wants `mir_for_ctfe` of a function they should not be using\n+                // `instance_mir`, so we'll assume const fn also wants the optimized version.\n+                _ => self.optimized_mir_or_const_arg_mir(def),\n+            },\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "49126cfec6bf896ac1b6c9df04dc5eba608217b3", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -201,6 +201,22 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     type MemoryExtra = MemoryExtra;\n \n+    fn load_mir(\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        instance: ty::InstanceDef<'tcx>,\n+    ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n+        match instance {\n+            ty::InstanceDef::Item(def) => {\n+                if ecx.tcx.is_ctfe_mir_available(def.did) {\n+                    Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n+                } else {\n+                    throw_unsup!(NoMirFor(def.did))\n+                }\n+            }\n+            _ => Ok(ecx.tcx.instance_mir(instance)),\n+        }\n+    }\n+\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,"}, {"sha": "6d7781671d8cc46503a0ed70322541d46bc64f7d", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -477,16 +477,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let Some(promoted) = promoted {\n             return Ok(&self.tcx.promoted_mir_opt_const_arg(def)[promoted]);\n         }\n-        match instance {\n-            ty::InstanceDef::Item(def) => {\n-                if self.tcx.is_mir_available(def.did) {\n-                    Ok(self.tcx.optimized_mir_opt_const_arg(def))\n-                } else {\n-                    throw_unsup!(NoMirFor(def.did))\n-                }\n-            }\n-            _ => Ok(self.tcx.instance_mir(instance)),\n-        }\n+        M::load_mir(self, instance)\n     }\n \n     /// Call this on things you got out of the MIR (so it is as generic as the current"}, {"sha": "53ac62d435187c63d97932a2c895670af7cdb1a4", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -132,6 +132,16 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n+    /// Entry point for obtaining the MIR of anything that should get evaluated.\n+    /// So not just functions and shims, but also const/static initializers, anonymous\n+    /// constants, ...\n+    fn load_mir(\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        instance: ty::InstanceDef<'tcx>,\n+    ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n+        Ok(ecx.tcx.instance_mir(instance))\n+    }\n+\n     /// Entry point to all function calls.\n     ///\n     /// Returns either the mir to use for the call, or `None` if execution should"}, {"sha": "4ad71ab4913bab6cade7e7d1585bc5831a186062", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -5,7 +5,7 @@\n //! generic parameters are unused (and eventually, in what ways generic parameters are used - only\n //! for their size, offset of a field, etc.).\n \n-use rustc_hir::{def::DefKind, def_id::DefId};\n+use rustc_hir::{def::DefKind, def_id::DefId, ConstContext};\n use rustc_index::bit_set::FiniteBitSet;\n use rustc_middle::mir::{\n     visit::{TyContext, Visitor},\n@@ -54,9 +54,17 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     }\n \n     // Exit early when there is no MIR available.\n-    if !tcx.is_mir_available(def_id) {\n-        debug!(\"unused_generic_params: (no mir available) def_id={:?}\", def_id);\n-        return FiniteBitSet::new_empty();\n+    let context = tcx.hir().body_const_context(def_id.expect_local());\n+    match context {\n+        Some(ConstContext::ConstFn) | None if !tcx.is_mir_available(def_id) => {\n+            debug!(\"unused_generic_params: (no mir available) def_id={:?}\", def_id);\n+            return FiniteBitSet::new_empty();\n+        }\n+        Some(_) if !tcx.is_ctfe_mir_available(def_id) => {\n+            debug!(\"unused_generic_params: (no ctfe mir available) def_id={:?}\", def_id);\n+            return FiniteBitSet::new_empty();\n+        }\n+        _ => {}\n     }\n \n     // Create a bitset with N rightmost ones for each parameter.\n@@ -69,7 +77,12 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     debug!(\"unused_generic_params: (after default) unused_parameters={:?}\", unused_parameters);\n \n     // Visit MIR and accumululate used generic parameters.\n-    let body = tcx.optimized_mir(def_id);\n+    let body = match context {\n+        // Const functions are actually called and should thus be considered for polymorphization\n+        // via their runtime MIR\n+        Some(ConstContext::ConstFn) | None => tcx.optimized_mir(def_id),\n+        Some(_) => tcx.mir_for_ctfe(def_id),\n+    };\n     let mut vis = MarkUsedGenericParams { tcx, def_id, unused_parameters: &mut unused_parameters };\n     vis.visit_body(body);\n     debug!(\"unused_generic_params: (after visitor) unused_parameters={:?}\", unused_parameters);"}, {"sha": "a311e262dd4df7a6c7174f409d5d39b9c080cf91", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -185,6 +185,13 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n \n     type MemoryExtra = ();\n \n+    fn load_mir(\n+        _ecx: &InterpCx<'mir, 'tcx, Self>,\n+        _instance: ty::InstanceDef<'tcx>,\n+    ) -> InterpResult<'tcx, &'tcx Body<'tcx>> {\n+        throw_machine_stop_str!(\"calling functions isn't supported in ConstProp\")\n+    }\n+\n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,"}, {"sha": "4b455a6a1ba724ffe9a52066b61dbc4cdd15cae9", "filename": "compiler/rustc_mir/src/transform/coverage/query.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{self, Coverage, CoverageInfo, Location};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::DefId;\n \n /// The `query` provider for `CoverageInfo`, requested by `codegen_coverage()` (to inject each\n@@ -112,7 +112,7 @@ impl Visitor<'_> for CoverageVisitor {\n }\n \n fn coverageinfo_from_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo {\n-    let mir_body = tcx.optimized_mir(def_id);\n+    let mir_body = mir_body(tcx, def_id);\n \n     let mut coverage_visitor = CoverageVisitor {\n         // num_counters always has at least the `ZERO` counter.\n@@ -129,8 +129,7 @@ fn coverageinfo_from_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo\n }\n \n fn covered_file_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<Symbol> {\n-    let mir_body = tcx.optimized_mir(def_id);\n-    for bb_data in mir_body.basic_blocks().iter() {\n+    for bb_data in mir_body(tcx, def_id).basic_blocks().iter() {\n         for statement in bb_data.statements.iter() {\n             if let StatementKind::Coverage(box ref coverage) = statement.kind {\n                 if let Some(code_region) = coverage.code_region.as_ref() {\n@@ -142,9 +141,17 @@ fn covered_file_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<Symbol> {\n     None\n }\n \n+/// This function ensures we obtain the correct MIR for the given item irrespective of\n+/// whether that means const mir or runtime mir. For `const fn` this opts for runtime\n+/// mir.\n+fn mir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx mir::Body<'tcx> {\n+    let id = ty::WithOptConstParam::unknown(def_id);\n+    let def = ty::InstanceDef::Item(id);\n+    tcx.instance_mir(def)\n+}\n+\n fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx CodeRegion> {\n-    let mir_body: &'tcx mir::Body<'tcx> = tcx.optimized_mir(def_id);\n-    mir_body\n+    mir_body(tcx, def_id)\n         .basic_blocks()\n         .iter()\n         .map(|data| {"}, {"sha": "11f7e6922ccbc0a7f723727bfe7465379bd694f0", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 103, "deletions": 21, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -71,9 +71,11 @@ pub(crate) fn provide(providers: &mut Providers) {\n         },\n         mir_promoted,\n         mir_drops_elaborated_and_const_checked,\n+        mir_for_ctfe,\n+        mir_for_ctfe_of_const_arg,\n         optimized_mir,\n-        optimized_mir_of_const_arg,\n         is_mir_available,\n+        is_ctfe_mir_available: |tcx, did| is_mir_available(tcx, did),\n         promoted_mir: |tcx, def_id| {\n             let def_id = def_id.expect_local();\n             if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n@@ -278,6 +280,7 @@ fn mir_const<'tcx>(\n     tcx.alloc_steal_mir(body)\n }\n \n+/// Compute the main MIR body and the list of MIR bodies of the promoteds.\n fn mir_promoted(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n@@ -319,6 +322,87 @@ fn mir_promoted(\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n }\n \n+/// Compute the MIR that is used during CTFE (and thus has no optimizations run on it)\n+fn mir_for_ctfe<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+    let did = def_id.expect_local();\n+    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n+        tcx.mir_for_ctfe_of_const_arg(def)\n+    } else {\n+        tcx.arena.alloc(inner_mir_for_ctfe(tcx, ty::WithOptConstParam::unknown(did)))\n+    }\n+}\n+\n+/// Same as `mir_for_ctfe`, but used to get the MIR of a const generic parameter.\n+/// The docs on `WithOptConstParam` explain this a bit more, but the TLDR is that\n+/// we'd get cycle errors with `mir_for_ctfe`, because typeck would need to typeck\n+/// the const parameter while type checking the main body, which in turn would try\n+/// to type check the main body again.\n+fn mir_for_ctfe_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (did, param_did): (LocalDefId, DefId),\n+) -> &'tcx Body<'tcx> {\n+    tcx.arena.alloc(inner_mir_for_ctfe(\n+        tcx,\n+        ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n+    ))\n+}\n+\n+fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n+    // FIXME: don't duplicate this between the optimized_mir/mir_for_ctfe queries\n+    if tcx.is_constructor(def.did.to_def_id()) {\n+        // There's no reason to run all of the MIR passes on constructors when\n+        // we can just output the MIR we want directly. This also saves const\n+        // qualification and borrow checking the trouble of special casing\n+        // constructors.\n+        return shim::build_adt_ctor(tcx, def.did.to_def_id());\n+    }\n+\n+    let context = tcx\n+        .hir()\n+        .body_const_context(def.did)\n+        .expect(\"mir_for_ctfe should not be used for runtime functions\");\n+\n+    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).borrow().clone();\n+\n+    match context {\n+        // Do not const prop functions, either they get executed at runtime or exported to metadata,\n+        // so we run const prop on them, or they don't, in which case we const evaluate some control\n+        // flow paths of the function and any errors in those paths will get emitted as const eval\n+        // errors.\n+        hir::ConstContext::ConstFn => {}\n+        // Static items always get evaluated, so we can just let const eval see if any erroneous\n+        // control flow paths get executed.\n+        hir::ConstContext::Static(_) => {}\n+        // Associated constants get const prop run so we detect common failure situations in the\n+        // crate that defined the constant.\n+        // Technically we want to not run on regular const items, but oli-obk doesn't know how to\n+        // conveniently detect that at this point without looking at the HIR.\n+        hir::ConstContext::Const => {\n+            #[rustfmt::skip]\n+            let optimizations: &[&dyn MirPass<'_>] = &[\n+                &const_prop::ConstProp,\n+            ];\n+\n+            #[rustfmt::skip]\n+            run_passes(\n+                tcx,\n+                &mut body,\n+                MirPhase::Optimization,\n+                &[\n+                    optimizations,\n+                ],\n+            );\n+        }\n+    }\n+\n+    debug_assert!(!body.has_free_regions(), \"Free regions in MIR for CTFE\");\n+\n+    body\n+}\n+\n+/// Obtain just the main MIR (no promoteds) and run some cleanups on it. This also runs\n+/// mir borrowck *before* doing so in order to ensure that borrowck can be run and doesn't\n+/// end up missing the source MIR due to stealing happening.\n fn mir_drops_elaborated_and_const_checked<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n@@ -456,42 +540,41 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     );\n }\n \n+/// Optimize the MIR and prepare it for codegen.\n fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n     let did = did.expect_local();\n-    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n-        tcx.optimized_mir_of_const_arg(def)\n-    } else {\n-        tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptConstParam::unknown(did)))\n-    }\n+    assert_eq!(ty::WithOptConstParam::try_lookup(did, tcx), None);\n+    tcx.arena.alloc(inner_optimized_mir(tcx, did))\n }\n \n-fn optimized_mir_of_const_arg<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    (did, param_did): (LocalDefId, DefId),\n-) -> &'tcx Body<'tcx> {\n-    tcx.arena.alloc(inner_optimized_mir(\n-        tcx,\n-        ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n-    ))\n-}\n-\n-fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n-    if tcx.is_constructor(def.did.to_def_id()) {\n+fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n+    if tcx.is_constructor(did.to_def_id()) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const\n         // qualification and borrow checking the trouble of special casing\n         // constructors.\n-        return shim::build_adt_ctor(tcx, def.did.to_def_id());\n+        return shim::build_adt_ctor(tcx, did.to_def_id());\n     }\n \n-    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).steal();\n+    match tcx.hir().body_const_context(did) {\n+        // Run the `mir_for_ctfe` query, which depends on `mir_drops_elaborated_and_const_checked`\n+        // which we are going to steal below. Thus we need to run `mir_for_ctfe` first, so it\n+        // computes and caches its result.\n+        Some(hir::ConstContext::ConstFn) => tcx.ensure().mir_for_ctfe(did),\n+        None => {}\n+        Some(other) => panic!(\"do not use `optimized_mir` for constants: {:?}\", other),\n+    }\n+    let mut body =\n+        tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(did)).steal();\n     run_optimization_passes(tcx, &mut body);\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n \n     body\n }\n \n+/// Fetch all the promoteds of an item and prepare their MIR bodies to be ready for\n+/// constant evaluation once all substitutions become known.\n fn promoted_mir<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n@@ -510,7 +593,6 @@ fn promoted_mir<'tcx>(\n \n     for body in &mut promoted {\n         run_post_borrowck_cleanup_passes(tcx, body);\n-        run_optimization_passes(tcx, body);\n     }\n \n     debug_assert!(!promoted.has_free_regions(), \"Free regions in promoted MIR\");"}, {"sha": "7fc1c3a73af91e36dbaeb647f75d549cb483311d", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -273,20 +273,35 @@ pub fn write_mir_pretty<'tcx>(\n \n     let mut first = true;\n     for def_id in dump_mir_def_ids(tcx, single) {\n-        let body = &tcx.optimized_mir(def_id);\n-\n         if first {\n             first = false;\n         } else {\n             // Put empty lines between all items\n             writeln!(w)?;\n         }\n \n-        write_mir_fn(tcx, body, &mut |_, _| Ok(()), w)?;\n-\n-        for body in tcx.promoted_mir(def_id) {\n-            writeln!(w)?;\n+        let render_body = |w: &mut dyn Write, body| -> io::Result<()> {\n             write_mir_fn(tcx, body, &mut |_, _| Ok(()), w)?;\n+\n+            for body in tcx.promoted_mir(def_id) {\n+                writeln!(w)?;\n+                write_mir_fn(tcx, body, &mut |_, _| Ok(()), w)?;\n+            }\n+            Ok(())\n+        };\n+        match tcx.hir().body_const_context(def_id.expect_local()) {\n+            None => render_body(w, tcx.optimized_mir(def_id))?,\n+            // For `const fn` we want to render the optimized MIR. If you want the mir used in\n+            // ctfe, you can dump the MIR after the `Deaggregator` optimization pass.\n+            Some(rustc_hir::ConstContext::ConstFn) => {\n+                render_body(w, tcx.optimized_mir(def_id))?;\n+                writeln!(w)?;\n+                writeln!(w, \"// MIR FOR CTFE\")?;\n+                // Do not use `render_body`, as that would render the promoteds again, but these\n+                // are shared between mir_for_ctfe and optimized_mir\n+                write_mir_fn(tcx, tcx.mir_for_ctfe(def_id), &mut |_, _| Ok(()), w)?;\n+            }\n+            Some(_) => render_body(w, tcx.mir_for_ctfe(def_id))?,\n         }\n     }\n     Ok(())"}, {"sha": "370ad577170ba4a3ed9b7926a865439a1e732681", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -152,7 +152,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {\n             DefKind::AnonConst => {\n-                let mir_body = infcx.tcx.optimized_mir_opt_const_arg(def);\n+                let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(def);\n \n                 if mir_body.is_polymorphic {\n                     future_compat_lint();"}, {"sha": "a0d4e9b2c65aed5089f0402ac28f8c5d11b496c1", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -5,11 +5,11 @@ extern \"C\" {\n static Y: i32 = 42;\n \n // EMIT_MIR const_promotion_extern_static.BAR.PromoteTemps.diff\n-// EMIT_MIR const_promotion_extern_static.BAR-promoted[0].ConstProp.after.mir\n+// EMIT_MIR const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir\n static mut BAR: *const &i32 = [&Y].as_ptr();\n \n // EMIT_MIR const_promotion_extern_static.FOO.PromoteTemps.diff\n-// EMIT_MIR const_promotion_extern_static.FOO-promoted[0].ConstProp.after.mir\n+// EMIT_MIR const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir\n static mut FOO: *const &i32 = [unsafe { &X }].as_ptr();\n \n // EMIT_MIR const_promotion_extern_static.BOP.mir_map.0.mir"}, {"sha": "a137d7fadba107948f1ea1d6e8729f533ca67f75", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -24,42 +24,42 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500alloc14\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc17\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc14 (size: 48, align: 4) {\n+alloc17 (size: 48, align: 4) {\n     0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc4\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc7\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc11\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc8\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc13\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n alloc4 (size: 0, align: 4) {}\n \n-alloc7 (size: 16, align: 4) {\n-    \u257e\u2500alloc6\u2500\u2500\u257c 03 00 00 00 \u257e\u2500alloc8\u2500\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+alloc8 (size: 16, align: 4) {\n+    \u257e\u2500alloc7\u2500\u2500\u257c 03 00 00 00 \u257e\u2500alloc9\u2500\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n }\n \n-alloc6 (size: 3, align: 1) {\n+alloc7 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n-alloc8 (size: 3, align: 1) {\n+alloc9 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc11 (size: 24, align: 4) {\n-    0x00 \u2502 \u257e\u2500alloc10\u2500\u257c 03 00 00 00 \u257e\u2500alloc12\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 \u257e\u2500alloc13\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+alloc13 (size: 24, align: 4) {\n+    0x00 \u2502 \u257e\u2500alloc12\u2500\u257c 03 00 00 00 \u257e\u2500alloc14\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 \u257e\u2500alloc15\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc10 (size: 3, align: 1) {\n+alloc12 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n \n-alloc12 (size: 3, align: 1) {\n+alloc14 (size: 3, align: 1) {\n     6d 6f 70                                        \u2502 mop\n }\n \n-alloc13 (size: 4, align: 1) {\n+alloc15 (size: 4, align: 1) {\n     6d c3 b6 70                                     \u2502 m..p\n }"}, {"sha": "ef98cf9c091481d9b9a53474bff539a6db130005", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -24,46 +24,46 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc14 (size: 72, align: 8) {\n+alloc17 (size: 72, align: 8) {\n     0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc11\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n alloc4 (size: 0, align: 8) {}\n \n-alloc7 (size: 32, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc8 (size: 32, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc6 (size: 3, align: 1) {\n+alloc7 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n-alloc8 (size: 3, align: 1) {\n+alloc9 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc11 (size: 48, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc13 (size: 48, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc10 (size: 3, align: 1) {\n+alloc12 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n \n-alloc12 (size: 3, align: 1) {\n+alloc14 (size: 3, align: 1) {\n     6d 6f 70                                        \u2502 mop\n }\n \n-alloc13 (size: 4, align: 1) {\n+alloc15 (size: 4, align: 1) {\n     6d c3 b6 70                                     \u2502 m..p\n }"}, {"sha": "d2e764f856f08442004df1ed2b54d2a10085df28", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -24,41 +24,41 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500alloc20\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc27\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc20 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc8\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc12\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc19\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc27 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc12\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc17\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc25\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc8 (size: 0, align: 4) {}\n+alloc12 (size: 0, align: 4) {}\n \n-alloc12 (size: 8, align: 4) {\n-    \u257e\u2500alloc10\u2500\u257c \u257e\u2500alloc11\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc17 (size: 8, align: 4) {\n+    \u257e\u2500alloc15\u2500\u257c \u257e\u2500alloc16\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc10 (size: 1, align: 1) {\n+alloc15 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc11 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc19 (size: 12, align: 4) {\n-    \u257e\u2500a15+0x3\u2500\u257c \u257e\u2500alloc16\u2500\u257c \u257e\u2500a18+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc25 (size: 12, align: 4) {\n+    \u257e\u2500a21+0x3\u2500\u257c \u257e\u2500alloc22\u2500\u257c \u257e\u2500a24+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc15 (size: 4, align: 1) {\n+alloc21 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc16 (size: 1, align: 1) {\n+alloc22 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc18 (size: 4, align: 1) {\n+alloc24 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "00bf91f90bf61fcdce11a5b95cb5c134d92bdd35", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -24,44 +24,44 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc20\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc27\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc20 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc27 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc19\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc25\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc8 (size: 0, align: 8) {}\n+alloc12 (size: 0, align: 8) {}\n \n-alloc12 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc11\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc17 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc10 (size: 1, align: 1) {\n+alloc15 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc11 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc19 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc15+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc18+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc25 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc21+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc22\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc24+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc15 (size: 4, align: 1) {\n+alloc21 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc16 (size: 1, align: 1) {\n+alloc22 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc18 (size: 4, align: 1) {\n+alloc24 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "519002da392e2533d8e0ef302d2ec93c46fbdc1e", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -24,30 +24,30 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 4, align: 4) {\n-    \u257e\u2500alloc9\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+    \u257e\u2500alloc10\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n-alloc9 (size: 168, align: 1) {\n+alloc10 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc4\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc5\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc6\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n-    0x90 \u2502 \u257e\u2500a7+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc7\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x90 \u2502 \u257e\u2500a8+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc4 (size: 4, align: 4) {\n+alloc5 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc6 (fn: main)\n+alloc7 (fn: main)\n \n-alloc7 (size: 100, align: 1) {\n+alloc8 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "73c4288c32e9d9eea526ddae1e8fe5524bd8bc61", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -24,31 +24,31 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc9 (size: 180, align: 1) {\n+alloc10 (size: 180, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc4\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc5\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n     0x20 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 ef cd ab 00 00 00 00 00 00 00 00 \u2502 \u2500\u2500\u2500\u257c............\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x80 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500 \u2502 ..............\u257e\u2500\n-    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc6\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc7+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc8+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0xa0 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0xb0 \u2502 00 00 00 00                                     \u2502 ....\n }\n \n-alloc4 (size: 4, align: 4) {\n+alloc5 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc6 (fn: main)\n+alloc7 (fn: main)\n \n-alloc7 (size: 100, align: 1) {\n+alloc8 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "2497c553e69702955d98921a960a796838e8614f", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `BAR::promoted[0]` after ConstProp\n+// MIR for `BAR::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in BAR: &[&i32; 1] = {\n     let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n@@ -14,7 +14,7 @@ promoted[0] in BAR: &[&i32; 1] = {\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n-        _2 = _3;                         // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n+        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n         _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n         return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35", "previous_filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].ConstProp.after.mir"}, {"sha": "17107ec431effdc1dd36beb7f432bff2fde90faf", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `FOO::promoted[0]` after ConstProp\n+// MIR for `FOO::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in FOO: &[&i32; 1] = {\n     let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46", "previous_filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].ConstProp.after.mir"}, {"sha": "2aa0bc9d45dc9701ea3fe7379f14699c5ce5f52a", "filename": "src/test/run-make/const_fn_mir/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Frun-make%2Fconst_fn_mir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Frun-make%2Fconst_fn_mir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2FMakefile?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -0,0 +1,10 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) main.rs --emit=mir -o \"$(TMPDIR)\"/dump.mir\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/dump.mir dump.mir\n+else\n+\t$(DIFF) dump.mir \"$(TMPDIR)\"/dump.mir\n+endif"}, {"sha": "3dac42c6782eab4167c1c173641b7ef19496a34f", "filename": "src/test/run-make/const_fn_mir/dump.mir", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -0,0 +1,45 @@\n+// WARNING: This output format is intended for human consumers only\n+// and is subject to change without notice. Knock yourself out.\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at main.rs:8:11: 8:11\n+    let _1: i32;                         // in scope 0 at main.rs:9:5: 9:10\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at main.rs:9:5: 9:10\n+        _1 = foo() -> bb1;               // scope 0 at main.rs:9:5: 9:10\n+                                         // mir::Constant\n+                                         // + span: main.rs:9:5: 9:8\n+                                         // + literal: Const { ty: fn() -> i32 {foo}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_1);                 // scope 0 at main.rs:9:10: 9:11\n+        _0 = const ();                   // scope 0 at main.rs:8:11: 10:2\n+        return;                          // scope 0 at main.rs:10:2: 10:2\n+    }\n+}\n+\n+fn foo() -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at main.rs:4:19: 4:22\n+\n+    bb0: {\n+        _0 = const 11_i32;               // scope 0 at main.rs:5:5: 5:10\n+        return;                          // scope 0 at main.rs:6:2: 6:2\n+    }\n+}\n+\n+// MIR FOR CTFE\n+fn foo() -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at main.rs:4:19: 4:22\n+    let mut _1: (i32, bool);             // in scope 0 at main.rs:5:5: 5:10\n+\n+    bb0: {\n+        _1 = CheckedAdd(const 5_i32, const 6_i32); // scope 0 at main.rs:5:5: 5:10\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 5_i32, const 6_i32) -> bb1; // scope 0 at main.rs:5:5: 5:10\n+    }\n+\n+    bb1: {\n+        _0 = move (_1.0: i32);           // scope 0 at main.rs:5:5: 5:10\n+        return;                          // scope 0 at main.rs:6:2: 6:2\n+    }\n+}"}, {"sha": "e8552bd285a8681a6950afe9409666f502d8c376", "filename": "src/test/run-make/const_fn_mir/main.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fmain.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -0,0 +1,10 @@\n+// emit-mir\n+// check-pass\n+\n+const fn foo() -> i32 {\n+    5 + 6\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "61b16cb9d58115287e49f7d2ee9a20a83587c711", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -30,7 +30,7 @@ note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-a\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+note: ...which requires caching mir of `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;"}, {"sha": "494dc0c0ed447d2fd14b5315e276caad72ff44d9", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -30,7 +30,7 @@ note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for `FooDefault::BAR`...\n+note: ...which requires caching mir of `FooDefault::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;"}, {"sha": "4ff253bffcb32d4f8def0419c77362b67bb75561", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -30,7 +30,7 @@ note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-a\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+note: ...which requires caching mir of `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;"}, {"sha": "2afbf3432fb45a91d88b7b17b794b307e0eea4f7", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n \n-// compile-flags: --crate-type lib\n+// need to emit MIR, because const prop (which emits `unconditional_panic`) only runs if\n+// the `optimized_mir` query is run, which it isn't in check-only mode.\n+// compile-flags: --crate-type lib --emit=mir,link\n \n #![warn(unconditional_panic)]\n "}, {"sha": "865c69c3c89830bfa59d17596961544903839b55", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -1,11 +1,11 @@\n warning: this operation will panic at runtime\n-  --> $DIR/ice-assert-fail-div-by-zero.rs:11:5\n+  --> $DIR/ice-assert-fail-div-by-zero.rs:13:5\n    |\n LL |     f.0 / 0;\n    |     ^^^^^^^ attempt to divide `_` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/ice-assert-fail-div-by-zero.rs:5:9\n+  --> $DIR/ice-assert-fail-div-by-zero.rs:7:9\n    |\n LL | #![warn(unconditional_panic)]\n    |         ^^^^^^^^^^^^^^^^^^^"}, {"sha": "9363ffbb996e468c3081c2d29ae73cddf7ad9b7a", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const X: u64 = *wat(42);\n    | ---------------^^^^^^^^-\n    |                |\n-   |                pointer to alloc2 was dereferenced after this allocation got freed\n+   |                pointer to alloc1 was dereferenced after this allocation got freed\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "39a568d054af49ffab06e9dc17f04592c696c464", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -7,13 +7,13 @@ LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/ub-nonnull.rs:18:29\n+  --> $DIR/ub-nonnull.rs:18:30\n    |\n LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n+   | |                              ^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "bcd05b4cd7ec853b84a31595520e3dc16a0dd1b3", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -95,22 +95,26 @@ const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n \n // # trait object\n // bad trait object\n+#[warn(const_err)]\n const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { mem::transmute((&92u8, &3u8)) };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ WARN any use of this value will cause an error [const_err]\n // bad trait object\n+#[warn(const_err)]\n const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ WARN any use of this value will cause an error [const_err]\n // bad trait object\n+#[warn(const_err)]\n const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, 4usize)) };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ WARN any use of this value will cause an error [const_err]\n const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n //~^ ERROR it is undefined behavior to use this value\n const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n //~^ ERROR it is undefined behavior to use this value\n const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n //~^ ERROR it is undefined behavior to use this value\n+#[warn(const_err)]\n const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ WARN any use of this value will cause an error [const_err]\n \n // bad data *inside* the trait object\n const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };"}, {"sha": "ec5d465c8825149bc116144470b4e98c63229c1d", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -134,98 +134,122 @@ LL | | };\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:98:1\n+warning: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:99:55\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { mem::transmute((&92u8, &3u8)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n+   | ------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                       |\n+   |                                                       memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+note: the lint level is defined here\n+  --> $DIR/ub-wide-ptr.rs:98:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:101:1\n+warning: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:103:55\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n+   | ------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                       |\n+   |                                                       memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+note: the lint level is defined here\n+  --> $DIR/ub-wide-ptr.rs:102:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:104:1\n+warning: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:107:51\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, 4usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n+   | --------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                   |\n+   |                                                   unable to turn bytes into a pointer\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+note: the lint level is defined here\n+  --> $DIR/ub-wide-ptr.rs:106:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:106:1\n+  --> $DIR/ub-wide-ptr.rs:109:1\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:108:1\n+  --> $DIR/ub-wide-ptr.rs:111:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:110:1\n+  --> $DIR/ub-wide-ptr.rs:113:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:112:1\n+warning: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:116:63\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n+   | --------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                               |\n+   |                                                               \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+note: the lint level is defined here\n+  --> $DIR/ub-wide-ptr.rs:115:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:116:1\n+  --> $DIR/ub-wide-ptr.rs:120:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.<dyn-downcast>, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:120:1\n+  --> $DIR/ub-wide-ptr.rs:124:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:122:1\n+  --> $DIR/ub-wide-ptr.rs:126:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:128:5\n+  --> $DIR/ub-wide-ptr.rs:132:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inbounds test failed: 0x0 is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:132:5\n+  --> $DIR/ub-wide-ptr.rs:136:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 24 previous errors; 4 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "14eeabb49a2a071fd9116d6b3f66fa2695ae5950", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -35,11 +35,11 @@ LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:26:14\n+  --> $DIR/const_refers_to_static_cross_crate.rs:26:15\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n LL | | };"}, {"sha": "595ed30bf9c8209b9c7484cf244d13507eaf1467", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -66,6 +66,7 @@ const _: *const u8 =\n //~^ NOTE\n     unsafe { std::ptr::raw_const!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR any use of this value will cause an error\n+//~| NOTE\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error"}, {"sha": "49511b84500de92fdd379c473cf4a5a0db96a96f", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704e47f78b4c8801a3c76f235a5a152e1b60b300/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=704e47f78b4c8801a3c76f235a5a152e1b60b300", "patch": "@@ -16,27 +16,25 @@ LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n    = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:67:14\n+  --> $DIR/ptr_comparisons.rs:67:35\n    |\n LL | / const _: *const u8 =\n LL | |\n LL | |     unsafe { std::ptr::raw_const!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   | |___________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n+   |                                     |\n+   |                                     memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:70:27\n+  --> $DIR/ptr_comparisons.rs:71:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n    |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:75:27\n+  --> $DIR/ptr_comparisons.rs:76:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}]}