{"sha": "eb67f492debf2ea7671d3859c42356cf43859de1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNjdmNDkyZGViZjJlYTc2NzFkMzg1OWM0MjM1NmNmNDM4NTlkZTE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2016-05-16T04:26:49Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2016-05-16T22:06:56Z"}, "message": "Deprecate {f32,f64}::abs_sub.\n\nThe abs_sub name is misleading: the function actually computes the\npositive difference (`fdim` in C), not the `(x - y).abs()` that *many* people expect\nfrom the name.\n\nThis function can be replaced with just `(x - y).max(0.0)`, mirroring\nthe `abs` version, but this behaves differently with NAN: `NAN.max(0.0)\n== 0.0`, while `NAN.positive_diff(0.0) == NAN`. People who absolutely\nneed that behaviour can use the C function directly and/or talk to the libs\nteam (we haven't encountered a concrete use-case for this functionality).\n\nCloses #30315.", "tree": {"sha": "48e8576c20f06b6a521d56aa5354a0c81d85122b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e8576c20f06b6a521d56aa5354a0c81d85122b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb67f492debf2ea7671d3859c42356cf43859de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb67f492debf2ea7671d3859c42356cf43859de1", "html_url": "https://github.com/rust-lang/rust/commit/eb67f492debf2ea7671d3859c42356cf43859de1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb67f492debf2ea7671d3859c42356cf43859de1/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb39c4925a792b1dbb2bfa0323339fdf4297c4ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb39c4925a792b1dbb2bfa0323339fdf4297c4ac", "html_url": "https://github.com/rust-lang/rust/commit/bb39c4925a792b1dbb2bfa0323339fdf4297c4ac"}], "stats": {"total": 70, "additions": 24, "deletions": 46}, "files": [{"sha": "c0031aa42e606b91b8b3734741db0442e961aa09", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/eb67f492debf2ea7671d3859c42356cf43859de1/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb67f492debf2ea7671d3859c42356cf43859de1/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=eb67f492debf2ea7671d3859c42356cf43859de1", "patch": "@@ -829,6 +829,13 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[rustc_deprecated(since = \"1.10.0\",\n+                       reason = \"you probably meant `(self - other).abs()`: \\\n+                                 this operation is `(self - other).max(0.0)` (also \\\n+                                 known as `fdimf` in C). If you truly need the positive \\\n+                                 difference, consider using that expression or the C function \\\n+                                 `fdimf`, depending on how you wish to handle NaN (please consider \\\n+                                 filing an issue describing your use-case too).\")]\n     pub fn abs_sub(self, other: f32) -> f32 {\n         unsafe { cmath::fdimf(self, other) }\n     }\n@@ -939,7 +946,7 @@ impl f32 {\n     /// let f = f32::consts::PI / 2.0;\n     ///\n     /// // asin(sin(pi/2))\n-    /// let abs_difference = f.sin().asin().abs_sub(f32::consts::PI / 2.0);\n+    /// let abs_difference = (f.sin().asin() - f32::consts::PI / 2.0).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -959,7 +966,7 @@ impl f32 {\n     /// let f = f32::consts::PI / 4.0;\n     ///\n     /// // acos(cos(pi/4))\n-    /// let abs_difference = f.cos().acos().abs_sub(f32::consts::PI / 4.0);\n+    /// let abs_difference = (f.cos().acos() - f32::consts::PI / 4.0).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -978,7 +985,7 @@ impl f32 {\n     /// let f = 1.0f32;\n     ///\n     /// // atan(tan(1))\n-    /// let abs_difference = f.tan().atan().abs_sub(1.0);\n+    /// let abs_difference = (f.tan().atan() - 1.0).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -1048,7 +1055,7 @@ impl f32 {\n     /// let x = 7.0f64;\n     ///\n     /// // e^(ln(7)) - 1\n-    /// let abs_difference = x.ln().exp_m1().abs_sub(6.0);\n+    /// let abs_difference = (x.ln().exp_m1() - 6.0).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -1108,7 +1115,7 @@ impl f32 {\n     /// let f = x.cosh();\n     /// // Solving cosh() at 1 gives this result\n     /// let g = (e*e + 1.0)/(2.0*e);\n-    /// let abs_difference = f.abs_sub(g);\n+    /// let abs_difference = (f - g).abs();\n     ///\n     /// // Same result\n     /// assert!(abs_difference <= f32::EPSILON);\n@@ -1191,9 +1198,9 @@ impl f32 {\n     /// let e = f32::consts::E;\n     /// let f = e.tanh().atanh();\n     ///\n-    /// let abs_difference = f.abs_sub(e);\n+    /// let abs_difference = (f - e).abs();\n     ///\n-    /// assert!(abs_difference <= f32::EPSILON);\n+    /// assert!(abs_difference <= 1e-5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -1747,24 +1754,6 @@ mod tests {\n         assert!(match nan.frexp() { (x, _) => x.is_nan() })\n     }\n \n-    #[test]\n-    fn test_abs_sub() {\n-        assert_eq!((-1f32).abs_sub(1f32), 0f32);\n-        assert_eq!(1f32.abs_sub(1f32), 0f32);\n-        assert_eq!(1f32.abs_sub(0f32), 1f32);\n-        assert_eq!(1f32.abs_sub(-1f32), 2f32);\n-        assert_eq!(NEG_INFINITY.abs_sub(0f32), 0f32);\n-        assert_eq!(INFINITY.abs_sub(1f32), INFINITY);\n-        assert_eq!(0f32.abs_sub(NEG_INFINITY), INFINITY);\n-        assert_eq!(0f32.abs_sub(INFINITY), 0f32);\n-    }\n-\n-    #[test]\n-    fn test_abs_sub_nowin() {\n-        assert!(NAN.abs_sub(-1f32).is_nan());\n-        assert!(1f32.abs_sub(NAN).is_nan());\n-    }\n-\n     #[test]\n     fn test_asinh() {\n         assert_eq!(0.0f32.asinh(), 0.0f32);"}, {"sha": "1a46d9a389578dab4984d1b644c3df1cd1fe3418", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eb67f492debf2ea7671d3859c42356cf43859de1/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb67f492debf2ea7671d3859c42356cf43859de1/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=eb67f492debf2ea7671d3859c42356cf43859de1", "patch": "@@ -718,9 +718,16 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn abs_sub(self, other: f64) -> f64 {\n-        unsafe { cmath::fdim(self, other) }\n-    }\n+    #[rustc_deprecated(since = \"1.10.0\",\n+                       reason = \"you probably meant `(self - other).abs()`: \\\n+                                 this operation is `(self - other).max(0.0)` (also \\\n+                                 known as `fdim` in C). If you truly need the positive \\\n+                                 difference, consider using that expression or the C function \\\n+                                 `fdim`, depending on how you wish to handle NaN (please consider \\\n+                                 filing an issue describing your use-case too).\")]\n+     pub fn abs_sub(self, other: f64) -> f64 {\n+         unsafe { cmath::fdim(self, other) }\n+     }\n \n     /// Takes the cubic root of a number.\n     ///\n@@ -1642,24 +1649,6 @@ mod tests {\n         assert!(match nan.frexp() { (x, _) => x.is_nan() })\n     }\n \n-    #[test]\n-    fn test_abs_sub() {\n-        assert_eq!((-1f64).abs_sub(1f64), 0f64);\n-        assert_eq!(1f64.abs_sub(1f64), 0f64);\n-        assert_eq!(1f64.abs_sub(0f64), 1f64);\n-        assert_eq!(1f64.abs_sub(-1f64), 2f64);\n-        assert_eq!(NEG_INFINITY.abs_sub(0f64), 0f64);\n-        assert_eq!(INFINITY.abs_sub(1f64), INFINITY);\n-        assert_eq!(0f64.abs_sub(NEG_INFINITY), INFINITY);\n-        assert_eq!(0f64.abs_sub(INFINITY), 0f64);\n-    }\n-\n-    #[test]\n-    fn test_abs_sub_nowin() {\n-        assert!(NAN.abs_sub(-1f64).is_nan());\n-        assert!(1f64.abs_sub(NAN).is_nan());\n-    }\n-\n     #[test]\n     fn test_asinh() {\n         assert_eq!(0.0f64.asinh(), 0.0f64);"}]}