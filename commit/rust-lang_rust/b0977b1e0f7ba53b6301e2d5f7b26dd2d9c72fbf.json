{"sha": "b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOTc3YjFlMGY3YmE1M2I2MzAxZTJkNWY3YjI2ZGQyZDljNzJmYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-05T00:11:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-05T00:11:42Z"}, "message": "auto merge of #13905 : alexcrichton/rust/issue-13337, r=thestinger\n\nThis has long since not been too relevant since the introduction of many crate\r\ntype outputs. This commit removes the flag entirely, adjusting all logic to do\r\nthe most reasonable thing when building both a library and an executable.\r\n\r\nCloses #13337", "tree": {"sha": "b6c562119279189508accdfb37b2f2d2ec7a6a39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6c562119279189508accdfb37b2f2d2ec7a6a39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "html_url": "https://github.com/rust-lang/rust/commit/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002f791189c43c5ef79da083490e533d015570b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/002f791189c43c5ef79da083490e533d015570b1", "html_url": "https://github.com/rust-lang/rust/commit/002f791189c43c5ef79da083490e533d015570b1"}, {"sha": "825f6ace1d8692af23f4a2842c87cb2dcc864fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/825f6ace1d8692af23f4a2842c87cb2dcc864fad", "html_url": "https://github.com/rust-lang/rust/commit/825f6ace1d8692af23f4a2842c87cb2dcc864fad"}], "stats": {"total": 141, "additions": 73, "deletions": 68}, "files": [{"sha": "332ecfb53db5fc4c668c457baac0728996d0e0cf", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -210,7 +210,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                                     -> (ast::Crate, syntax::ast_map::Map) {\n     let time_passes = sess.time_passes();\n \n-    sess.building_library.set(session::building_library(&sess.opts, &krate));\n     *sess.crate_types.borrow_mut() = session::collect_crate_types(sess, krate.attrs.as_slice());\n \n     time(time_passes, \"gated feature checking\", (), |_|\n@@ -1046,7 +1045,6 @@ pub fn build_session_(sopts: session::Options,\n         entry_type: Cell::new(None),\n         macro_registrar_fn: Cell::new(None),\n         default_sysroot: default_sysroot,\n-        building_library: Cell::new(false),\n         local_crate_source_file: local_crate_source_file,\n         working_dir: os::getcwd(),\n         lints: RefCell::new(NodeMap::new()),"}, {"sha": "58ccfeab73d183b0b15584256a0bb4215c23aa5e", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -25,7 +25,6 @@ use syntax::codemap::Span;\n use syntax::diagnostic;\n use syntax::parse::ParseSess;\n use syntax::{abi, ast, codemap};\n-use syntax;\n \n use std::cell::{Cell, RefCell};\n use collections::HashSet;\n@@ -185,7 +184,6 @@ pub struct Session {\n     pub entry_type: Cell<Option<EntryFnType>>,\n     pub macro_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub default_sysroot: Option<Path>,\n-    pub building_library: Cell<bool>,\n     // The name of the root source file of the crate, in the local file system. The path is always\n     // expected to be absolute. `None` means that there is no source file.\n     pub local_crate_source_file: Option<Path>,\n@@ -477,26 +475,6 @@ pub fn expect<T:Clone>(sess: &Session, opt: Option<T>, msg: || -> ~str) -> T {\n     diagnostic::expect(sess.diagnostic(), opt, msg)\n }\n \n-pub fn building_library(options: &Options, krate: &ast::Crate) -> bool {\n-    if options.test { return false }\n-    for output in options.crate_types.iter() {\n-        match *output {\n-            CrateTypeExecutable => {}\n-            CrateTypeStaticlib | CrateTypeDylib | CrateTypeRlib => return true\n-        }\n-    }\n-    match syntax::attr::first_attr_value_str_by_name(krate.attrs.as_slice(),\n-                                                     \"crate_type\") {\n-        Some(s) => {\n-            s.equiv(&(\"lib\")) ||\n-            s.equiv(&(\"rlib\")) ||\n-            s.equiv(&(\"dylib\")) ||\n-            s.equiv(&(\"staticlib\"))\n-        }\n-        _ => false\n-    }\n-}\n-\n pub fn default_lib_output() -> CrateType {\n     CrateTypeRlib\n }"}, {"sha": "959197e5b2b02df5be07d8182bc9111ae9fa80ba", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+use driver::session;\n use driver::session::Session;\n \n use syntax::ast;\n@@ -86,7 +86,10 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n             span: DUMMY_SP\n         });\n \n-        if use_start(&krate) && !self.sess.building_library.get() {\n+        let any_exe = self.sess.crate_types.borrow().iter().any(|ty| {\n+            *ty == session::CrateTypeExecutable\n+        });\n+        if use_start(&krate) && any_exe {\n             vis.push(ast::ViewItem {\n                 node: ast::ViewItemExternCrate(token::str_to_ident(\"native\"),\n                                              with_version(\"native\"),"}, {"sha": "d7f4173b529c4164ea5445ccb28f44a3a883b49b", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -125,27 +125,23 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         // Remove any #[main] from the AST so it doesn't clash with\n         // the one we're going to add. Only if compiling an executable.\n \n-        fn nomain(cx: &TestCtxt, item: @ast::Item) -> @ast::Item {\n-            if !cx.sess.building_library.get() {\n-                @ast::Item {\n-                    attrs: item.attrs.iter().filter_map(|attr| {\n-                        if !attr.name().equiv(&(\"main\")) {\n-                            Some(*attr)\n-                        } else {\n-                            None\n-                        }\n-                    }).collect(),\n-                    .. (*item).clone()\n-                }\n-            } else {\n-                item\n+        fn nomain(item: @ast::Item) -> @ast::Item {\n+            @ast::Item {\n+                attrs: item.attrs.iter().filter_map(|attr| {\n+                    if !attr.name().equiv(&(\"main\")) {\n+                        Some(*attr)\n+                    } else {\n+                        None\n+                    }\n+                }).collect(),\n+                .. (*item).clone()\n             }\n         }\n \n         let mod_nomain = ast::Mod {\n             inner: m.inner,\n             view_items: m.view_items.clone(),\n-            items: m.items.iter().map(|i| nomain(&self.cx, *i)).collect(),\n+            items: m.items.iter().map(|i| nomain(*i)).collect(),\n         };\n \n         fold::noop_fold_mod(&mod_nomain, self)"}, {"sha": "a17c8fb5c433e1c08c980a8919fc0f8b259077b5", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -48,9 +48,12 @@ impl<'a> Visitor<()> for EntryContext<'a> {\n }\n \n pub fn find_entry_point(session: &Session, krate: &Crate, ast_map: &ast_map::Map) {\n-    if session.building_library.get() {\n+    let any_exe = session.crate_types.borrow().iter().any(|ty| {\n+        *ty == session::CrateTypeExecutable\n+    });\n+    if !any_exe {\n         // No need to find a main function\n-        return;\n+        return\n     }\n \n     // If the user wants no main function at all, then stop here.\n@@ -132,18 +135,16 @@ fn configure_main(this: &mut EntryContext) {\n         *this.session.entry_fn.borrow_mut() = this.main_fn;\n         this.session.entry_type.set(Some(session::EntryMain));\n     } else {\n-        if !this.session.building_library.get() {\n-            // No main function\n-            this.session.err(\"main function not found\");\n-            if !this.non_main_fns.is_empty() {\n-                // There were some functions named 'main' though. Try to give the user a hint.\n-                this.session.note(\"the main function must be defined at the crate level \\\n-                                   but you have one or more functions named 'main' that are not \\\n-                                   defined at the crate level. Either move the definition or \\\n-                                   attach the `#[main]` attribute to override this behavior.\");\n-                for &(_, span) in this.non_main_fns.iter() {\n-                    this.session.span_note(span, \"here is a function named 'main'\");\n-                }\n+        // No main function\n+        this.session.err(\"main function not found\");\n+        if !this.non_main_fns.is_empty() {\n+            // There were some functions named 'main' though. Try to give the user a hint.\n+            this.session.note(\"the main function must be defined at the crate level \\\n+                               but you have one or more functions named 'main' that are not \\\n+                               defined at the crate level. Either move the definition or \\\n+                               attach the `#[main]` attribute to override this behavior.\");\n+            for &(_, span) in this.non_main_fns.iter() {\n+                this.session.span_note(span, \"here is a function named 'main'\");\n             }\n             this.session.abort_if_errors();\n         }"}, {"sha": "bb7a5d2a24d2ea91f222e2a6c8c158804e00e4fb", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -15,6 +15,7 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n+use driver::session;\n use middle::ty;\n use middle::typeck;\n use middle::privacy;\n@@ -89,6 +90,8 @@ struct ReachableContext<'a> {\n     // A worklist of item IDs. Each item ID in this worklist will be inlined\n     // and will be scanned for further references.\n     worklist: Vec<ast::NodeId>,\n+    // Whether any output of this compilation is a library\n+    any_library: bool,\n }\n \n impl<'a> Visitor<()> for ReachableContext<'a> {\n@@ -157,10 +160,14 @@ impl<'a> Visitor<()> for ReachableContext<'a> {\n impl<'a> ReachableContext<'a> {\n     // Creates a new reachability computation context.\n     fn new(tcx: &'a ty::ctxt) -> ReachableContext<'a> {\n+        let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n+            *ty != session::CrateTypeExecutable\n+        });\n         ReachableContext {\n             tcx: tcx,\n             reachable_symbols: NodeSet::new(),\n             worklist: Vec::new(),\n+            any_library: any_library,\n         }\n     }\n \n@@ -234,7 +241,7 @@ impl<'a> ReachableContext<'a> {\n \n     fn propagate_node(&mut self, node: &ast_map::Node,\n                       search_item: ast::NodeId) {\n-        if !self.tcx.sess.building_library.get() {\n+        if !self.any_library {\n             // If we are building an executable, then there's no need to flag\n             // anything as external except for `extern fn` types. These\n             // functions may still participate in some form of native interface,"}, {"sha": "1fd8174baa58b27cf0446884a61ad56ec1ffb79e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -1701,7 +1701,7 @@ fn finish_register_fn(ccx: &CrateContext, sp: Span, sym: ~str, node_id: ast::Nod\n         lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     }\n \n-    if is_entry_fn(ccx.sess(), node_id) && !ccx.sess().building_library.get() {\n+    if is_entry_fn(ccx.sess(), node_id) {\n         create_entry_wrapper(ccx, sp, llfn);\n     }\n }\n@@ -2100,7 +2100,10 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::EncodeI\n pub fn write_metadata(cx: &CrateContext, krate: &ast::Crate) -> Vec<u8> {\n     use flate;\n \n-    if !cx.sess().building_library.get() {\n+    let any_library = cx.sess().crate_types.borrow().iter().any(|ty| {\n+        *ty != session::CrateTypeExecutable\n+    });\n+    if !any_library {\n         return Vec::new()\n     }\n "}, {"sha": "84b08851deb7bea8a26b8abb732c3ed260ed6e03", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -409,16 +409,14 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n \n fn check_for_entry_fn(ccx: &CrateCtxt) {\n     let tcx = ccx.tcx;\n-    if !tcx.sess.building_library.get() {\n-        match *tcx.sess.entry_fn.borrow() {\n-          Some((id, sp)) => match tcx.sess.entry_type.get() {\n-              Some(session::EntryMain) => check_main_fn_ty(ccx, id, sp),\n-              Some(session::EntryStart) => check_start_fn_ty(ccx, id, sp),\n-              Some(session::EntryNone) => {}\n-              None => tcx.sess.bug(\"entry function without a type\")\n-          },\n-          None => {}\n-        }\n+    match *tcx.sess.entry_fn.borrow() {\n+        Some((id, sp)) => match tcx.sess.entry_type.get() {\n+            Some(session::EntryMain) => check_main_fn_ty(ccx, id, sp),\n+            Some(session::EntryStart) => check_start_fn_ty(ccx, id, sp),\n+            Some(session::EntryNone) => {}\n+            None => tcx.sess.bug(\"entry function without a type\")\n+        },\n+        None => {}\n     }\n }\n "}, {"sha": "4d975d2f71718e60741a975eef24ba3539262bbb", "filename": "src/test/run-make/libs-and-bins/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Ftest%2Frun-make%2Flibs-and-bins%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Ftest%2Frun-make%2Flibs-and-bins%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flibs-and-bins%2FMakefile?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs\n+\t$(call RUN,foo)\n+\trm $(TMPDIR)/$(call DYLIB_GLOB,foo)\n+"}, {"sha": "2ebe63928cad6e5cca76cdbd7ba2a34858f2530b", "filename": "src/test/run-make/libs-and-bins/foo.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Ftest%2Frun-make%2Flibs-and-bins%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf/src%2Ftest%2Frun-make%2Flibs-and-bins%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flibs-and-bins%2Ffoo.rs?ref=b0977b1e0f7ba53b6301e2d5f7b26dd2d9c72fbf", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"bin\"]\n+\n+fn main() {}"}]}