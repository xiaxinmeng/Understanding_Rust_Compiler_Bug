{"sha": "d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOGVkMjA1YzkwMzIwMDNlMmYzYjMyMjdhNDBiZGM4Zjg3NjNjOWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T21:51:03Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T21:51:03Z"}, "message": "parse: nix unused `root_module_name`.", "tree": {"sha": "0749233960833178d47281f48e290d9fe223ae24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0749233960833178d47281f48e290d9fe223ae24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "html_url": "https://github.com/rust-lang/rust/commit/d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38114ff16e7856f98b2b4be7ab4cd29b38bed59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/38114ff16e7856f98b2b4be7ab4cd29b38bed59a", "html_url": "https://github.com/rust-lang/rust/commit/38114ff16e7856f98b2b4be7ab4cd29b38bed59a"}], "stats": {"total": 29, "additions": 7, "deletions": 22}, "files": [{"sha": "3dfc5709b9103e9981bbd85344f2546e67ffbd25", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "patch": "@@ -110,7 +110,7 @@ pub fn expand_include<'cx>(\n             return DummyResult::any(sp);\n         }\n     };\n-    let p = new_sub_parser_from_file(cx.parse_sess(), &file, None, sp);\n+    let p = new_sub_parser_from_file(cx.parse_sess(), &file, sp);\n \n     // If in the included file we have e.g., `mod bar;`,\n     // then the path of `bar.rs` should be relative to the directory of `file`."}, {"sha": "b6b69400bad434b323ae061548d26f085408268e", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "patch": "@@ -259,8 +259,6 @@ fn generic_extension<'cx>(\n                 }\n \n                 let mut p = Parser::new(sess, tts, false, None);\n-                p.root_module_name =\n-                    cx.current_expansion.module.mod_path.last().map(|id| id.to_string());\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n \n                 // Let the context choose how to interpret the result."}, {"sha": "a73e2a1355e6f3699a669b7519295b45f0403633", "filename": "src/librustc_expand/module.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_expand%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_expand%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmodule.rs?ref=d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "patch": "@@ -59,9 +59,8 @@ crate fn parse_external_mod(\n         *pop_mod_stack = true; // We have pushed, so notify caller.\n         drop(included_mod_stack);\n \n-        // Actually parse the external file as amodule.\n-        let mut p0 = new_sub_parser_from_file(sess, &mp.path, Some(id.to_string()), span);\n-        let mut module = p0.parse_mod(&token::Eof)?;\n+        // Actually parse the external file as a module.\n+        let mut module = new_sub_parser_from_file(sess, &mp.path, span).parse_mod(&token::Eof)?;\n         module.0.inline = false;\n         module\n     };"}, {"sha": "112c733a81b8713739910c833e608db7682aa1f6", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "patch": "@@ -120,18 +120,11 @@ pub fn maybe_new_parser_from_file<'a>(\n     maybe_source_file_to_parser(sess, file)\n }\n \n-/// Given a session, a crate config, a path, and a span, add\n-/// the file at the given path to the `source_map`, and returns a parser.\n+/// Given a session, a path, and a span,\n+/// add the file at the given path to the `source_map`, and returns a parser.\n /// On an error, uses the given span as the source of the problem.\n-pub fn new_sub_parser_from_file<'a>(\n-    sess: &'a ParseSess,\n-    path: &Path,\n-    module_name: Option<String>,\n-    sp: Span,\n-) -> Parser<'a> {\n-    let mut p = source_file_to_parser(sess, file_to_source_file(sess, path, Some(sp)));\n-    p.root_module_name = module_name;\n-    p\n+pub fn new_sub_parser_from_file<'a>(sess: &'a ParseSess, path: &Path, sp: Span) -> Parser<'a> {\n+    source_file_to_parser(sess, file_to_source_file(sess, path, Some(sp)))\n }\n \n /// Given a `source_file` and config, returns a parser."}, {"sha": "b987813e38d982f88e88623593144f6cfa625a14", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18ed205c9032003e2f3b3227a40bdc8f8763c9b/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=d18ed205c9032003e2f3b3227a40bdc8f8763c9b", "patch": "@@ -88,10 +88,6 @@ pub struct Parser<'a> {\n     /// The previous token.\n     pub prev_token: Token,\n     restrictions: Restrictions,\n-    /// Name of the root module this parser originated from. If `None`, then the\n-    /// name is not known. This does not change while the parser is descending\n-    /// into modules, and sub-parsers have new values for this name.\n-    pub root_module_name: Option<String>,\n     expected_tokens: Vec<TokenType>,\n     token_cursor: TokenCursor,\n     desugar_doc_comments: bool,\n@@ -350,7 +346,6 @@ impl<'a> Parser<'a> {\n             token: Token::dummy(),\n             prev_token: Token::dummy(),\n             restrictions: Restrictions::empty(),\n-            root_module_name: None,\n             expected_tokens: Vec::new(),\n             token_cursor: TokenCursor {\n                 frame: TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, &tokens),"}]}