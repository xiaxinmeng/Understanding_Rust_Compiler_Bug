{"sha": "550c49657eabbe7583819c7e19c94eaa7d2c589e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MGM0OTY1N2VhYmJlNzU4MzgxOWM3ZTE5Yzk0ZWFhN2QyYzU4OWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-04T20:36:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-04T20:36:13Z"}, "message": "Merge #7147\n\n7147: ssr: Allow replacing expressions with statements r=davidlattimore a=MarijnS95\n\nDepends on #6587\r\n\r\nUntil that is merged, the diff is https://github.com/MarijnS95/rust-analyzer/compare/stmt..replace-expr-with-stmt\r\n\r\n---\r\n\r\nNow that statements can be matched and replaced (#6587) some usecases require expressions to be replaced with statements as well. This happens when something that can ambiguously be an expression or statement like `if` and loop blocks appear in the last position of a block, as trailing expression. In this case a replacement pattern of the form `if foo(){$a();}==>>$a();` will only substitute `if` blocks in the list of statements but not if they (implicitly) end up in the trailing expression, where they are not wrapped by an EXPR_STMT (but the pattern and template are, as parsing only succeeds for the `stmt ==>> stmt` case).\r\n\r\nInstead of adding two rules that match an expression - and emit duplicate matching errors - allow the template for expressions to be a statement if it fails to parse as an expression.\r\n\r\n---\r\n\r\nAnother gross change that does not seem to break any tests currently, but perhaps a safeguard should be added to only allow this kind of replacement in blocks by \"pushing\" the replacement template to the statement list and clearing the trailing expression?\r\n\r\nCC @davidlattimore \n\nCo-authored-by: Marijn Suijten <marijn@traverseresearch.nl>", "tree": {"sha": "1e022976d7828c59c9915b60ee8ee0068c9cd20d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e022976d7828c59c9915b60ee8ee0068c9cd20d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/550c49657eabbe7583819c7e19c94eaa7d2c589e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf83w9CRBK7hj4Ov3rIwAAdHIIAE6flkhGf9RV7ULr5pAyAP+x\nhkUUbqPzkxE7i0pZYrNncosxV1NpdSqqoWSn+gCYcCovGzEbwpG009AJpBdLVy5Q\nM8oJNduzj19Sh7U8oSNmqWwb/c7VDcwUXLB2NOuFoPDABmcOalBsUa1Eq6PpJN5Z\nPO+rokslq4/P079LD6rCsYJ5iyd48KMasAywWDpWvMOUpg6qwD0KQ6IEx8R1V+/v\nH69s4EC5Xn0NQCPJ4IP5h205Nq/KheSL3gXGmNTLVcs7ku0M55hRMJaMv7qaDADW\nUPo3O3OCbhEfbdFB9sIqEOUh55ygTngrztzqddX3mt/cewxRvtjm3xOmOiB61GY=\n=o1hk\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e022976d7828c59c9915b60ee8ee0068c9cd20d\nparent 0708bfeb7270923be5a2059ad5b99de183e667ba\nparent d33edb4e9cf1cad1c9ceb7c99859d73993ccba29\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609792573 +0000\ncommitter GitHub <noreply@github.com> 1609792573 +0000\n\nMerge #7147\n\n7147: ssr: Allow replacing expressions with statements r=davidlattimore a=MarijnS95\n\nDepends on #6587\r\n\r\nUntil that is merged, the diff is https://github.com/MarijnS95/rust-analyzer/compare/stmt..replace-expr-with-stmt\r\n\r\n---\r\n\r\nNow that statements can be matched and replaced (#6587) some usecases require expressions to be replaced with statements as well. This happens when something that can ambiguously be an expression or statement like `if` and loop blocks appear in the last position of a block, as trailing expression. In this case a replacement pattern of the form `if foo(){$a();}==>>$a();` will only substitute `if` blocks in the list of statements but not if they (implicitly) end up in the trailing expression, where they are not wrapped by an EXPR_STMT (but the pattern and template are, as parsing only succeeds for the `stmt ==>> stmt` case).\r\n\r\nInstead of adding two rules that match an expression - and emit duplicate matching errors - allow the template for expressions to be a statement if it fails to parse as an expression.\r\n\r\n---\r\n\r\nAnother gross change that does not seem to break any tests currently, but perhaps a safeguard should be added to only allow this kind of replacement in blocks by \"pushing\" the replacement template to the statement list and clearing the trailing expression?\r\n\r\nCC @davidlattimore \n\nCo-authored-by: Marijn Suijten <marijn@traverseresearch.nl>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/550c49657eabbe7583819c7e19c94eaa7d2c589e", "html_url": "https://github.com/rust-lang/rust/commit/550c49657eabbe7583819c7e19c94eaa7d2c589e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/550c49657eabbe7583819c7e19c94eaa7d2c589e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0708bfeb7270923be5a2059ad5b99de183e667ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0708bfeb7270923be5a2059ad5b99de183e667ba", "html_url": "https://github.com/rust-lang/rust/commit/0708bfeb7270923be5a2059ad5b99de183e667ba"}, {"sha": "d33edb4e9cf1cad1c9ceb7c99859d73993ccba29", "url": "https://api.github.com/repos/rust-lang/rust/commits/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29", "html_url": "https://github.com/rust-lang/rust/commit/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "3d5e4feb7d7efe069f69eb5dd99daed618111846", "filename": "crates/ssr/src/parsing.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/550c49657eabbe7583819c7e19c94eaa7d2c589e/crates%2Fssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550c49657eabbe7583819c7e19c94eaa7d2c589e/crates%2Fssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fparsing.rs?ref=550c49657eabbe7583819c7e19c94eaa7d2c589e", "patch": "@@ -73,12 +73,18 @@ impl ParsedRule {\n             placeholders_by_stand_in: pattern.placeholders_by_stand_in(),\n             rules: Vec::new(),\n         };\n-        builder.try_add(ast::Expr::parse(&raw_pattern), raw_template.map(ast::Expr::parse));\n+\n+        let raw_template_stmt = raw_template.map(ast::Stmt::parse);\n+        if let raw_template_expr @ Some(Ok(_)) = raw_template.map(ast::Expr::parse) {\n+            builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_expr);\n+        } else {\n+            builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_stmt.clone());\n+        }\n         builder.try_add(ast::Type::parse(&raw_pattern), raw_template.map(ast::Type::parse));\n         builder.try_add(ast::Item::parse(&raw_pattern), raw_template.map(ast::Item::parse));\n         builder.try_add(ast::Path::parse(&raw_pattern), raw_template.map(ast::Path::parse));\n         builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n-        builder.try_add(ast::Stmt::parse(&raw_pattern), raw_template.map(ast::Stmt::parse));\n+        builder.try_add(ast::Stmt::parse(&raw_pattern), raw_template_stmt);\n         builder.build()\n     }\n }\n@@ -89,7 +95,11 @@ struct RuleBuilder {\n }\n \n impl RuleBuilder {\n-    fn try_add<T: AstNode>(&mut self, pattern: Result<T, ()>, template: Option<Result<T, ()>>) {\n+    fn try_add<T: AstNode, T2: AstNode>(\n+        &mut self,\n+        pattern: Result<T, ()>,\n+        template: Option<Result<T2, ()>>,\n+    ) {\n         match (pattern, template) {\n             (Ok(pattern), Some(Ok(template))) => self.rules.push(ParsedRule {\n                 placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),"}, {"sha": "db9cb8ca15d362594c186782ada05a1be5ebf566", "filename": "crates/ssr/src/tests.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/550c49657eabbe7583819c7e19c94eaa7d2c589e/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550c49657eabbe7583819c7e19c94eaa7d2c589e/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=550c49657eabbe7583819c7e19c94eaa7d2c589e", "patch": "@@ -203,6 +203,53 @@ fn ssr_let_stmt_replace_expr() {\n     );\n }\n \n+#[test]\n+fn ssr_blockexpr_replace_stmt_with_stmt() {\n+    assert_ssr_transform(\n+        \"if $a() {$b;} ==>> $b;\",\n+        \"{\n+    if foo() {\n+        bar();\n+    }\n+    Ok(())\n+}\",\n+        expect![[r#\"{\n+    bar();\n+    Ok(())\n+}\"#]],\n+    );\n+}\n+\n+#[test]\n+fn ssr_blockexpr_match_trailing_expr() {\n+    assert_matches(\n+        \"if $a() {$b;}\",\n+        \"{\n+    if foo() {\n+        bar();\n+    }\n+}\",\n+        &[\"if foo() {\n+        bar();\n+    }\"],\n+    );\n+}\n+\n+#[test]\n+fn ssr_blockexpr_replace_trailing_expr_with_stmt() {\n+    assert_ssr_transform(\n+        \"if $a() {$b;} ==>> $b;\",\n+        \"{\n+    if foo() {\n+        bar();\n+    }\n+}\",\n+        expect![[\"{\n+    bar();\n+}\"]],\n+    );\n+}\n+\n #[test]\n fn ssr_function_to_method() {\n     assert_ssr_transform("}]}