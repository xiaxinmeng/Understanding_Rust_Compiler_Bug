{"sha": "e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYjFjMTdkY2IzNjdhM2VkZmQ5ZGY0YjFkN2NmYmNkMDU5Y2QyMDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-08T18:14:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-08T18:14:52Z"}, "message": "add `<>` when completing generic types", "tree": {"sha": "416648fde13020d33d62068a5d52221c66c210b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/416648fde13020d33d62068a5d52221c66c210b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "html_url": "https://github.com/rust-lang/rust/commit/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4fa98b1bffe2200580506b83af5383555e1a958", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fa98b1bffe2200580506b83af5383555e1a958", "html_url": "https://github.com/rust-lang/rust/commit/f4fa98b1bffe2200580506b83af5383555e1a958"}], "stats": {"total": 276, "additions": 198, "deletions": 78}, "files": [{"sha": "84826cdcce1f8b952498334d50c2979766754bf9", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 81, "deletions": 73, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "patch": "@@ -290,22 +290,24 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"T\",\n-        source_range: [54; 54),\n-        delete: [54; 54),\n-        insert: \"T\",\n-        kind: TypeParam,\n-    },\n-    CompletionItem {\n-        label: \"X\",\n-        source_range: [54; 54),\n-        delete: [54; 54),\n-        insert: \"X\",\n-        kind: Struct,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"T\",\n+                source_range: [54; 54),\n+                delete: [54; 54),\n+                insert: \"T\",\n+                kind: TypeParam,\n+            },\n+            CompletionItem {\n+                label: \"X\",\n+                source_range: [54; 54),\n+                delete: [54; 54),\n+                insert: \"X<$0>\",\n+                kind: Struct,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -319,22 +321,24 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Self\",\n-        source_range: [48; 48),\n-        delete: [48; 48),\n-        insert: \"Self\",\n-        kind: TypeParam,\n-    },\n-    CompletionItem {\n-        label: \"X\",\n-        source_range: [48; 48),\n-        delete: [48; 48),\n-        insert: \"X\",\n-        kind: Enum,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Self\",\n+                source_range: [48; 48),\n+                delete: [48; 48),\n+                insert: \"Self\",\n+                kind: TypeParam,\n+            },\n+            CompletionItem {\n+                label: \"X\",\n+                source_range: [48; 48),\n+                delete: [48; 48),\n+                insert: \"X\",\n+                kind: Enum,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -442,23 +446,25 @@ mod tests {\n                 fn x() -> <|>\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Foo\",\n-        source_range: [55; 55),\n-        delete: [55; 55),\n-        insert: \"Foo\",\n-        kind: Struct,\n-    },\n-    CompletionItem {\n-        label: \"x\",\n-        source_range: [55; 55),\n-        delete: [55; 55),\n-        insert: \"x()$0\",\n-        kind: Function,\n-        detail: \"fn x()\",\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [55; 55),\n+                delete: [55; 55),\n+                insert: \"Foo\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"x\",\n+                source_range: [55; 55),\n+                delete: [55; 55),\n+                insert: \"x()$0\",\n+                kind: Function,\n+                detail: \"fn x()\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -538,30 +544,32 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r#\"[\n-    CompletionItem {\n-        label: \"Option\",\n-        source_range: [18; 18),\n-        delete: [18; 18),\n-        insert: \"Option\",\n-        kind: Struct,\n-    },\n-    CompletionItem {\n-        label: \"foo\",\n-        source_range: [18; 18),\n-        delete: [18; 18),\n-        insert: \"foo()$0\",\n-        kind: Function,\n-        detail: \"fn foo()\",\n-    },\n-    CompletionItem {\n-        label: \"std\",\n-        source_range: [18; 18),\n-        delete: [18; 18),\n-        insert: \"std\",\n-        kind: Module,\n-    },\n-]\"#\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Option\",\n+                source_range: [18; 18),\n+                delete: [18; 18),\n+                insert: \"Option\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [18; 18),\n+                delete: [18; 18),\n+                insert: \"foo()$0\",\n+                kind: Function,\n+                detail: \"fn foo()\",\n+            },\n+            CompletionItem {\n+                label: \"std\",\n+                source_range: [18; 18),\n+                delete: [18; 18),\n+                insert: \"std\",\n+                kind: Module,\n+            },\n+        ]\n+        \"###\n         );\n     }\n "}, {"sha": "73f3f3960c67ccf0e4082e1dc8891aa8e0282ace", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "patch": "@@ -40,6 +40,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) dot_receiver: Option<ast::Expr>,\n     /// If this is a call (method or function) in particular, i.e. the () are already there.\n     pub(super) is_call: bool,\n+    pub(super) is_path_type: bool,\n+    pub(super) has_type_args: bool,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -76,6 +78,8 @@ impl<'a> CompletionContext<'a> {\n             is_new_item: false,\n             dot_receiver: None,\n             is_call: false,\n+            is_path_type: false,\n+            has_type_args: false,\n         };\n         ctx.fill(&original_parse, position.offset);\n         Some(ctx)\n@@ -176,6 +180,9 @@ impl<'a> CompletionContext<'a> {\n                 .and_then(|it| it.syntax().parent().and_then(ast::CallExpr::cast))\n                 .is_some();\n \n+            self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n+            self.has_type_args = segment.type_arg_list().is_some();\n+\n             if let Some(mut path) = hir::Path::from_ast(path.clone()) {\n                 if !path.is_ident() {\n                     path.segments.pop().unwrap();"}, {"sha": "400a266a2a44276e5d984b582b5c67358c3eeab3", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 109, "deletions": 5, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "patch": "@@ -1,12 +1,12 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n+use hir::{db::HirDatabase, Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n use join_to_string::join;\n use ra_syntax::ast::NameOwner;\n use test_utils::tested_by;\n \n use crate::completion::{\n-    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n+    db, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n use crate::display::{const_label, function_label, macro_label, type_label};\n@@ -150,7 +150,8 @@ impl Completions {\n             })\n             .set_documentation(func.docs(ctx.db))\n             .detail(detail);\n-        // If not an import, add parenthesis automatically.\n+\n+        // Add `<>` for generic types\n         if ctx.use_item_syntax.is_none()\n             && !ctx.is_call\n             && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n@@ -164,11 +165,13 @@ impl Completions {\n                 };\n             builder = builder.insert_snippet(snippet);\n         }\n+\n         self.add(builder)\n     }\n \n     fn add_adt_with_name(&mut self, ctx: &CompletionContext, name: String, adt: hir::Adt) {\n-        let builder = CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name);\n+        let mut builder =\n+            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone());\n \n         let kind = match adt {\n             hir::Adt::Struct(_) => CompletionItemKind::Struct,\n@@ -178,6 +181,17 @@ impl Completions {\n         };\n         let docs = adt.docs(ctx.db);\n \n+        // If not an import, add parenthesis automatically.\n+        if ctx.is_path_type\n+            && !ctx.has_type_args\n+            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n+        {\n+            if has_non_default_type_params(adt, ctx.db) {\n+                tested_by!(inserts_angle_brackets_for_generics);\n+                builder = builder.insert_snippet(format!(\"{}<$0>\", name));\n+            }\n+        }\n+\n         builder.kind(kind).set_documentation(docs).add_to(self)\n     }\n \n@@ -221,7 +235,6 @@ impl Completions {\n             .separator(\", \")\n             .surround_with(\"(\", \")\")\n             .to_string();\n-\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n             .kind(CompletionItemKind::EnumVariant)\n             .set_documentation(variant.docs(ctx.db))\n@@ -230,6 +243,11 @@ impl Completions {\n     }\n }\n \n+fn has_non_default_type_params(adt: hir::Adt, db: &db::RootDatabase) -> bool {\n+    let subst = db.generic_defaults(adt.into());\n+    subst.iter().any(|ty| ty == &Ty::Unknown)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::completion::{do_completion, CompletionItem, CompletionKind};\n@@ -397,4 +415,90 @@ mod tests {\n ]\"#\n         );\n     }\n+\n+    #[test]\n+    fn inserts_angle_brackets_for_generics() {\n+        covers!(inserts_angle_brackets_for_generics);\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                struct Vec<T> {}\n+                fn foo(xs: Ve<|>)\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Vec\",\n+                source_range: [61; 63),\n+                delete: [61; 63),\n+                insert: \"Vec<$0>\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [61; 63),\n+                delete: [61; 63),\n+                insert: \"foo($0)\",\n+                kind: Function,\n+                detail: \"fn foo(xs: Ve)\",\n+            },\n+        ]\n+        \"###\n+        );\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                struct Vec<T = i128> {}\n+                fn foo(xs: Ve<|>)\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Vec\",\n+                source_range: [68; 70),\n+                delete: [68; 70),\n+                insert: \"Vec\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [68; 70),\n+                delete: [68; 70),\n+                insert: \"foo($0)\",\n+                kind: Function,\n+                detail: \"fn foo(xs: Ve)\",\n+            },\n+        ]\n+        \"###\n+        );\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                struct Vec<T> {}\n+                fn foo(xs: Ve<|><i128>)\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Vec\",\n+                source_range: [61; 63),\n+                delete: [61; 63),\n+                insert: \"Vec\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [61; 63),\n+                delete: [61; 63),\n+                insert: \"foo($0)\",\n+                kind: Function,\n+                detail: \"fn foo(xs: Ve<i128>)\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}, {"sha": "848ae4dc743e81a23bfd7b40267a32dee52afbc1", "filename": "crates/ra_ide_api/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs?ref=e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "patch": "@@ -1,6 +1,7 @@\n //! See test_utils/src/marks.rs\n \n test_utils::marks!(\n+    inserts_angle_brackets_for_generics\n     inserts_parens_for_function_calls\n     goto_definition_works_for_macros\n     goto_definition_works_for_methods"}]}