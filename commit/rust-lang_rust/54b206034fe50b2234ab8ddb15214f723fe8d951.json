{"sha": "54b206034fe50b2234ab8ddb15214f723fe8d951", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjIwNjAzNGZlNTBiMjIzNGFiOGRkYjE1MjE0ZjcyM2ZlOGQ5NTE=", "commit": {"author": {"name": "Parth Sane", "email": "parthsane@gmail.com", "date": "2019-12-02T12:22:45Z"}, "committer": {"name": "Parth Sane", "email": "parthsane@gmail.com", "date": "2019-12-03T09:14:14Z"}, "message": "Change linker for x86_64-fortanix-unknown-sgx to rust-lld\n\nFor SGX, the relocation using the relocation table is done by\nthe code in rust/src/libstd/sys/sgx/abi/reloc.rs and this code\nshould not require relocation. Setting RelaxELFRelocations flag\nif allows this to happen, hence adding a Target Option for it.", "tree": {"sha": "bec85b917497520836a6dba7e2c9242bfbf4b7ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec85b917497520836a6dba7e2c9242bfbf4b7ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b206034fe50b2234ab8ddb15214f723fe8d951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b206034fe50b2234ab8ddb15214f723fe8d951", "html_url": "https://github.com/rust-lang/rust/commit/54b206034fe50b2234ab8ddb15214f723fe8d951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b206034fe50b2234ab8ddb15214f723fe8d951/comments", "author": {"login": "parthsane", "id": 4710171, "node_id": "MDQ6VXNlcjQ3MTAxNzE=", "avatar_url": "https://avatars.githubusercontent.com/u/4710171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parthsane", "html_url": "https://github.com/parthsane", "followers_url": "https://api.github.com/users/parthsane/followers", "following_url": "https://api.github.com/users/parthsane/following{/other_user}", "gists_url": "https://api.github.com/users/parthsane/gists{/gist_id}", "starred_url": "https://api.github.com/users/parthsane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parthsane/subscriptions", "organizations_url": "https://api.github.com/users/parthsane/orgs", "repos_url": "https://api.github.com/users/parthsane/repos", "events_url": "https://api.github.com/users/parthsane/events{/privacy}", "received_events_url": "https://api.github.com/users/parthsane/received_events", "type": "User", "site_admin": false}, "committer": {"login": "parthsane", "id": 4710171, "node_id": "MDQ6VXNlcjQ3MTAxNzE=", "avatar_url": "https://avatars.githubusercontent.com/u/4710171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parthsane", "html_url": "https://github.com/parthsane", "followers_url": "https://api.github.com/users/parthsane/followers", "following_url": "https://api.github.com/users/parthsane/following{/other_user}", "gists_url": "https://api.github.com/users/parthsane/gists{/gist_id}", "starred_url": "https://api.github.com/users/parthsane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parthsane/subscriptions", "organizations_url": "https://api.github.com/users/parthsane/orgs", "repos_url": "https://api.github.com/users/parthsane/repos", "events_url": "https://api.github.com/users/parthsane/events{/privacy}", "received_events_url": "https://api.github.com/users/parthsane/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af3ee8ee2a2bc1286b021db7600ba990359cf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af3ee8ee2a2bc1286b021db7600ba990359cf3f", "html_url": "https://github.com/rust-lang/rust/commit/4af3ee8ee2a2bc1286b021db7600ba990359cf3f"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "48bbc1307238706250e340cb9095627a2e6d8080", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=54b206034fe50b2234ab8ddb15214f723fe8d951", "patch": "@@ -167,7 +167,7 @@ pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_fea\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n     let asm_comments = sess.asm_comments();\n-\n+    let relax_elf_relocations = sess.target.target.options.relax_elf_relocations;\n     Arc::new(move || {\n         let tm = unsafe {\n             llvm::LLVMRustCreateTargetMachine(\n@@ -183,6 +183,7 @@ pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_fea\n                 singlethread,\n                 asm_comments,\n                 emit_stack_size_section,\n+                relax_elf_relocations,\n             )\n         };\n "}, {"sha": "fd31e65c9d320fbe72f27cc7405c86b45f5ca5ae", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=54b206034fe50b2234ab8ddb15214f723fe8d951", "patch": "@@ -1702,7 +1702,8 @@ extern \"C\" {\n                                        TrapUnreachable: bool,\n                                        Singlethread: bool,\n                                        AsmComments: bool,\n-                                       EmitStackSizeSection: bool)\n+                                       EmitStackSizeSection: bool,\n+                                       RelaxELFRelocations: bool)\n                                        -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n     pub fn LLVMRustAddBuilderLibraryInfo(PMB: &'a PassManagerBuilder,"}, {"sha": "4278852123bea86f786d40a1fb10de5e4f2d38a8", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=54b206034fe50b2234ab8ddb15214f723fe8d951", "patch": "@@ -398,7 +398,8 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n         // Symbol visibility in object files typically takes care of this.\n-        if crate_type == CrateType::Executable {\n+        if crate_type == CrateType::Executable &&\n+            self.sess.target.target.options.override_export_symbols.is_none() {\n             return;\n         }\n "}, {"sha": "693cf75e8fd646446f26db5a56abdaf36651925b", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=54b206034fe50b2234ab8ddb15214f723fe8d951", "patch": "@@ -803,6 +803,9 @@ pub struct TargetOptions {\n \n     /// LLVM ABI name, corresponds to the '-mabi' parameter available in multilib C compilers\n     pub llvm_abiname: String,\n+\n+    /// Whether or not RelaxElfRelocation flag will be passed to the linker\n+    pub relax_elf_relocations: bool,\n }\n \n impl Default for TargetOptions {\n@@ -890,6 +893,7 @@ impl Default for TargetOptions {\n             merge_functions: MergeFunctions::Aliases,\n             target_mcount: \"mcount\".to_string(),\n             llvm_abiname: \"\".to_string(),\n+            relax_elf_relocations: false,\n         }\n     }\n }\n@@ -1207,6 +1211,7 @@ impl Target {\n         key!(merge_functions, MergeFunctions)?;\n         key!(target_mcount);\n         key!(llvm_abiname);\n+        key!(relax_elf_relocations, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1426,6 +1431,7 @@ impl ToJson for Target {\n         target_option_val!(merge_functions);\n         target_option_val!(target_mcount);\n         target_option_val!(llvm_abiname);\n+        target_option_val!(relax_elf_relocations);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "dbcd77bc753e86495aabab5ce403ab9cfe2c4c95", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=54b206034fe50b2234ab8ddb15214f723fe8d951", "patch": "@@ -1,35 +1,31 @@\n use std::iter;\n \n-use super::{LinkerFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     const PRE_LINK_ARGS: &[&str] = &[\n-        \"-Wl,--as-needed\",\n-        \"-Wl,-z,noexecstack\",\n-        \"-m64\",\n-        \"-fuse-ld=gold\",\n-        \"-nostdlib\",\n-        \"-shared\",\n-        \"-Wl,-e,sgx_entry\",\n-        \"-Wl,-Bstatic\",\n-        \"-Wl,--gc-sections\",\n-        \"-Wl,-z,text\",\n-        \"-Wl,-z,norelro\",\n-        \"-Wl,--rosegment\",\n-        \"-Wl,--no-undefined\",\n-        \"-Wl,--error-unresolved-symbols\",\n-        \"-Wl,--no-undefined-version\",\n-        \"-Wl,-Bsymbolic\",\n-        \"-Wl,--export-dynamic\",\n+        \"--as-needed\",\n+        \"--eh-frame-hdr\",\n+        \"-z\" , \"noexecstack\",\n+        \"-e\",\"sgx_entry\",\n+        \"-Bstatic\",\n+        \"--gc-sections\",\n+        \"-z\",\"text\",\n+        \"-z\",\"norelro\",\n+        \"--no-undefined\",\n+        \"--error-unresolved-symbols\",\n+        \"--no-undefined-version\",\n+        \"-Bsymbolic\",\n+        \"--export-dynamic\",\n         // The following symbols are needed by libunwind, which is linked after\n         // libstd. Make sure they're included in the link.\n-        \"-Wl,-u,__rust_abort\",\n-        \"-Wl,-u,__rust_c_alloc\",\n-        \"-Wl,-u,__rust_c_dealloc\",\n-        \"-Wl,-u,__rust_print_err\",\n-        \"-Wl,-u,__rust_rwlock_rdlock\",\n-        \"-Wl,-u,__rust_rwlock_unlock\",\n-        \"-Wl,-u,__rust_rwlock_wrlock\",\n+        \"-u\",\"__rust_abort\",\n+        \"-u\",\"__rust_c_alloc\",\n+        \"-u\",\"__rust_c_dealloc\",\n+        \"-u\",\"__rust_print_err\",\n+        \"-u\",\"__rust_rwlock_rdlock\",\n+        \"-u\",\"__rust_rwlock_unlock\",\n+        \"-u\",\"__rust_rwlock_wrlock\"\n     ];\n \n     const EXPORT_SYMBOLS: &[&str] = &[\n@@ -50,18 +46,20 @@ pub fn target() -> Result<Target, String> {\n         dynamic_linking: false,\n         executables: true,\n         linker_is_gnu: true,\n+        linker: Some(\"rust-lld\".to_owned()),\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Unwind,\n         cpu: \"x86-64\".into(),\n         features: \"+rdrnd,+rdseed\".into(),\n         position_independent_executables: true,\n         pre_link_args: iter::once((\n-            LinkerFlavor::Gcc,\n+            LinkerFlavor::Lld(LldFlavor::Ld),\n             PRE_LINK_ARGS.iter().cloned().map(String::from).collect(),\n         ))\n         .collect(),\n         post_link_objects: vec![\"libunwind.a\".into()],\n         override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(String::from).collect()),\n+        relax_elf_relocations: true,\n         ..Default::default()\n     };\n     Ok(Target {\n@@ -74,7 +72,7 @@ pub fn target() -> Result<Target, String> {\n         target_vendor: \"fortanix\".into(),\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".into(),\n         arch: \"x86_64\".into(),\n-        linker_flavor: LinkerFlavor::Gcc,\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n     })\n }"}, {"sha": "b7f8e835909434888371c9f9b15322fa2f9cc2fc", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/54b206034fe50b2234ab8ddb15214f723fe8d951/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=54b206034fe50b2234ab8ddb15214f723fe8d951", "patch": "@@ -393,7 +393,8 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     bool TrapUnreachable,\n     bool Singlethread,\n     bool AsmComments,\n-    bool EmitStackSizeSection) {\n+    bool EmitStackSizeSection,\n+    bool RelaxELFRelocations) {\n \n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n@@ -418,6 +419,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   Options.MCOptions.AsmVerbose = AsmComments;\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n   Options.MCOptions.ABIName = ABIStr;\n+  Options.RelaxELFRelocations = RelaxELFRelocations;\n \n   if (TrapUnreachable) {\n     // Tell LLVM to codegen `unreachable` into an explicit trap instruction."}]}