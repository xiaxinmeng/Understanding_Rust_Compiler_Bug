{"sha": "76dd5c58a011bb734ad5b8e96fc560374893bc8f", "node_id": "C_kwDOAAsO6NoAKDc2ZGQ1YzU4YTAxMWJiNzM0YWQ1YjhlOTZmYzU2MDM3NDg5M2JjOGY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-28T12:23:23Z"}, "committer": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-28T12:23:23Z"}, "message": "Remove `register_attr` feature\n\nSigned-off-by: Yuki Okushi <jtitor@2k36.org>", "tree": {"sha": "363efcb650b508fce895f9339663c02ecee8a7f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363efcb650b508fce895f9339663c02ecee8a7f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76dd5c58a011bb734ad5b8e96fc560374893bc8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgHhkVL0/9C9iZr1PMss4Lz7KmAH\nPO6dU/JqcK/z29OHQAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFf7g9OwQz7MGR/V9/09n7qUMz1/xhoG8+XNgPaJBY6xBGZ+8UDudioNtR5Fc0qqCr\n6IqmZOPLoH+QFDMrIdGAI=\n-----END SSH SIGNATURE-----", "payload": "tree 363efcb650b508fce895f9339663c02ecee8a7f9\nparent d5ef528bebbe0d8e350e547316fdc7d7476614d2\nauthor Yuki Okushi <jtitor@2k36.org> 1661689403 +0900\ncommitter Yuki Okushi <jtitor@2k36.org> 1661689403 +0900\n\nRemove `register_attr` feature\n\nSigned-off-by: Yuki Okushi <jtitor@2k36.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76dd5c58a011bb734ad5b8e96fc560374893bc8f", "html_url": "https://github.com/rust-lang/rust/commit/76dd5c58a011bb734ad5b8e96fc560374893bc8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76dd5c58a011bb734ad5b8e96fc560374893bc8f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ef528bebbe0d8e350e547316fdc7d7476614d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ef528bebbe0d8e350e547316fdc7d7476614d2", "html_url": "https://github.com/rust-lang/rust/commit/d5ef528bebbe0d8e350e547316fdc7d7476614d2"}], "stats": {"total": 76, "additions": 14, "deletions": 62}, "files": [{"sha": "0924e0b72c088278654fdbe5222b77069839cd0a", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=76dd5c58a011bb734ad5b8e96fc560374893bc8f", "patch": "@@ -479,8 +479,6 @@ declare_features! (\n     (incomplete, raw_dylib, \"1.40.0\", Some(58713), None),\n     /// Allows `&raw const $place_expr` and `&raw mut $place_expr` expressions.\n     (active, raw_ref_op, \"1.41.0\", Some(64490), None),\n-    /// Allows using the `#[register_attr]` attribute.\n-    (active, register_attr, \"1.41.0\", Some(66080), None),\n     /// Allows using the `#[register_tool]` attribute.\n     (active, register_tool, \"1.41.0\", Some(66079), None),\n     /// Allows the `#[repr(i128)]` attribute for enums."}, {"sha": "0487270b52a9aaad0e0dce49ac753a2c8ba84b98", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=76dd5c58a011bb734ad5b8e96fc560374893bc8f", "patch": "@@ -458,10 +458,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     gated!(ffi_pure, Normal, template!(Word), WarnFollowing, experimental!(ffi_pure)),\n     gated!(ffi_const, Normal, template!(Word), WarnFollowing, experimental!(ffi_const)),\n-    gated!(\n-        register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"), DuplicatesOk,\n-        experimental!(register_attr),\n-    ),\n     gated!(\n         register_tool, CrateLevel, template!(List: \"tool1, tool2, ...\"), DuplicatesOk,\n         experimental!(register_tool),"}, {"sha": "13f275bb6a0c923c8faf88df743e4409fc28b686", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=76dd5c58a011bb734ad5b8e96fc560374893bc8f", "patch": "@@ -163,6 +163,9 @@ declare_features! (\n     (removed, quad_precision_float, \"1.0.0\", None, None, None),\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n     (removed, reflect, \"1.0.0\", Some(27749), None, None),\n+    /// Allows using the `#[register_attr]` attribute.\n+    (removed, register_attr, \"CURRENT_RUSTC_VERSION\", Some(66080), None,\n+     Some(\"removed in favor of `#![register_tool]`\")),\n     /// Allows using the macros:\n     /// + `__diagnostic_used`\n     /// + `__register_diagnostic`"}, {"sha": "2d2648a8f35af5e586d70b998e4407a8e5251713", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=76dd5c58a011bb734ad5b8e96fc560374893bc8f", "patch": "@@ -45,8 +45,6 @@ pub enum NonMacroAttrKind {\n     /// Single-segment custom attribute registered by a derive macro\n     /// but used before that derive macro was expanded (deprecated).\n     DeriveHelperCompat,\n-    /// Single-segment custom attribute registered with `#[register_attr]`.\n-    Registered,\n }\n \n /// What kind of definition something is; e.g., `mod` vs `struct`.\n@@ -564,15 +562,11 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::DeriveHelper | NonMacroAttrKind::DeriveHelperCompat => {\n                 \"derive helper attribute\"\n             }\n-            NonMacroAttrKind::Registered => \"explicitly registered attribute\",\n         }\n     }\n \n     pub fn article(self) -> &'static str {\n-        match self {\n-            NonMacroAttrKind::Registered => \"an\",\n-            _ => \"a\",\n-        }\n+        \"a\"\n     }\n \n     /// Users of some attributes cannot mark them as used, so they are considered always used.\n@@ -581,7 +575,7 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::Tool\n             | NonMacroAttrKind::DeriveHelper\n             | NonMacroAttrKind::DeriveHelperCompat => true,\n-            NonMacroAttrKind::Builtin(..) | NonMacroAttrKind::Registered => false,\n+            NonMacroAttrKind::Builtin(..) => false,\n         }\n     }\n }"}, {"sha": "2d15b1b0a1b94fbb23740e9248407b6732a2d570", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=76dd5c58a011bb734ad5b8e96fc560374893bc8f", "patch": "@@ -1172,16 +1172,6 @@ impl<'a> Resolver<'a> {\n                 Scope::Module(module, _) => {\n                     this.add_module_candidates(module, &mut suggestions, filter_fn);\n                 }\n-                Scope::RegisteredAttrs => {\n-                    let res = Res::NonMacroAttr(NonMacroAttrKind::Registered);\n-                    if filter_fn(res) {\n-                        suggestions.extend(\n-                            this.registered_attrs\n-                                .iter()\n-                                .map(|ident| TypoSuggestion::typo_from_res(ident.name, res)),\n-                        );\n-                    }\n-                }\n                 Scope::MacroUsePrelude => {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(\n                         |(name, binding)| {"}, {"sha": "307fdb9701f055e7d1c0444a9e17f25d9a3bb410", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=76dd5c58a011bb734ad5b8e96fc560374893bc8f", "patch": "@@ -127,7 +127,6 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::CrateRoot => true,\n                 Scope::Module(..) => true,\n-                Scope::RegisteredAttrs => use_prelude,\n                 Scope::MacroUsePrelude => use_prelude || rust_2015,\n                 Scope::BuiltinAttrs => true,\n                 Scope::ExternPrelude => use_prelude || is_absolute_path,\n@@ -187,12 +186,11 @@ impl<'a> Resolver<'a> {\n                             match ns {\n                                 TypeNS => Scope::ExternPrelude,\n                                 ValueNS => Scope::StdLibPrelude,\n-                                MacroNS => Scope::RegisteredAttrs,\n+                                MacroNS => Scope::MacroUsePrelude,\n                             }\n                         }\n                     }\n                 }\n-                Scope::RegisteredAttrs => Scope::MacroUsePrelude,\n                 Scope::MacroUsePrelude => Scope::StdLibPrelude,\n                 Scope::BuiltinAttrs => break, // nowhere else to search\n                 Scope::ExternPrelude if is_absolute_path => break,\n@@ -556,14 +554,6 @@ impl<'a> Resolver<'a> {\n                             Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),\n                         }\n                     }\n-                    Scope::RegisteredAttrs => match this.registered_attrs.get(&ident).cloned() {\n-                        Some(ident) => ok(\n-                            Res::NonMacroAttr(NonMacroAttrKind::Registered),\n-                            ident.span,\n-                            this.arenas,\n-                        ),\n-                        None => Err(Determinacy::Determined),\n-                    },\n                     Scope::MacroUsePrelude => {\n                         match this.macro_use_prelude.get(&ident.name).cloned() {\n                             Some(binding) => Ok((binding, Flags::MISC_FROM_PRELUDE)),"}, {"sha": "f7351184422db6e6070659ad5e662b14b24c7e0c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=76dd5c58a011bb734ad5b8e96fc560374893bc8f", "patch": "@@ -107,7 +107,6 @@ enum Scope<'a> {\n     // The node ID is for reporting the `PROC_MACRO_DERIVE_RESOLUTION_FALLBACK`\n     // lint if it should be reported.\n     Module(Module<'a>, Option<NodeId>),\n-    RegisteredAttrs,\n     MacroUsePrelude,\n     BuiltinAttrs,\n     ExternPrelude,\n@@ -975,7 +974,6 @@ pub struct Resolver<'a> {\n     /// A small map keeping true kinds of built-in macros that appear to be fn-like on\n     /// the surface (`macro` items in libcore), but are actually attributes or derives.\n     builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n-    registered_attrs: FxHashSet<Ident>,\n     registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n     macro_map: FxHashMap<DefId, MacroData>,\n@@ -1252,8 +1250,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let (registered_attrs, registered_tools) =\n-            macros::registered_attrs_and_tools(session, &krate.attrs);\n+        let registered_tools = macros::registered_tools(session, &krate.attrs);\n \n         let features = session.features_untracked();\n \n@@ -1318,7 +1315,6 @@ impl<'a> Resolver<'a> {\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n             builtin_macro_kinds: Default::default(),\n-            registered_attrs,\n             registered_tools,\n             macro_use_prelude: FxHashMap::default(),\n             macro_map: FxHashMap::default(),"}, {"sha": "0c428aa6cc05c16b82c4a7f6a9e8a6539277bb82", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd5c58a011bb734ad5b8e96fc560374893bc8f/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=76dd5c58a011bb734ad5b8e96fc560374893bc8f", "patch": "@@ -112,47 +112,32 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n     }\n }\n \n-/// The code common between processing `#![register_tool]` and `#![register_attr]`.\n-fn registered_idents(\n-    sess: &Session,\n-    attrs: &[ast::Attribute],\n-    attr_name: Symbol,\n-    descr: &str,\n-) -> FxHashSet<Ident> {\n-    let mut registered = FxHashSet::default();\n-    for attr in sess.filter_by_name(attrs, attr_name) {\n+pub(crate) fn registered_tools(sess: &Session, attrs: &[ast::Attribute]) -> FxHashSet<Ident> {\n+    let mut registered_tools = FxHashSet::default();\n+    for attr in sess.filter_by_name(attrs, sym::register_tool) {\n         for nested_meta in attr.meta_item_list().unwrap_or_default() {\n             match nested_meta.ident() {\n                 Some(ident) => {\n-                    if let Some(old_ident) = registered.replace(ident) {\n-                        let msg = format!(\"{} `{}` was already registered\", descr, ident);\n+                    if let Some(old_ident) = registered_tools.replace(ident) {\n+                        let msg = format!(\"{} `{}` was already registered\", \"tool\", ident);\n                         sess.struct_span_err(ident.span, &msg)\n                             .span_label(old_ident.span, \"already registered here\")\n                             .emit();\n                     }\n                 }\n                 None => {\n-                    let msg = format!(\"`{}` only accepts identifiers\", attr_name);\n+                    let msg = format!(\"`{}` only accepts identifiers\", sym::register_tool);\n                     let span = nested_meta.span();\n                     sess.struct_span_err(span, &msg).span_label(span, \"not an identifier\").emit();\n                 }\n             }\n         }\n     }\n-    registered\n-}\n-\n-pub(crate) fn registered_attrs_and_tools(\n-    sess: &Session,\n-    attrs: &[ast::Attribute],\n-) -> (FxHashSet<Ident>, FxHashSet<Ident>) {\n-    let registered_attrs = registered_idents(sess, attrs, sym::register_attr, \"attribute\");\n-    let mut registered_tools = registered_idents(sess, attrs, sym::register_tool, \"tool\");\n     // We implicitly add `rustfmt` and `clippy` to known tools,\n     // but it's not an error to register them explicitly.\n     let predefined_tools = [sym::clippy, sym::rustfmt];\n     registered_tools.extend(predefined_tools.iter().cloned().map(Ident::with_dummy_span));\n-    (registered_attrs, registered_tools)\n+    registered_tools\n }\n \n // Some feature gates for inner attributes are reported as lints for backward compatibility."}]}