{"sha": "589446e19cbf7a2c7eddf80b490992d31134015c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTQ0NmUxOWNiZjdhMmM3ZWRkZjgwYjQ5MDk5MmQzMTEzNDAxNWM=", "commit": {"author": {"name": "Without Boats", "email": "boats@mozilla.com", "date": "2018-05-17T21:47:52Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-22T05:30:50Z"}, "message": "Display async fn in rustdoc.", "tree": {"sha": "5da55c723fc914bfdf722daf1996c7ee5f2f7de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5da55c723fc914bfdf722daf1996c7ee5f2f7de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/589446e19cbf7a2c7eddf80b490992d31134015c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/589446e19cbf7a2c7eddf80b490992d31134015c", "html_url": "https://github.com/rust-lang/rust/commit/589446e19cbf7a2c7eddf80b490992d31134015c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/589446e19cbf7a2c7eddf80b490992d31134015c/comments", "author": null, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ff7d091a07706b87c131bf3efc226993916f88", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ff7d091a07706b87c131bf3efc226993916f88", "html_url": "https://github.com/rust-lang/rust/commit/18ff7d091a07706b87c131bf3efc226993916f88"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "2377354b85f6bf587e41d17a2cab2ea8db90afa4", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/589446e19cbf7a2c7eddf80b490992d31134015c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589446e19cbf7a2c7eddf80b490992d31134015c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=589446e19cbf7a2c7eddf80b490992d31134015c", "patch": "@@ -39,6 +39,10 @@ pub struct UnsafetySpace(pub hir::Unsafety);\n /// with a space after it.\n #[derive(Copy, Clone)]\n pub struct ConstnessSpace(pub hir::Constness);\n+/// Similarly to VisSpace, this structure is used to render a function asyncness\n+/// with a space after it.\n+#[derive(Copy, Clone)]\n+pub struct AsyncSpace(pub hir::IsAsync);\n /// Similar to VisSpace, but used for mutability\n #[derive(Copy, Clone)]\n pub struct MutableSpace(pub clean::Mutability);\n@@ -962,6 +966,15 @@ impl fmt::Display for ConstnessSpace {\n     }\n }\n \n+impl fmt::Display for AsyncSpace {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {\n+            hir::IsAsync::Async => write!(f, \"async \"),\n+            hir::IsAsync::NotAsync => Ok(()),\n+        }\n+    }\n+}\n+\n impl fmt::Display for clean::Import {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "5989694116cd0553da08cd0e8ab0c238d01d492d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/589446e19cbf7a2c7eddf80b490992d31134015c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589446e19cbf7a2c7eddf80b490992d31134015c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=589446e19cbf7a2c7eddf80b490992d31134015c", "patch": "@@ -67,7 +67,7 @@ use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n-use html::format::{ConstnessSpace};\n+use html::format::{AsyncSpace, ConstnessSpace};\n use html::format::{GenericBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n@@ -2574,19 +2574,21 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    let name_len = format!(\"{}{}{}{:#}fn {}{:#}\",\n+    let name_len = format!(\"{}{}{}{}{:#}fn {}{:#}\",\n                            VisSpace(&it.visibility),\n                            ConstnessSpace(f.header.constness),\n+                           AsyncSpace(f.header.asyncness),\n                            UnsafetySpace(f.header.unsafety),\n                            AbiSpace(f.header.abi),\n                            it.name.as_ref().unwrap(),\n                            f.generics).len();\n     write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n     render_attributes(w, it)?;\n     write!(w,\n-           \"{vis}{constness}{unsafety}{abi}fn {name}{generics}{decl}{where_clause}</pre>\",\n+           \"{vis}{constness}{asyncness}{unsafety}{abi}fn {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(&it.visibility),\n            constness = ConstnessSpace(f.header.constness),\n+           asyncness = AsyncSpace(f.header.asyncness),\n            unsafety = UnsafetySpace(f.header.unsafety),\n            abi = AbiSpace(f.header.abi),\n            name = it.name.as_ref().unwrap(),"}]}