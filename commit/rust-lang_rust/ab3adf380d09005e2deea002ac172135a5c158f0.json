{"sha": "ab3adf380d09005e2deea002ac172135a5c158f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiM2FkZjM4MGQwOTAwNWUyZGVlYTAwMmFjMTcyMTM1YTVjMTU4ZjA=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-07-10T18:49:05Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-07-11T18:14:56Z"}, "message": "Replace unsafe_destructor_blind_to_params with may_dangle", "tree": {"sha": "22442efb6af18eea7ea48cf69cda5b0941aa8d12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22442efb6af18eea7ea48cf69cda5b0941aa8d12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3adf380d09005e2deea002ac172135a5c158f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3adf380d09005e2deea002ac172135a5c158f0", "html_url": "https://github.com/rust-lang/rust/commit/ab3adf380d09005e2deea002ac172135a5c158f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3adf380d09005e2deea002ac172135a5c158f0/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb6b4a5ed1cd377c5cfd97721ad12f52e63dd41", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb6b4a5ed1cd377c5cfd97721ad12f52e63dd41", "html_url": "https://github.com/rust-lang/rust/commit/4bb6b4a5ed1cd377c5cfd97721ad12f52e63dd41"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "555eefeb3a1f8722720151ae3eaf55f6fc498fae", "filename": "src/test/run-pass/issues/issue-24805-dropck-itemless.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24805-dropck-itemless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24805-dropck-itemless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24805-dropck-itemless.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![allow(deprecated)]\n \n // Check that item-less traits do not cause dropck to inject extra\n // region constraints.\n \n #![allow(non_camel_case_types)]\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n \n trait UserDefined { }\n \n@@ -20,9 +19,8 @@ impl<'a, T> UserDefined for &'a T { }\n //   ```\n macro_rules! impl_drop {\n     ($Bound:ident, $Id:ident) => {\n-        struct $Id<T:$Bound>(T);\n-        impl <T:$Bound> Drop for $Id<T> {\n-            #[unsafe_destructor_blind_to_params]\n+        struct $Id<T: $Bound>(T);\n+        unsafe impl <#[may_dangle] T: $Bound> Drop for $Id<T> {\n             fn drop(&mut self) { }\n         }\n     }"}, {"sha": "90cf2cddcf02a940f9a40d8b8aaa1c5ee33dd7e1", "filename": "src/test/run-pass/issues/issue-28498-ugeh-ex1.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-ex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-ex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-ex1.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,21 +1,19 @@\n // run-pass\n-#![allow(deprecated)] // FIXME: switch to `#[may_dangle]` below.\n \n // Example taken from RFC 1238 text\n \n // https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\n //     #example-of-the-unguarded-escape-hatch\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n use std::cell::Cell;\n \n struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n \n struct Foo<T> { data: Vec<T> }\n \n-impl<T> Drop for Foo<T> {\n-    // Below is the UGEH attribute\n-    #[unsafe_destructor_blind_to_params]\n+// Below is the UGEH attribute\n+unsafe impl<#[may_dangle] T> Drop for Foo<T> {\n     fn drop(&mut self) { }\n }\n "}, {"sha": "0c94ee53d35104759a7d3736047930d8f5dc6ce1", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-lifetime-param.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![allow(deprecated)] // FIXME: switch to `#[may_dangle]` below.\n \n // Demonstrate the use of the unguarded escape hatch with a lifetime param\n // to assert that destructor will not access any dead data.\n //\n // Compare with compile-fail/issue28498-reject-lifetime-param.rs\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n \n #[derive(Debug)]\n struct ScribbleOnDrop(String);\n@@ -19,10 +18,9 @@ impl Drop for ScribbleOnDrop {\n \n struct Foo<'a>(u32, &'a ScribbleOnDrop);\n \n-impl<'a> Drop for Foo<'a> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] 'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is sound,\n+        // Use of `may_dangle` is sound,\n         // because destructor never accesses `self.1`.\n         println!(\"Dropping Foo({}, _)\", self.0);\n     }"}, {"sha": "bf051b950e545a610f0742588f6ca983670c4114", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-passed-to-fn.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![allow(deprecated)] // FIXME: switch to `#[may_dangle]` below.\n \n // Demonstrate the use of the unguarded escape hatch with a type param in negative position\n // to assert that destructor will not access any dead data.\n@@ -11,7 +10,7 @@\n //\n // Compare with run-pass/issue28498-ugeh-with-passed-to-fn.rs\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n \n #[derive(Debug)]\n struct ScribbleOnDrop(String);\n@@ -24,10 +23,9 @@ impl Drop for ScribbleOnDrop {\n \n struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n \n-impl<T> Drop for Foo<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is sound,\n+        // Use of `may_dangle` is sound,\n         // because destructor never passes a `self.1` to the callback\n         // (in `self.2`) despite having it available.\n         println!(\"Dropping Foo({}, _)\", self.0);"}, {"sha": "b6f55350a6ce062ccb7c8342c5725394c655875e", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-trait-bound.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n-#![allow(deprecated)] // FIXME: switch to `#[may_dangle]` below.\n \n // Demonstrate the use of the unguarded escape hatch with a trait bound\n // to assert that destructor will not access any dead data.\n //\n // Compare with compile-fail/issue28498-reject-trait-bound.rs\n \n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n \n use std::fmt;\n \n@@ -19,12 +18,11 @@ impl Drop for ScribbleOnDrop {\n     }\n }\n \n-struct Foo<T:fmt::Debug>(u32, T);\n+struct Foo<T: fmt::Debug>(u32, T);\n \n-impl<T:fmt::Debug> Drop for Foo<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T: fmt::Debug> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is sound,\n+        // Use of `may_dangle` is sound,\n         // because destructor never accesses the `Debug::fmt` method\n         // of `T`, despite having it available.\n         println!(\"Dropping Foo({}, _)\", self.0);"}, {"sha": "5876d4240c082987709056f1c8848879f3969181", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -16,7 +16,7 @@ struct Foo<'a>(u32, &'a ScribbleOnDrop);\n \n impl<'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is unsound,\n+        // Use of `may_dangle` is unsound,\n         // because destructor accesses borrowed data in `self.1`\n         // and we must force that to strictly outlive `self`.\n         println!(\"Dropping Foo({}, {:?})\", self.0, self.1);"}, {"sha": "76d84055434b7aff65a1db23d34800ebe4971d17", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -16,7 +16,7 @@ struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n \n impl<T> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is unsound,\n+        // Use of `may_dangle` is unsound,\n         // because we pass `T` to the callback in `self.2`\n         // below, and thus potentially read from borrowed data.\n         println!(\"Dropping Foo({}, {})\", self.0, (self.2)(&self.1));"}, {"sha": "77a443286cb3805ebedfb90a4905c2a2b82411c2", "filename": "src/test/ui/span/issue28498-reject-trait-bound.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -14,11 +14,11 @@ impl Drop for ScribbleOnDrop {\n     }\n }\n \n-struct Foo<T:fmt::Debug>(u32, T);\n+struct Foo<T: fmt::Debug>(u32, T);\n \n-impl<T:fmt::Debug> Drop for Foo<T> {\n+impl<T: fmt::Debug> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `unsafe_destructor_blind_to_params` is unsound,\n+        // Use of `may_dangle` is unsound,\n         // because we access `T` fmt method when we pass `self.1`\n         // below, and thus potentially read from borrowed data.\n         println!(\"Dropping Foo({}, {:?})\", self.0, self.1);"}]}