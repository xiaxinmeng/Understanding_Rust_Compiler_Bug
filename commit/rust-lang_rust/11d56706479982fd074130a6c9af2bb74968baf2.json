{"sha": "11d56706479982fd074130a6c9af2bb74968baf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDU2NzA2NDc5OTgyZmQwNzQxMzBhNmM5YWYyYmI3NDk2OGJhZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-09T21:21:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-09T21:21:38Z"}, "message": "auto merge of #9742 : alexcrichton/rust/issue-9739, r=brson\n\nThis changes an `assert_once_ever!` assertion to just a plain old assertion\r\naround an atomic boolean to ensure that one particular runtime doesn't attempt\r\nto exit twice.\r\n\r\nCloses #9739", "tree": {"sha": "10cf4f851abeed7b2114aee01ace5b5e22093119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10cf4f851abeed7b2114aee01ace5b5e22093119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d56706479982fd074130a6c9af2bb74968baf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d56706479982fd074130a6c9af2bb74968baf2", "html_url": "https://github.com/rust-lang/rust/commit/11d56706479982fd074130a6c9af2bb74968baf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d56706479982fd074130a6c9af2bb74968baf2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62812f1e38f438dfc666cd9d164b4377063f8794", "url": "https://api.github.com/repos/rust-lang/rust/commits/62812f1e38f438dfc666cd9d164b4377063f8794", "html_url": "https://github.com/rust-lang/rust/commit/62812f1e38f438dfc666cd9d164b4377063f8794"}, {"sha": "8fcf62b6385a5be4ef3a8e1bdb0f01ce907abd26", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fcf62b6385a5be4ef3a8e1bdb0f01ce907abd26", "html_url": "https://github.com/rust-lang/rust/commit/8fcf62b6385a5be4ef3a8e1bdb0f01ce907abd26"}], "stats": {"total": 74, "additions": 34, "deletions": 40}, "files": [{"sha": "2ef25548535dc4b8444efcb3f742706aa5309b8c", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11d56706479982fd074130a6c9af2bb74968baf2/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d56706479982fd074130a6c9af2bb74968baf2/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=11d56706479982fd074130a6c9af2bb74968baf2", "patch": "@@ -42,41 +42,3 @@ macro_rules! rtabort(\n         ::rt::util::abort(format!($($msg)*));\n     } )\n )\n-\n-macro_rules! assert_once_ever(\n-    ($($msg:tt)+) => ( {\n-        // FIXME(#8472) extra function should not be needed to hide unsafe\n-        fn assert_once_ever() {\n-            unsafe {\n-                static mut already_happened: int = 0;\n-                // Double-check lock to avoid a swap in the common case.\n-                if already_happened != 0 ||\n-                    ::unstable::intrinsics::atomic_xchg_relaxed(&mut already_happened, 1) != 0 {\n-                        fail2!(\"assert_once_ever happened twice: {}\",\n-                               format!($($msg)+));\n-                }\n-            }\n-        }\n-        assert_once_ever();\n-    } )\n-)\n-\n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn test_assert_once_ever_ok() {\n-        assert_once_ever!(\"help i'm stuck in an\");\n-        assert_once_ever!(\"assertion error message\");\n-    }\n-\n-    #[test] #[ignore(cfg(windows))] #[should_fail]\n-    fn test_assert_once_ever_fail() {\n-        use task;\n-\n-        fn f() { assert_once_ever!(\"if you're seeing this... good!\") }\n-\n-        // linked & watched, naturally\n-        task::spawn(f);\n-        task::spawn(f);\n-    }\n-}"}, {"sha": "2db973b602ee87243c662d5f7cf6acf2ad53b2cd", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11d56706479982fd074130a6c9af2bb74968baf2/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d56706479982fd074130a6c9af2bb74968baf2/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=11d56706479982fd074130a6c9af2bb74968baf2", "patch": "@@ -68,7 +68,7 @@ use rt::sched::{Scheduler, Shutdown};\n use rt::sleeper_list::SleeperList;\n use rt::task::{Task, SchedTask, GreenTask, Sched};\n use rt::uv::uvio::UvEventLoop;\n-use unstable::atomics::{AtomicInt, SeqCst};\n+use unstable::atomics::{AtomicInt, AtomicBool, SeqCst};\n use unstable::sync::UnsafeArc;\n use vec;\n use vec::{OwnedVector, MutableVector, ImmutableVector};\n@@ -311,11 +311,17 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n     let exit_code = UnsafeArc::new(AtomicInt::new(0));\n     let exit_code_clone = exit_code.clone();\n \n+    // Used to sanity check that the runtime only exits once\n+    let exited_already = UnsafeArc::new(AtomicBool::new(false));\n+\n     // When the main task exits, after all the tasks in the main\n     // task tree, shut down the schedulers and set the exit code.\n     let handles = Cell::new(handles);\n     let on_exit: ~fn(bool) = |exit_success| {\n-        assert_once_ever!(\"last task exiting\");\n+        unsafe {\n+            assert!(!(*exited_already.get()).swap(true, SeqCst),\n+                    \"the runtime already exited\");\n+        }\n \n         let mut handles = handles.take();\n         for handle in handles.mut_iter() {"}, {"sha": "0bb02ed5498b77e3cd8cfcc17147d9412c10e671", "filename": "src/test/run-pass/rt-run-twice.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11d56706479982fd074130a6c9af2bb74968baf2/src%2Ftest%2Frun-pass%2Frt-run-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d56706479982fd074130a6c9af2bb74968baf2/src%2Ftest%2Frun-pass%2Frt-run-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-run-twice.rs?ref=11d56706479982fd074130a6c9af2bb74968baf2", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast windows uses a different test runner\n+\n+use std::rt;\n+\n+#[start]\n+fn start(argc: int, argv: **u8) -> int {\n+    do rt::start(argc, argv) {\n+        println(\"First invocation\");\n+    };\n+\n+    do rt::start(argc, argv) {\n+        println(\"Second invocation\");\n+    };\n+\n+    0\n+}"}]}