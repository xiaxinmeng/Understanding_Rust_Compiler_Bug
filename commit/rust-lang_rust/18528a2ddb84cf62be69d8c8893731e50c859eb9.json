{"sha": "18528a2ddb84cf62be69d8c8893731e50c859eb9", "node_id": "C_kwDOAAsO6NoAKDE4NTI4YTJkZGI4NGNmNjJiZTY5ZDhjODg5MzczMWU1MGM4NTllYjk", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-03-04T09:35:00Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-03-04T09:35:56Z"}, "message": "Use if let instead of manual match", "tree": {"sha": "87ee69c2ed4d5b284e9e0c8a8191f59a8c296da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ee69c2ed4d5b284e9e0c8a8191f59a8c296da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18528a2ddb84cf62be69d8c8893731e50c859eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18528a2ddb84cf62be69d8c8893731e50c859eb9", "html_url": "https://github.com/rust-lang/rust/commit/18528a2ddb84cf62be69d8c8893731e50c859eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18528a2ddb84cf62be69d8c8893731e50c859eb9/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f6d33b775eddfc0128c04083bbf3beea360114", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f6d33b775eddfc0128c04083bbf3beea360114", "html_url": "https://github.com/rust-lang/rust/commit/65f6d33b775eddfc0128c04083bbf3beea360114"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "c0e7cd0b1f58016e0968015174f04ac22992a92c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18528a2ddb84cf62be69d8c8893731e50c859eb9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18528a2ddb84cf62be69d8c8893731e50c859eb9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=18528a2ddb84cf62be69d8c8893731e50c859eb9", "patch": "@@ -1506,11 +1506,11 @@ impl Type {\n     }\n \n     crate fn projection(&self) -> Option<(&Type, DefId, PathSegment)> {\n-        let (self_, trait_, assoc) = match self {\n-            QPath { self_type, trait_, assoc, .. } => (self_type, trait_, assoc),\n-            _ => return None,\n-        };\n-        Some((&self_, trait_.def_id(), *assoc.clone()))\n+        if let QPath { self_type, trait_, assoc, .. } = self {\n+            Some((&self_type, trait_.def_id(), *assoc.clone()))\n+        } else {\n+            None\n+        }\n     }\n \n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {"}]}