{"sha": "d9bb86ad7dfd17543e6e1c9ef184337f828b1027", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YmI4NmFkN2RmZDE3NTQzZTZlMWM5ZWYxODQzMzdmODI4YjEwMjc=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-09-02T18:38:08Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-09-02T20:14:37Z"}, "message": "Collect locals in context", "tree": {"sha": "c177524f22b19839d8e481a3d26b863740c23b7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c177524f22b19839d8e481a3d26b863740c23b7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9bb86ad7dfd17543e6e1c9ef184337f828b1027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bb86ad7dfd17543e6e1c9ef184337f828b1027", "html_url": "https://github.com/rust-lang/rust/commit/d9bb86ad7dfd17543e6e1c9ef184337f828b1027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9bb86ad7dfd17543e6e1c9ef184337f828b1027/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04fc937700105951442a9b6fa30591fb48a1e879", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fc937700105951442a9b6fa30591fb48a1e879", "html_url": "https://github.com/rust-lang/rust/commit/04fc937700105951442a9b6fa30591fb48a1e879"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "3ef1b97cfa580b837b1831d4b2491be423f5e88a", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb86ad7dfd17543e6e1c9ef184337f828b1027/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb86ad7dfd17543e6e1c9ef184337f828b1027/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=d9bb86ad7dfd17543e6e1c9ef184337f828b1027", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use base_db::SourceDatabase;\n-use hir::{Semantics, SemanticsScope, Type};\n+use hir::{Local, ScopeDef, Semantics, SemanticsScope, Type};\n use ide_db::RootDatabase;\n use syntax::{\n     algo::{find_covering_element, find_node_at_offset},\n@@ -90,6 +90,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) impl_as_prev_sibling: bool,\n     pub(super) is_match_arm: bool,\n     pub(super) has_item_list_or_source_file_parent: bool,\n+    pub(super) locals: Vec<(String, Local)>,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -118,6 +119,12 @@ impl<'a> CompletionContext<'a> {\n             original_file.syntax().token_at_offset(position.offset).left_biased()?;\n         let token = sema.descend_into_macros(original_token.clone());\n         let scope = sema.scope_at_offset(&token.parent(), position.offset);\n+        let mut locals = vec![];\n+        scope.process_all_names(&mut |name, scope| {\n+            if let ScopeDef::Local(local) = scope {\n+                locals.push((name.to_string(), local));\n+            }\n+        });\n         let mut ctx = CompletionContext {\n             sema,\n             scope,\n@@ -165,6 +172,7 @@ impl<'a> CompletionContext<'a> {\n             if_is_prev: false,\n             is_match_arm: false,\n             has_item_list_or_source_file_parent: false,\n+            locals,\n         };\n \n         let mut original_file = original_file.syntax().clone();"}, {"sha": "059fdfdc9245691da2ec0fed1a4c78c185b5aea2", "filename": "crates/ide/src/completion/presentation.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb86ad7dfd17543e6e1c9ef184337f828b1027/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb86ad7dfd17543e6e1c9ef184337f828b1027/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=d9bb86ad7dfd17543e6e1c9ef184337f828b1027", "patch": "@@ -192,20 +192,15 @@ impl Completions {\n         local_name: Option<String>,\n     ) {\n         fn add_arg(arg: &str, ty: &Type, ctx: &CompletionContext) -> String {\n-            let mut prefix = \"\";\n             if let Some(derefed_ty) = ty.remove_ref() {\n-                ctx.scope.process_all_names(&mut |name, scope| {\n-                    if prefix != \"\" {\n-                        return;\n+                for (name, local) in ctx.locals.iter() {\n+                    if name == arg && local.can_unify(derefed_ty.clone(), ctx.db) {\n+                        return (if ty.is_mutable_reference() { \"&mut \" } else { \"&\" }).to_string()\n+                            + &arg.to_string();\n                     }\n-                    if let ScopeDef::Local(local) = scope {\n-                        if name.to_string() == arg && local.can_unify(derefed_ty.clone(), ctx.db) {\n-                            prefix = if ty.is_mutable_reference() { \"&mut \" } else { \"&\" };\n-                        }\n-                    }\n-                });\n+                }\n             }\n-            prefix.to_string() + arg\n+            arg.to_string()\n         };\n         let name = local_name.unwrap_or_else(|| func.name(ctx.db).to_string());\n         let ast_node = func.source(ctx.db).value;"}]}