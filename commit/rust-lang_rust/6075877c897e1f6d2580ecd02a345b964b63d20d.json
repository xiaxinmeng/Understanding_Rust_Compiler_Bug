{"sha": "6075877c897e1f6d2580ecd02a345b964b63d20d", "node_id": "C_kwDOAAsO6NoAKDYwNzU4NzdjODk3ZTFmNmQyNTgwZWNkMDJhMzQ1Yjk2NGI2M2QyMGQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T20:44:18Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T20:44:18Z"}, "message": "Pass ConstraintCategory thorough a few more places", "tree": {"sha": "9d198971bf175140e8a01b01dbe617c0540aa8bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d198971bf175140e8a01b01dbe617c0540aa8bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6075877c897e1f6d2580ecd02a345b964b63d20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6075877c897e1f6d2580ecd02a345b964b63d20d", "html_url": "https://github.com/rust-lang/rust/commit/6075877c897e1f6d2580ecd02a345b964b63d20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6075877c897e1f6d2580ecd02a345b964b63d20d/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a46376e247e947f6e7db5ac6da5da4d88249942a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a46376e247e947f6e7db5ac6da5da4d88249942a", "html_url": "https://github.com/rust-lang/rust/commit/a46376e247e947f6e7db5ac6da5da4d88249942a"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "ad2a1c780fb6ca070f9f0d0c685ce2070ac38099", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6075877c897e1f6d2580ecd02a345b964b63d20d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6075877c897e1f6d2580ecd02a345b964b63d20d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=6075877c897e1f6d2580ecd02a345b964b63d20d", "patch": "@@ -103,13 +103,13 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                 bug!(\"query_constraint {:?} contained bound vars\", query_constraint,);\n             });\n \n-        let _constraint_category = query_constraint.1;\n+        let constraint_category = query_constraint.1;\n \n         match k1.unpack() {\n             GenericArgKind::Lifetime(r1) => {\n                 let r1_vid = self.to_region_vid(r1);\n                 let r2_vid = self.to_region_vid(r2);\n-                self.add_outlives(r1_vid, r2_vid);\n+                self.add_outlives(r1_vid, r2_vid, constraint_category);\n             }\n \n             GenericArgKind::Type(t1) => {\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                     Some(implicit_region_bound),\n                     param_env,\n                 )\n-                .type_must_outlive(origin, t1, r2);\n+                .type_must_outlive(origin, t1, r2, constraint_category);\n             }\n \n             GenericArgKind::Const(_) => {\n@@ -171,10 +171,19 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         }\n     }\n \n-    fn add_outlives(&mut self, sup: ty::RegionVid, sub: ty::RegionVid) {\n+    fn add_outlives(\n+        &mut self,\n+        sup: ty::RegionVid,\n+        sub: ty::RegionVid,\n+        category: ConstraintCategory<'tcx>,\n+    ) {\n+        let category = match self.category {\n+            ConstraintCategory::Boring | ConstraintCategory::BoringNoLocation => category,\n+            _ => self.category,\n+        };\n         self.constraints.outlives_constraints.push(OutlivesConstraint {\n             locations: self.locations,\n-            category: self.category,\n+            category,\n             span: self.span,\n             sub,\n             sup,\n@@ -194,10 +203,11 @@ impl<'a, 'b, 'tcx> TypeOutlivesDelegate<'tcx> for &'a mut ConstraintConversion<'\n         _origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n+        constraint_category: ConstraintCategory<'tcx>,\n     ) {\n         let b = self.to_region_vid(b);\n         let a = self.to_region_vid(a);\n-        self.add_outlives(b, a);\n+        self.add_outlives(b, a, constraint_category);\n     }\n \n     fn push_verify("}, {"sha": "2d60b68f05febc4888cdbe244c0b03f1fe50d796", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6075877c897e1f6d2580ecd02a345b964b63d20d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6075877c897e1f6d2580ecd02a345b964b63d20d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=6075877c897e1f6d2580ecd02a345b964b63d20d", "patch": "@@ -69,6 +69,7 @@ use crate::infer::{\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_hir::def_id::LocalDefId;\n+use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeVisitable};\n use smallvec::smallvec;\n@@ -163,7 +164,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n             let outlives =\n                 &mut TypeOutlives::new(self, self.tcx, &region_bound_pairs, None, param_env);\n-            outlives.type_must_outlive(origin, sup_type, sub_region);\n+            let category = ConstraintCategory::BoringNoLocation;\n+            outlives.type_must_outlive(origin, sup_type, sub_region, category);\n         }\n     }\n \n@@ -207,6 +209,7 @@ pub trait TypeOutlivesDelegate<'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n+        constraint_category: ConstraintCategory<'tcx>,\n     );\n \n     fn push_verify(\n@@ -255,25 +258,27 @@ where\n         origin: infer::SubregionOrigin<'tcx>,\n         ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         assert!(!ty.has_escaping_bound_vars());\n \n         let mut components = smallvec![];\n         push_outlives_components(self.tcx, ty, &mut components);\n-        self.components_must_outlive(origin, &components, region);\n+        self.components_must_outlive(origin, &components, region, category);\n     }\n \n     fn components_must_outlive(\n         &mut self,\n         origin: infer::SubregionOrigin<'tcx>,\n         components: &[Component<'tcx>],\n         region: ty::Region<'tcx>,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         for component in components.iter() {\n             let origin = origin.clone();\n             match component {\n                 Component::Region(region1) => {\n-                    self.delegate.push_sub_region_constraint(origin, region, *region1);\n+                    self.delegate.push_sub_region_constraint(origin, region, *region1, category);\n                 }\n                 Component::Param(param_ty) => {\n                     self.param_ty_must_outlive(origin, region, *param_ty);\n@@ -282,7 +287,7 @@ where\n                     self.projection_must_outlive(origin, region, *projection_ty);\n                 }\n                 Component::EscapingProjection(subcomponents) => {\n-                    self.components_must_outlive(origin, &subcomponents, region);\n+                    self.components_must_outlive(origin, &subcomponents, region, category);\n                 }\n                 Component::UnresolvedInferenceVariable(v) => {\n                     // ignore this, we presume it will yield an error\n@@ -389,13 +394,19 @@ where\n         if approx_env_bounds.is_empty() && trait_bounds.is_empty() && needs_infer {\n             debug!(\"projection_must_outlive: no declared bounds\");\n \n+            let constraint = ConstraintCategory::BoringNoLocation;\n             for k in projection_ty.substs {\n                 match k.unpack() {\n                     GenericArgKind::Lifetime(lt) => {\n-                        self.delegate.push_sub_region_constraint(origin.clone(), region, lt);\n+                        self.delegate.push_sub_region_constraint(\n+                            origin.clone(),\n+                            region,\n+                            lt,\n+                            constraint,\n+                        );\n                     }\n                     GenericArgKind::Type(ty) => {\n-                        self.type_must_outlive(origin.clone(), ty, region);\n+                        self.type_must_outlive(origin.clone(), ty, region, constraint);\n                     }\n                     GenericArgKind::Const(_) => {\n                         // Const parameters don't impose constraints.\n@@ -433,7 +444,8 @@ where\n             let unique_bound = trait_bounds[0];\n             debug!(\"projection_must_outlive: unique trait bound = {:?}\", unique_bound);\n             debug!(\"projection_must_outlive: unique declared bound appears in trait ref\");\n-            self.delegate.push_sub_region_constraint(origin, region, unique_bound);\n+            let category = ConstraintCategory::BoringNoLocation;\n+            self.delegate.push_sub_region_constraint(origin, region, unique_bound, category);\n             return;\n         }\n \n@@ -455,6 +467,7 @@ impl<'cx, 'tcx> TypeOutlivesDelegate<'tcx> for &'cx InferCtxt<'cx, 'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n+        _constraint_category: ConstraintCategory<'tcx>,\n     ) {\n         self.sub_regions(origin, a, b)\n     }"}, {"sha": "27b3da8ab3dfa7af14518069da365100021c6b7a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6075877c897e1f6d2580ecd02a345b964b63d20d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6075877c897e1f6d2580ecd02a345b964b63d20d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=6075877c897e1f6d2580ecd02a345b964b63d20d", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::ItemKind;\n use rustc_infer::infer::outlives::env::{OutlivesEnvironment, RegionBoundPairs};\n use rustc_infer::infer::outlives::obligations::TypeOutlives;\n use rustc_infer::infer::{self, InferCtxt, TyCtxtInferExt};\n+use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n@@ -663,7 +664,7 @@ fn ty_known_to_outlive<'tcx>(\n     resolve_regions_with_wf_tys(tcx, id, param_env, &wf_tys, |infcx, region_bound_pairs| {\n         let origin = infer::RelateParamBound(DUMMY_SP, ty, None);\n         let outlives = &mut TypeOutlives::new(infcx, tcx, region_bound_pairs, None, param_env);\n-        outlives.type_must_outlive(origin, ty, region);\n+        outlives.type_must_outlive(origin, ty, region, ConstraintCategory::BoringNoLocation);\n     })\n }\n \n@@ -681,7 +682,12 @@ fn region_known_to_outlive<'tcx>(\n         use rustc_infer::infer::outlives::obligations::TypeOutlivesDelegate;\n         let origin = infer::RelateRegionParamBound(DUMMY_SP);\n         // `region_a: region_b` -> `region_b <= region_a`\n-        infcx.push_sub_region_constraint(origin, region_b, region_a);\n+        infcx.push_sub_region_constraint(\n+            origin,\n+            region_b,\n+            region_a,\n+            ConstraintCategory::BoringNoLocation,\n+        );\n     })\n }\n "}]}