{"sha": "d2b1212558b25e69eb867402792d5b5b5a07ad19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjEyMTI1NThiMjVlNjllYjg2NzQwMjc5MmQ1YjViNWEwN2FkMTk=", "commit": {"author": {"name": "Simon Heath", "email": "icefoxen@gmail.com", "date": "2019-01-31T00:42:37Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-27T15:02:25Z"}, "message": "Started expanding docs for `TryFrom` and `TryInto`.\n\nThe examples are still lacking for now, both for module docs\nand for methods/impl's.", "tree": {"sha": "241a23ce9e460d1c13b2850bba09a380ce3bd626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/241a23ce9e460d1c13b2850bba09a380ce3bd626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b1212558b25e69eb867402792d5b5b5a07ad19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b1212558b25e69eb867402792d5b5b5a07ad19", "html_url": "https://github.com/rust-lang/rust/commit/d2b1212558b25e69eb867402792d5b5b5a07ad19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b1212558b25e69eb867402792d5b5b5a07ad19/comments", "author": {"login": "icefoxen", "id": 1335133, "node_id": "MDQ6VXNlcjEzMzUxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1335133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icefoxen", "html_url": "https://github.com/icefoxen", "followers_url": "https://api.github.com/users/icefoxen/followers", "following_url": "https://api.github.com/users/icefoxen/following{/other_user}", "gists_url": "https://api.github.com/users/icefoxen/gists{/gist_id}", "starred_url": "https://api.github.com/users/icefoxen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icefoxen/subscriptions", "organizations_url": "https://api.github.com/users/icefoxen/orgs", "repos_url": "https://api.github.com/users/icefoxen/repos", "events_url": "https://api.github.com/users/icefoxen/events{/privacy}", "received_events_url": "https://api.github.com/users/icefoxen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b5f924eb9bfe7e28984fb3ae43f65ebe2bdaa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b5f924eb9bfe7e28984fb3ae43f65ebe2bdaa2", "html_url": "https://github.com/rust-lang/rust/commit/f5b5f924eb9bfe7e28984fb3ae43f65ebe2bdaa2"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "a3f1a3201f3180f63b4fdbc37287a1bad3e07134", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d2b1212558b25e69eb867402792d5b5b5a07ad19/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b1212558b25e69eb867402792d5b5b5a07ad19/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=d2b1212558b25e69eb867402792d5b5b5a07ad19", "patch": "@@ -366,6 +366,11 @@ pub trait From<T>: Sized {\n /// provides an equivalent `TryInto` implementation for free, thanks to a\n /// blanket implementation in the standard library. For more information on this,\n /// see the documentation for [`Into`].\n+/// \n+/// # Implementing `TryInto`\n+/// \n+/// This suffers the same restrictions and reasoning as implementing\n+/// [`Into`], see there for details.\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n@@ -380,7 +385,44 @@ pub trait TryInto<T>: Sized {\n     fn try_into(self) -> Result<T, Self::Error>;\n }\n \n-/// Attempt to construct `Self` via a conversion.\n+/// Simple and safe type conversions that may fail in a controlled\n+/// way under some circumstances. It is the reciprocal of [`TryInto`].\n+/// \n+/// This is useful when you are doing a type conversion that may \n+/// trivially succeed but may also need special handling.\n+/// For example, there is no way to convert an `i64` into an `i32`\n+/// using the [`From`] trait, because an `i64` may contain a value\n+/// that an `i32` cannot represent and so the conversion would lose data.\n+/// This might be handled by truncating the `i64` to an `i32` (essentially\n+/// giving the `i64`'s value modulo `i32::MAX`) or by simply returning \n+/// `i32::MAX`, or by some other method.  The `From` trait is intended \n+/// for lossless conversions, so the `TryFrom` trait informs the \n+/// programmer when a type conversion could go bad and lets them\n+/// decide how to handle it.\n+/// \n+/// # Generic Implementations\n+///\n+/// - `TryFrom<T> for U` implies [`TryInto<U>`]` for T`\n+/// - [`try_from`] is reflexive, which means that `TryFrom<T> for T` \n+/// is implemented\n+/// \n+/// # Examples\n+///\n+/// As described, [`i32`] implements `TryFrom<i64>`:\n+///\n+/// ```\n+/// let big_number = 1_000_000_000_000i64;\n+/// // Silently truncates `big_number`, requires detecting\n+/// // and handling the truncation after the fact.\n+/// let smaller_number = big_number as i32;\n+/// assert_eq!(smaller_number, -727379968);\n+/// \n+/// let try_smaller_number = i32::try_from(big_number);\n+/// assert!(try_smaller_number.is_err());\n+/// \n+/// let try_successful_smaller_number = i32::try_from(3);\n+/// assert!(try_successful_smaller_number.is_ok());\n+/// ```\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error."}]}