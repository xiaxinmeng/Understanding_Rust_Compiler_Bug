{"sha": "27213b025446497b37a7071fc23114fb1d5f171c", "node_id": "C_kwDOAAsO6NoAKDI3MjEzYjAyNTQ0NjQ5N2IzN2E3MDcxZmMyMzExNGZiMWQ1ZjE3MWM", "commit": {"author": {"name": "Adam Gemmell", "email": "adam.gemmell@arm.com", "date": "2021-09-06T15:44:19Z"}, "committer": {"name": "Adam Gemmell", "email": "adam.gemmell@arm.com", "date": "2021-09-24T17:00:57Z"}, "message": "Disable some tests for platforms without registers.\n\nUpdate new tests to run on aarch64 platforms.", "tree": {"sha": "0804ff9744d4eb53a0335c86ea1ca6802d90b32a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0804ff9744d4eb53a0335c86ea1ca6802d90b32a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27213b025446497b37a7071fc23114fb1d5f171c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27213b025446497b37a7071fc23114fb1d5f171c", "html_url": "https://github.com/rust-lang/rust/commit/27213b025446497b37a7071fc23114fb1d5f171c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27213b025446497b37a7071fc23114fb1d5f171c/comments", "author": {"login": "adamgemmell", "id": 3757567, "node_id": "MDQ6VXNlcjM3NTc1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3757567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamgemmell", "html_url": "https://github.com/adamgemmell", "followers_url": "https://api.github.com/users/adamgemmell/followers", "following_url": "https://api.github.com/users/adamgemmell/following{/other_user}", "gists_url": "https://api.github.com/users/adamgemmell/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamgemmell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamgemmell/subscriptions", "organizations_url": "https://api.github.com/users/adamgemmell/orgs", "repos_url": "https://api.github.com/users/adamgemmell/repos", "events_url": "https://api.github.com/users/adamgemmell/events{/privacy}", "received_events_url": "https://api.github.com/users/adamgemmell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamgemmell", "id": 3757567, "node_id": "MDQ6VXNlcjM3NTc1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3757567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamgemmell", "html_url": "https://github.com/adamgemmell", "followers_url": "https://api.github.com/users/adamgemmell/followers", "following_url": "https://api.github.com/users/adamgemmell/following{/other_user}", "gists_url": "https://api.github.com/users/adamgemmell/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamgemmell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamgemmell/subscriptions", "organizations_url": "https://api.github.com/users/adamgemmell/orgs", "repos_url": "https://api.github.com/users/adamgemmell/repos", "events_url": "https://api.github.com/users/adamgemmell/events{/privacy}", "received_events_url": "https://api.github.com/users/adamgemmell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "html_url": "https://github.com/rust-lang/rust/commit/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3"}], "stats": {"total": 484, "additions": 296, "deletions": 188}, "files": [{"sha": "faa5e37b781ecffe1f8352304c112f472c1ce7b6", "filename": "src/test/ui/asm/aarch64/parse-error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -76,6 +76,12 @@ fn main() {\n         //~^ ERROR asm template must be a string literal\n         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n         //~^ ERROR asm template must be a string literal\n+        asm!(\"{}\", in(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n+        asm!(\"{}\", inout(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n+        asm!(\"{}\", inlateout(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n     }\n }\n "}, {"sha": "7b9fa90f70c25f0c33c6d84b3ef8c1d1acf1139e", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -214,162 +214,180 @@ LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:79:28\n+   |\n+LL |         asm!(\"{}\", in(reg) _);\n+   |                            ^\n+\n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:81:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) _);\n+   |                               ^\n+\n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:83:35\n+   |\n+LL |         asm!(\"{}\", inlateout(reg) _);\n+   |                                   ^\n+\n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:84:1\n+  --> $DIR/parse-error.rs:90:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:86:13\n+  --> $DIR/parse-error.rs:92:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:88:18\n+  --> $DIR/parse-error.rs:94:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:90:19\n+  --> $DIR/parse-error.rs:96:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:92:24\n+  --> $DIR/parse-error.rs:98:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:94:30\n+  --> $DIR/parse-error.rs:100:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:96:25\n+  --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:98:25\n+  --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:100:25\n+  --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:102:30\n+  --> $DIR/parse-error.rs:108:30\n    |\n LL | global_asm!(\"{}\", options(), const FOO);\n    |                   ---------  ^^^^^^^^^ argument\n    |                   |\n    |                   previous options\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:104:29\n+  --> $DIR/parse-error.rs:110:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected `)`, found `FOO`\n-  --> $DIR/parse-error.rs:106:33\n+  --> $DIR/parse-error.rs:112:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected `)`\n \n error: expected `)`, found `,`\n-  --> $DIR/parse-error.rs:108:32\n+  --> $DIR/parse-error.rs:114:32\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                ^ expected `)`\n \n error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:110:37\n+  --> $DIR/parse-error.rs:116:37\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ----------------  ^^^^^^^^^ argument\n    |                   |\n    |                   clobber_abi\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:110:19\n+  --> $DIR/parse-error.rs:116:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:113:28\n+  --> $DIR/parse-error.rs:119:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n    |                 ---------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 options\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:115:30\n+  --> $DIR/parse-error.rs:121:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                   ---------  ^^^^^^^^^^^^^^^^\n    |                   |\n    |                   options\n \n error: clobber_abi specified multiple times\n-  --> $DIR/parse-error.rs:117:35\n+  --> $DIR/parse-error.rs:123:35\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                 ----------------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 clobber_abi previously specified here\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:119:35\n+  --> $DIR/parse-error.rs:125:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:119:35\n+  --> $DIR/parse-error.rs:125:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n-  --> $DIR/parse-error.rs:122:28\n+  --> $DIR/parse-error.rs:128:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:124:30\n+  --> $DIR/parse-error.rs:130:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:126:13\n+  --> $DIR/parse-error.rs:132:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:128:20\n+  --> $DIR/parse-error.rs:134:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -439,6 +457,6 @@ LL |     let mut bar = 0;\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                                         ^^^ non-constant value\n \n-error: aborting due to 63 previous errors\n+error: aborting due to 66 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}, {"sha": "5b6453c42c6eb950e71d21853b01d3c7db5b8e27", "filename": "src/test/ui/asm/issue-87802.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fissue-87802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fissue-87802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-87802.rs?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,4 +1,7 @@\n-// only-x86_64\n+// needs-asm-support\n+// ignore-nvptx64\n+// ignore-spirv\n+// ignore-wasm32\n // Make sure rustc doesn't ICE on asm! when output type is !.\n \n #![feature(asm)]"}, {"sha": "de3e28fdd12289281101d64550b28171fd6c9f36", "filename": "src/test/ui/asm/issue-87802.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fissue-87802.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fissue-87802.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-87802.stderr?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,5 +1,5 @@\n error: cannot use value of type `!` for inline assembly\n-  --> $DIR/issue-87802.rs:9:36\n+  --> $DIR/issue-87802.rs:12:36\n    |\n LL |         asm!(\"/* {0} */\", out(reg) x);\n    |                                    ^"}, {"sha": "f6725605b924b5fb71b05c0b510f7c79cc555126", "filename": "src/test/ui/asm/naked-functions-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// only-x86_64\n+// needs-asm-support\n #![feature(asm)]\n #![feature(naked_functions)]\n #![crate_type = \"lib\"]"}, {"sha": "a898ab19a7341974cdc681062dc8cf518365c3ac", "filename": "src/test/ui/asm/naked-functions-unused.aarch64.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -0,0 +1,69 @@\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:15:32\n+   |\n+LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n+   |                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/naked-functions-unused.rs:4:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:15:42\n+   |\n+LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n+   |                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:24:38\n+   |\n+LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n+   |                                      ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:24:48\n+   |\n+LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n+   |                                                ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:30:41\n+   |\n+LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                         ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:30:51\n+   |\n+LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                                   ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:38:40\n+   |\n+LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                        ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:38:50\n+   |\n+LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                                  ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:44:43\n+   |\n+LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:44:53\n+   |\n+LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "4c5c2ac1c197e3685ed071566e3bc7c2767f2ca4", "filename": "src/test/ui/asm/naked-functions-unused.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,16 +1,18 @@\n-// only-x86_64\n+// revisions: x86_64 aarch64\n+//[x86_64] only-x86_64\n+//[aarch64] only-aarch64\n #![deny(unused)]\n #![feature(asm)]\n #![feature(naked_functions)]\n #![crate_type = \"lib\"]\n \n pub trait Trait {\n-    extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize;\n-    extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize;\n+    extern \"C\" fn trait_associated(a: usize, b: usize) -> usize;\n+    extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize;\n }\n \n pub mod normal {\n-    pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+    pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n         //~^ ERROR unused variable: `a`\n         //~| ERROR unused variable: `b`\n         unsafe { asm!(\"\", options(noreturn)); }\n@@ -19,27 +21,27 @@ pub mod normal {\n     pub struct Normal;\n \n     impl Normal {\n-        pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+        pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n             //~^ ERROR unused variable: `a`\n             //~| ERROR unused variable: `b`\n             unsafe { asm!(\"\", options(noreturn)); }\n         }\n \n-        pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+        pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n             //~^ ERROR unused variable: `a`\n             //~| ERROR unused variable: `b`\n             unsafe { asm!(\"\", options(noreturn)); }\n         }\n     }\n \n     impl super::Trait for Normal {\n-        extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+        extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n             //~^ ERROR unused variable: `a`\n             //~| ERROR unused variable: `b`\n             unsafe { asm!(\"\", options(noreturn)); }\n         }\n \n-        extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+        extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n             //~^ ERROR unused variable: `a`\n             //~| ERROR unused variable: `b`\n             unsafe { asm!(\"\", options(noreturn)); }\n@@ -49,32 +51,32 @@ pub mod normal {\n \n pub mod naked {\n     #[naked]\n-    pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+    pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n         unsafe { asm!(\"\", options(noreturn)); }\n     }\n \n     pub struct Naked;\n \n     impl Naked {\n         #[naked]\n-        pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+        pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n             unsafe { asm!(\"\", options(noreturn)); }\n         }\n \n         #[naked]\n-        pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+        pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n             unsafe { asm!(\"\", options(noreturn)); }\n         }\n     }\n \n     impl super::Trait for Naked {\n         #[naked]\n-        extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+        extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n             unsafe { asm!(\"\", options(noreturn)); }\n         }\n \n         #[naked]\n-        extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+        extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n             unsafe { asm!(\"\", options(noreturn)); }\n         }\n     }"}, {"sha": "840353366b6703edf3ae938781c7f0f38007b58c", "filename": "src/test/ui/asm/naked-functions-unused.stderr", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,69 +0,0 @@\n-error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:13:37\n-   |\n-LL |     pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n-   |                                     ^ help: if this is intentional, prefix it with an underscore: `_a`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/naked-functions-unused.rs:2:9\n-   |\n-LL | #![deny(unused)]\n-   |         ^^^^^^\n-   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n-\n-error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:13:47\n-   |\n-LL |     pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n-   |                                               ^ help: if this is intentional, prefix it with an underscore: `_b`\n-\n-error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:22:43\n-   |\n-LL |         pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n-   |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n-\n-error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:22:53\n-   |\n-LL |         pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n-   |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`\n-\n-error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:28:46\n-   |\n-LL |         pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n-   |                                              ^ help: if this is intentional, prefix it with an underscore: `_a`\n-\n-error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:28:56\n-   |\n-LL |         pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n-   |                                                        ^ help: if this is intentional, prefix it with an underscore: `_b`\n-\n-error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:36:45\n-   |\n-LL |         extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n-   |                                             ^ help: if this is intentional, prefix it with an underscore: `_a`\n-\n-error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:36:55\n-   |\n-LL |         extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n-   |                                                       ^ help: if this is intentional, prefix it with an underscore: `_b`\n-\n-error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:42:48\n-   |\n-LL |         extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n-   |                                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n-\n-error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:42:58\n-   |\n-LL |         extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n-   |                                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n-\n-error: aborting due to 10 previous errors\n-"}, {"sha": "a898ab19a7341974cdc681062dc8cf518365c3ac", "filename": "src/test/ui/asm/naked-functions-unused.x86_64.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -0,0 +1,69 @@\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:15:32\n+   |\n+LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n+   |                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/naked-functions-unused.rs:4:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:15:42\n+   |\n+LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n+   |                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:24:38\n+   |\n+LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n+   |                                      ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:24:48\n+   |\n+LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n+   |                                                ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:30:41\n+   |\n+LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                         ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:30:51\n+   |\n+LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                                   ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:38:40\n+   |\n+LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                        ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:38:50\n+   |\n+LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                                  ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:44:43\n+   |\n+LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:44:53\n+   |\n+LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "803311d4235058a0a6419f2c44a5a4f94b1692da", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,4 +1,8 @@\n // needs-asm-support\n+// ignore-nvptx64\n+// ignore-spirv\n+// ignore-wasm32\n+\n #![feature(asm)]\n #![feature(llvm_asm)]\n #![feature(naked_functions)]"}, {"sha": "46ceef032427c97487be328b48bcd83f1c5d1ef4", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,43 +1,43 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:127:14\n+  --> $DIR/naked-functions.rs:131:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:14:5\n+  --> $DIR/naked-functions.rs:18:5\n    |\n LL |     mut a: u32,\n    |     ^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:16:5\n+  --> $DIR/naked-functions.rs:20:5\n    |\n LL |     &b: &i32,\n    |     ^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:18:6\n+  --> $DIR/naked-functions.rs:22:6\n    |\n LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n    |      ^^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:20:5\n+  --> $DIR/naked-functions.rs:24:5\n    |\n LL |     P { x, y }: P,\n    |     ^^^^^^^^^^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:30:5\n+  --> $DIR/naked-functions.rs:34:5\n    |\n LL |     a + 1\n    |     ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:27:1\n+  --> $DIR/naked-functions.rs:31:1\n    |\n LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n LL | |\n@@ -53,15 +53,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:36:31\n+  --> $DIR/naked-functions.rs:40:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:36:23\n+  --> $DIR/naked-functions.rs:40:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:43:1\n+  --> $DIR/naked-functions.rs:47:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n@@ -84,7 +84,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:63:10\n+  --> $DIR/naked-functions.rs:67:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n@@ -102,7 +102,7 @@ LL |          out(reg) e,\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:60:5\n+  --> $DIR/naked-functions.rs:64:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n@@ -117,7 +117,7 @@ LL | |     );\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:50:1\n+  --> $DIR/naked-functions.rs:54:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n@@ -141,7 +141,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:76:1\n+  --> $DIR/naked-functions.rs:80:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n@@ -153,7 +153,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:85:5\n+  --> $DIR/naked-functions.rs:89:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^^\n@@ -162,7 +162,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:88:5\n+  --> $DIR/naked-functions.rs:92:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^^\n@@ -171,7 +171,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:91:5\n+  --> $DIR/naked-functions.rs:95:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^^\n@@ -180,7 +180,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:82:1\n+  --> $DIR/naked-functions.rs:86:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n@@ -202,15 +202,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:102:11\n+  --> $DIR/naked-functions.rs:106:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:99:5\n+  --> $DIR/naked-functions.rs:103:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n@@ -225,7 +225,7 @@ LL | |     }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: the LLVM-style inline assembly is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:112:5\n+  --> $DIR/naked-functions.rs:116:5\n    |\n LL |     llvm_asm!(\"\");\n    |     ^^^^^^^^^^^^^^\n@@ -236,7 +236,7 @@ LL |     llvm_asm!(\"\");\n    = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:109:1\n+  --> $DIR/naked-functions.rs:113:1\n    |\n LL | / unsafe extern \"C\" fn llvm() -> ! {\n LL | |\n@@ -252,7 +252,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:120:5\n+  --> $DIR/naked-functions.rs:124:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -261,7 +261,7 @@ LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:127:5\n+  --> $DIR/naked-functions.rs:131:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:127:5\n+  --> $DIR/naked-functions.rs:131:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -279,21 +279,21 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:136:15\n+  --> $DIR/naked-functions.rs:140:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:142:29\n+  --> $DIR/naked-functions.rs:146:29\n    |\n LL | pub unsafe extern \"Rust\" fn rust_abi() {\n    |                             ^^^^^^^^\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:176:1\n+  --> $DIR/naked-functions.rs:180:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -302,7 +302,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:184:1\n+  --> $DIR/naked-functions.rs:188:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -311,7 +311,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:192:1\n+  --> $DIR/naked-functions.rs:196:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n@@ -320,7 +320,7 @@ LL | #[inline(never)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:200:1\n+  --> $DIR/naked-functions.rs:204:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -329,7 +329,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:203:1\n+  --> $DIR/naked-functions.rs:207:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -338,7 +338,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:206:1\n+  --> $DIR/naked-functions.rs:210:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^"}, {"sha": "82c47945a7b302c4db11ee389e3c54877b98a46c", "filename": "src/test/ui/asm/named-asm-labels.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,4 +1,7 @@\n-// only-x86_64\n+// needs-asm-support\n+// ignore-nvptx64\n+// ignore-spirv\n+// ignore-wasm32\n \n // Tests that the use of named labels in the `asm!` macro are linted against\n // except for in `#[naked]` fns.\n@@ -99,9 +102,6 @@ fn main() {\n         asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\"); //~ ERROR avoid using named labels\n \n         // Non-label colons - should pass\n-        // (most of these are stolen from other places)\n-        asm!(\"{:l}\", in(reg) 0i64);\n-        asm!(\"{:e}\", in(reg) 0f32);\n         asm!(\"mov rax, qword ptr fs:[0]\");\n \n         // Comments"}, {"sha": "75c848cdc572d37a64b92122b904dbd303b65f94", "filename": "src/test/ui/asm/named-asm-labels.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,5 +1,5 @@\n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:19:15\n+  --> $DIR/named-asm-labels.rs:22:15\n    |\n LL |         asm!(\"bar: nop\");\n    |               ^^^\n@@ -9,7 +9,7 @@ LL |         asm!(\"bar: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:22:15\n+  --> $DIR/named-asm-labels.rs:25:15\n    |\n LL |         asm!(\"abcd:\");\n    |               ^^^^\n@@ -18,7 +18,7 @@ LL |         asm!(\"abcd:\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:25:15\n+  --> $DIR/named-asm-labels.rs:28:15\n    |\n LL |         asm!(\"foo: bar1: nop\");\n    |               ^^^  ^^^^\n@@ -27,7 +27,7 @@ LL |         asm!(\"foo: bar1: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:29:15\n+  --> $DIR/named-asm-labels.rs:32:15\n    |\n LL |         asm!(\"foo1: nop\", \"nop\");\n    |               ^^^^\n@@ -36,7 +36,7 @@ LL |         asm!(\"foo1: nop\", \"nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:30:15\n+  --> $DIR/named-asm-labels.rs:33:15\n    |\n LL |         asm!(\"foo2: foo3: nop\", \"nop\");\n    |               ^^^^  ^^^^\n@@ -45,7 +45,7 @@ LL |         asm!(\"foo2: foo3: nop\", \"nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:32:22\n+  --> $DIR/named-asm-labels.rs:35:22\n    |\n LL |         asm!(\"nop\", \"foo4: nop\");\n    |                      ^^^^\n@@ -54,7 +54,7 @@ LL |         asm!(\"nop\", \"foo4: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:33:15\n+  --> $DIR/named-asm-labels.rs:36:15\n    |\n LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    |               ^^^^\n@@ -63,7 +63,7 @@ LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:33:28\n+  --> $DIR/named-asm-labels.rs:36:28\n    |\n LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    |                            ^^^^\n@@ -72,7 +72,7 @@ LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:38:15\n+  --> $DIR/named-asm-labels.rs:41:15\n    |\n LL |         asm!(\"foo7: nop; foo8: nop\");\n    |               ^^^^       ^^^^\n@@ -81,7 +81,7 @@ LL |         asm!(\"foo7: nop; foo8: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:40:15\n+  --> $DIR/named-asm-labels.rs:43:15\n    |\n LL |         asm!(\"foo9: nop; nop\");\n    |               ^^^^\n@@ -90,7 +90,7 @@ LL |         asm!(\"foo9: nop; nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:41:20\n+  --> $DIR/named-asm-labels.rs:44:20\n    |\n LL |         asm!(\"nop; foo10: nop\");\n    |                    ^^^^^\n@@ -99,7 +99,7 @@ LL |         asm!(\"nop; foo10: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:44:15\n+  --> $DIR/named-asm-labels.rs:47:15\n    |\n LL |         asm!(\"bar2: nop\\n bar3: nop\");\n    |               ^^^^        ^^^^\n@@ -108,7 +108,7 @@ LL |         asm!(\"bar2: nop\\n bar3: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:46:15\n+  --> $DIR/named-asm-labels.rs:49:15\n    |\n LL |         asm!(\"bar4: nop\\n nop\");\n    |               ^^^^\n@@ -117,7 +117,7 @@ LL |         asm!(\"bar4: nop\\n nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:47:21\n+  --> $DIR/named-asm-labels.rs:50:21\n    |\n LL |         asm!(\"nop\\n bar5: nop\");\n    |                     ^^^^\n@@ -126,7 +126,7 @@ LL |         asm!(\"nop\\n bar5: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:48:21\n+  --> $DIR/named-asm-labels.rs:51:21\n    |\n LL |         asm!(\"nop\\n bar6: bar7: nop\");\n    |                     ^^^^  ^^^^\n@@ -135,7 +135,7 @@ LL |         asm!(\"nop\\n bar6: bar7: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:54:13\n+  --> $DIR/named-asm-labels.rs:57:13\n    |\n LL |             blah2: nop\n    |             ^^^^^\n@@ -146,7 +146,7 @@ LL |             blah3: nop\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:63:19\n+  --> $DIR/named-asm-labels.rs:66:19\n    |\n LL |             nop ; blah4: nop\n    |                   ^^^^^\n@@ -155,7 +155,7 @@ LL |             nop ; blah4: nop\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:77:15\n+  --> $DIR/named-asm-labels.rs:80:15\n    |\n LL |         asm!(\"blah1: 2bar: nop\");\n    |               ^^^^^\n@@ -164,7 +164,7 @@ LL |         asm!(\"blah1: 2bar: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:80:15\n+  --> $DIR/named-asm-labels.rs:83:15\n    |\n LL |         asm!(\"def: def: nop\");\n    |               ^^^\n@@ -173,7 +173,7 @@ LL |         asm!(\"def: def: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:81:15\n+  --> $DIR/named-asm-labels.rs:84:15\n    |\n LL |         asm!(\"def: nop\\ndef: nop\");\n    |               ^^^\n@@ -182,7 +182,7 @@ LL |         asm!(\"def: nop\\ndef: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:82:15\n+  --> $DIR/named-asm-labels.rs:85:15\n    |\n LL |         asm!(\"def: nop; def: nop\");\n    |               ^^^\n@@ -191,7 +191,7 @@ LL |         asm!(\"def: nop; def: nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:90:15\n+  --> $DIR/named-asm-labels.rs:93:15\n    |\n LL |         asm!(\"fooo\\u{003A} nop\");\n    |               ^^^^^^^^^^^^^^^^\n@@ -200,7 +200,7 @@ LL |         asm!(\"fooo\\u{003A} nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:91:15\n+  --> $DIR/named-asm-labels.rs:94:15\n    |\n LL |         asm!(\"foooo\\x3A nop\");\n    |               ^^^^^^^^^^^^^\n@@ -209,7 +209,7 @@ LL |         asm!(\"foooo\\x3A nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:94:15\n+  --> $DIR/named-asm-labels.rs:97:15\n    |\n LL |         asm!(\"fooooo:\\u{000A} nop\");\n    |               ^^^^^^\n@@ -218,7 +218,7 @@ LL |         asm!(\"fooooo:\\u{000A} nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:95:15\n+  --> $DIR/named-asm-labels.rs:98:15\n    |\n LL |         asm!(\"foooooo:\\x0A nop\");\n    |               ^^^^^^^\n@@ -227,7 +227,7 @@ LL |         asm!(\"foooooo:\\x0A nop\");\n    = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n-  --> $DIR/named-asm-labels.rs:99:14\n+  --> $DIR/named-asm-labels.rs:102:14\n    |\n LL |         asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\");\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bbbe798d1557b0e095559ae2cff6fcfd19ebede2", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,4 +1,7 @@\n // needs-asm-support\n+// ignore-nvptx64\n+// ignore-spirv\n+// ignore-wasm32\n \n #![feature(asm, global_asm)]\n "}, {"sha": "c9080a3c0309a2fa819c2e981b95933a572ffce8", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,5 +1,5 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/type-check-1.rs:34:26\n+  --> $DIR/type-check-1.rs:37:26\n    |\n LL |         let x = 0;\n    |         ----- help: consider using `const` instead of `let`: `const x`\n@@ -8,7 +8,7 @@ LL |         asm!(\"{}\", const x);\n    |                          ^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/type-check-1.rs:37:36\n+  --> $DIR/type-check-1.rs:40:36\n    |\n LL |         let x = 0;\n    |         ----- help: consider using `const` instead of `let`: `const x`\n@@ -17,7 +17,7 @@ LL |         asm!(\"{}\", const const_foo(x));\n    |                                    ^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/type-check-1.rs:40:36\n+  --> $DIR/type-check-1.rs:43:36\n    |\n LL |         let x = 0;\n    |         ----- help: consider using `const` instead of `let`: `const x`\n@@ -26,13 +26,13 @@ LL |         asm!(\"{}\", const const_bar(x));\n    |                                    ^ non-constant value\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:48:26\n+  --> $DIR/type-check-1.rs:51:26\n    |\n LL |         asm!(\"{}\", const 0f32);\n    |                          ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:50:26\n+  --> $DIR/type-check-1.rs:53:26\n    |\n LL |         asm!(\"{}\", const 0 as *mut u8);\n    |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n@@ -41,7 +41,7 @@ LL |         asm!(\"{}\", const 0 as *mut u8);\n            found raw pointer `*mut u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:54:26\n+  --> $DIR/type-check-1.rs:55:26\n    |\n LL |         asm!(\"{}\", const &0);\n    |                          ^^ expected integer, found `&{integer}`\n@@ -53,19 +53,19 @@ LL +         asm!(\"{}\", const 0);\n    | \n \n error: invalid asm output\n-  --> $DIR/type-check-1.rs:10:29\n+  --> $DIR/type-check-1.rs:13:29\n    |\n LL |         asm!(\"{}\", out(reg) 1 + 2);\n    |                             ^^^^^ cannot assign to this expression\n \n error: invalid asm output\n-  --> $DIR/type-check-1.rs:12:31\n+  --> $DIR/type-check-1.rs:15:31\n    |\n LL |         asm!(\"{}\", inout(reg) 1 + 2);\n    |                               ^^^^^ cannot assign to this expression\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n-  --> $DIR/type-check-1.rs:18:28\n+  --> $DIR/type-check-1.rs:21:28\n    |\n LL |         asm!(\"{}\", in(reg) v[..]);\n    |                            ^^^^^ doesn't have a size known at compile-time\n@@ -74,7 +74,7 @@ LL |         asm!(\"{}\", in(reg) v[..]);\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n-  --> $DIR/type-check-1.rs:20:29\n+  --> $DIR/type-check-1.rs:23:29\n    |\n LL |         asm!(\"{}\", out(reg) v[..]);\n    |                             ^^^^^ doesn't have a size known at compile-time\n@@ -83,7 +83,7 @@ LL |         asm!(\"{}\", out(reg) v[..]);\n    = note: all inline asm arguments must have a statically known size\n \n error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n-  --> $DIR/type-check-1.rs:22:31\n+  --> $DIR/type-check-1.rs:25:31\n    |\n LL |         asm!(\"{}\", inout(reg) v[..]);\n    |                               ^^^^^ doesn't have a size known at compile-time\n@@ -92,13 +92,13 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = note: all inline asm arguments must have a statically known size\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:60:25\n+  --> $DIR/type-check-1.rs:65:25\n    |\n LL | global_asm!(\"{}\", const 0f32);\n    |                         ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:64:25\n+  --> $DIR/type-check-1.rs:67:25\n    |\n LL | global_asm!(\"{}\", const 0 as *mut u8);\n    |                         ^^^^^^^^^^^^ expected integer, found *-ptr"}, {"sha": "c9826662009857fb5d0e02c1f3c31e199a4e7842", "filename": "src/test/ui/asm/type-check-4.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.rs?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,4 +1,7 @@\n // needs-asm-support\n+// ignore-nvptx64\n+// ignore-spirv\n+// ignore-wasm32\n \n #![feature(asm)]\n "}, {"sha": "db2bf0a69f7fcd50c5e1e3f8c19e87db6f9c3c0a", "filename": "src/test/ui/asm/type-check-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27213b025446497b37a7071fc23114fb1d5f171c/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.stderr?ref=27213b025446497b37a7071fc23114fb1d5f171c", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/type-check-4.rs:11:9\n+  --> $DIR/type-check-4.rs:14:9\n    |\n LL |         let p = &a;\n    |                 -- borrow of `a` occurs here\n@@ -10,7 +10,7 @@ LL |         println!(\"{}\", p);\n    |                        - borrow later used here\n \n error[E0503]: cannot use `a` because it was mutably borrowed\n-  --> $DIR/type-check-4.rs:19:28\n+  --> $DIR/type-check-4.rs:22:28\n    |\n LL |         let p = &mut a;\n    |                 ------ borrow of `a` occurs here"}]}