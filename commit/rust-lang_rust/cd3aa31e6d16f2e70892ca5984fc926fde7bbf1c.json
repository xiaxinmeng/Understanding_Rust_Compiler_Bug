{"sha": "cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkM2FhMzFlNmQxNmYyZTcwODkyY2E1OTg0ZmM5MjZmZGU3YmJmMWM=", "commit": {"author": {"name": "Nicholas Mazzuca", "email": "npmazzuca@gmail.com", "date": "2016-01-02T22:36:28Z"}, "committer": {"name": "Nicholas Mazzuca", "email": "npmazzuca@gmail.com", "date": "2016-01-02T22:36:28Z"}, "message": "Finish test implementation", "tree": {"sha": "0cfc7d022f39b7d29e8d6d33cb1f521f9a6d9e62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cfc7d022f39b7d29e8d6d33cb1f521f9a6d9e62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c", "html_url": "https://github.com/rust-lang/rust/commit/cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96243295a297e8e64e0d7cf9c349f69cd7dcc56", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96243295a297e8e64e0d7cf9c349f69cd7dcc56", "html_url": "https://github.com/rust-lang/rust/commit/f96243295a297e8e64e0d7cf9c349f69cd7dcc56"}], "stats": {"total": 297, "additions": 150, "deletions": 147}, "files": [{"sha": "98124f61751d90abfd1630aec455527085f58103", "filename": "src/test/run-pass/num-wrapping.rs", "status": "modified", "additions": 150, "deletions": 147, "changes": 297, "blob_url": "https://github.com/rust-lang/rust/blob/cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs?ref=cd3aa31e6d16f2e70892ca5984fc926fde7bbf1c", "patch": "@@ -12,7 +12,9 @@\n //\n // Test std::num::Wrapping<T> for {uN, iN, usize, isize}\n \n-#![feature(op_assign_traits, num_bits_bytes)]\n+#![feature(op_assign_traits, num_bits_bytes, test)]\n+\n+extern crate test;\n \n use std::num::Wrapping;\n use std::ops::{\n@@ -21,8 +23,7 @@ use std::ops::{\n     Shl, Shr, ShlAssign, ShrAssign\n };\n use std::{i8, i16, i32, i64, isize, u8, u16, u32, u64, usize};\n-\n-use std::test::black_box;\n+use test::black_box;\n \n fn main() {\n     test_ops();\n@@ -247,126 +248,79 @@ fn test_sh_ops() {\n             assert_eq!(black_box(Wrapping($lhs).$op($rhs)), Wrapping($ans));\n         }\n     }\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as u8) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as u8) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as u8) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as u8) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as u8) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as i8) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as i8) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as i8) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as i8) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as i8) == usize::MAX - 1);\n-\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as i16) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as i16) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as i16) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as i16) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as i16) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as i16) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as i16) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as i16) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as i16) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as i16) == usize::MAX - 1);\n-\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as u16) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as u16) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as u16) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as u16) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as u16) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as u16) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as u16) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as u16) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as u16) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as u16) == usize::MAX - 1);\n-\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as i32) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as i32) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as i32) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as i32) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as i32) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as i32) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as i32) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as i32) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as i32) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as i32) == usize::MAX - 1);\n-\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as u32) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as u32) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as u32) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as u32) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as u32) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as u32) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as u32) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as u32) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as u32) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as u32) == usize::MAX - 1);\n-\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as i64) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as i64) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as i64) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as i64) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as i64) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as i64) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as i64) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as i64) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as i64) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as i64) == usize::MAX - 1);\n-\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as u64) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as u64) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as u64) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as u64) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as u64) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as u64) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as u64) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as u64) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as u64) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as u64) == usize::MAX - 1);\n-\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as isize) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as isize) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as isize) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as isize) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as isize) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as isize) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as isize) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as isize) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as isize) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as isize) == usize::MAX - 1);\n-\n-    sh_test!(shl(i8::MAX, (i8::BITS + 1) as usize) == -2);\n-    sh_test!(shl(i16::MAX, (i16::BITS + 1) as usize) == -2);\n-    sh_test!(shl(i32::MAX, (i32::BITS + 1) as usize) == -2);\n-    sh_test!(shl(i64::MAX, (i64::BITS + 1) as usize) == -2);\n-    sh_test!(shl(isize::MAX, (isize::BITS + 1) as usize) == -2);\n-\n-    sh_test!(shl(u8::MAX, (u8::BITS + 1) as usize) == u8::MAX - 1);\n-    sh_test!(shl(u16::MAX, (u16::BITS + 1) as usize) == u16::MAX - 1);\n-    sh_test!(shl(u32::MAX, (u32::BITS + 1) as usize) == u32::MAX - 1);\n-    sh_test!(shl(u64::MAX, (u64::BITS + 1) as usize) == u64::MAX - 1);\n-    sh_test!(shl(usize::MAX, (usize::BITS + 1) as usize) == usize::MAX - 1);\n-\n-\n-    sh_test!(shr(i8::MAX, i8::BITS + 1) == i8::MAX / 2);\n-    sh_test!(shr(i16::MAX, i16::BITS + 1) == i16::MAX / 2);\n-    sh_test!(shr(i32::MAX, i32::BITS + 1) == i32::MAX / 2);\n-    sh_test!(shr(i64::MAX, i64::BITS + 1) == i64::MAX / 2);\n-    sh_test!(shr(isize::MAX, isize::BITS + 1) == isize::MAX / 2);\n-\n-    sh_test!(shr(u8::MAX, u8::BITS + 1) == u8::MAX / 2);\n-    sh_test!(shr(u16::MAX, u16::BITS + 1) == u16::MAX / 2);\n-    sh_test!(shr(u32::MAX, u32::BITS + 1) == u32::MAX / 2);\n-    sh_test!(shr(u64::MAX, u64::BITS + 1) == u64::MAX / 2);\n-    sh_test!(shr(usize::MAX, usize::BITS + 1) == usize::MAX / 2);\n+    // NOTE: This will break for i8 if we ever get i/u128\n+    macro_rules! sh_test_all {\n+        ($t:ty) => {\n+            sh_test!(shl(i8::MAX, (i8::BITS + 1) as $t) == -2);\n+            sh_test!(shl(i16::MAX, (i16::BITS + 1) as $t) == -2);\n+            sh_test!(shl(i32::MAX, (i32::BITS + 1) as $t) == -2);\n+            sh_test!(shl(i64::MAX, (i64::BITS + 1) as $t) == -2);\n+            sh_test!(shl(isize::MAX, (isize::BITS + 1) as $t) == -2);\n+\n+            sh_test!(shl(u8::MAX, (u8::BITS + 1) as $t) == u8::MAX - 1);\n+            sh_test!(shl(u16::MAX, (u16::BITS + 1) as $t) == u16::MAX - 1);\n+            sh_test!(shl(u32::MAX, (u32::BITS + 1) as $t) == u32::MAX - 1);\n+            sh_test!(shl(u64::MAX, (u64::BITS + 1) as $t) == u64::MAX - 1);\n+            sh_test!(shl(usize::MAX, (usize::BITS + 1) as $t) == usize::MAX - 1);\n+\n+\n+            sh_test!(shr(i8::MAX, (i8::BITS + 1) as $t) == i8::MAX / 2);\n+            sh_test!(shr(i16::MAX, (i16::BITS + 1) as $t) == i16::MAX / 2);\n+            sh_test!(shr(i32::MAX, (i32::BITS + 1) as $t) == i32::MAX / 2);\n+            sh_test!(shr(i64::MAX, (i64::BITS + 1) as $t) == i64::MAX / 2);\n+            sh_test!(shr(isize::MAX, (isize::BITS + 1) as $t) == isize::MAX / 2);\n+\n+            sh_test!(shr(u8::MAX, (u8::BITS + 1) as $t) == u8::MAX / 2);\n+            sh_test!(shr(u16::MAX, (u16::BITS + 1) as $t) == u16::MAX / 2);\n+            sh_test!(shr(u32::MAX, (u32::BITS + 1) as $t) == u32::MAX / 2);\n+            sh_test!(shr(u64::MAX, (u64::BITS + 1) as $t) == u64::MAX / 2);\n+            sh_test!(shr(usize::MAX, (usize::BITS + 1) as $t) == usize::MAX / 2);\n+        }\n+    }\n+    macro_rules! sh_test_negative_all {\n+        ($t:ty) => {\n+            sh_test!(shr(i8::MAX, -((i8::BITS + 1) as $t)) == -2);\n+            sh_test!(shr(i16::MAX, -((i16::BITS + 1) as $t)) == -2);\n+            sh_test!(shr(i32::MAX, -((i32::BITS + 1) as $t)) == -2);\n+            sh_test!(shr(i64::MAX, -((i64::BITS + 1) as $t)) == -2);\n+            sh_test!(shr(isize::MAX, -((isize::BITS + 1) as $t)) == -2);\n+\n+            sh_test!(shr(u8::MAX, -((u8::BITS + 1) as $t)) == u8::MAX - 1);\n+            sh_test!(shr(u16::MAX, -((u16::BITS + 1) as $t)) == u16::MAX - 1);\n+            sh_test!(shr(u32::MAX, -((u32::BITS + 1) as $t)) == u32::MAX - 1);\n+            sh_test!(shr(u64::MAX, -((u64::BITS + 1) as $t)) == u64::MAX - 1);\n+            sh_test!(shr(usize::MAX, -((usize::BITS + 1) as $t)) == usize::MAX - 1);\n+\n+\n+            sh_test!(shl(i8::MAX, -((i8::BITS + 1) as $t)) == i8::MAX / 2);\n+            sh_test!(shl(i16::MAX, -((i16::BITS + 1) as $t)) == i16::MAX / 2);\n+            sh_test!(shl(i32::MAX, -((i32::BITS + 1) as $t)) == i32::MAX / 2);\n+            sh_test!(shl(i64::MAX, -((i64::BITS + 1) as $t)) == i64::MAX / 2);\n+            sh_test!(shl(isize::MAX, -((isize::BITS + 1) as $t)) == isize::MAX / 2);\n+\n+            sh_test!(shl(u8::MAX, -((u8::BITS + 1) as $t)) == u8::MAX / 2);\n+            sh_test!(shl(u16::MAX, -((u16::BITS + 1) as $t)) == u16::MAX / 2);\n+            sh_test!(shl(u32::MAX, -((u32::BITS + 1) as $t)) == u32::MAX / 2);\n+            sh_test!(shl(u64::MAX, -((u64::BITS + 1) as $t)) == u64::MAX / 2);\n+            sh_test!(shl(usize::MAX, -((usize::BITS + 1) as $t)) == usize::MAX / 2);\n+        }\n+    }\n+    sh_test_all!(i8);\n+    sh_test_all!(u8);\n+    sh_test_all!(i16);\n+    sh_test_all!(u16);\n+    sh_test_all!(i32);\n+    sh_test_all!(u32);\n+    sh_test_all!(i64);\n+    sh_test_all!(u64);\n+    sh_test_all!(isize);\n+    sh_test_all!(usize);\n+\n+    sh_test_negative_all!(i8);\n+    sh_test_negative_all!(i16);\n+    sh_test_negative_all!(i32);\n+    sh_test_negative_all!(i64);\n+    sh_test_negative_all!(isize);\n }\n \n fn test_sh_op_assigns() {\n@@ -378,28 +332,77 @@ fn test_sh_op_assigns() {\n             assert_eq!(black_box(tmp), Wrapping($ans));\n         }}\n     }\n-    sh_assign_test!(shl_assign(i8::MAX, i8::BITS + 1) == -2);\n-    sh_assign_test!(shl_assign(i16::MAX, i16::BITS + 1) == -2);\n-    sh_assign_test!(shl_assign(i32::MAX, i32::BITS + 1) == -2);\n-    sh_assign_test!(shl_assign(i64::MAX, i64::BITS + 1) == -2);\n-    sh_assign_test!(shl_assign(isize::MAX, isize::BITS + 1) == -2);\n-\n-    sh_assign_test!(shl_assign(u8::MAX, u8::BITS + 1) == u8::MAX - 1);\n-    sh_assign_test!(shl_assign(u16::MAX, u16::BITS + 1) == u16::MAX - 1);\n-    sh_assign_test!(shl_assign(u32::MAX, u32::BITS + 1) == u32::MAX - 1);\n-    sh_assign_test!(shl_assign(u64::MAX, u64::BITS + 1) == u64::MAX - 1);\n-    sh_assign_test!(shl_assign(usize::MAX, usize::BITS + 1) == usize::MAX - 1);\n-\n-\n-    sh_assign_test!(shr_assign(i8::MAX, i8::BITS + 1) == i8::MAX / 2);\n-    sh_assign_test!(shr_assign(i16::MAX, i16::BITS + 1) == i16::MAX / 2);\n-    sh_assign_test!(shr_assign(i32::MAX, i32::BITS + 1) == i32::MAX / 2);\n-    sh_assign_test!(shr_assign(i64::MAX, i64::BITS + 1) == i64::MAX / 2);\n-    sh_assign_test!(shr_assign(isize::MAX, isize::BITS + 1) == isize::MAX / 2);\n-\n-    sh_assign_test!(shr_assign(u8::MAX, u8::BITS + 1) == u8::MAX / 2);\n-    sh_assign_test!(shr_assign(u16::MAX, u16::BITS + 1) == u16::MAX / 2);\n-    sh_assign_test!(shr_assign(u32::MAX, u32::BITS + 1) == u32::MAX / 2);\n-    sh_assign_test!(shr_assign(u64::MAX, u64::BITS + 1) == u64::MAX / 2);\n-    sh_assign_test!(shr_assign(usize::MAX, usize::BITS + 1) == usize::MAX / 2);\n+    macro_rules! sh_assign_test_all {\n+        ($t:ty) => {\n+            sh_assign_test!(shl_assign(i8::MAX, (i8::BITS + 1) as $t) == -2);\n+            sh_assign_test!(shl_assign(i16::MAX, (i16::BITS + 1) as $t) == -2);\n+            sh_assign_test!(shl_assign(i32::MAX, (i32::BITS + 1) as $t) == -2);\n+            sh_assign_test!(shl_assign(i64::MAX, (i64::BITS + 1) as $t) == -2);\n+            sh_assign_test!(shl_assign(isize::MAX, (isize::BITS + 1) as $t) == -2);\n+\n+            sh_assign_test!(shl_assign(u8::MAX, (u8::BITS + 1) as $t) == u8::MAX - 1);\n+            sh_assign_test!(shl_assign(u16::MAX, (u16::BITS + 1) as $t) == u16::MAX - 1);\n+            sh_assign_test!(shl_assign(u32::MAX, (u32::BITS + 1) as $t) == u32::MAX - 1);\n+            sh_assign_test!(shl_assign(u64::MAX, (u64::BITS + 1) as $t) == u64::MAX - 1);\n+            sh_assign_test!(shl_assign(usize::MAX, (usize::BITS + 1) as $t) == usize::MAX - 1);\n+\n+\n+            sh_assign_test!(shr_assign(i8::MAX, (i8::BITS + 1) as $t) == i8::MAX / 2);\n+            sh_assign_test!(shr_assign(i16::MAX, (i16::BITS + 1) as $t) == i16::MAX / 2);\n+            sh_assign_test!(shr_assign(i32::MAX, (i32::BITS + 1) as $t) == i32::MAX / 2);\n+            sh_assign_test!(shr_assign(i64::MAX, (i64::BITS + 1) as $t) == i64::MAX / 2);\n+            sh_assign_test!(shr_assign(isize::MAX, (isize::BITS + 1) as $t) == isize::MAX / 2);\n+\n+            sh_assign_test!(shr_assign(u8::MAX, (u8::BITS + 1) as $t) == u8::MAX / 2);\n+            sh_assign_test!(shr_assign(u16::MAX, (u16::BITS + 1) as $t) == u16::MAX / 2);\n+            sh_assign_test!(shr_assign(u32::MAX, (u32::BITS + 1) as $t) == u32::MAX / 2);\n+            sh_assign_test!(shr_assign(u64::MAX, (u64::BITS + 1) as $t) == u64::MAX / 2);\n+            sh_assign_test!(shr_assign(usize::MAX, (usize::BITS + 1) as $t) == usize::MAX / 2);\n+        }\n+    }\n+    macro_rules! sh_assign_test_negative_all {\n+        ($t:ty) => {\n+            sh_assign_test!(shr_assign(i8::MAX, -((i8::BITS + 1) as $t)) == -2);\n+            sh_assign_test!(shr_assign(i16::MAX, -((i16::BITS + 1) as $t)) == -2);\n+            sh_assign_test!(shr_assign(i32::MAX, -((i32::BITS + 1) as $t)) == -2);\n+            sh_assign_test!(shr_assign(i64::MAX, -((i64::BITS + 1) as $t)) == -2);\n+            sh_assign_test!(shr_assign(isize::MAX, -((isize::BITS + 1) as $t)) == -2);\n+\n+            sh_assign_test!(shr_assign(u8::MAX, -((u8::BITS + 1) as $t)) == u8::MAX - 1);\n+            sh_assign_test!(shr_assign(u16::MAX, -((u16::BITS + 1) as $t)) == u16::MAX - 1);\n+            sh_assign_test!(shr_assign(u32::MAX, -((u32::BITS + 1) as $t)) == u32::MAX - 1);\n+            sh_assign_test!(shr_assign(u64::MAX, -((u64::BITS + 1) as $t)) == u64::MAX - 1);\n+            sh_assign_test!(shr_assign(usize::MAX, -((usize::BITS + 1) as $t)) == usize::MAX - 1);\n+\n+\n+            sh_assign_test!(shl_assign(i8::MAX, -((i8::BITS + 1) as $t)) == i8::MAX / 2);\n+            sh_assign_test!(shl_assign(i16::MAX, -((i16::BITS + 1) as $t)) == i16::MAX / 2);\n+            sh_assign_test!(shl_assign(i32::MAX, -((i32::BITS + 1) as $t)) == i32::MAX / 2);\n+            sh_assign_test!(shl_assign(i64::MAX, -((i64::BITS + 1) as $t)) == i64::MAX / 2);\n+            sh_assign_test!(shl_assign(isize::MAX, -((isize::BITS + 1) as $t)) == isize::MAX / 2);\n+\n+            sh_assign_test!(shl_assign(u8::MAX, -((u8::BITS + 1) as $t)) == u8::MAX / 2);\n+            sh_assign_test!(shl_assign(u16::MAX, -((u16::BITS + 1) as $t)) == u16::MAX / 2);\n+            sh_assign_test!(shl_assign(u32::MAX, -((u32::BITS + 1) as $t)) == u32::MAX / 2);\n+            sh_assign_test!(shl_assign(u64::MAX, -((u64::BITS + 1) as $t)) == u64::MAX / 2);\n+            sh_assign_test!(shl_assign(usize::MAX, -((usize::BITS + 1) as $t)) == usize::MAX / 2);\n+        }\n+    }\n+\n+    sh_assign_test_all!(i8);\n+    sh_assign_test_all!(u8);\n+    sh_assign_test_all!(i16);\n+    sh_assign_test_all!(u16);\n+    sh_assign_test_all!(i32);\n+    sh_assign_test_all!(u32);\n+    sh_assign_test_all!(i64);\n+    sh_assign_test_all!(u64);\n+    sh_assign_test_all!(isize);\n+    sh_assign_test_all!(usize);\n+\n+    sh_assign_test_negative_all!(i8);\n+    sh_assign_test_negative_all!(i16);\n+    sh_assign_test_negative_all!(i32);\n+    sh_assign_test_negative_all!(i64);\n+    sh_assign_test_negative_all!(isize);\n }"}]}