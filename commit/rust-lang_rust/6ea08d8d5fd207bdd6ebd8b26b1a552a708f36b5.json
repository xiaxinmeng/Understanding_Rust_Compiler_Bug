{"sha": "6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYTA4ZDhkNWZkMjA3YmRkNmViZDhiMjZiMWE1NTJhNzA4ZjM2YjU=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-04-25T22:03:17Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-04-26T01:31:49Z"}, "message": "Add SIMD round, trunc, fract", "tree": {"sha": "908e4b2323461cb70740457d0298dfaf076e64a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/908e4b2323461cb70740457d0298dfaf076e64a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5", "html_url": "https://github.com/rust-lang/rust/commit/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4fda6ef06be190aa655bb23a9c66e46589daff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4fda6ef06be190aa655bb23a9c66e46589daff4", "html_url": "https://github.com/rust-lang/rust/commit/b4fda6ef06be190aa655bb23a9c66e46589daff4"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "665dc1a51d7418a544ff0004df6b8b698672477a", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5", "patch": "@@ -86,6 +86,12 @@ mod std {\n \n         // floor\n         pub(crate) fn simd_floor<T>(x: T) -> T;\n+\n+        // round\n+        pub(crate) fn simd_round<T>(x: T) -> T;\n+\n+        // trunc\n+        pub(crate) fn simd_trunc<T>(x: T) -> T;\n     }\n }\n "}, {"sha": "281851c68acebcf2c1599f9388b7418541ba731e", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5", "patch": "@@ -7,18 +7,39 @@ macro_rules! implement {\n         where\n             Self: crate::LanesAtMost32,\n         {\n-            /// Returns the largest integer less than or equal to each lane.\n+            /// Returns the smallest integer greater than or equal to each lane.\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            #[inline]\n+            pub fn ceil(self) -> Self {\n+                unsafe { crate::intrinsics::simd_ceil(self) }\n+            }\n+\n+            /// Returns the largest integer value less than or equal to each lane.\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn floor(self) -> Self {\n                 unsafe { crate::intrinsics::simd_floor(self) }\n             }\n \n-            /// Returns the smallest integer greater than or equal to each lane.\n+            /// Rounds to the nearest integer value. Ties round toward zero.\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n-            pub fn ceil(self) -> Self {\n-                unsafe { crate::intrinsics::simd_ceil(self) }\n+            pub fn round(self) -> Self {\n+                unsafe { crate::intrinsics::simd_round(self) }\n+            }\n+\n+            /// Returns the floating point's integer value, with its fractional part removed.\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            #[inline]\n+            pub fn trunc(self) -> Self {\n+                unsafe { crate::intrinsics::simd_trunc(self) }\n+            }\n+\n+            /// Returns the floating point's fractional value, with its integer part removed.\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            #[inline]\n+            pub fn fract(self) -> Self {\n+                self - self.trunc()\n             }\n         }\n "}, {"sha": "85853c0e8778cdeb8f392990fb6eedab6384df0b", "filename": "crates/core_simd/tests/round.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5/crates%2Fcore_simd%2Ftests%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5/crates%2Fcore_simd%2Ftests%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fround.rs?ref=6ea08d8d5fd207bdd6ebd8b26b1a552a708f36b5", "patch": "@@ -22,6 +22,30 @@ macro_rules! float_rounding_test {\n                         &|_| true,\n                     )\n                 }\n+\n+                fn round<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::round,\n+                        &Scalar::round,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn trunc<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::trunc,\n+                        &Scalar::trunc,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn fract<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::fract,\n+                        &Scalar::fract,\n+                        &|_| true,\n+                    )\n+                }\n             }\n \n             test_helpers::test_lanes! {"}]}