{"sha": "57e190c85024de27f1c8df8936e0b610a96908f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZTE5MGM4NTAyNGRlMjdmMWM4ZGY4OTM2ZTBiNjEwYTk2OTA4ZjU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-25T13:08:05Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-28T09:01:35Z"}, "message": "Address review comments", "tree": {"sha": "f15a274935d85cdc8f2a7cfe822c34a2389968f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f15a274935d85cdc8f2a7cfe822c34a2389968f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57e190c85024de27f1c8df8936e0b610a96908f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57e190c85024de27f1c8df8936e0b610a96908f5", "html_url": "https://github.com/rust-lang/rust/commit/57e190c85024de27f1c8df8936e0b610a96908f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57e190c85024de27f1c8df8936e0b610a96908f5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7", "html_url": "https://github.com/rust-lang/rust/commit/6f8fe4eaefe8fbc4f8a8d314ded0fe1a300c35f7"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8779d3d3f077927ca37285e876ebe89377282671", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=57e190c85024de27f1c8df8936e0b610a96908f5", "patch": "@@ -570,7 +570,7 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             ReadFromReturnPointer |\n             UnimplementedTraitSelection |\n             TypeckError |\n-            ResolutionFailed |\n+            TooGeneric |\n             CheckMatchError |\n             DerefFunctionPointer |\n             ExecuteMemory |"}, {"sha": "94273287f07c5a86a30a2bbc256f7534e051b793", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=57e190c85024de27f1c8df8936e0b610a96908f5", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n         match self.data.0.kind {\n             ::mir::interpret::EvalErrorKind::TypeckError |\n-            ::mir::interpret::EvalErrorKind::ResolutionFailed |\n+            ::mir::interpret::EvalErrorKind::TooGeneric |\n             ::mir::interpret::EvalErrorKind::CheckMatchError |\n             ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n             ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {"}, {"sha": "827ac7ef7fc9600110ad1da5732718707cf5eed4", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=57e190c85024de27f1c8df8936e0b610a96908f5", "patch": "@@ -151,7 +151,7 @@ pub enum EvalErrorKind<'tcx, O> {\n     /// Abort in case type errors are reached\n     TypeckError,\n     /// Resolution can fail if we are in a too generic context\n-    ResolutionFailed,\n+    TooGeneric,\n     CheckMatchError,\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n@@ -271,7 +271,7 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"there were unresolved type arguments during trait selection\",\n             TypeckError =>\n                 \"encountered constants with type errors, stopping evaluation\",\n-            ResolutionFailed =>\n+            TooGeneric =>\n                 \"encountered overly generic constant\",\n             CheckMatchError =>\n                 \"match checking failed\","}, {"sha": "c9021bcd410da5d14425929e6b380d18c115c8ca", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=57e190c85024de27f1c8df8936e0b610a96908f5", "patch": "@@ -499,11 +499,11 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                                             CodeSelectionError(ConstEvalFailure(err)))\n                                     }\n                                 } else {\n-                                    let err = EvalErrorKind::ResolutionFailed.into();\n+                                    let err = EvalErrorKind::TooGeneric.into();\n                                     ProcessResult::Error(\n                                         CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n                                             span: obligation.cause.span,\n-                                            data: (err, Vec::new()).into(),\n+                                            data: (err, vec![]).into(),\n                                         }))\n                                     )\n                                 }"}, {"sha": "3ff714d89c4444d3f2b65035eaf58339f2c187c6", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=57e190c85024de27f1c8df8936e0b610a96908f5", "patch": "@@ -577,7 +577,7 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n             PathNotFound(ref v) => PathNotFound(v.clone()),\n             UnimplementedTraitSelection => UnimplementedTraitSelection,\n             TypeckError => TypeckError,\n-            ResolutionFailed => ResolutionFailed,\n+            TooGeneric => TooGeneric,\n             CheckMatchError => CheckMatchError,\n             ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(err)?),\n             OverflowNeg => OverflowNeg,"}, {"sha": "ccdabe86d22521bfc13bc84a3aa3e88ac95ed2e8", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e190c85024de27f1c8df8936e0b610a96908f5/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=57e190c85024de27f1c8df8936e0b610a96908f5", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             self.param_env,\n             def_id,\n             substs,\n-        ).ok_or_else(|| EvalErrorKind::ResolutionFailed.into())\n+        ).ok_or_else(|| EvalErrorKind::TooGeneric.into())\n     }\n \n     pub(super) fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n@@ -739,7 +739,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                     self.param_env,\n                                     def_id,\n                                     substs,\n-                                ).ok_or_else(|| EvalErrorKind::ResolutionFailed.into());\n+                                ).ok_or_else(|| EvalErrorKind::TooGeneric.into());\n                                 let fn_ptr = self.memory.create_fn_alloc(instance?);\n                                 let valty = ValTy {\n                                     value: Value::Scalar(fn_ptr.into()),"}]}