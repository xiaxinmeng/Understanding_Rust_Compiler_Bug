{"sha": "99490ad5ba61b2ee69c2cdd70c70857eaf0b895f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NDkwYWQ1YmE2MWIyZWU2OWMyY2RkNzBjNzA4NTdlYWYwYjg5NWY=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-30T00:52:01Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-30T00:52:01Z"}, "message": "std: Remove macro in vec that's only used once", "tree": {"sha": "304e61473a12f05f2def76160068ba68b579442e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304e61473a12f05f2def76160068ba68b579442e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99490ad5ba61b2ee69c2cdd70c70857eaf0b895f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99490ad5ba61b2ee69c2cdd70c70857eaf0b895f", "html_url": "https://github.com/rust-lang/rust/commit/99490ad5ba61b2ee69c2cdd70c70857eaf0b895f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99490ad5ba61b2ee69c2cdd70c70857eaf0b895f/comments", "author": null, "committer": null, "parents": [{"sha": "ae09d95160919f8801caa22e2867e9680e6cb05b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae09d95160919f8801caa22e2867e9680e6cb05b", "html_url": "https://github.com/rust-lang/rust/commit/ae09d95160919f8801caa22e2867e9680e6cb05b"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "cfd28fcfc5eaa14c5c0156976cfa37aa8facb64c", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/99490ad5ba61b2ee69c2cdd70c70857eaf0b895f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99490ad5ba61b2ee69c2cdd70c70857eaf0b895f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=99490ad5ba61b2ee69c2cdd70c70857eaf0b895f", "patch": "@@ -2135,23 +2135,19 @@ macro_rules! double_ended_iterator {\n     }\n }\n \n-macro_rules! random_access_iterator {\n-    (impl $name:ident -> $elem:ty) => {\n-        impl<'self, T> RandomAccessIterator<$elem> for $name<'self, T> {\n-            #[inline]\n-            fn indexable(&self) -> uint {\n-                let (exact, _) = self.size_hint();\n-                exact\n-            }\n+impl<'self, T> RandomAccessIterator<&'self T> for VecIterator<'self, T> {\n+    #[inline]\n+    fn indexable(&self) -> uint {\n+        let (exact, _) = self.size_hint();\n+        exact\n+    }\n \n-            fn idx(&self, index: uint) -> Option<$elem> {\n-                unsafe {\n-                    if index < self.indexable() {\n-                        cast::transmute(self.ptr.offset(index))\n-                    } else {\n-                        None\n-                    }\n-                }\n+    fn idx(&self, index: uint) -> Option<&'self T> {\n+        unsafe {\n+            if index < self.indexable() {\n+                cast::transmute(self.ptr.offset(index))\n+            } else {\n+                None\n             }\n         }\n     }\n@@ -2166,7 +2162,6 @@ pub struct VecIterator<'self, T> {\n }\n iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n-random_access_iterator!{impl VecIterator -> &'self T}\n pub type RevIterator<'self, T> = Invert<VecIterator<'self, T>>;\n \n impl<'self, T> Clone for VecIterator<'self, T> {"}]}