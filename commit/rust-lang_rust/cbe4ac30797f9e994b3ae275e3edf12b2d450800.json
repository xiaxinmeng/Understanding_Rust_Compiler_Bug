{"sha": "cbe4ac30797f9e994b3ae275e3edf12b2d450800", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZTRhYzMwNzk3ZjllOTk0YjNhZTI3NWUzZWRmMTJiMmQ0NTA4MDA=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-10-04T20:51:35Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-11-17T21:50:15Z"}, "message": "spotlight Iterator/Read/Write impls on function return types", "tree": {"sha": "65d7881802dab2d6373fd6fdbe55b057bc33cfae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d7881802dab2d6373fd6fdbe55b057bc33cfae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbe4ac30797f9e994b3ae275e3edf12b2d450800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe4ac30797f9e994b3ae275e3edf12b2d450800", "html_url": "https://github.com/rust-lang/rust/commit/cbe4ac30797f9e994b3ae275e3edf12b2d450800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbe4ac30797f9e994b3ae275e3edf12b2d450800/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aabfed5e0c84211005c1cb2ecec2206a574a5146", "url": "https://api.github.com/repos/rust-lang/rust/commits/aabfed5e0c84211005c1cb2ecec2206a574a5146", "html_url": "https://github.com/rust-lang/rust/commit/aabfed5e0c84211005c1cb2ecec2206a574a5146"}], "stats": {"total": 114, "additions": 99, "deletions": 15}, "files": [{"sha": "a2bd15bdf05c7e52769dbfb4590f39d2a38f535e", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=cbe4ac30797f9e994b3ae275e3edf12b2d450800", "patch": "@@ -30,6 +30,7 @@ fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling \\\n                             `.iter()` or a similar method\"]\n+#[doc(spotlight)]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ce04be67aa4bc45021251f57c99423718f523a21", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=cbe4ac30797f9e994b3ae275e3edf12b2d450800", "patch": "@@ -140,11 +140,13 @@ pub fn build_external_trait(cx: &DocContext, did: DefId) -> clean::Trait {\n     let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n+    let is_spotlight = load_attrs(cx, did).has_doc_flag(\"spotlight\");\n     clean::Trait {\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n+        is_spotlight,\n     }\n }\n "}, {"sha": "69226239c96e80421368b895c4f1ab52631ec9f1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cbe4ac30797f9e994b3ae275e3edf12b2d450800", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         match module.inner {\n             ModuleItem(ref module) => {\n                 for it in &module.items {\n-                    if it.is_extern_crate() && it.attrs.has_doc_masked() {\n+                    if it.is_extern_crate() && it.attrs.has_doc_flag(\"masked\") {\n                         masked_crates.insert(it.def_id.krate);\n                     }\n                 }\n@@ -596,12 +596,12 @@ impl Attributes {\n         None\n     }\n \n-    pub fn has_doc_masked(&self) -> bool {\n+    pub fn has_doc_flag(&self, flag: &str) -> bool {\n         for attr in &self.other_attrs {\n             if !attr.check_name(\"doc\") { continue; }\n \n             if let Some(items) = attr.meta_item_list() {\n-                if items.iter().filter_map(|i| i.meta_item()).any(|it| it.check_name(\"masked\")) {\n+                if items.iter().filter_map(|i| i.meta_item()).any(|it| it.check_name(flag)) {\n                     return true;\n                 }\n             }\n@@ -1331,19 +1331,31 @@ impl Clean<FunctionRetTy> for hir::FunctionRetTy {\n     }\n }\n \n+impl GetDefId for FunctionRetTy {\n+    fn def_id(&self) -> Option<DefId> {\n+        match *self {\n+            Return(ref ty) => ty.def_id(),\n+            DefaultReturn => None,\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Trait {\n     pub unsafety: hir::Unsafety,\n     pub items: Vec<Item>,\n     pub generics: Generics,\n     pub bounds: Vec<TyParamBound>,\n+    pub is_spotlight: bool,\n }\n \n impl Clean<Item> for doctree::Trait {\n     fn clean(&self, cx: &DocContext) -> Item {\n+        let attrs = self.attrs.clean(cx);\n+        let is_spotlight = attrs.has_doc_flag(\"spotlight\");\n         Item {\n             name: Some(self.name.clean(cx)),\n-            attrs: self.attrs.clean(cx),\n+            attrs: attrs,\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n@@ -1354,6 +1366,7 @@ impl Clean<Item> for doctree::Trait {\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n+                is_spotlight: is_spotlight,\n             }),\n         }\n     }"}, {"sha": "d43a73c986453bad0b614feb36320d52db9308a7", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 72, "deletions": 7, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cbe4ac30797f9e994b3ae275e3edf12b2d450800", "patch": "@@ -1816,7 +1816,8 @@ fn plain_summary_line(s: Option<&str>) -> String {\n \n fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n     document_stability(w, cx, item)?;\n-    let prefix = render_assoc_const_value(item);\n+    let mut prefix = render_assoc_const_value(item);\n+    prefix.push_str(&render_spotlight_traits(item)?);\n     document_full(w, item, cx, &prefix)?;\n     Ok(())\n }\n@@ -2603,10 +2604,10 @@ fn assoc_const(w: &mut fmt::Formatter,\n     Ok(())\n }\n \n-fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n-              bounds: &Vec<clean::TyParamBound>,\n-              default: Option<&clean::Type>,\n-              link: AssocItemLink) -> fmt::Result {\n+fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n+                             bounds: &Vec<clean::TyParamBound>,\n+                             default: Option<&clean::Type>,\n+                             link: AssocItemLink) -> fmt::Result {\n     write!(w, \"type <a href='{}' class=\\\"type\\\">{}</a>\",\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap())?;\n@@ -3236,6 +3237,62 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n     }\n }\n \n+fn render_spotlight_traits(item: &clean::Item) -> Result<String, fmt::Error> {\n+    let mut out = String::new();\n+\n+    match item.inner {\n+        clean::FunctionItem(clean::Function { ref decl, .. }) |\n+        clean::TyMethodItem(clean::TyMethod { ref decl, .. }) |\n+        clean::MethodItem(clean::Method { ref decl, .. }) |\n+        clean::ForeignFunctionItem(clean::Function { ref decl, .. }) => {\n+            out = spotlight_decl(decl)?;\n+        }\n+        _ => {}\n+    }\n+\n+    Ok(out)\n+}\n+\n+fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n+    let mut out = String::new();\n+\n+    if let Some(did) = decl.output.def_id() {\n+        let c = cache();\n+        if let Some(impls) = c.impls.get(&did) {\n+            for i in impls {\n+                let impl_ = i.inner_impl();\n+                if impl_.trait_.def_id().and_then(|d| c.traits.get(&d))\n+                                        .map_or(false, |t| t.is_spotlight) {\n+                    if out.is_empty() {\n+                        out.push_str(\"<span class=\\\"docblock autohide\\\">\");\n+                        out.push_str(&format!(\"<h3>Important traits for {}</h3>\", impl_.for_));\n+                        out.push_str(\"<code class=\\\"spotlight\\\">\");\n+                    }\n+\n+                    //use the \"where\" class here to make it small\n+                    out.push_str(&format!(\"<span class=\\\"where fmt-newline\\\">{}</span>\", impl_));\n+                    let t_did = impl_.trait_.def_id().unwrap();\n+                    for it in &impl_.items {\n+                        if let clean::TypedefItem(ref tydef, _) = it.inner {\n+                            out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n+                            assoc_type(&mut out, it, &vec![],\n+                                       Some(&tydef.type_),\n+                                       AssocItemLink::GotoSource(t_did, &FxHashSet()))?;\n+                            out.push_str(\";</span>\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    if !out.is_empty() {\n+        out.push_str(\"</code></span>\");\n+    }\n+\n+    Ok(out)\n+}\n+\n fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n                render_mode: RenderMode, outer_version: Option<&str>,\n                show_def_docs: bool) -> fmt::Result {\n@@ -3270,14 +3327,16 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                      trait_: Option<&clean::Trait>, show_def_docs: bool) -> fmt::Result {\n         let item_type = item.type_();\n         let name = item.name.as_ref().unwrap();\n+        let mut method_prefix: Option<String> = None;\n \n         let render_method_item: bool = match render_mode {\n             RenderMode::Normal => true,\n             RenderMode::ForDeref { mut_: deref_mut_ } => should_render_item(&item, deref_mut_),\n         };\n \n         match item.inner {\n-            clean::MethodItem(..) | clean::TyMethodItem(..) => {\n+            clean::MethodItem(clean::Method { ref decl, .. }) |\n+            clean::TyMethodItem(clean::TyMethod{ ref decl, .. }) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = derive_id(format!(\"{}.{}\", item_type, name));\n@@ -3297,6 +3356,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     }\n                     write!(w, \"</span></h4>\\n\")?;\n+                    method_prefix = Some(spotlight_decl(decl)?);\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n@@ -3328,7 +3388,12 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         }\n \n         if render_method_item || render_mode == RenderMode::Normal {\n-            let prefix = render_assoc_const_value(item);\n+            let mut prefix = render_assoc_const_value(item);\n+\n+            if let Some(method_prefix) = method_prefix {\n+                prefix.push_str(&method_prefix);\n+            }\n+\n             if !is_default_item {\n                 if let Some(t) = trait_ {\n                     // The trait item may have been stripped so we might not"}, {"sha": "49dfa891c0adee1aa3c3dbba6fc4b4cb597b5264", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=cbe4ac30797f9e994b3ae275e3edf12b2d450800", "patch": "@@ -1624,9 +1624,7 @@\n     }\n \n     onEach(document.getElementById('main').getElementsByClassName('docblock'), function(e) {\n-        if (e.parentNode.id === \"main\") {\n-            e.parentNode.insertBefore(createToggle(), e);\n-        }\n+        e.parentNode.insertBefore(createToggle(), e);\n     });\n \n     onEach(document.getElementsByClassName('docblock'), function(e) {"}, {"sha": "29bec231b84fc4665f9c3efc549c279062b118b2", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=cbe4ac30797f9e994b3ae275e3edf12b2d450800", "patch": "@@ -141,9 +141,12 @@ code, pre {\n \tborder-radius: 3px;\n \tpadding: 0 0.2em;\n }\n-.docblock pre code, .docblock-short pre code {\n+.docblock pre code, .docblock-short pre code, .docblock code.spotlight {\n \tpadding: 0;\n }\n+.docblock code.spotlight :last-child {\n+\tpadding-bottom: 0.6em;\n+}\n pre {\n \tpadding: 14px;\n }"}, {"sha": "7eeb1bd61e34c0138d22ee1beb8418fcb835076f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe4ac30797f9e994b3ae275e3edf12b2d450800/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=cbe4ac30797f9e994b3ae275e3edf12b2d450800", "patch": "@@ -450,6 +450,7 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// # }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(spotlight)]\n pub trait Read {\n     /// Pull some bytes from this source into the specified buffer, returning\n     /// how many bytes were read.\n@@ -968,6 +969,7 @@ impl Initializer {\n /// # }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(spotlight)]\n pub trait Write {\n     /// Write a buffer into this object, returning how many bytes were written.\n     ///"}]}