{"sha": "5b08ab50f783bc8e52655f05c98f4da19881d7f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMDhhYjUwZjc4M2JjOGU1MjY1NWYwNWM5OGY0ZGExOTg4MWQ3ZjM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-03-29T16:46:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-03-28T19:05:39Z"}, "message": "Add doc examples on pointer types", "tree": {"sha": "992489dd414e6f0ece5e5104f38b0ba7e41bed7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992489dd414e6f0ece5e5104f38b0ba7e41bed7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b08ab50f783bc8e52655f05c98f4da19881d7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b08ab50f783bc8e52655f05c98f4da19881d7f3", "html_url": "https://github.com/rust-lang/rust/commit/5b08ab50f783bc8e52655f05c98f4da19881d7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b08ab50f783bc8e52655f05c98f4da19881d7f3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "641204a408ecda8494adce213e1d5c65f4220756", "url": "https://api.github.com/repos/rust-lang/rust/commits/641204a408ecda8494adce213e1d5c65f4220756", "html_url": "https://github.com/rust-lang/rust/commit/641204a408ecda8494adce213e1d5c65f4220756"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "37e9d18095f826a70df0842274013d20f8fd5528", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5b08ab50f783bc8e52655f05c98f4da19881d7f3/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b08ab50f783bc8e52655f05c98f4da19881d7f3/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=5b08ab50f783bc8e52655f05c98f4da19881d7f3", "patch": "@@ -212,6 +212,16 @@ pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n #[lang = \"const_ptr\"]\n impl<T: ?Sized> *const T {\n     /// Returns true if the pointer is null.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let s: &str = \"Follow the rabbit\";\n+    /// let ptr: *const u8 = s.as_ptr();\n+    /// assert!(ptr.is_null() == false);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_null(self) -> bool where T: Sized {\n@@ -227,6 +237,20 @@ impl<T: ?Sized> *const T {\n     /// null-safety, it is important to note that this is still an unsafe\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```ignore\n+    /// let val: *const u8 = &10u8 as *const u8;\n+    ///\n+    /// unsafe {\n+    ///     if let Some(val_back) = val.as_ref() {\n+    ///         println!(\"We got back the value: {}!\", val_back);\n+    ///     }\n+    /// }\n+    /// ```\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"Option is not clearly the right return type, and we \\\n                          may want to tie the return lifetime to a borrow of \\\n@@ -250,6 +274,20 @@ impl<T: ?Sized> *const T {\n     /// byte past the end of an allocated object. If either pointer is out of\n     /// bounds or arithmetic overflow occurs then\n     /// any further use of the returned value will result in undefined behavior.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let s: &str = \"123\";\n+    /// let ptr: *const u8 = s.as_ptr();\n+    ///\n+    /// unsafe {\n+    ///     println!(\"{}\", *ptr.offset(1) as char);\n+    ///     println!(\"{}\", *ptr.offset(2) as char);\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub unsafe fn offset(self, count: isize) -> *const T where T: Sized {\n@@ -260,6 +298,16 @@ impl<T: ?Sized> *const T {\n #[lang = \"mut_ptr\"]\n impl<T: ?Sized> *mut T {\n     /// Returns true if the pointer is null.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let mut s = [1, 2, 3];\n+    /// let ptr: *mut u32 = s.as_mut_ptr();\n+    /// assert!(ptr.is_null() == false);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_null(self) -> bool where T: Sized {\n@@ -275,6 +323,20 @@ impl<T: ?Sized> *mut T {\n     /// null-safety, it is important to note that this is still an unsafe\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```ignore\n+    /// let val: *mut u8 = &mut 10u8 as *mut u8;\n+    ///\n+    /// unsafe {\n+    ///     if let Some(val_back) = val.as_ref() {\n+    ///         println!(\"We got back the value: {}!\", val_back);\n+    ///     }\n+    /// }\n+    /// ```\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"Option is not clearly the right return type, and we \\\n                          may want to tie the return lifetime to a borrow of \\\n@@ -297,6 +359,20 @@ impl<T: ?Sized> *mut T {\n     /// The offset must be in-bounds of the object, or one-byte-past-the-end.\n     /// Otherwise `offset` invokes Undefined Behavior, regardless of whether\n     /// the pointer is used.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let mut s = [1, 2, 3];\n+    /// let ptr: *mut u32 = s.as_mut_ptr();\n+    ///\n+    /// unsafe {\n+    ///     println!(\"{}\", *ptr.offset(1));\n+    ///     println!(\"{}\", *ptr.offset(2));\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub unsafe fn offset(self, count: isize) -> *mut T where T: Sized {\n@@ -310,6 +386,15 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// As with `as_ref`, this is unsafe because it cannot verify the validity\n     /// of the returned pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let mut s = [1, 2, 3];\n+    /// let ptr: *mut u32 = s.as_mut_ptr();\n+    /// ```\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"return value does not necessarily convey all possible \\\n                          information\","}]}