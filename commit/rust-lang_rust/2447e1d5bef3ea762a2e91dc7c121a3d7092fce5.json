{"sha": "2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NDdlMWQ1YmVmM2VhNzYyYTJlOTFkYzdjMTIxYTNkNzA5MmZjZTU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-10T05:09:04Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-10T06:19:08Z"}, "message": "Add eta reduction (fixes #29)", "tree": {"sha": "b596c6850a0563a6d885b50339fefba47325da2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b596c6850a0563a6d885b50339fefba47325da2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "html_url": "https://github.com/rust-lang/rust/commit/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709dfe1cea8af02566d0c002dd48547a0d6537ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/709dfe1cea8af02566d0c002dd48547a0d6537ac", "html_url": "https://github.com/rust-lang/rust/commit/709dfe1cea8af02566d0c002dd48547a0d6537ac"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "ac98a7d842f48e0667b501a0b93595cc8ad6aae8", "filename": ".gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "patch": "@@ -9,3 +9,6 @@\n \n # Generated by Cargo\n /target/\n+\n+# We don't pin yet\n+Cargo.lock"}, {"sha": "95de98e8ee5bf916309e9a53851f0ecbb7ea6771", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.3\"\n+version = \"0.0.4\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\""}, {"sha": "004520f5bd7e759e34a70bccdfcabbaefcd1fb0b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "patch": "@@ -19,6 +19,7 @@ Lints included in this crate:\n  - `cmp_nan`: Denies comparisons to NAN (which will always return false, which is probably not intended)\n  - `float_cmp`: Warns on `==` or `!=` comparisons of floaty typed values. As floating-point operations usually involve rounding errors, it is always better to check for approximate equality within some small bounds\n  - `precedence`: Warns on expressions where precedence may trip up the unwary reader of the source and suggests adding parenthesis, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n+ - `redundant_closure`: Warns on usage of eta-reducible closures like `|a| foo(a)` (which can be written as just `foo`)\n \n To use, add the following lines to your Cargo.toml:\n "}, {"sha": "b89eef8c8bb3dd97ae2fc7f5fa85509fa239a531", "filename": "src/eta_reduction.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "patch": "@@ -0,0 +1,59 @@\n+use syntax::ast::*;\n+use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n+use syntax::codemap::{Span, Spanned};\n+use syntax::print::pprust::expr_to_string;\n+\n+\n+#[allow(missing_copy_implementations)]\n+pub struct EtaPass;\n+\n+\n+declare_lint!(pub REDUNDANT_CLOSURE, Warn,\n+              \"Warn on usage of redundant closures, i.e. `|a| foo(a)`\");\n+\n+impl LintPass for EtaPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(REDUNDANT_CLOSURE)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprClosure(_, ref decl, ref blk) = expr.node {\n+            if blk.stmts.len() != 0 {\n+                // || {foo(); bar()}; can't be reduced here\n+                return;\n+            }\n+            if let Some(ref ex) = blk.expr {\n+                if let ExprCall(ref caller, ref args) = ex.node {\n+                    if args.len() != decl.inputs.len() {\n+                        // Not the same number of arguments, there\n+                        // is no way the closure is the same as the function\n+                        return;\n+                    }\n+                    for (ref a1, ref a2) in decl.inputs.iter().zip(args) {\n+                        if let PatIdent(_, ident, _) = a1.pat.node {\n+                            // XXXManishearth Should I be checking the binding mode here?\n+                            if let ExprPath(None, ref p) = a2.node {\n+                                if p.segments.len() != 1 {\n+                                    // If it's a proper path, it can't be a local variable\n+                                    return;\n+                                }\n+                                if p.segments[0].identifier != ident.node {\n+                                    // The two idents should be the same\n+                                    return\n+                                }\n+                            } else {\n+                                return\n+                            }\n+                        } else {\n+                            return\n+                        }\n+                    }\n+                    cx.span_lint(REDUNDANT_CLOSURE, expr.span,\n+                                 &format!(\"Redundant closure found, consider using `{}` in its place\",\n+                                          expr_to_string(caller))[..])\n+                }\n+            }\n+        }\n+    }\n+}\n+"}, {"sha": "7e21a72dcf2465007379e41ab212468be1b1150b", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "patch": "@@ -21,6 +21,7 @@ pub mod bit_mask;\n pub mod ptr_arg;\n pub mod needless_bool;\n pub mod approx_const;\n+pub mod eta_reduction;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -36,6 +37,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box approx_const::ApproxConstant as LintPassObject);\n     reg.register_lint_pass(box misc::FloatCmp as LintPassObject);\n     reg.register_lint_pass(box misc::Precedence as LintPassObject);\n+    reg.register_lint_pass(box eta_reduction::EtaPass as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -45,5 +47,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            approx_const::APPROX_CONSTANT,\n                                            misc::CMP_NAN, misc::FLOAT_CMP,\n                                            misc::PRECEDENCE,\n+                                           eta_reduction::REDUNDANT_CLOSURE,\n                                            ]);\n }"}, {"sha": "8ca88eecbd276be973716f2c58b3487a5722316d", "filename": "tests/compile-fail/eta.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/tests%2Fcompile-fail%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2447e1d5bef3ea762a2e91dc7c121a3d7092fce5/tests%2Fcompile-fail%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feta.rs?ref=2447e1d5bef3ea762a2e91dc7c121a3d7092fce5", "patch": "@@ -0,0 +1,21 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unknown_lints, unused)]\n+#![deny(redundant_closure)]\n+\n+fn main() {\n+    let a = |a, b| foo(a, b);\n+    //~^ ERROR Redundant closure found, consider using `foo` in its place\n+    let c = |a, b| {1+2; foo}(a, b);\n+    //~^ ERROR Redundant closure found, consider using `{ 1 + 2; foo }` in its place\n+    let d = |a, b| foo((|c, d| foo2(c,d))(a,b), b);\n+    //~^ ERROR Redundant closure found, consider using `foo2` in its place\n+}\n+\n+fn foo(_: u8, _: u8) {\n+\n+}\n+\n+fn foo2(_: u8, _: u8) -> u8 {\n+    1u8\n+}\n\\ No newline at end of file"}]}