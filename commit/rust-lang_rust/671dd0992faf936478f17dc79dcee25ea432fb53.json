{"sha": "671dd0992faf936478f17dc79dcee25ea432fb53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MWRkMDk5MmZhZjkzNjQ3OGYxN2RjNzlkY2VlMjVlYTQzMmZiNTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-09T16:34:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-09T16:34:56Z"}, "message": "Rollup merge of #60656 - petertodd:2019-inline-cursor-over-slice, r=sfackler\n\nInline some Cursor calls for slices\n\n(Partially) brings back https://github.com/rust-lang/rust/pull/33921\n\nI've noticed in some serialization code I was writing that writes to slices produce much, much, worse code than you'd expect even with optimizations turned on. For example, you'd expect something like this to be zero cost:\n\n```\nuse std::io::{self, Cursor, Write};\n\npub fn serialize((a, b): (u64, u64)) -> [u8;8+8] {\n    let mut r = [0u8;16];\n    {\n        let mut w = Cursor::new(&mut r[..]);\n\n        w.write(&a.to_le_bytes()).unwrap();\n        w.write(&b.to_le_bytes()).unwrap();\n    }\n    r\n}\n```\n\n...but it compiles down to [dozens of instructions](https://rust.godbolt.org/z/bdwDzb) because the `slice_write()` calls aren't inlined, which in turn means `unwrap()` can't be optimized away, and so on.\n\nTo be clear, this pull-req isn't sufficient by itself: if we want to go down that path we also need to add `#[inline]`'s to the default implementations for functions like `write_all()` in the `Write` trait and so on, or implement them separately in the `Cursor` impls. But I figured I'd start a conversation about what tradeoffs we're expecting here.", "tree": {"sha": "205077cd626afb80f6afc08c131ef02b28e26685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/205077cd626afb80f6afc08c131ef02b28e26685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671dd0992faf936478f17dc79dcee25ea432fb53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc1FaxCRBK7hj4Ov3rIwAAdHIIAC7lAHEt2LF9bhZXChwziwyw\nsBn2vUV2p3yTMt5qgz0ZpyyPncy1a1wt8xD28Bepc7PhUN7RYCAeNcSIzz57lI72\n1KXC/W0ehnRTvNY+ZsewtkD0hdwuBm8XPG5Zv6D10DKPjqurRQ4muyAd3UoDZU6l\nLpeyvBTWtYD+WXozlpiKxgxsfAF0EdNsNwWal9CqfwkyiWnq7VF3D+r+2jhd+6Kk\ntMPSuB0phP0VLU8FD+1yE0f79gJJAgCc7cV+tCTQ5p9wTfieB7G1Be6RI7jCl2LY\nxX50nA8oivTj1KwmoXgBkQWBWi3GCwkokp1G5bkGkkWvoXETcMhsX4dUKOCHVTs=\n=z4wv\n-----END PGP SIGNATURE-----\n", "payload": "tree 205077cd626afb80f6afc08c131ef02b28e26685\nparent 26a7544aa306d1c22b57798ade4662bd51c3e306\nparent b9c430129d5971df4410b6c829b100ce8191328e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557419696 +0200\ncommitter GitHub <noreply@github.com> 1557419696 +0200\n\nRollup merge of #60656 - petertodd:2019-inline-cursor-over-slice, r=sfackler\n\nInline some Cursor calls for slices\n\n(Partially) brings back https://github.com/rust-lang/rust/pull/33921\n\nI've noticed in some serialization code I was writing that writes to slices produce much, much, worse code than you'd expect even with optimizations turned on. For example, you'd expect something like this to be zero cost:\n\n```\nuse std::io::{self, Cursor, Write};\n\npub fn serialize((a, b): (u64, u64)) -> [u8;8+8] {\n    let mut r = [0u8;16];\n    {\n        let mut w = Cursor::new(&mut r[..]);\n\n        w.write(&a.to_le_bytes()).unwrap();\n        w.write(&b.to_le_bytes()).unwrap();\n    }\n    r\n}\n```\n\n...but it compiles down to [dozens of instructions](https://rust.godbolt.org/z/bdwDzb) because the `slice_write()` calls aren't inlined, which in turn means `unwrap()` can't be optimized away, and so on.\n\nTo be clear, this pull-req isn't sufficient by itself: if we want to go down that path we also need to add `#[inline]`'s to the default implementations for functions like `write_all()` in the `Write` trait and so on, or implement them separately in the `Cursor` impls. But I figured I'd start a conversation about what tradeoffs we're expecting here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671dd0992faf936478f17dc79dcee25ea432fb53", "html_url": "https://github.com/rust-lang/rust/commit/671dd0992faf936478f17dc79dcee25ea432fb53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671dd0992faf936478f17dc79dcee25ea432fb53/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26a7544aa306d1c22b57798ade4662bd51c3e306", "url": "https://api.github.com/repos/rust-lang/rust/commits/26a7544aa306d1c22b57798ade4662bd51c3e306", "html_url": "https://github.com/rust-lang/rust/commit/26a7544aa306d1c22b57798ade4662bd51c3e306"}, {"sha": "b9c430129d5971df4410b6c829b100ce8191328e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c430129d5971df4410b6c829b100ce8191328e", "html_url": "https://github.com/rust-lang/rust/commit/b9c430129d5971df4410b6c829b100ce8191328e"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "f627fb0f562f0d4839aa351898a13e0dd09f16c4", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/671dd0992faf936478f17dc79dcee25ea432fb53/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671dd0992faf936478f17dc79dcee25ea432fb53/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=671dd0992faf936478f17dc79dcee25ea432fb53", "patch": "@@ -265,13 +265,15 @@ impl<T> BufRead for Cursor<T> where T: AsRef<[u8]> {\n }\n \n // Non-resizing write implementation\n+#[inline]\n fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<usize> {\n     let pos = cmp::min(*pos_mut, slice.len() as u64);\n     let amt = (&mut slice[(pos as usize)..]).write(buf)?;\n     *pos_mut += amt as u64;\n     Ok(amt)\n }\n \n+#[inline]\n fn slice_write_vectored(\n     pos_mut: &mut u64,\n     slice: &mut [u8],\n@@ -341,6 +343,7 @@ impl Write for Cursor<&mut [u8]> {\n         slice_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n@@ -354,6 +357,7 @@ impl Write for Cursor<&mut Vec<u8>> {\n         vec_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n@@ -367,6 +371,7 @@ impl Write for Cursor<Vec<u8>> {\n         vec_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n@@ -382,6 +387,7 @@ impl Write for Cursor<Box<[u8]>> {\n         slice_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n "}]}