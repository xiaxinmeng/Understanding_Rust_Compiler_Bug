{"sha": "c44bb0230ea4eae5ae97766b243f910b86b6aaae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NGJiMDIzMGVhNGVhZTVhZTk3NzY2YjI0M2Y5MTBiODZiNmFhYWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-24T12:29:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-24T12:29:35Z"}, "message": "Rollup merge of #57021 - nikic:arg-pointer-align, r=nagisa\n\nEnable emission of alignment attrs for pointer params\n\nInstead disable creation of assumptions during inlining using an LLVM opt flag. For non-inlined functions, this gives us alignment information, while not inserting any assumes that kill other optimizations.\n\nThe `-Z arg-align-attributes` option which previously controlled this behavior is removed.\n\nFixes #54982.\n\nr? @nagisa\n\ncc @eddyb who added the current behavior, and @scottmcm, who added the `-Z arg-align-attributes` flag.", "tree": {"sha": "508fe1670389894228dfe53c8d4701e4b02eb460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/508fe1670389894228dfe53c8d4701e4b02eb460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44bb0230ea4eae5ae97766b243f910b86b6aaae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcINEvCRBK7hj4Ov3rIwAAdHIIAHGabolulAW0WM9QxZUwcaBD\nPhD4hYpCPjprFOZ6X1cbPLAU00UTXyFjHHche8oFXcT1HFKzul2GCo8AkxNsAvl8\n+EPici3o06f1jH4JVfN1FB2CYa5K+fH2A1ZUnr4IQJV7ILvUdGop+uECNUuPZEfh\ncUf/rQR+LjkmnVY89C9m/bpSBa2wDDjbFS/YvZVm7fn8NDXDioo6esaVCsGEn2xx\nYp2TZOtvqleQbq0zXPOfXzFdRmigCkxRY1ER95Ctjktcy1MjnkoJEb+n4J3jD/og\nry8Tn7NpnuwpeIcO5ZoRUg48QkiMTAM7EXk2wu+rs2hrfG36GjbTHRvUEE7yfCw=\n=xvRh\n-----END PGP SIGNATURE-----\n", "payload": "tree 508fe1670389894228dfe53c8d4701e4b02eb460\nparent 7011035c1ca49d4693e65b3b0fa75603650d1b8c\nparent db24d8e8e25192703eb8f2ad6864207e92979443\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545654575 +0100\ncommitter GitHub <noreply@github.com> 1545654575 +0100\n\nRollup merge of #57021 - nikic:arg-pointer-align, r=nagisa\n\nEnable emission of alignment attrs for pointer params\n\nInstead disable creation of assumptions during inlining using an LLVM opt flag. For non-inlined functions, this gives us alignment information, while not inserting any assumes that kill other optimizations.\n\nThe `-Z arg-align-attributes` option which previously controlled this behavior is removed.\n\nFixes #54982.\n\nr? @nagisa\n\ncc @eddyb who added the current behavior, and @scottmcm, who added the `-Z arg-align-attributes` flag.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44bb0230ea4eae5ae97766b243f910b86b6aaae", "html_url": "https://github.com/rust-lang/rust/commit/c44bb0230ea4eae5ae97766b243f910b86b6aaae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44bb0230ea4eae5ae97766b243f910b86b6aaae/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7011035c1ca49d4693e65b3b0fa75603650d1b8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7011035c1ca49d4693e65b3b0fa75603650d1b8c", "html_url": "https://github.com/rust-lang/rust/commit/7011035c1ca49d4693e65b3b0fa75603650d1b8c"}, {"sha": "db24d8e8e25192703eb8f2ad6864207e92979443", "url": "https://api.github.com/repos/rust-lang/rust/commits/db24d8e8e25192703eb8f2ad6864207e92979443", "html_url": "https://github.com/rust-lang/rust/commit/db24d8e8e25192703eb8f2ad6864207e92979443"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "8bb3fc129520570b95ac8398744b7a7ad881a987", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44bb0230ea4eae5ae97766b243f910b86b6aaae/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44bb0230ea4eae5ae97766b243f910b86b6aaae/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c44bb0230ea4eae5ae97766b243f910b86b6aaae", "patch": "@@ -1271,8 +1271,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"set the MIR optimization level (0-3, default: 1)\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n-    arg_align_attributes: bool = (false, parse_bool, [TRACKED],\n-        \"emit align metadata for reference arguments\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"dump MIR state to file.\n         `val` is used to select which passes and functions to dump. For example:"}, {"sha": "71b75525a5aa1f5de1ecc205cff68e9c6d595f35", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c44bb0230ea4eae5ae97766b243f910b86b6aaae/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44bb0230ea4eae5ae97766b243f910b86b6aaae/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=c44bb0230ea4eae5ae97766b243f910b86b6aaae", "patch": "@@ -489,12 +489,6 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n                     attrs.pointee_size = pointee.size;\n                     attrs.pointee_align = Some(pointee.align);\n \n-                    // HACK(eddyb) LLVM inserts `llvm.assume` calls when inlining functions\n-                    // with align attributes, and those calls later block optimizations.\n-                    if !is_return && !cx.tcx.sess.opts.debugging_opts.arg_align_attributes {\n-                        attrs.pointee_align = None;\n-                    }\n-\n                     // `Box` pointer parameters never alias because ownership is transferred\n                     // `&mut` pointer parameters never alias other parameters,\n                     // or mutable global data"}, {"sha": "090ff83ecc1a8b904204c1f8208c0a08352a3005", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44bb0230ea4eae5ae97766b243f910b86b6aaae/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44bb0230ea4eae5ae97766b243f910b86b6aaae/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=c44bb0230ea4eae5ae97766b243f910b86b6aaae", "patch": "@@ -74,6 +74,10 @@ unsafe fn configure_llvm(sess: &Session) {\n             add(\"-mergefunc-use-aliases\");\n         }\n \n+        // HACK(eddyb) LLVM inserts `llvm.assume` calls to preserve align attributes\n+        // during inlining. Unfortunately these may block other optimizations.\n+        add(\"-preserve-alignment-assumptions-during-inlining=false\");\n+\n         for arg in &sess.opts.cg.llvm_args {\n             add(&(*arg));\n         }"}, {"sha": "69632c9c82b709b652fdadf3af2dc73ec001704f", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c44bb0230ea4eae5ae97766b243f910b86b6aaae/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44bb0230ea4eae5ae97766b243f910b86b6aaae/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=c44bb0230ea4eae5ae97766b243f910b86b6aaae", "patch": "@@ -28,37 +28,37 @@ pub fn boolean(x: bool) -> bool {\n   x\n }\n \n-// CHECK: @readonly_borrow(i32* noalias readonly dereferenceable(4) %arg0)\n+// CHECK: @readonly_borrow(i32* noalias readonly align 4 dereferenceable(4) %arg0)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn readonly_borrow(_: &i32) {\n }\n \n-// CHECK: @static_borrow(i32* noalias readonly dereferenceable(4) %arg0)\n+// CHECK: @static_borrow(i32* noalias readonly align 4 dereferenceable(4) %arg0)\n // static borrow may be captured\n #[no_mangle]\n pub fn static_borrow(_: &'static i32) {\n }\n \n-// CHECK: @named_borrow(i32* noalias readonly dereferenceable(4) %arg0)\n+// CHECK: @named_borrow(i32* noalias readonly align 4 dereferenceable(4) %arg0)\n // borrow with named lifetime may be captured\n #[no_mangle]\n pub fn named_borrow<'r>(_: &'r i32) {\n }\n \n-// CHECK: @unsafe_borrow(i16* dereferenceable(2) %arg0)\n+// CHECK: @unsafe_borrow(i16* align 2 dereferenceable(2) %arg0)\n // unsafe interior means this isn't actually readonly and there may be aliases ...\n #[no_mangle]\n pub fn unsafe_borrow(_: &UnsafeInner) {\n }\n \n-// CHECK: @mutable_unsafe_borrow(i16* dereferenceable(2) %arg0)\n+// CHECK: @mutable_unsafe_borrow(i16* align 2 dereferenceable(2) %arg0)\n // ... unless this is a mutable borrow, those never alias\n #[no_mangle]\n pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n }\n \n-// CHECK: @mutable_borrow(i32* dereferenceable(4) %arg0)\n+// CHECK: @mutable_borrow(i32* align 4 dereferenceable(4) %arg0)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_borrow(_: &mut i32) {\n@@ -69,13 +69,13 @@ pub fn mutable_borrow(_: &mut i32) {\n pub fn indirect_struct(_: S) {\n }\n \n-// CHECK: @borrowed_struct(%S* noalias readonly dereferenceable(32) %arg0)\n+// CHECK: @borrowed_struct(%S* noalias readonly align 4 dereferenceable(32) %arg0)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn borrowed_struct(_: &S) {\n }\n \n-// CHECK: noalias align 4 dereferenceable(4) i32* @_box(i32* noalias dereferenceable(4) %x)\n+// CHECK: noalias align 4 dereferenceable(4) i32* @_box(i32* noalias align 4 dereferenceable(4) %x)\n #[no_mangle]\n pub fn _box(x: Box<i32>) -> Box<i32> {\n   x\n@@ -95,48 +95,48 @@ pub fn struct_return() -> S {\n pub fn helper(_: usize) {\n }\n \n-// CHECK: @slice([0 x i8]* noalias nonnull readonly %arg0.0, [[USIZE]] %arg0.1)\n+// CHECK: @slice([0 x i8]* noalias nonnull readonly align 1 %arg0.0, [[USIZE]] %arg0.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn slice(_: &[u8]) {\n }\n \n-// CHECK: @mutable_slice([0 x i8]* nonnull %arg0.0, [[USIZE]] %arg0.1)\n+// CHECK: @mutable_slice([0 x i8]* nonnull align 1 %arg0.0, [[USIZE]] %arg0.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_slice(_: &mut [u8]) {\n }\n \n-// CHECK: @unsafe_slice([0 x i16]* nonnull %arg0.0, [[USIZE]] %arg0.1)\n+// CHECK: @unsafe_slice([0 x i16]* nonnull align 2 %arg0.0, [[USIZE]] %arg0.1)\n // unsafe interior means this isn't actually readonly and there may be aliases ...\n #[no_mangle]\n pub fn unsafe_slice(_: &[UnsafeInner]) {\n }\n \n-// CHECK: @str([0 x i8]* noalias nonnull readonly %arg0.0, [[USIZE]] %arg0.1)\n+// CHECK: @str([0 x i8]* noalias nonnull readonly align 1 %arg0.0, [[USIZE]] %arg0.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn str(_: &[u8]) {\n }\n \n-// CHECK: @trait_borrow({}* nonnull %arg0.0, [3 x [[USIZE]]]* noalias readonly dereferenceable({{.*}}) %arg0.1)\n+// CHECK: @trait_borrow({}* nonnull align 1 %arg0.0, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}) %arg0.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn trait_borrow(_: &Drop) {\n }\n \n-// CHECK: @trait_box({}* noalias nonnull, [3 x [[USIZE]]]* noalias readonly dereferenceable({{.*}}))\n+// CHECK: @trait_box({}* noalias nonnull align 1, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}))\n #[no_mangle]\n pub fn trait_box(_: Box<Drop>) {\n }\n \n-// CHECK: { i8*, i8* } @trait_option(i8* noalias %x.0, i8* %x.1)\n+// CHECK: { i8*, i8* } @trait_option(i8* noalias align 1 %x.0, i8* %x.1)\n #[no_mangle]\n pub fn trait_option(x: Option<Box<Drop>>) -> Option<Box<Drop>> {\n   x\n }\n \n-// CHECK: { [0 x i16]*, [[USIZE]] } @return_slice([0 x i16]* noalias nonnull readonly %x.0, [[USIZE]] %x.1)\n+// CHECK: { [0 x i16]*, [[USIZE]] } @return_slice([0 x i16]* noalias nonnull readonly align 2 %x.0, [[USIZE]] %x.1)\n #[no_mangle]\n pub fn return_slice(x: &[u16]) -> &[u16] {\n   x"}]}