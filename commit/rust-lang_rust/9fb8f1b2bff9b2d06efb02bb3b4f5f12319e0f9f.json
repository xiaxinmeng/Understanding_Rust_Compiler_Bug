{"sha": "9fb8f1b2bff9b2d06efb02bb3b4f5f12319e0f9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYjhmMWIyYmZmOWIyZDA2ZWZiMDJiYjNiNGY1ZjEyMzE5ZTBmOWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T20:43:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-30T20:43:33Z"}, "message": "Rollup merge of #62469 - czipperz:liballoc-add-doc-links, r=GuillaumeGomez\n\nAdd doc links to liballoc crate page", "tree": {"sha": "91e1a968e00817ce2c0dc108fe5cc814143e2ebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e1a968e00817ce2c0dc108fe5cc814143e2ebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb8f1b2bff9b2d06efb02bb3b4f5f12319e0f9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdQKv1CRBK7hj4Ov3rIwAAdHIIAKJQjY6YrgFKs0WzjXGBt8W1\nBD9V87itFlETGF5VdYl44M2kYBz1KrtPtpFZ1hhFh4kdQ8tjP4E1AuEVu723qw3f\nthtFLWYO83nnYUhzPnUsN6Jaizp7a/th8ZxD2clHp0PeBt9bPr3t4bjSikP1FVce\naVzFXGzsnusjjOWzkmZBSfFTZ9rbCtVjP7IhhlAl7YiM/3zGn8mtlXbuhhGtSi0K\nHsuM2qv35cabfc+ZIcIYcvA9Z1k7LVk9HRba9eIbi5hGhTH21cUJ/WbXLu1xiCiC\nh8Sg4dUn5MS3CO6+qReNpxANqCtW7bzFOYnYOypwtffEvf0K1Fafaq3gB4nM7E0=\n=rIHc\n-----END PGP SIGNATURE-----\n", "payload": "tree 91e1a968e00817ce2c0dc108fe5cc814143e2ebf\nparent d8280faabf6580d994cccf28b0678673a349bd5a\nparent 2534b287a6078688db25ee36ad084afc7378f6e4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564519413 +0200\ncommitter GitHub <noreply@github.com> 1564519413 +0200\n\nRollup merge of #62469 - czipperz:liballoc-add-doc-links, r=GuillaumeGomez\n\nAdd doc links to liballoc crate page\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb8f1b2bff9b2d06efb02bb3b4f5f12319e0f9f", "html_url": "https://github.com/rust-lang/rust/commit/9fb8f1b2bff9b2d06efb02bb3b4f5f12319e0f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb8f1b2bff9b2d06efb02bb3b4f5f12319e0f9f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8280faabf6580d994cccf28b0678673a349bd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8280faabf6580d994cccf28b0678673a349bd5a", "html_url": "https://github.com/rust-lang/rust/commit/d8280faabf6580d994cccf28b0678673a349bd5a"}, {"sha": "2534b287a6078688db25ee36ad084afc7378f6e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2534b287a6078688db25ee36ad084afc7378f6e4", "html_url": "https://github.com/rust-lang/rust/commit/2534b287a6078688db25ee36ad084afc7378f6e4"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "3a7dce88a163502606ecd8e018c83845894e5d2a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8f1b2bff9b2d06efb02bb3b4f5f12319e0f9f/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8f1b2bff9b2d06efb02bb3b4f5f12319e0f9f/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=9fb8f1b2bff9b2d06efb02bb3b4f5f12319e0f9f", "patch": "@@ -10,30 +10,30 @@\n //!\n //! ## Boxed values\n //!\n-//! The [`Box`](boxed/index.html) type is a smart pointer type. There can\n-//! only be one owner of a `Box`, and the owner can decide to mutate the\n-//! contents, which live on the heap.\n+//! The [`Box`] type is a smart pointer type. There can only be one owner of a\n+//! [`Box`], and the owner can decide to mutate the contents, which live on the\n+//! heap.\n //!\n //! This type can be sent among threads efficiently as the size of a `Box` value\n //! is the same as that of a pointer. Tree-like data structures are often built\n //! with boxes because each node often has only one owner, the parent.\n //!\n //! ## Reference counted pointers\n //!\n-//! The [`Rc`](rc/index.html) type is a non-threadsafe reference-counted pointer\n-//! type intended for sharing memory within a thread. An `Rc` pointer wraps a\n-//! type, `T`, and only allows access to `&T`, a shared reference.\n+//! The [`Rc`] type is a non-threadsafe reference-counted pointer type intended\n+//! for sharing memory within a thread. An [`Rc`] pointer wraps a type, `T`, and\n+//! only allows access to `&T`, a shared reference.\n //!\n-//! This type is useful when inherited mutability (such as using `Box`) is too\n-//! constraining for an application, and is often paired with the `Cell` or\n-//! `RefCell` types in order to allow mutation.\n+//! This type is useful when inherited mutability (such as using [`Box`]) is too\n+//! constraining for an application, and is often paired with the [`Cell`] or\n+//! [`RefCell`] types in order to allow mutation.\n //!\n //! ## Atomically reference counted pointers\n //!\n-//! The [`Arc`](sync/index.html) type is the threadsafe equivalent of the `Rc`\n-//! type. It provides all the same functionality of `Rc`, except it requires\n-//! that the contained type `T` is shareable. Additionally, `Arc<T>` is itself\n-//! sendable while `Rc<T>` is not.\n+//! The [`Arc`] type is the threadsafe equivalent of the [`Rc`] type. It\n+//! provides all the same functionality of [`Rc`], except it requires that the\n+//! contained type `T` is shareable. Additionally, [`Arc<T>`][`Arc`] is itself\n+//! sendable while [`Rc<T>`][`Rc`] is not.\n //!\n //! This type allows for shared access to the contained data, and is often\n //! paired with synchronization primitives such as mutexes to allow mutation of\n@@ -49,6 +49,12 @@\n //!\n //! The [`alloc`](alloc/index.html) module defines the low-level interface to the\n //! default global allocator. It is not compatible with the libc allocator API.\n+//!\n+//! [`Arc`]: sync/index.html\n+//! [`Box`]: boxed/index.html\n+//! [`Cell`]: ../core/cell/index.html\n+//! [`Rc`]: rc/index.html\n+//! [`RefCell`]: ../core/cell/index.html\n \n #![allow(unused_attributes)]\n #![stable(feature = \"alloc\", since = \"1.36.0\")]"}]}