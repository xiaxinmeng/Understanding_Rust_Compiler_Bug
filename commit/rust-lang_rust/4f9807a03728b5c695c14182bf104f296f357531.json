{"sha": "4f9807a03728b5c695c14182bf104f296f357531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOTgwN2EwMzcyOGI1YzY5NWMxNDE4MmJmMTA0ZjI5NmYzNTc1MzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-02T16:50:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-02T16:50:39Z"}, "message": "[PATCH] Disable all trait object unsizing", "tree": {"sha": "1e255b0077cf115e8f84d78c213a173554abd538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e255b0077cf115e8f84d78c213a173554abd538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f9807a03728b5c695c14182bf104f296f357531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9807a03728b5c695c14182bf104f296f357531", "html_url": "https://github.com/rust-lang/rust/commit/4f9807a03728b5c695c14182bf104f296f357531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f9807a03728b5c695c14182bf104f296f357531/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f52a1937d24238ae83bfa746a09f466c3cedb3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f52a1937d24238ae83bfa746a09f466c3cedb3d", "html_url": "https://github.com/rust-lang/rust/commit/6f52a1937d24238ae83bfa746a09f466c3cedb3d"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "96226073ce3f08405a641d9f8a1af77b29249c3a", "filename": "0006-Disable-all-trait-object-unsizing.patch", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/4f9807a03728b5c695c14182bf104f296f357531/0006-Disable-all-trait-object-unsizing.patch", "raw_url": "https://github.com/rust-lang/rust/raw/4f9807a03728b5c695c14182bf104f296f357531/0006-Disable-all-trait-object-unsizing.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0006-Disable-all-trait-object-unsizing.patch?ref=4f9807a03728b5c695c14182bf104f296f357531", "patch": "@@ -0,0 +1,137 @@\n+From 307aba455c6ee3227d7c522c07761cda19dc716c Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Wed, 29 Aug 2018 14:29:05 +0200\n+Subject: [PATCH] Disable all trait object unsizing\n+\n+---\n+ src/libcore/alloc.rs        |  2 +-\n+ src/libcore/fmt/builders.rs | 13 ++++++++-----\n+ src/libcore/fmt/mod.rs      |  3 ++-\n+ src/libcore/panic.rs        |  5 +++--\n+ src/libcore/slice/mod.rs    |  2 +-\n+ 5 files changed, 15 insertions(+), 10 deletions(-)\n+\n+diff --git a/src/libcore/alloc.rs b/src/libcore/alloc.rs\n+index 35e4eea..28b6e2f 100644\n+--- a/src/libcore/alloc.rs\n++++ b/src/libcore/alloc.rs\n+@@ -144,7 +144,7 @@ impl Layout {\n+     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+     #[inline]\n+     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n+-        let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n++        let (size, align) = panic!(); //(mem::size_of_val(t), mem::align_of_val(t));\n+         // See rationale in `new` for why this us using an unsafe variant below\n+         debug_assert!(Layout::from_size_align(size, align).is_ok());\n+         unsafe {\n+diff --git a/src/libcore/fmt/builders.rs b/src/libcore/fmt/builders.rs\n+index 3c5f934..1427ab3 100644\n+--- a/src/libcore/fmt/builders.rs\n++++ b/src/libcore/fmt/builders.rs\n+@@ -18,6 +18,7 @@ struct PadAdapter<'a> {\n+ impl<'a> PadAdapter<'a> {\n+     fn wrap<'b, 'c: 'a+'b>(fmt: &'c mut fmt::Formatter, slot: &'b mut Option<Self>)\n+                         -> fmt::Formatter<'b> {\n++        /*\n+         fmt.wrap_buf(move |buf| {\n+             *slot = Some(PadAdapter {\n+                 buf,\n+@@ -25,6 +26,8 @@ impl<'a> PadAdapter<'a> {\n+             });\n+             slot.as_mut().unwrap()\n+         })\n++        */\n++        panic!();\n+     }\n+ }\n+\n+@@ -107,7 +110,7 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n+ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n+     /// Adds a new field to the generated struct output.\n+     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n+-    pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n++    pub fn field(&mut self, name: &str, value: &impl fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n+         self.result = self.result.and_then(|_| {\n+             let prefix = if self.has_fields {\n+                 \",\"\n+@@ -204,7 +207,7 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n+ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n+     /// Adds a new field to the generated tuple struct output.\n+     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n+-    pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n++    pub fn field(&mut self, value: &impl fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n+         self.result = self.result.and_then(|_| {\n+             let (prefix, space) = if self.fields > 0 {\n+                 (\",\", \" \")\n+@@ -258,7 +261,7 @@ struct DebugInner<'a, 'b: 'a> {\n+ }\n+\n+ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n+-    fn entry(&mut self, entry: &dyn fmt::Debug) {\n++    fn entry(&mut self, entry: &impl fmt::Debug) {\n+         self.result = self.result.and_then(|_| {\n+             if self.is_pretty() {\n+                 let mut slot = None;\n+@@ -340,7 +343,7 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n+ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n+     /// Adds a new entry to the set output.\n+     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n+-    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugSet<'a, 'b> {\n++    pub fn entry(&mut self, entry: &impl fmt::Debug) -> &mut DebugSet<'a, 'b> {\n+         self.inner.entry(entry);\n+         self\n+     }\n+@@ -411,7 +414,7 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n+ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n+     /// Adds a new entry to the list output.\n+     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n+-    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugList<'a, 'b> {\n++    pub fn entry(&mut self, entry: &impl fmt::Debug) -> &mut DebugList<'a, 'b> {\n+         self.inner.entry(entry);\n+         self\n+     }\n+diff --git a/src/libcore/fmt/mod.rs b/src/libcore/fmt/mod.rs\n+index 928f95e..ad33906 100644\n+--- a/src/libcore/fmt/mod.rs\n++++ b/src/libcore/fmt/mod.rs\n+@@ -224,7 +224,8 @@ pub trait Write {\n+             }\n+         }\n+\n+-        write(&mut Adapter(self), args)\n++        //write(&mut Adapter(self), args)\n++        panic!()\n+     }\n+ }\n+\n+diff --git a/src/libcore/panic.rs b/src/libcore/panic.rs\n+index 17cac5a..27b7dde 100644\n+--- a/src/libcore/panic.rs\n++++ b/src/libcore/panic.rs\n+@@ -58,8 +58,9 @@ impl<'a> PanicInfo<'a> {\n+     pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n+                                 location: Location<'a>)\n+                                 -> Self {\n+-        struct NoPayload;\n+-        PanicInfo { payload: &NoPayload, location, message }\n++        //struct NoPayload;\n++        //PanicInfo { payload: &NoPayload, location, message }\n++        panic!();\n+     }\n+\n+     #[doc(hidden)]\n+diff --git a/src/libcore/slice/mod.rs b/src/libcore/slice/mod.rs\n+index 88fdd76..8537f0e 100644\n+--- a/src/libcore/slice/mod.rs\n++++ b/src/libcore/slice/mod.rs\n+@@ -4003,7 +4003,7 @@ impl<A> SlicePartialEq<A> for [A]\n+             return true;\n+         }\n+         unsafe {\n+-            let size = mem::size_of_val(self);\n++            let size = panic!(); //mem::size_of_val(self);\n+             memcmp(self.as_ptr() as *const u8,\n+                    other.as_ptr() as *const u8, size) == 0\n+         }\n+--\n+2.11.0"}]}