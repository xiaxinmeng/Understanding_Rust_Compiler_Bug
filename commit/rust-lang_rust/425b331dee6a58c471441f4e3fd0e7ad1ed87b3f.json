{"sha": "425b331dee6a58c471441f4e3fd0e7ad1ed87b3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNWIzMzFkZWU2YTU4YzQ3MTQ0MWY0ZTNmZDBlN2FkMWVkODdiM2Y=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-07-10T23:03:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T00:05:25Z"}, "message": "fuzzer.rs is now a pseudo-fuzzer that takes an AST and replaces expressions inside it", "tree": {"sha": "48d6d53555fb7e893cf86619e73adf6bf7463684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d6d53555fb7e893cf86619e73adf6bf7463684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/425b331dee6a58c471441f4e3fd0e7ad1ed87b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/425b331dee6a58c471441f4e3fd0e7ad1ed87b3f", "html_url": "https://github.com/rust-lang/rust/commit/425b331dee6a58c471441f4e3fd0e7ad1ed87b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/425b331dee6a58c471441f4e3fd0e7ad1ed87b3f/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4781bf8dd26b8823a981597aa9c73b1083177b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4781bf8dd26b8823a981597aa9c73b1083177b2", "html_url": "https://github.com/rust-lang/rust/commit/b4781bf8dd26b8823a981597aa9c73b1083177b2"}], "stats": {"total": 125, "additions": 111, "deletions": 14}, "files": [{"sha": "2c7b8ff58698cdfcdb4fae70956814aa34b5ce07", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 111, "deletions": 14, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/425b331dee6a58c471441f4e3fd0e7ad1ed87b3f/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425b331dee6a58c471441f4e3fd0e7ad1ed87b3f/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=425b331dee6a58c471441f4e3fd0e7ad1ed87b3f", "patch": "@@ -7,28 +7,127 @@ import std::getopts::optopt;\n import std::getopts::opt_present;\n import std::getopts::opt_str;\n import std::io;\n+import std::io::stdout;\n import std::vec;\n import std::ivec;\n import std::str;\n+import std::uint;\n \n-import rustc::back::link;\n import rustc::syntax::ast;\n+import rustc::syntax::fold;\n+import rustc::syntax::walk;\n+import rustc::syntax::codemap;\n+import rustc::syntax::print::pprust;\n+\n import driver = rustc::driver::rustc; // see https://github.com/graydon/rust/issues/624\n+import rustc::back::link;\n+import rustc::driver::rustc::time;\n import rustc::driver::session;\n \n+/*\n+// Imports for \"the rest of driver::compile_input\"\n+import rustc::metadata::creader;\n+import rustc::metadata::cstore;\n+import rustc::syntax::parse::parser;\n+import rustc::syntax::parse::token;\n+import rustc::front;\n+import rustc::front::attr;\n+import rustc::middle;\n+import rustc::middle::trans;\n+import rustc::middle::resolve;\n+import rustc::middle::ty;\n+import rustc::middle::typeck;\n+import rustc::middle::tstate::ck;\n+import rustc::syntax::print::pp;\n+import rustc::util::ppaux;\n+import rustc::lib::llvm;\n+*/\n \n-fn find_rust_files(&mutable str[] files, str root) {\n-    for (str filename in fs::list_dir(root)) {\n-        if (str::ends_with(filename, \".rs\")) {\n-           files += ~[filename];\n+fn file_contains(&str filename, &str needle) -> bool {\n+    auto r = io::file_reader(filename);\n+    auto contents = str::unsafe_from_bytes(r.read_whole_stream());\n+    ret str::find(contents, needle) != -1;\n+}\n+\n+fn find_rust_files(&mutable str[] files, str path) {\n+    if (str::ends_with(path, \".rs\")) {\n+        if (file_contains(path, \"xfail-stage1\")) {\n+            //log_err \"Skipping \" + path + \" because it is marked as xfail-stage1\";\n+        } else if (\n+            !str::ends_with(path, \"constrained-type.rs\") &&     // https://github.com/graydon/rust/issues/653\n+             str::find(path, \"utf8\") != -1 &&  // https://github.com/graydon/rust/issues/654\n+             true) {\n+            //log_err \"Skipping \" + path + \" because of a known bug\";\n+        } else {\n+            files += ~[path];\n+        }\n+    } else if (fs::file_is_dir(path) && str::find(path, \"compile-fail\") == -1) {\n+        for (str p in fs::list_dir(path)) {\n+            find_rust_files(files, p);\n+        }\n+    }\n+}\n+\n+fn steal_exprs(&ast::crate crate) -> ast::expr[] {\n+    let @mutable ast::expr[] exprs = @mutable ~[];\n+    // \"Stash\" cannot be type-parameterized because of https://github.com/graydon/rust/issues/375\n+    fn stash_expr(@mutable ast::expr[] es, &@ast::expr e) { *es += ~[*e]; }\n+    auto v = rec(visit_expr_pre = bind stash_expr(exprs, _) with walk::default_visitor());\n+    walk::walk_crate(v, crate);\n+    *exprs\n+}\n+\n+// https://github.com/graydon/rust/issues/652\n+fn safe_to_replace(ast::expr_ e) -> bool {\n+    alt (e) {\n+        case (ast::expr_if(_, _, _)) { false }\n+        case (ast::expr_block(_)) { false }\n+        case (_) { true }\n+    }\n+}\n+\n+// Replace the |i|th expr (in fold order) of |crate| with |newexpr|.\n+fn replace_expr_in_crate(&ast::crate crate, uint i, ast::expr_ newexpr) -> ast::crate {\n+    let @mutable uint j = @mutable 0u;\n+    fn fold_expr_rep(@mutable uint j_, uint i_, &ast::expr_ newexpr_, &ast::expr_ original, fold::ast_fold fld) -> ast::expr_ {\n+      *j_ += 1u;\n+      if (i_ + 1u == *j_ && safe_to_replace(original)) {\n+        newexpr_\n+      } else {\n+        fold::noop_fold_expr(original, fld)\n+      }\n+    }\n+    auto afp = rec(fold_expr = bind fold_expr_rep(j, i, newexpr, _, _) with *fold::default_ast_fold());\n+    auto af = fold::make_fold(afp);\n+    let @ast::crate crate2 = @af.fold_crate(crate);\n+    fold::dummy_out(af); // work around a leak (https://github.com/graydon/rust/issues/651)\n+    *crate2\n+}\n+\n+iter under(uint n) -> uint { let uint i = 0u; while (i < n) { put i; i += 1u; } }\n+\n+fn devnull() -> io::writer { std::io::string_writer().get_writer() }\n+\n+fn pp_variants(&ast::crate crate, &session::session sess, &str filename) {\n+    auto exprs = steal_exprs(crate);\n+    auto exprsL = ivec::len(exprs);\n+    if (exprsL < 100u) {\n+        for each (uint i in under(uint::min(exprsL, 20u))) {\n+            log_err \"Replacing... \" + pprust::expr_to_str(@exprs.(i));\n+            for each (uint j in under(uint::min(exprsL, 5u))) {\n+                log_err \"With... \" + pprust::expr_to_str(@exprs.(j));\n+                auto crate2 = @replace_expr_in_crate(crate, i, exprs.(j).node);\n+                pprust::print_crate(sess.get_codemap(), crate2, filename, devnull(), pprust::no_ann());\n+            }\n         }\n     }\n }\n \n fn main(vec[str] args) {\n     auto files = ~[];\n-    auto root = \"/Users/jruderman/code/rust/src/lib/\"; // XXX\n-    find_rust_files(files, root); // not using driver::time here because that currently screws with passing-a-mutable-array\n+    auto root = \"/Users/jruderman/code/rust/src/\"; // XXX\n+    find_rust_files(files, root); // not using time here because that currently screws with passing-a-mutable-array\n+    log_err uint::str(ivec::len(files)) + \" files\";\n \n     auto binary = vec::shift[str](args);\n     auto binary_dir = fs::dirname(binary);\n@@ -50,14 +149,12 @@ fn main(vec[str] args) {\n              cfg=~[],\n              test=false);\n \n-    let session::session sess = driver::build_session(sopts);\n-\n-    log_err ivec::len(files);\n     for (str file in files) {\n-        log_err file;\n-        // Can't use parse_input here because of https://github.com/graydon/rust/issues/632 :(\n-        //auto crate = driver::parse_input(sess, ~[], file);\n-        //let @ast::crate crate = driver::time(true, \"parsing \" + file, bind driver::parse_input(sess, ~[], file));\n+        log_err \"=== \" + file + \" ===\";\n+        let session::session sess = driver::build_session(sopts);\n+        let @ast::crate crate = time(true, \"parsing \" + file, bind driver::parse_input(sess, ~[], file));\n+        pprust::print_crate(sess.get_codemap(), crate, file, devnull(), pprust::no_ann());\n+        pp_variants(*crate, sess, file);\n     }\n }\n "}]}