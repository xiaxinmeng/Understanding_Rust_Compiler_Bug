{"sha": "bd03371f711adcb7724c939ea053f4090e87c16f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMDMzNzFmNzExYWRjYjc3MjRjOTM5ZWEwNTNmNDA5MGU4N2MxNmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-31T09:39:30Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:16Z"}, "message": "Add stack traces to miri errors", "tree": {"sha": "b052b81c10cad02d120d6c6be07e13bb215fbf63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b052b81c10cad02d120d6c6be07e13bb215fbf63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd03371f711adcb7724c939ea053f4090e87c16f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53gACgkQpp+NIls6\n19myeQ/+N7WRpYqQtM/3xPvXmSnKPPqT348o2m9Hhkxf8uwA1QcbnmPEgRpl3VPl\naG5Usgda95YEaDJdY1WsXCO3/FeNJiJtapho57a1WliaKQg53/ePy8mgu3QfH+FH\ndtfvP6eNjpFLawujQq64fFPi04bGz44lq5VLLQxK/NNpnoBCUbZ+t7veZrsyfCjD\nHHHO60pHkz5jyUveqR5mFxnnFk2HSvL8E9tto/yCdnKh7us7aeEyeVYCi3PSZET1\n1iYJmpoq6Awe7ATfbNWwmlMpUJJdBQwX7a7IhuaKJDajUVIyjtkIUIoTPCYp4HOY\nDNwyVWaS6GfuKS17yC+LHhSlJ12Tusd5gKjWyu1bVcqpPGMX1sauJxuCHgzzMnRy\nCayRB6OSYYPln6cHQ1SGV5kHDH1wX2p18pqDjjURM4r1mXcnW87gP6nowEJ/ChLw\neBA+YHWil8dG5OUtY1OyeDMROQxlUdZ0Npd4YHOSBE2xTaB4it8sNQJ8X6n65pLL\ncNe4D7TeVWMQuFD2otBGUTyFUvEVvkIXUjMpi4g6zn57czpwFYrnVER69d/QfxOV\nRErpiyh2O3M88HnoJbXJravjMfFK2euGVGBkJ6S7yBm/aKS7+juG4mjwimp02hYg\n/B/4zge7oFJYhNY2zdr9uckVzSdPb2/mN7nLJzqzASFbOf/E2fs=\n=ae5A\n-----END PGP SIGNATURE-----", "payload": "tree b052b81c10cad02d120d6c6be07e13bb215fbf63\nparent 8c53d54b98edd77e32fbf4f4fd27d312b251ec6b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517391570 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494456 +0100\n\nAdd stack traces to miri errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd03371f711adcb7724c939ea053f4090e87c16f", "html_url": "https://github.com/rust-lang/rust/commit/bd03371f711adcb7724c939ea053f4090e87c16f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd03371f711adcb7724c939ea053f4090e87c16f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c53d54b98edd77e32fbf4f4fd27d312b251ec6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c53d54b98edd77e32fbf4f4fd27d312b251ec6b", "html_url": "https://github.com/rust-lang/rust/commit/8c53d54b98edd77e32fbf4f4fd27d312b251ec6b"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "a398549f35930c324bf8beb81b0faf1d9c43b9c0", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=bd03371f711adcb7724c939ea053f4090e87c16f", "patch": "@@ -440,6 +440,11 @@ impl_stable_hash_for!(struct ::middle::const_val::ConstEvalErr<'tcx> {\n     kind\n });\n \n+impl_stable_hash_for!(struct ::middle::const_val::FrameInfo {\n+    span,\n+    location\n+});\n+\n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n for ::middle::const_val::ErrKind<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -468,7 +473,10 @@ for ::middle::const_val::ErrKind<'gcx> {\n             LayoutError(ref layout_error) => {\n                 layout_error.hash_stable(hcx, hasher);\n             }\n-            Miri(ref err) => err.hash_stable(hcx, hasher),\n+            Miri(ref err, ref trace) => {\n+                err.hash_stable(hcx, hasher);\n+                trace.hash_stable(hcx, hasher);\n+            },\n         }\n     }\n }\n@@ -489,9 +497,9 @@ for ::mir::interpret::EvalError<'gcx> {\n                                           hasher: &mut StableHasher<W>) {\n         use mir::interpret::EvalErrorKind::*;\n \n-        mem::discriminant(&*self.kind).hash_stable(hcx, hasher);\n+        mem::discriminant(&self.kind).hash_stable(hcx, hasher);\n \n-        match *self.kind {\n+        match self.kind {\n             DanglingPointerDeref |\n             DoubleFree |\n             InvalidMemoryAccess |"}, {"sha": "d6d23c5cad8ad45f34acb74c2febcf8cc6558b73", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=bd03371f711adcb7724c939ea053f4090e87c16f", "patch": "@@ -19,6 +19,7 @@ use graphviz::IntoCow;\n use syntax_pos::Span;\n \n use std::borrow::Cow;\n+use std::rc::Rc;\n \n pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ConstEvalErr<'tcx>>;\n \n@@ -51,7 +52,7 @@ impl<'tcx> ConstVal<'tcx> {\n #[derive(Clone, Debug)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub kind: ErrKind<'tcx>,\n+    pub kind: Rc<ErrKind<'tcx>>,\n }\n \n #[derive(Clone, Debug)]\n@@ -66,13 +67,13 @@ pub enum ErrKind<'tcx> {\n \n     TypeckError,\n     CheckMatchError,\n-    Miri(::mir::interpret::EvalError<'tcx>),\n+    Miri(::mir::interpret::EvalError<'tcx>, Vec<FrameInfo>),\n }\n \n-impl<'tcx> From<::mir::interpret::EvalError<'tcx>> for ErrKind<'tcx> {\n-    fn from(err: ::mir::interpret::EvalError<'tcx>) -> ErrKind<'tcx> {\n-        ErrKind::Miri(err)\n-    }\n+#[derive(Clone, Debug)]\n+pub struct FrameInfo {\n+    pub span: Span,\n+    pub location: String,\n }\n \n impl<'tcx> From<ConstMathErr> for ErrKind<'tcx> {\n@@ -85,21 +86,23 @@ impl<'tcx> From<ConstMathErr> for ErrKind<'tcx> {\n }\n \n #[derive(Clone, Debug)]\n-pub enum ConstEvalErrDescription<'a> {\n+pub enum ConstEvalErrDescription<'a, 'tcx: 'a> {\n     Simple(Cow<'a, str>),\n+    Backtrace(&'a ::mir::interpret::EvalError<'tcx>, &'a [FrameInfo]),\n }\n \n-impl<'a> ConstEvalErrDescription<'a> {\n+impl<'a, 'tcx> ConstEvalErrDescription<'a, 'tcx> {\n     /// Return a one-line description of the error, for lints and such\n     pub fn into_oneline(self) -> Cow<'a, str> {\n         match self {\n             ConstEvalErrDescription::Simple(simple) => simple,\n+            ConstEvalErrDescription::Backtrace(miri, _) => format!(\"{}\", miri).into_cow(),\n         }\n     }\n }\n \n impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n-    pub fn description(&self) -> ConstEvalErrDescription {\n+    pub fn description(&'a self) -> ConstEvalErrDescription<'a, 'tcx> {\n         use self::ErrKind::*;\n         use self::ConstEvalErrDescription::*;\n \n@@ -110,7 +113,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             })\n         }\n \n-        match self.kind {\n+        match *self.kind {\n             NonConstPath        => simple!(\"non-constant path in constant expression\"),\n             UnimplementedConstVal(what) =>\n                 simple!(\"unimplemented constant expression: {}\", what),\n@@ -124,8 +127,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n \n             TypeckError => simple!(\"type-checking failed\"),\n             CheckMatchError => simple!(\"match-checking failed\"),\n-            // FIXME: report a full backtrace\n-            Miri(ref err) => simple!(\"{}\", err),\n+            Miri(ref err, ref trace) => Backtrace(err, trace),\n         }\n     }\n \n@@ -150,6 +152,12 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             ConstEvalErrDescription::Simple(message) => {\n                 diag.span_label(self.span, message);\n             }\n+            ConstEvalErrDescription::Backtrace(miri, frames) => {\n+                diag.span_label(self.span, format!(\"{}\", miri));\n+                for frame in frames {\n+                    diag.span_label(frame.span, format!(\"inside call to {}\", frame.location));\n+                }\n+            }\n         }\n \n         if !primary_span.contains(self.span) {\n@@ -163,7 +171,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         primary_span: Span,\n         primary_kind: &str)\n     {\n-        match self.kind {\n+        match *self.kind {\n             ErrKind::TypeckError | ErrKind::CheckMatchError => return,\n             _ => {}\n         }"}, {"sha": "90d10df151530c96dc1e83161ff943d32dd68dff", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=bd03371f711adcb7724c939ea053f4090e87c16f", "patch": "@@ -1,6 +1,5 @@\n use std::error::Error;\n use std::{fmt, env};\n-use std::rc::Rc;\n \n use mir;\n use ty::{FnSig, Ty, layout};\n@@ -15,7 +14,7 @@ use backtrace::Backtrace;\n \n #[derive(Debug, Clone)]\n pub struct EvalError<'tcx> {\n-    pub kind: Rc<EvalErrorKind<'tcx>>,\n+    pub kind: EvalErrorKind<'tcx>,\n     pub backtrace: Option<Backtrace>,\n }\n \n@@ -26,7 +25,7 @@ impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n             _ => None\n         };\n         EvalError {\n-            kind: Rc::new(kind),\n+            kind,\n             backtrace,\n         }\n     }\n@@ -132,7 +131,7 @@ pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n impl<'tcx> Error for EvalError<'tcx> {\n     fn description(&self) -> &str {\n         use self::EvalErrorKind::*;\n-        match *self.kind {\n+        match self.kind {\n             MachineError(ref inner) => inner,\n             FunctionPointerTyMismatch(..) =>\n                 \"tried to call a function through a function pointer of a different type\",\n@@ -253,7 +252,7 @@ impl<'tcx> Error for EvalError<'tcx> {\n impl<'tcx> fmt::Display for EvalError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use self::EvalErrorKind::*;\n-        match *self.kind {\n+        match self.kind {\n             PointerOutOfBounds { ptr, access, allocation_size } => {\n                 write!(f, \"{} at offset {}, outside bounds of allocation {} which has size {}\",\n                        if access { \"memory access\" } else { \"pointer computed\" },"}, {"sha": "cd2d0d7e2a043d297715b7d37818ab112570b922", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=bd03371f711adcb7724c939ea053f4090e87c16f", "patch": "@@ -775,7 +775,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             ConstEvalFailure(ref err) => {\n-                if let ::middle::const_val::ErrKind::TypeckError = err.kind {\n+                if let ::middle::const_val::ErrKind::TypeckError = *err.kind {\n                     return;\n                 }\n                 err.struct_error(self.tcx, span, \"constant expression\")"}, {"sha": "15925a19d75a2d793b19682652240243913317ff", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=bd03371f711adcb7724c939ea053f4090e87c16f", "patch": "@@ -536,7 +536,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                             } else {\n                                 Err(CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n                                     span: obligation.cause.span,\n-                                    kind: ErrKind::UnimplementedConstVal(\"could not resolve\"),\n+                                    kind: ErrKind::UnimplementedConstVal(\"could not resolve\").into(),\n                                 })))\n                             }\n                         },"}, {"sha": "c1a4f5ef45884b93080b9c4ee5f795e06a45c294", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd03371f711adcb7724c939ea053f4090e87c16f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=bd03371f711adcb7724c939ea053f4090e87c16f", "patch": "@@ -578,10 +578,10 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n     type Lifted = ConstEvalErr<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&self.kind).map(|kind| {\n+        tcx.lift(&*self.kind).map(|kind| {\n             ConstEvalErr {\n                 span: self.span,\n-                kind,\n+                kind: Rc::new(kind),\n             }\n         })\n     }\n@@ -591,7 +591,7 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n     type Lifted = interpret::EvalError<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         use ::mir::interpret::EvalErrorKind::*;\n-        let kind = match *self.kind {\n+        let kind = match self.kind {\n             MachineError(ref err) => MachineError(err.clone()),\n             FunctionPointerTyMismatch(a, b) => FunctionPointerTyMismatch(\n                 tcx.lift(&a)?,\n@@ -691,7 +691,7 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n             TypeckError => TypeckError,\n         };\n         Some(interpret::EvalError {\n-            kind: Rc::new(kind),\n+            kind: kind,\n             backtrace: self.backtrace.clone(),\n         })\n     }\n@@ -714,7 +714,7 @@ impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n \n             TypeckError => TypeckError,\n             CheckMatchError => CheckMatchError,\n-            Miri(ref e) => return tcx.lift(e).map(Miri),\n+            Miri(ref e, ref frames) => return tcx.lift(e).map(|e| Miri(e, frames.clone())),\n         })\n     }\n }"}]}