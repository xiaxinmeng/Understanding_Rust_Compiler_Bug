{"sha": "2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMDBiZDhjNmE5NDc2ZGJhYzQyN2M4NDk0MWZlNmY1NGE4YTk1YjE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-16T12:23:43Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-16T12:23:43Z"}, "message": "Propogate fixture meta to AnalysisHost\n\nExcept crate name.", "tree": {"sha": "9baa7a6b0cc0864ce2af3627404f6393402287be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9baa7a6b0cc0864ce2af3627404f6393402287be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "html_url": "https://github.com/rust-lang/rust/commit/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dde9b19943d3f9557520428c92a52d75fb1deb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dde9b19943d3f9557520428c92a52d75fb1deb3", "html_url": "https://github.com/rust-lang/rust/commit/2dde9b19943d3f9557520428c92a52d75fb1deb3"}], "stats": {"total": 129, "additions": 113, "deletions": 16}, "files": [{"sha": "fd535ab15d4ee5634ebf58d54ec258ad5a8284ce", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "patch": "@@ -254,20 +254,14 @@ impl From<&FixtureMeta> for ParsedMeta {\n             }\n             FixtureMeta::File(f) => Self::File(FileMeta {\n                 path: f.path.to_owned().into(),\n-                krate: f.krate.to_owned().into(),\n+                krate: f.crate_name.to_owned().into(),\n                 deps: f.deps.to_owned(),\n                 cfg: f.cfg.to_owned(),\n                 edition: f\n                     .edition\n                     .as_ref()\n                     .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n-                env: {\n-                    let mut env = Env::default();\n-                    for (k, v) in &f.env {\n-                        env.set(&k, v.to_owned());\n-                    }\n-                    env\n-                },\n+                env: Env::from(f.env.iter()),\n             }),\n         }\n     }"}, {"sha": "4d2d3b48a0c073f71ef52ec62f4367883c405924", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "patch": "@@ -311,6 +311,21 @@ impl fmt::Display for Edition {\n     }\n }\n \n+impl<'a, T> From<T> for Env\n+where\n+    T: Iterator<Item = (&'a String, &'a String)>,\n+{\n+    fn from(iter: T) -> Self {\n+        let mut result = Self::default();\n+\n+        for (k, v) in iter {\n+            result.entries.insert(k.to_owned(), v.to_owned());\n+        }\n+\n+        result\n+    }\n+}\n+\n impl Env {\n     pub fn set(&mut self, env: &str, value: String) {\n         self.entries.insert(env.to_owned(), value);"}, {"sha": "defd8176ff87ddb7dc75ae66e1c7f19340f5322b", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "patch": "@@ -245,6 +245,35 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_call_hierarchy_in_tests_mod() {\n+        check_hierarchy(\n+            r#\"\n+            //- /lib.rs cfg:test\n+            fn callee() {}\n+            fn caller1() {\n+                call<|>ee();\n+            }\n+\n+            #[cfg(test)]\n+            mod tests {\n+                use super::*;\n+\n+                #[test]\n+                fn test_caller() {\n+                    callee();\n+                }\n+            }\n+            \"#,\n+            \"callee FN_DEF FileId(1) 0..14 3..9\",\n+            &[\n+                \"caller1 FN_DEF FileId(1) 15..45 18..25 : [34..40]\",\n+                \"test_caller FN_DEF FileId(1) 93..147 108..119 : [132..138]\",\n+            ],\n+            &[],\n+        );\n+    }\n+\n     #[test]\n     fn test_call_hierarchy_in_different_files() {\n         check_hierarchy("}, {"sha": "ad78d2d93fd4d105b91d1673db85ab32b04581d5", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "patch": "@@ -1,14 +1,15 @@\n //! FIXME: write short doc here\n \n+use std::str::FromStr;\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n use ra_db::{CrateName, Env, RelativePathBuf};\n use test_utils::{extract_offset, extract_range, parse_fixture, FixtureEntry, CURSOR_MARKER};\n \n use crate::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition::Edition2018, FileId, FilePosition,\n-    FileRange, SourceRootId,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n+    SourceRootId,\n };\n \n #[derive(Debug)]\n@@ -46,6 +47,22 @@ impl MockFileData {\n             _ => CfgOptions::default(),\n         }\n     }\n+\n+    fn edition(&self) -> Edition {\n+        match self {\n+            MockFileData::Fixture(f) => {\n+                f.meta.edition().map_or(Edition::Edition2018, |v| Edition::from_str(v).unwrap())\n+            }\n+            _ => Edition::Edition2018,\n+        }\n+    }\n+\n+    fn env(&self) -> Env {\n+        match self {\n+            MockFileData::Fixture(f) => Env::from(f.meta.env()),\n+            _ => Env::default(),\n+        }\n+    }\n }\n \n impl From<FixtureEntry> for MockFileData {\n@@ -153,24 +170,26 @@ impl MockAnalysis {\n             let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n             let cfg_options = data.cfg_options();\n             let file_id = FileId(i as u32 + 1);\n+            let edition = data.edition();\n+            let env = data.env();\n             if path == \"/lib.rs\" || path == \"/main.rs\" {\n                 root_crate = Some(crate_graph.add_crate_root(\n                     file_id,\n-                    Edition2018,\n+                    edition,\n                     None,\n                     cfg_options,\n-                    Env::default(),\n+                    env,\n                     Default::default(),\n                     Default::default(),\n                 ));\n             } else if path.ends_with(\"/lib.rs\") {\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n                 let other_crate = crate_graph.add_crate_root(\n                     file_id,\n-                    Edition2018,\n+                    edition,\n                     Some(CrateName::new(crate_name).unwrap()),\n                     cfg_options,\n-                    Env::default(),\n+                    env,\n                     Default::default(),\n                     Default::default(),\n                 );"}, {"sha": "e7fa201e9e7f25260ac3e21460642d5377929339", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c00bd8c6a9476dbac427c84941fe6f54a8a95b1/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=2c00bd8c6a9476dbac427c84941fe6f54a8a95b1", "patch": "@@ -174,7 +174,7 @@ pub enum FixtureMeta {\n #[derive(Debug, Eq, PartialEq)]\n pub struct FileMeta {\n     pub path: RelativePathBuf,\n-    pub krate: Option<String>,\n+    pub crate_name: Option<String>,\n     pub deps: Vec<String>,\n     pub cfg: CfgOptions,\n     pub edition: Option<String>,\n@@ -189,12 +189,52 @@ impl FixtureMeta {\n         }\n     }\n \n+    pub fn crate_name(&self) -> Option<&String> {\n+        match self {\n+            FixtureMeta::File(f) => f.crate_name.as_ref(),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn cfg_options(&self) -> Option<&CfgOptions> {\n         match self {\n             FixtureMeta::File(f) => Some(&f.cfg),\n             _ => None,\n         }\n     }\n+\n+    pub fn edition(&self) -> Option<&String> {\n+        match self {\n+            FixtureMeta::File(f) => f.edition.as_ref(),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn env(&self) -> impl Iterator<Item = (&String, &String)> {\n+        struct EnvIter<'a> {\n+            iter: Option<std::collections::hash_map::Iter<'a, String, String>>,\n+        }\n+\n+        impl<'a> EnvIter<'a> {\n+            fn new(meta: &'a FixtureMeta) -> Self {\n+                Self {\n+                    iter: match meta {\n+                        FixtureMeta::File(f) => Some(f.env.iter()),\n+                        _ => None,\n+                    },\n+                }\n+            }\n+        }\n+\n+        impl<'a> Iterator for EnvIter<'a> {\n+            type Item = (&'a String, &'a String);\n+            fn next(&mut self) -> Option<Self::Item> {\n+                self.iter.as_mut().and_then(|i| i.next())\n+            }\n+        }\n+\n+        EnvIter::new(self)\n+    }\n }\n \n /// Parses text which looks like this:\n@@ -289,7 +329,7 @@ fn parse_meta(meta: &str) -> FixtureMeta {\n         }\n     }\n \n-    FixtureMeta::File(FileMeta { path, krate, deps, edition, cfg, env })\n+    FixtureMeta::File(FileMeta { path, crate_name: krate, deps, edition, cfg, env })\n }\n \n fn split1(haystack: &str, delim: char) -> Option<(&str, &str)> {"}]}