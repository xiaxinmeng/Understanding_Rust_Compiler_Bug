{"sha": "440f1e2dadaf7c56575b65aa13c30abf9d5cec26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MGYxZTJkYWRhZjdjNTY1NzViNjVhYTEzYzMwYWJmOWQ1Y2VjMjY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-29T11:49:55Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-29T12:55:59Z"}, "message": "rt: use sugary functions rather than manual range loops.", "tree": {"sha": "ca7c7d2fd1091ac75263b98d19e47863e169c8ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca7c7d2fd1091ac75263b98d19e47863e169c8ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440f1e2dadaf7c56575b65aa13c30abf9d5cec26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440f1e2dadaf7c56575b65aa13c30abf9d5cec26", "html_url": "https://github.com/rust-lang/rust/commit/440f1e2dadaf7c56575b65aa13c30abf9d5cec26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440f1e2dadaf7c56575b65aa13c30abf9d5cec26/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e7bdc48e97d369acd51d1c08988fd946ccafd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e7bdc48e97d369acd51d1c08988fd946ccafd2", "html_url": "https://github.com/rust-lang/rust/commit/54e7bdc48e97d369acd51d1c08988fd946ccafd2"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "e5075f8818a0b38f7d525c06e6205186743027d8", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/440f1e2dadaf7c56575b65aa13c30abf9d5cec26/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440f1e2dadaf7c56575b65aa13c30abf9d5cec26/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=440f1e2dadaf7c56575b65aa13c30abf9d5cec26", "patch": "@@ -55,10 +55,11 @@ pub fn clone() -> Option<~[~str]> {\n mod imp {\n     use libc;\n     use option::{Option, Some, None};\n-    use iterator::{Iterator, range};\n+    use iterator::Iterator;\n     use str;\n     use unstable::finally::Finally;\n     use util;\n+    use vec;\n \n     pub unsafe fn init(argc: int, argv: **u8) {\n         let args = load_argc_and_argv(argc, argv);\n@@ -111,11 +112,9 @@ mod imp {\n \n     // Copied from `os`.\n     unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n-        let mut args = ~[];\n-        for i in range(0u, argc as uint) {\n-            args.push(str::raw::from_c_str(*(argv as **libc::c_char).offset(i as int)));\n+        do vec::from_fn(argc as uint) |i| {\n+            str::raw::from_c_str(*(argv as **libc::c_char).offset(i as int))\n         }\n-        args\n     }\n \n     #[cfg(stage0)]"}, {"sha": "14ff1fd58044f56b3b7717e556ddbbe056a4abbd", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/440f1e2dadaf7c56575b65aa13c30abf9d5cec26/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440f1e2dadaf7c56575b65aa13c30abf9d5cec26/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=440f1e2dadaf7c56575b65aa13c30abf9d5cec26", "patch": "@@ -59,7 +59,7 @@ Several modules in `core` are clients of `rt`:\n use cell::Cell;\n use clone::Clone;\n use container::Container;\n-use iterator::{Iterator, range};\n+use iterator::Iterator;\n use option::{Option, None, Some};\n use ptr::RawPtr;\n use rt::local::Local;\n@@ -71,7 +71,8 @@ use rt::work_queue::WorkQueue;\n use rt::uv::uvio::UvEventLoop;\n use unstable::atomics::{AtomicInt, SeqCst};\n use unstable::sync::UnsafeArc;\n-use vec::{OwnedVector, MutableVector};\n+use vec;\n+use vec::{OwnedVector, MutableVector, ImmutableVector};\n \n /// The global (exchange) heap.\n pub mod global_heap;\n@@ -251,25 +252,21 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n \n     // Create a work queue for each scheduler, ntimes. Create an extra\n     // for the main thread if that flag is set. We won't steal from it.\n-    let mut work_queues = ~[];\n-    for _ in range(0u, nscheds) {\n-        let work_queue: WorkQueue<~Task> = WorkQueue::new();\n-        work_queues.push(work_queue);\n-    }\n+    let work_queues: ~[WorkQueue<~Task>] = vec::from_fn(nscheds, |_| WorkQueue::new());\n \n     // The schedulers.\n     let mut scheds = ~[];\n     // Handles to the schedulers. When the main task ends these will be\n     // sent the Shutdown message to terminate the schedulers.\n     let mut handles = ~[];\n \n-    for i in range(0u, nscheds) {\n+    for work_queue in work_queues.iter() {\n         rtdebug!(\"inserting a regular scheduler\");\n \n         // Every scheduler is driven by an I/O event loop.\n         let loop_ = ~UvEventLoop::new();\n         let mut sched = ~Scheduler::new(loop_,\n-                                        work_queues[i].clone(),\n+                                        work_queue.clone(),\n                                         work_queues.clone(),\n                                         sleepers.clone());\n         let handle = sched.make_handle();\n@@ -358,9 +355,8 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n     }\n \n     // Run each remaining scheduler in a thread.\n-    while !scheds.is_empty() {\n+    for sched in scheds.move_rev_iter() {\n         rtdebug!(\"creating regular schedulers\");\n-        let sched = scheds.pop();\n         let sched_cell = Cell::new(sched);\n         let thread = do Thread::start {\n             let mut sched = sched_cell.take();"}]}