{"sha": "cd15b659c7f20d9b740b3c7b53dde9dcd0132f9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTViNjU5YzdmMjBkOWI3NDBiM2M3YjUzZGRlOWRjZDAxMzJmOWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-21T15:28:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-25T14:53:52Z"}, "message": "avoid double-cast in mplace_field", "tree": {"sha": "ba09b94bb3a0cdee4287f1585ffb6ad1ea2a803c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba09b94bb3a0cdee4287f1585ffb6ad1ea2a803c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd15b659c7f20d9b740b3c7b53dde9dcd0132f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd15b659c7f20d9b740b3c7b53dde9dcd0132f9d", "html_url": "https://github.com/rust-lang/rust/commit/cd15b659c7f20d9b740b3c7b53dde9dcd0132f9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd15b659c7f20d9b740b3c7b53dde9dcd0132f9d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de600892da3c86fb92c1dfde455d39657835739", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de600892da3c86fb92c1dfde455d39657835739", "html_url": "https://github.com/rust-lang/rust/commit/9de600892da3c86fb92c1dfde455d39657835739"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "5870266e69a00c81e82a993012b907e897ee9017", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd15b659c7f20d9b740b3c7b53dde9dcd0132f9d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd15b659c7f20d9b740b3c7b53dde9dcd0132f9d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=cd15b659c7f20d9b740b3c7b53dde9dcd0132f9d", "patch": "@@ -396,33 +396,33 @@ where\n         field: u64,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         // Not using the layout method because we want to compute on u64\n-        let offset = match base.layout.fields {\n+        let (offset, field_layout) = match base.layout.fields {\n             layout::FieldPlacement::Arbitrary { ref offsets, .. } => {\n-                offsets[usize::try_from(field).unwrap()]\n+                let field = usize::try_from(field).unwrap();\n+                (offsets[field], base.layout.field(self, field)?)\n             }\n             layout::FieldPlacement::Array { stride, .. } => {\n                 let len = base.len(self)?;\n                 if field >= len {\n                     // This can only be reached in ConstProp and non-rustc-MIR.\n                     throw_ub!(BoundsCheckFailed { len, index: field });\n                 }\n-                Size::mul(stride, field) // `Size` multiplication is checked\n+                // All fields have the same layout.\n+                (Size::mul(stride, field), base.layout.field(self, 9)?)\n             }\n             layout::FieldPlacement::Union(count) => {\n+                let field = usize::try_from(field).unwrap();\n                 assert!(\n-                    field < u64::try_from(count).unwrap(),\n+                    field < count,\n                     \"Tried to access field {} of union {:#?} with {} fields\",\n                     field,\n                     base.layout,\n                     count\n                 );\n                 // Offset is always 0\n-                Size::from_bytes(0)\n+                (Size::from_bytes(0), base.layout.field(self, field)?)\n             }\n         };\n-        // the only way conversion can fail if is this is an array (otherwise we already panicked\n-        // above). In that case, all fields have the same layout.\n-        let field_layout = base.layout.field(self, usize::try_from(field).unwrap_or(0))?;\n \n         // Offset may need adjustment for unsized fields.\n         let (meta, offset) = if field_layout.is_unsized() {"}]}