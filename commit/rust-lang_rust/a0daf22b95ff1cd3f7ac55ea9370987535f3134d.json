{"sha": "a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "node_id": "C_kwDOAAsO6NoAKGEwZGFmMjJiOTVmZjFjZDNmN2FjNTVlYTkzNzA5ODc1MzVmMzEzNGQ", "commit": {"author": {"name": "DaniPopes", "email": "57450786+DaniPopes@users.noreply.github.com", "date": "2023-04-10T19:07:29Z"}, "committer": {"name": "DaniPopes", "email": "57450786+DaniPopes@users.noreply.github.com", "date": "2023-04-10T19:07:29Z"}, "message": "Fix typos in library", "tree": {"sha": "f8efc443c71e799ab49867ffbc3721a497b7c982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8efc443c71e799ab49867ffbc3721a497b7c982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdOrdJNeWRt9kyFLLDwlkDdt6xpIFAmQ0XnEACgkQDwlkDdt6\nxpJXxQ/7BseruG++2oPVJTiu05HFuASIONQC47FEvLoNT5jdDroBSPEGvRvckCtk\nE+Dt0/Qet3qUrN8PWUEQtVdIl8US08u+g6UHlGR0gK1lVomd2PJUVNkenXVWh4KG\nCCpq9CJtJ6jjFQtUuHGRyDz82n21/PWSDABDEzg2wxpT5gOaF8VOCh+2HRkWFf68\nJdcJ6gF1amuXLy3quvHVCfnvWWIvWej+iUJskD9S2dae2DVgap5pKWYA/TGCQMrL\nvOg6U0R0qzoz+YsZo2MInqoc6CA3tWsMUo+m3mxDfRn+hXjOgoOyGuHH/wxosoDT\nAbskqw1VhLO6/CeD+H0S6M/V0WnK8Ho3/+W3EDqE5NEYjXGiKKQy5jKfSNp4r+i4\nym/vB54R3GuVphTjnsC9hCn/TsWJmEHP9mOHhrD+xvwjdHAfqJCui7E37jou6xzN\nQzXRy8WZilS9hds5P0D9YvEGEQwgn76RYEH46Q8apkEr4LHQiAqHXxOCP/rNvaI3\nkyh5gHMm9hteAoiSfh5rFpKfLXxrdo3uJynwgAdz4LISPnSy3vBrA0pe6xrEdXU0\nwjOd0qqqOrEjANtvFjP5A+AXM8AnrxevqCIXsB/jeEGq9rbzbcvVaOwl+E7e8eNB\nqZFF4TdCbkL+bTIuGyEAhePrQPN1gr78xZQZqy5rIji2QIToc3s=\n=PM35\n-----END PGP SIGNATURE-----", "payload": "tree f8efc443c71e799ab49867ffbc3721a497b7c982\nparent a73288371e3fa0a610fbc11e7e8418017bdfde42\nauthor DaniPopes <57450786+DaniPopes@users.noreply.github.com> 1681153649 +0200\ncommitter DaniPopes <57450786+DaniPopes@users.noreply.github.com> 1681153649 +0200\n\nFix typos in library\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "html_url": "https://github.com/rust-lang/rust/commit/a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/comments", "author": {"login": "DaniPopes", "id": 57450786, "node_id": "MDQ6VXNlcjU3NDUwNzg2", "avatar_url": "https://avatars.githubusercontent.com/u/57450786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaniPopes", "html_url": "https://github.com/DaniPopes", "followers_url": "https://api.github.com/users/DaniPopes/followers", "following_url": "https://api.github.com/users/DaniPopes/following{/other_user}", "gists_url": "https://api.github.com/users/DaniPopes/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaniPopes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaniPopes/subscriptions", "organizations_url": "https://api.github.com/users/DaniPopes/orgs", "repos_url": "https://api.github.com/users/DaniPopes/repos", "events_url": "https://api.github.com/users/DaniPopes/events{/privacy}", "received_events_url": "https://api.github.com/users/DaniPopes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DaniPopes", "id": 57450786, "node_id": "MDQ6VXNlcjU3NDUwNzg2", "avatar_url": "https://avatars.githubusercontent.com/u/57450786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaniPopes", "html_url": "https://github.com/DaniPopes", "followers_url": "https://api.github.com/users/DaniPopes/followers", "following_url": "https://api.github.com/users/DaniPopes/following{/other_user}", "gists_url": "https://api.github.com/users/DaniPopes/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaniPopes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaniPopes/subscriptions", "organizations_url": "https://api.github.com/users/DaniPopes/orgs", "repos_url": "https://api.github.com/users/DaniPopes/repos", "events_url": "https://api.github.com/users/DaniPopes/events{/privacy}", "received_events_url": "https://api.github.com/users/DaniPopes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a73288371e3fa0a610fbc11e7e8418017bdfde42", "url": "https://api.github.com/repos/rust-lang/rust/commits/a73288371e3fa0a610fbc11e7e8418017bdfde42", "html_url": "https://github.com/rust-lang/rust/commit/a73288371e3fa0a610fbc11e7e8418017bdfde42"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "3f6c445af7b661b0d5f3f638da35e433ef6c4594", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "patch": "@@ -246,7 +246,7 @@\n //!     - The exception is the last arm, which must be `_ => basic_block` and corresponds to the\n //!       otherwise branch.\n //!  - [`Call`] has an associated function as well. The third argument of this function is a normal\n-//!    function call expresion, for example `my_other_function(a, 5)`.\n+//!    function call expression, for example `my_other_function(a, 5)`.\n //!\n \n #![unstable("}, {"sha": "07fd96f929586e65c53cbfd4d33c92c18332e1e2", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "patch": "@@ -1486,7 +1486,7 @@ where\n }\n \n /// Finds a streak of presorted elements starting at the beginning of the slice. Returns the first\n-/// value that is not part of said streak, and a bool denoting wether the streak was reversed.\n+/// value that is not part of said streak, and a bool denoting whether the streak was reversed.\n /// Streaks can be increasing or decreasing.\n fn find_streak<T, F>(v: &[T], is_less: &mut F) -> (usize, bool)\n where"}, {"sha": "e3a464a1c51a97223dc5f8e641e0dc465248e48e", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "patch": "@@ -1891,7 +1891,7 @@ unsafe fn small_slice_eq(x: &[u8], y: &[u8]) -> bool {\n \n     // SAFETY: Via the conditional above, we know that both `px` and `py`\n     // have the same length, so `px < pxend` implies that `py < pyend`.\n-    // Thus, derefencing both `px` and `py` in the loop below is safe.\n+    // Thus, dereferencing both `px` and `py` in the loop below is safe.\n     //\n     // Moreover, we set `pxend` and `pyend` to be 4 bytes before the actual\n     // end of `px` and `py`. Thus, the final dereference outside of the"}, {"sha": "b29a51f21929156c3e6ab1f8c3302748b75776d0", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "patch": "@@ -1892,7 +1892,7 @@ mod remove_dir_impl {\n         // file descriptor is automatically closed by libc::closedir() now, so give up ownership\n         let new_parent_fd = dir_fd.into_raw_fd();\n         // a valid root is not needed because we do not call any functions involving the full path\n-        // of the DirEntrys.\n+        // of the `DirEntry`s.\n         let dummy_root = PathBuf::new();\n         let inner = InnerReadDir { dirp, root: dummy_root };\n         Ok((ReadDir::new(inner), new_parent_fd))"}, {"sha": "ad8da19b6daa8332d858520766578f230b1a356e", "filename": "library/std/src/sys/windows/c/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Ferrors.rs?ref=a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "patch": "@@ -12,7 +12,7 @@ pub const ERROR_RESOURCE_CALL_TIMED_OUT: DWORD = 5910;\n pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: DWORD = 8014;\n pub const DNS_ERROR_RECORD_TIMED_OUT: DWORD = 9705;\n \n-// The followiung list was obtained from\n+// The following list was obtained from\n //   `/usr/x86_64-w64-mingw32/include/winerror.h`\n // in the Debian package\n //   mingw-w64_6.0.0-3_all.deb"}, {"sha": "15042fc3beecb2c71ab4e1d2dbb173971d769263", "filename": "library/std/src/sys_common/thread_parking/id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs?ref=a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "patch": "@@ -79,7 +79,7 @@ impl Parker {\n             park_timeout(dur, self.state.as_ptr().addr());\n             // Swap to ensure that we observe all state changes with acquire\n             // ordering, even if the state has been changed after the timeout\n-            // occured.\n+            // occurred.\n             self.state.swap(EMPTY, Acquire);\n         }\n     }"}, {"sha": "ae3a65d5ea6e86d2e781d2cd96a5c7e034d04d17", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0daf22b95ff1cd3f7ac55ea9370987535f3134d/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "patch": "@@ -220,14 +220,14 @@ pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n \n struct FilteredTests {\n     tests: Vec<(TestId, TestDescAndFn)>,\n-    benchs: Vec<(TestId, TestDescAndFn)>,\n+    benches: Vec<(TestId, TestDescAndFn)>,\n     next_id: usize,\n }\n \n impl FilteredTests {\n     fn add_bench(&mut self, desc: TestDesc, testfn: TestFn) {\n         let test = TestDescAndFn { desc, testfn };\n-        self.benchs.push((TestId(self.next_id), test));\n+        self.benches.push((TestId(self.next_id), test));\n         self.next_id += 1;\n     }\n     fn add_test(&mut self, desc: TestDesc, testfn: TestFn) {\n@@ -246,7 +246,7 @@ impl FilteredTests {\n         self.add_test(desc, testfn);\n     }\n     fn total_len(&self) -> usize {\n-        self.tests.len() + self.benchs.len()\n+        self.tests.len() + self.benches.len()\n     }\n }\n \n@@ -291,7 +291,7 @@ where\n \n     let tests_len = tests.len();\n \n-    let mut filtered = FilteredTests { tests: Vec::new(), benchs: Vec::new(), next_id: 0 };\n+    let mut filtered = FilteredTests { tests: Vec::new(), benches: Vec::new(), next_id: 0 };\n \n     for test in filter_tests(opts, tests) {\n         let mut desc = test.desc;\n@@ -458,7 +458,7 @@ where\n \n     if opts.bench_benchmarks {\n         // All benchmarks run at the end, in serial.\n-        for (id, b) in filtered.benchs {\n+        for (id, b) in filtered.benches {\n             let event = TestEvent::TeWait(b.desc.clone());\n             notify_about_test_event(event)?;\n             let join_handle = run_test(opts, false, id, b, run_strategy, tx.clone());"}]}