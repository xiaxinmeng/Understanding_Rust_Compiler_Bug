{"sha": "6f92f5ab66aa5e732e724ec24d825558f326e28f", "node_id": "C_kwDOAAsO6NoAKDZmOTJmNWFiNjZhYTVlNzMyZTcyNGVjMjRkODI1NTU4ZjMyNmUyOGY", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-05-22T11:46:54Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-06-08T10:22:18Z"}, "message": "BTree: tweak internal comments", "tree": {"sha": "69c1a855e7eb75e583b78bf42039dcfb5f107e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c1a855e7eb75e583b78bf42039dcfb5f107e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f92f5ab66aa5e732e724ec24d825558f326e28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f92f5ab66aa5e732e724ec24d825558f326e28f", "html_url": "https://github.com/rust-lang/rust/commit/6f92f5ab66aa5e732e724ec24d825558f326e28f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f92f5ab66aa5e732e724ec24d825558f326e28f/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a7aa7016de32f4d991c30bfa40d3911e18a213", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a7aa7016de32f4d991c30bfa40d3911e18a213", "html_url": "https://github.com/rust-lang/rust/commit/64a7aa7016de32f4d991c30bfa40d3911e18a213"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "fd73fde2acb2df6f1cc25a52a94d11bdd663c1ae", "filename": "library/alloc/src/collections/btree/fix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f92f5ab66aa5e732e724ec24d825558f326e28f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f92f5ab66aa5e732e724ec24d825558f326e28f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs?ref=6f92f5ab66aa5e732e724ec24d825558f326e28f", "patch": "@@ -91,8 +91,8 @@ impl<K, V> Root<K, V> {\n         }\n     }\n \n-    /// Stock up any underfull nodes on the right border of the tree.\n-    /// The other nodes, those that are not the root nor a rightmost edge,\n+    /// Stocks up any underfull nodes on the right border of the tree.\n+    /// The other nodes, those that are neither the root nor a rightmost edge,\n     /// must be prepared to have up to MIN_LEN elements stolen.\n     pub fn fix_right_border_of_plentiful(&mut self) {\n         let mut cur_node = self.borrow_mut();"}, {"sha": "e2749aac694c8227e8082a738a8327df12fbf8e4", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f92f5ab66aa5e732e724ec24d825558f326e28f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f92f5ab66aa5e732e724ec24d825558f326e28f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=6f92f5ab66aa5e732e724ec24d825558f326e28f", "patch": "@@ -315,7 +315,7 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     pub fn insert(self, value: V) -> &'a mut V {\n         let out_ptr = match self.handle {\n             None => {\n-                // SAFETY: We have consumed self.handle and the reference returned.\n+                // SAFETY: There is no tree yet so no reference to it exists.\n                 let map = unsafe { self.dormant_map.awaken() };\n                 let mut root = NodeRef::new_leaf();\n                 let val_ptr = root.borrow_mut().push(self.key, value) as *mut V;\n@@ -325,16 +325,17 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n             }\n             Some(handle) => match handle.insert_recursing(self.key, value) {\n                 (None, val_ptr) => {\n-                    // SAFETY: We have consumed self.handle and the handle returned.\n+                    // SAFETY: We have consumed self.handle.\n                     let map = unsafe { self.dormant_map.awaken() };\n                     map.length += 1;\n                     val_ptr\n                 }\n                 (Some(ins), val_ptr) => {\n                     drop(ins.left);\n-                    // SAFETY: We have consumed self.handle and the reference returned.\n+                    // SAFETY: We have consumed self.handle and dropped the\n+                    // remaining reference to the tree, ins.left.\n                     let map = unsafe { self.dormant_map.awaken() };\n-                    let root = map.root.as_mut().unwrap();\n+                    let root = map.root.as_mut().unwrap(); // same as ins.left\n                     root.push_internal_level().push(ins.kv.0, ins.kv.1, ins.right);\n                     map.length += 1;\n                     val_ptr"}]}