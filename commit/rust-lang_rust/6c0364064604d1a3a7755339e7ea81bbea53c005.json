{"sha": "6c0364064604d1a3a7755339e7ea81bbea53c005", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMDM2NDA2NDYwNGQxYTNhNzc1NTMzOWU3ZWE4MWJiZWE1M2MwMDU=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-11-21T08:46:00Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-12-06T15:07:15Z"}, "message": "Update compiler_builtins and remove wasm f32<->f64 math conversions", "tree": {"sha": "1a66dc241de77671ad24952c5f2e4b8699afe9e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a66dc241de77671ad24952c5f2e4b8699afe9e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c0364064604d1a3a7755339e7ea81bbea53c005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0364064604d1a3a7755339e7ea81bbea53c005", "html_url": "https://github.com/rust-lang/rust/commit/6c0364064604d1a3a7755339e7ea81bbea53c005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c0364064604d1a3a7755339e7ea81bbea53c005/comments", "author": null, "committer": null, "parents": [{"sha": "22c43689937a81cf5ad6ecfe22d9e63e3cebed04", "url": "https://api.github.com/repos/rust-lang/rust/commits/22c43689937a81cf5ad6ecfe22d9e63e3cebed04", "html_url": "https://github.com/rust-lang/rust/commit/22c43689937a81cf5ad6ecfe22d9e63e3cebed04"}], "stats": {"total": 83, "additions": 15, "deletions": 68}, "files": [{"sha": "10f4f35f9670bb29715a8c1ec01284852d47ed35", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=6c0364064604d1a3a7755339e7ea81bbea53c005", "patch": "@@ -1 +1 @@\n-Subproject commit fe74674f6e4be76d47b66f67d529ebf4186f4eb1\n+Subproject commit 10f4f35f9670bb29715a8c1ec01284852d47ed35"}, {"sha": "d4f8d66ee3e7f6b1fc78fc34df71ef52a88df6af", "filename": "src/libstd/sys/wasm/cmath.rs", "status": "modified", "additions": 14, "deletions": 67, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6c0364064604d1a3a7755339e7ea81bbea53c005/src%2Flibstd%2Fsys%2Fwasm%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0364064604d1a3a7755339e7ea81bbea53c005/src%2Flibstd%2Fsys%2Fwasm%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fcmath.rs?ref=6c0364064604d1a3a7755339e7ea81bbea53c005", "patch": "@@ -8,85 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[inline]\n-pub unsafe fn cbrtf(n: f32) -> f32 {\n-    f64::cbrt(n as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn expm1f(n: f32) -> f32 {\n-    f64::exp_m1(n as f64) as f32\n-}\n-\n-#[inline]\n-#[allow(deprecated)]\n-pub unsafe fn fdimf(a: f32, b: f32) -> f32 {\n-    f64::abs_sub(a as f64, b as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn log1pf(n: f32) -> f32 {\n-    f64::ln_1p(n as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn hypotf(x: f32, y: f32) -> f32 {\n-    f64::hypot(x as f64, y as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn acosf(n: f32) -> f32 {\n-    f64::acos(n as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn asinf(n: f32) -> f32 {\n-    f64::asin(n as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn atan2f(n: f32, b: f32) -> f32 {\n-    f64::atan2(n as f64, b as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn atanf(n: f32) -> f32 {\n-    f64::atan(n as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn coshf(n: f32) -> f32 {\n-    f64::cosh(n as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn sinhf(n: f32) -> f32 {\n-    f64::sinh(n as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn tanf(n: f32) -> f32 {\n-    f64::tan(n as f64) as f32\n-}\n-\n-#[inline]\n-pub unsafe fn tanhf(n: f32) -> f32 {\n-    f64::tanh(n as f64) as f32\n-}\n-\n // These symbols are all defined in `compiler-builtins`\n extern {\n     pub fn acos(n: f64) -> f64;\n+    pub fn acosf(n: f32) -> f32;\n     pub fn asin(n: f64) -> f64;\n+    pub fn asinf(n: f32) -> f32;\n     pub fn atan(n: f64) -> f64;\n     pub fn atan2(a: f64, b: f64) -> f64;\n+    pub fn atan2f(a: f32, b: f32) -> f32;\n+    pub fn atanf(n: f32) -> f32;\n     pub fn cbrt(n: f64) -> f64;\n+    pub fn cbrtf(n: f32) -> f32;\n     pub fn cosh(n: f64) -> f64;\n+    pub fn coshf(n: f32) -> f32;\n     pub fn expm1(n: f64) -> f64;\n+    pub fn expm1f(n: f32) -> f32;\n     pub fn fdim(a: f64, b: f64) -> f64;\n+    pub fn fdimf(a: f32, b: f32) -> f32;\n+    pub fn hypot(x: f64, y: f64) -> f64;\n+    pub fn hypotf(x: f32, y: f32) -> f32;\n     pub fn log1p(n: f64) -> f64;\n+    pub fn log1pf(n: f32) -> f32;\n     pub fn sinh(n: f64) -> f64;\n+    pub fn sinhf(n: f32) -> f32;\n     pub fn tan(n: f64) -> f64;\n+    pub fn tanf(n: f32) -> f32;\n     pub fn tanh(n: f64) -> f64;\n-    pub fn hypot(x: f64, y: f64) -> f64;\n+    pub fn tanhf(n: f32) -> f32;\n }"}]}