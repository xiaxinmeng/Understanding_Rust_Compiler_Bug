{"sha": "1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NTU0MDhkMWE1ODY4NGI2YzliY2UxMWFlY2ViMThhMWVjMmQ2NmU=", "commit": {"author": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2013-12-08T07:55:28Z"}, "committer": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2013-12-08T07:55:28Z"}, "message": "Remove dead codes", "tree": {"sha": "9d781272021fe4ead382ffc8f87c048f194e25b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d781272021fe4ead382ffc8f87c048f194e25b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "html_url": "https://github.com/rust-lang/rust/commit/1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/comments", "author": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "html_url": "https://github.com/rust-lang/rust/commit/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19"}], "stats": {"total": 1280, "additions": 150, "deletions": 1130}, "files": [{"sha": "5e3c38d01eb8148ad25cc93816ed290d3a35fa6d", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -192,10 +192,6 @@ pub fn opt_str2(maybestr: Option<~str>) -> ~str {\n     match maybestr { None => ~\"(none)\", Some(s) => { s } }\n }\n \n-pub fn str_opt(maybestr: ~str) -> Option<~str> {\n-    if maybestr != ~\"(none)\" { Some(maybestr) } else { None }\n-}\n-\n pub fn str_mode(s: ~str) -> mode {\n     match s {\n       ~\"compile-fail\" => mode_compile_fail,"}, {"sha": "dae5a1d342b43e71144f0b38b80250a8026a3a28", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -18,6 +18,7 @@ use header::TestProps;\n use header::load_props;\n use procsrv;\n use util::logv;\n+#[cfg(target_os = \"win32\")]\n use util;\n \n use std::io::File;\n@@ -482,6 +483,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n         format!(\"{}:{}:\", testfile.display(), ee.line)\n     }).collect::<~[~str]>();\n \n+    #[cfg(target_os = \"win32\")]\n     fn to_lower( s : &str ) -> ~str {\n         let i = s.chars();\n         let c : ~[char] = i.map( |c| {\n@@ -822,6 +824,7 @@ fn make_cmdline(libpath: &str, prog: &str, args: &[~str]) -> ~str {\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n // for diagnostic purposes\n+#[cfg(target_os = \"win32\")]\n fn lib_path_cmd_prefix(path: &str) -> ~str {\n     format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n }"}, {"sha": "52081648978bfcf16d11a2a20114fbd907daaf8e", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -10,6 +10,7 @@\n \n use common::config;\n \n+#[cfg(target_os = \"win32\")]\n use std::os::getenv;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n@@ -31,6 +32,7 @@ pub fn get_os(triple: &str) -> &'static str {\n     fail!(\"Cannot determine OS from triple\");\n }\n \n+#[cfg(target_os = \"win32\")]\n pub fn make_new_path(path: &str) -> ~str {\n \n     // Windows just uses PATH as the library search path, so we have to\n@@ -43,21 +45,9 @@ pub fn make_new_path(path: &str) -> ~str {\n     }\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n-pub fn lib_path_env_var() -> ~str { ~\"LD_LIBRARY_PATH\" }\n-\n-#[cfg(target_os = \"macos\")]\n-pub fn lib_path_env_var() -> ~str { ~\"DYLD_LIBRARY_PATH\" }\n-\n #[cfg(target_os = \"win32\")]\n pub fn lib_path_env_var() -> ~str { ~\"PATH\" }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-pub fn path_div() -> ~str { ~\":\" }\n-\n #[cfg(target_os = \"win32\")]\n pub fn path_div() -> ~str { ~\";\" }\n "}, {"sha": "c6102079b20e06d45eb03721ae20351a62d3d5fb", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -382,11 +382,9 @@ impl Bitv {\n     #[inline]\n     pub fn negate(&mut self) {\n         match self.rep {\n-            Small(ref mut b) => b.negate(),\n-            Big(ref mut s) => {\n-                s.each_storage(|w| { *w = !*w; true });\n-            }\n-      }\n+            Small(ref mut s) => s.negate(),\n+            Big(ref mut b) => b.negate(),\n+        }\n     }\n \n     /**"}, {"sha": "5a4547ffeb24adf03ba2db19b63f960b0816bb7a", "filename": "src/libextra/btree.rs", "status": "modified", "additions": 84, "deletions": 81, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbtree.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -14,15 +14,14 @@\n //! Starting implementation of a btree for rust.\n //! Structure inspired by github user davidhalperin's gist.\n \n-\n+#[allow(dead_code)];\n use std::util::replace;\n \n-\n ///A B-tree contains a root node (which contains a vector of elements),\n ///a length (the height of the tree), and lower and upper bounds on the\n ///number of elements that a given node can contain.\n #[allow(missing_doc)]\n-pub struct BTree<K, V>{\n+pub struct BTree<K, V> {\n     root: Node<K, V>,\n     len: uint,\n     lower_bound: uint,\n@@ -34,11 +33,11 @@ pub struct BTree<K, V>{\n //especially during insertions and deletions.\n //Using the swap or replace methods is one option for replacing dependence on Clone, or\n //changing the way in which the BTree is stored could also potentially work.\n-impl<K: Clone + TotalOrd, V: Clone> BTree<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> BTree<K, V> {\n \n     ///Returns new BTree with root node (leaf) and user-supplied lower bound\n-    fn new(k: K, v: V, lb: uint) -> BTree<K, V>{\n-        BTree{\n+    pub fn new(k: K, v: V, lb: uint) -> BTree<K, V> {\n+        BTree {\n             root: Node::new_leaf(~[LeafElt::new(k, v)]),\n             len: 1,\n             lower_bound: lb,\n@@ -48,8 +47,10 @@ impl<K: Clone + TotalOrd, V: Clone> BTree<K, V>{\n \n     ///Helper function for clone: returns new BTree with supplied root node,\n     ///length, and lower bound.  For use when the length is known already.\n-    fn new_with_node_len(n: Node<K, V>, length: uint, lb: uint) -> BTree<K, V>{\n-        BTree{\n+    pub fn new_with_node_len(n: Node<K, V>,\n+                             length: uint,\n+                             lb: uint) -> BTree<K, V> {\n+        BTree {\n             root: n,\n             len: length,\n             lower_bound: lb,\n@@ -59,35 +60,31 @@ impl<K: Clone + TotalOrd, V: Clone> BTree<K, V>{\n \n     ///Implements the Clone trait for the BTree.\n     ///Uses a helper function/constructor to produce a new BTree.\n-    fn clone(&self) -> BTree<K, V>{\n+    pub fn clone(&self) -> BTree<K, V> {\n         return BTree::new_with_node_len(self.root.clone(), self.len, self.lower_bound);\n     }\n \n     ///Returns the value of a given key, which may not exist in the tree.\n     ///Calls the root node's get method.\n-    fn get(self, k: K) -> Option<V>{\n+    pub fn get(self, k: K) -> Option<V> {\n         return self.root.get(k);\n     }\n \n     ///Checks to see if the key already exists in the tree, and if it is not,\n     ///the key-value pair is added to the tree by calling add on the root node.\n-    fn add(self, k: K, v: V) -> bool{\n+    pub fn add(self, k: K, v: V) -> bool {\n         let is_get = &self.clone().get(k.clone());\n         if is_get.is_some(){ return false; }\n-        else{\n+        else {\n             replace(&mut self.root.clone(),self.root.add(k.clone(), v));\n             return true;\n         }\n-\n     }\n-\n-\n-\n }\n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for BTree<K, V>{\n+impl<K: ToStr + TotalOrd, V: ToStr> ToStr for BTree<K, V> {\n     ///Returns a string representation of the BTree\n-    fn to_str(&self) -> ~str{\n+    fn to_str(&self) -> ~str {\n         let ret = self.root.to_str();\n         ret\n     }\n@@ -99,14 +96,14 @@ impl<K: ToStr + TotalOrd, V: ToStr> ToStr for BTree<K, V>{\n //Branches contain BranchElts, which contain a left child (another node) and a key-value\n //pair.  Branches also contain the rightmost child of the elements in the array.\n //Leaves contain LeafElts, which do not have children.\n-enum Node<K, V>{\n+enum Node<K, V> {\n     LeafNode(Leaf<K, V>),\n     BranchNode(Branch<K, V>)\n }\n \n \n //Node functions/methods\n-impl<K: Clone + TotalOrd, V: Clone> Node<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> Node<K, V> {\n \n     ///Differentiates between leaf and branch nodes.\n     fn is_leaf(&self) -> bool{\n@@ -117,52 +114,56 @@ impl<K: Clone + TotalOrd, V: Clone> Node<K, V>{\n     }\n \n     ///Creates a new leaf node given a vector of elements.\n-    fn new_leaf(vec: ~[LeafElt<K, V>]) -> Node<K,V>{\n+    fn new_leaf(vec: ~[LeafElt<K, V>]) -> Node<K,V> {\n         LeafNode(Leaf::new(vec))\n     }\n \n     ///Creates a new branch node given a vector of an elements and a pointer to a rightmost child.\n-    fn new_branch(vec: ~[BranchElt<K, V>], right: ~Node<K, V>) -> Node<K, V>{\n+    fn new_branch(vec: ~[BranchElt<K, V>], right: ~Node<K, V>) -> Node<K, V> {\n         BranchNode(Branch::new(vec, right))\n     }\n \n \n     ///Returns the corresponding value to the provided key.\n     ///get() is called in different ways on a branch or a leaf.\n-    fn get(&self, k: K) -> Option<V>{\n-        match *self{\n+    fn get(&self, k: K) -> Option<V> {\n+        match *self {\n             LeafNode(ref leaf) => return leaf.get(k),\n             BranchNode(ref branch) => return branch.get(k)\n         }\n     }\n \n     ///A placeholder for add\n     ///Currently returns a leaf node with a single value (the added one)\n-    fn add(self, k: K, v: V) -> Node<K, V>{\n+    fn add(self, k: K, v: V) -> Node<K, V> {\n         return Node::new_leaf(~[LeafElt::new(k, v)]);\n     }\n }\n \n //Again, this might not be necessary in the future.\n-impl<K: Clone + TotalOrd, V: Clone> Clone for Node<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> Clone for Node<K, V> {\n \n     ///Returns a new node based on whether or not it is a branch or a leaf.\n-    fn clone(&self) -> Node<K, V>{\n-        match *self{\n-            LeafNode(ref leaf) => return Node::new_leaf(leaf.elts.clone()),\n-            BranchNode(ref branch) => return Node::new_branch(branch.elts.clone(),\n-                                                              branch.rightmost_child.clone())\n+    fn clone(&self) -> Node<K, V> {\n+        match *self {\n+            LeafNode(ref leaf) => {\n+                return Node::new_leaf(leaf.elts.clone());\n+            }\n+            BranchNode(ref branch) => {\n+                return Node::new_branch(branch.elts.clone(),\n+                                        branch.rightmost_child.clone());\n+            }\n         }\n     }\n }\n \n //The following impl is unfinished.  Old iterations of code are left in for\n //future reference when implementing this trait (commented-out).\n-impl<K: Clone + TotalOrd, V: Clone> TotalOrd for Node<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> TotalOrd for Node<K, V> {\n \n     ///Placeholder for an implementation of TotalOrd for Nodes.\n     #[allow(unused_variable)]\n-    fn cmp(&self, other: &Node<K, V>) -> Ordering{\n+    fn cmp(&self, other: &Node<K, V>) -> Ordering {\n         //Requires a match statement--defer these procs to branch and leaf.\n         /* if self.elts[0].less_than(other.elts[0]) { return Less}\n         if self.elts[0].greater_than(other.elts[0]) {return Greater}\n@@ -174,11 +175,11 @@ impl<K: Clone + TotalOrd, V: Clone> TotalOrd for Node<K, V>{\n \n //The following impl is unfinished.  Old iterations of code are left in for\n //future reference when implementing this trait (commented-out).\n-impl<K: Clone + TotalOrd, V: Clone> TotalEq for Node<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> TotalEq for Node<K, V> {\n \n     ///Placeholder for an implementation of TotalEq for Nodes.\n     #[allow(unused_variable)]\n-    fn equals(&self, other: &Node<K, V>) -> bool{\n+    fn equals(&self, other: &Node<K, V>) -> bool {\n         /* put in a match and defer this stuff to branch and leaf\n \n         let mut shorter = 0;\n@@ -202,11 +203,11 @@ impl<K: Clone + TotalOrd, V: Clone> TotalEq for Node<K, V>{\n }\n \n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Node<K, V>{\n+impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Node<K, V> {\n     ///Returns a string representation of a Node.\n     ///The Branch's to_str() is not implemented yet.\n-    fn to_str(&self) -> ~str{\n-        match *self{\n+    fn to_str(&self) -> ~str {\n+        match *self {\n             LeafNode(ref leaf) => leaf.to_str(),\n             BranchNode(..) => ~\"\"\n         }\n@@ -216,31 +217,31 @@ impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Node<K, V>{\n \n //A leaf is a vector with elements that contain no children.  A leaf also\n //does not contain a rightmost child.\n-struct Leaf<K, V>{\n+struct Leaf<K, V> {\n     elts: ~[LeafElt<K, V>]\n }\n \n //Vector of values with children, plus a rightmost child (greater than all)\n-struct Branch<K, V>{\n+struct Branch<K, V> {\n     elts: ~[BranchElt<K,V>],\n     rightmost_child: ~Node<K, V>\n }\n \n \n-impl<K: Clone + TotalOrd, V: Clone> Leaf<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> Leaf<K, V> {\n \n     ///Creates a new Leaf from a vector of LeafElts.\n-    fn new(vec: ~[LeafElt<K, V>]) -> Leaf<K, V>{\n-        Leaf{\n+    fn new(vec: ~[LeafElt<K, V>]) -> Leaf<K, V> {\n+        Leaf {\n             elts: vec\n         }\n     }\n \n     ///Returns the corresponding value to the supplied key.\n-    fn get(&self, k: K) -> Option<V>{\n-        for s in self.elts.iter(){\n+    fn get(&self, k: K) -> Option<V> {\n+        for s in self.elts.iter() {\n             let order = s.key.cmp(&k);\n-            match order{\n+            match order {\n                 Equal => return Some(s.value.clone()),\n                 _ => {}\n             }\n@@ -250,18 +251,18 @@ impl<K: Clone + TotalOrd, V: Clone> Leaf<K, V>{\n \n     ///Placeholder for add method in progress.\n     ///Currently returns a new Leaf containing a single LeafElt.\n-    fn add(&self, k: K, v: V) -> Node<K, V>{\n+    fn add(&self, k: K, v: V) -> Node<K, V> {\n         return Node::new_leaf(~[LeafElt::new(k, v)]);\n     }\n \n }\n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Leaf<K, V>{\n+impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Leaf<K, V> {\n \n     ///Returns a string representation of a Leaf.\n-    fn to_str(&self) -> ~str{\n+    fn to_str(&self) -> ~str {\n         let mut ret = ~\"\";\n-        for s in self.elts.iter(){\n+        for s in self.elts.iter() {\n             ret = ret + \" // \" + s.to_str();\n         }\n         ret\n@@ -270,22 +271,22 @@ impl<K: ToStr + TotalOrd, V: ToStr> ToStr for Leaf<K, V>{\n }\n \n \n-impl<K: Clone + TotalOrd, V: Clone> Branch<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> Branch<K, V> {\n \n     ///Creates a new Branch from a vector of BranchElts and a rightmost child (a node).\n-    fn new(vec: ~[BranchElt<K, V>], right: ~Node<K, V>) -> Branch<K, V>{\n-        Branch{\n+    fn new(vec: ~[BranchElt<K, V>], right: ~Node<K, V>) -> Branch<K, V> {\n+        Branch {\n             elts: vec,\n             rightmost_child: right\n         }\n     }\n \n     ///Returns the corresponding value to the supplied key.\n     ///If the key is not there, find the child that might hold it.\n-    fn get(&self, k: K) -> Option<V>{\n-        for s in self.elts.iter(){\n+    fn get(&self, k: K) -> Option<V> {\n+        for s in self.elts.iter() {\n             let order = s.key.cmp(&k);\n-            match order{\n+            match order {\n                 Less => return s.left.get(k),\n                 Equal => return Some(s.value.clone()),\n                 _ => {}\n@@ -296,90 +297,90 @@ impl<K: Clone + TotalOrd, V: Clone> Branch<K, V>{\n \n \n     ///Placeholder for add method in progress\n-    fn add(&self, k: K, v: V) -> Node<K, V>{\n+    fn add(&self, k: K, v: V) -> Node<K, V> {\n         return Node::new_leaf(~[LeafElt::new(k, v)]);\n     }\n }\n \n //A LeafElt containts no left child, but a key-value pair.\n-struct LeafElt<K, V>{\n+struct LeafElt<K, V> {\n     key: K,\n     value: V\n }\n \n //A BranchElt has a left child in addition to a key-value pair.\n-struct BranchElt<K, V>{\n+struct BranchElt<K, V> {\n     left: Node<K, V>,\n     key: K,\n     value: V\n }\n \n-impl<K: Clone + TotalOrd, V> LeafElt<K, V>{\n+impl<K: Clone + TotalOrd, V> LeafElt<K, V> {\n \n     ///Creates a new LeafElt from a supplied key-value pair.\n-    fn new(k: K, v: V) -> LeafElt<K, V>{\n-        LeafElt{\n+    fn new(k: K, v: V) -> LeafElt<K, V> {\n+        LeafElt {\n             key: k,\n             value: v\n         }\n     }\n \n     ///Compares another LeafElt against itself and determines whether\n     ///the original LeafElt's key is less than the other one's key.\n-    fn less_than(&self, other: LeafElt<K, V>) -> bool{\n+    fn less_than(&self, other: LeafElt<K, V>) -> bool {\n         let order = self.key.cmp(&other.key);\n-        match order{\n+        match order {\n             Less => true,\n             _ => false\n         }\n     }\n \n     ///Compares another LeafElt against itself and determines whether\n     ///the original LeafElt's key is greater than the other one's key.\n-    fn greater_than(&self, other: LeafElt<K, V>) -> bool{\n+    fn greater_than(&self, other: LeafElt<K, V>) -> bool {\n         let order = self.key.cmp(&other.key);\n-        match order{\n+        match order {\n             Greater => true,\n             _ => false\n         }\n     }\n \n     ///Takes a key and determines whether its own key and the supplied key\n     ///are the same.\n-    fn has_key(&self, other: K) -> bool{\n+    fn has_key(&self, other: K) -> bool {\n         let order = self.key.cmp(&other);\n-        match order{\n+        match order {\n             Equal => true,\n             _ => false\n         }\n     }\n-\n }\n \n //This may be eliminated in the future to perserve efficiency by adjusting the way\n //the BTree as a whole is stored in memory.\n-impl<K: Clone + TotalOrd, V: Clone> Clone for LeafElt<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> Clone for LeafElt<K, V> {\n \n     ///Returns a new LeafElt by cloning the key and value.\n-    fn clone(&self) -> LeafElt<K, V>{\n+    fn clone(&self) -> LeafElt<K, V> {\n         return LeafElt::new(self.key.clone(), self.value.clone());\n     }\n }\n \n-impl<K: ToStr + TotalOrd, V: ToStr> ToStr for LeafElt<K, V>{\n+impl<K: ToStr + TotalOrd, V: ToStr> ToStr for LeafElt<K, V> {\n \n     ///Returns a string representation of a LeafElt.\n-    fn to_str(&self) -> ~str{\n-        return \"Key: \" + self.key.to_str() + \", value: \"+ self.value.to_str() + \"; \";\n+    fn to_str(&self) -> ~str {\n+        return \"Key: \" + self.key.to_str() + \", value: \"\n+                       + self.value.to_str() + \"; \";\n     }\n \n }\n \n-impl<K: Clone + TotalOrd, V: Clone> BranchElt<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> BranchElt<K, V> {\n \n     ///Creates a new BranchElt from a supplied key, value, and left child.\n-    fn new(k: K, v: V, n: Node<K, V>) -> BranchElt<K, V>{\n-        BranchElt{\n+    fn new(k: K, v: V, n: Node<K, V>) -> BranchElt<K, V> {\n+        BranchElt {\n             left: n,\n             key: k,\n             value: v\n@@ -388,16 +389,18 @@ impl<K: Clone + TotalOrd, V: Clone> BranchElt<K, V>{\n \n     ///Placeholder for add method in progress.\n     ///Overall implementation will determine the actual return value of this method.\n-    fn add(&self, k: K, v: V) -> LeafElt<K, V>{\n+    fn add(&self, k: K, v: V) -> LeafElt<K, V> {\n         return LeafElt::new(k, v);\n     }\n }\n \n-impl<K: Clone + TotalOrd, V: Clone> Clone for BranchElt<K, V>{\n+impl<K: Clone + TotalOrd, V: Clone> Clone for BranchElt<K, V> {\n \n     ///Returns a new BranchElt by cloning the key, value, and left child.\n-    fn clone(&self) -> BranchElt<K, V>{\n-        return BranchElt::new(self.key.clone(), self.value.clone(), self.left.clone());\n+    fn clone(&self) -> BranchElt<K, V> {\n+        return BranchElt::new(self.key.clone(),\n+                              self.value.clone(),\n+                              self.left.clone());\n     }\n }\n "}, {"sha": "5014c42f8d8e0ede438be12d95a92d8f672ed391", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -17,17 +17,6 @@ use std::str;\n //     http://www.matroska.org/technical/specs/rfc/index.html\n \n // Common data structures\n-struct EbmlTag {\n-    id: uint,\n-    size: uint,\n-}\n-\n-struct EbmlState {\n-    ebml_tag: EbmlTag,\n-    tag_pos: uint,\n-    data_pos: uint,\n-}\n-\n #[deriving(Clone)]\n pub struct Doc {\n     data: @~[u8],"}, {"sha": "5227cb18e6ea2fd6673920bc571818c06c7a5d29", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -39,10 +39,7 @@ pub mod rustrt {\n     }\n }\n \n-static LZ_NONE : c_int = 0x0;   // Huffman-coding only.\n-static LZ_FAST : c_int = 0x1;   // LZ with only one probe\n static LZ_NORM : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n-static LZ_BEST : c_int = 0xfff; // LZ with 4095 probes, \"best\"\n static TINFL_FLAG_PARSE_ZLIB_HEADER : c_int = 0x1; // parse zlib header and adler32 checksum\n static TDEFL_WRITE_ZLIB_HEADER : c_int = 0x01000; // write zlib header and adler32 checksum\n "}, {"sha": "a869c4939cf879205231315bf5d52d35d78d8df1", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -57,7 +57,6 @@ pub mod BigDigit {\n     pub static bits: uint = 32;\n \n     pub static base: uint = 1 << bits;\n-    static hi_mask: uint = (-1 as uint) << bits;\n     static lo_mask: uint = (-1 as uint) >> bits;\n \n     #[inline]"}, {"sha": "21f905e772e24b345dff22f14964f8ed14a1c0cb", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -100,7 +100,7 @@ impl<T: Clone + Integer + Ord>\n     }\n \n     /// Return a `reduce`d copy of self.\n-    fn reduced(&self) -> Ratio<T> {\n+    pub fn reduced(&self) -> Ratio<T> {\n         let mut ret = self.clone();\n         ret.reduce();\n         ret"}, {"sha": "a8b8c094135957401a35ec868b5f7bdde75c761b", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -179,7 +179,6 @@ impl<'self, T:Clone + Ord + Eq> Sort for &'self mut [T] {\n \n static MIN_MERGE: uint = 64;\n static MIN_GALLOP: uint = 7;\n-static INITIAL_TMP_STORAGE: uint = 128;\n \n #[allow(missing_doc)]\n pub fn tim_sort<T:Clone + Ord>(array: &mut [T]) {"}, {"sha": "13b87b9730923835e2767fbf56ee49468a9d38bb", "filename": "src/libextra/url.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -364,16 +364,6 @@ fn split_char_first(s: &str, c: char) -> (~str, ~str) {\n     }\n }\n \n-fn userinfo_from_str(uinfo: &str) -> UserInfo {\n-    let (user, p) = split_char_first(uinfo, ':');\n-    let pass = if p.is_empty() {\n-        None\n-    } else {\n-        Some(p)\n-    };\n-    return UserInfo::new(user, pass);\n-}\n-\n fn userinfo_to_str(userinfo: &UserInfo) -> ~str {\n     match userinfo.pass {\n         Some(ref pass) => format!(\"{}:{}@\", userinfo.user, *pass),"}, {"sha": "c6a1da655aadec2428414558a15951108f36a1d7", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 272, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -30,7 +30,6 @@ use std::u64;\n use std::io;\n use std::io::extensions::u64_from_be_bytes;\n use std::option;\n-use std::str;\n use std::vec;\n use extra::ebml::reader;\n use extra::ebml;\n@@ -523,212 +522,6 @@ pub fn each_lang_item(cdata: Cmd, f: |ast::NodeId, uint| -> bool) -> bool {\n     })\n }\n \n-struct EachItemContext<'self> {\n-    intr: @ident_interner,\n-    cdata: Cmd,\n-    get_crate_data: GetCrateDataCb<'self>,\n-    path_builder: &'self mut ~str,\n-    callback: 'self |&str, DefLike, ast::visibility| -> bool,\n-}\n-\n-impl<'self> EachItemContext<'self> {\n-    // Pushes the given name and returns the old length.\n-    fn push_name(&mut self, string: &str) -> uint {\n-        let path_len = self.path_builder.len();\n-        if path_len != 0 {\n-            self.path_builder.push_str(\"::\")\n-        }\n-        self.path_builder.push_str(string);\n-        path_len\n-    }\n-\n-    // Pops the given name.\n-    fn pop_name(&mut self, old_len: uint) {\n-        // XXX(pcwalton): There's no safe function to do this. :(\n-        unsafe {\n-            str::raw::set_len(self.path_builder, old_len)\n-        }\n-    }\n-\n-    fn process_item_and_pop_name(&mut self,\n-                                 doc: ebml::Doc,\n-                                 def_id: ast::DefId,\n-                                 old_len: uint,\n-                                 vis: ast::visibility)\n-                                 -> bool {\n-        let def_like = item_to_def_like(doc, def_id, self.cdata.cnum);\n-        match def_like {\n-            DlDef(def) => {\n-                debug!(\"(iterating over each item of a module) processing \\\n-                        `{}` (def {:?})\",\n-                       *self.path_builder,\n-                       def);\n-            }\n-            _ => {\n-                debug!(\"(iterating over each item of a module) processing \\\n-                        `{}` ({}:{})\",\n-                       *self.path_builder,\n-                       def_id.crate,\n-                       def_id.node);\n-            }\n-        }\n-\n-        let mut continue_ = (self.callback)(*self.path_builder, def_like, vis);\n-\n-        let family = item_family(doc);\n-        if family == ForeignMod {\n-            // These are unnamed; pop the name now.\n-            self.pop_name(old_len)\n-        }\n-\n-        if continue_ {\n-            // Recurse if necessary.\n-            match family {\n-                Mod | ForeignMod | Trait | Impl => {\n-                    continue_ = self.each_item_of_module(def_id);\n-                }\n-                ImmStatic | MutStatic | Struct | UnsafeFn | Fn | ForeignFn |\n-                UnsafeStaticMethod | StaticMethod | Type | ForeignType |\n-                TupleVariant | StructVariant | Enum | PublicField |\n-                PrivateField | InheritedField => {}\n-            }\n-        }\n-\n-        if family != ForeignMod {\n-            self.pop_name(old_len)\n-        }\n-\n-        continue_\n-    }\n-\n-    fn each_item_of_module(&mut self, def_id: ast::DefId) -> bool {\n-        // This item might not be in this crate. If it's not, look it up.\n-        let items = if def_id.crate == self.cdata.cnum {\n-            reader::get_doc(reader::Doc(self.cdata.data), tag_items)\n-        } else {\n-            let crate_data = (self.get_crate_data)(def_id.crate);\n-            let root = reader::Doc(crate_data.data);\n-            reader::get_doc(root, tag_items)\n-        };\n-\n-        // Look up the item.\n-        let item_doc = match maybe_find_item(def_id.node, items) {\n-            None => return false,\n-            Some(item_doc) => item_doc,\n-        };\n-\n-        self.each_child_of_module_or_crate(item_doc)\n-    }\n-\n-    fn each_child_of_module_or_crate(&mut self, item_doc: ebml::Doc) -> bool {\n-        let mut continue_ = true;\n-\n-        // Iterate over all children.\n-        reader::tagged_docs(item_doc, tag_mod_child, |child_info_doc| {\n-            let child_def_id = reader::with_doc_data(child_info_doc,\n-                                                     parse_def_id);\n-            let child_def_id = translate_def_id(self.cdata, child_def_id);\n-\n-            // This item may be in yet another crate, if it was the child of\n-            // a reexport.\n-            let other_crates_items = if child_def_id.crate ==\n-                    self.cdata.cnum {\n-                reader::get_doc(reader::Doc(self.cdata.data), tag_items)\n-            } else {\n-                let crate_data = (self.get_crate_data)(child_def_id.crate);\n-                let root = reader::Doc(crate_data.data);\n-                reader::get_doc(root, tag_items)\n-            };\n-\n-            debug!(\"(iterating over each item of a module) looking up item \\\n-                    {}:{} in `{}`, crate {}\",\n-                   child_def_id.crate,\n-                   child_def_id.node,\n-                   *self.path_builder,\n-                   self.cdata.cnum);\n-\n-            // Get the item.\n-            match maybe_find_item(child_def_id.node, other_crates_items) {\n-                None => {}\n-                Some(child_item_doc) => {\n-                    // Push the name.\n-                    let child_name = item_name(self.intr, child_item_doc);\n-                    debug!(\"(iterating over each item of a module) pushing \\\n-                            name `{}` onto `{}`\",\n-                           token::ident_to_str(&child_name),\n-                           *self.path_builder);\n-                    let old_len =\n-                        self.push_name(token::ident_to_str(&child_name));\n-\n-                    // Process this item.\n-\n-                    let vis = item_visibility(child_item_doc);\n-                    continue_ = self.process_item_and_pop_name(child_item_doc,\n-                                                              child_def_id,\n-                                                              old_len,\n-                                                              vis);\n-                }\n-            }\n-            continue_\n-        });\n-\n-        if !continue_ {\n-            return false\n-        }\n-\n-        // Iterate over reexports.\n-        each_reexport(item_doc, |reexport_doc| {\n-            let def_id_doc = reader::get_doc(\n-                reexport_doc,\n-                tag_items_data_item_reexport_def_id);\n-            let orig_def_id = reader::with_doc_data(def_id_doc, parse_def_id);\n-\n-            // NB: was \"cdata\"\n-            let def_id = translate_def_id(self.cdata, orig_def_id);\n-\n-            let name_doc = reader::get_doc(reexport_doc,\n-                                           tag_items_data_item_reexport_name);\n-            let name = name_doc.as_str_slice();\n-\n-            // Push the name.\n-            debug!(\"(iterating over each item of a module) pushing \\\n-                    reexported name `{}` onto `{}` (crate {}, orig {}, \\\n-                    in crate {})\",\n-                   name,\n-                   *self.path_builder,\n-                   def_id.crate,\n-                   orig_def_id.crate,\n-                   self.cdata.cnum);\n-            let old_len = self.push_name(name);\n-\n-            // This reexport may be in yet another crate.\n-            let other_crates_items = if def_id.crate == self.cdata.cnum {\n-                reader::get_doc(reader::Doc(self.cdata.data), tag_items)\n-            } else {\n-                let crate_data = (self.get_crate_data)(def_id.crate);\n-                let root = reader::Doc(crate_data.data);\n-                reader::get_doc(root, tag_items)\n-            };\n-\n-            // Get the item.\n-            match maybe_find_item(def_id.node, other_crates_items) {\n-                None => { self.pop_name(old_len); }\n-                Some(reexported_item_doc) => {\n-                    continue_ = self.process_item_and_pop_name(\n-                        reexported_item_doc,\n-                        def_id,\n-                        old_len,\n-                        ast::public);\n-                }\n-            }\n-\n-            continue_\n-        });\n-\n-        continue_\n-    }\n-}\n-\n fn each_child_of_item_or_crate(intr: @ident_interner,\n                                cdata: Cmd,\n                                item_doc: ebml::Doc,\n@@ -1259,62 +1052,6 @@ pub fn get_item_visibility(cdata: Cmd, id: ast::NodeId)\n     item_visibility(lookup_item(id, cdata.data))\n }\n \n-fn family_has_type_params(fam: Family) -> bool {\n-    match fam {\n-      ImmStatic | ForeignType | Mod | ForeignMod | PublicField | PrivateField\n-      | ForeignFn | MutStatic => false,\n-      _           => true\n-    }\n-}\n-\n-fn family_names_type(fam: Family) -> bool {\n-    match fam { Type | Mod | Trait => true, _ => false }\n-}\n-\n-fn read_path(d: ebml::Doc) -> (~str, uint) {\n-    reader::with_doc_data(d, |desc| {\n-        let pos = u64_from_be_bytes(desc, 0u, 4u) as uint;\n-        let pathbytes = desc.slice_from(4u).to_owned();\n-        let path = str::from_utf8_owned(pathbytes);\n-\n-        (path, pos)\n-    })\n-}\n-\n-fn describe_def(items: ebml::Doc, id: ast::DefId) -> ~str {\n-    if id.crate != ast::LOCAL_CRATE { return ~\"external\"; }\n-    let it = match maybe_find_item(id.node, items) {\n-        Some(it) => it,\n-        None => fail!(\"describe_def: item not found {:?}\", id)\n-    };\n-    return item_family_to_str(item_family(it));\n-}\n-\n-fn item_family_to_str(fam: Family) -> ~str {\n-    match fam {\n-      ImmStatic => ~\"static\",\n-      MutStatic => ~\"static mut\",\n-      Fn => ~\"fn\",\n-      UnsafeFn => ~\"unsafe fn\",\n-      StaticMethod => ~\"static method\",\n-      UnsafeStaticMethod => ~\"unsafe static method\",\n-      ForeignFn => ~\"foreign fn\",\n-      Type => ~\"type\",\n-      ForeignType => ~\"foreign type\",\n-      Mod => ~\"mod\",\n-      ForeignMod => ~\"foreign mod\",\n-      Enum => ~\"enum\",\n-      StructVariant => ~\"struct variant\",\n-      TupleVariant => ~\"tuple variant\",\n-      Impl => ~\"impl\",\n-      Trait => ~\"trait\",\n-      Struct => ~\"struct\",\n-      PublicField => ~\"public field\",\n-      PrivateField => ~\"private field\",\n-      InheritedField => ~\"inherited field\",\n-    }\n-}\n-\n fn get_meta_items(md: ebml::Doc) -> ~[@ast::MetaItem] {\n     let mut items: ~[@ast::MetaItem] = ~[];\n     reader::tagged_docs(md, tag_meta_item_word, |meta_item_doc| {\n@@ -1370,15 +1107,6 @@ fn get_attributes(md: ebml::Doc) -> ~[ast::Attribute] {\n     return attrs;\n }\n \n-fn list_meta_items(intr: @ident_interner,\n-                   meta_items: ebml::Doc,\n-                   out: @mut io::Writer) {\n-    let r = get_meta_items(meta_items);\n-    for mi in r.iter() {\n-        write!(out, \"{}\\n\", pprust::meta_item_to_str(*mi, intr));\n-    }\n-}\n-\n fn list_crate_attributes(intr: @ident_interner, md: ebml::Doc, hash: &str,\n                          out: @mut io::Writer) {\n     write!(out, \"=Crate Attributes ({})=\\n\", hash);"}, {"sha": "e7bef48e5ddcfb3a3a30aca5ac4a78f18dbe8a59", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -128,20 +128,6 @@ struct entry<T> {\n     pos: u64\n }\n \n-fn add_to_index(ebml_w: &mut writer::Encoder,\n-                path: &[Ident],\n-                index: &mut ~[entry<~str>],\n-                name: Ident) {\n-    let mut full_path = ~[];\n-    full_path.push_all(path);\n-    full_path.push(name);\n-    index.push(\n-        entry {\n-            val: ast_util::path_name_i(full_path),\n-            pos: ebml_w.writer.tell()\n-        });\n-}\n-\n fn encode_trait_ref(ebml_w: &mut writer::Encoder,\n                     ecx: &EncodeContext,\n                     trait_ref: &ty::TraitRef,\n@@ -1442,10 +1428,6 @@ fn encode_index<T:'static>(\n     ebml_w.end_tag();\n }\n \n-fn write_str(writer: @mut MemWriter, s: ~str) {\n-    writer.write(s.as_bytes());\n-}\n-\n fn write_i64(writer: @mut MemWriter, &n: &i64) {\n     let wr: &mut MemWriter = writer;\n     assert!(n < 0x7fff_ffff);"}, {"sha": "5f9be5f5c421eabc8c9d1509ff392195293165d9", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -23,7 +23,6 @@ use syntax::abi::AbiSet;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast::*;\n-use syntax::codemap::dummy_sp;\n use syntax::opt_vec;\n \n // Compact string representation for ty::t values. API ty_str &\n@@ -130,34 +129,6 @@ pub fn parse_trait_ref_data(data: &[u8], crate_num: ast::CrateNum, pos: uint, tc\n     parse_trait_ref(&mut st, conv)\n }\n \n-fn parse_path(st: &mut PState) -> @ast::Path {\n-    let mut idents: ~[ast::Ident] = ~[];\n-    fn is_last(c: char) -> bool { return c == '(' || c == ':'; }\n-    idents.push(parse_ident_(st, is_last));\n-    loop {\n-        match peek(st) {\n-          ':' => { next(st); next(st); }\n-          c => {\n-            if c == '(' {\n-                return @ast::Path {\n-                    span: dummy_sp(),\n-                    global: false,\n-                    segments: idents.move_iter().map(|identifier| {\n-                        ast::PathSegment {\n-                            identifier: identifier,\n-                            lifetimes: opt_vec::Empty,\n-                            types: opt_vec::Empty,\n-                        }\n-                    }).collect()\n-                };\n-            } else {\n-                idents.push(parse_ident_(st, is_last));\n-            }\n-          }\n-        }\n-    };\n-}\n-\n fn parse_sigil(st: &mut PState) -> ast::Sigil {\n     match next(st) {\n         '@' => ast::ManagedSigil,"}, {"sha": "7a00afbc65234b6e9f4e7b31fd92cb4bc13314b1", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -57,13 +57,6 @@ fn mywrite(w: @mut MemWriter, fmt: &fmt::Arguments) {\n     fmt::write(&mut *w as &mut io::Writer, fmt);\n }\n \n-fn cx_uses_abbrevs(cx: @ctxt) -> bool {\n-    match cx.abbrevs {\n-      ac_no_abbrevs => return false,\n-      ac_use_abbrevs(_) => return true\n-    }\n-}\n-\n pub fn enc_ty(w: @mut MemWriter, cx: @ctxt, t: ty::t) {\n     match cx.abbrevs {\n       ac_no_abbrevs => {"}, {"sha": "227c7d72d6beeb6fc100273d6b1ab89a6a801e65", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -390,10 +390,6 @@ fn renumber_ast(xcx: @ExtendedDecodeContext, ii: ast::inlined_item)\n // ______________________________________________________________________\n // Encoding and decoding of ast::def\n \n-fn encode_def(ebml_w: &mut writer::Encoder, def: ast::Def) {\n-    def.encode(ebml_w)\n-}\n-\n fn decode_def(xcx: @ExtendedDecodeContext, doc: ebml::Doc) -> ast::Def {\n     let mut dsr = reader::Decoder(doc);\n     let def: ast::Def = Decodable::decode(&mut dsr);"}, {"sha": "77dde581c33b882046c3db938d968a6e8c224409", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -84,44 +84,6 @@ enum MoveError {\n }\n \n impl<'self> CheckLoanCtxt<'self> {\n-    fn check_by_move_capture(&self,\n-                             closure_id: ast::NodeId,\n-                             cap_var: &moves::CaptureVar,\n-                             move_path: @LoanPath) {\n-        let move_err = self.analyze_move_out_from(closure_id, move_path);\n-        match move_err {\n-            MoveOk => {}\n-            MoveWhileBorrowed(loan_path, loan_span) => {\n-                self.bccx.span_err(\n-                    cap_var.span,\n-                    format!(\"cannot move `{}` into closure \\\n-                          because it is borrowed\",\n-                         self.bccx.loan_path_to_str(move_path)));\n-                self.bccx.span_note(\n-                    loan_span,\n-                    format!(\"borrow of `{}` occurs here\",\n-                         self.bccx.loan_path_to_str(loan_path)));\n-            }\n-        }\n-    }\n-\n-    fn check_captured_variables(&self, closure_id: ast::NodeId, span: Span) {\n-        let cap_vars = self.bccx.capture_map.get(&closure_id);\n-        for cap_var in cap_vars.iter() {\n-            let var_id = ast_util::def_id_of_def(cap_var.def).node;\n-            let var_path = @LpVar(var_id);\n-            self.check_if_path_is_moved(closure_id, span,\n-                                        MovedInCapture, var_path);\n-            match cap_var.mode {\n-                moves::CapRef | moves::CapCopy => {}\n-                moves::CapMove => {\n-                    self.check_by_move_capture(closure_id, cap_var, var_path);\n-                }\n-            }\n-        }\n-        return;\n-    }\n-\n     pub fn tcx(&self) -> ty::ctxt { self.bccx.tcx }\n \n     pub fn each_issued_loan(&self, scope_id: ast::NodeId, op: |&Loan| -> bool)"}, {"sha": "440664b36d8633463230359ad5bb34c909fe86f4", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -818,10 +818,6 @@ impl<'self> GatherLoanCtxt<'self> {\n         }\n     }\n \n-    pub fn pat_is_variant_or_struct(&self, pat: @ast::Pat) -> bool {\n-        pat_util::pat_is_variant_or_struct(self.bccx.tcx.def_map, pat)\n-    }\n-\n     pub fn pat_is_binding(&self, pat: @ast::Pat) -> bool {\n         pat_util::pat_is_binding(self.bccx.tcx.def_map, pat)\n     }"}, {"sha": "965139931a0ec20377d071290c37ce82dcaf4ca8", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -50,10 +50,6 @@ struct RestrictionsContext<'self> {\n }\n \n impl<'self> RestrictionsContext<'self> {\n-    fn tcx(&self) -> ty::ctxt {\n-        self.bccx.tcx\n-    }\n-\n     fn restrict(&self,\n                 cmt: mc::cmt,\n                 restrictions: RestrictionSet) -> RestrictionResult {\n@@ -251,14 +247,4 @@ impl<'self> RestrictionsContext<'self> {\n                 cause);\n         }\n     }\n-\n-    fn check_no_mutability_control(&self,\n-                                   cmt: mc::cmt,\n-                                   restrictions: RestrictionSet) {\n-        if restrictions.intersects(RESTR_MUTATE | RESTR_FREEZE | RESTR_CLAIM) {\n-            self.bccx.report(BckError {span: self.span,\n-                                       cmt: cmt,\n-                                       code: err_freeze_aliasable_const});\n-        }\n-    }\n }"}, {"sha": "195f7798eb0f5b5f7572c90235264c20680a85e1", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -411,20 +411,6 @@ pub fn check_trait_cast_bounds(cx: &Context, sp: Span, ty: ty::t,\n     });\n }\n \n-fn is_nullary_variant(cx: &Context, ex: @Expr) -> bool {\n-    match ex.node {\n-      ExprPath(_) => {\n-        match cx.tcx.def_map.get_copy(&ex.id) {\n-          DefVariant(edid, vdid, _) => {\n-              ty::enum_variant_with_id(cx.tcx, edid, vdid).args.is_empty()\n-          }\n-          _ => false\n-        }\n-      }\n-      _ => false\n-    }\n-}\n-\n fn check_imm_free_var(cx: &Context, def: Def, sp: Span) {\n     match def {\n         DefLocal(_, BindByValue(MutMutable)) => {\n@@ -585,8 +571,4 @@ pub fn check_cast_for_escaping_regions(\n             _ => false\n         }\n     }\n-\n-    fn is_subregion_of(cx: &Context, r_sub: ty::Region, r_sup: ty::Region) -> bool {\n-        cx.tcx.region_maps.is_subregion_of(r_sub, r_sup)\n-    }\n }"}, {"sha": "55f054b0661fa1061eeca97696c561033a6945a5", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -578,7 +578,7 @@ static ACC_USE: uint = 4u;\n \n type LiveNodeMap = @mut HashMap<NodeId, LiveNode>;\n \n-struct Liveness {\n+pub struct Liveness {\n     tcx: ty::ctxt,\n     ir: @mut IrMaps,\n     s: Specials,\n@@ -625,37 +625,10 @@ impl Liveness {\n         }\n     }\n \n-    pub fn variable_from_path(&self, expr: &Expr) -> Option<Variable> {\n-        match expr.node {\n-          ExprPath(_) => {\n-            let def = self.tcx.def_map.get_copy(&expr.id);\n-            moves::moved_variable_node_id_from_def(def).map(|rdef| {\n-                self.variable(rdef, expr.span)\n-            })\n-          }\n-          _ => None\n-        }\n-    }\n-\n     pub fn variable(&self, node_id: NodeId, span: Span) -> Variable {\n         self.ir.variable(node_id, span)\n     }\n \n-    pub fn variable_from_def_map(&self, node_id: NodeId, span: Span)\n-                                 -> Option<Variable> {\n-        match self.tcx.def_map.find(&node_id) {\n-          Some(&def) => {\n-            moves::moved_variable_node_id_from_def(def).map(|rdef| {\n-                self.variable(rdef, span)\n-            })\n-          }\n-          None => {\n-            self.tcx.sess.span_bug(\n-                span, \"Not present in def map\")\n-          }\n-        }\n-    }\n-\n     pub fn pat_bindings(&self,\n                         pat: @Pat,\n                         f: |LiveNode, Variable, Span, NodeId|) {\n@@ -730,13 +703,6 @@ impl Liveness {\n         self.assigned_on_entry(self.successors[*ln], var)\n     }\n \n-    pub fn indices(&self, ln: LiveNode, op: |uint|) {\n-        let node_base_idx = self.idx(ln, Variable(0));\n-        for var_idx in range(0u, self.ir.num_vars) {\n-            op(node_base_idx + var_idx)\n-        }\n-    }\n-\n     pub fn indices2(&self,\n                     ln: LiveNode,\n                     succ_ln: LiveNode,"}, {"sha": "d665d279a17596656f2d82eff13175dc286c5417", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -57,13 +57,6 @@ fn item_might_be_inlined(item: @ast::item) -> bool {\n     }\n }\n \n-// Returns true if the given type method must be inlined because it may be\n-// monomorphized or it was marked with `#[inline]`.\n-fn ty_method_might_be_inlined(ty_method: &ast::TypeMethod) -> bool {\n-    attributes_specify_inlining(ty_method.attrs) ||\n-        generics_require_inlining(&ty_method.generics)\n-}\n-\n fn method_might_be_inlined(tcx: ty::ctxt, method: &ast::method,\n                            impl_src: ast::DefId) -> bool {\n     if attributes_specify_inlining(method.attrs) ||\n@@ -83,15 +76,6 @@ fn method_might_be_inlined(tcx: ty::ctxt, method: &ast::method,\n     }\n }\n \n-// Returns true if the given trait method must be inlined because it may be\n-// monomorphized or it was marked with `#[inline]`.\n-fn trait_method_might_be_inlined(trait_method: &ast::trait_method) -> bool {\n-    match *trait_method {\n-        ast::required(ref ty_method) => ty_method_might_be_inlined(ty_method),\n-        ast::provided(_) => true\n-    }\n-}\n-\n // Information needed while computing reachability.\n struct ReachableContext {\n     // The type context."}, {"sha": "d2454be4fa06390a94f70ba61cb8b7e062bdbe04", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -52,12 +52,6 @@ type BindingMap = HashMap<Name,binding_info>;\n // Trait method resolution\n pub type TraitMap = HashMap<NodeId,@mut ~[DefId]>;\n \n-// A summary of the generics on a trait.\n-struct TraitGenerics {\n-    has_lifetime: bool,\n-    type_parameter_count: uint,\n-}\n-\n // This is the replacement export map. It maps a module to all of the exports\n // within.\n pub type ExportMap2 = @mut HashMap<NodeId, ~[Export2]>;\n@@ -141,12 +135,6 @@ enum NameDefinition {\n     ImportNameDefinition(Def, LastPrivate) //< The name identifies an import.\n }\n \n-#[deriving(Eq)]\n-enum Mutability {\n-    Mutable,\n-    Immutable\n-}\n-\n enum SelfBinding {\n     NoSelfBinding,\n     HasSelfBinding(NodeId, explicit_self)\n@@ -192,9 +180,6 @@ enum ResolveResult<T> {\n }\n \n impl<T> ResolveResult<T> {\n-    fn failed(&self) -> bool {\n-        match *self { Failed => true, _ => false }\n-    }\n     fn indeterminate(&self) -> bool {\n         match *self { Indeterminate => true, _ => false }\n     }\n@@ -5432,6 +5417,7 @@ impl Resolver {\n         return self.idents_to_str(idents.move_rev_iter().collect::<~[ast::Ident]>());\n     }\n \n+    #[allow(dead_code)]   // useful for debugging\n     fn dump_module(&mut self, module_: @mut Module) {\n         debug!(\"Dump of module `{}`:\", self.module_to_str(module_));\n "}, {"sha": "ac67045c241daf1bd62dc230e530aad1922288b6", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -49,8 +49,6 @@ use middle::trans::type_::Type;\n use syntax::ast;\n use syntax::abi::AbiSet;\n use syntax::ast_map;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n \n // Represents a (possibly monomorphized) top-level fn item or method\n // item.  Note that this is just the fn-ptr and is not a Rust closure\n@@ -569,27 +567,6 @@ pub fn trans_lang_call_with_type_params(bcx: @mut Block,\n         ArgVals(args), Some(dest), DontAutorefArg).bcx;\n }\n \n-\n-struct CalleeTranslationVisitor {\n-    flag: bool,\n-}\n-\n-impl Visitor<()> for CalleeTranslationVisitor {\n-\n-    fn visit_item(&mut self, _:@ast::item, _:()) { }\n-\n-    fn visit_expr(&mut self, e:@ast::Expr, _:()) {\n-\n-            if !self.flag {\n-                match e.node {\n-                  ast::ExprRet(_) => self.flag = true,\n-                  _ => visit::walk_expr(self, e, ()),\n-                }\n-            }\n-    }\n-\n-}\n-\n pub fn trans_call_inner(in_cx: @mut Block,\n                         call_info: Option<NodeInfo>,\n                         callee_ty: ty::t,"}, {"sha": "37346715d28483c2aa4036e353d4b2d02e8f9cc0", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -117,12 +117,12 @@ use syntax::parse::token::special_idents;\n static DW_LANG_RUST: c_uint = 0x9000;\n \n static DW_TAG_auto_variable: c_uint = 0x100;\n-static DW_TAG_arg_variable: c_uint = 0x101;\n+// static DW_TAG_arg_variable: c_uint = 0x101;\n \n static DW_ATE_boolean: c_uint = 0x02;\n static DW_ATE_float: c_uint = 0x04;\n static DW_ATE_signed: c_uint = 0x05;\n-static DW_ATE_signed_char: c_uint = 0x06;\n+// static DW_ATE_signed_char: c_uint = 0x06;\n static DW_ATE_unsigned: c_uint = 0x07;\n static DW_ATE_unsigned_char: c_uint = 0x08;\n \n@@ -1169,13 +1169,6 @@ enum RecursiveTypeDescription {\n \n impl RecursiveTypeDescription {\n \n-    fn metadata(&self) -> DICompositeType {\n-        match *self {\n-            UnfinishedMetadata { metadata_stub, .. } => metadata_stub,\n-            FinalMetadata(metadata) => metadata\n-        }\n-    }\n-\n     fn finalize(&self, cx: &mut CrateContext) -> DICompositeType {\n         match *self {\n             FinalMetadata(metadata) => metadata,\n@@ -1982,24 +1975,6 @@ fn trait_metadata(cx: &mut CrateContext,\n                                    definition_span);\n }\n \n-fn unimplemented_type_metadata(cx: &mut CrateContext, t: ty::t) -> DIType {\n-    debug!(\"unimplemented_type_metadata: {:?}\", ty::get(t));\n-\n-    let name = ppaux::ty_to_str(cx.tcx, t);\n-    let metadata = format!(\"NYI<{}>\", name).with_c_str(|name| {\n-        unsafe {\n-            llvm::LLVMDIBuilderCreateBasicType(\n-                DIB(cx),\n-                name,\n-                0_u64,\n-                8_u64,\n-                DW_ATE_unsigned as c_uint)\n-            }\n-        });\n-\n-    return metadata;\n-}\n-\n fn cache_id_for_type(t: ty::t) -> uint {\n     ty::type_id(t)\n }\n@@ -2179,11 +2154,6 @@ fn set_debug_location(cx: &mut CrateContext, debug_location: DebugLocation) {\n //  Utility Functions\n //=-------------------------------------------------------------------------------------------------\n \n-#[inline]\n-fn roundup(x: uint, a: uint) -> uint {\n-    ((x + (a - 1)) / a) * a\n-}\n-\n /// Return codemap::Loc corresponding to the beginning of the span\n fn span_start(cx: &CrateContext, span: Span) -> codemap::Loc {\n     cx.sess.codemap.lookup_char_pos(span.lo)"}, {"sha": "a66e6f90ac763c69b1719ba5fe8a8117c35dff83", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -176,12 +176,6 @@ impl Dest {\n     }\n }\n \n-fn drop_and_cancel_clean(bcx: @mut Block, dat: Datum) -> @mut Block {\n-    let bcx = dat.drop_val(bcx);\n-    dat.cancel_clean(bcx);\n-    return bcx;\n-}\n-\n pub fn trans_to_datum(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n     debug!(\"trans_to_datum(expr={})\", bcx.expr_to_str(expr));\n \n@@ -1792,10 +1786,6 @@ fn trans_assign_op(bcx: @mut Block,\n     return result_datum.copy_to_datum(bcx, DROP_EXISTING, dst_datum);\n }\n \n-fn shorten(x: &str) -> @str {\n-    (if x.char_len() > 60 {x.slice_chars(0, 60)} else {x}).to_managed()\n-}\n-\n pub fn trans_log_level(bcx: @mut Block) -> DatumBlock {\n     let _icx = push_ctxt(\"trans_log_level\");\n     let ccx = bcx.ccx();"}, {"sha": "c2003e0849f2f4937c64c38d449a365a488db787", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -1765,7 +1765,7 @@ def_type_content_sets!(\n \n         // Things that are interior to the value (first nibble):\n         InteriorUnsized                     = 0b0000__00000000__0001,\n-        InteriorAll                         = 0b0000__00000000__1111,\n+        // InteriorAll                         = 0b0000__00000000__1111,\n \n         // Things that are owned by the value (second and third nibbles):\n         OwnsOwned                           = 0b0000__00000001__0000,\n@@ -1777,7 +1777,7 @@ def_type_content_sets!(\n         // Things that are reachable by the value in any way (fourth nibble):\n         ReachesNonsendAnnot                 = 0b0001__00000000__0000,\n         ReachesBorrowed                     = 0b0010__00000000__0000,\n-        ReachesManaged /* see [1] below */  = 0b0100__00000000__0000,\n+        // ReachesManaged /* see [1] below */  = 0b0100__00000000__0000,\n         ReachesMutable                      = 0b1000__00000000__0000,\n         ReachesAll                          = 0b1111__00000000__0000,\n \n@@ -3631,30 +3631,6 @@ pub fn ty_to_def_id(ty: t) -> Option<ast::DefId> {\n     }\n }\n \n-/// Returns the def ID of the constructor for the given tuple-like struct, or\n-/// None if the struct is not tuple-like. Fails if the given def ID does not\n-/// refer to a struct at all.\n-fn struct_ctor_id(cx: ctxt, struct_did: ast::DefId) -> Option<ast::DefId> {\n-    if struct_did.crate != ast::LOCAL_CRATE {\n-        // XXX: Cross-crate functionality.\n-        cx.sess.unimpl(\"constructor ID of cross-crate tuple structs\");\n-    }\n-\n-    match cx.items.find(&struct_did.node) {\n-        Some(&ast_map::node_item(item, _)) => {\n-            match item.node {\n-                ast::item_struct(struct_def, _) => {\n-                    struct_def.ctor_id.map(|ctor_id| {\n-                        ast_util::local_def(ctor_id)\n-                    })\n-                }\n-                _ => cx.sess.bug(\"called struct_ctor_id on non-struct\")\n-            }\n-        }\n-        _ => cx.sess.bug(\"called struct_ctor_id on non-struct\")\n-    }\n-}\n-\n // Enum information\n #[deriving(Clone)]\n pub struct VariantInfo {"}, {"sha": "dbbdba520ab93a74d86a190f4092629ccc049658", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -692,13 +692,6 @@ impl RegionVarBindings {\n         }\n     }\n \n-    fn report_type_error(&mut self,\n-                         origin: SubregionOrigin,\n-                         terr: &ty::type_err) {\n-        let terr_str = ty::type_err_to_str(self.tcx, terr);\n-        self.tcx.sess.span_err(origin.span(), terr_str);\n-    }\n-\n     fn intersect_scopes(&self,\n                         region_a: ty::Region,\n                         region_b: ty::Region,"}, {"sha": "2b3db1e0a89aa222c525b61d63a14b9a25cf006e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -12,7 +12,7 @@\n use metadata::encoder;\n use middle::ty::{ReSkolemized, ReVar};\n use middle::ty::{BoundRegion, BrAnon, BrNamed};\n-use middle::ty::{BrFresh, ctxt, field};\n+use middle::ty::{BrFresh, ctxt};\n use middle::ty::{mt, t, param_ty};\n use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region,\n                  ReEmpty};\n@@ -432,16 +432,6 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n             }\n         }\n     }\n-    fn method_to_str(cx: ctxt, m: ty::Method) -> ~str {\n-        bare_fn_to_str(cx,\n-                       m.fty.purity,\n-                       m.fty.abis,\n-                       Some(m.ident),\n-                       &m.fty.sig) + \";\"\n-    }\n-    fn field_to_str(cx: ctxt, f: field) -> ~str {\n-        return format!(\"{}: {}\", cx.sess.str_of(f.ident), mt_to_str(cx, &f.mt));\n-    }\n \n     // if there is an id, print that instead of the structural type:\n     /*for def_id in ty::type_def_id(typ).iter() {"}, {"sha": "ab9fabb08415a28d3d2a169ff137caa8570caf8b", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -305,15 +305,6 @@ pub struct Generics {\n     type_params: ~[TyParam]\n }\n \n-impl Generics {\n-    fn new() -> Generics {\n-        Generics {\n-            lifetimes: ~[],\n-            type_params: ~[]\n-        }\n-    }\n-}\n-\n impl Clean<Generics> for ast::Generics {\n     fn clean(&self) -> Generics {\n         Generics {"}, {"sha": "09b4ade381466833485576395df2c5127cebc798", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -122,10 +122,6 @@ pub fn render<T: fmt::Default, S: fmt::Default>(\n     );\n }\n \n-fn boolstr(b: bool) -> &'static str {\n-    if b { \"true\" } else { \"false\" }\n-}\n-\n fn nonestr<'a>(s: &'a str) -> &'a str {\n     if s == \"\" { \"none\" } else { s }\n }"}, {"sha": "e91be32227e074c8c09849c2a8a168b3f6c20c6c", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -38,9 +38,6 @@ static MKDEXT_TABLES: libc::c_uint = 1 << 1;\n static MKDEXT_FENCED_CODE: libc::c_uint = 1 << 2;\n static MKDEXT_AUTOLINK: libc::c_uint = 1 << 3;\n static MKDEXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n-static MKDEXT_SPACE_HEADERS: libc::c_uint = 1 << 6;\n-static MKDEXT_SUPERSCRIPT: libc::c_uint = 1 << 7;\n-static MKDEXT_LAX_SPACING: libc::c_uint = 1 << 8;\n \n type sd_markdown = libc::c_void;  // this is opaque to us\n "}, {"sha": "023bba15f97a192a5db4a175c866be9944171a1c", "filename": "src/librustpkg/conditions.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -19,22 +19,10 @@ condition! {\n     pub bad_path: (Path, ~str) -> Path;\n }\n \n-condition! {\n-    pub bad_stat: (Path, ~str) -> FileStat;\n-}\n-\n-condition! {\n-    pub bad_kind: (~str) -> ();\n-}\n-\n condition! {\n     pub nonexistent_package: (PkgId, ~str) -> Path;\n }\n \n-condition! {\n-    pub copy_failed: (Path, Path) -> ();\n-}\n-\n condition! {\n     pub missing_pkg_files: (PkgId) -> ();\n }\n@@ -43,10 +31,6 @@ condition! {\n     pub bad_pkg_id: (Path, ~str) -> PkgId;\n }\n \n-condition! {\n-    pub no_rust_path: (~str) -> Path;\n-}\n-\n condition! {\n     pub failed_to_create_temp_dir: (~str) -> Path;\n }"}, {"sha": "345638386b2ad64885f0f5e5d00d6954fef32a7d", "filename": "src/librustpkg/crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcrate.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_code)];\n+\n use std::path::Path;\n use std::vec;\n "}, {"sha": "7801742bc910bb37423678b8df51316ba930ec73", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -63,10 +63,9 @@ mod crate;\n pub mod exit_codes;\n mod installed_packages;\n mod messages;\n-mod package_id;\n-mod package_source;\n+pub mod package_id;\n+pub mod package_source;\n mod path_util;\n-mod search;\n mod sha1;\n mod source_control;\n mod target;\n@@ -189,10 +188,6 @@ impl<'self> PkgScript<'self> {\n             (cfgs, output.status)\n         }\n     }\n-\n-    fn hash(&self) -> ~str {\n-        self.id.hash()\n-    }\n }\n \n pub trait CtxMethods {\n@@ -924,12 +919,3 @@ pub fn main_args(args: &[~str]) -> int {\n     if result.is_err() { return COPY_FAILED_CODE; }\n     return 0;\n }\n-\n-fn declare_package_script_dependency(prep: &mut workcache::Prep, pkg_src: &PkgSrc) {\n-    match pkg_src.package_script_option() {\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        Some(ref p) => prep.declare_input(\"file\", p.as_str().unwrap(),\n-                                      workcache_support::digest_file_with_date(p)),\n-        None => ()\n-    }\n-}"}, {"sha": "4865003cb5e9f99a9210b5fdedede4498f2b49ef", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -321,11 +321,6 @@ impl PkgSrc {\n         }\n     }\n \n-    /// True if the given path's stem is self's pkg ID's stem\n-    fn stem_matches(&self, p: &Path) -> bool {\n-        p.filestem().map_default(false, |p| { p == self.id.short_name.as_bytes() })\n-    }\n-\n     pub fn push_crate(cs: &mut ~[Crate], prefix: uint, p: &Path) {\n         let mut it = p.components().peekable();\n         if prefix > 0 {"}, {"sha": "4b5e1ce87277cdf6744945f06e113daee74951af", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -10,6 +10,8 @@\n \n // rustpkg utilities having to do with paths and directories\n \n+#[allow(dead_code)];\n+\n pub use package_id::PkgId;\n pub use target::{OutputType, Main, Lib, Test, Bench, Target, Build, Install};\n pub use version::{Version, NoVersion, split_version_general, try_parsing_version};"}, {"sha": "aec4e95f8e21c5201a1f0d6d769d8386e3441a42", "filename": "src/librustpkg/search.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustpkg%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06dd0e0afb4b78ab4e482a7488adcf1c865bd19/src%2Flibrustpkg%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsearch.rs?ref=c06dd0e0afb4b78ab4e482a7488adcf1c865bd19", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use path_util::{installed_library_in_workspace, rust_path};\n-use version::Version;\n-\n-/// If some workspace `p` in the RUST_PATH contains a package matching short_name,\n-/// return Some(p) (returns the first one of there are multiple matches.) Return\n-/// None if there's no such path.\n-/// FIXME #8711: This ignores the desired version.\n-pub fn find_installed_library_in_rust_path(pkg_path: &Path, _version: &Version) -> Option<Path> {\n-    let rp = rust_path();\n-    debug!(\"find_installed_library_in_rust_path: looking for path {}\",\n-            pkg_path.display());\n-    for p in rp.iter() {\n-        match installed_library_in_workspace(pkg_path, p) {\n-            Some(path) => return Some(path),\n-            None => ()\n-        }\n-    }\n-    None\n-}"}, {"sha": "73c305be798e259f89745df36372cd696fd3ad74", "filename": "src/librustpkg/target.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftarget.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -79,6 +79,7 @@ fn file_is(p: &Path, stem: &str) -> bool {\n     }\n }\n \n+#[allow(dead_code)]\n pub fn lib_name_of(p: &Path) -> Path {\n     p.join(\"lib.rs\")\n }"}, {"sha": "3f6d5b55066278098cf614df6798435d9056a75a", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_code)];\n+\n use std::libc;\n use std::os;\n use std::io;"}, {"sha": "95fc667727240bbb0f0fc7279e8e9220299a7eb4", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -54,10 +54,6 @@ pub fn pkg_parent_workspaces(cx: &Context, pkgid: &PkgId) -> ~[Path] {\n     }\n }\n \n-pub fn is_workspace(p: &Path) -> bool {\n-    p.join(\"src\").is_dir()\n-}\n-\n /// Construct a workspace and package-ID name based on the current directory.\n /// This gets used when rustpkg gets invoked without a package-ID argument.\n pub fn cwd_to_workspace() -> Option<(Path, PkgId)> {"}, {"sha": "1e69f3e7050fa92301b239a03e73ccf0fad1079f", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -370,14 +370,6 @@ impl Drop for TcpListener {\n     }\n }\n \n-extern fn listener_close_cb(handle: *uvll::uv_handle_t) {\n-    let tcp: &mut TcpListener = unsafe { UvHandle::from_uv_handle(&handle) };\n-    unsafe { uvll::free_handle(handle) }\n-\n-    let sched: ~Scheduler = Local::take();\n-    sched.resume_blocked_task_immediately(tcp.closing_task.take_unwrap());\n-}\n-\n // TCP acceptors (bound servers)\n \n impl HomingIO for TcpAcceptor {"}, {"sha": "d6b78fa853c03945dca2560af8011a9565f9f7ea", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -141,10 +141,6 @@ impl Drop for PipeWatcher {\n     }\n }\n \n-extern fn pipe_close_cb(handle: *uvll::uv_handle_t) {\n-    unsafe { uvll::free_handle(handle) }\n-}\n-\n // PipeListener implementation and traits\n \n impl PipeListener {"}, {"sha": "fd439eb05e2d795b5aa336d415263fb71e926123", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -91,107 +91,6 @@ impl<A:IterBytes> Hash for A {\n     }\n }\n \n-fn hash_keyed_2<A: IterBytes,\n-                B: IterBytes>(a: &A, b: &B, k0: u64, k1: u64) -> u64 {\n-    let mut s = State::new(k0, k1);\n-    a.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    b.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    s.result_u64()\n-}\n-\n-fn hash_keyed_3<A: IterBytes,\n-                B: IterBytes,\n-                C: IterBytes>(a: &A, b: &B, c: &C, k0: u64, k1: u64) -> u64 {\n-    let mut s = State::new(k0, k1);\n-    a.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    b.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    c.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    s.result_u64()\n-}\n-\n-fn hash_keyed_4<A: IterBytes,\n-                B: IterBytes,\n-                C: IterBytes,\n-                D: IterBytes>(\n-                a: &A,\n-                b: &B,\n-                c: &C,\n-                d: &D,\n-                k0: u64,\n-                k1: u64)\n-                -> u64 {\n-    let mut s = State::new(k0, k1);\n-    a.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    b.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    c.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    d.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    s.result_u64()\n-}\n-\n-fn hash_keyed_5<A: IterBytes,\n-                B: IterBytes,\n-                C: IterBytes,\n-                D: IterBytes,\n-                E: IterBytes>(\n-                a: &A,\n-                b: &B,\n-                c: &C,\n-                d: &D,\n-                e: &E,\n-                k0: u64,\n-                k1: u64)\n-                -> u64 {\n-    let mut s = State::new(k0, k1);\n-    a.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    b.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    c.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    d.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    e.iter_bytes(true, |bytes| {\n-        s.input(bytes);\n-        true\n-    });\n-    s.result_u64()\n-}\n-\n #[inline]\n pub fn default_state() -> State {\n     State::new(0, 0)"}, {"sha": "f9cf847621e1e7287571a5e94b1ac33cb9e51f23", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -12,7 +12,7 @@ use option::Option;\n use comm::{GenericPort, GenericChan};\n use super::{Reader, Writer};\n \n-struct PortReader<P>;\n+pub struct PortReader<P>;\n \n impl<P: GenericPort<~[u8]>> PortReader<P> {\n     pub fn new(_port: P) -> PortReader<P> { fail!() }\n@@ -24,7 +24,7 @@ impl<P: GenericPort<~[u8]>> Reader for PortReader<P> {\n     fn eof(&mut self) -> bool { fail!() }\n }\n \n-struct ChanWriter<C>;\n+pub struct ChanWriter<C>;\n \n impl<C: GenericChan<~[u8]>> ChanWriter<C> {\n     pub fn new(_chan: C) -> ChanWriter<C> { fail!() }\n@@ -34,7 +34,7 @@ impl<C: GenericChan<~[u8]>> Writer for ChanWriter<C> {\n     fn write(&mut self, _buf: &[u8]) { fail!() }\n }\n \n-struct ReaderPort<R>;\n+pub struct ReaderPort<R>;\n \n impl<R: Reader> ReaderPort<R> {\n     pub fn new(_reader: R) -> ReaderPort<R> { fail!() }\n@@ -46,7 +46,7 @@ impl<R: Reader> GenericPort<~[u8]> for ReaderPort<R> {\n     fn try_recv(&self) -> Option<~[u8]> { fail!() }\n }\n \n-struct WriterChan<W>;\n+pub struct WriterChan<W>;\n \n impl<W: Writer> WriterChan<W> {\n     pub fn new(_writer: W) -> WriterChan<W> { fail!() }"}, {"sha": "7b5104657d9dc8c5fc839f38f0bd2956b3db6264", "filename": "src/libstd/io/native/file.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Ffile.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -756,10 +756,6 @@ pub fn link(src: &CString, dst: &CString) -> IoResult<()> {\n #[cfg(windows)]\n fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n     let path = unsafe { CString::new(path.with_ref(|p| p), false) };\n-\n-    // FileStat times are in milliseconds\n-    fn mktime(secs: u64, nsecs: u64) -> u64 { secs * 1000 + nsecs / 1000000 }\n-\n     let kind = match (stat.st_mode as c_int) & libc::S_IFMT {\n         libc::S_IFREG => io::TypeFile,\n         libc::S_IFDIR => io::TypeDirectory,"}, {"sha": "00b26116e678a3ad2c3ff56ec025165c38992294", "filename": "src/libstd/io/native/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fio%2Fnative%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fio%2Fnative%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fmod.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -100,6 +100,7 @@ fn mkerr_libc(ret: libc::c_int) -> IoResult<()> {\n }\n \n // windows has zero values as errors\n+#[cfg(windows)]\n fn mkerr_winbool(ret: libc::c_int) -> IoResult<()> {\n     if ret == 0 {\n         Err(last_error())"}, {"sha": "8cebc49be7c28be43cb573ac147a8fe3f0af2a11", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -1690,7 +1690,7 @@ impl<T> Fuse<T> {\n     /// Resets the fuse such that the next call to .next() or .next_back() will\n     /// call the underlying iterator again even if it prevously returned None.\n     #[inline]\n-    fn reset_fuse(&mut self) {\n+    pub fn reset_fuse(&mut self) {\n         self.done = false\n     }\n }"}, {"sha": "4eef3323403228d3d73c385a79533b9643faf83c", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -57,7 +57,7 @@ delegate!(\n     fn log2(n: f32) -> f32 = intrinsics::log2f32,\n     fn mul_add(a: f32, b: f32, c: f32) -> f32 = intrinsics::fmaf32,\n     fn pow(n: f32, e: f32) -> f32 = intrinsics::powf32,\n-    fn powi(n: f32, e: c_int) -> f32 = intrinsics::powif32,\n+    // fn powi(n: f32, e: c_int) -> f32 = intrinsics::powif32,\n     fn sin(n: f32) -> f32 = intrinsics::sinf32,\n     fn sqrt(n: f32) -> f32 = intrinsics::sqrtf32,\n \n@@ -79,25 +79,25 @@ delegate!(\n     fn cbrt(n: c_float) -> c_float = c_float_utils::cbrt,\n     fn copysign(x: c_float, y: c_float) -> c_float = c_float_utils::copysign,\n     fn cosh(n: c_float) -> c_float = c_float_utils::cosh,\n-    fn erf(n: c_float) -> c_float = c_float_utils::erf,\n-    fn erfc(n: c_float) -> c_float = c_float_utils::erfc,\n+    // fn erf(n: c_float) -> c_float = c_float_utils::erf,\n+    // fn erfc(n: c_float) -> c_float = c_float_utils::erfc,\n     fn exp_m1(n: c_float) -> c_float = c_float_utils::exp_m1,\n     fn abs_sub(a: c_float, b: c_float) -> c_float = c_float_utils::abs_sub,\n     fn next_after(x: c_float, y: c_float) -> c_float = c_float_utils::next_after,\n     fn frexp(n: c_float, value: &mut c_int) -> c_float = c_float_utils::frexp,\n     fn hypot(x: c_float, y: c_float) -> c_float = c_float_utils::hypot,\n     fn ldexp(x: c_float, n: c_int) -> c_float = c_float_utils::ldexp,\n-    fn lgamma(n: c_float, sign: &mut c_int) -> c_float = c_float_utils::lgamma,\n-    fn log_radix(n: c_float) -> c_float = c_float_utils::log_radix,\n+    // fn lgamma(n: c_float, sign: &mut c_int) -> c_float = c_float_utils::lgamma,\n+    // fn log_radix(n: c_float) -> c_float = c_float_utils::log_radix,\n     fn ln_1p(n: c_float) -> c_float = c_float_utils::ln_1p,\n-    fn ilog_radix(n: c_float) -> c_int = c_float_utils::ilog_radix,\n-    fn modf(n: c_float, iptr: &mut c_float) -> c_float = c_float_utils::modf,\n+    // fn ilog_radix(n: c_float) -> c_int = c_float_utils::ilog_radix,\n+    // fn modf(n: c_float, iptr: &mut c_float) -> c_float = c_float_utils::modf,\n     fn round(n: c_float) -> c_float = c_float_utils::round,\n-    fn ldexp_radix(n: c_float, i: c_int) -> c_float = c_float_utils::ldexp_radix,\n+    // fn ldexp_radix(n: c_float, i: c_int) -> c_float = c_float_utils::ldexp_radix,\n     fn sinh(n: c_float) -> c_float = c_float_utils::sinh,\n     fn tan(n: c_float) -> c_float = c_float_utils::tan,\n-    fn tanh(n: c_float) -> c_float = c_float_utils::tanh,\n-    fn tgamma(n: c_float) -> c_float = c_float_utils::tgamma\n+    fn tanh(n: c_float) -> c_float = c_float_utils::tanh\n+    // fn tgamma(n: c_float) -> c_float = c_float_utils::tgamma\n )\n \n // These are not defined inside consts:: for consistency with"}, {"sha": "1668019409e460c7a786b5c21808421f804ebc36", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -59,7 +59,7 @@ delegate!(\n     fn log2(n: f64) -> f64 = intrinsics::log2f64,\n     fn mul_add(a: f64, b: f64, c: f64) -> f64 = intrinsics::fmaf64,\n     fn pow(n: f64, e: f64) -> f64 = intrinsics::powf64,\n-    fn powi(n: f64, e: c_int) -> f64 = intrinsics::powif64,\n+    // fn powi(n: f64, e: c_int) -> f64 = intrinsics::powif64,\n     fn sin(n: f64) -> f64 = intrinsics::sinf64,\n     fn sqrt(n: f64) -> f64 = intrinsics::sqrtf64,\n \n@@ -81,21 +81,21 @@ delegate!(\n     fn cbrt(n: c_double) -> c_double = c_double_utils::cbrt,\n     fn copysign(x: c_double, y: c_double) -> c_double = c_double_utils::copysign,\n     fn cosh(n: c_double) -> c_double = c_double_utils::cosh,\n-    fn erf(n: c_double) -> c_double = c_double_utils::erf,\n-    fn erfc(n: c_double) -> c_double = c_double_utils::erfc,\n+    // fn erf(n: c_double) -> c_double = c_double_utils::erf,\n+    // fn erfc(n: c_double) -> c_double = c_double_utils::erfc,\n     fn exp_m1(n: c_double) -> c_double = c_double_utils::exp_m1,\n     fn abs_sub(a: c_double, b: c_double) -> c_double = c_double_utils::abs_sub,\n     fn next_after(x: c_double, y: c_double) -> c_double = c_double_utils::next_after,\n     fn frexp(n: c_double, value: &mut c_int) -> c_double = c_double_utils::frexp,\n     fn hypot(x: c_double, y: c_double) -> c_double = c_double_utils::hypot,\n     fn ldexp(x: c_double, n: c_int) -> c_double = c_double_utils::ldexp,\n     fn lgamma(n: c_double, sign: &mut c_int) -> c_double = c_double_utils::lgamma,\n-    fn log_radix(n: c_double) -> c_double = c_double_utils::log_radix,\n+    // fn log_radix(n: c_double) -> c_double = c_double_utils::log_radix,\n     fn ln_1p(n: c_double) -> c_double = c_double_utils::ln_1p,\n-    fn ilog_radix(n: c_double) -> c_int = c_double_utils::ilog_radix,\n-    fn modf(n: c_double, iptr: &mut c_double) -> c_double = c_double_utils::modf,\n+    // fn ilog_radix(n: c_double) -> c_int = c_double_utils::ilog_radix,\n+    // fn modf(n: c_double, iptr: &mut c_double) -> c_double = c_double_utils::modf,\n     fn round(n: c_double) -> c_double = c_double_utils::round,\n-    fn ldexp_radix(n: c_double, i: c_int) -> c_double = c_double_utils::ldexp_radix,\n+    // fn ldexp_radix(n: c_double, i: c_int) -> c_double = c_double_utils::ldexp_radix,\n     fn sinh(n: c_double) -> c_double = c_double_utils::sinh,\n     fn tan(n: c_double) -> c_double = c_double_utils::tan,\n     fn tanh(n: c_double) -> c_double = c_double_utils::tanh,"}, {"sha": "ff93931086598d4c83bfbd62138907a0c47e33bf", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -32,6 +32,7 @@\n use c_str::CString;\n use clone::Clone;\n use container::Container;\n+#[cfg(target_os = \"macos\")]\n use iter::range;\n use libc;\n use libc::{c_char, c_void, c_int, size_t};\n@@ -338,12 +339,6 @@ pub fn pipe() -> Pipe {\n     }\n }\n \n-fn dup2(src: c_int, dst: c_int) -> c_int {\n-    unsafe {\n-        libc::dup2(src, dst)\n-    }\n-}\n-\n /// Returns the proper dll filename for the given basename of a file.\n pub fn dll_filename(base: &str) -> ~str {\n     format!(\"{}{}{}\", DLL_PREFIX, base, DLL_SUFFIX)\n@@ -708,6 +703,7 @@ pub fn set_exit_status(code: int) {\n     rt::set_exit_status(code);\n }\n \n+#[cfg(target_os = \"macos\")]\n unsafe fn load_argc_and_argv(argc: c_int, argv: **c_char) -> ~[~str] {\n     let mut args = ~[];\n     for i in range(0u, argc as uint) {\n@@ -787,10 +783,6 @@ extern \"system\" {\n     fn CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: *mut c_int) -> **u16;\n }\n \n-struct OverriddenArgs {\n-    val: ~[~str]\n-}\n-\n /// Returns the arguments which this program was started with (normally passed\n /// via the command line).\n pub fn args() -> ~[~str] {"}, {"sha": "b7a0d685f124cc83c23982b85957564e68b9a459", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -1049,11 +1049,6 @@ fn prefix_len(p: Option<PathPrefix>) -> uint {\n     }\n }\n \n-fn prefix_is_sep(p: Option<PathPrefix>, c: u8) -> bool {\n-    c.is_ascii() && if !prefix_is_verbatim(p) { is_sep(c as char) }\n-                    else { is_sep_verbatim(c as char) }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "3a33fb182aa73ad0e612ceb96881afd85d3d22a5", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -886,6 +886,7 @@ mod test {\n     }\n }\n \n+#[cfg(test)]\n static RAND_BENCH_N: u64 = 100;\n \n #[cfg(test)]"}, {"sha": "311138d15a2b958a2212ce1dae55cf445c560991", "filename": "src/libstd/rt/basic.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frt%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frt%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbasic.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -37,17 +37,6 @@ struct BasicLoop {\n \n enum Message { RunRemote(uint), RemoveRemote(uint) }\n \n-struct Time {\n-    sec: u64,\n-    nsec: u64,\n-}\n-\n-impl Ord for Time {\n-    fn lt(&self, other: &Time) -> bool {\n-        self.sec < other.sec || self.nsec < other.nsec\n-    }\n-}\n-\n impl BasicLoop {\n     fn new() -> BasicLoop {\n         BasicLoop {\n@@ -238,14 +227,3 @@ impl Drop for BasicPausible {\n         }\n     }\n }\n-\n-fn time() -> Time {\n-    extern {\n-        fn rust_get_time(sec: &mut i64, nsec: &mut i32);\n-    }\n-    let mut sec = 0;\n-    let mut nsec = 0;\n-    unsafe { rust_get_time(&mut sec, &mut nsec) }\n-\n-    Time { sec: sec as u64, nsec: nsec as u64 }\n-}"}, {"sha": "2386a261bdf82132ece92997189facee4ec10d2e", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -25,7 +25,9 @@ use unstable::intrinsics::TyDesc;\n use unstable::raw;\n \n // This has no meaning with out rtdebug also turned on.\n+#[cfg(rtdebug)]\n static TRACK_ALLOCATIONS: int = 0;\n+#[cfg(rtdebug)]\n static MAGIC: u32 = 0xbadc0ffe;\n \n pub type Box = raw::Box<()>;"}, {"sha": "be3b5f951ebc454a7dfa13bcccde4946febf5ccd", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -15,6 +15,8 @@\n //! XXX: Add runtime checks for usage of inconsistent pointer types.\n //! and for overwriting an existing pointer.\n \n+#[allow(dead_code)];\n+\n use cast;\n use cell::Cell;\n use unstable::finally::Finally;"}, {"sha": "d5affdd51735cd5fe335bac0e53c686f8086ec9a", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_code)];\n+\n use libc::c_void;\n #[cfg(unix)]\n use libc::c_int;"}, {"sha": "2447bba98d697d921316f52c95b87e46c723cb4d", "filename": "src/libstd/run.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -183,7 +183,10 @@ impl Process {\n         self.inner.io[0].take();\n     }\n \n-    fn close_outputs(&mut self) {\n+    /**\n+     * Closes the handle to stdout and stderr.\n+     */\n+    pub fn close_outputs(&mut self) {\n         self.inner.io[1].take();\n         self.inner.io[2].take();\n     }"}, {"sha": "144500fac5d962e941d3021c0e649de9b241c1f7", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -12,6 +12,7 @@\n \n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n+#[allow(dead_code)];\n \n pub mod general_category {\n "}, {"sha": "d8e437fda811802acbf2d253ccbc3937f384965f", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -35,6 +35,7 @@ pub enum UnsafeArcUnwrap<T> {\n     UnsafeArcT(T)\n }\n \n+#[cfg(test)]\n impl<T> UnsafeArcUnwrap<T> {\n     fn expect_t(self, msg: &'static str) -> T {\n         match self {"}, {"sha": "ac89689f00478abcc7a4e56a02997bc42ba9ac86", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -448,13 +448,6 @@ impl CodeMap {\n         };\n     }\n \n-    fn span_to_str_no_adj(&self, sp: Span) -> ~str {\n-        let lo = self.lookup_char_pos(sp.lo);\n-        let hi = self.lookup_char_pos(sp.hi);\n-        return format!(\"{}:{}:{}: {}:{}\", lo.file.name,\n-                    lo.line, lo.col.to_uint(), hi.line, hi.col.to_uint())\n-    }\n-\n     fn lookup_byte_offset(&self, bpos: BytePos)\n         -> FileMapAndBytePos {\n         let idx = self.lookup_filemap_idx(bpos);"}, {"sha": "af86091084a704ca2c984871b618c7e51abd3efe", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -201,15 +201,7 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n         } as @SyntaxExpanderTTTrait,\n         None))\n     }\n-    // utility function to simplify creating IdentTT syntax extensions\n-    // that ignore their contexts\n-    fn builtin_item_tt_no_ctxt(f: SyntaxExpanderTTItemFunNoCtxt) -> @Transformer {\n-        @SE(IdentTT(@SyntaxExpanderTTItem {\n-            expander: SyntaxExpanderTTItemExpanderWithoutContext(f),\n-            span: None,\n-        } as @SyntaxExpanderTTItemTrait,\n-        None))\n-    }\n+\n     let mut syntax_expanders = HashMap::new();\n     // NB identifier starts with space, and can't conflict with legal idents\n     syntax_expanders.insert(intern(&\" block\"),"}, {"sha": "0c6eb6a94a8be0ba27c11189a46586ff96a089bb", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast;\n-use codemap::{BytePos, Pos, Span};\n+use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n use ext::build::AstBuilder;\n@@ -357,12 +357,6 @@ fn mk_ident(cx: @ExtCtxt, sp: Span, ident: ast::Ident) -> @ast::Expr {\n                         ~[e_str])\n }\n \n-fn mk_bytepos(cx: @ExtCtxt, sp: Span, bpos: BytePos) -> @ast::Expr {\n-    let path = id_ext(\"BytePos\");\n-    let arg = cx.expr_uint(sp, bpos.to_uint());\n-    cx.expr_call_ident(sp, path, ~[arg])\n-}\n-\n fn mk_binop(cx: @ExtCtxt, sp: Span, bop: token::binop) -> @ast::Expr {\n     let name = match bop {\n         PLUS => \"PLUS\","}, {"sha": "3547fa8251b030aaf010512485638b2abf5b0b0e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -541,20 +541,6 @@ fn fold_struct_def<T:ast_fold>(struct_def: @ast::struct_def, fld: &T)\n     }\n }\n \n-fn noop_fold_view_item(vi: &view_item_, fld: @ast_fold) -> view_item_ {\n-    match *vi {\n-        view_item_extern_mod(ident, name, ref meta_items, node_id) => {\n-            view_item_extern_mod(ident,\n-                                 name,\n-                                 fld.fold_meta_items(*meta_items),\n-                                 fld.new_id(node_id))\n-        }\n-        view_item_use(ref view_paths) => {\n-            view_item_use(fld.fold_view_paths(*view_paths))\n-        }\n-    }\n-}\n-\n fn fold_trait_ref<T:ast_fold>(p: &trait_ref, fld: &T) -> trait_ref {\n     ast::trait_ref {\n         path: fld.fold_path(&p.path),\n@@ -589,14 +575,6 @@ fn fold_mt<T:ast_fold>(mt: &mt, folder: &T) -> mt {\n     }\n }\n \n-fn fold_field<T:ast_fold>(f: TypeField, folder: &T) -> TypeField {\n-    ast::TypeField {\n-        ident: folder.fold_ident(f.ident),\n-        mt: fold_mt(&f.mt, folder),\n-        span: folder.new_span(f.span),\n-    }\n-}\n-\n fn fold_opt_bounds<T:ast_fold>(b: &Option<OptVec<TyParamBound>>, folder: &T)\n                                -> Option<OptVec<TyParamBound>> {\n     b.as_ref().map(|bounds| {"}, {"sha": "22a999ab744ed3740c48cfdad57fc65768fccbf1", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -273,22 +273,13 @@ pub fn nextch(rdr: @mut StringReader) -> char {\n     } else { return unsafe { transmute(-1u32) }; } // FIXME: #8971: unsound\n }\n \n-fn dec_digit_val(c: char) -> int { return (c as int) - ('0' as int); }\n-\n fn hex_digit_val(c: char) -> int {\n     if in_range(c, '0', '9') { return (c as int) - ('0' as int); }\n     if in_range(c, 'a', 'f') { return (c as int) - ('a' as int) + 10; }\n     if in_range(c, 'A', 'F') { return (c as int) - ('A' as int) + 10; }\n     fail!();\n }\n \n-fn oct_digit_val(c: char) -> int {\n-    if in_range(c, '0', '7') { return (c as int) - ('0' as int); }\n-    fail!();\n-}\n-\n-fn bin_digit_value(c: char) -> int { if c == '0' { return 0; } return 1; }\n-\n pub fn is_whitespace(c: char) -> bool {\n     return c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\n }\n@@ -304,10 +295,6 @@ fn is_hex_digit(c: char) -> bool {\n             in_range(c, 'A', 'F');\n }\n \n-fn is_oct_digit(c: char) -> bool { return in_range(c, '0', '7'); }\n-\n-fn is_bin_digit(c: char) -> bool { return c == '0' || c == '1'; }\n-\n // EFFECT: eats whitespace and comments.\n // returns a Some(sugared-doc-attr) if one exists, None otherwise.\n fn consume_whitespace_and_comments(rdr: @mut StringReader)"}, {"sha": "62bfd7c80f9fdfa35355c9e3a09a4f25c50e9149", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -135,13 +135,6 @@ pub enum item_or_view_item {\n     iovi_view_item(view_item)\n }\n \n-#[deriving(Eq)]\n-enum view_item_parse_mode {\n-    VIEW_ITEMS_AND_ITEMS_ALLOWED,\n-    FOREIGN_ITEMS_ALLOWED,\n-    IMPORTS_AND_ITEMS_ALLOWED\n-}\n-\n /* The expr situation is not as complex as I thought it would be.\n The important thing is to make sure that lookahead doesn't balk\n at INTERPOLATED tokens */\n@@ -3455,18 +3448,6 @@ impl Parser {\n         })\n     }\n \n-    fn parse_optional_purity(&self) -> ast::purity {\n-        if self.eat_keyword(keywords::Unsafe) {\n-            ast::unsafe_fn\n-        } else {\n-            ast::impure_fn\n-        }\n-    }\n-\n-    fn parse_optional_onceness(&self) -> ast::Onceness {\n-        if self.eat_keyword(keywords::Once) { ast::Once } else { ast::Many }\n-    }\n-\n     // matches optbounds = ( ( : ( boundseq )? )? )\n     // where   boundseq  = ( bound + boundseq ) | bound\n     // and     bound     = 'static | ty\n@@ -3531,15 +3512,6 @@ impl Parser {\n         }\n     }\n \n-    // parse a generic use site\n-    fn parse_generic_values(&self) -> (OptVec<ast::Lifetime>, ~[P<Ty>]) {\n-        if !self.eat(&token::LT) {\n-            (opt_vec::Empty, ~[])\n-        } else {\n-            self.parse_generic_values_after_lt()\n-        }\n-    }\n-\n     fn parse_generic_values_after_lt(&self) -> (OptVec<ast::Lifetime>, ~[P<Ty>]) {\n         let lifetimes = self.parse_lifetimes();\n         let result = self.parse_seq_to_gt(\n@@ -4080,13 +4052,6 @@ impl Parser {\n          None)\n     }\n \n-    fn token_is_pound_or_doc_comment(&self, tok: token::Token) -> bool {\n-        match tok {\n-            token::POUND | token::DOC_COMMENT(_) => true,\n-            _ => false\n-        }\n-    }\n-\n     // parse a structure field declaration\n     pub fn parse_single_struct_field(&self,\n                                      vis: visibility,\n@@ -4556,26 +4521,6 @@ impl Parser {\n         (id, item_enum(enum_definition, generics), None)\n     }\n \n-    fn parse_fn_ty_sigil(&self) -> Option<Sigil> {\n-        match *self.token {\n-            token::AT => {\n-                self.bump();\n-                Some(ManagedSigil)\n-            }\n-            token::TILDE => {\n-                self.bump();\n-                Some(OwnedSigil)\n-            }\n-            token::BINOP(token::AND) => {\n-                self.bump();\n-                Some(BorrowedSigil)\n-            }\n-            _ => {\n-                None\n-            }\n-        }\n-    }\n-\n     fn fn_expr_lookahead(&self, tok: &token::Token) -> bool {\n         match *tok {\n           token::LPAREN | token::AT | token::TILDE | token::BINOP(_) => true,\n@@ -4983,51 +4928,6 @@ impl Parser {\n         return vp;\n     }\n \n-    fn is_view_item(&self) -> bool {\n-        if !self.is_keyword(keywords::Pub) && !self.is_keyword(keywords::Priv) {\n-            token::is_keyword(keywords::Use, self.token)\n-                || (token::is_keyword(keywords::Extern, self.token) &&\n-                    self.look_ahead(1,\n-                                    |t| token::is_keyword(keywords::Mod, t)))\n-        } else {\n-            self.look_ahead(1, |t| token::is_keyword(keywords::Use, t))\n-                || (self.look_ahead(1,\n-                                    |t| token::is_keyword(keywords::Extern,\n-                                                          t)) &&\n-                    self.look_ahead(2,\n-                                    |t| token::is_keyword(keywords::Mod, t)))\n-        }\n-    }\n-\n-    // parse a view item.\n-    fn parse_view_item(\n-        &self,\n-        attrs: ~[Attribute],\n-        vis: visibility\n-    ) -> view_item {\n-        let lo = self.span.lo;\n-        let node = if self.eat_keyword(keywords::Use) {\n-            self.parse_use()\n-        } else if self.eat_keyword(keywords::Extern) {\n-            self.expect_keyword(keywords::Mod);\n-            let ident = self.parse_ident();\n-            let path = if *self.token == token::EQ {\n-                self.bump();\n-                Some(self.parse_str())\n-            }\n-            else { None };\n-            let metadata = self.parse_optional_meta();\n-            view_item_extern_mod(ident, path, metadata, ast::DUMMY_NODE_ID)\n-        } else {\n-            self.bug(\"expected view item\");\n-        };\n-        self.expect(&token::SEMI);\n-        ast::view_item { node: node,\n-                          attrs: attrs,\n-                          vis: vis,\n-                          span: mk_sp(lo, self.last_span.hi) }\n-    }\n-\n     // Parses a sequence of items. Stops when it finds program\n     // text that can't be parsed as an item\n     // - mod_items uses extern_mod_allowed = true"}, {"sha": "51656160d312e543a7f1de770e80a7d2ef6ada2f", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1755408d1a58684b6c9bce11aeceb18a1ec2d66e/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=1755408d1a58684b6c9bce11aeceb18a1ec2d66e", "patch": "@@ -64,7 +64,7 @@ impl<T> SmallVector<T> {\n         }\n     }\n \n-    fn get<'a>(&'a self, idx: uint) -> &'a T {\n+    pub fn get<'a>(&'a self, idx: uint) -> &'a T {\n         match *self {\n             One(ref v) if idx == 0 => v,\n             Many(ref vs) => &vs[idx],"}]}