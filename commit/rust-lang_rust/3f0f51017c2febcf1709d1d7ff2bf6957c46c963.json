{"sha": "3f0f51017c2febcf1709d1d7ff2bf6957c46c963", "node_id": "C_kwDOAAsO6NoAKDNmMGY1MTAxN2MyZmViY2YxNzA5ZDFkN2ZmMmJmNjk1N2M0NmM5NjM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T04:33:50Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T04:34:28Z"}, "message": "Convert more impls of `DocFolder` to `DocVisitor`\n\nI think these are the last of the impls that can be easily converted to visitors.", "tree": {"sha": "73f4aac6eb7c580a52142c806ec031521df089a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f4aac6eb7c580a52142c806ec031521df089a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f0f51017c2febcf1709d1d7ff2bf6957c46c963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0f51017c2febcf1709d1d7ff2bf6957c46c963", "html_url": "https://github.com/rust-lang/rust/commit/3f0f51017c2febcf1709d1d7ff2bf6957c46c963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f0f51017c2febcf1709d1d7ff2bf6957c46c963/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74287076cd31ee538f178220e00de60bfcf9655", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74287076cd31ee538f178220e00de60bfcf9655", "html_url": "https://github.com/rust-lang/rust/commit/b74287076cd31ee538f178220e00de60bfcf9655"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "8541e6e18816f5c783800fbe23be99e5780cc1fc", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f0f51017c2febcf1709d1d7ff2bf6957c46c963/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0f51017c2febcf1709d1d7ff2bf6957c46c963/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=3f0f51017c2febcf1709d1d7ff2bf6957c46c963", "patch": "@@ -32,10 +32,10 @@ use std::ops::Range;\n \n use crate::clean::{self, utils::find_nearest_parent_module, Crate, Item, ItemLink, PrimitiveType};\n use crate::core::DocContext;\n-use crate::fold::DocFolder;\n use crate::html::markdown::{markdown_links, MarkdownLink};\n use crate::lint::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS};\n use crate::passes::Pass;\n+use crate::visit::DocVisitor;\n \n mod early;\n crate use early::load_intra_link_crates;\n@@ -47,13 +47,14 @@ crate const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n };\n \n fn collect_intra_doc_links(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n-    LinkCollector {\n+    let mut collector = LinkCollector {\n         cx,\n         mod_ids: Vec::new(),\n         kind_side_channel: Cell::new(None),\n         visited_links: FxHashMap::default(),\n-    }\n-    .fold_crate(krate)\n+    };\n+    collector.visit_crate(&krate);\n+    krate\n }\n \n /// Top-level errors emitted by this pass.\n@@ -816,8 +817,8 @@ fn is_derive_trait_collision<T>(ns: &PerNS<Result<(Res, T), ResolutionFailure<'_\n     )\n }\n \n-impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n-    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+impl<'a, 'tcx> DocVisitor for LinkCollector<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &Item) {\n         use rustc_middle::ty::DefIdTree;\n \n         let parent_node =\n@@ -911,17 +912,16 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             }\n         }\n \n-        Some(if item.is_mod() {\n+        if item.is_mod() {\n             if !inner_docs {\n                 self.mod_ids.push(item.def_id.expect_def_id());\n             }\n \n-            let ret = self.fold_item_recur(item);\n+            self.visit_item_recur(item);\n             self.mod_ids.pop();\n-            ret\n         } else {\n-            self.fold_item_recur(item)\n-        })\n+            self.visit_item_recur(item)\n+        }\n     }\n }\n "}, {"sha": "000fe01f5adb96e9d2914f1cd1b700a115614ee3", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3f0f51017c2febcf1709d1d7ff2bf6957c46c963/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0f51017c2febcf1709d1d7ff2bf6957c46c963/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=3f0f51017c2febcf1709d1d7ff2bf6957c46c963", "patch": "@@ -1,7 +1,6 @@\n use super::Pass;\n-use crate::clean::*;\n use crate::core::DocContext;\n-use crate::fold::DocFolder;\n+use crate::{clean::*, visit::DocVisitor};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::DefId;\n@@ -14,17 +13,18 @@ crate const COLLECT_TRAIT_IMPLS: Pass = Pass {\n     description: \"retrieves trait impls for items in the crate\",\n };\n \n-crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n-    let (mut krate, synth_impls) = cx.sess().time(\"collect_synthetic_impls\", || {\n+crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n+    let synth_impls = cx.sess().time(\"collect_synthetic_impls\", || {\n         let mut synth = SyntheticImplCollector { cx, impls: Vec::new() };\n-        (synth.fold_crate(krate), synth.impls)\n+        synth.visit_crate(&krate);\n+        synth.impls\n     });\n \n     let prims: FxHashSet<PrimitiveType> = krate.primitives.iter().map(|p| p.1).collect();\n \n     let crate_items = {\n         let mut coll = ItemCollector::new();\n-        krate = cx.sess().time(\"collect_items_for_trait_impls\", || coll.fold_crate(krate));\n+        cx.sess().time(\"collect_items_for_trait_impls\", || coll.visit_crate(&krate));\n         coll.items\n     };\n \n@@ -152,14 +152,13 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n         }\n     }\n \n-    let items = if let ModuleItem(Module { ref mut items, .. }) = *krate.module.kind {\n-        items\n+    if let ModuleItem(Module { items, .. }) = &mut *krate.module.kind {\n+        items.extend(synth_impls);\n+        items.extend(new_items);\n     } else {\n         panic!(\"collect-trait-impls can't run\");\n     };\n \n-    items.extend(synth_impls);\n-    items.extend(new_items);\n     krate\n }\n \n@@ -168,8 +167,8 @@ struct SyntheticImplCollector<'a, 'tcx> {\n     impls: Vec<Item>,\n }\n \n-impl<'a, 'tcx> DocFolder for SyntheticImplCollector<'a, 'tcx> {\n-    fn fold_item(&mut self, i: Item) -> Option<Item> {\n+impl<'a, 'tcx> DocVisitor for SyntheticImplCollector<'a, 'tcx> {\n+    fn visit_item(&mut self, i: &Item) {\n         if i.is_struct() || i.is_enum() || i.is_union() {\n             // FIXME(eddyb) is this `doc(hidden)` check needed?\n             if !self\n@@ -184,7 +183,7 @@ impl<'a, 'tcx> DocFolder for SyntheticImplCollector<'a, 'tcx> {\n             }\n         }\n \n-        Some(self.fold_item_recur(i))\n+        self.visit_item_recur(i)\n     }\n }\n \n@@ -199,11 +198,11 @@ impl ItemCollector {\n     }\n }\n \n-impl DocFolder for ItemCollector {\n-    fn fold_item(&mut self, i: Item) -> Option<Item> {\n+impl DocVisitor for ItemCollector {\n+    fn visit_item(&mut self, i: &Item) {\n         self.items.insert(i.def_id);\n \n-        Some(self.fold_item_recur(i))\n+        self.visit_item_recur(i)\n     }\n }\n "}]}