{"sha": "ec60dd81f9b749092d9a2dc871eef620e0f520f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNjBkZDgxZjliNzQ5MDkyZDlhMmRjODcxZWVmNjIwZTBmNTIwZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-21T23:08:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-21T23:08:32Z"}, "message": "Auto merge of #51690 - nikomatsakis:issue-51683-existential-fail, r=oli-obk\n\ndo not ICE when existing type info is incomplete\n\nApparently master is kinda ICE-y right now, but only for some people (sadly that set includes me).\n\nI'm not crazy about this PR, because it seems to regress diagnostics a lot, but it *does* fix the problems. I think probably fixing the diagnostics should be done by doing a better job of suppressing errors?\n\nMitigates  #51683\n\nr? @oli-obk", "tree": {"sha": "199f9614ee1fab50ce057b574b94fa74d573c917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/199f9614ee1fab50ce057b574b94fa74d573c917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec60dd81f9b749092d9a2dc871eef620e0f520f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec60dd81f9b749092d9a2dc871eef620e0f520f5", "html_url": "https://github.com/rust-lang/rust/commit/ec60dd81f9b749092d9a2dc871eef620e0f520f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec60dd81f9b749092d9a2dc871eef620e0f520f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "662c70a59f79919640465b8753f790af822e96c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/662c70a59f79919640465b8753f790af822e96c8", "html_url": "https://github.com/rust-lang/rust/commit/662c70a59f79919640465b8753f790af822e96c8"}, {"sha": "e3fa2d5803993319c3122bd8230e1cab8595cdd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fa2d5803993319c3122bd8230e1cab8595cdd4", "html_url": "https://github.com/rust-lang/rust/commit/e3fa2d5803993319c3122bd8230e1cab8595cdd4"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "5487da97d5b2a137348e04041e0e11af62ebf484", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=ec60dd81f9b749092d9a2dc871eef620e0f520f5", "patch": "@@ -434,8 +434,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         instantiated_ty: Ty<'gcx>,\n     ) -> Ty<'gcx> {\n         debug!(\n-            \"infer_anon_definition_from_instantiation(instantiated_ty={:?})\",\n-            instantiated_ty\n+            \"infer_anon_definition_from_instantiation(def_id={:?}, instantiated_ty={:?})\",\n+            def_id, instantiated_ty\n         );\n \n         let gcx = self.tcx.global_tcx();"}, {"sha": "f73e0ab2a9d774bcd2ed12ad896f0dea57597ccb", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ec60dd81f9b749092d9a2dc871eef620e0f520f5", "patch": "@@ -638,8 +638,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     // and ban them. Type variables instantiated inside binders aren't\n                     // well-supported at the moment, so this doesn't work.\n                     // In the future, this should be fixed and this error should be removed.\n-                    let def = self.map.defs.get(&lifetime.id);\n-                    if let Some(&Region::LateBound(_, def_id, _)) = def {\n+                    let def = self.map.defs.get(&lifetime.id).cloned();\n+                    if let Some(Region::LateBound(_, def_id, _)) = def {\n                         if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n                             // Ensure that the parent of the def is an item, not HRTB\n                             let parent_id = self.tcx.hir.get_parent_node(node_id);\n@@ -657,6 +657,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                     \"`impl Trait` can only capture lifetimes \\\n                                      bound at the fn or impl level\"\n                                 );\n+                                self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n                             }\n                         }\n                     }\n@@ -2453,6 +2454,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// Sometimes we resolve a lifetime, but later find that it is an\n+    /// error (esp. around impl trait). In that case, we remove the\n+    /// entry into `map.defs` so as not to confuse later code.\n+    fn uninsert_lifetime_on_error(&mut self, lifetime_ref: &'tcx hir::Lifetime, bad_def: Region) {\n+        let old_value = self.map.defs.remove(&lifetime_ref.id);\n+        assert_eq!(old_value, Some(bad_def));\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "4c849cad187abb30676b9e771d8cffad19652b17", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ec60dd81f9b749092d9a2dc871eef620e0f520f5", "patch": "@@ -1066,7 +1066,24 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemExistential(hir::ExistTy { impl_trait_fn: None, .. }) => unimplemented!(),\n                 // existential types desugared from impl Trait\n                 ItemExistential(hir::ExistTy { impl_trait_fn: Some(owner), .. }) => {\n-                    tcx.typeck_tables_of(owner).concrete_existential_types[&def_id]\n+                    tcx.typeck_tables_of(owner).concrete_existential_types\n+                        .get(&def_id)\n+                        .cloned()\n+                        .unwrap_or_else(|| {\n+                            // This can occur if some error in the\n+                            // owner fn prevented us from populating\n+                            // the `concrete_existential_types` table.\n+                            tcx.sess.delay_span_bug(\n+                                DUMMY_SP,\n+                                &format!(\n+                                    \"owner {:?} has no existential type for {:?} in its tables\",\n+                                    owner,\n+                                    def_id,\n+                                ),\n+                            );\n+\n+                            tcx.types.err\n+                        })\n                 },\n                 ItemTrait(..) | ItemTraitAlias(..) |\n                 ItemMod(..) |"}, {"sha": "05a4b8b3544f5dc1932017abf18d767305525af7", "filename": "src/test/ui/error-codes/E0657.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs?ref=ec60dd81f9b749092d9a2dc871eef620e0f520f5", "patch": "@@ -19,7 +19,7 @@ fn free_fn_capture_hrtb_in_impl_trait()\n     -> Box<for<'a> Id<impl Lt<'a>>>\n         //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level [E0657]\n {\n-    ()\n+    () //~ ERROR mismatched types\n }\n \n struct Foo;\n@@ -28,7 +28,7 @@ impl Foo {\n         -> Box<for<'a> Id<impl Lt<'a>>>\n             //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level\n     {\n-        ()\n+        () //~ ERROR mismatched types\n     }\n }\n "}, {"sha": "23b9666de3cd9f0ea1e059125172bbb43825d062", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=ec60dd81f9b749092d9a2dc871eef620e0f520f5", "patch": "@@ -10,6 +10,25 @@ error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl le\n LL |         -> Box<for<'a> Id<impl Lt<'a>>>\n    |                                   ^^\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/E0657.rs:22:5\n+   |\n+LL |     () //~ ERROR mismatched types\n+   |     ^^ expected struct `std::boxed::Box`, found ()\n+   |\n+   = note: expected type `std::boxed::Box<Id<_> + 'static>`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/E0657.rs:31:9\n+   |\n+LL |         () //~ ERROR mismatched types\n+   |         ^^ expected struct `std::boxed::Box`, found ()\n+   |\n+   = note: expected type `std::boxed::Box<Id<_> + 'static>`\n+              found type `()`\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0657`.\n+Some errors occurred: E0308, E0657.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "b64caccd98abef8311b646deb96affdb375a3aeb", "filename": "src/test/ui/impl_trait_projections.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.rs?ref=ec60dd81f9b749092d9a2dc871eef620e0f520f5", "patch": "@@ -34,8 +34,9 @@ fn projection_with_named_trait_is_disallowed(x: impl Iterator)\n fn projection_with_named_trait_inside_path_is_disallowed()\n     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n //~^ ERROR `impl Trait` is not allowed in path parameters\n-{\n-    (1i32..100).next().unwrap()\n+//~| ERROR trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n+{ //~ ERROR trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n+    (1i32..100).next().unwrap() //~ ERROR mismatched types\n }\n \n fn projection_from_impl_trait_inside_dyn_trait_is_disallowed()"}, {"sha": "b495d4b4b010b82890183f7631cea963eedc3ab4", "filename": "src/test/ui/impl_trait_projections.stderr", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec60dd81f9b749092d9a2dc871eef620e0f520f5/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr?ref=ec60dd81f9b749092d9a2dc871eef620e0f520f5", "patch": "@@ -17,7 +17,7 @@ LL |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n    |                           ^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:42:29\n+  --> $DIR/impl_trait_projections.rs:43:29\n    |\n LL |     -> <dyn Iterator<Item = impl Debug> as Iterator>::Item\n    |                             ^^^^^^^^^^\n@@ -30,7 +30,34 @@ LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n    |\n    = note: specify the type using the syntax `<impl std::iter::Iterator as Trait>::Item`\n \n-error: aborting due to 5 previous errors\n+error[E0277]: the trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n+  --> $DIR/impl_trait_projections.rs:38:1\n+   |\n+LL | / { //~ ERROR trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n+LL | |     (1i32..100).next().unwrap() //~ ERROR mismatched types\n+LL | | }\n+   | |_^ the trait `std::iter::Step` is not implemented for `impl std::fmt::Debug`\n+   |\n+   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::ops::Range<impl std::fmt::Debug>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/impl_trait_projections.rs:39:5\n+   |\n+LL |     (1i32..100).next().unwrap() //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected anonymized type, found i32\n+   |\n+   = note: expected type `impl std::fmt::Debug`\n+              found type `i32`\n+\n+error[E0277]: the trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n+  --> $DIR/impl_trait_projections.rs:35:8\n+   |\n+LL |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::iter::Step` is not implemented for `impl std::fmt::Debug`\n+   |\n+   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::ops::Range<impl std::fmt::Debug>`\n+\n+error: aborting due to 8 previous errors\n \n-Some errors occurred: E0223, E0667.\n+Some errors occurred: E0223, E0277, E0308, E0667.\n For more information about an error, try `rustc --explain E0223`."}]}