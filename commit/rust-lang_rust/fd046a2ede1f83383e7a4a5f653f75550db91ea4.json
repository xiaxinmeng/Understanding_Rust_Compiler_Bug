{"sha": "fd046a2ede1f83383e7a4a5f653f75550db91ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMDQ2YTJlZGUxZjgzMzgzZTdhNGE1ZjY1M2Y3NTU1MGRiOTFlYTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-24T19:15:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T12:57:22Z"}, "message": "bundle up \"canonical instantiation\" with infcx creation", "tree": {"sha": "aab943040ef00a0e14a8d11801229d16595625c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aab943040ef00a0e14a8d11801229d16595625c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd046a2ede1f83383e7a4a5f653f75550db91ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd046a2ede1f83383e7a4a5f653f75550db91ea4", "html_url": "https://github.com/rust-lang/rust/commit/fd046a2ede1f83383e7a4a5f653f75550db91ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd046a2ede1f83383e7a4a5f653f75550db91ea4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110b3b971eb0fcf90c4d2836968f4d23fa396e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/110b3b971eb0fcf90c4d2836968f4d23fa396e5d", "html_url": "https://github.com/rust-lang/rust/commit/110b3b971eb0fcf90c4d2836968f4d23fa396e5d"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "6e9d87c089b4d9ee867fd3db9740004c74126cc1", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=fd046a2ede1f83383e7a4a5f653f75550db91ea4", "patch": "@@ -225,19 +225,26 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// inference variables and applies it to the canonical value.\n     /// Returns both the instantiated result *and* the substitution S.\n     ///\n-    /// This is useful at the start of a query: it basically brings\n-    /// the canonical value \"into scope\" within your new infcx. At the\n-    /// end of processing, the substitution S (once canonicalized)\n-    /// then represents the values that you computed for each of the\n-    /// canonical inputs to your query.\n-    pub fn instantiate_canonical_with_fresh_inference_vars<T>(\n+    /// This is only meant to be invoked as part of constructing an\n+    /// inference context at the start of a query (see\n+    /// `InferCtxtBuilder::enter_with_canonical`).  It basically\n+    /// brings the canonical value \"into scope\" within your new infcx.\n+    ///\n+    /// At the end of processing, the substitution S (once\n+    /// canonicalized) then represents the values that you computed\n+    /// for each of the canonical inputs to your query.\n+\n+    pub(in infer) fn instantiate_canonical_with_fresh_inference_vars<T>(\n         &self,\n         span: Span,\n         canonical: &Canonical<'tcx, T>,\n     ) -> (T, CanonicalVarValues<'tcx>)\n     where\n         T: TypeFoldable<'tcx>,\n     {\n+        assert_eq!(self.universe(), ty::UniverseIndex::ROOT, \"infcx not newly created\");\n+        assert_eq!(self.type_variables.borrow().num_vars(), 0, \"infcx not newly created\");\n+\n         let canonical_inference_vars =\n             self.fresh_inference_vars_for_canonical_vars(span, canonical.variables);\n         let result = canonical.substitute(self.tcx, &canonical_inference_vars);"}, {"sha": "d75d39201c49e78a232b0f71ed09867e92e29848", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=fd046a2ede1f83383e7a4a5f653f75550db91ea4", "patch": "@@ -64,9 +64,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n         K: TypeFoldable<'tcx>,\n         R: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n     {\n-        self.enter(|ref infcx| {\n-            let (key, canonical_inference_vars) =\n-                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_key);\n+        self.enter_with_canonical(DUMMY_SP, canonical_key, |ref infcx, key, canonical_inference_vars| {\n             let fulfill_cx = &mut FulfillmentContext::new();\n             let value = operation(infcx, fulfill_cx, key)?;\n             infcx.make_canonicalized_query_result(canonical_inference_vars, value, fulfill_cx)"}, {"sha": "0c161536831753395384d86ce88b49e8adda45a3", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=fd046a2ede1f83383e7a4a5f653f75550db91ea4", "patch": "@@ -20,6 +20,7 @@ pub use ty::IntVarValue;\n use arena::SyncDroplessArena;\n use errors::DiagnosticBuilder;\n use hir::def_id::DefId;\n+use infer::canonical::{Canonical, CanonicalVarValues};\n use middle::free_region::RegionRelations;\n use middle::lang_items;\n use middle::region;\n@@ -494,9 +495,29 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         self\n     }\n \n-    pub fn enter<F, R>(&'tcx mut self, f: F) -> R\n+    /// Given a canonical value `C` as a starting point, create an\n+    /// inference context that contains each of the bound values\n+    /// within instantiated as a fresh variable. The `f` closure is\n+    /// invoked with the new infcx, along with the instantiated value\n+    /// `V` and a substitution `S`.  This substitution `S` maps from\n+    /// the bound values in `C` to their instantiated values in `V`\n+    /// (in other words, `S(C) = V`).\n+    pub fn enter_with_canonical<T, R>(\n+        &'tcx mut self,\n+        span: Span,\n+        canonical: &Canonical<'tcx, T>,\n+        f: impl for<'b> FnOnce(InferCtxt<'b, 'gcx, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,\n+    ) -> R\n     where\n-        F: for<'b> FnOnce(InferCtxt<'b, 'gcx, 'tcx>) -> R,\n+        T: TypeFoldable<'tcx>,\n+    {\n+        self.enter(|infcx| {\n+            let (value, subst) = infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);\n+            f(infcx, value, subst)\n+        })\n+    }\n+\n+    pub fn enter<R>(&'tcx mut self, f: impl for<'b> FnOnce(InferCtxt<'b, 'gcx, 'tcx>) -> R) -> R\n     {\n         let InferCtxtBuilder {\n             global_tcx,"}, {"sha": "1745679bc27f1c4d0d020dbd24456e300187ee7f", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=fd046a2ede1f83383e7a4a5f653f75550db91ea4", "patch": "@@ -30,19 +30,16 @@ crate fn provide(p: &mut Providers) {\n \n fn dropck_outlives<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    goal: CanonicalTyGoal<'tcx>,\n+    canonical_goal: CanonicalTyGoal<'tcx>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n-    debug!(\"dropck_outlives(goal={:#?})\", goal);\n+    debug!(\"dropck_outlives(goal={:#?})\", canonical_goal);\n \n-    tcx.infer_ctxt().enter(|ref infcx| {\n+    tcx.infer_ctxt().enter_with_canonical(DUMMY_SP, &canonical_goal, |ref infcx, goal, canonical_inference_vars| {\n         let tcx = infcx.tcx;\n-        let (\n-            ParamEnvAnd {\n-                param_env,\n-                value: for_ty,\n-            },\n-            canonical_inference_vars,\n-        ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &goal);\n+        let ParamEnvAnd {\n+            param_env,\n+            value: for_ty,\n+        } = goal;\n \n         let mut result = DropckOutlivesResult {\n             kinds: vec![],"}, {"sha": "4487bb11f6daf56bc684b1393b363f010092ce5f", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd046a2ede1f83383e7a4a5f653f75550db91ea4/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=fd046a2ede1f83383e7a4a5f653f75550db91ea4", "patch": "@@ -24,16 +24,13 @@ crate fn provide(p: &mut Providers) {\n \n fn evaluate_obligation<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    goal: CanonicalPredicateGoal<'tcx>,\n+    canonical_goal: CanonicalPredicateGoal<'tcx>,\n ) -> Result<EvaluationResult, OverflowError> {\n-    tcx.infer_ctxt().enter(|ref infcx| {\n-        let (\n-            ParamEnvAnd {\n-                param_env,\n-                value: predicate,\n-            },\n-            _canonical_inference_vars,\n-        ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &goal);\n+    tcx.infer_ctxt().enter_with_canonical(DUMMY_SP, &canonical_goal, |ref infcx, goal, _canonical_inference_vars| {\n+        let ParamEnvAnd {\n+            param_env,\n+            value: predicate,\n+        } = goal;\n \n         let mut selcx = SelectionContext::with_query_mode(&infcx, TraitQueryMode::Canonical);\n         let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);"}]}