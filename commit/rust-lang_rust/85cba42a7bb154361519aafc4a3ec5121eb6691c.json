{"sha": "85cba42a7bb154361519aafc4a3ec5121eb6691c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1Y2JhNDJhN2JiMTU0MzYxNTE5YWFmYzRhM2VjNTEyMWViNjY5MWM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-19T09:36:41Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-19T09:36:44Z"}, "message": "There will never be a PrimVal for fat pointers.\n\nInstead, there will be a `Value::ByValPair` variant for holding fat pointers\n(among other things) modelled after `OperandValue::Pair` in rustc's trans.", "tree": {"sha": "1d140d55684b9070aa81e9ff656afa8b261e85ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d140d55684b9070aa81e9ff656afa8b261e85ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85cba42a7bb154361519aafc4a3ec5121eb6691c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85cba42a7bb154361519aafc4a3ec5121eb6691c", "html_url": "https://github.com/rust-lang/rust/commit/85cba42a7bb154361519aafc4a3ec5121eb6691c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85cba42a7bb154361519aafc4a3ec5121eb6691c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c306f22544f254108edc4d6dbf782f113a19ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c306f22544f254108edc4d6dbf782f113a19ebb", "html_url": "https://github.com/rust-lang/rust/commit/6c306f22544f254108edc4d6dbf782f113a19ebb"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "0df25464bf0be6f84a276c6b2213414773bd3bc0", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85cba42a7bb154361519aafc4a3ec5121eb6691c/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cba42a7bb154361519aafc4a3ec5121eb6691c/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=85cba42a7bb154361519aafc4a3ec5121eb6691c", "patch": "@@ -1006,7 +1006,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         Err(e) => return Err(e),\n                     }\n                 } else {\n-                    return Err(EvalError::Unimplemented(format!(\"unimplemented: primitive read of fat pointer type: {:?}\", ty)));\n+                    bug!(\"primitive read of fat pointer type: {:?}\", ty);\n                 }\n             }\n "}]}