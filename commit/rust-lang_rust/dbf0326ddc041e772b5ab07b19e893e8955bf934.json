{"sha": "dbf0326ddc041e772b5ab07b19e893e8955bf934", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjAzMjZkZGMwNDFlNzcyYjVhYjA3YjE5ZTg5M2U4OTU1YmY5MzQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-09T00:47:52Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-09T00:49:42Z"}, "message": "Add comment and clean up `expand_annotatable`", "tree": {"sha": "963e18545279512da44b52de59b21ee3121239b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963e18545279512da44b52de59b21ee3121239b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf0326ddc041e772b5ab07b19e893e8955bf934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf0326ddc041e772b5ab07b19e893e8955bf934", "html_url": "https://github.com/rust-lang/rust/commit/dbf0326ddc041e772b5ab07b19e893e8955bf934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf0326ddc041e772b5ab07b19e893e8955bf934/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e3925e8d816b71f3d857217981d2e3d9988b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e3925e8d816b71f3d857217981d2e3d9988b5e", "html_url": "https://github.com/rust-lang/rust/commit/13e3925e8d816b71f3d857217981d2e3d9988b5e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "95624a433730a96d3b931f62edd92334b0b014e2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf0326ddc041e772b5ab07b19e893e8955bf934/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf0326ddc041e772b5ab07b19e893e8955bf934/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=dbf0326ddc041e772b5ab07b19e893e8955bf934", "patch": "@@ -942,6 +942,8 @@ impl SyntaxEnv {\n     }\n \n     pub fn is_crate_root(&mut self) -> bool {\n+        // The first frame is pushed in `SyntaxEnv::new()` and the second frame is\n+        // pushed when folding the crate root pseudo-module (c.f. noop_fold_crate).\n         self.chain.len() == 2\n     }\n }"}, {"sha": "15d192b59b81ea5cb8abce588abaeb4c93818f3d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbf0326ddc041e772b5ab07b19e893e8955bf934/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf0326ddc041e772b5ab07b19e893e8955bf934/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=dbf0326ddc041e772b5ab07b19e893e8955bf934", "patch": "@@ -726,13 +726,11 @@ fn expand_annotatable(a: Annotatable,\n     let new_items: SmallVector<Annotatable> = match a {\n         Annotatable::Item(it) => match it.node {\n             ast::ItemKind::Mac(..) => {\n-                let new_items: SmallVector<P<ast::Item>> = it.and_then(|it| match it.node {\n+                it.and_then(|it| match it.node {\n                     ItemKind::Mac(mac) =>\n                         expand_mac_invoc(mac, Some(it.ident), it.attrs, it.span, fld),\n                     _ => unreachable!(),\n-                });\n-\n-                new_items.into_iter().map(|i| Annotatable::Item(i)).collect()\n+                })\n             }\n             ast::ItemKind::Mod(_) | ast::ItemKind::ForeignMod(_) => {\n                 let valid_ident =\n@@ -748,7 +746,7 @@ fn expand_annotatable(a: Annotatable,\n                 if valid_ident {\n                     fld.cx.mod_pop();\n                 }\n-                result.into_iter().map(|i| Annotatable::Item(i)).collect()\n+                result\n             },\n             ast::ItemKind::ExternCrate(_) => {\n                 // We need to error on `#[macro_use] extern crate` when it isn't at the\n@@ -757,10 +755,10 @@ fn expand_annotatable(a: Annotatable,\n                 for def in fld.cx.loader.load_crate(&it, allows_macros) {\n                     fld.cx.insert_macro(def);\n                 }\n-                SmallVector::one(Annotatable::Item(it))\n+                SmallVector::one(it)\n             },\n-            _ => noop_fold_item(it, fld).into_iter().map(|i| Annotatable::Item(i)).collect(),\n-        },\n+            _ => noop_fold_item(it, fld),\n+        }.into_iter().map(|i| Annotatable::Item(i)).collect(),\n \n         Annotatable::TraitItem(it) => match it.node {\n             ast::TraitItemKind::Method(_, Some(_)) => {"}]}