{"sha": "55b528484d1b705626335b94080e67af3437b421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YjUyODQ4NGQxYjcwNTYyNjMzNWI5NDA4MGU2N2FmMzQzN2I0MjE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-12T00:59:33Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-12T00:59:33Z"}, "message": "Re-xfail two tests that I tried to resurrect (no time right now)", "tree": {"sha": "4007a317c9882367721596393af1d4233407454b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4007a317c9882367721596393af1d4233407454b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55b528484d1b705626335b94080e67af3437b421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55b528484d1b705626335b94080e67af3437b421", "html_url": "https://github.com/rust-lang/rust/commit/55b528484d1b705626335b94080e67af3437b421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55b528484d1b705626335b94080e67af3437b421/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d116db57808599fbc6ba1e278e410e4a3c24a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d116db57808599fbc6ba1e278e410e4a3c24a62", "html_url": "https://github.com/rust-lang/rust/commit/2d116db57808599fbc6ba1e278e410e4a3c24a62"}], "stats": {"total": 115, "additions": 78, "deletions": 37}, "files": [{"sha": "4d2d2a7170e0d78036d9f7a499225a223cc5b8e2", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/55b528484d1b705626335b94080e67af3437b421/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b528484d1b705626335b94080e67af3437b421/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=55b528484d1b705626335b94080e67af3437b421", "patch": "@@ -1,34 +1,35 @@\n-use intrinsic::{tydesc, get_tydesc, visit_tydesc, ty_visitor};\n+// xfail-test\n+use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n enum my_visitor = @{ mut types: ~[str] };\n \n-impl of ty_visitor for my_visitor {\n+impl my_visitor: TyVisitor {\n     fn visit_bot() -> bool {\n-        self.types += [\"bot\"];\n+        self.types += ~[\"bot\"];\n         error!(\"visited bot type\");\n         true\n     }\n     fn visit_nil() -> bool {\n-        self.types += [\"nil\"];\n+        self.types += ~[\"nil\"];\n         error!(\"visited nil type\");\n         true\n     }\n     fn visit_bool() -> bool {\n-        self.types += [\"bool\"];\n+        self.types += ~[\"bool\"];\n         error!(\"visited bool type\");\n         true\n     }\n     fn visit_int() -> bool {\n-        self.types += [\"int\"];\n+        self.types += ~[\"int\"];\n         error!(\"visited int type\");\n         true\n     }\n     fn visit_i8() -> bool {\n-        self.types += [\"i8\"];\n+        self.types += ~[\"i8\"];\n         error!(\"visited i8 type\");\n         true\n     }\n     fn visit_i16() -> bool {\n-        self.types += [\"i16\"];\n+        self.types += ~[\"i16\"];\n         error!(\"visited i16 type\");\n         true\n     }\n@@ -54,41 +55,41 @@ impl of ty_visitor for my_visitor {\n     fn visit_estr_fixed(_sz: uint, _sz: uint,\n                         _align: uint) -> bool { true }\n \n-    fn visit_box(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_uniq(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_ptr(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_rptr(_mtbl: uint, _inner: *tydesc) -> bool { true }\n+    fn visit_box(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_uniq(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_ptr(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_rptr(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n \n-    fn visit_vec(_mtbl: uint, inner: *tydesc) -> bool {\n-        self.types += [\"[\"];\n-        visit_tydesc(inner, my_visitor(*self) as ty_visitor);\n-        self.types += [\"]\"];\n+    fn visit_vec(_mtbl: uint, inner: *TyDesc) -> bool {\n+        self.types += ~[\"[\"];\n+        visit_tydesc(inner, my_visitor(*self) as TyVisitor);\n+        self.types += ~[\"]\"];\n         true\n     }\n-    fn visit_unboxed_vec(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_evec_box(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_evec_uniq(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_evec_slice(_mtbl: uint, _inner: *tydesc) -> bool { true }\n+    fn visit_unboxed_vec(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_box(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_uniq(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_slice(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_evec_fixed(_n: uint, _sz: uint, _align: uint,\n-                        _mtbl: uint, _inner: *tydesc) -> bool { true }\n+                        _mtbl: uint, _inner: *TyDesc) -> bool { true }\n \n     fn visit_enter_rec(_n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n     fn visit_rec_field(_i: uint, _name: &str,\n-                       _mtbl: uint, _inner: *tydesc) -> bool { true }\n+                       _mtbl: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_leave_rec(_n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_class(_n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n     fn visit_class_field(_i: uint, _name: &str,\n-                         _mtbl: uint, _inner: *tydesc) -> bool { true }\n+                         _mtbl: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_leave_class(_n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_tup(_n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n-    fn visit_tup_field(_i: uint, _inner: *tydesc) -> bool { true }\n+    fn visit_tup_field(_i: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_leave_tup(_n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n@@ -98,7 +99,7 @@ impl of ty_visitor for my_visitor {\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n-    fn visit_enum_variant_field(_i: uint, _inner: *tydesc) -> bool { true }\n+    fn visit_enum_variant_field(_i: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_leave_enum_variant(_variant: uint,\n                                 _disr_val: int,\n                                 _n_fields: uint,\n@@ -108,8 +109,8 @@ impl of ty_visitor for my_visitor {\n \n     fn visit_enter_fn(_purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n-    fn visit_fn_input(_i: uint, _mode: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_fn_output(_retstyle: uint, _inner: *tydesc) -> bool { true }\n+    fn visit_fn_input(_i: uint, _mode: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_fn_output(_retstyle: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_leave_fn(_purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n@@ -121,17 +122,17 @@ impl of ty_visitor for my_visitor {\n     fn visit_self() -> bool { true }\n     fn visit_type() -> bool { true }\n     fn visit_opaque_box() -> bool { true }\n-    fn visit_constr(_inner: *tydesc) -> bool { true }\n+    fn visit_constr(_inner: *TyDesc) -> bool { true }\n     fn visit_closure_ptr(_ck: uint) -> bool { true }\n }\n \n-fn visit_ty<T>(v: ty_visitor) {\n+fn visit_ty<T>(v: TyVisitor) {\n     visit_tydesc(get_tydesc::<T>(), v);\n }\n \n fn main() {\n     let v = my_visitor(@{mut types: ~[]});\n-    let vv = v as ty_visitor;\n+    let vv = v as TyVisitor;\n \n     visit_ty::<bool>(vv);\n     visit_ty::<int>(vv);"}, {"sha": "4b5852a1d97298eacf3ffb0d7db73889256554c3", "filename": "src/test/run-pass/task-compare.rs", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/55b528484d1b705626335b94080e67af3437b421/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b528484d1b705626335b94080e67af3437b421/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-compare.rs?ref=55b528484d1b705626335b94080e67af3437b421", "patch": "@@ -1,20 +1,60 @@\n+// xfail-test\n /**\n    A test case for issue #577, which also exposes #588\n */\n \n extern mod std;\n-use task::join;\n \n fn child() { }\n \n+struct notify {\n+    ch: comm::Chan<bool>, v: @mut bool,\n+    drop {\n+        error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n+               task::get_task(),\n+               ptr::addr_of(&(*(self.v))) as uint,\n+               task::failing(),\n+               *(self.v));\n+        let b = *(self.v);\n+        comm::send(self.ch, b);\n+    }\n+}\n+\n+fn notify(ch: comm::Chan<bool>, v: @mut bool) -> notify {\n+    notify {\n+        ch: ch,\n+        v: v\n+    }\n+}\n+\n+fn joinable(+f: fn~()) -> comm::Port<bool> {\n+    fn wrapper(+c: comm::Chan<bool>, +f: fn()) {\n+        let b = @mut false;\n+        error!(\"wrapper: task=%? allocated v=%x\",\n+               task::get_task(),\n+               ptr::addr_of(&(*b)) as uint);\n+        let _r = notify(c, b);\n+        f();\n+        *b = true;\n+    }\n+    let p = comm::Port();\n+    let c = comm::Chan(&p);\n+    do task::spawn_unlinked { wrapper(c, copy f) };\n+    p\n+}\n+\n+fn join(port: comm::Port<bool>) -> bool {\n+    comm::recv(port)\n+}\n+\n fn main() {\n     // tasks\n     let t1;\n     let t2;\n \n     let c1 = child, c2 = child;\n-    t1 = task::spawn_joinable(c1);\n-    t2 = task::spawn_joinable(c2);\n+    t1 = joinable(c1);\n+    t2 = joinable(c2);\n \n     assert (t1 == t1);\n     assert (t1 != t2);\n@@ -23,15 +63,15 @@ fn main() {\n     let p1;\n     let p2;\n \n-    p1 = comm::port::<int>();\n-    p2 = comm::port::<int>();\n+    p1 = comm::Port::<int>();\n+    p2 = comm::Port::<int>();\n \n     assert (p1 == p1);\n     assert (p1 != p2);\n \n     // channels\n-    let c1 = comm::chan(p1);\n-    let c2 = comm::chan(p2);\n+    let c1 = comm::Chan(p1);\n+    let c2 = comm::Chan(p2);\n \n     assert (c1 == c1);\n     assert (c1 != c2);"}]}