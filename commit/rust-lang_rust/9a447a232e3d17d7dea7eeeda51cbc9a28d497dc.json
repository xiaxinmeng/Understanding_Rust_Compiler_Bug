{"sha": "9a447a232e3d17d7dea7eeeda51cbc9a28d497dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDQ3YTIzMmUzZDE3ZDdkZWE3ZWVlZGE1MWNiYzlhMjhkNDk3ZGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-09-19T14:07:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-09-19T14:07:50Z"}, "message": "replace boolean with lazy iteration\n\nShould probably check how this performs, but it's always nicer to\ntrack just a bit less mutable state.", "tree": {"sha": "421ead191bde888d91e3cd9a56e26b65391d0c9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/421ead191bde888d91e3cd9a56e26b65391d0c9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a447a232e3d17d7dea7eeeda51cbc9a28d497dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a447a232e3d17d7dea7eeeda51cbc9a28d497dc", "html_url": "https://github.com/rust-lang/rust/commit/9a447a232e3d17d7dea7eeeda51cbc9a28d497dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a447a232e3d17d7dea7eeeda51cbc9a28d497dc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d95a7768a1c5497c6ccb0c2ded30f5968552513c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d95a7768a1c5497c6ccb0c2ded30f5968552513c", "html_url": "https://github.com/rust-lang/rust/commit/d95a7768a1c5497c6ccb0c2ded30f5968552513c"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "3c735c8cb09d73c7a9c538d601b02d01c4c883a1", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9a447a232e3d17d7dea7eeeda51cbc9a28d497dc/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a447a232e3d17d7dea7eeeda51cbc9a28d497dc/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=9a447a232e3d17d7dea7eeeda51cbc9a28d497dc", "patch": "@@ -104,19 +104,6 @@ struct Scope {\n     /// the span of that region_scope\n     region_scope_span: Span,\n \n-    /// Whether there's anything to do for the cleanup path, that is,\n-    /// when unwinding through this scope. This includes destructors,\n-    /// but not StorageDead statements, which don't get emitted at all\n-    /// for unwinding, for several reasons:\n-    ///  * clang doesn't emit llvm.lifetime.end for C++ unwinding\n-    ///  * LLVM's memory dependency analysis can't handle it atm\n-    ///  * polluting the cleanup MIR with StorageDead creates\n-    ///    landing pads even though there's no actual destructors\n-    ///  * freeing up stack space has no effect during unwinding\n-    /// Note that for generators we do emit StorageDeads, for the\n-    /// use of optimizations in the MIR generator transform.\n-    needs_cleanup: bool,\n-\n     /// set of places to drop when exiting this scope. This starts\n     /// out empty but grows as variables are declared during the\n     /// building process. This is a stack, so we always drop from the\n@@ -261,6 +248,25 @@ impl Scope {\n             scope: self.source_scope\n         }\n     }\n+\n+\n+    /// Whether there's anything to do for the cleanup path, that is,\n+    /// when unwinding through this scope. This includes destructors,\n+    /// but not StorageDead statements, which don't get emitted at all\n+    /// for unwinding, for several reasons:\n+    ///  * clang doesn't emit llvm.lifetime.end for C++ unwinding\n+    ///  * LLVM's memory dependency analysis can't handle it atm\n+    ///  * polluting the cleanup MIR with StorageDead creates\n+    ///    landing pads even though there's no actual destructors\n+    ///  * freeing up stack space has no effect during unwinding\n+    /// Note that for generators we do emit StorageDeads, for the\n+    /// use of optimizations in the MIR generator transform.\n+    fn needs_cleanup(&self) -> bool {\n+        self.drops.iter().any(|drop| match drop.kind {\n+            DropKind::Value => true,\n+            DropKind::Storage => false,\n+        })\n+    }\n }\n \n impl<'tcx> Scopes<'tcx> {\n@@ -274,7 +280,6 @@ impl<'tcx> Scopes<'tcx> {\n             source_scope: vis_scope,\n             region_scope: region_scope.0,\n             region_scope_span: region_scope.1.span,\n-            needs_cleanup: false,\n             drops: vec![],\n             cached_generator_drop: None,\n             cached_exits: Default::default(),\n@@ -295,7 +300,7 @@ impl<'tcx> Scopes<'tcx> {\n \n     fn may_panic(&self, scope_count: usize) -> bool {\n         let len = self.len();\n-        self.scopes[(len - scope_count)..].iter().any(|s| s.needs_cleanup)\n+        self.scopes[(len - scope_count)..].iter().any(|s| s.needs_cleanup())\n     }\n \n     /// Finds the breakable scope for a given label. This is used for\n@@ -801,10 +806,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // cache of outer scope stays intact.\n             scope.invalidate_cache(!needs_drop, self.is_generator, this_scope);\n             if this_scope {\n-                if let DropKind::Value = drop_kind {\n-                    scope.needs_cleanup = true;\n-                }\n-\n                 let region_scope_span = region_scope.span(self.hir.tcx(),\n                                                           &self.hir.region_scope_tree);\n                 // Attribute scope exit drops to scope's closing brace."}]}