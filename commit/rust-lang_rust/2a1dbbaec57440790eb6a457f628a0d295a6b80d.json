{"sha": "2a1dbbaec57440790eb6a457f628a0d295a6b80d", "node_id": "C_kwDOAAsO6NoAKDJhMWRiYmFlYzU3NDQwNzkwZWI2YTQ1N2Y2MjhhMGQyOTVhNmI4MGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T12:26:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T12:26:43Z"}, "message": "Auto merge of #10777 - Icxolu:unnecessary_collect, r=xFrednet\n\nEnhance `needless_collect`: lint in method/function arguments that take an `IntoIterator`\n\nUpdates `needless_collect` to also lint `collect` calls in method/function arguments that take an `IntoIterator` (for example `Extend::extend`). Every `Iterator` trivially implements `IntoIterator` and collecting it only causes an unnecessary allocation.\n\n---\n\nchangelog: Enhancement: [`needless_collect`]: Now also detects function arguments, taking a generic `IntoIterator`\n[#10777](https://github.com/rust-lang/rust-clippy/pull/10777)\n<!-- changelog_checked -->\n\nfixes #10762", "tree": {"sha": "57b9faea02dbeece2e54a7440de0f7cd847b717c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57b9faea02dbeece2e54a7440de0f7cd847b717c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a1dbbaec57440790eb6a457f628a0d295a6b80d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1dbbaec57440790eb6a457f628a0d295a6b80d", "html_url": "https://github.com/rust-lang/rust/commit/2a1dbbaec57440790eb6a457f628a0d295a6b80d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a1dbbaec57440790eb6a457f628a0d295a6b80d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e8d2c59bcdf34ae19677cb10f0ce435224f324f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8d2c59bcdf34ae19677cb10f0ce435224f324f", "html_url": "https://github.com/rust-lang/rust/commit/1e8d2c59bcdf34ae19677cb10f0ce435224f324f"}, {"sha": "84f89f30ebda5485badac09b34d666fbab243a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f89f30ebda5485badac09b34d666fbab243a19", "html_url": "https://github.com/rust-lang/rust/commit/84f89f30ebda5485badac09b34d666fbab243a19"}], "stats": {"total": 118, "additions": 115, "deletions": 3}, "files": [{"sha": "6841aaf626ca53b2264edf31febdd28250264b9b", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2a1dbbaec57440790eb6a457f628a0d295a6b80d/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1dbbaec57440790eb6a457f628a0d295a6b80d/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=2a1dbbaec57440790eb6a457f628a0d295a6b80d", "patch": "@@ -1,13 +1,13 @@\n use super::NEEDLESS_COLLECT;\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n-use clippy_utils::higher;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_type_diagnostic_item, make_normalized_projection, make_projection};\n use clippy_utils::{\n     can_move_expr_to_closure, get_enclosing_block, get_parent_node, is_trait_method, path_to_local, path_to_local_id,\n     CaptureKind,\n };\n+use clippy_utils::{fn_def_id, higher};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n@@ -16,7 +16,7 @@ use rustc_hir::{\n };\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::{self, AssocKind, EarlyBinder, GenericArg, GenericArgKind, Ty};\n+use rustc_middle::ty::{self, AssocKind, Clause, EarlyBinder, GenericArg, GenericArgKind, PredicateKind, Ty};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol};\n \n@@ -32,6 +32,8 @@ pub(super) fn check<'tcx>(\n     if let Some(parent) = get_parent_node(cx.tcx, collect_expr.hir_id) {\n         match parent {\n             Node::Expr(parent) => {\n+                check_collect_into_intoiterator(cx, parent, collect_expr, call_span, iter_expr);\n+\n                 if let ExprKind::MethodCall(name, _, args @ ([] | [_]), _) = parent.kind {\n                     let mut app = Applicability::MachineApplicable;\n                     let name = name.ident.as_str();\n@@ -134,6 +136,68 @@ pub(super) fn check<'tcx>(\n     }\n }\n \n+/// checks for for collecting into a (generic) method or function argument\n+/// taking an `IntoIterator`\n+fn check_collect_into_intoiterator<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    parent: &'tcx Expr<'tcx>,\n+    collect_expr: &'tcx Expr<'tcx>,\n+    call_span: Span,\n+    iter_expr: &'tcx Expr<'tcx>,\n+) {\n+    if let Some(id) = fn_def_id(cx, parent) {\n+        let args = match parent.kind {\n+            ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) => args,\n+            _ => &[],\n+        };\n+        // find the argument index of the `collect_expr` in the\n+        // function / method call\n+        if let Some(arg_idx) = args.iter().position(|e| e.hir_id == collect_expr.hir_id).map(|i| {\n+            if matches!(parent.kind, ExprKind::MethodCall(_, _, _, _)) {\n+                i + 1\n+            } else {\n+                i\n+            }\n+        }) {\n+            // extract the input types of the function/method call\n+            // that contains `collect_expr`\n+            let inputs = cx\n+                .tcx\n+                .liberate_late_bound_regions(id, cx.tcx.fn_sig(id).subst_identity())\n+                .inputs();\n+\n+            // map IntoIterator generic bounds to their signature\n+            // types and check whether the argument type is an\n+            // `IntoIterator`\n+            if cx\n+                .tcx\n+                .param_env(id)\n+                .caller_bounds()\n+                .into_iter()\n+                .filter_map(|p| {\n+                    if let PredicateKind::Clause(Clause::Trait(t)) = p.kind().skip_binder()\n+                            && cx.tcx.is_diagnostic_item(sym::IntoIterator,t.trait_ref.def_id) {\n+                                Some(t.self_ty())\n+                            } else {\n+                                None\n+                            }\n+                })\n+                .any(|ty| ty == inputs[arg_idx])\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    NEEDLESS_COLLECT,\n+                    call_span.with_lo(iter_expr.span.hi()),\n+                    NEEDLESS_COLLECT_MSG,\n+                    \"remove this call\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n /// Checks if the given method call matches the expected signature of `([&[mut]] self) -> bool`\n fn is_is_empty_sig(cx: &LateContext<'_>, call_id: HirId) -> bool {\n     cx.typeck_results().type_dependent_def_id(call_id).map_or(false, |id| {"}, {"sha": "b7e80af501547e6f896d736d4f921a63557174f7", "filename": "tests/ui/needless_collect.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a1dbbaec57440790eb6a457f628a0d295a6b80d/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2a1dbbaec57440790eb6a457f628a0d295a6b80d/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=2a1dbbaec57440790eb6a457f628a0d295a6b80d", "patch": "@@ -62,4 +62,16 @@ fn main() {\n \n     let _ = sample.iter().next().is_none();\n     let _ = sample.iter().any(|x| x == &0);\n+\n+    #[allow(clippy::double_parens)]\n+    {\n+        Vec::<u8>::new().extend((0..10));\n+        foo((0..10));\n+        bar((0..10).collect::<Vec<_>>(), (0..10));\n+        baz((0..10), (), ('a'..='z'))\n+    }\n }\n+\n+fn foo(_: impl IntoIterator<Item = usize>) {}\n+fn bar<I: IntoIterator<Item = usize>>(_: Vec<usize>, _: I) {}\n+fn baz<I: IntoIterator<Item = usize>>(_: I, _: (), _: impl IntoIterator<Item = char>) {}"}, {"sha": "680b6fa5b55f53b0684fbceffa3a9b38fb18b6f1", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a1dbbaec57440790eb6a457f628a0d295a6b80d/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1dbbaec57440790eb6a457f628a0d295a6b80d/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=2a1dbbaec57440790eb6a457f628a0d295a6b80d", "patch": "@@ -62,4 +62,16 @@ fn main() {\n \n     let _ = sample.iter().collect::<VecWrapper<_>>().is_empty();\n     let _ = sample.iter().collect::<VecWrapper<_>>().contains(&&0);\n+\n+    #[allow(clippy::double_parens)]\n+    {\n+        Vec::<u8>::new().extend((0..10).collect::<Vec<_>>());\n+        foo((0..10).collect::<Vec<_>>());\n+        bar((0..10).collect::<Vec<_>>(), (0..10).collect::<Vec<_>>());\n+        baz((0..10), (), ('a'..='z').collect::<Vec<_>>())\n+    }\n }\n+\n+fn foo(_: impl IntoIterator<Item = usize>) {}\n+fn bar<I: IntoIterator<Item = usize>>(_: Vec<usize>, _: I) {}\n+fn baz<I: IntoIterator<Item = usize>>(_: I, _: (), _: impl IntoIterator<Item = char>) {}"}, {"sha": "ad22a7b057e0f9898c863efb63c6b1837f5f2d51", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a1dbbaec57440790eb6a457f628a0d295a6b80d/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a1dbbaec57440790eb6a457f628a0d295a6b80d/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=2a1dbbaec57440790eb6a457f628a0d295a6b80d", "patch": "@@ -90,5 +90,29 @@ error: avoid using `collect()` when not needed\n LL |     let _ = sample.iter().collect::<VecWrapper<_>>().contains(&&0);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == &0)`\n \n-error: aborting due to 15 previous errors\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:68:40\n+   |\n+LL |         Vec::<u8>::new().extend((0..10).collect::<Vec<_>>());\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ help: remove this call\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:69:20\n+   |\n+LL |         foo((0..10).collect::<Vec<_>>());\n+   |                    ^^^^^^^^^^^^^^^^^^^^ help: remove this call\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:70:49\n+   |\n+LL |         bar((0..10).collect::<Vec<_>>(), (0..10).collect::<Vec<_>>());\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^ help: remove this call\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:71:37\n+   |\n+LL |         baz((0..10), (), ('a'..='z').collect::<Vec<_>>())\n+   |                                     ^^^^^^^^^^^^^^^^^^^^ help: remove this call\n+\n+error: aborting due to 19 previous errors\n "}]}