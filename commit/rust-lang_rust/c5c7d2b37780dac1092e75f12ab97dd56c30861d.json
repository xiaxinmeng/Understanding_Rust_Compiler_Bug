{"sha": "c5c7d2b37780dac1092e75f12ab97dd56c30861d", "node_id": "C_kwDOAAsO6NoAKGM1YzdkMmIzNzc4MGRhYzEwOTJlNzVmMTJhYjk3ZGQ1NmMzMDg2MWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-24T20:49:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-24T20:49:11Z"}, "message": "Auto merge of #108421 - Dylan-DPC:rollup-mpeovxd, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #106541 (implement const iterator using `rustc_do_not_const_check`)\n - #106918 (Rebuild BinaryHeap on unwind from retain)\n - #106923 (Restore behavior when primary bundle is missing)\n - #108169 (Make query keys `Copy`)\n - #108287 (Add test for bad cast with deferred projection equality)\n - #108370 (std: time: Avoid to use \"was created\" in elapsed() description)\n - #108377 (Fix ICE in 'duplicate diagnostic item' diagnostic)\n - #108388 (parser: provide better suggestions and errors on closures with braces missing)\n - #108391 (Fix `is_terminal`'s handling of long paths on Windows.)\n - #108401 (diagnostics: remove inconsistent English article \"this\" from E0107)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "49c2d2c3260c227c8505e60f115981e27183caef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c2d2c3260c227c8505e60f115981e27183caef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c7d2b37780dac1092e75f12ab97dd56c30861d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c7d2b37780dac1092e75f12ab97dd56c30861d", "html_url": "https://github.com/rust-lang/rust/commit/c5c7d2b37780dac1092e75f12ab97dd56c30861d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c7d2b37780dac1092e75f12ab97dd56c30861d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c993eba8b76eae497e98433ae075b00f01be10", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c993eba8b76eae497e98433ae075b00f01be10", "html_url": "https://github.com/rust-lang/rust/commit/07c993eba8b76eae497e98433ae075b00f01be10"}, {"sha": "c77cf40df0bb75aceb85ab4908fbdb103538df9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c77cf40df0bb75aceb85ab4908fbdb103538df9a", "html_url": "https://github.com/rust-lang/rust/commit/c77cf40df0bb75aceb85ab4908fbdb103538df9a"}], "stats": {"total": 1149, "additions": 741, "deletions": 408}, "files": [{"sha": "010e5f060bf0b86df7b34be46ed728363b2babdc", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -135,7 +135,10 @@ pub fn fluent_bundle(\n \n     let fallback_locale = langid!(\"en-US\");\n     let requested_fallback_locale = requested_locale.as_ref() == Some(&fallback_locale);\n-\n+    trace!(?requested_fallback_locale);\n+    if requested_fallback_locale && additional_ftl_path.is_none() {\n+        return Ok(None);\n+    }\n     // If there is only `-Z additional-ftl-path`, assume locale is \"en-US\", otherwise use user\n     // provided locale.\n     let locale = requested_locale.clone().unwrap_or(fallback_locale);\n@@ -153,7 +156,7 @@ pub fn fluent_bundle(\n     bundle.set_use_isolating(with_directionality_markers);\n \n     // If the user requests the default locale then don't try to load anything.\n-    if !requested_fallback_locale && let Some(requested_locale) = requested_locale {\n+    if let Some(requested_locale) = requested_locale {\n         let mut found_resources = false;\n         for sysroot in user_provided_sysroot.iter_mut().chain(sysroot_candidates.iter_mut()) {\n             sysroot.push(\"share\");"}, {"sha": "ed35eb1b6c4ad8f567180cc9119ff7aa8c097938", "filename": "compiler/rustc_errors/src/translation.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-use crate::error::TranslateError;\n+use crate::error::{TranslateError, TranslateErrorKind};\n use crate::snippet::Style;\n use crate::{DiagnosticArg, DiagnosticMessage, FluentBundle};\n use rustc_data_structures::sync::Lrc;\n@@ -95,6 +95,16 @@ pub trait Translate {\n                 // The primary bundle was present and translation succeeded\n                 Some(Ok(t)) => t,\n \n+                // If `translate_with_bundle` returns `Err` with the primary bundle, this is likely\n+                // just that the primary bundle doesn't contain the message being translated, so\n+                // proceed to the fallback bundle.\n+                Some(Err(\n+                    primary @ TranslateError::One {\n+                        kind: TranslateErrorKind::MessageMissing, ..\n+                    },\n+                )) => translate_with_bundle(self.fallback_fluent_bundle())\n+                    .map_err(|fallback| primary.and(fallback))?,\n+\n                 // Always yeet out for errors on debug (unless\n                 // `RUSTC_TRANSLATION_NO_DEBUG_ASSERT` is set in the environment - this allows\n                 // local runs of the test suites, of builds with debug assertions, to test the\n@@ -106,9 +116,8 @@ pub trait Translate {\n                     do yeet primary\n                 }\n \n-                // If `translate_with_bundle` returns `Err` with the primary bundle, this is likely\n-                // just that the primary bundle doesn't contain the message being translated or\n-                // something else went wrong) so proceed to the fallback bundle.\n+                // ..otherwise, for end users, an error about this wouldn't be useful or actionable, so\n+                // just hide it and try with the fallback bundle.\n                 Some(Err(primary)) => translate_with_bundle(self.fallback_fluent_bundle())\n                     .map_err(|fallback| primary.and(fallback))?,\n "}, {"sha": "cae884ae8fb73c47d721305ef985a1f7cf751875", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n         if self.gen_args.span_ext().is_some() {\n             format!(\n-                \"this {} takes {}{} {} argument{} but {} {} supplied\",\n+                \"{} takes {}{} {} argument{} but {} {} supplied\",\n                 def_kind,\n                 quantifier,\n                 bound,"}, {"sha": "91fd8fad73c7b1647be76c025324a931b01d0e84", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -71,7 +71,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::config;\n use rustc_session::Session;\n use rustc_span::def_id::{DefId, LocalDefId};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n fluent_messages! { \"../locales/en-US.ftl\" }\n \n@@ -207,6 +207,11 @@ fn typeck_with_fallback<'tcx>(\n \n     let typeck_results = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n+        let param_env = if tcx.has_attr(def_id.to_def_id(), sym::rustc_do_not_const_check) {\n+            param_env.without_const()\n+        } else {\n+            param_env\n+        };\n         let mut fcx = FnCtxt::new(&inh, param_env, def_id);\n \n         if let Some(hir::FnSig { header, decl, .. }) = fn_sig {"}, {"sha": "fda9151478f6890cf7e9e6be846616655aab9b43", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -982,7 +982,11 @@ impl<'a> Parser<'a> {\n         let initial_semicolon = self.token.span;\n \n         while self.eat(&TokenKind::Semi) {\n-            let _ = self.parse_stmt(ForceCollect::Yes)?;\n+            let _ =\n+                self.parse_stmt_without_recovery(false, ForceCollect::Yes).unwrap_or_else(|e| {\n+                    e.cancel();\n+                    None\n+                });\n         }\n \n         expect_err.set_primary_message("}, {"sha": "8fe8472b21630c424d8331306041aac3a328bdc7", "filename": "compiler/rustc_passes/locales/en-US.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -407,10 +407,10 @@ passes_duplicate_diagnostic_item =\n \n passes_duplicate_diagnostic_item_in_crate =\n     duplicate diagnostic item in crate `{$crate_name}`: `{$name}`.\n+    .note = the diagnostic item is first defined in crate `{$orig_crate_name}`.\n \n passes_diagnostic_item_first_defined =\n     the diagnostic item is first defined here\n-    .note = the diagnostic item is first defined in crate `{$orig_crate_name}`.\n \n passes_abi =\n     abi: {$abi}"}, {"sha": "4b3cd16c29f25914d6fea13aa84819feaeb8f7f1", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -21,7 +21,7 @@ pub trait QueryStorage {\n }\n \n pub trait QueryCache: QueryStorage + Sized {\n-    type Key: Hash + Eq + Clone + Debug;\n+    type Key: Hash + Eq + Copy + Debug;\n \n     /// Checks if the query is already computed and in the cache.\n     /// It returns the shard index and a lock guard to the shard,\n@@ -61,7 +61,7 @@ impl<K: Eq + Hash, V: Copy + Debug> QueryStorage for DefaultCache<K, V> {\n \n impl<K, V> QueryCache for DefaultCache<K, V>\n where\n-    K: Eq + Hash + Clone + Debug,\n+    K: Eq + Hash + Copy + Debug,\n     V: Copy + Debug,\n {\n     type Key = K;\n@@ -179,7 +179,7 @@ impl<K: Eq + Idx, V: Copy + Debug> QueryStorage for VecCache<K, V> {\n \n impl<K, V> QueryCache for VecCache<K, V>\n where\n-    K: Eq + Idx + Clone + Debug,\n+    K: Eq + Idx + Copy + Debug,\n     V: Copy + Debug,\n {\n     type Key = K;"}, {"sha": "d563738734657e3c64171cde5bf1f23608780888", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -19,7 +19,9 @@ pub type TryLoadFromDisk<Qcx, Q> =\n pub trait QueryConfig<Qcx: QueryContext> {\n     const NAME: &'static str;\n \n-    type Key: DepNodeParams<Qcx::DepContext> + Eq + Hash + Clone + Debug;\n+    // `Key` and `Value` are `Copy` instead of `Clone` to ensure copying them stays cheap,\n+    // but it isn't necessary.\n+    type Key: DepNodeParams<Qcx::DepContext> + Eq + Hash + Copy + Debug;\n     type Value: Debug + Copy;\n \n     type Cache: QueryCache<Key = Self::Key, Value = Self::Value>;"}, {"sha": "5499165930db0209babbcd3c20ffdc678eaa00b3", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -48,7 +48,7 @@ enum QueryResult<D: DepKind> {\n \n impl<K, D> QueryState<K, D>\n where\n-    K: Eq + Hash + Clone + Debug,\n+    K: Eq + Hash + Copy + Debug,\n     D: DepKind,\n {\n     pub fn all_inactive(&self) -> bool {\n@@ -77,7 +77,7 @@ where\n             for shard in shards.iter() {\n                 for (k, v) in shard.iter() {\n                     if let QueryResult::Started(ref job) = *v {\n-                        let query = make_query(qcx, k.clone());\n+                        let query = make_query(qcx, *k);\n                         jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n                     }\n                 }\n@@ -91,7 +91,7 @@ where\n             // really hurt much.)\n             for (k, v) in self.active.try_lock()?.iter() {\n                 if let QueryResult::Started(ref job) = *v {\n-                    let query = make_query(qcx, k.clone());\n+                    let query = make_query(qcx, *k);\n                     jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n                 }\n             }\n@@ -111,7 +111,7 @@ impl<K, D: DepKind> Default for QueryState<K, D> {\n /// This will poison the relevant query if dropped.\n struct JobOwner<'tcx, K, D: DepKind>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n {\n     state: &'tcx QueryState<K, D>,\n     key: K,\n@@ -163,7 +163,7 @@ where\n \n impl<'tcx, K, D: DepKind> JobOwner<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n {\n     /// Either gets a `JobOwner` corresponding the query, allowing us to\n     /// start executing the query, or returns with the result of the query.\n@@ -195,7 +195,7 @@ where\n                 let job = qcx.current_query_job();\n                 let job = QueryJob::new(id, span, job);\n \n-                let key = entry.key().clone();\n+                let key = *entry.key();\n                 entry.insert(QueryResult::Started(job));\n \n                 let owner = JobOwner { state, id, key };\n@@ -274,7 +274,7 @@ where\n \n impl<'tcx, K, D> Drop for JobOwner<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n     D: DepKind,\n {\n     #[inline(never)]\n@@ -291,7 +291,7 @@ where\n                 QueryResult::Started(job) => job,\n                 QueryResult::Poisoned => panic!(),\n             };\n-            shard.insert(self.key.clone(), QueryResult::Poisoned);\n+            shard.insert(self.key, QueryResult::Poisoned);\n             job\n         };\n         // Also signal the completion of the job, so waiters\n@@ -310,7 +310,7 @@ pub(crate) struct CycleError<D: DepKind> {\n /// The result of `try_start`.\n enum TryGetJob<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n     D: DepKind,\n {\n     /// The query is not yet started. Contains a guard to the cache eventually used to start it.\n@@ -358,10 +358,9 @@ where\n     Q: QueryConfig<Qcx>,\n     Qcx: QueryContext,\n {\n-    match JobOwner::<'_, Q::Key, Qcx::DepKind>::try_start(&qcx, state, span, key.clone()) {\n+    match JobOwner::<'_, Q::Key, Qcx::DepKind>::try_start(&qcx, state, span, key) {\n         TryGetJob::NotYetStarted(job) => {\n-            let (result, dep_node_index) =\n-                execute_job::<Q, Qcx>(qcx, key.clone(), dep_node, job.id);\n+            let (result, dep_node_index) = execute_job::<Q, Qcx>(qcx, key, dep_node, job.id);\n             if Q::FEEDABLE {\n                 // We should not compute queries that also got a value via feeding.\n                 // This can't happen, as query feeding adds the very dependencies to the fed query\n@@ -551,7 +550,7 @@ where\n     let prof_timer = qcx.dep_context().profiler().query_provider();\n \n     // The dep-graph for this computation is already in-place.\n-    let result = dep_graph.with_ignore(|| Q::compute(qcx, key.clone()));\n+    let result = dep_graph.with_ignore(|| Q::compute(qcx, *key));\n \n     prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n "}, {"sha": "f1d0a305d999f1b7e9ab3c85e77dc79d1450fb5b", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -851,18 +851,30 @@ impl<T: Ord> BinaryHeap<T> {\n     where\n         F: FnMut(&T) -> bool,\n     {\n-        let mut first_removed = self.len();\n+        struct RebuildOnDrop<'a, T: Ord> {\n+            heap: &'a mut BinaryHeap<T>,\n+            first_removed: usize,\n+        }\n+\n+        let mut guard = RebuildOnDrop { first_removed: self.len(), heap: self };\n+\n         let mut i = 0;\n-        self.data.retain(|e| {\n+        guard.heap.data.retain(|e| {\n             let keep = f(e);\n-            if !keep && i < first_removed {\n-                first_removed = i;\n+            if !keep && i < guard.first_removed {\n+                guard.first_removed = i;\n             }\n             i += 1;\n             keep\n         });\n-        // data[0..first_removed] is untouched, so we only need to rebuild the tail:\n-        self.rebuild_tail(first_removed);\n+\n+        impl<'a, T: Ord> Drop for RebuildOnDrop<'a, T> {\n+            fn drop(&mut self) {\n+                // data[..first_removed] is untouched, so we only need to\n+                // rebuild the tail:\n+                self.heap.rebuild_tail(self.first_removed);\n+            }\n+        }\n     }\n }\n "}, {"sha": "500caa35678ab2abc16f92c51e54fa56837f7122", "filename": "library/alloc/src/collections/binary_heap/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -474,6 +474,25 @@ fn test_retain() {\n     assert!(a.is_empty());\n }\n \n+#[test]\n+fn test_retain_catch_unwind() {\n+    let mut heap = BinaryHeap::from(vec![3, 1, 2]);\n+\n+    // Removes the 3, then unwinds out of retain.\n+    let _ = catch_unwind(AssertUnwindSafe(|| {\n+        heap.retain(|e| {\n+            if *e == 1 {\n+                panic!();\n+            }\n+            false\n+        });\n+    }));\n+\n+    // Naively this would be [1, 2] (an invalid heap) if BinaryHeap delegates to\n+    // Vec's retain impl and then does not rebuild the heap after that unwinds.\n+    assert_eq!(heap.into_vec(), [2, 1]);\n+}\n+\n // old binaryheap failed this test\n //\n // Integrity means that all elements are present after a comparison panics,"}, {"sha": "b3a630d9559952f79d55e7ea2a95d5224ec19255", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -69,6 +69,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n #[doc(notable_trait)]\n #[rustc_diagnostic_item = \"Iterator\"]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[rustc_diagnostic_item = \"IteratorItem\"]\n@@ -141,6 +142,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_next_chunk\", reason = \"recently added\", issue = \"98326\")]\n+    #[rustc_do_not_const_check]\n     fn next_chunk<const N: usize>(\n         &mut self,\n     ) -> Result<[Self::Item; N], array::IntoIter<Self::Item, N>>\n@@ -218,6 +220,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (0, None)\n     }\n@@ -255,6 +258,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn count(self) -> usize\n     where\n         Self: Sized,\n@@ -285,6 +289,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn last(self) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -331,6 +336,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n+    #[rustc_do_not_const_check]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n         for i in 0..n {\n             self.next().ok_or(i)?;\n@@ -379,6 +385,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n         self.advance_by(n).ok()?;\n         self.next()\n@@ -431,6 +438,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n+    #[rustc_do_not_const_check]\n     fn step_by(self, step: usize) -> StepBy<Self>\n     where\n         Self: Sized,\n@@ -502,6 +510,7 @@ pub trait Iterator {\n     /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>\n     where\n         Self: Sized,\n@@ -620,6 +629,7 @@ pub trait Iterator {\n     /// [`zip`]: crate::iter::zip\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n     where\n         Self: Sized,\n@@ -662,6 +672,7 @@ pub trait Iterator {\n     /// [`intersperse_with`]: Iterator::intersperse_with\n     #[inline]\n     #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+    #[rustc_do_not_const_check]\n     fn intersperse(self, separator: Self::Item) -> Intersperse<Self>\n     where\n         Self: Sized,\n@@ -720,6 +731,7 @@ pub trait Iterator {\n     /// [`intersperse`]: Iterator::intersperse\n     #[inline]\n     #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+    #[rustc_do_not_const_check]\n     fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>\n     where\n         Self: Sized,\n@@ -779,6 +791,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn map<B, F>(self, f: F) -> Map<Self, F>\n     where\n         Self: Sized,\n@@ -824,6 +837,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_for_each\", since = \"1.21.0\")]\n+    #[rustc_do_not_const_check]\n     fn for_each<F>(self, f: F)\n     where\n         Self: Sized,\n@@ -899,6 +913,7 @@ pub trait Iterator {\n     /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn filter<P>(self, predicate: P) -> Filter<Self, P>\n     where\n         Self: Sized,\n@@ -944,6 +959,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n     where\n         Self: Sized,\n@@ -990,6 +1006,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn enumerate(self) -> Enumerate<Self>\n     where\n         Self: Sized,\n@@ -1061,6 +1078,7 @@ pub trait Iterator {\n     /// [`next`]: Iterator::next\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn peekable(self) -> Peekable<Self>\n     where\n         Self: Sized,\n@@ -1126,6 +1144,7 @@ pub trait Iterator {\n     #[inline]\n     #[doc(alias = \"drop_while\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P>\n     where\n         Self: Sized,\n@@ -1207,6 +1226,7 @@ pub trait Iterator {\n     /// the iteration should stop, but wasn't placed back into the iterator.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P>\n     where\n         Self: Sized,\n@@ -1295,6 +1315,7 @@ pub trait Iterator {\n     /// [`fuse`]: Iterator::fuse\n     #[inline]\n     #[stable(feature = \"iter_map_while\", since = \"1.57.0\")]\n+    #[rustc_do_not_const_check]\n     fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>\n     where\n         Self: Sized,\n@@ -1326,6 +1347,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn skip(self, n: usize) -> Skip<Self>\n     where\n         Self: Sized,\n@@ -1379,6 +1401,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn take(self, n: usize) -> Take<Self>\n     where\n         Self: Sized,\n@@ -1428,6 +1451,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n     where\n         Self: Sized,\n@@ -1468,6 +1492,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n     where\n         Self: Sized,\n@@ -1552,6 +1577,7 @@ pub trait Iterator {\n     /// [`flat_map()`]: Iterator::flat_map\n     #[inline]\n     #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n+    #[rustc_do_not_const_check]\n     fn flatten(self) -> Flatten<Self>\n     where\n         Self: Sized,\n@@ -1620,6 +1646,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn fuse(self) -> Fuse<Self>\n     where\n         Self: Sized,\n@@ -1704,6 +1731,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn inspect<F>(self, f: F) -> Inspect<Self, F>\n     where\n         Self: Sized,\n@@ -1734,6 +1762,7 @@ pub trait Iterator {\n     /// assert_eq!(of_rust, vec![\"of\", \"Rust\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn by_ref(&mut self) -> &mut Self\n     where\n         Self: Sized,\n@@ -1853,6 +1882,7 @@ pub trait Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n     #[cfg_attr(not(test), rustc_diagnostic_item = \"iterator_collect_fn\")]\n+    #[rustc_do_not_const_check]\n     fn collect<B: FromIterator<Self::Item>>(self) -> B\n     where\n         Self: Sized,\n@@ -1931,6 +1961,7 @@ pub trait Iterator {\n     /// [`collect`]: Iterator::collect\n     #[inline]\n     #[unstable(feature = \"iterator_try_collect\", issue = \"94047\")]\n+    #[rustc_do_not_const_check]\n     fn try_collect<B>(&mut self) -> ChangeOutputType<Self::Item, B>\n     where\n         Self: Sized,\n@@ -2004,6 +2035,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_collect_into\", reason = \"new API\", issue = \"94780\")]\n+    #[rustc_do_not_const_check]\n     fn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n     where\n         Self: Sized,\n@@ -2038,6 +2070,7 @@ pub trait Iterator {\n     /// assert_eq!(odd, vec![1, 3]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn partition<B, F>(self, f: F) -> (B, B)\n     where\n         Self: Sized,\n@@ -2100,6 +2133,7 @@ pub trait Iterator {\n     /// assert!(a[i..].iter().all(|&n| n % 2 == 1)); // odds\n     /// ```\n     #[unstable(feature = \"iter_partition_in_place\", reason = \"new API\", issue = \"62543\")]\n+    #[rustc_do_not_const_check]\n     fn partition_in_place<'a, T: 'a, P>(mut self, ref mut predicate: P) -> usize\n     where\n         Self: Sized + DoubleEndedIterator<Item = &'a mut T>,\n@@ -2157,6 +2191,7 @@ pub trait Iterator {\n     /// assert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n     /// ```\n     #[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue = \"62544\")]\n+    #[rustc_do_not_const_check]\n     fn is_partitioned<P>(mut self, mut predicate: P) -> bool\n     where\n         Self: Sized,\n@@ -2251,6 +2286,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n+    #[rustc_do_not_const_check]\n     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         Self: Sized,\n@@ -2309,6 +2345,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n+    #[rustc_do_not_const_check]\n     fn try_for_each<F, R>(&mut self, f: F) -> R\n     where\n         Self: Sized,\n@@ -2428,6 +2465,7 @@ pub trait Iterator {\n     #[doc(alias = \"inject\", alias = \"foldl\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn fold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n@@ -2465,6 +2503,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_fold_self\", since = \"1.51.0\")]\n+    #[rustc_do_not_const_check]\n     fn reduce<F>(mut self, f: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -2536,6 +2575,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iterator_try_reduce\", reason = \"new API\", issue = \"87053\")]\n+    #[rustc_do_not_const_check]\n     fn try_reduce<F, R>(&mut self, f: F) -> ChangeOutputType<R, Option<R::Output>>\n     where\n         Self: Sized,\n@@ -2593,6 +2633,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn all<F>(&mut self, f: F) -> bool\n     where\n         Self: Sized,\n@@ -2646,6 +2687,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn any<F>(&mut self, f: F) -> bool\n     where\n         Self: Sized,\n@@ -2709,6 +2751,7 @@ pub trait Iterator {\n     /// Note that `iter.find(f)` is equivalent to `iter.filter(f).next()`.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -2740,6 +2783,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_find_map\", since = \"1.30.0\")]\n+    #[rustc_do_not_const_check]\n     fn find_map<B, F>(&mut self, f: F) -> Option<B>\n     where\n         Self: Sized,\n@@ -2796,6 +2840,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n+    #[rustc_do_not_const_check]\n     fn try_find<F, R>(&mut self, f: F) -> ChangeOutputType<R, Option<Self::Item>>\n     where\n         Self: Sized,\n@@ -2878,6 +2923,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn position<P>(&mut self, predicate: P) -> Option<usize>\n     where\n         Self: Sized,\n@@ -2935,6 +2981,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn rposition<P>(&mut self, predicate: P) -> Option<usize>\n     where\n         P: FnMut(Self::Item) -> bool,\n@@ -2986,6 +3033,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn max(self) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3024,6 +3072,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn min(self) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3046,6 +3095,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]\n+    #[rustc_do_not_const_check]\n     fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3079,6 +3129,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_max_by\", since = \"1.15.0\")]\n+    #[rustc_do_not_const_check]\n     fn max_by<F>(self, compare: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3106,6 +3157,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]\n+    #[rustc_do_not_const_check]\n     fn min_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3139,6 +3191,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_min_by\", since = \"1.15.0\")]\n+    #[rustc_do_not_const_check]\n     fn min_by<F>(self, compare: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n@@ -3176,6 +3229,7 @@ pub trait Iterator {\n     #[inline]\n     #[doc(alias = \"reverse\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn rev(self) -> Rev<Self>\n     where\n         Self: Sized + DoubleEndedIterator,\n@@ -3214,6 +3268,7 @@ pub trait Iterator {\n     /// assert_eq!(z, [3, 6]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)\n     where\n         FromA: Default + Extend<A>,\n@@ -3246,6 +3301,7 @@ pub trait Iterator {\n     /// assert_eq!(v_map, vec![1, 2, 3]);\n     /// ```\n     #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n+    #[rustc_do_not_const_check]\n     fn copied<'a, T: 'a>(self) -> Copied<Self>\n     where\n         Self: Sized + Iterator<Item = &'a T>,\n@@ -3293,6 +3349,7 @@ pub trait Iterator {\n     /// assert_eq!(&[vec![23]], &faster[..]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_do_not_const_check]\n     fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n     where\n         Self: Sized + Iterator<Item = &'a T>,\n@@ -3327,6 +3384,7 @@ pub trait Iterator {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[rustc_do_not_const_check]\n     fn cycle(self) -> Cycle<Self>\n     where\n         Self: Sized + Clone,\n@@ -3370,6 +3428,7 @@ pub trait Iterator {\n     /// ```\n     #[track_caller]\n     #[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue = \"100450\")]\n+    #[rustc_do_not_const_check]\n     fn array_chunks<const N: usize>(self) -> ArrayChunks<Self, N>\n     where\n         Self: Sized,\n@@ -3400,6 +3459,7 @@ pub trait Iterator {\n     /// assert_eq!(sum, 6);\n     /// ```\n     #[stable(feature = \"iter_arith\", since = \"1.11.0\")]\n+    #[rustc_do_not_const_check]\n     fn sum<S>(self) -> S\n     where\n         Self: Sized,\n@@ -3429,6 +3489,7 @@ pub trait Iterator {\n     /// assert_eq!(factorial(5), 120);\n     /// ```\n     #[stable(feature = \"iter_arith\", since = \"1.11.0\")]\n+    #[rustc_do_not_const_check]\n     fn product<P>(self) -> P\n     where\n         Self: Sized,\n@@ -3450,6 +3511,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn cmp<I>(self, other: I) -> Ordering\n     where\n         I: IntoIterator<Item = Self::Item>,\n@@ -3479,6 +3541,7 @@ pub trait Iterator {\n     /// assert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (2 * x).cmp(&y)), Ordering::Greater);\n     /// ```\n     #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n+    #[rustc_do_not_const_check]\n     fn cmp_by<I, F>(self, other: I, cmp: F) -> Ordering\n     where\n         Self: Sized,\n@@ -3535,6 +3598,7 @@ pub trait Iterator {\n     /// ```\n     ///\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn partial_cmp<I>(self, other: I) -> Option<Ordering>\n     where\n         I: IntoIterator,\n@@ -3573,6 +3637,7 @@ pub trait Iterator {\n     /// );\n     /// ```\n     #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n+    #[rustc_do_not_const_check]\n     fn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering>\n     where\n         Self: Sized,\n@@ -3606,6 +3671,7 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().eq([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn eq<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3631,6 +3697,7 @@ pub trait Iterator {\n     /// assert!(xs.iter().eq_by(&ys, |&x, &y| x * x == y));\n     /// ```\n     #[unstable(feature = \"iter_order_by\", issue = \"64295\")]\n+    #[rustc_do_not_const_check]\n     fn eq_by<I, F>(self, other: I, eq: F) -> bool\n     where\n         Self: Sized,\n@@ -3663,6 +3730,7 @@ pub trait Iterator {\n     /// assert_eq!([1].iter().ne([1, 2].iter()), true);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn ne<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3684,6 +3752,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().lt([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn lt<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3705,6 +3774,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().le([1, 2].iter()), true);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn le<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3726,6 +3796,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().gt([1, 2].iter()), false);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn gt<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3747,6 +3818,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 2].iter().ge([1, 2].iter()), true);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n+    #[rustc_do_not_const_check]\n     fn ge<I>(self, other: I) -> bool\n     where\n         I: IntoIterator,\n@@ -3778,6 +3850,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[rustc_do_not_const_check]\n     fn is_sorted(self) -> bool\n     where\n         Self: Sized,\n@@ -3806,6 +3879,7 @@ pub trait Iterator {\n     ///\n     /// [`is_sorted`]: Iterator::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[rustc_do_not_const_check]\n     fn is_sorted_by<F>(mut self, compare: F) -> bool\n     where\n         Self: Sized,\n@@ -3852,6 +3926,7 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[rustc_do_not_const_check]\n     fn is_sorted_by_key<F, K>(self, f: F) -> bool\n     where\n         Self: Sized,\n@@ -3867,6 +3942,7 @@ pub trait Iterator {\n     #[inline]\n     #[doc(hidden)]\n     #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+    #[rustc_do_not_const_check]\n     unsafe fn __iterator_get_unchecked(&mut self, _idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccessNoCoerce,"}, {"sha": "d3727a824b5a062e19463d9c278fef8740043a94", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -194,6 +194,7 @@\n #![feature(cfg_target_has_atomic_equal_alignment)]\n #![feature(const_closures)]\n #![feature(const_fn_floating_point_arithmetic)]\n+#![feature(const_for)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n #![feature(const_refs_to_cell)]"}, {"sha": "1d0ab7727394a73864ff92a676436e35493a5545", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -539,14 +539,6 @@ pub struct SYMBOLIC_LINK_REPARSE_BUFFER {\n     pub PathBuffer: WCHAR,\n }\n \n-/// NB: Use carefully! In general using this as a reference is likely to get the\n-/// provenance wrong for the `PathBuffer` field!\n-#[repr(C)]\n-pub struct FILE_NAME_INFO {\n-    pub FileNameLength: DWORD,\n-    pub FileName: [WCHAR; 1],\n-}\n-\n #[repr(C)]\n pub struct MOUNT_POINT_REPARSE_BUFFER {\n     pub SubstituteNameOffset: c_ushort,"}, {"sha": "7fdd1f702e2fdbb80d58c1f4ddeb7e66dfbfa5bc", "filename": "library/std/src/sys/windows/io.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -2,8 +2,7 @@ use crate::marker::PhantomData;\n use crate::mem::size_of;\n use crate::os::windows::io::{AsHandle, AsRawHandle, BorrowedHandle};\n use crate::slice;\n-use crate::sys::{c, Align8};\n-use core;\n+use crate::sys::c;\n use libc;\n \n #[derive(Copy, Clone)]\n@@ -125,22 +124,33 @@ unsafe fn msys_tty_on(handle: c::HANDLE) -> bool {\n         return false;\n     }\n \n-    const SIZE: usize = size_of::<c::FILE_NAME_INFO>() + c::MAX_PATH * size_of::<c::WCHAR>();\n-    let mut name_info_bytes = Align8([0u8; SIZE]);\n+    /// Mirrors [`FILE_NAME_INFO`], giving it a fixed length that we can stack\n+    /// allocate\n+    ///\n+    /// [`FILE_NAME_INFO`]: https://learn.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_name_info\n+    #[repr(C)]\n+    #[allow(non_snake_case)]\n+    struct FILE_NAME_INFO {\n+        FileNameLength: u32,\n+        FileName: [u16; c::MAX_PATH as usize],\n+    }\n+    let mut name_info = FILE_NAME_INFO { FileNameLength: 0, FileName: [0; c::MAX_PATH as usize] };\n+    // Safety: buffer length is fixed.\n     let res = c::GetFileInformationByHandleEx(\n         handle,\n         c::FileNameInfo,\n-        name_info_bytes.0.as_mut_ptr() as *mut libc::c_void,\n-        SIZE as u32,\n+        &mut name_info as *mut _ as *mut libc::c_void,\n+        size_of::<FILE_NAME_INFO>() as u32,\n     );\n     if res == 0 {\n         return false;\n     }\n-    let name_info: &c::FILE_NAME_INFO = &*(name_info_bytes.0.as_ptr() as *const c::FILE_NAME_INFO);\n-    let name_len = name_info.FileNameLength as usize / 2;\n-    // Offset to get the `FileName` field.\n-    let name_ptr = name_info_bytes.0.as_ptr().offset(size_of::<c::DWORD>() as isize).cast::<u16>();\n-    let s = core::slice::from_raw_parts(name_ptr, name_len);\n+\n+    // Use `get` because `FileNameLength` can be out of range.\n+    let s = match name_info.FileName.get(..name_info.FileNameLength as usize / 2) {\n+        None => return false,\n+        Some(s) => s,\n+    };\n     let name = String::from_utf16_lossy(s);\n     // Get the file name only.\n     let name = name.rsplit('\\\\').next().unwrap_or(&name);"}, {"sha": "5c2e9da70fb2136656d963cb67df1585fb7f068e", "filename": "library/std/src/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -352,7 +352,7 @@ impl Instant {\n         self.checked_duration_since(earlier).unwrap_or_default()\n     }\n \n-    /// Returns the amount of time elapsed since this instant was created.\n+    /// Returns the amount of time elapsed since this instant.\n     ///\n     /// # Panics\n     ///\n@@ -525,8 +525,8 @@ impl SystemTime {\n         self.0.sub_time(&earlier.0).map_err(SystemTimeError)\n     }\n \n-    /// Returns the difference between the clock time when this\n-    /// system time was created, and the current clock time.\n+    /// Returns the difference from this system time to the\n+    /// current clock time.\n     ///\n     /// This function may fail as the underlying system clock is susceptible to\n     /// drift and updates (e.g., the system clock could go backwards), so this"}, {"sha": "72f35cb922445f2c62e358d7b1c178e50843ad89", "filename": "tests/rustdoc-ui/unable-fulfill-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Frustdoc-ui%2Funable-fulfill-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Frustdoc-ui%2Funable-fulfill-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Funable-fulfill-trait.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/unable-fulfill-trait.rs:4:17\n    |\n LL |     field1: dyn Bar<'a, 'b,>,"}, {"sha": "2504f616fb7e1924cd75c31d7c39bb46618274b2", "filename": "tests/ui/argument-suggestions/issue-100154.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fargument-suggestions%2Fissue-100154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fargument-suggestions%2Fissue-100154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-100154.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-100154.rs:4:5\n    |\n LL |     foo::<()>(());"}, {"sha": "6e547508bd469dd73f1eb3d27d8370d751198d52", "filename": "tests/ui/async-await/issues/issue-65159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -3,7 +3,7 @@\n // edition:2018\n \n async fn copy() -> Result<()>\n-//~^ ERROR this enum takes 2 generic arguments\n+//~^ ERROR enum takes 2 generic arguments\n {\n     Ok(())\n }"}, {"sha": "b8741333c328345f705922684c4a595420b3aa1e", "filename": "tests/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-65159.rs:5:20\n    |\n LL | async fn copy() -> Result<()>"}, {"sha": "d067ff44704c75324c5d3afc637d711d11f2964c", "filename": "tests/ui/borrowck/issue-82126-mismatched-subst-and-hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -14,8 +14,8 @@ impl MarketMultiplier {\n }\n \n async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n-    //~^^ ERROR this struct takes 1 generic argument but 0 generic arguments were supplied\n+    //~^ ERROR struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~^^ ERROR struct takes 1 generic argument but 0 generic arguments were supplied\n     LockedMarket(generator.lock().unwrap().buy())\n }\n "}, {"sha": "73e0aaf1e45cc7beb8b2c412de35fc7230d3f177", "filename": "tests/ui/borrowck/issue-82126-mismatched-subst-and-hir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/issue-82126-mismatched-subst-and-hir.rs:16:59\n    |\n LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n@@ -12,7 +12,7 @@ note: struct defined here, with 0 lifetime parameters\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^\n \n-error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/issue-82126-mismatched-subst-and-hir.rs:16:59\n    |\n LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {"}, {"sha": "18a9b53cf7681fe52e6abc355d2cbf06b0e969dc", "filename": "tests/ui/const-generics/generic_const_exprs/issue-102768.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,8 +7,8 @@ trait X {\n \n const _: () = {\n     fn f2<'a>(arg: Box<dyn X<Y<1> = &'a ()>>) {}\n-    //~^ ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n-    //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n+    //~^ ERROR associated type takes 1 lifetime argument but 0 lifetime arguments\n+    //~| ERROR associated type takes 0 generic arguments but 1 generic argument\n };\n \n fn main() {}"}, {"sha": "175d54e41848b91afa8abad953218d6fe61c5b57", "filename": "tests/ui/const-generics/generic_const_exprs/issue-102768.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/issue-102768.rs:9:30\n    |\n LL |     fn f2<'a>(arg: Box<dyn X<Y<1> = &'a ()>>) {}\n@@ -14,7 +14,7 @@ help: add missing lifetime argument\n LL |     fn f2<'a>(arg: Box<dyn X<Y<'_, 1> = &'a ()>>) {}\n    |                                +++\n \n-error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated type takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-102768.rs:9:30\n    |\n LL |     fn f2<'a>(arg: Box<dyn X<Y<1> = &'a ()>>) {}"}, {"sha": "302da59651ccbb3d62e2ce41939ebb89614f4111", "filename": "tests/ui/const-generics/generic_const_exprs/issue-76595.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: function takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-76595.rs:15:5\n    |\n LL |     test::<2>();"}, {"sha": "01ac4e69a057e35726676f5ecb5009b61c0de478", "filename": "tests/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: function takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/incorrect-number-of-const-args.rs:6:5\n    |\n LL |     foo::<0>();\n@@ -16,7 +16,7 @@ help: add missing generic argument\n LL |     foo::<0, Y>();\n    |            +++\n \n-error[E0107]: this function takes 2 generic arguments but 3 generic arguments were supplied\n+error[E0107]: function takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/incorrect-number-of-const-args.rs:9:5\n    |\n LL |     foo::<0, 0, 0>();"}, {"sha": "bf10f471dc51cda47a4a4e57efb8a25e236c9e87", "filename": "tests/ui/const-generics/invalid-const-arg-for-type-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,11 +4,11 @@ struct S;\n \n fn main() {\n     let _: u32 = 5i32.try_into::<32>().unwrap();\n-    //~^ ERROR this method takes\n+    //~^ ERROR method takes\n \n     S.f::<0>();\n     //~^ ERROR no method named `f`\n \n     S::<0>;\n-    //~^ ERROR this struct takes 0\n+    //~^ ERROR struct takes 0\n }"}, {"sha": "4a649d8a7e881f382dcf945dc2382a9a6e30189a", "filename": "tests/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/invalid-const-arg-for-type-param.rs:6:23\n    |\n LL |     let _: u32 = 5i32.try_into::<32>().unwrap();\n@@ -23,7 +23,7 @@ LL | struct S;\n LL |     S.f::<0>();\n    |       ^ method not found in `S`\n \n-error[E0107]: this struct takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: struct takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/invalid-const-arg-for-type-param.rs:12:5\n    |\n LL |     S::<0>;"}, {"sha": "fd259197d29826180f27a69064d34c602ba58fc3", "filename": "tests/ui/const-generics/invalid-constant-in-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -2,5 +2,5 @@ use std::cell::Cell;\n \n fn main() {\n     let _: Cell<&str, \"a\"> = Cell::new(\"\");\n-    //~^ ERROR this struct takes 1 generic argument but 2 generic arguments were supplied\n+    //~^ ERROR struct takes 1 generic argument but 2 generic arguments were supplied\n }"}, {"sha": "2545cc6f39644bd52db3a27d316b12474766a10a", "filename": "tests/ui/const-generics/invalid-constant-in-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/invalid-constant-in-args.rs:4:12\n    |\n LL |     let _: Cell<&str, \"a\"> = Cell::new(\"\");"}, {"sha": "80472e6bd9c52c532eb224b1d2faa069accbe9a0", "filename": "tests/ui/const-generics/issues/issue-87493.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,7 +7,7 @@ where\n     S: MyTrait,\n     T: MyTrait<Assoc == S::Assoc>,\n     //~^ ERROR: expected one of `,` or `>`, found `==`\n-    //~| ERROR: this trait takes 0 generic arguments but 1 generic argument was supplied\n+    //~| ERROR: trait takes 0 generic arguments but 1 generic argument was supplied\n {\n }\n "}, {"sha": "73bd6ed73e674d017a0b577b8bb92117dc1ab21d", "filename": "tests/ui/const-generics/issues/issue-87493.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -9,7 +9,7 @@ help: if you meant to use an associated type binding, replace `==` with `=`\n LL |     T: MyTrait<Assoc = S::Assoc>,\n    |                      ~\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-87493.rs:8:8\n    |\n LL |     T: MyTrait<Assoc == S::Assoc>,"}, {"sha": "79743abe40935b7bcdb0076f632fbb6c27d164de", "filename": "tests/ui/const-generics/parser-error-recovery/issue-89013-no-kw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,7 +7,7 @@ struct Bar;\n const T: usize = 42;\n \n impl Foo<N = 3> for Bar {\n-//~^ ERROR this trait takes 1 generic argument but 0 generic arguments were supplied\n+//~^ ERROR trait takes 1 generic argument but 0 generic arguments were supplied\n //~| ERROR associated type bindings are not allowed here\n //~| ERROR associated const equality is incomplete\n     fn do_x(&self) -> [u8; 3] {"}, {"sha": "4f4e1aa3a046ff1ee1106b66fe807126887bba8d", "filename": "tests/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,7 +7,7 @@ LL | impl Foo<N = 3> for Bar {\n    = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n    = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/issue-89013-no-kw.rs:9:6\n    |\n LL | impl Foo<N = 3> for Bar {"}, {"sha": "335d0d94e83c5dcad5e21c7d56b729d16aaf13ba", "filename": "tests/ui/const-generics/parser-error-recovery/issue-89013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -8,7 +8,7 @@ const T: usize = 42;\n \n impl Foo<N = const 3> for Bar {\n //~^ ERROR expected lifetime, type, or constant, found keyword `const`\n-//~| ERROR this trait takes 1 generic\n+//~| ERROR trait takes 1 generic\n //~| ERROR associated type bindings are not allowed here\n //~| ERROR associated const equality is incomplete\n     fn do_x(&self) -> [u8; 3] {"}, {"sha": "3d2b98feb39c0352dca46d6db77b3633b46e0026", "filename": "tests/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -19,7 +19,7 @@ LL | impl Foo<N = const 3> for Bar {\n    = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n    = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/issue-89013.rs:9:6\n    |\n LL | impl Foo<N = const 3> for Bar {"}, {"sha": "f5802e7d8b11876be46d6634eb4c8e470dcc2f28", "filename": "tests/ui/constructor-lifetime-args.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconstructor-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconstructor-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconstructor-lifetime-args.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -15,12 +15,12 @@ enum E<'a, 'b> {\n fn main() {\n     S(&0, &0); // OK\n     S::<'static>(&0, &0);\n-    //~^ ERROR this struct takes 2 lifetime arguments\n+    //~^ ERROR struct takes 2 lifetime arguments\n     S::<'static, 'static, 'static>(&0, &0);\n-    //~^ ERROR this struct takes 2 lifetime arguments\n+    //~^ ERROR struct takes 2 lifetime arguments\n     E::V(&0); // OK\n     E::V::<'static>(&0);\n-    //~^ ERROR this enum takes 2 lifetime arguments\n+    //~^ ERROR enum takes 2 lifetime arguments\n     E::V::<'static, 'static, 'static>(&0);\n-    //~^ ERROR this enum takes 2 lifetime arguments\n+    //~^ ERROR enum takes 2 lifetime arguments\n }"}, {"sha": "a18123fe19cbaf71e94c3354c6666a797d37b4dd", "filename": "tests/ui/constructor-lifetime-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconstructor-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconstructor-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconstructor-lifetime-args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/constructor-lifetime-args.rs:17:5\n    |\n LL |     S::<'static>(&0, &0);\n@@ -16,7 +16,7 @@ help: add missing lifetime argument\n LL |     S::<'static, 'static>(&0, &0);\n    |                +++++++++\n \n-error[E0107]: this struct takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+error[E0107]: struct takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/constructor-lifetime-args.rs:19:5\n    |\n LL |     S::<'static, 'static, 'static>(&0, &0);\n@@ -30,7 +30,7 @@ note: struct defined here, with 2 lifetime parameters: `'a`, `'b`\n LL | struct S<'a, 'b>(&'a u8, &'b u8);\n    |        ^ --  --\n \n-error[E0107]: this enum takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: enum takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/constructor-lifetime-args.rs:22:8\n    |\n LL |     E::V::<'static>(&0);\n@@ -48,7 +48,7 @@ help: add missing lifetime argument\n LL |     E::V::<'static, 'static>(&0);\n    |                   +++++++++\n \n-error[E0107]: this enum takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+error[E0107]: enum takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/constructor-lifetime-args.rs:24:8\n    |\n LL |     E::V::<'static, 'static, 'static>(&0);"}, {"sha": "be7e70dfabba76b69765e435f699d2ebbaabc459", "filename": "tests/ui/consts/gate-do-not-const-check.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,5 @@\n+#[rustc_do_not_const_check]\n+//~^ ERROR this is an internal attribute that will never be stable\n+const fn foo() {}\n+\n+fn main() {}"}, {"sha": "3bb1360166a19fba12bb2ba25b66418ebc699a6d", "filename": "tests/ui/consts/gate-do-not-const-check.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fgate-do-not-const-check.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: this is an internal attribute that will never be stable\n+  --> $DIR/gate-do-not-const-check.rs:1:1\n+   |\n+LL | #[rustc_do_not_const_check]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "fd23e7c00f2bf77d73619ce7eadb443131915bb0", "filename": "tests/ui/error-codes/E0107.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ferror-codes%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ferror-codes%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0107.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -11,39 +11,39 @@ enum Bar {\n \n struct Baz<'a, 'b, 'c> {\n     buzz: Buzz<'a>,\n-    //~^ ERROR this struct takes 2 lifetime arguments\n+    //~^ ERROR struct takes 2 lifetime arguments\n     //~| HELP add missing lifetime argument\n \n     bar: Bar<'a>,\n-    //~^ ERROR this enum takes 0 lifetime arguments\n+    //~^ ERROR enum takes 0 lifetime arguments\n     //~| HELP remove these generics\n \n     foo2: Foo<'a, 'b, 'c>,\n-    //~^ ERROR this struct takes 1 lifetime argument\n+    //~^ ERROR struct takes 1 lifetime argument\n     //~| HELP remove these lifetime arguments\n \n     qux1: Qux<'a, 'b, i32>,\n-    //~^ ERROR this struct takes 1 lifetime argument\n+    //~^ ERROR struct takes 1 lifetime argument\n     //~| HELP remove this lifetime argument\n \n     qux2: Qux<'a, i32, 'b>,\n-    //~^ ERROR this struct takes 1 lifetime argument\n+    //~^ ERROR struct takes 1 lifetime argument\n     //~| HELP remove this lifetime argument\n \n     qux3: Qux<'a, 'b, 'c, i32>,\n-    //~^ ERROR this struct takes 1 lifetime argument\n+    //~^ ERROR struct takes 1 lifetime argument\n     //~| HELP remove these lifetime arguments\n \n     qux4: Qux<'a, i32, 'b, 'c>,\n-    //~^ ERROR this struct takes 1 lifetime argument\n+    //~^ ERROR struct takes 1 lifetime argument\n     //~| HELP remove these lifetime arguments\n \n     qux5: Qux<'a, 'b, i32, 'c>,\n-    //~^ ERROR this struct takes 1 lifetime argument\n+    //~^ ERROR struct takes 1 lifetime argument\n     //~| HELP remove this lifetime argument\n \n     quux: Quux<'a, i32, 'b>,\n-    //~^ ERROR this struct takes 0 lifetime arguments\n+    //~^ ERROR struct takes 0 lifetime arguments\n     //~| HELP remove this lifetime argument\n }\n \n@@ -53,7 +53,7 @@ pub trait T {\n }\n \n fn trait_bound_generic<I: T<u8, u16>>(_i: I) {\n-    //~^ ERROR this trait takes 0 generic arguments\n+    //~^ ERROR trait takes 0 generic arguments\n     //~| HELP replace the generic bounds with the associated types\n }\n "}, {"sha": "3f540eb08bc7ccc5fad4381df494cb080ce7bffd", "filename": "tests/ui/error-codes/E0107.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0107.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/E0107.rs:13:11\n    |\n LL |     buzz: Buzz<'a>,\n@@ -16,7 +16,7 @@ help: add missing lifetime argument\n LL |     buzz: Buzz<'a, 'a>,\n    |                  ++++\n \n-error[E0107]: this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/E0107.rs:17:10\n    |\n LL |     bar: Bar<'a>,\n@@ -30,7 +30,7 @@ note: enum defined here, with 0 lifetime parameters\n LL | enum Bar {\n    |      ^^^\n \n-error[E0107]: this struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n   --> $DIR/E0107.rs:21:11\n    |\n LL |     foo2: Foo<'a, 'b, 'c>,\n@@ -44,7 +44,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Foo<'a>(&'a str);\n    |        ^^^ --\n \n-error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/E0107.rs:25:11\n    |\n LL |     qux1: Qux<'a, 'b, i32>,\n@@ -58,7 +58,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Qux<'a, T>(&'a T);\n    |        ^^^ --\n \n-error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/E0107.rs:29:11\n    |\n LL |     qux2: Qux<'a, i32, 'b>,\n@@ -72,7 +72,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Qux<'a, T>(&'a T);\n    |        ^^^ --\n \n-error[E0107]: this struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n   --> $DIR/E0107.rs:33:11\n    |\n LL |     qux3: Qux<'a, 'b, 'c, i32>,\n@@ -86,7 +86,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Qux<'a, T>(&'a T);\n    |        ^^^ --\n \n-error[E0107]: this struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n   --> $DIR/E0107.rs:37:11\n    |\n LL |     qux4: Qux<'a, i32, 'b, 'c>,\n@@ -100,7 +100,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Qux<'a, T>(&'a T);\n    |        ^^^ --\n \n-error[E0107]: this struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n   --> $DIR/E0107.rs:41:11\n    |\n LL |     qux5: Qux<'a, 'b, i32, 'c>,\n@@ -114,7 +114,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Qux<'a, T>(&'a T);\n    |        ^^^ --\n \n-error[E0107]: this struct takes 0 lifetime arguments but 2 lifetime arguments were supplied\n+error[E0107]: struct takes 0 lifetime arguments but 2 lifetime arguments were supplied\n   --> $DIR/E0107.rs:45:11\n    |\n LL |     quux: Quux<'a, i32, 'b>,\n@@ -128,7 +128,7 @@ note: struct defined here, with 0 lifetime parameters\n LL | struct Quux<T>(T);\n    |        ^^^^\n \n-error[E0107]: this trait takes 0 generic arguments but 2 generic arguments were supplied\n+error[E0107]: trait takes 0 generic arguments but 2 generic arguments were supplied\n   --> $DIR/E0107.rs:55:27\n    |\n LL | fn trait_bound_generic<I: T<u8, u16>>(_i: I) {"}, {"sha": "a7a9db7d9775e8532bf37d42d9ecc27aa370d4c7", "filename": "tests/ui/expr/malformed_closure/missing_braces_around_block.fixed", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.fixed?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,16 +4,23 @@\n // If this recovery happens, then plenty of errors are emitted. Here, we expect\n // only one error.\n //\n-// This is part of issue #88065:\n+// This is part of the following issues:\n // https://github.com/rust-lang/rust/issues/88065\n+// https://github.com/rust-lang/rust/issues/107959\n \n // run-rustfix\n \n fn main() {\n+    // Closure with multiple expressions delimited by semicolon.\n     let num = 5;\n     (1..num).reduce(|a, b| {\n         //~^ ERROR: closure bodies that contain statements must be surrounded by braces\n         println!(\"{}\", a);\n         a * b\n     }).unwrap();\n+\n+    // Closure with a single expression ended by a semicolon.\n+    let mut v = vec![1, 2, 3];\n+    v.iter_mut().for_each(|x| {*x = *x+1;});\n+        //~^ ERROR: closure bodies that contain statements must be surrounded by braces\n }"}, {"sha": "b5690b2eca7c26739cd96bafa350c6daedac5cc6", "filename": "tests/ui/expr/malformed_closure/missing_braces_around_block.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,16 +4,23 @@\n // If this recovery happens, then plenty of errors are emitted. Here, we expect\n // only one error.\n //\n-// This is part of issue #88065:\n+// This is part of the following issues:\n // https://github.com/rust-lang/rust/issues/88065\n+// https://github.com/rust-lang/rust/issues/107959\n \n // run-rustfix\n \n fn main() {\n+    // Closure with multiple expressions delimited by semicolon.\n     let num = 5;\n     (1..num).reduce(|a, b|\n         //~^ ERROR: closure bodies that contain statements must be surrounded by braces\n         println!(\"{}\", a);\n         a * b\n     ).unwrap();\n+\n+    // Closure with a single expression ended by a semicolon.\n+    let mut v = vec![1, 2, 3];\n+    v.iter_mut().for_each(|x|*x = *x+1;);\n+        //~^ ERROR: closure bodies that contain statements must be surrounded by braces\n }"}, {"sha": "039eef909fc4b4f1868e9c903e712ba89e06a2d8", "filename": "tests/ui/expr/malformed_closure/missing_braces_around_block.stderr", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,5 +1,5 @@\n error: closure bodies that contain statements must be surrounded by braces\n-  --> $DIR/missing_braces_around_block.rs:14:26\n+  --> $DIR/missing_braces_around_block.rs:16:26\n    |\n LL |     (1..num).reduce(|a, b|\n    |                          ^\n@@ -8,14 +8,14 @@ LL |     ).unwrap();\n    |     ^\n    |\n note: statement found outside of a block\n-  --> $DIR/missing_braces_around_block.rs:16:26\n+  --> $DIR/missing_braces_around_block.rs:18:26\n    |\n LL |         println!(\"{}\", a);\n    |         -----------------^ this `;` turns the preceding closure into a statement\n    |         |\n    |         this expression is a statement because of the trailing semicolon\n note: the closure body may be incorrectly delimited\n-  --> $DIR/missing_braces_around_block.rs:14:21\n+  --> $DIR/missing_braces_around_block.rs:16:21\n    |\n LL |       (1..num).reduce(|a, b|\n    |  _____________________^\n@@ -34,5 +34,30 @@ LL |         a * b\n LL ~     }).unwrap();\n    |\n \n-error: aborting due to previous error\n+error: closure bodies that contain statements must be surrounded by braces\n+  --> $DIR/missing_braces_around_block.rs:24:29\n+   |\n+LL |     v.iter_mut().for_each(|x|*x = *x+1;);\n+   |                             ^          ^\n+   |\n+note: statement found outside of a block\n+  --> $DIR/missing_braces_around_block.rs:24:39\n+   |\n+LL |     v.iter_mut().for_each(|x|*x = *x+1;);\n+   |                              ---------^ this `;` turns the preceding closure into a statement\n+   |                              |\n+   |                              this expression is a statement because of the trailing semicolon\n+note: the closure body may be incorrectly delimited\n+  --> $DIR/missing_braces_around_block.rs:24:27\n+   |\n+LL |     v.iter_mut().for_each(|x|*x = *x+1;);\n+   |                           ^^^^^^^^^^^^ - ...but likely you meant the closure to end here\n+   |                           |\n+   |                           this is the parsed closure...\n+help: try adding braces\n+   |\n+LL |     v.iter_mut().for_each(|x| {*x = *x+1;});\n+   |                               +          +\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "5738dfa83eeabb1b610674094062559eca2d3e11", "filename": "tests/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -5,12 +5,12 @@ trait X {\n fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~^ ERROR: lifetime in trait object type must be followed by `+`\n   //~| ERROR: parenthesized generic arguments cannot be used\n-  //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n-  //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n+  //~| ERROR associated type takes 0 generic arguments but 1 generic argument\n+  //~| ERROR associated type takes 1 lifetime argument but 0 lifetime arguments\n \n \n fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n   //~^ ERROR: parenthesized generic arguments cannot be used\n-  //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n+  //~| ERROR associated type takes 1 lifetime argument but 0 lifetime arguments\n \n fn main() {}"}, {"sha": "461853379b5625182071259ff89d92ea9124cb58", "filename": "tests/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -23,7 +23,7 @@ LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n    |                            |\n    |                            help: remove these parentheses\n \n-error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:5:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n@@ -39,7 +39,7 @@ help: add missing lifetime argument\n LL | fn foo<'a>(arg: Box<dyn X<Y('_, 'a) = &'a ()>>) {}\n    |                             +++\n \n-error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated type takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:5:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n@@ -53,7 +53,7 @@ note: associated type defined here, with 0 generic parameters\n LL |   type Y<'a>;\n    |        ^\n \n-error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:12:27\n    |\n LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}"}, {"sha": "331511ba61a489914b5d93fb0bf69be114163397", "filename": "tests/ui/generic-associated-types/missing_lifetime_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -12,9 +12,9 @@ fn foo<'c, 'd>(_arg: Box<dyn X<Y = (&'c u32, &'d u32)>>) {}\n //~^ ERROR missing generics for associated type\n \n fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b>) {}\n-//~^ ERROR this struct takes 3 lifetime arguments but 2 lifetime\n+//~^ ERROR struct takes 3 lifetime arguments but 2 lifetime\n \n fn f<'a>(_arg: Foo<'a>) {}\n-//~^ ERROR this struct takes 3 lifetime arguments but 1 lifetime\n+//~^ ERROR struct takes 3 lifetime arguments but 1 lifetime\n \n fn main() {}"}, {"sha": "1a7a2e787a1a9101fb67d47a9290a723cbaf6995", "filename": "tests/ui/generic-associated-types/missing_lifetime_args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -14,7 +14,7 @@ help: add missing lifetime arguments\n LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'_, '_> = (&'c u32, &'d u32)>>) {}\n    |                                 ++++++++\n \n-error[E0107]: this struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n+error[E0107]: struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n   --> $DIR/missing_lifetime_args.rs:14:26\n    |\n LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b>) {}\n@@ -32,7 +32,7 @@ help: add missing lifetime argument\n LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b, 'a>) {}\n    |                                    ++++\n \n-error[E0107]: this struct takes 3 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 3 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing_lifetime_args.rs:17:16\n    |\n LL | fn f<'a>(_arg: Foo<'a>) {}"}, {"sha": "6e395dfdec1fa59108bef24496a02e07228da6a6", "filename": "tests/ui/generic-associated-types/missing_lifetime_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,7 +4,7 @@ trait Foo {\n \n fn foo<T: Foo>() {\n     let _: <T as Foo>::Assoc<3>;\n-      //~^ ERROR  this associated type\n+      //~^ ERROR  associated type\n }\n \n fn main() {}"}, {"sha": "41945aabfb58c47d6c367dfd01c0920ea05a26bb", "filename": "tests/ui/generic-associated-types/missing_lifetime_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/missing_lifetime_const.rs:6:24\n    |\n LL |     let _: <T as Foo>::Assoc<3>;"}, {"sha": "ae2f7c00ea4196c334603c17e2117f5822000a17", "filename": "tests/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -9,10 +9,10 @@ trait Foo {\n     // Test parameters in default values\n     type FOk<T> = Self::E<'static, T>;\n     type FErr1 = Self::E<'static, 'static>;\n-    //~^ ERROR this associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n-    //~| ERROR this associated type takes 1\n+    //~^ ERROR associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~| ERROR associated type takes 1\n     type FErr2<T> = Self::E<'static, T, u32>;\n-    //~^ ERROR this associated type takes 1\n+    //~^ ERROR associated type takes 1\n }\n \n fn main() {}"}, {"sha": "4523044b5886bb98e3f03d37d3e9f729d543b176", "filename": "tests/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/parameter_number_and_kind.rs:11:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n@@ -12,7 +12,7 @@ note: associated type defined here, with 1 lifetime parameter: `'a`\n LL |     type E<'a, T>;\n    |          ^ --\n \n-error[E0107]: this associated type takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: associated type takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/parameter_number_and_kind.rs:11:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n@@ -28,7 +28,7 @@ help: add missing generic argument\n LL |     type FErr1 = Self::E<'static, 'static, T>;\n    |                                          +++\n \n-error[E0107]: this associated type takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: associated type takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/parameter_number_and_kind.rs:14:27\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>;"}, {"sha": "c58f9cf1dfc8e837993dcefb97b37ebfa788f4c0", "filename": "tests/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,8 +4,8 @@ trait X {\n \n const _: () = {\n   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n-      //~^ ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n-      //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n+      //~^ ERROR associated type takes 1 lifetime argument but 0 lifetime arguments\n+      //~| ERROR associated type takes 0 generic arguments but 1 generic argument\n };\n \n fn main() {}"}, {"sha": "fab5b474d92830233e48bd8a6f401117898e3b74", "filename": "tests/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/trait-path-type-error-once-implemented.rs:6:29\n    |\n LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n@@ -14,7 +14,7 @@ help: add missing lifetime argument\n LL |   fn f2<'a>(arg : Box<dyn X<Y<'_, 1> = &'a ()>>) {}\n    |                               +++\n \n-error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated type takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/trait-path-type-error-once-implemented.rs:6:29\n    |\n LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}"}, {"sha": "37d484cba0bd73855af7e8025862811ecb71bac9", "filename": "tests/ui/generics/bad-mid-path-type-params.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fbad-mid-path-type-params.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -28,17 +28,17 @@ impl Trait<isize> for S2 {\n \n fn foo<'a>() {\n     let _ = S::new::<isize,f64>(1, 1.0);\n-    //~^ ERROR this associated function takes 1\n+    //~^ ERROR associated function takes 1\n \n     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~^ ERROR struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n \n     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n-    //~^ ERROR this associated function takes 1\n+    //~^ ERROR associated function takes 1\n \n     let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);\n-    //~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this associated function takes 1\n+    //~^ ERROR trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR associated function takes 1\n }\n \n fn main() {}"}, {"sha": "71e15dd4c92642502fb3867129917aa538148c53", "filename": "tests/ui/generics/bad-mid-path-type-params.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fbad-mid-path-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fbad-mid-path-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fbad-mid-path-type-params.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated function takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: associated function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/bad-mid-path-type-params.rs:30:16\n    |\n LL |     let _ = S::new::<isize,f64>(1, 1.0);\n@@ -12,7 +12,7 @@ note: associated function defined here, with 1 generic parameter: `U`\n LL |     fn new<U>(x: T, _: U) -> S<T> {\n    |        ^^^ -\n \n-error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/bad-mid-path-type-params.rs:33:13\n    |\n LL |     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n@@ -26,7 +26,7 @@ note: struct defined here, with 0 lifetime parameters\n LL | struct S<T> {\n    |        ^\n \n-error[E0107]: this associated function takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: associated function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/bad-mid-path-type-params.rs:36:24\n    |\n LL |     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n@@ -40,7 +40,7 @@ note: associated function defined here, with 1 generic parameter: `U`\n LL |     fn new<U>(x: T, y: U) -> Self;\n    |        ^^^ -\n \n-error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/bad-mid-path-type-params.rs:39:17\n    |\n LL |     let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);\n@@ -54,7 +54,7 @@ note: trait defined here, with 0 lifetime parameters\n LL | trait Trait<T> {\n    |       ^^^^^\n \n-error[E0107]: this associated function takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: associated function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/bad-mid-path-type-params.rs:39:36\n    |\n LL |     let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);"}, {"sha": "947f33414dbb9f459ee12223ba8708ce5178c91e", "filename": "tests/ui/generics/generic-arg-mismatch-recover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,9 +4,9 @@ struct Bar<'a>(&'a ());\n \n fn main() {\n     Foo::<'static, 'static, ()>(&0);\n-    //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~^ ERROR struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n \n     Bar::<'static, 'static, ()>(&());\n-    //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n-    //~| ERROR this struct takes 0\n+    //~^ ERROR struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~| ERROR struct takes 0\n }"}, {"sha": "f549a7180fc6634c9b80d335c8820b09d99e189d", "filename": "tests/ui/generics/generic-arg-mismatch-recover.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/generic-arg-mismatch-recover.rs:6:5\n    |\n LL |     Foo::<'static, 'static, ()>(&0);\n@@ -12,7 +12,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Foo<'a, T: 'a>(&'a T);\n    |        ^^^ --\n \n-error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/generic-arg-mismatch-recover.rs:9:5\n    |\n LL |     Bar::<'static, 'static, ()>(&());\n@@ -26,7 +26,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Bar<'a>(&'a ());\n    |        ^^^ --\n \n-error[E0107]: this struct takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: struct takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/generic-arg-mismatch-recover.rs:9:5\n    |\n LL |     Bar::<'static, 'static, ()>(&());"}, {"sha": "6c00411561e3270c3151077e29f02984b3c2255f", "filename": "tests/ui/generics/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -9,5 +9,5 @@ impl<A, B, C> Foo<A, B, C> {\n \n fn main() {\n     Foo::<isize>::new();\n-    //~^ ERROR this struct takes at least 2 generic arguments but 1 generic argument\n+    //~^ ERROR struct takes at least 2 generic arguments but 1 generic argument\n }"}, {"sha": "262561fa81e6c750a3775da35c9e27ee22a509aa", "filename": "tests/ui/generics/generic-impl-less-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/generic-impl-less-params-with-defaults.rs:11:5\n    |\n LL |     Foo::<isize>::new();"}, {"sha": "be633ec464f8b56e475fcf3743cc2f559112ccae", "filename": "tests/ui/generics/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -11,5 +11,5 @@ impl<T, A> Vec<T, A> {\n \n fn main() {\n     Vec::<isize, Heap, bool>::new();\n-    //~^ ERROR this struct takes at most 2 generic arguments but 3 generic arguments were supplied\n+    //~^ ERROR struct takes at most 2 generic arguments but 3 generic arguments were supplied\n }"}, {"sha": "2f4682c4e5a97048bf6003a74b4d95b7c9585a6d", "filename": "tests/ui/generics/generic-impl-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes at most 2 generic arguments but 3 generic arguments were supplied\n+error[E0107]: struct takes at most 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/generic-impl-more-params-with-defaults.rs:13:5\n    |\n LL |     Vec::<isize, Heap, bool>::new();"}, {"sha": "b83fdb5c455a71ad37b9dfc48844bf7193d216cb", "filename": "tests/ui/generics/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,5 +7,5 @@ struct Vec<T, A = Heap>(\n \n fn main() {\n     let _: Vec<isize, Heap, bool>;\n-    //~^ ERROR this struct takes at most 2 generic arguments but 3 generic arguments\n+    //~^ ERROR struct takes at most 2 generic arguments but 3 generic arguments\n }"}, {"sha": "4d01ba1f453d8d9bc4385099bb99ee432dc429aa", "filename": "tests/ui/generics/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes at most 2 generic arguments but 3 generic arguments were supplied\n+error[E0107]: struct takes at most 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/generic-type-more-params-with-defaults.rs:9:12\n    |\n LL |     let _: Vec<isize, Heap, bool>;"}, {"sha": "e4eaff21af1dae276be3b87121c43d75f092b4c3", "filename": "tests/ui/generics/wrong-number-of-args.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fwrong-number-of-args.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,18 +4,18 @@ mod no_generics {\n     type A = Ty;\n \n     type B = Ty<'static>;\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument\n+    //~^ ERROR struct takes 0 lifetime arguments but 1 lifetime argument\n     //~| HELP remove these generics\n \n     type C = Ty<'static, usize>;\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument\n-    //~| ERROR this struct takes 0 generic arguments but 1 generic argument\n+    //~^ ERROR struct takes 0 lifetime arguments but 1 lifetime argument\n+    //~| ERROR struct takes 0 generic arguments but 1 generic argument\n     //~| HELP remove this lifetime argument\n     //~| HELP remove this generic argument\n \n     type D = Ty<'static, usize, { 0 }>;\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument\n-    //~| ERROR this struct takes 0 generic arguments but 2 generic arguments\n+    //~^ ERROR struct takes 0 lifetime arguments but 1 lifetime argument\n+    //~| ERROR struct takes 0 generic arguments but 2 generic arguments\n     //~| HELP remove this lifetime argument\n     //~| HELP remove these generic arguments\n }\n@@ -28,17 +28,17 @@ mod type_and_type {\n     //~| HELP add missing\n \n     type B = Ty<usize>;\n-    //~^ ERROR this struct takes 2 generic arguments but 1 generic argument\n+    //~^ ERROR struct takes 2 generic arguments but 1 generic argument\n     //~| HELP add missing\n \n     type C = Ty<usize, String>;\n \n     type D = Ty<usize, String, char>;\n-    //~^ ERROR this struct takes 2 generic arguments but 3 generic arguments\n+    //~^ ERROR struct takes 2 generic arguments but 3 generic arguments\n     //~| HELP remove this\n \n     type E = Ty<>;\n-    //~^ ERROR this struct takes 2 generic arguments but 0 generic arguments were supplied\n+    //~^ ERROR struct takes 2 generic arguments but 0 generic arguments were supplied\n     //~| HELP add missing\n }\n \n@@ -52,7 +52,7 @@ mod lifetime_and_type {\n     //~| HELP consider introducing\n \n     type B = Ty<'static>;\n-    //~^ ERROR this struct takes 1 generic argument but 0 generic arguments\n+    //~^ ERROR struct takes 1 generic argument but 0 generic arguments\n     //~| HELP add missing\n \n     type C = Ty<usize>;\n@@ -62,14 +62,14 @@ mod lifetime_and_type {\n     type D = Ty<'static, usize>;\n \n     type E = Ty<>;\n-    //~^ ERROR this struct takes 1 generic argument but 0 generic arguments\n+    //~^ ERROR struct takes 1 generic argument but 0 generic arguments\n     //~| ERROR missing lifetime specifier\n     //~| HELP consider introducing\n     //~| HELP add missing\n \n     type F = Ty<'static, usize, 'static, usize>;\n-    //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments\n-    //~| ERROR this struct takes 1 generic argument but 2 generic arguments\n+    //~^ ERROR struct takes 1 lifetime argument but 2 lifetime arguments\n+    //~| ERROR struct takes 1 generic argument but 2 generic arguments\n     //~| HELP remove this lifetime argument\n     //~| HELP remove this generic argument\n }\n@@ -82,19 +82,19 @@ mod type_and_type_and_type {\n     //~| HELP add missing\n \n     type B = Ty<usize>;\n-    //~^ ERROR this struct takes at least 2\n+    //~^ ERROR struct takes at least 2\n     //~| HELP add missing\n \n     type C = Ty<usize, String>;\n \n     type D = Ty<usize, String, char>;\n \n     type E = Ty<usize, String, char, f64>;\n-    //~^ ERROR this struct takes at most 3\n+    //~^ ERROR struct takes at most 3\n     //~| HELP remove\n \n     type F = Ty<>;\n-    //~^ ERROR this struct takes at least 2 generic arguments but 0 generic arguments\n+    //~^ ERROR struct takes at least 2 generic arguments but 0 generic arguments\n     //~| HELP add missing\n }\n \n@@ -114,7 +114,7 @@ mod r#trait {\n     }\n \n     type A = Box<dyn NonGeneric<usize>>;\n-    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+    //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n     //~| HELP remove\n \n     type B = Box<dyn GenericLifetime>;\n@@ -123,15 +123,15 @@ mod r#trait {\n     //~| HELP consider making the bound lifetime-generic\n \n     type C = Box<dyn GenericLifetime<'static, 'static>>;\n-    //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~^ ERROR trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n     //~| HELP remove\n \n     type D = Box<dyn GenericType>;\n     //~^ ERROR missing generics for trait `GenericType`\n     //~| HELP add missing\n \n     type E = Box<dyn GenericType<String, usize>>;\n-    //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n+    //~^ ERROR trait takes 1 generic argument but 2 generic arguments\n     //~| HELP remove\n \n     type F = Box<dyn GenericLifetime<>>;\n@@ -140,7 +140,7 @@ mod r#trait {\n     //~| HELP consider making the bound lifetime-generic\n \n     type G = Box<dyn GenericType<>>;\n-    //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+    //~^ ERROR trait takes 1 generic argument but 0 generic arguments\n     //~| HELP add missing\n }\n \n@@ -151,7 +151,7 @@ mod associated_item {\n         }\n \n         type A = Box<dyn NonGenericAT<usize, AssocTy=()>>;\n-        //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+        //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n         //~| HELP remove\n     }\n \n@@ -166,14 +166,14 @@ mod associated_item {\n         //~| HELP consider making the bound lifetime-generic\n \n         type B = Box<dyn GenericLifetimeAT<'static, 'static, AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~^ ERROR trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n         //~| HELP remove\n \n         type C = Box<dyn GenericLifetimeAT<(), AssocTy=()>>;\n         //~^ ERROR missing lifetime specifier\n         //~| HELP consider introducing\n         //~| HELP consider making the bound lifetime-generic\n-        //~| ERROR this trait takes 0 generic arguments but 1 generic argument\n+        //~| ERROR trait takes 0 generic arguments but 1 generic argument\n         //~| HELP remove\n     }\n \n@@ -183,17 +183,17 @@ mod associated_item {\n         }\n \n         type A = Box<dyn GenericTypeAT<AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~^ ERROR trait takes 1 generic argument but 0 generic arguments\n         //~| HELP add missing\n \n         type B = Box<dyn GenericTypeAT<(), (), AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~^ ERROR trait takes 1 generic argument but 2 generic arguments\n         //~| HELP remove\n \n         type C = Box<dyn GenericTypeAT<'static, AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~^ ERROR trait takes 1 generic argument but 0 generic arguments\n         //~| HELP add missing\n-        //~| ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+        //~| ERROR trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n         //~| HELP remove\n     }\n \n@@ -203,20 +203,20 @@ mod associated_item {\n         }\n \n         type A = Box<dyn GenericLifetimeTypeAT<AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~^ ERROR trait takes 1 generic argument but 0 generic arguments\n         //~| HELP add missing\n         //~| ERROR missing lifetime specifier\n         //~| HELP consider introducing\n         //~| HELP consider making the bound lifetime-generic\n \n         type B = Box<dyn GenericLifetimeTypeAT<'static, AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments were supplied\n+        //~^ ERROR trait takes 1 generic argument but 0 generic arguments were supplied\n         //~| HELP add missing\n \n         type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~^ ERROR trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n         //~| HELP remove\n-        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| ERROR trait takes 1 generic argument but 0 generic arguments\n         //~| HELP add missing\n \n         type D = Box<dyn GenericLifetimeTypeAT<(), AssocTy=()>>;\n@@ -228,21 +228,21 @@ mod associated_item {\n         //~^ ERROR missing lifetime specifier\n         //~| HELP consider introducing\n         //~| HELP consider making the bound lifetime-generic\n-        //~| ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| ERROR trait takes 1 generic argument but 2 generic arguments\n         //~| HELP remove\n \n         type F = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~^ ERROR trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n         //~| HELP remove\n \n         type G = Box<dyn GenericLifetimeTypeAT<'static, (), (), AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~^ ERROR trait takes 1 generic argument but 2 generic arguments\n         //~| HELP remove\n \n         type H = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), (), AssocTy=()>>;\n-        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~^ ERROR trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n         //~| HELP remove\n-        //~| ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| ERROR trait takes 1 generic argument but 2 generic arguments\n         //~| HELP remove\n     }\n \n@@ -252,15 +252,15 @@ mod associated_item {\n         }\n \n         type A = Box<dyn GenericTypeTypeAT<AssocTy=()>>;\n-        //~^ ERROR this trait takes 2 generic arguments but 0 generic arguments\n+        //~^ ERROR trait takes 2 generic arguments but 0 generic arguments\n         //~| HELP add missing\n \n         type B = Box<dyn GenericTypeTypeAT<(), AssocTy=()>>;\n-        //~^ ERROR this trait takes 2 generic arguments but 1 generic argument\n+        //~^ ERROR trait takes 2 generic arguments but 1 generic argument\n         //~| HELP add missing\n \n         type C = Box<dyn GenericTypeTypeAT<(), (), (), AssocTy=()>>;\n-        //~^ ERROR this trait takes 2 generic arguments but 3 generic arguments\n+        //~^ ERROR trait takes 2 generic arguments but 3 generic arguments\n         //~| HELP remove\n     }\n \n@@ -275,7 +275,7 @@ mod associated_item {\n         //~| HELP consider making the bound lifetime-generic\n \n         type B = Box<dyn GenericLifetimeLifetimeAT<'static, AssocTy=()>>;\n-        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~^ ERROR trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n         //~| HELP add missing lifetime argument\n     }\n \n@@ -288,17 +288,17 @@ mod associated_item {\n         //~^ ERROR missing lifetime specifier\n         //~| HELP consider introducing\n         //~| HELP consider making the bound lifetime-generic\n-        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| ERROR trait takes 1 generic argument but 0 generic arguments\n         //~| HELP add missing\n \n         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, AssocTy=()>>;\n-        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~^ ERROR trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n         //~| HELP add missing lifetime argument\n-        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| ERROR trait takes 1 generic argument but 0 generic arguments\n         //~| HELP add missing\n \n         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, (), AssocTy=()>>;\n-        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~^ ERROR trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n         //~| HELP add missing lifetime argument\n     }\n }\n@@ -312,21 +312,21 @@ mod stdlib {\n         //~| HELP add missing\n \n         type B = HashMap<String>;\n-        //~^ ERROR this struct takes at least\n+        //~^ ERROR struct takes at least\n         //~| HELP add missing\n \n         type C = HashMap<'static>;\n-        //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument\n+        //~^ ERROR struct takes 0 lifetime arguments but 1 lifetime argument\n         //~| HELP remove these generics\n-        //~| ERROR this struct takes at least 2\n+        //~| ERROR struct takes at least 2\n         //~| HELP add missing\n \n         type D = HashMap<usize, String, char, f64>;\n-        //~^ ERROR this struct takes at most 3\n+        //~^ ERROR struct takes at most 3\n         //~| HELP remove this\n \n         type E = HashMap<>;\n-        //~^ ERROR this struct takes at least 2 generic arguments but 0 generic arguments\n+        //~^ ERROR struct takes at least 2 generic arguments but 0 generic arguments\n         //~| HELP add missing\n     }\n \n@@ -336,21 +336,21 @@ mod stdlib {\n         //~| HELP add missing\n \n         type B = Result<String>;\n-        //~^ ERROR this enum takes 2 generic arguments but 1 generic argument\n+        //~^ ERROR enum takes 2 generic arguments but 1 generic argument\n         //~| HELP add missing\n \n         type C = Result<'static>;\n-        //~^ ERROR this enum takes 0 lifetime arguments but 1 lifetime argument\n+        //~^ ERROR enum takes 0 lifetime arguments but 1 lifetime argument\n         //~| HELP remove these generics\n-        //~| ERROR this enum takes 2 generic arguments but 0 generic arguments\n+        //~| ERROR enum takes 2 generic arguments but 0 generic arguments\n         //~| HELP add missing\n \n         type D = Result<usize, String, char>;\n-        //~^ ERROR this enum takes 2 generic arguments but 3 generic arguments\n+        //~^ ERROR enum takes 2 generic arguments but 3 generic arguments\n         //~| HELP remove\n \n         type E = Result<>;\n-        //~^ ERROR this enum takes 2 generic arguments but 0 generic arguments\n+        //~^ ERROR enum takes 2 generic arguments but 0 generic arguments\n         //~| HELP add missing\n     }\n }"}, {"sha": "9006fb10b67fa64551ad358527fa77f21a991977", "filename": "tests/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -167,7 +167,7 @@ help: consider introducing a named lifetime parameter\n LL |         type A<'a> = Box<dyn GenericLifetimeLifetimeTypeAT<'a, 'a, AssocTy=()>>;\n    |               ++++                                         +++++++\n \n-error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:6:14\n    |\n LL |     type B = Ty<'static>;\n@@ -181,7 +181,7 @@ note: struct defined here, with 0 lifetime parameters\n LL |     struct Ty;\n    |            ^^\n \n-error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:10:14\n    |\n LL |     type C = Ty<'static, usize>;\n@@ -195,7 +195,7 @@ note: struct defined here, with 0 lifetime parameters\n LL |     struct Ty;\n    |            ^^\n \n-error[E0107]: this struct takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: struct takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:10:14\n    |\n LL |     type C = Ty<'static, usize>;\n@@ -209,7 +209,7 @@ note: struct defined here, with 0 generic parameters\n LL |     struct Ty;\n    |            ^^\n \n-error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:16:14\n    |\n LL |     type D = Ty<'static, usize, { 0 }>;\n@@ -223,7 +223,7 @@ note: struct defined here, with 0 lifetime parameters\n LL |     struct Ty;\n    |            ^^\n \n-error[E0107]: this struct takes 0 generic arguments but 2 generic arguments were supplied\n+error[E0107]: struct takes 0 generic arguments but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:16:14\n    |\n LL |     type D = Ty<'static, usize, { 0 }>;\n@@ -253,7 +253,7 @@ help: add missing generic arguments\n LL |     type A = Ty<A, B>;\n    |                ++++++\n \n-error[E0107]: this struct takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: struct takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:30:14\n    |\n LL |     type B = Ty<usize>;\n@@ -271,7 +271,7 @@ help: add missing generic argument\n LL |     type B = Ty<usize, B>;\n    |                      +++\n \n-error[E0107]: this struct takes 2 generic arguments but 3 generic arguments were supplied\n+error[E0107]: struct takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:36:14\n    |\n LL |     type D = Ty<usize, String, char>;\n@@ -285,7 +285,7 @@ note: struct defined here, with 2 generic parameters: `A`, `B`\n LL |     struct Ty<A, B>;\n    |            ^^ -  -\n \n-error[E0107]: this struct takes 2 generic arguments but 0 generic arguments were supplied\n+error[E0107]: struct takes 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:40:14\n    |\n LL |     type E = Ty<>;\n@@ -317,7 +317,7 @@ help: add missing generic argument\n LL |     type A = Ty<T>;\n    |                +++\n \n-error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:54:14\n    |\n LL |     type B = Ty<'static>;\n@@ -333,7 +333,7 @@ help: add missing generic argument\n LL |     type B = Ty<'static, T>;\n    |                        +++\n \n-error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:64:14\n    |\n LL |     type E = Ty<>;\n@@ -349,7 +349,7 @@ help: add missing generic argument\n LL |     type E = Ty<T>;\n    |                 +\n \n-error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:70:14\n    |\n LL |     type F = Ty<'static, usize, 'static, usize>;\n@@ -363,7 +363,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL |     struct Ty<'a, T>;\n    |            ^^ --\n \n-error[E0107]: this struct takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:70:14\n    |\n LL |     type F = Ty<'static, usize, 'static, usize>;\n@@ -393,7 +393,7 @@ help: add missing generic arguments\n LL |     type A = Ty<A, B>;\n    |                ++++++\n \n-error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:84:14\n    |\n LL |     type B = Ty<usize>;\n@@ -411,7 +411,7 @@ help: add missing generic argument\n LL |     type B = Ty<usize, B>;\n    |                      +++\n \n-error[E0107]: this struct takes at most 3 generic arguments but 4 generic arguments were supplied\n+error[E0107]: struct takes at most 3 generic arguments but 4 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:92:14\n    |\n LL |     type E = Ty<usize, String, char, f64>;\n@@ -425,7 +425,7 @@ note: struct defined here, with at most 3 generic parameters: `A`, `B`, `C`\n LL |     struct Ty<A, B, C = &'static str>;\n    |            ^^ -  -  ----------------\n \n-error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n+error[E0107]: struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:96:14\n    |\n LL |     type F = Ty<>;\n@@ -441,7 +441,7 @@ help: add missing generic arguments\n LL |     type F = Ty<A, B>;\n    |                 ++++\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:116:22\n    |\n LL |     type A = Box<dyn NonGeneric<usize>>;\n@@ -455,7 +455,7 @@ note: trait defined here, with 0 generic parameters\n LL |     trait NonGeneric {\n    |           ^^^^^^^^^^\n \n-error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:125:22\n    |\n LL |     type C = Box<dyn GenericLifetime<'static, 'static>>;\n@@ -485,7 +485,7 @@ help: add missing generic argument\n LL |     type D = Box<dyn GenericType<A>>;\n    |                                 +++\n \n-error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:133:22\n    |\n LL |     type E = Box<dyn GenericType<String, usize>>;\n@@ -499,7 +499,7 @@ note: trait defined here, with 1 generic parameter: `A`\n LL |     trait GenericType<A> {\n    |           ^^^^^^^^^^^ -\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:142:22\n    |\n LL |     type G = Box<dyn GenericType<>>;\n@@ -515,7 +515,7 @@ help: add missing generic argument\n LL |     type G = Box<dyn GenericType<A>>;\n    |                                  +\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:153:26\n    |\n LL |         type A = Box<dyn NonGenericAT<usize, AssocTy=()>>;\n@@ -529,7 +529,7 @@ note: trait defined here, with 0 generic parameters\n LL |         trait NonGenericAT {\n    |               ^^^^^^^^^^^^\n \n-error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:168:26\n    |\n LL |         type B = Box<dyn GenericLifetimeAT<'static, 'static, AssocTy=()>>;\n@@ -543,7 +543,7 @@ note: trait defined here, with 1 lifetime parameter: `'a`\n LL |         trait GenericLifetimeAT<'a> {\n    |               ^^^^^^^^^^^^^^^^^ --\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:172:26\n    |\n LL |         type C = Box<dyn GenericLifetimeAT<(), AssocTy=()>>;\n@@ -557,7 +557,7 @@ note: trait defined here, with 0 generic parameters\n LL |         trait GenericLifetimeAT<'a> {\n    |               ^^^^^^^^^^^^^^^^^\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:185:26\n    |\n LL |         type A = Box<dyn GenericTypeAT<AssocTy=()>>;\n@@ -573,7 +573,7 @@ help: add missing generic argument\n LL |         type A = Box<dyn GenericTypeAT<A, AssocTy=()>>;\n    |                                        ++\n \n-error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:189:26\n    |\n LL |         type B = Box<dyn GenericTypeAT<(), (), AssocTy=()>>;\n@@ -587,7 +587,7 @@ note: trait defined here, with 1 generic parameter: `A`\n LL |         trait GenericTypeAT<A> {\n    |               ^^^^^^^^^^^^^ -\n \n-error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:193:26\n    |\n LL |         type C = Box<dyn GenericTypeAT<'static, AssocTy=()>>;\n@@ -601,7 +601,7 @@ note: trait defined here, with 0 lifetime parameters\n LL |         trait GenericTypeAT<A> {\n    |               ^^^^^^^^^^^^^\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:193:26\n    |\n LL |         type C = Box<dyn GenericTypeAT<'static, AssocTy=()>>;\n@@ -617,7 +617,7 @@ help: add missing generic argument\n LL |         type C = Box<dyn GenericTypeAT<'static, A, AssocTy=()>>;\n    |                                               +++\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:205:26\n    |\n LL |         type A = Box<dyn GenericLifetimeTypeAT<AssocTy=()>>;\n@@ -633,7 +633,7 @@ help: add missing generic argument\n LL |         type A = Box<dyn GenericLifetimeTypeAT<A, AssocTy=()>>;\n    |                                                ++\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:212:26\n    |\n LL |         type B = Box<dyn GenericLifetimeTypeAT<'static, AssocTy=()>>;\n@@ -649,7 +649,7 @@ help: add missing generic argument\n LL |         type B = Box<dyn GenericLifetimeTypeAT<'static, A, AssocTy=()>>;\n    |                                                       +++\n \n-error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:216:26\n    |\n LL |         type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n@@ -663,7 +663,7 @@ note: trait defined here, with 1 lifetime parameter: `'a`\n LL |         trait GenericLifetimeTypeAT<'a, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^ --\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:216:26\n    |\n LL |         type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n@@ -679,7 +679,7 @@ help: add missing generic argument\n LL |         type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, A, AssocTy=()>>;\n    |                                                                +++\n \n-error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:227:26\n    |\n LL |         type E = Box<dyn GenericLifetimeTypeAT<(), (), AssocTy=()>>;\n@@ -693,7 +693,7 @@ note: trait defined here, with 1 generic parameter: `A`\n LL |         trait GenericLifetimeTypeAT<'a, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^     -\n \n-error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:234:26\n    |\n LL |         type F = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), AssocTy=()>>;\n@@ -707,7 +707,7 @@ note: trait defined here, with 1 lifetime parameter: `'a`\n LL |         trait GenericLifetimeTypeAT<'a, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^ --\n \n-error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:238:26\n    |\n LL |         type G = Box<dyn GenericLifetimeTypeAT<'static, (), (), AssocTy=()>>;\n@@ -721,7 +721,7 @@ note: trait defined here, with 1 generic parameter: `A`\n LL |         trait GenericLifetimeTypeAT<'a, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^     -\n \n-error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:242:26\n    |\n LL |         type H = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), (), AssocTy=()>>;\n@@ -735,7 +735,7 @@ note: trait defined here, with 1 lifetime parameter: `'a`\n LL |         trait GenericLifetimeTypeAT<'a, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^ --\n \n-error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:242:26\n    |\n LL |         type H = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), (), AssocTy=()>>;\n@@ -749,7 +749,7 @@ note: trait defined here, with 1 generic parameter: `A`\n LL |         trait GenericLifetimeTypeAT<'a, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^     -\n \n-error[E0107]: this trait takes 2 generic arguments but 0 generic arguments were supplied\n+error[E0107]: trait takes 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:254:26\n    |\n LL |         type A = Box<dyn GenericTypeTypeAT<AssocTy=()>>;\n@@ -765,7 +765,7 @@ help: add missing generic arguments\n LL |         type A = Box<dyn GenericTypeTypeAT<A, B, AssocTy=()>>;\n    |                                            +++++\n \n-error[E0107]: this trait takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:258:26\n    |\n LL |         type B = Box<dyn GenericTypeTypeAT<(), AssocTy=()>>;\n@@ -783,7 +783,7 @@ help: add missing generic argument\n LL |         type B = Box<dyn GenericTypeTypeAT<(), B, AssocTy=()>>;\n    |                                              +++\n \n-error[E0107]: this trait takes 2 generic arguments but 3 generic arguments were supplied\n+error[E0107]: trait takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:262:26\n    |\n LL |         type C = Box<dyn GenericTypeTypeAT<(), (), (), AssocTy=()>>;\n@@ -797,7 +797,7 @@ note: trait defined here, with 2 generic parameters: `A`, `B`\n LL |         trait GenericTypeTypeAT<A, B> {\n    |               ^^^^^^^^^^^^^^^^^ -  -\n \n-error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:277:26\n    |\n LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, AssocTy=()>>;\n@@ -815,7 +815,7 @@ help: add missing lifetime argument\n LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, 'static, AssocTy=()>>;\n    |                                                           +++++++++\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:287:26\n    |\n LL |         type A = Box<dyn GenericLifetimeLifetimeTypeAT<AssocTy=()>>;\n@@ -831,7 +831,7 @@ help: add missing generic argument\n LL |         type A = Box<dyn GenericLifetimeLifetimeTypeAT<A, AssocTy=()>>;\n    |                                                        ++\n \n-error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:294:26\n    |\n LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, AssocTy=()>>;\n@@ -849,7 +849,7 @@ help: add missing lifetime argument\n LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n    |                                                               +++++++++\n \n-error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:294:26\n    |\n LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, AssocTy=()>>;\n@@ -865,7 +865,7 @@ help: add missing generic argument\n LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, A, AssocTy=()>>;\n    |                                                               +++\n \n-error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:300:26\n    |\n LL |         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, (), AssocTy=()>>;\n@@ -894,7 +894,7 @@ help: add missing generic arguments\n LL |         type A = HashMap<K, V>;\n    |                         ++++++\n \n-error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:314:18\n    |\n LL |         type B = HashMap<String>;\n@@ -907,15 +907,15 @@ help: add missing generic argument\n LL |         type B = HashMap<String, V>;\n    |                                +++\n \n-error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:318:18\n    |\n LL |         type C = HashMap<'static>;\n    |                  ^^^^^^^--------- help: remove these generics\n    |                  |\n    |                  expected 0 lifetime arguments\n \n-error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n+error[E0107]: struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:318:18\n    |\n LL |         type C = HashMap<'static>;\n@@ -926,15 +926,15 @@ help: add missing generic arguments\n LL |         type C = HashMap<'static, K, V>;\n    |                                 ++++++\n \n-error[E0107]: this struct takes at most 3 generic arguments but 4 generic arguments were supplied\n+error[E0107]: struct takes at most 3 generic arguments but 4 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:324:18\n    |\n LL |         type D = HashMap<usize, String, char, f64>;\n    |                  ^^^^^^^                      --- help: remove this generic argument\n    |                  |\n    |                  expected at most 3 generic arguments\n \n-error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n+error[E0107]: struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:328:18\n    |\n LL |         type E = HashMap<>;\n@@ -956,7 +956,7 @@ help: add missing generic arguments\n LL |         type A = Result<T, E>;\n    |                        ++++++\n \n-error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:338:18\n    |\n LL |         type B = Result<String>;\n@@ -969,15 +969,15 @@ help: add missing generic argument\n LL |         type B = Result<String, E>;\n    |                               +++\n \n-error[E0107]: this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/wrong-number-of-args.rs:342:18\n    |\n LL |         type C = Result<'static>;\n    |                  ^^^^^^--------- help: remove these generics\n    |                  |\n    |                  expected 0 lifetime arguments\n \n-error[E0107]: this enum takes 2 generic arguments but 0 generic arguments were supplied\n+error[E0107]: enum takes 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:342:18\n    |\n LL |         type C = Result<'static>;\n@@ -988,15 +988,15 @@ help: add missing generic arguments\n LL |         type C = Result<'static, T, E>;\n    |                                ++++++\n \n-error[E0107]: this enum takes 2 generic arguments but 3 generic arguments were supplied\n+error[E0107]: enum takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:348:18\n    |\n LL |         type D = Result<usize, String, char>;\n    |                  ^^^^^^                ---- help: remove this generic argument\n    |                  |\n    |                  expected 2 generic arguments\n \n-error[E0107]: this enum takes 2 generic arguments but 0 generic arguments were supplied\n+error[E0107]: enum takes 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:352:18\n    |\n LL |         type E = Result<>;"}, {"sha": "9c1011018704264f57390a229efccfae44cba80b", "filename": "tests/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this function takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/explicit-generic-args-for-impl.rs:4:5\n    |\n LL |     foo::<str, String>(\"\".to_string());"}, {"sha": "a26460c8ecc3ad6ce440035771c615894109e5f8", "filename": "tests/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: function takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/not-enough-args.rs:4:5\n    |\n LL |     f::<[u8]>(\"a\", b\"a\");"}, {"sha": "46ece725fb7c10197b8069715b1e274f4c2b1804", "filename": "tests/ui/issues/issue-106755.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-106755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-106755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-106755.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags:-Ztranslate-lang=en_US\n+\n+#![feature(negative_impls)]\n+#![feature(marker_trait_attr)]\n+\n+#[marker]\n+trait MyTrait {}\n+\n+struct TestType<T>(::std::marker::PhantomData<T>);\n+\n+unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n+\n+impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR found both positive and negative implementation\n+\n+unsafe impl<T: 'static> Send for TestType<T> {} //~ ERROR conflicting implementations\n+\n+impl !Send for TestType<i32> {}\n+\n+fn main() {}"}, {"sha": "543970340620da20ab88611ebc184ad1e53ea401", "filename": "tests/ui/issues/issue-106755.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-106755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-106755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-106755.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,22 @@\n+error[E0751]: found both positive and negative implementation of trait `Send` for type `TestType<_>`:\n+  --> $DIR/issue-106755.rs:13:1\n+   |\n+LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n+   | ------------------------------------------------------ positive implementation here\n+LL |\n+LL | impl<T: MyTrait> !Send for TestType<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n+\n+error[E0119]: conflicting implementations of trait `Send` for type `TestType<_>`\n+  --> $DIR/issue-106755.rs:15:1\n+   |\n+LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n+   | ------------------------------------------------------ first implementation here\n+...\n+LL | unsafe impl<T: 'static> Send for TestType<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0119, E0751.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "675fd041154beb6b56b823154f8d39a212c48bdb", "filename": "tests/ui/issues/issue-18423.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-18423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-18423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-18423.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -2,7 +2,7 @@\n \n struct Foo<'a> {\n     x: Box<'a, isize>\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~^ ERROR struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n }\n \n fn main() { }"}, {"sha": "5d154dbbbdd6edf20546dcb1d4a241c948256ab9", "filename": "tests/ui/issues/issue-18423.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-18423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-18423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-18423.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/issue-18423.rs:4:8\n    |\n LL |     x: Box<'a, isize>"}, {"sha": "e3c07bb3f724fee797de9e79fd1a99a727abdb6f", "filename": "tests/ui/issues/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3214.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,7 +4,7 @@ fn foo<T>() {\n     }\n \n     impl<T> Drop for Foo<T> {\n-        //~^ ERROR this struct takes 0 generic arguments but 1 generic argument\n+        //~^ ERROR struct takes 0 generic arguments but 1 generic argument\n         fn drop(&mut self) {}\n     }\n }"}, {"sha": "7a2d772f0a1b55a9dce4734a96873afd12565fc2", "filename": "tests/ui/issues/issue-3214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3214.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -8,7 +8,7 @@ LL |     struct Foo {\n LL |         x: T,\n    |            ^ use of generic parameter from outer function\n \n-error[E0107]: this struct takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: struct takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-3214.rs:6:22\n    |\n LL |     impl<T> Drop for Foo<T> {"}, {"sha": "da3ba63ef67d1b9aa4efe0dfac48c0ced890ac50", "filename": "tests/ui/issues/issue-53251.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-53251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-53251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-53251.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -9,8 +9,8 @@ macro_rules! impl_add {\n         $(\n             fn $n() {\n                 S::f::<i64>();\n-                //~^ ERROR this associated function takes 0 generic\n-                //~| ERROR this associated function takes 0 generic\n+                //~^ ERROR associated function takes 0 generic\n+                //~| ERROR associated function takes 0 generic\n             }\n         )*\n     }"}, {"sha": "d5f14e8deb90a264721232d45321ae588a0db19d", "filename": "tests/ui/issues/issue-53251.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-53251.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-53251.rs:11:20\n    |\n LL |                 S::f::<i64>();\n@@ -16,7 +16,7 @@ LL |     fn f() {}\n    |        ^\n    = note: this error originates in the macro `impl_add` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-53251.rs:11:20\n    |\n LL |                 S::f::<i64>();"}, {"sha": "7b9443eee5013d1590f1e5528d5ff12ab544181b", "filename": "tests/ui/issues/issue-60622.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-60622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-60622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-60622.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -9,7 +9,7 @@ impl Borked {\n fn run_wild<T>(b: &Borked) {\n     b.a::<'_, T>();\n     //~^ ERROR cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-    //~| ERROR this method takes 0 generic arguments but 1 generic argument\n+    //~| ERROR method takes 0 generic arguments but 1 generic argument\n     //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n }\n "}, {"sha": "43da2773940e58e47c12ac8926d6eb41ca585b5a", "filename": "tests/ui/issues/issue-60622.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-60622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fissues%2Fissue-60622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-60622.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -16,7 +16,7 @@ LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(late_bound_lifetime_arguments)]` implied by `#[deny(warnings)]`\n \n-error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-60622.rs:10:7\n    |\n LL |     b.a::<'_, T>();"}, {"sha": "792563fd82b35e67790e66d44caa381948c77877", "filename": "tests/ui/late-bound-lifetimes/mismatched_arg_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,6 +7,6 @@ trait Trait<'a> {\n type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n \n fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n-//~^ error: this type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+//~^ error: type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n \n fn main() {}"}, {"sha": "de58a014ee8fa6bff949e17e38ea989f4206423d", "filename": "tests/ui/late-bound-lifetimes/mismatched_arg_count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/mismatched_arg_count.rs:9:29\n    |\n LL | fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}"}, {"sha": "1f13de094bbf80d1f600724fe7210d71229afb34", "filename": "tests/ui/methods/method-call-lifetime-args-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -14,9 +14,9 @@ impl S {\n fn method_call() {\n     S.early(); // OK\n     S.early::<'static>();\n-    //~^ ERROR this method takes 2 lifetime arguments but 1 lifetime argument\n+    //~^ ERROR method takes 2 lifetime arguments but 1 lifetime argument\n     S.early::<'static, 'static, 'static>();\n-    //~^ ERROR this method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+    //~^ ERROR method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     let _: &u8 = S.life_and_type::<'static>();\n     S.life_and_type::<u8>();\n     S.life_and_type::<'static, u8>();\n@@ -61,9 +61,9 @@ fn ufcs() {\n \n     S::early(S); // OK\n     S::early::<'static>(S);\n-    //~^ ERROR this method takes 2 lifetime arguments but 1 lifetime argument\n+    //~^ ERROR method takes 2 lifetime arguments but 1 lifetime argument\n     S::early::<'static, 'static, 'static>(S);\n-    //~^ ERROR this method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+    //~^ ERROR method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     let _: &u8 = S::life_and_type::<'static>(S);\n     S::life_and_type::<u8>(S);\n     S::life_and_type::<'static, u8>(S);"}, {"sha": "34526256f9975b9250c116ac06d6f64f75ba36c4", "filename": "tests/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this method takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: method takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:16:7\n    |\n LL |     S.early::<'static>();\n@@ -16,7 +16,7 @@ help: add missing lifetime argument\n LL |     S.early::<'static, 'static>();\n    |                      +++++++++\n \n-error[E0107]: this method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+error[E0107]: method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:18:7\n    |\n LL |     S.early::<'static, 'static, 'static>();\n@@ -198,7 +198,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n    |                          ^^\n \n-error[E0107]: this method takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: method takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:63:8\n    |\n LL |     S::early::<'static>(S);\n@@ -216,7 +216,7 @@ help: add missing lifetime argument\n LL |     S::early::<'static, 'static>(S);\n    |                       +++++++++\n \n-error[E0107]: this method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+error[E0107]: method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:65:8\n    |\n LL |     S::early::<'static, 'static, 'static>(S);"}, {"sha": "730e268c09124802794e5f5d656edab3d1823f3c", "filename": "tests/ui/rfc-2632-const-trait-impl/do-not-const-check-override.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check-override.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+#![feature(const_trait_impl, rustc_attrs)]\n+\n+#[const_trait]\n+trait Foo {\n+    #[rustc_do_not_const_check]\n+    fn into_iter(&self) { println!(\"FEAR ME!\") }\n+}\n+\n+\n+impl const Foo for () {\n+    fn into_iter(&self) {\n+        // ^_^\n+    }\n+}\n+\n+const _: () = Foo::into_iter(&());\n+\n+fn main() {}"}, {"sha": "3c39c53de5f0a4a537d97cdd26fe5343bcc9b869", "filename": "tests/ui/rfc-2632-const-trait-impl/do-not-const-check.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdo-not-const-check.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(const_trait_impl, rustc_attrs)]\n+\n+#[const_trait]\n+trait IntoIter {\n+    fn into_iter(self);\n+}\n+\n+#[const_trait]\n+trait Hmm: Sized {\n+    #[rustc_do_not_const_check]\n+    fn chain<U>(self, other: U) where U: IntoIter,\n+    {\n+        other.into_iter()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "627dfcc31986a3ca1620f3a56f1d950e5b62f404", "filename": "tests/ui/seq-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseq-args.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -2,12 +2,12 @@ fn main() {\n     trait Seq { }\n \n     impl<T> Seq<T> for Vec<T> {\n-        //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+        //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n         /* ... */\n     }\n \n     impl Seq<bool> for u32 {\n-        //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+        //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n         /* Treat the integer as a sequence of bits */\n     }\n }"}, {"sha": "a5b0f8e98dca06cb9af5a61d796a5f88c7b884c1", "filename": "tests/ui/seq-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fseq-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fseq-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseq-args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/seq-args.rs:4:13\n    |\n LL |     impl<T> Seq<T> for Vec<T> {\n@@ -12,7 +12,7 @@ note: trait defined here, with 0 generic parameters\n LL |     trait Seq { }\n    |           ^^^\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/seq-args.rs:9:10\n    |\n LL |     impl Seq<bool> for u32 {"}, {"sha": "74d9705d4b89d4ef7393e4e405d379444493ae61", "filename": "tests/ui/structs/struct-path-associated-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-path-associated-type.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -13,7 +13,7 @@ fn f<T: Tr>() {\n     //~^ ERROR expected struct, variant or union type, found associated type\n     let z = T::A::<u8> {};\n     //~^ ERROR expected struct, variant or union type, found associated type\n-    //~| ERROR this associated type takes 0 generic arguments but 1 generic argument was supplied\n+    //~| ERROR associated type takes 0 generic arguments but 1 generic argument was supplied\n     match S {\n         T::A {} => {}\n         //~^ ERROR expected struct, variant or union type, found associated type\n@@ -22,7 +22,7 @@ fn f<T: Tr>() {\n \n fn g<T: Tr<A = S>>() {\n     let s = T::A {}; // OK\n-    let z = T::A::<u8> {}; //~ ERROR this associated type takes 0 generic arguments but 1 generic argument was supplied\n+    let z = T::A::<u8> {}; //~ ERROR associated type takes 0 generic arguments but 1 generic argument was supplied\n     match S {\n         T::A {} => {} // OK\n     }"}, {"sha": "acfddaf37607d236aa764a27da22d64be7b551b5", "filename": "tests/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,7 +4,7 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |     let s = T::A {};\n    |             ^^^^ not a struct\n \n-error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated type takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/struct-path-associated-type.rs:14:16\n    |\n LL |     let z = T::A::<u8> {};\n@@ -30,7 +30,7 @@ error[E0071]: expected struct, variant or union type, found associated type\n LL |         T::A {} => {}\n    |         ^^^^ not a struct\n \n-error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated type takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/struct-path-associated-type.rs:25:16\n    |\n LL |     let z = T::A::<u8> {};"}, {"sha": "21cd9d08b21d1dc548185e0a383a7eabe1682f1d", "filename": "tests/ui/structs/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -45,13 +45,13 @@ fn main() {\n         y: 8,\n     };\n \n-    let pt3 = PointF::<i32> { //~ ERROR this type alias takes 0 generic arguments but 1 generic argument\n+    let pt3 = PointF::<i32> { //~ ERROR type alias takes 0 generic arguments but 1 generic argument\n         x: 9,  //~ ERROR mismatched types\n         y: 10, //~ ERROR mismatched types\n     };\n \n     match (Point { x: 1, y: 2 }) {\n-        PointF::<u32> { .. } => {} //~ ERROR this type alias takes 0 generic arguments but 1 generic argument\n+        PointF::<u32> { .. } => {} //~ ERROR type alias takes 0 generic arguments but 1 generic argument\n         //~^ ERROR mismatched types\n     }\n "}, {"sha": "63dda459396b8e04bd50d76e5e7696505b730897", "filename": "tests/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -52,7 +52,7 @@ LL |         x: 7,\n    |            expected `f32`, found integer\n    |            help: use a float literal: `7.0`\n \n-error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/structure-constructor-type-mismatch.rs:48:15\n    |\n LL |     let pt3 = PointF::<i32> {\n@@ -84,7 +84,7 @@ LL |         y: 10,\n    |            expected `f32`, found integer\n    |            help: use a float literal: `10.0`\n \n-error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/structure-constructor-type-mismatch.rs:54:9\n    |\n LL |         PointF::<u32> { .. } => {}"}, {"sha": "1407ebd277cb685f8b7ecba43ee91824e88f564e", "filename": "tests/ui/suggestions/issue-101421.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-101421.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-101421.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-101421.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -8,5 +8,5 @@ impl Ice for () {\n \n fn main() {\n     ().f::<()>(());\n-    //~^ ERROR this method takes 0 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR method takes 0 generic arguments but 1 generic argument was supplied\n }"}, {"sha": "2656ab3db0bc382620ecca56e0ba0241aa54e212", "filename": "tests/ui/suggestions/issue-101421.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-101421.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-101421.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-101421.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-101421.rs:10:8\n    |\n LL |     ().f::<()>(());"}, {"sha": "37b3339fa923edd8cc1fa93296d41f39a0dd5e9f", "filename": "tests/ui/suggestions/issue-104287.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-104287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-104287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104287.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -8,6 +8,6 @@ impl S {\n fn main() {\n     let x = S;\n     foo::<()>(x);\n-    //~^ ERROR this method takes 0 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR method takes 0 generic arguments but 1 generic argument was supplied\n     //~| ERROR cannot find function `foo` in this scope\n }"}, {"sha": "ed59b2e7a2d3bd3a5507c2345cff04791cb7af07", "filename": "tests/ui/suggestions/issue-104287.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-104287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-104287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104287.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-104287.rs:10:5\n    |\n LL |     foo::<()>(x);"}, {"sha": "04d4c47d8e5833abce7819e817068988f8f5e9ea", "filename": "tests/ui/suggestions/issue-85347.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-85347.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-85347.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-85347.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,7 +1,7 @@\n use std::ops::Deref;\n trait Foo {\n     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n-    //~^ ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+    //~^ ERROR associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n     //~| ERROR associated type bindings are not allowed here\n     //~| HELP add missing\n }"}, {"sha": "f330b3c1faded7e8ec648e4cfcd96fe7ce587e3f", "filename": "tests/ui/suggestions/issue-85347.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-85347.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-85347.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-85347.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/issue-85347.rs:3:42\n    |\n LL |     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;"}, {"sha": "be09dd895120803ebfbe96fc93e8de023648cdd1", "filename": "tests/ui/suggestions/issue-89064.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-89064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fissue-89064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-89064.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-89064.rs:17:16\n    |\n LL |     let _ = A::foo::<S>();\n@@ -20,7 +20,7 @@ LL -     let _ = A::foo::<S>();\n LL +     let _ = A::foo();\n    |\n \n-error[E0107]: this associated function takes 0 generic arguments but 2 generic arguments were supplied\n+error[E0107]: associated function takes 0 generic arguments but 2 generic arguments were supplied\n   --> $DIR/issue-89064.rs:22:16\n    |\n LL |     let _ = B::bar::<S, S>();\n@@ -42,7 +42,7 @@ LL -     let _ = B::bar::<S, S>();\n LL +     let _ = B::bar();\n    |\n \n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-89064.rs:27:21\n    |\n LL |     let _ = A::<S>::foo::<S>();\n@@ -56,7 +56,7 @@ note: associated function defined here, with 0 generic parameters\n LL |     fn foo() {}\n    |        ^^^\n \n-error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-89064.rs:31:16\n    |\n LL |     let _ = 42.into::<Option<_>>();"}, {"sha": "cb734e8ba857f13323e1338445e16e57542da8b6", "filename": "tests/ui/suggestions/missing-lifetime-specifier.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -37,19 +37,19 @@ thread_local! {\n \n thread_local! {\n     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR this union takes 2 lifetime arguments but 1 lifetime argument\n-    //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~^ ERROR union takes 2 lifetime arguments but 1 lifetime argument\n+    //~| ERROR union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR union takes 2 lifetime arguments but 1 lifetime argument was supplied\n }\n thread_local! {\n     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~^ ERROR trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n     //~| ERROR missing lifetime\n     //~| ERROR missing lifetime\n }"}, {"sha": "21d2378382cbabd6f34eab12406b163b98450ada", "filename": "tests/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -133,7 +133,7 @@ LL | | }\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 3 lifetimes it is borrowed from\n \n-error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -151,7 +151,7 @@ help: add missing lifetime argument\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       +++++++++\n \n-error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -169,7 +169,7 @@ help: add missing lifetime argument\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       +++++++++\n \n-error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -187,7 +187,7 @@ help: add missing lifetime argument\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       +++++++++\n \n-error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -205,7 +205,7 @@ help: add missing lifetime argument\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       +++++++++\n \n-error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -223,7 +223,7 @@ help: add missing lifetime argument\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       +++++++++\n \n-error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -241,7 +241,7 @@ help: add missing lifetime argument\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                        +++++++++\n \n-error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -259,7 +259,7 @@ help: add missing lifetime argument\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                        +++++++++\n \n-error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -277,7 +277,7 @@ help: add missing lifetime argument\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                        +++++++++\n \n-error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -295,7 +295,7 @@ help: add missing lifetime argument\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                        +++++++++\n \n-error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());"}, {"sha": "3116c5a0a1cd758bd279a7f29355dd203c7dd54d", "filename": "tests/ui/suggestions/missing-type-param-used-in-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: function takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/missing-type-param-used-in-param.rs:6:5\n    |\n LL |     two_type_params::<String>(100);"}, {"sha": "4066cd3b11a382b0d253d302c11eb70aad905187", "filename": "tests/ui/suggestions/move-generic-to-trait-in-method-with-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -12,7 +12,7 @@ impl Foo<i32> for i32 {\n \n fn main() {\n     1.bar::<i32>(0);\n-    //~^ ERROR this method takes 0 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR method takes 0 generic arguments but 1 generic argument was supplied\n     //~| HELP consider moving this generic argument to the `Foo` trait, which takes up to 1 argument\n     //~| HELP remove these generics\n }"}, {"sha": "bfdb35947ef5a4d8c9d360b87646defbbc09b558", "filename": "tests/ui/suggestions/move-generic-to-trait-in-method-with-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/move-generic-to-trait-in-method-with-params.rs:14:7\n    |\n LL |     1.bar::<i32>(0);"}, {"sha": "4e3180e84d2dc0105141185be01e28a7c7ae0d30", "filename": "tests/ui/suggestions/type-ascription-instead-of-path-in-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -18,7 +18,7 @@ LL |     let _: Vec<A:B> = A::B;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0107]: this struct takes at least 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: struct takes at least 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/type-ascription-instead-of-path-in-type.rs:6:12\n    |\n LL |     let _: Vec<A:B> = A::B;"}, {"sha": "ed262fd39a5a98371629338f6e7b044c1de31aae", "filename": "tests/ui/suggestions/use-type-argument-instead-of-assoc-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -6,7 +6,7 @@ pub trait T<X, Y> {\n pub struct Foo {\n     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n     //~^ ERROR must be specified\n-    //~| ERROR this trait takes 2 generic arguments but 4 generic arguments were supplied\n+    //~| ERROR trait takes 2 generic arguments but 4 generic arguments were supplied\n }\n \n "}, {"sha": "175a5fbba610c3a46f7a984b75da77fd31212dc9", "filename": "tests/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this trait takes 2 generic arguments but 4 generic arguments were supplied\n+error[E0107]: trait takes 2 generic arguments but 4 generic arguments were supplied\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:16\n    |\n LL |     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,"}, {"sha": "47195c7e9d658f5bd790c6dddbd1d66834fdc21e", "filename": "tests/ui/tool-attributes/auxiliary/p1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftool-attributes%2Fauxiliary%2Fp1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftool-attributes%2Fauxiliary%2Fp1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fauxiliary%2Fp1.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,3 @@\n+#![feature(rustc_attrs)]\n+#[rustc_diagnostic_item = \"Foo\"]\n+pub struct Foo {}"}, {"sha": "47195c7e9d658f5bd790c6dddbd1d66834fdc21e", "filename": "tests/ui/tool-attributes/auxiliary/p2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftool-attributes%2Fauxiliary%2Fp2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftool-attributes%2Fauxiliary%2Fp2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fauxiliary%2Fp2.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,3 @@\n+#![feature(rustc_attrs)]\n+#[rustc_diagnostic_item = \"Foo\"]\n+pub struct Foo {}"}, {"sha": "39c2ca1cb860cb10b59aadc94fb9427f7e96d3d3", "filename": "tests/ui/tool-attributes/duplicate-diagnostic.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,13 @@\n+// aux-build: p1.rs\n+// aux-build: p2.rs\n+\n+// error-pattern: duplicate diagnostic item in crate `p2`\n+// error-pattern: note: the diagnostic item is first defined in crate `p1`\n+\n+#![feature(rustc_attrs)]\n+extern crate p1;\n+extern crate p2;\n+\n+#[rustc_diagnostic_item = \"Foo\"]\n+pub struct Foo {} //~ ERROR duplicate diagnostic item found\n+fn main() {}"}, {"sha": "e315fdc7d84bc4ec1de913a492a994fb2df08b75", "filename": "tests/ui/tool-attributes/duplicate-diagnostic.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,12 @@\n+error: duplicate diagnostic item in crate `p2`: `Foo`.\n+   |\n+   = note: the diagnostic item is first defined in crate `p1`.\n+\n+error: duplicate diagnostic item found: `Foo`.\n+  --> $DIR/duplicate-diagnostic.rs:12:1\n+   |\n+LL | pub struct Foo {}\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d3e6c0b217c9866cb95eab0f712f9a6139a89fee", "filename": "tests/ui/traits/object/vs-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -9,8 +9,8 @@ fn main() {\n     let _: S<'static, dyn 'static +>;\n     //~^ at least one trait is required for an object type\n     let _: S<'static, 'static>;\n-    //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n-    //~| ERROR this struct takes 1 generic argument but 0 generic arguments were supplied\n+    //~^ ERROR struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~| ERROR struct takes 1 generic argument but 0 generic arguments were supplied\n     let _: S<dyn 'static +, 'static>;\n     //~^ ERROR type provided when a lifetime was expected\n     //~| ERROR at least one trait is required for an object type"}, {"sha": "a69cd140807ffd6657d8a75da552e9acdb60c247", "filename": "tests/ui/traits/object/vs-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,7 +4,7 @@ error[E0224]: at least one trait is required for an object type\n LL |     let _: S<'static, dyn 'static +>;\n    |                       ^^^^^^^^^^^^^\n \n-error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+error[E0107]: struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n   --> $DIR/vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n@@ -18,7 +18,7 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct S<'a, T>(&'a u8, T);\n    |        ^ --\n \n-error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;"}, {"sha": "ffb778a01414085c955ec144959d17500c2678fa", "filename": "tests/ui/traits/test-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftraits%2Ftest-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftraits%2Ftest-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftest-2.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,9 +7,9 @@ impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n \n fn main() {\n     10.dup::<i32>();\n-    //~^ ERROR this method takes 0 generic arguments but 1\n+    //~^ ERROR method takes 0 generic arguments but 1\n     10.blah::<i32, i32>();\n-    //~^ ERROR this method takes 1 generic argument but 2\n+    //~^ ERROR method takes 1 generic argument but 2\n     (Box::new(10) as Box<dyn bar>).dup();\n     //~^ ERROR E0038\n     //~| ERROR E0038"}, {"sha": "6c0e8b8af4b7a888fff8a1a9bf9cf853c1991503", "filename": "tests/ui/traits/test-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftest-2.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/test-2.rs:9:8\n    |\n LL |     10.dup::<i32>();\n@@ -12,7 +12,7 @@ note: method defined here, with 0 generic parameters\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |                ^^^\n \n-error[E0107]: this method takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: method takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/test-2.rs:11:8\n    |\n LL |     10.blah::<i32, i32>();"}, {"sha": "e5a56ccc9e0377a829c6621b12e338b2b902623d", "filename": "tests/ui/transmutability/issue-101739-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftransmutability%2Fissue-101739-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftransmutability%2Fissue-101739-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-101739-2.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -15,7 +15,7 @@ mod assert {\n         const ASSUME_VISIBILITY: bool,\n     >()\n     where\n-        Dst: BikeshedIntrinsicFrom< //~ ERROR this trait takes at most 3 generic arguments but 6 generic arguments were supplied\n+        Dst: BikeshedIntrinsicFrom< //~ ERROR trait takes at most 3 generic arguments but 6 generic arguments were supplied\n             Src,\n             Context,\n             ASSUME_ALIGNMENT,"}, {"sha": "420a9f33008380be66405c691862ef0e4d646b90", "filename": "tests/ui/transmutability/issue-101739-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-101739-2.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this trait takes at most 3 generic arguments but 6 generic arguments were supplied\n+error[E0107]: trait takes at most 3 generic arguments but 6 generic arguments were supplied\n   --> $DIR/issue-101739-2.rs:18:14\n    |\n LL |           Dst: BikeshedIntrinsicFrom<"}, {"sha": "759a7fd7e05a9da52759954b05e9418a5f9547c7", "filename": "tests/ui/type-alias-enum-variants/enum-variant-generic-args.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -62,10 +62,10 @@ fn main() {\n     AliasFixed::TSVariant::<()>(());\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n     AliasFixed::<()>::TSVariant(());\n-    //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n+    //~^ ERROR type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::TSVariant::<()>(());\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n-    //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n+    //~| ERROR type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n \n     // Struct variant\n \n@@ -80,10 +80,10 @@ fn main() {\n     AliasFixed::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n     AliasFixed::<()>::SVariant { v: () };\n-    //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n+    //~^ ERROR type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n-    //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n+    //~| ERROR type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n \n     // Unit variant\n \n@@ -98,8 +98,8 @@ fn main() {\n     AliasFixed::UVariant::<()>;\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n     AliasFixed::<()>::UVariant;\n-    //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n+    //~^ ERROR type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::UVariant::<()>;\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n-    //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n+    //~| ERROR type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n }"}, {"sha": "758ff31ff7022f654a21e3d06de820a59db7cf51", "filename": "tests/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -304,7 +304,7 @@ LL |     AliasFixed::TSVariant::<()>(());\n    |                 |\n    |                 not allowed on this type\n \n-error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:64:5\n    |\n LL |     AliasFixed::<()>::TSVariant(());\n@@ -318,7 +318,7 @@ note: type alias defined here, with 0 generic parameters\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:66:5\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n@@ -395,7 +395,7 @@ LL -     AliasFixed::SVariant::<()> { v: () };\n LL +     AliasFixed::<()>::SVariant { v: () };\n    |\n \n-error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:82:5\n    |\n LL |     AliasFixed::<()>::SVariant { v: () };\n@@ -409,7 +409,7 @@ note: type alias defined here, with 0 generic parameters\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:84:5\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n@@ -470,7 +470,7 @@ LL |     AliasFixed::UVariant::<()>;\n    |                 |\n    |                 not allowed on this type\n \n-error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:100:5\n    |\n LL |     AliasFixed::<()>::UVariant;\n@@ -484,7 +484,7 @@ note: type alias defined here, with 0 generic parameters\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:102:5\n    |\n LL |     AliasFixed::<()>::UVariant::<()>;"}, {"sha": "c50ea0a086b14561a4af977034911ca276fd0deb", "filename": "tests/ui/typeck/issue-75883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Fissue-75883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Fissue-75883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-75883.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,7 +4,7 @@ pub struct UI {}\n \n impl UI {\n     pub fn run() -> Result<_> {\n-        //~^ ERROR: this enum takes 2 generic arguments but 1 generic argument was supplied\n+        //~^ ERROR: enum takes 2 generic arguments but 1 generic argument was supplied\n         //~| ERROR: the placeholder `_` is not allowed within types on item signatures for return types\n         let mut ui = UI {};\n         ui.interact();\n@@ -13,7 +13,7 @@ impl UI {\n     }\n \n     pub fn interact(&mut self) -> Result<_> {\n-        //~^ ERROR: this enum takes 2 generic arguments but 1 generic argument was supplied\n+        //~^ ERROR: enum takes 2 generic arguments but 1 generic argument was supplied\n         //~| ERROR: the placeholder `_` is not allowed within types on item signatures for return types\n         unimplemented!();\n     }"}, {"sha": "a1ed0840675f59e506b7f5b283cb04d67491363a", "filename": "tests/ui/typeck/issue-75883.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Fissue-75883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Fissue-75883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-75883.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-75883.rs:6:21\n    |\n LL |     pub fn run() -> Result<_> {\n@@ -11,7 +11,7 @@ help: add missing generic argument\n LL |     pub fn run() -> Result<_, E> {\n    |                             +++\n \n-error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n+error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-75883.rs:15:35\n    |\n LL |     pub fn interact(&mut self) -> Result<_> {"}, {"sha": "5ff567cd07c508fb952c79ed4711a655a2032ee9", "filename": "tests/ui/typeck/lazy-norm/cast-checks-handling-projections.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Ztrait-solver=next\n+// known-bug: unknown\n+\n+fn main() {\n+    (0u8 + 0u8) as char;\n+}"}, {"sha": "6b09ccd52140def0329639a2f6ad5889d8193cbf", "filename": "tests/ui/typeck/lazy-norm/cast-checks-handling-projections.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Flazy-norm%2Fcast-checks-handling-projections.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -0,0 +1,9 @@\n+error[E0271]: type mismatch resolving `char == <u8 as Add>::Output`\n+  --> $DIR/cast-checks-handling-projections.rs:5:5\n+   |\n+LL |     (0u8 + 0u8) as char;\n+   |     ^^^^^^^^^^^ types differ\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "7ff9199f63c5c71c038802680bb4ee3f221834d1", "filename": "tests/ui/typeck/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,17 +1,17 @@\n fn foo1<T:Copy<U>, U>(x: T) {}\n-//~^ ERROR this trait takes 0 generic arguments but 1 generic argument was supplied\n+//~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n \n trait Trait: Copy<dyn Send> {}\n-//~^ ERROR this trait takes 0 generic arguments but 1 generic argument was supplied\n+//~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n \n struct MyStruct1<T: Copy<T>>;\n-//~^ ERROR this trait takes 0 generic arguments but 1 generic argument was supplied\n+//~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n \n struct MyStruct2<'a, T: Copy<'a>>;\n-//~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+//~^ ERROR trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n \n fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-//~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-//~| ERROR this trait takes 0 generic arguments but 1 generic argument was supplied\n+//~^ ERROR trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+//~| ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n \n fn main() { }"}, {"sha": "a71fd9536582073c66b214f2719ec50c48f3b5fd", "filename": "tests/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,44 +1,44 @@\n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:1:11\n    |\n LL | fn foo1<T:Copy<U>, U>(x: T) {}\n    |           ^^^^--- help: remove these generics\n    |           |\n    |           expected 0 generic arguments\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:4:14\n    |\n LL | trait Trait: Copy<dyn Send> {}\n    |              ^^^^---------- help: remove these generics\n    |              |\n    |              expected 0 generic arguments\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:7:21\n    |\n LL | struct MyStruct1<T: Copy<T>>;\n    |                     ^^^^--- help: remove these generics\n    |                     |\n    |                     expected 0 generic arguments\n \n-error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:10:25\n    |\n LL | struct MyStruct2<'a, T: Copy<'a>>;\n    |                         ^^^^---- help: remove these generics\n    |                         |\n    |                         expected 0 lifetime arguments\n \n-error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^ -- help: remove this lifetime argument\n    |               |\n    |               expected 0 lifetime arguments\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}"}, {"sha": "a450dbb82d1bdf4fabf4b5229100a810104badd8", "filename": "tests/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -227,4 +227,6 @@ fn evens_squared(n: usize) -> _ {\n }\n \n const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+//~^ ERROR the trait bound\n+//~| ERROR the trait bound\n+//~| ERROR the placeholder"}, {"sha": "bc6c9fd077993a172ee6525d570693a0eb4e0826", "filename": "tests/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -437,17 +437,37 @@ LL | fn evens_squared(n: usize) -> _ {\n    |                               not allowed in type signatures\n    |                               help: replace with an appropriate return type: `impl Iterator<Item = usize>`\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:229:10\n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/typeck_type_placeholder_item.rs:229:22\n    |\n LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |          ^ not allowed in type signatures\n+   |                      ^^^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/typeck_type_placeholder_item.rs:229:14\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |              ^^^^^^^\n+\n+error[E0277]: the trait bound `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>: Iterator` is not satisfied\n+  --> $DIR/typeck_type_placeholder_item.rs:229:45\n    |\n-note: however, the inferred type `Map<Filter<Range<i32>, [closure@typeck_type_placeholder_item.rs:229:29]>, [closure@typeck_type_placeholder_item.rs:229:49]>` cannot be named\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |                                             ^^^ `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>`\n+note: the trait `Iterator` is implemented for `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>`, but that implementation is not `const`\n   --> $DIR/typeck_type_placeholder_item.rs:229:14\n    |\n LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:229:10\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |          ^ not allowed in type signatures\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:140:31\n@@ -657,7 +677,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error: aborting due to 71 previous errors\n+error: aborting due to 73 previous errors\n \n-Some errors have detailed explanations: E0121, E0282, E0403.\n+Some errors have detailed explanations: E0121, E0277, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "90b12ffdf772e239c2a808b57f3ff2d47db81c15", "filename": "tests/ui/typeck/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,5 +7,5 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, _> = Foo { r: &5 };\n-    //~^ ERROR this struct takes 1 generic argument but 2 generic arguments were supplied\n+    //~^ ERROR struct takes 1 generic argument but 2 generic arguments were supplied\n }"}, {"sha": "c4e4aed20673e07adccf671f077f94893e08c6b8", "filename": "tests/ui/typeck/typeck_type_placeholder_lifetime_1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/typeck_type_placeholder_lifetime_1.rs:9:12\n    |\n LL |     let c: Foo<_, _> = Foo { r: &5 };"}, {"sha": "e361312ddba200c272c1aeecd5effc49f98f06a7", "filename": "tests/ui/typeck/typeck_type_placeholder_lifetime_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,5 +7,5 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, usize> = Foo { r: &5 };\n-    //~^ ERROR this struct takes 1 generic argument but 2 generic arguments were supplied\n+    //~^ ERROR struct takes 1 generic argument but 2 generic arguments were supplied\n }"}, {"sha": "302231777bdfcaa9daea3361e9547aa9b602808e", "filename": "tests/ui/typeck/typeck_type_placeholder_lifetime_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/typeck_type_placeholder_lifetime_2.rs:9:12\n    |\n LL |     let c: Foo<_, usize> = Foo { r: &5 };"}, {"sha": "6ab6580c0e606ecdd42d8107bfa13ad8e4066e9b", "filename": "tests/ui/ufcs/ufcs-qpath-missing-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -15,6 +15,6 @@ fn main() {\n       //~^ ERROR missing generics for\n \n     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n-    //~^ ERROR this method takes 0 generic arguments but 1\n+    //~^ ERROR method takes 0 generic arguments but 1\n     //~| ERROR missing generics for\n }"}, {"sha": "2338871218b1cb00441d98c99d58c2b5148085b2", "filename": "tests/ui/ufcs/ufcs-qpath-missing-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -30,7 +30,7 @@ help: add missing generic argument\n LL |     <String as IntoCow<B>>::into_cow::<str>(\"foo\".to_string());\n    |                       +++\n \n-error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/ufcs-qpath-missing-params.rs:17:26\n    |\n LL |     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());"}, {"sha": "c575f507704eb413d786f7bac0cb69ba682e555c", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -28,7 +28,7 @@ fn test<'a,'b>() {\n }\n \n fn test2(x: &dyn Foo<(isize,),Output=()>, y: &dyn Foo(isize)) {\n-    //~^ ERROR this trait takes 1 lifetime argument but 0 lifetime arguments were supplied\n+    //~^ ERROR trait takes 1 lifetime argument but 0 lifetime arguments were supplied\n     // Here, the omitted lifetimes are expanded to distinct things.\n     same_type(x, y)\n }"}, {"sha": "8814617814c902418217611b1cadf83229fe1815", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this trait takes 1 lifetime argument but 0 lifetime arguments were supplied\n+error[E0107]: trait takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/unboxed-closure-sugar-region.rs:30:51\n    |\n LL | fn test2(x: &dyn Foo<(isize,),Output=()>, y: &dyn Foo(isize)) {"}, {"sha": "14d5646b50865bdf1478dfcdedd3dc5d7e6e9935", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -7,7 +7,7 @@ struct Bar<A> {\n fn bar() {\n     let x: Box<Bar()> = panic!();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| ERROR this struct takes 1 generic argument but 0 generic arguments\n+    //~| ERROR struct takes 1 generic argument but 0 generic arguments\n }\n \n fn main() { }"}, {"sha": "27b22c2127b9f1bac519ac55deefdb0fee79dbd2", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,7 +4,7 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n LL |     let x: Box<Bar()> = panic!();\n    |                ^^^^^ only `Fn` traits may use parentheses\n \n-error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16\n    |\n LL |     let x: Box<Bar()> = panic!();"}, {"sha": "657b29204cda71354ce8e844289793b9d33ff639", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -6,7 +6,7 @@ struct Bar<A> {\n \n fn foo(b: Box<Bar()>) {\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| ERROR this struct takes 1 generic argument but 0 generic arguments\n+    //~| ERROR struct takes 1 generic argument but 0 generic arguments\n }\n \n fn main() { }"}, {"sha": "94e42a66c9e2fb1a8f5be76166ef918de819b3d3", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -4,7 +4,7 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n LL | fn foo(b: Box<Bar()>) {\n    |               ^^^^^ only `Fn` traits may use parentheses\n \n-error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n+error[E0107]: struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15\n    |\n LL | fn foo(b: Box<Bar()>) {"}, {"sha": "dd47ae73a3835ba57af45c3ecd37b0e1b06e9604", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -3,7 +3,7 @@\n trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }\n \n fn foo(_: &dyn Three())\n-//~^ ERROR this trait takes 3 generic arguments but 1 generic argument\n+//~^ ERROR trait takes 3 generic arguments but 1 generic argument\n //~| ERROR associated type `Output` not found\n {}\n "}, {"sha": "5d7fe3fa533c261bd8ab42528afbffb8403fc2a6", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this trait takes 3 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 3 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())"}, {"sha": "2c7e12f3257597f58b0ca802a041ba11ba8d2c44", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -3,25 +3,25 @@\n trait Zero { fn dummy(&self); }\n \n fn foo1(_: dyn Zero()) {\n-    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+    //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n     //~| ERROR associated type `Output` not found for `Zero`\n }\n \n fn foo2(_: dyn Zero<usize>) {\n-    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+    //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n }\n \n fn foo3(_: dyn Zero <   usize   >) {\n-    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+    //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n }\n \n fn foo4(_: dyn Zero(usize)) {\n-    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+    //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n     //~| ERROR associated type `Output` not found for `Zero`\n }\n \n fn foo5(_: dyn Zero (   usize   )) {\n-    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+    //~^ ERROR trait takes 0 generic arguments but 1 generic argument\n     //~| ERROR associated type `Output` not found for `Zero`\n }\n "}, {"sha": "50b90553aa7180cd8b7007a3e9060cfbaf8813ac", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:16\n    |\n LL | fn foo1(_: dyn Zero()) {\n@@ -18,7 +18,7 @@ error[E0220]: associated type `Output` not found for `Zero`\n LL | fn foo1(_: dyn Zero()) {\n    |                ^^^^^^ associated type `Output` not found\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:10:16\n    |\n LL | fn foo2(_: dyn Zero<usize>) {\n@@ -32,7 +32,7 @@ note: trait defined here, with 0 generic parameters\n LL | trait Zero { fn dummy(&self); }\n    |       ^^^^\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:14:16\n    |\n LL | fn foo3(_: dyn Zero <   usize   >) {\n@@ -46,7 +46,7 @@ note: trait defined here, with 0 generic parameters\n LL | trait Zero { fn dummy(&self); }\n    |       ^^^^\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:18:16\n    |\n LL | fn foo4(_: dyn Zero(usize)) {\n@@ -66,7 +66,7 @@ error[E0220]: associated type `Output` not found for `Zero`\n LL | fn foo4(_: dyn Zero(usize)) {\n    |                ^^^^^^^^^^^ associated type `Output` not found\n \n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:23:16\n    |\n LL | fn foo5(_: dyn Zero (   usize   )) {"}, {"sha": "ad60b0a0c7753faa2e6e07f718b90c0e47e2d392", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -3,7 +3,7 @@\n trait Trait {}\n \n fn f<F:Trait(isize) -> isize>(x: F) {}\n-//~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+//~^ ERROR trait takes 0 generic arguments but 1 generic argument\n //~| ERROR associated type `Output` not found for `Trait`\n \n fn main() {}"}, {"sha": "130b193d69c93890e37e1010a24c66290ae8db83", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c7d2b37780dac1092e75f12ab97dd56c30861d/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=c5c7d2b37780dac1092e75f12ab97dd56c30861d", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:8\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}"}]}