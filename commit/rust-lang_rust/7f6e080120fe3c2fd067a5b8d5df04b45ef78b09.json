{"sha": "7f6e080120fe3c2fd067a5b8d5df04b45ef78b09", "node_id": "C_kwDOAAsO6NoAKDdmNmUwODAxMjBmZTNjMmZkMDY3YTViOGQ1ZGYwNGI0NWVmNzhiMDk", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-05T00:08:19Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-09T19:54:42Z"}, "message": "add fast path on Path::eq for exact equality", "tree": {"sha": "c94566475375fff53f416242f3b9a74ed49ed63e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94566475375fff53f416242f3b9a74ed49ed63e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f6e080120fe3c2fd067a5b8d5df04b45ef78b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6e080120fe3c2fd067a5b8d5df04b45ef78b09", "html_url": "https://github.com/rust-lang/rust/commit/7f6e080120fe3c2fd067a5b8d5df04b45ef78b09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f6e080120fe3c2fd067a5b8d5df04b45ef78b09/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d", "html_url": "https://github.com/rust-lang/rust/commit/a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "33225692d177147f66e05cbc34836113dd6390a6", "filename": "library/std/src/path.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f6e080120fe3c2fd067a5b8d5df04b45ef78b09/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6e080120fe3c2fd067a5b8d5df04b45ef78b09/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=7f6e080120fe3c2fd067a5b8d5df04b45ef78b09", "patch": "@@ -979,6 +979,25 @@ impl FusedIterator for Components<'_> {}\n impl<'a> cmp::PartialEq for Components<'a> {\n     #[inline]\n     fn eq(&self, other: &Components<'a>) -> bool {\n+        let Components { path: _, front: _, back: _, has_physical_root: _, prefix: _ } = self;\n+\n+        // Fast path for exact matches, e.g. for hashmap lookups.\n+        // Don't explicitly compare the prefix or has_physical_root fields since they'll\n+        // either be covered by the `path` buffer or are only relevant for `prefix_verbatim()`.\n+        if self.path.len() == other.path.len()\n+            && self.front == other.front\n+            && self.back == State::Body\n+            && other.back == State::Body\n+            && self.prefix_verbatim() == other.prefix_verbatim()\n+        {\n+            // possible future improvement: this could bail out earlier if there were a\n+            // reverse memcmp/bcmp comparing back to front\n+            if self.path == other.path {\n+                return true;\n+            }\n+        }\n+\n+        // compare back to front since absolute paths often share long prefixes\n         Iterator::eq(self.clone().rev(), other.clone().rev())\n     }\n }\n@@ -1013,7 +1032,7 @@ fn compare_components(mut left: Components<'_>, mut right: Components<'_>) -> cm\n     // The fast path isn't taken for paths with a PrefixComponent to avoid backtracking into\n     // the middle of one\n     if left.prefix.is_none() && right.prefix.is_none() && left.front == right.front {\n-        // this might benefit from a [u8]::first_mismatch simd implementation, if it existed\n+        // possible future improvement: a [u8]::first_mismatch simd implementation\n         let first_difference =\n             match left.path.iter().zip(right.path.iter()).position(|(&a, &b)| a != b) {\n                 None if left.path.len() == right.path.len() => return cmp::Ordering::Equal,"}]}