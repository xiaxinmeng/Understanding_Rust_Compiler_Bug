{"sha": "28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWNmYjY5MWQ0NjkwYWM4ZjNmNmEyZmI3ZDM5MGExZjRhYmJiYjA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-20T17:36:52Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-25T06:25:26Z"}, "message": "Move ItemEnum \u2192 Generics logic into method on ItemEnum.", "tree": {"sha": "5d8a4888520f51ab56c978642d0eb2221b7654b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d8a4888520f51ab56c978642d0eb2221b7654b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0", "html_url": "https://github.com/rust-lang/rust/commit/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "012f45eaf70ca7f5d86e15fb304328786b446da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/012f45eaf70ca7f5d86e15fb304328786b446da9", "html_url": "https://github.com/rust-lang/rust/commit/012f45eaf70ca7f5d86e15fb304328786b446da9"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "7a4558d7b79e469346a6d87612c9be602c9434c0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0", "patch": "@@ -380,6 +380,23 @@ pub enum ItemEnum {\n     StrippedItem(Box<ItemEnum>),\n }\n \n+impl ItemEnum {\n+    pub fn generics(&self) -> Option<&Generics> {\n+        Some(match *self {\n+            ItemEnum::StructItem(ref s) => &s.generics,\n+            ItemEnum::EnumItem(ref e) => &e.generics,\n+            ItemEnum::FunctionItem(ref f) => &f.generics,\n+            ItemEnum::TypedefItem(ref t, _) => &t.generics,\n+            ItemEnum::TraitItem(ref t) => &t.generics,\n+            ItemEnum::ImplItem(ref i) => &i.generics,\n+            ItemEnum::TyMethodItem(ref i) => &i.generics,\n+            ItemEnum::MethodItem(ref i) => &i.generics,\n+            ItemEnum::ForeignFunctionItem(ref f) => &f.generics,\n+            _ => return None,\n+        })\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Module {\n     pub items: Vec<Item>,"}, {"sha": "289b967333573fe813e78804eec43f2b7263d5f4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=28ecfb691d4690ac8f3f6a2fb7d390a1f4abbbb0", "patch": "@@ -997,17 +997,8 @@ impl DocFolder for Cache {\n \n         // Register any generics to their corresponding string. This is used\n         // when pretty-printing types\n-        match item.inner {\n-            clean::StructItem(ref s)          => self.generics(&s.generics),\n-            clean::EnumItem(ref e)            => self.generics(&e.generics),\n-            clean::FunctionItem(ref f)        => self.generics(&f.generics),\n-            clean::TypedefItem(ref t, _)      => self.generics(&t.generics),\n-            clean::TraitItem(ref t)           => self.generics(&t.generics),\n-            clean::ImplItem(ref i)            => self.generics(&i.generics),\n-            clean::TyMethodItem(ref i)        => self.generics(&i.generics),\n-            clean::MethodItem(ref i)          => self.generics(&i.generics),\n-            clean::ForeignFunctionItem(ref f) => self.generics(&f.generics),\n-            _ => {}\n+        if let Some(generics) = item.inner.generics() {\n+            self.generics(generics);\n         }\n \n         if !self.seen_mod {"}]}