{"sha": "384dd53641a2d6b025c5d90805c9f839ac4adb51", "node_id": "C_kwDOAAsO6NoAKDM4NGRkNTM2NDFhMmQ2YjAyNWM1ZDkwODA1YzlmODM5YWM0YWRiNTE", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-24T00:31:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-24T00:31:46Z"}, "message": "Rollup merge of #89184 - joshtriplett:master, r=estebank\n\nTemporarily rename int_roundings functions to avoid conflicts\n\nThese functions are unstable, but because they're inherent they still\nintroduce conflicts with stable trait functions in crates. Temporarily\nrename them to fix these conflicts, until we can resolve those conflicts\nin a better way.", "tree": {"sha": "60cf3ce3fefc8bf452e98dbb8a20cc3370f82488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60cf3ce3fefc8bf452e98dbb8a20cc3370f82488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384dd53641a2d6b025c5d90805c9f839ac4adb51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhTRxyCRBK7hj4Ov3rIwAAw9wIAA5vrtcjPO5C2j87vwbsB1f+\nMXnqvvqlf7MWvCQBLwyvlM/emt12FWjI1f+NTh7fphwQOTLWG/uTVaZxa+lk4fq9\nf0kBAs2NsOQ5AaJ/Q/SkvV66aAhwgEgacd58YBDqfskW3caGX9pDKJ0zbfsOtfQj\nA/zQU/scu+8qUnEyKaaan66SwENI/XfvLxCV2FlBNV8HHM9rNaNEqYoiad+6Es3e\n64+PWfgqgbUtMtrCYU06/r+BWYS3RoOsKN1t1T1rUAYmLHqh9G5E8/nopIRxsop+\nkbAKbK4mpRkk9zBSqaxl5N2yNTJ8uOY0TC4tsF0ykVtqvbyelB1dNccy+WBf0nc=\n=uaGf\n-----END PGP SIGNATURE-----\n", "payload": "tree 60cf3ce3fefc8bf452e98dbb8a20cc3370f82488\nparent a071193826535ccb88f8c40420102a2caf56ee01\nparent 3ece63b64e192146fcdd1724e25856a93d7626aa\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1632443506 -0700\ncommitter GitHub <noreply@github.com> 1632443506 -0700\n\nRollup merge of #89184 - joshtriplett:master, r=estebank\n\nTemporarily rename int_roundings functions to avoid conflicts\n\nThese functions are unstable, but because they're inherent they still\nintroduce conflicts with stable trait functions in crates. Temporarily\nrename them to fix these conflicts, until we can resolve those conflicts\nin a better way.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384dd53641a2d6b025c5d90805c9f839ac4adb51", "html_url": "https://github.com/rust-lang/rust/commit/384dd53641a2d6b025c5d90805c9f839ac4adb51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384dd53641a2d6b025c5d90805c9f839ac4adb51/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a071193826535ccb88f8c40420102a2caf56ee01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a071193826535ccb88f8c40420102a2caf56ee01", "html_url": "https://github.com/rust-lang/rust/commit/a071193826535ccb88f8c40420102a2caf56ee01"}, {"sha": "3ece63b64e192146fcdd1724e25856a93d7626aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ece63b64e192146fcdd1724e25856a93d7626aa", "html_url": "https://github.com/rust-lang/rust/commit/3ece63b64e192146fcdd1724e25856a93d7626aa"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "daef5c98967cc4cfe1ca9058da04ff97725a25f3", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/384dd53641a2d6b025c5d90805c9f839ac4adb51/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384dd53641a2d6b025c5d90805c9f839ac4adb51/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=384dd53641a2d6b025c5d90805c9f839ac4adb51", "patch": "@@ -1849,17 +1849,17 @@ macro_rules! int_impl {\n         #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n         /// let b = 3;\n         ///\n-        /// assert_eq!(a.div_floor(b), 2);\n-        /// assert_eq!(a.div_floor(-b), -3);\n-        /// assert_eq!((-a).div_floor(b), -3);\n-        /// assert_eq!((-a).div_floor(-b), 2);\n+        /// assert_eq!(a.unstable_div_floor(b), 2);\n+        /// assert_eq!(a.unstable_div_floor(-b), -3);\n+        /// assert_eq!((-a).unstable_div_floor(b), -3);\n+        /// assert_eq!((-a).unstable_div_floor(-b), 2);\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn div_floor(self, rhs: Self) -> Self {\n+        pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if (r > 0 && rhs < 0) || (r < 0 && rhs > 0) {\n@@ -1884,17 +1884,17 @@ macro_rules! int_impl {\n         #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n         /// let b = 3;\n         ///\n-        /// assert_eq!(a.div_ceil(b), 3);\n-        /// assert_eq!(a.div_ceil(-b), -2);\n-        /// assert_eq!((-a).div_ceil(b), -2);\n-        /// assert_eq!((-a).div_ceil(-b), 3);\n+        /// assert_eq!(a.unstable_div_ceil(b), 3);\n+        /// assert_eq!(a.unstable_div_ceil(-b), -2);\n+        /// assert_eq!((-a).unstable_div_ceil(b), -2);\n+        /// assert_eq!((-a).unstable_div_ceil(-b), 3);\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn div_ceil(self, rhs: Self) -> Self {\n+        pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if (r > 0 && rhs > 0) || (r < 0 && rhs < 0) {\n@@ -1919,21 +1919,21 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n-        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(-8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(-8), -24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").unstable_next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").unstable_next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").unstable_next_multiple_of(-8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").unstable_next_multiple_of(-8), -24);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n+        pub const fn unstable_next_multiple_of(self, rhs: Self) -> Self {\n             // This would otherwise fail when calculating `r` when self == T::MIN.\n             if rhs == -1 {\n                 return self;"}, {"sha": "8ce826626309147f7c2ace97f2ca3f975cd8305e", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/384dd53641a2d6b025c5d90805c9f839ac4adb51/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384dd53641a2d6b025c5d90805c9f839ac4adb51/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=384dd53641a2d6b025c5d90805c9f839ac4adb51", "patch": "@@ -1859,12 +1859,12 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_floor(4), 1);\")]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_floor(4), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn div_floor(self, rhs: Self) -> Self {\n+        pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n             self / rhs\n         }\n \n@@ -1880,12 +1880,12 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_ceil(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_ceil(4), 2);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn div_ceil(self, rhs: Self) -> Self {\n+        pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if r > 0 && rhs > 0 {\n@@ -1908,15 +1908,15 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 24);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n+        pub const fn unstable_next_multiple_of(self, rhs: Self) -> Self {\n             match self % rhs {\n                 0 => self,\n                 r => self + (rhs - r)"}, {"sha": "0ad85bf6d943d1d254ef0f34a0d0a348b8b0108c", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/384dd53641a2d6b025c5d90805c9f839ac4adb51/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384dd53641a2d6b025c5d90805c9f839ac4adb51/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=384dd53641a2d6b025c5d90805c9f839ac4adb51", "patch": "@@ -294,33 +294,33 @@ macro_rules! int_module {\n             fn test_div_floor() {\n                 let a: $T = 8;\n                 let b = 3;\n-                assert_eq!(a.div_floor(b), 2);\n-                assert_eq!(a.div_floor(-b), -3);\n-                assert_eq!((-a).div_floor(b), -3);\n-                assert_eq!((-a).div_floor(-b), 2);\n+                assert_eq!(a.unstable_div_floor(b), 2);\n+                assert_eq!(a.unstable_div_floor(-b), -3);\n+                assert_eq!((-a).unstable_div_floor(b), -3);\n+                assert_eq!((-a).unstable_div_floor(-b), 2);\n             }\n \n             #[test]\n             fn test_div_ceil() {\n                 let a: $T = 8;\n                 let b = 3;\n-                assert_eq!(a.div_ceil(b), 3);\n-                assert_eq!(a.div_ceil(-b), -2);\n-                assert_eq!((-a).div_ceil(b), -2);\n-                assert_eq!((-a).div_ceil(-b), 3);\n+                assert_eq!(a.unstable_div_ceil(b), 3);\n+                assert_eq!(a.unstable_div_ceil(-b), -2);\n+                assert_eq!((-a).unstable_div_ceil(b), -2);\n+                assert_eq!((-a).unstable_div_ceil(-b), 3);\n             }\n \n             #[test]\n             fn test_next_multiple_of() {\n-                assert_eq!((16 as $T).next_multiple_of(8), 16);\n-                assert_eq!((23 as $T).next_multiple_of(8), 24);\n-                assert_eq!((16 as $T).next_multiple_of(-8), 16);\n-                assert_eq!((23 as $T).next_multiple_of(-8), 16);\n-                assert_eq!((-16 as $T).next_multiple_of(8), -16);\n-                assert_eq!((-23 as $T).next_multiple_of(8), -16);\n-                assert_eq!((-16 as $T).next_multiple_of(-8), -16);\n-                assert_eq!((-23 as $T).next_multiple_of(-8), -24);\n-                assert_eq!(MIN.next_multiple_of(-1), MIN);\n+                assert_eq!((16 as $T).unstable_next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).unstable_next_multiple_of(8), 24);\n+                assert_eq!((16 as $T).unstable_next_multiple_of(-8), 16);\n+                assert_eq!((23 as $T).unstable_next_multiple_of(-8), 16);\n+                assert_eq!((-16 as $T).unstable_next_multiple_of(8), -16);\n+                assert_eq!((-23 as $T).unstable_next_multiple_of(8), -16);\n+                assert_eq!((-16 as $T).unstable_next_multiple_of(-8), -16);\n+                assert_eq!((-23 as $T).unstable_next_multiple_of(-8), -24);\n+                assert_eq!(MIN.unstable_next_multiple_of(-1), MIN);\n             }\n \n             #[test]"}, {"sha": "35ec88c6af7d6873396354bed9154eb2732310f7", "filename": "library/core/tests/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/384dd53641a2d6b025c5d90805c9f839ac4adb51/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384dd53641a2d6b025c5d90805c9f839ac4adb51/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=384dd53641a2d6b025c5d90805c9f839ac4adb51", "patch": "@@ -208,19 +208,19 @@ macro_rules! uint_module {\n \n             #[test]\n             fn test_div_floor() {\n-                assert_eq!((8 as $T).div_floor(3), 2);\n+                assert_eq!((8 as $T).unstable_div_floor(3), 2);\n             }\n \n             #[test]\n             fn test_div_ceil() {\n-                assert_eq!((8 as $T).div_ceil(3), 3);\n+                assert_eq!((8 as $T).unstable_div_ceil(3), 3);\n             }\n \n             #[test]\n             fn test_next_multiple_of() {\n-                assert_eq!((16 as $T).next_multiple_of(8), 16);\n-                assert_eq!((23 as $T).next_multiple_of(8), 24);\n-                assert_eq!(MAX.next_multiple_of(1), MAX);\n+                assert_eq!((16 as $T).unstable_next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).unstable_next_multiple_of(8), 24);\n+                assert_eq!(MAX.unstable_next_multiple_of(1), MAX);\n             }\n \n             #[test]"}]}