{"sha": "6bce6acebb9b62791034e821e6215f53a8bf2002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiY2U2YWNlYmI5YjYyNzkxMDM0ZTgyMWU2MjE1ZjUzYThiZjIwMDI=", "commit": {"author": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2017-12-17T10:19:43Z"}, "committer": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2017-12-18T16:39:05Z"}, "message": "libcore/num/mod.rs: simplify the int_impl! macro.\n\nWe can simply use generic intrinsics since cd1848a1a6\n\nAlso, minimize unsafe blocks.\n\nSigned-off-by: NODA, Kai <nodakai@gmail.com>", "tree": {"sha": "e307f232af70a3a72f31aa7a83fd5cf5a242e3b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e307f232af70a3a72f31aa7a83fd5cf5a242e3b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bce6acebb9b62791034e821e6215f53a8bf2002", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJGBAABCgAwFiEEvRZ2+uz7foVLF3BQRCRPONk8a34FAlo37ykSHG5vZGFrYWlA\nZ21haWwuY29tAAoJEEQkTzjZPGt+qvcP/3plbDf40aZWAJvYPuQhL1Rsp7/vcfqz\njoBxpMmtSmnFronHbfirZe+s9PZHiCa3AesfCIVpbv65zpLRjh47817EiX6TKQAe\ntlswloL+9Xt5/rOPaZalO3EOLRDkPhCuSCZkGavilGfZZRtgGZ3m3+lW/pz5HsH5\niy0ZGPHio8Up+pd3wzgJodtx0OQzCBmbtz+10lPBp/MVdEEkOvnKYeSOqXWTAbzH\nnXokutffsUrySCLu4Kd+jpDYv+whMIUEsr5L33RfPkOLT08qn+BvcO1zEd2QysYl\n1CO6J9jPCDndvg1tRAHH3GG1igctOAFv/LOqoH1TNhPcYRPc5YUaZ/z6yH6GLm//\nb9spznz4dO25CL2oyzpoqcPWhwny96mjfTvtICiOTIP2G+Sj3k/sw2HV5UbovxPO\n4+HBx8RrO5ZPyCcgszXJD6CXZtptQqkMg+SNJV5bcte4njdvbxZo8XLeqedle3Mh\nOa24YJONxuhv9LZcRWWiD+udYLy1Nfu05U3NaO/9BemceAKUh6UnYe/b2G/8TwIq\n+4ZzJBwl0ECLvpGIukH4I13MO5a6MeRPJ67qlJnaptlMSeU3cpMXYBPFCTqU20y3\nj3xTRuDEH5lXEhICRTv8UO9HdZKg0pZeu5mPC0QA4Wc05PTrZGtUF3IJcZZxnNJO\nMnutC7431IM7\n=XfsA\n-----END PGP SIGNATURE-----", "payload": "tree e307f232af70a3a72f31aa7a83fd5cf5a242e3b6\nparent a3a7203e2c9ed30a501da86f3fa1f9efe707ac94\nauthor NODA, Kai <nodakai@gmail.com> 1513505983 +0800\ncommitter NODA, Kai <nodakai@gmail.com> 1513615145 +0800\n\nlibcore/num/mod.rs: simplify the int_impl! macro.\n\nWe can simply use generic intrinsics since cd1848a1a6\n\nAlso, minimize unsafe blocks.\n\nSigned-off-by: NODA, Kai <nodakai@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bce6acebb9b62791034e821e6215f53a8bf2002", "html_url": "https://github.com/rust-lang/rust/commit/6bce6acebb9b62791034e821e6215f53a8bf2002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bce6acebb9b62791034e821e6215f53a8bf2002/comments", "author": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94", "html_url": "https://github.com/rust-lang/rust/commit/a3a7203e2c9ed30a501da86f3fa1f9efe707ac94"}], "stats": {"total": 203, "additions": 52, "deletions": 151}, "files": [{"sha": "00f36ca0f79e10afbc3506df6be7396defd01229", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 52, "deletions": 151, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/6bce6acebb9b62791034e821e6215f53a8bf2002/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bce6acebb9b62791034e821e6215f53a8bf2002/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6bce6acebb9b62791034e821e6215f53a8bf2002", "patch": "@@ -98,10 +98,7 @@ pub mod diy_float;\n \n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n-    ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr,\n-     $add_with_overflow:path,\n-     $sub_with_overflow:path,\n-     $mul_with_overflow:path) => {\n+    ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr) => {\n         /// Returns the smallest value that can be represented by this integer type.\n         ///\n         /// # Examples\n@@ -862,11 +859,11 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $add_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::add_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates `self` - `rhs`\n@@ -888,11 +885,11 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $sub_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::sub_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates the multiplication of `self` and `rhs`.\n@@ -912,11 +909,11 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $mul_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::mul_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates the divisor when `self` is divided by `rhs`.\n@@ -1204,82 +1201,50 @@ macro_rules! int_impl {\n \n #[lang = \"i8\"]\n impl i8 {\n-    int_impl! { i8, i8, u8, 8,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i8, i8, u8, 8 }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    int_impl! { i16, i16, u16, 16,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i16, i16, u16, 16 }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    int_impl! { i32, i32, u32, 32,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i32, i32, u32, 32 }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n-    int_impl! { i64, i64, u64, 64,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i64, i64, u64, 64 }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n-    int_impl! { i128, i128, u128, 128,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { i128, i128, u128, 128 }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, u16, 16,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { isize, i16, u16, 16 }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, u32, 32,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { isize, i32, u32, 32 }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i64, u64, 64,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    int_impl! { isize, i64, u64, 64 }\n }\n \n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ty, $BITS:expr,\n-     $ctpop:path,\n-     $ctlz:path,\n-     $ctlz_nonzero:path,\n-     $cttz:path,\n-     $bswap:path,\n-     $add_with_overflow:path,\n-     $sub_with_overflow:path,\n-     $mul_with_overflow:path) => {\n+    ($SelfT:ty, $ActualT:ty, $BITS:expr) => {\n         /// Returns the smallest value that can be represented by this integer type.\n         ///\n         /// # Examples\n@@ -1343,7 +1308,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn count_ones(self) -> u32 {\n-            unsafe { $ctpop(self as $ActualT) as u32 }\n+            unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n         }\n \n         /// Returns the number of zeros in the binary representation of `self`.\n@@ -1378,7 +1343,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn leading_zeros(self) -> u32 {\n-            unsafe { $ctlz(self as $ActualT) as u32 }\n+            unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n         }\n \n         /// Returns the number of trailing zeros in the binary representation\n@@ -1474,7 +1439,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn swap_bytes(self) -> Self {\n-            unsafe { $bswap(self as $ActualT) as Self }\n+            unsafe { intrinsics::bswap(self as $ActualT) as Self }\n         }\n \n         /// Converts an integer from big endian to the target's endianness.\n@@ -1978,11 +1943,11 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $add_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::add_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates `self` - `rhs`\n@@ -2004,11 +1969,11 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $sub_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::sub_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates the multiplication of `self` and `rhs`.\n@@ -2028,11 +1993,11 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         pub fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n-            unsafe {\n-                let (a, b) = $mul_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT);\n-                (a as Self, b)\n-            }\n+            let (a, b) = unsafe {\n+                intrinsics::mul_with_overflow(self as $ActualT,\n+                                              rhs as $ActualT)\n+            };\n+            (a as Self, b)\n         }\n \n         /// Calculates the divisor when `self` is divided by `rhs`.\n@@ -2217,7 +2182,7 @@ macro_rules! uint_impl {\n             // (such as intel pre-haswell) have more efficient ctlz\n             // intrinsics when the argument is non-zero.\n             let p = self - 1;\n-            let z = unsafe { $ctlz_nonzero(p) };\n+            let z = unsafe { intrinsics::ctlz_nonzero(p) };\n             <$SelfT>::max_value() >> z\n         }\n \n@@ -2264,15 +2229,7 @@ macro_rules! uint_impl {\n \n #[lang = \"u8\"]\n impl u8 {\n-    uint_impl! { u8, u8, 8,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u8, u8, 8 }\n \n \n     /// Checks if the value is within the ASCII range.\n@@ -2818,95 +2775,39 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    uint_impl! { u16, u16, 16,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u16, u16, 16 }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    uint_impl! { u32, u32, 32,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u32, u32, 32 }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    uint_impl! { u64, u64, 64,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u64, u64, 64 }\n }\n \n #[lang = \"u128\"]\n impl u128 {\n-    uint_impl! { u128, u128, 128,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { u128, u128, 128 }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u16, 16,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { usize, u16, 16 }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u32, 32,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { usize, u32, 32 }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u64, 64,\n-        intrinsics::ctpop,\n-        intrinsics::ctlz,\n-        intrinsics::ctlz_nonzero,\n-        intrinsics::cttz,\n-        intrinsics::bswap,\n-        intrinsics::add_with_overflow,\n-        intrinsics::sub_with_overflow,\n-        intrinsics::mul_with_overflow }\n+    uint_impl! { usize, u64, 64 }\n }\n \n /// A classification of floating point numbers."}]}