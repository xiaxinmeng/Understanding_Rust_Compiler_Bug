{"sha": "75b62757e460a1512a9860a32bd1c9138bcf101f", "node_id": "C_kwDOAAsO6NoAKDc1YjYyNzU3ZTQ2MGExNTEyYTk4NjBhMzJiZDFjOTEzOGJjZjEwMWY", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-16T01:46:28Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-13T17:09:15Z"}, "message": "Reduce verbosity when calling `for`-loop on non-`Iterator` expression", "tree": {"sha": "6e3649437c0d2bd14d1bd137b37217b634e11af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e3649437c0d2bd14d1bd137b37217b634e11af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b62757e460a1512a9860a32bd1c9138bcf101f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b62757e460a1512a9860a32bd1c9138bcf101f", "html_url": "https://github.com/rust-lang/rust/commit/75b62757e460a1512a9860a32bd1c9138bcf101f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b62757e460a1512a9860a32bd1c9138bcf101f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7227a87371f2e6c394d7a79905347fef3c249a63", "url": "https://api.github.com/repos/rust-lang/rust/commits/7227a87371f2e6c394d7a79905347fef3c249a63", "html_url": "https://github.com/rust-lang/rust/commit/7227a87371f2e6c394d7a79905347fef3c249a63"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "b6b88f6e551739860cca833f835a528099272886", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b62757e460a1512a9860a32bd1c9138bcf101f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b62757e460a1512a9860a32bd1c9138bcf101f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=75b62757e460a1512a9860a32bd1c9138bcf101f", "patch": "@@ -350,6 +350,8 @@ pub enum ObligationCauseCode<'tcx> {\n \n     AwaitableExpr,\n \n+    ForLoopIterator,\n+\n     /// Well-formed checking. If a `WellFormedLoc` is provided,\n     /// then it will be used to eprform HIR-based wf checking\n     /// after an error occurs, in order to generate a more precise error span."}, {"sha": "20e0631b66bf71e85ca2f0d9ccf98afa81000202", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75b62757e460a1512a9860a32bd1c9138bcf101f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b62757e460a1512a9860a32bd1c9138bcf101f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=75b62757e460a1512a9860a32bd1c9138bcf101f", "patch": "@@ -887,8 +887,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let span = obligation.cause.span;\n \n         if let ObligationCauseCode::AwaitableExpr = obligation.cause.code {\n-            // FIXME: use `trait_ref.self_ty().no_bound_vars()` to typecheck if `()` and if not\n-            // maybe suggest returning instead?\n+            // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n+            // and if not maybe suggest doing something else? If we kept the expression around we\n+            // could also check if it is an fn call (very likely) and suggest changing *that*, if\n+            // it is from the local crate.\n             err.span_suggestion_verbose(\n                 span,\n                 \"do not `.await` the expression\",\n@@ -1961,6 +1963,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::ReturnValue(_)\n             | ObligationCauseCode::BlockTailExpression(_)\n             | ObligationCauseCode::AwaitableExpr\n+            | ObligationCauseCode::ForLoopIterator\n             | ObligationCauseCode::LetElse => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");"}, {"sha": "f51ab140a256c868b205aa7dfdc7b20dfaed478d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b62757e460a1512a9860a32bd1c9138bcf101f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b62757e460a1512a9860a32bd1c9138bcf101f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=75b62757e460a1512a9860a32bd1c9138bcf101f", "patch": "@@ -810,8 +810,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             &substs,\n             match lang_item {\n                 hir::LangItem::FuturePoll => ObligationCauseCode::AwaitableExpr,\n-                // FIXME: see if there are other obligation specializations we could do here beyond\n-                // what we do above for `.await`.\n+                hir::LangItem::IntoIterIntoIter => ObligationCauseCode::ForLoopIterator,\n+                // FIXME: This could also be used for `?`.  See if there are others.\n                 _ => traits::ItemObligation(def_id),\n             },\n         );"}, {"sha": "c6650d60c21e97371bf7d0614276a88c5eb47022", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b62757e460a1512a9860a32bd1c9138bcf101f/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75b62757e460a1512a9860a32bd1c9138bcf101f/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=75b62757e460a1512a9860a32bd1c9138bcf101f", "patch": "@@ -16,10 +16,10 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n   --> $DIR/issue-33941.rs:4:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found tuple\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n-   = note: expected reference `&_`\n-                  found tuple `(&_, &_)`\n+   = note:  expected tuple `(&_, &_)`\n+           found reference `&_`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n "}]}