{"sha": "1020ed3d5012346fd47bd66c96863354d146cab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMjBlZDNkNTAxMjM0NmZkNDdiZDY2Yzk2ODYzMzU0ZDE0NmNhYjg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-01T06:07:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-01T06:07:35Z"}, "message": "Rollup merge of #82532 - pnkfelix:rustbuild-print-step-rusage, r=Mark-Simulacrum\n\nAdd `build.print_step_rusage` to config.toml\n\nAdds `build.print_step_rusage` to config.toml, which is meant to be an easy way to let compiler developers get feedback on the terminal during bootstrap about resource usage during each step.\n\nThe output is piggy-backed on `[PRINT-STEP-TIMINGS]`, mostly because the functionality seemed to naturally fit there in the overall control-flow and output structure (even if very little is shared between the implementations themselves).\n\nSome sample output (from my Linux box, where I believe the `max rss` output to be somewhat trust-worthy...):\n\n```\n[...]\n   Compiling regex v1.4.3\n[RUSTC-TIMING] tempfile test:false 0.323 user: 1.418662 sys: 0.81767 max rss (kb): 182084 page reclaims: 26615 page faults: 0 fs block inputs: 0 fs block outputs: 2160 voluntary ctxt switches: 798 involuntary ctxt switches: 131\n   Completed tempfile v3.1.0 in 0.3s\n[RUSTC-TIMING] chalk_ir test:false 1.890 user: 1.893603 sys: 0.99663 max rss (kb): 239432 page reclaims: 32107 page faults: 0 fs block inputs: 0 fs block outputs: 25008 voluntary ctxt switches: 108 involuntary ctxt switches: 183\n   Completed chalk-ir v0.55.0 in 1.9s\n   Compiling rustc_data_structures v0.0.0 (/home/pnkfelix/Dev/Rust/rust.git/compiler/rustc_data_structures)\n[RUSTC-TIMING] chrono test:false 1.244 user: 3.333198 sys: 0.134963 max rss (kb): 246612 page reclaims: 44857 page faults: 0 fs block inputs: 0 fs block outputs: 11704 voluntary ctxt switches: 1043 involuntary ctxt switches: 326\n   Completed chrono v0.4.15 in 1.3s\n[RUSTC-TIMING] rustc_rayon test:false 1.332 user: 1.763912 sys: 0.75996 max rss (kb): 239076 page reclaims: 35285 page faults: 0 fs block inputs: 0 fs block outputs: 19576 voluntary ctxt switches: 359 involuntary ctxt switches: 168\n   Completed rustc-rayon v0.3.0 in 1.3s\n   Compiling matchers v0.0.1\n[RUSTC-TIMING] matchers test:false 0.100 user: 0.94495 sys: 0.15119 max rss (kb): 140076 page reclaims: 8200 page faults: 0 fs block inputs: 0 fs block outputs: 392 voluntary ctxt switches: 43 involuntary ctxt switches: 12\n   Completed matchers v0.0.1 in 0.1s\n[...]\n```", "tree": {"sha": "0a3f1158ee9ba1417d6097725b5fbe2a1d6d4e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a3f1158ee9ba1417d6097725b5fbe2a1d6d4e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1020ed3d5012346fd47bd66c96863354d146cab8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPISnCRBK7hj4Ov3rIwAAdHIIAJ8kMDzeRRtMqmR4ijJcAw5L\nwlUnSTe9Z09SnE5yCf87YUqcjiYJHB5/XQXoQPmKSfCjDUWHO4BcPDgSuzIB/vS/\nWmHftttjBmWxKW5foIRVf/ncJH+HTS+yBL/Cmgz6DVpP2v6ON4oFVXSxscp1h3fB\njq9C1qZ47LAQOTsNOJe/hXc8hcJMIkw45QBP8Xe1AbHn7s2JSjOwgxAsiV3dre0Y\nU6r9zH96yAzOEdmfSh81FnuAR01tGL5fV7x8g+wfM9xZbleY/zKZNraCKPgjiUrq\nuj8LOwk0gl9/bQ8me7rMMOucunOOhXXsVNIiB7skVEIX1Bgb8C8M5EDmpt66il8=\n=Km1L\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a3f1158ee9ba1417d6097725b5fbe2a1d6d4e91\nparent a95c3f74b3c07d7ed3f11f322b5ee926c88bd521\nparent f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614578855 +0900\ncommitter GitHub <noreply@github.com> 1614578855 +0900\n\nRollup merge of #82532 - pnkfelix:rustbuild-print-step-rusage, r=Mark-Simulacrum\n\nAdd `build.print_step_rusage` to config.toml\n\nAdds `build.print_step_rusage` to config.toml, which is meant to be an easy way to let compiler developers get feedback on the terminal during bootstrap about resource usage during each step.\n\nThe output is piggy-backed on `[PRINT-STEP-TIMINGS]`, mostly because the functionality seemed to naturally fit there in the overall control-flow and output structure (even if very little is shared between the implementations themselves).\n\nSome sample output (from my Linux box, where I believe the `max rss` output to be somewhat trust-worthy...):\n\n```\n[...]\n   Compiling regex v1.4.3\n[RUSTC-TIMING] tempfile test:false 0.323 user: 1.418662 sys: 0.81767 max rss (kb): 182084 page reclaims: 26615 page faults: 0 fs block inputs: 0 fs block outputs: 2160 voluntary ctxt switches: 798 involuntary ctxt switches: 131\n   Completed tempfile v3.1.0 in 0.3s\n[RUSTC-TIMING] chalk_ir test:false 1.890 user: 1.893603 sys: 0.99663 max rss (kb): 239432 page reclaims: 32107 page faults: 0 fs block inputs: 0 fs block outputs: 25008 voluntary ctxt switches: 108 involuntary ctxt switches: 183\n   Completed chalk-ir v0.55.0 in 1.9s\n   Compiling rustc_data_structures v0.0.0 (/home/pnkfelix/Dev/Rust/rust.git/compiler/rustc_data_structures)\n[RUSTC-TIMING] chrono test:false 1.244 user: 3.333198 sys: 0.134963 max rss (kb): 246612 page reclaims: 44857 page faults: 0 fs block inputs: 0 fs block outputs: 11704 voluntary ctxt switches: 1043 involuntary ctxt switches: 326\n   Completed chrono v0.4.15 in 1.3s\n[RUSTC-TIMING] rustc_rayon test:false 1.332 user: 1.763912 sys: 0.75996 max rss (kb): 239076 page reclaims: 35285 page faults: 0 fs block inputs: 0 fs block outputs: 19576 voluntary ctxt switches: 359 involuntary ctxt switches: 168\n   Completed rustc-rayon v0.3.0 in 1.3s\n   Compiling matchers v0.0.1\n[RUSTC-TIMING] matchers test:false 0.100 user: 0.94495 sys: 0.15119 max rss (kb): 140076 page reclaims: 8200 page faults: 0 fs block inputs: 0 fs block outputs: 392 voluntary ctxt switches: 43 involuntary ctxt switches: 12\n   Completed matchers v0.0.1 in 0.1s\n[...]\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1020ed3d5012346fd47bd66c96863354d146cab8", "html_url": "https://github.com/rust-lang/rust/commit/1020ed3d5012346fd47bd66c96863354d146cab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1020ed3d5012346fd47bd66c96863354d146cab8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a95c3f74b3c07d7ed3f11f322b5ee926c88bd521", "url": "https://api.github.com/repos/rust-lang/rust/commits/a95c3f74b3c07d7ed3f11f322b5ee926c88bd521", "html_url": "https://github.com/rust-lang/rust/commit/a95c3f74b3c07d7ed3f11f322b5ee926c88bd521"}, {"sha": "f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7", "html_url": "https://github.com/rust-lang/rust/commit/f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "ba382aac828d4b139ddb382f62830addf4d74125", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1020ed3d5012346fd47bd66c96863354d146cab8/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/1020ed3d5012346fd47bd66c96863354d146cab8/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=1020ed3d5012346fd47bd66c96863354d146cab8", "patch": "@@ -290,6 +290,12 @@ changelog-seen = 2\n # tracking over time)\n #print-step-timings = false\n \n+# Print out resource usage data for each rustbuild step, as defined by the Unix\n+# struct rusage. (Note that this setting is completely unstable: the data it\n+# captures, what platforms it supports, the format of its associated output, and\n+# this setting's very existence, are all subject to change.)\n+#print-step-rusage = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "6b1be0ca09d0d8c2f9c28766c9988a73b78fa046", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1020ed3d5012346fd47bd66c96863354d146cab8/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1020ed3d5012346fd47bd66c96863354d146cab8/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=1020ed3d5012346fd47bd66c96863354d146cab8", "patch": "@@ -161,16 +161,24 @@ fn main() {\n         cmd.status().expect(&errmsg)\n     };\n \n-    if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some() {\n+    if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some()\n+        || env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").is_some()\n+    {\n         if let Some(crate_name) = crate_name {\n             let dur = start.elapsed();\n             let is_test = args.iter().any(|a| a == \"--test\");\n+            // If the user requested resource usage data, then\n+            // include that in addition to the timing output.\n+            let rusage_data =\n+                env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| format_rusage_data());\n             eprintln!(\n-                \"[RUSTC-TIMING] {} test:{} {}.{:03}\",\n+                \"[RUSTC-TIMING] {} test:{} {}.{:03}{}{}\",\n                 crate_name,\n                 is_test,\n                 dur.as_secs(),\n-                dur.subsec_millis()\n+                dur.subsec_millis(),\n+                if rusage_data.is_some() { \" \" } else { \"\" },\n+                rusage_data.unwrap_or(String::new()),\n             );\n         }\n     }\n@@ -198,3 +206,71 @@ fn main() {\n         }\n     }\n }\n+\n+#[cfg(not(unix))]\n+/// getrusage is not available on non-unix platforms. So for now, we do not\n+/// bother trying to make a shim for it.\n+fn format_rusage_data() -> Option<String> {\n+    None\n+}\n+\n+#[cfg(unix)]\n+/// Tries to build a string with human readable data for several of the rusage\n+/// fields. Note that we are focusing mainly on data that we believe to be\n+/// supplied on Linux (the `rusage` struct has other fields in it but they are\n+/// currently unsupported by Linux).\n+fn format_rusage_data() -> Option<String> {\n+    let rusage: libc::rusage = unsafe {\n+        let mut recv = std::mem::zeroed();\n+        // -1 is RUSAGE_CHILDREN, which means to get the rusage for all children\n+        // (and grandchildren, etc) processes that have respectively terminated\n+        // and been waited for.\n+        let retval = libc::getrusage(-1, &mut recv);\n+        if retval != 0 {\n+            return None;\n+        }\n+        recv\n+    };\n+    // Mac OS X reports the maxrss in bytes, not kb.\n+    let divisor = if env::consts::OS == \"macos\" { 1024 } else { 1 };\n+    let maxrss = rusage.ru_maxrss + (divisor - 1) / divisor;\n+\n+    let mut init_str = format!(\n+        \"user: {USER_SEC}.{USER_USEC:03} \\\n+         sys: {SYS_SEC}.{SYS_USEC:03} \\\n+         max rss (kb): {MAXRSS}\",\n+        USER_SEC = rusage.ru_utime.tv_sec,\n+        USER_USEC = rusage.ru_utime.tv_usec,\n+        SYS_SEC = rusage.ru_stime.tv_sec,\n+        SYS_USEC = rusage.ru_stime.tv_usec,\n+        MAXRSS = maxrss\n+    );\n+\n+    // The remaining rusage stats vary in platform support. So we treat\n+    // uniformly zero values in each category as \"not worth printing\", since it\n+    // either means no events of that type occurred, or that the platform\n+    // does not support it.\n+\n+    let minflt = rusage.ru_minflt;\n+    let majflt = rusage.ru_majflt;\n+    if minflt != 0 || majflt != 0 {\n+        init_str.push_str(&format!(\" page reclaims: {} page faults: {}\", minflt, majflt));\n+    }\n+\n+    let inblock = rusage.ru_inblock;\n+    let oublock = rusage.ru_oublock;\n+    if inblock != 0 || oublock != 0 {\n+        init_str.push_str(&format!(\" fs block inputs: {} fs block outputs: {}\", inblock, oublock));\n+    }\n+\n+    let nvcsw = rusage.ru_nvcsw;\n+    let nivcsw = rusage.ru_nivcsw;\n+    if nvcsw != 0 || nivcsw != 0 {\n+        init_str.push_str(&format!(\n+            \" voluntary ctxt switches: {} involuntary ctxt switches: {}\",\n+            nvcsw, nivcsw\n+        ));\n+    }\n+\n+    return Some(init_str);\n+}"}, {"sha": "4a7c1850dd3d59e40f0499484c04863359518585", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1020ed3d5012346fd47bd66c96863354d146cab8/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1020ed3d5012346fd47bd66c96863354d146cab8/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1020ed3d5012346fd47bd66c96863354d146cab8", "patch": "@@ -1265,6 +1265,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_PRINT_STEP_TIMINGS\", \"1\");\n         }\n \n+        if self.config.print_step_rusage {\n+            cargo.env(\"RUSTC_PRINT_STEP_RUSAGE\", \"1\");\n+        }\n+\n         if self.config.backtrace_on_ice {\n             cargo.env(\"RUSTC_BACKTRACE_ON_ICE\", \"1\");\n         }"}, {"sha": "b2af8e59b7c9fcb5e0ed4eda2117b912d2f64792", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1020ed3d5012346fd47bd66c96863354d146cab8/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1020ed3d5012346fd47bd66c96863354d146cab8/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1020ed3d5012346fd47bd66c96863354d146cab8", "patch": "@@ -161,6 +161,7 @@ pub struct Config {\n     pub verbose_tests: bool,\n     pub save_toolstates: Option<PathBuf>,\n     pub print_step_timings: bool,\n+    pub print_step_rusage: bool,\n     pub missing_tools: bool,\n \n     // Fallback musl-root for all targets\n@@ -380,6 +381,7 @@ struct Build {\n     configure_args: Option<Vec<String>>,\n     local_rebuild: Option<bool>,\n     print_step_timings: Option<bool>,\n+    print_step_rusage: Option<bool>,\n     check_stage: Option<u32>,\n     doc_stage: Option<u32>,\n     build_stage: Option<u32>,\n@@ -679,6 +681,7 @@ impl Config {\n         set(&mut config.configure_args, build.configure_args);\n         set(&mut config.local_rebuild, build.local_rebuild);\n         set(&mut config.print_step_timings, build.print_step_timings);\n+        set(&mut config.print_step_rusage, build.print_step_rusage);\n \n         // See https://github.com/rust-lang/compiler-team/issues/326\n         config.stage = match config.cmd {"}]}