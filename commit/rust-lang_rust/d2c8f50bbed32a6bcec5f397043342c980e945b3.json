{"sha": "d2c8f50bbed32a6bcec5f397043342c980e945b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYzhmNTBiYmVkMzJhNmJjZWM1ZjM5NzA0MzM0MmM5ODBlOTQ1YjM=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-09T13:06:12Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-09T13:06:12Z"}, "message": "Rename `is_allowed` -> `is_lint_allowed`", "tree": {"sha": "095eec4d8b4442a221765ffd451f4c39d88043c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095eec4d8b4442a221765ffd451f4c39d88043c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c8f50bbed32a6bcec5f397043342c980e945b3", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmDoSeIACgkQHKDfKvWd\naKVHFBAAhSBARRL+zKQCd2EksWljAJgLhC4nBf1G9S05iqhnmLzP61ewakDqbckB\n8XV9WRpisfAOK+r/Gx0X4zedBWZZwhv+Fla7D4hA9HxQLgSIx4o/P1V8akNIMKrL\n93WAYJ35gGtsirPtApXzbd7Qg49mTbB7tn1ouAT6uZf/5pvJfTV6NWtKbGKZEquQ\nrT2uUrhjmNVQ1bxCwBi8QiJ3sF2yW04X86Wtb5XFYtGQoWQL7UESuUelHl25/4Dd\nJ8bluxYIwiVNsygh1WzPr2+OglZ0t8/BZNG35bRjqDeizmjck68COhO+tmyXwCXN\n24T1nniLJ/eUdO2pzm3E7DQmL3lidR1lt2OaHOPXxbcUXa+xu9R3Nj5eoWQmIX5O\n0WkMYo5WN6e/jB2r0hjY4B2juessUgpAq0oSU8QZpME9Ykjw9M8BKvqd81cYLV4u\nucI07+SAkFkvR5jziM1NBUtzL/rq8I1PIjmjGVuSh+O1jwmFge5A5c3MlJgsedjs\nPYvOo/bGnaa9ful9x39/UfxCru8vSDZvoB13mClKz/sSnukjM9gekh0rY6KUnqCu\nhmmYZUftnoQb7F4WXn08GAeiEZaIerHyIB6KEZi8RV7uw8m6WyHDc2G71DSspJZ3\nmod5R+bp33+daBPZQmAuUWwx7zp+ayvMzeZ9BQcR83zcs+xR578=\n=01XA\n-----END PGP SIGNATURE-----", "payload": "tree 095eec4d8b4442a221765ffd451f4c39d88043c1\nparent 5add651223a8d3ba8e2efccf942f9013d2f270a1\nauthor flip1995 <philipp.krones@embecosm.com> 1625835972 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1625835972 +0200\n\nRename `is_allowed` -> `is_lint_allowed`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c8f50bbed32a6bcec5f397043342c980e945b3", "html_url": "https://github.com/rust-lang/rust/commit/d2c8f50bbed32a6bcec5f397043342c980e945b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c8f50bbed32a6bcec5f397043342c980e945b3/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5add651223a8d3ba8e2efccf942f9013d2f270a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5add651223a8d3ba8e2efccf942f9013d2f270a1", "html_url": "https://github.com/rust-lang/rust/commit/5add651223a8d3ba8e2efccf942f9013d2f270a1"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "21c7b2448cec8dffdc714d22e628b1e1d801e6df", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -2,7 +2,7 @@\n \n use std::path::PathBuf;\n \n-use clippy_utils::{diagnostics::span_lint, is_allowed};\n+use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -84,7 +84,7 @@ fn is_empty_vec(value: &[String]) -> bool {\n \n impl LateLintPass<'_> for CargoCommonMetadata {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if is_allowed(cx, CARGO_COMMON_METADATA, CRATE_HIR_ID) {\n+        if is_lint_allowed(cx, CARGO_COMMON_METADATA, CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "aea1accccc6581838f8710390682d8cda33f3819", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n use clippy_utils::{\n-    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, is_allowed,\n-    is_else_clause, search_same, ContainsName, SpanlessEq, SpanlessHash,\n+    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, is_else_clause,\n+    is_lint_allowed, search_same, ContainsName, SpanlessEq, SpanlessHash,\n };\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n@@ -337,8 +337,8 @@ fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> Option<\n             if block_expr_eq;\n             if l_stmts.len() == r_stmts.len();\n             if l_stmts.len() == current_start_eq;\n-            if !is_allowed(cx, IF_SAME_THEN_ELSE, win[0].hir_id);\n-            if !is_allowed(cx, IF_SAME_THEN_ELSE, win[1].hir_id);\n+            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, win[0].hir_id);\n+            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, win[1].hir_id);\n             then {\n                 span_lint_and_note(\n                     cx,"}, {"sha": "682003f9c2c4c99d71d8bccb329b9409ed48d0bf", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::peel_mid_ty_refs;\n-use clippy_utils::{get_parent_node, in_macro, is_allowed};\n+use clippy_utils::{get_parent_node, in_macro, is_lint_allowed};\n use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, HirId, MatchSource, Mutability, Node, UnOp};\n@@ -107,7 +107,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n \n                 match kind {\n                     RefOp::Method(target_mut)\n-                        if !is_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n+                        if !is_lint_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n                             && is_linted_explicit_deref_position(parent, expr.hir_id, expr.span) =>\n                     {\n                         self.state = Some(("}, {"sha": "7aafaf71383011a93c298bf5d7b5931616264344", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_then};\n use clippy_utils::paths;\n use clippy_utils::ty::{implements_trait, is_copy};\n-use clippy_utils::{get_trait_def_id, is_allowed, is_automatically_derived, match_def_path};\n+use clippy_utils::{get_trait_def_id, is_automatically_derived, is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n@@ -362,7 +362,7 @@ fn check_unsafe_derive_deserialize<'tcx>(\n         if let ty::Adt(def, _) = ty.kind();\n         if let Some(local_def_id) = def.did.as_local();\n         let adt_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_def_id);\n-        if !is_allowed(cx, UNSAFE_DERIVE_DESERIALIZE, adt_hir_id);\n+        if !is_lint_allowed(cx, UNSAFE_DERIVE_DESERIALIZE, adt_hir_id);\n         if cx.tcx.inherent_impls(def.did)\n             .iter()\n             .map(|imp_did| item_from_def_id(cx, *imp_did))"}, {"sha": "9641784eb9a27cbec1dd95e5886e417d0fb3b7a4", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1,7 +1,7 @@\n //! lint on inherent implementations\n \n use clippy_utils::diagnostics::span_lint_and_note;\n-use clippy_utils::{in_macro, is_allowed};\n+use clippy_utils::{in_macro, is_lint_allowed};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{def_id::LocalDefId, Crate, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -59,7 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             .filter(|(&id, impls)| {\n                 impls.len() > 1\n                     // Check for `#[allow]` on the type definition\n-                    && !is_allowed(\n+                    && !is_lint_allowed(\n                         cx,\n                         MULTIPLE_INHERENT_IMPL,\n                         cx.tcx.hir().local_def_id_to_hir_id(id),\n@@ -123,7 +123,7 @@ fn get_impl_span(cx: &LateContext<'_>, id: LocalDefId) -> Option<Span> {\n         ..\n     }) = cx.tcx.hir().get(id)\n     {\n-        (!in_macro(span) && impl_item.generics.params.is_empty() && !is_allowed(cx, MULTIPLE_INHERENT_IMPL, id))\n+        (!in_macro(span) && impl_item.generics.params.is_empty() && !is_lint_allowed(cx, MULTIPLE_INHERENT_IMPL, id))\n             .then(|| span)\n     } else {\n         None"}, {"sha": "892b3af0b32036b3d711d80c85b5d37d35c54c1b", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{get_item_name, get_parent_as_impl, is_allowed};\n+use clippy_utils::{get_item_name, get_parent_as_impl, is_lint_allowed};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -139,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if let Some(ty_id) = cx.qpath_res(ty_path, imp.self_ty.hir_id).opt_def_id();\n             if let Some(local_id) = ty_id.as_local();\n             let ty_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_id);\n-            if !is_allowed(cx, LEN_WITHOUT_IS_EMPTY, ty_hir_id);\n+            if !is_lint_allowed(cx, LEN_WITHOUT_IS_EMPTY, ty_hir_id);\n             if let Some(output) = parse_len_output(cx, cx.tcx.fn_sig(item.def_id).skip_binder());\n             then {\n                 let (name, kind) = match cx.tcx.hir().find(ty_hir_id) {"}, {"sha": "563d5cdb5fb568046dfb447e2c5db8ee6626fe4a", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::ty::{is_type_diagnostic_item, peel_mid_ty_refs_is_mutable};\n use clippy_utils::{\n-    can_move_expr_to_closure, in_constant, is_allowed, is_else_clause, is_lang_ctor, path_to_local_id,\n+    can_move_expr_to_closure, in_constant, is_else_clause, is_lang_ctor, is_lint_allowed, path_to_local_id,\n     peel_hir_expr_refs,\n };\n use rustc_ast::util::parser::PREC_POSTFIX;\n@@ -102,7 +102,7 @@ impl LateLintPass<'_> for ManualMap {\n \n             // These two lints will go back and forth with each other.\n             if cx.typeck_results().expr_ty(some_expr) == cx.tcx.types.unit\n-                && !is_allowed(cx, OPTION_MAP_UNIT_FN, expr.hir_id)\n+                && !is_lint_allowed(cx, OPTION_MAP_UNIT_FN, expr.hir_id)\n             {\n                 return;\n             }\n@@ -146,7 +146,7 @@ impl LateLintPass<'_> for ManualMap {\n                     },\n                     _ => {\n                         if path_to_local_id(some_expr, id)\n-                            && !is_allowed(cx, MATCH_AS_REF, expr.hir_id)\n+                            && !is_lint_allowed(cx, MATCH_AS_REF, expr.hir_id)\n                             && binding_ref.is_some()\n                         {\n                             return;"}, {"sha": "986469a2b698cd47133f6c5a1660ef568843e6a4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type, peel_mid_ty_refs};\n use clippy_utils::visitors::LocalUsedVisitor;\n use clippy_utils::{\n-    get_parent_expr, in_macro, is_allowed, is_expn_of, is_lang_ctor, is_refutable, is_wild, meets_msrv, msrvs,\n+    get_parent_expr, in_macro, is_expn_of, is_lang_ctor, is_lint_allowed, is_refutable, is_wild, meets_msrv, msrvs,\n     path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns, remove_blocks,\n     strip_pat_refs,\n };\n@@ -707,7 +707,7 @@ fn check_single_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], exp\n         };\n \n         let ty = cx.typeck_results().expr_ty(ex);\n-        if *ty.kind() != ty::Bool || is_allowed(cx, MATCH_BOOL, ex.hir_id) {\n+        if *ty.kind() != ty::Bool || is_lint_allowed(cx, MATCH_BOOL, ex.hir_id) {\n             check_single_match_single_pattern(cx, ex, arms, expr, els);\n             check_single_match_opt_like(cx, ex, arms, expr, ty, els);\n         }"}, {"sha": "f5ce3e325512d5b838a9447c8b3517ca44315bbe", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1,7 +1,7 @@\n //! lint on multiple versions of a crate being used\n \n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::is_allowed;\n+use clippy_utils::is_lint_allowed;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::{Crate, CRATE_HIR_ID};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -39,7 +39,7 @@ declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n \n impl LateLintPass<'_> for MultipleCrateVersions {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if is_allowed(cx, MULTIPLE_CRATE_VERSIONS, CRATE_HIR_ID) {\n+        if is_lint_allowed(cx, MULTIPLE_CRATE_VERSIONS, CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "dba3b1805cd595df2029aa7c67ce823e8b8423c8", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_the\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n-use clippy_utils::{expr_path_res, is_allowed, match_any_def_paths, paths};\n+use clippy_utils::{expr_path_res, is_lint_allowed, match_any_def_paths, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -246,7 +246,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n     for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n         // Honor the allow attribute on parameters. See issue 5644.\n         if let Some(body) = &body {\n-            if is_allowed(cx, PTR_ARG, body.params[idx].hir_id) {\n+            if is_lint_allowed(cx, PTR_ARG, body.params[idx].hir_id) {\n                 continue;\n             }\n         }"}, {"sha": "958e462125ef1cafc3d823bdc1d984de575db6f6", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sug\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::SpanlessEq;\n-use clippy_utils::{get_parent_expr, is_allowed, match_function_call, method_calls, paths};\n+use clippy_utils::{get_parent_expr, is_lint_allowed, match_function_call, method_calls, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n@@ -124,7 +124,7 @@ impl<'tcx> LateLintPass<'tcx> for StringAdd {\n         ) = e.kind\n         {\n             if is_string(cx, left) {\n-                if !is_allowed(cx, STRING_ADD_ASSIGN, e.hir_id) {\n+                if !is_lint_allowed(cx, STRING_ADD_ASSIGN, e.hir_id) {\n                     let parent = get_parent_expr(cx, e);\n                     if let Some(p) = parent {\n                         if let ExprKind::Assign(target, _, _) = p.kind {"}, {"sha": "2f0a61898ba75347c7a702004c54826e6ca9e045", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_allowed;\n+use clippy_utils::is_lint_allowed;\n use clippy_utils::source::snippet;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -114,15 +114,15 @@ fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n             span,\n             \"literal non-ASCII character detected\",\n             \"consider replacing the string with\",\n-            if is_allowed(cx, UNICODE_NOT_NFC, id) {\n+            if is_lint_allowed(cx, UNICODE_NOT_NFC, id) {\n                 escape(string.chars())\n             } else {\n                 escape(string.nfc())\n             },\n             Applicability::MachineApplicable,\n         );\n     }\n-    if is_allowed(cx, NON_ASCII_LITERAL, id) && string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n+    if is_lint_allowed(cx, NON_ASCII_LITERAL, id) && string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n         span_lint_and_sugg(\n             cx,\n             UNICODE_NOT_NFC,"}, {"sha": "668807f499f3ffde3a121cc87b1a92dc8f0a6a49", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -3,8 +3,8 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sug\n use clippy_utils::source::snippet;\n use clippy_utils::ty::match_type;\n use clippy_utils::{\n-    is_allowed, is_else_clause, is_expn_of, is_expr_path_def_path, match_def_path, method_calls, path_to_res, paths,\n-    SpanlessEq,\n+    is_else_clause, is_expn_of, is_expr_path_def_path, is_lint_allowed, match_def_path, method_calls, path_to_res,\n+    paths, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, ModKind, NodeId};\n@@ -353,7 +353,7 @@ impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if is_allowed(cx, DEFAULT_LINT, item.hir_id()) {\n+        if is_lint_allowed(cx, DEFAULT_LINT, item.hir_id()) {\n             return;\n         }\n \n@@ -411,7 +411,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>, _: &'tcx Crate<'_>) {\n-        if is_allowed(cx, LINT_WITHOUT_LINT_PASS, CRATE_HIR_ID) {\n+        if is_lint_allowed(cx, LINT_WITHOUT_LINT_PASS, CRATE_HIR_ID) {\n             return;\n         }\n \n@@ -497,7 +497,7 @@ impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if is_allowed(cx, COMPILER_LINT_FUNCTIONS, expr.hir_id) {\n+        if is_lint_allowed(cx, COMPILER_LINT_FUNCTIONS, expr.hir_id) {\n             return;\n         }\n \n@@ -526,7 +526,7 @@ declare_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n impl<'tcx> LateLintPass<'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if is_allowed(cx, OUTER_EXPN_EXPN_DATA, expr.hir_id) {\n+        if is_lint_allowed(cx, OUTER_EXPN_EXPN_DATA, expr.hir_id) {\n             return;\n         }\n \n@@ -576,7 +576,7 @@ declare_lint_pass!(CollapsibleCalls => [COLLAPSIBLE_SPAN_LINT_CALLS]);\n \n impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if is_allowed(cx, COLLAPSIBLE_SPAN_LINT_CALLS, expr.hir_id) {\n+        if is_lint_allowed(cx, COLLAPSIBLE_SPAN_LINT_CALLS, expr.hir_id) {\n             return;\n         }\n \n@@ -757,7 +757,7 @@ declare_lint_pass!(MatchTypeOnDiagItem => [MATCH_TYPE_ON_DIAGNOSTIC_ITEM]);\n \n impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if is_allowed(cx, MATCH_TYPE_ON_DIAGNOSTIC_ITEM, expr.hir_id) {\n+        if is_lint_allowed(cx, MATCH_TYPE_ON_DIAGNOSTIC_ITEM, expr.hir_id) {\n             return;\n         }\n "}, {"sha": "1ca1117a41ea5fccef9b7eb067b6a46f3856e81e", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::{diagnostics::span_lint, is_allowed};\n+use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -30,7 +30,7 @@ declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n \n impl LateLintPass<'_> for WildcardDependencies {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if is_allowed(cx, WILDCARD_DEPENDENCIES, CRATE_HIR_ID) {\n+        if is_lint_allowed(cx, WILDCARD_DEPENDENCIES, CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "364ae536ecd54ae3654739635791b5e34727ca66", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c8f50bbed32a6bcec5f397043342c980e945b3/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=d2c8f50bbed32a6bcec5f397043342c980e945b3", "patch": "@@ -1173,7 +1173,7 @@ pub fn is_try<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<&'tc\n /// Returns `true` if the lint is allowed in the current context\n ///\n /// Useful for skipping long running code when it's unnecessary\n-pub fn is_allowed(cx: &LateContext<'_>, lint: &'static Lint, id: HirId) -> bool {\n+pub fn is_lint_allowed(cx: &LateContext<'_>, lint: &'static Lint, id: HirId) -> bool {\n     cx.tcx.lint_level_at_node(lint, id).0 == Level::Allow\n }\n "}]}