{"sha": "3922503205e2798e21273a22112f584951f25623", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MjI1MDMyMDVlMjc5OGUyMTI3M2EyMjExMmY1ODQ5NTFmMjU2MjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T23:09:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T23:09:09Z"}, "message": "ItemId based module source", "tree": {"sha": "e9c6f25113b9082978a8799b305a27c537ff681d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c6f25113b9082978a8799b305a27c537ff681d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3922503205e2798e21273a22112f584951f25623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3922503205e2798e21273a22112f584951f25623", "html_url": "https://github.com/rust-lang/rust/commit/3922503205e2798e21273a22112f584951f25623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3922503205e2798e21273a22112f584951f25623/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9027a21f9a1c7fcee0a59a1e28928fed29781dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9027a21f9a1c7fcee0a59a1e28928fed29781dd8", "html_url": "https://github.com/rust-lang/rust/commit/9027a21f9a1c7fcee0a59a1e28928fed29781dd8"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "a6b7a546605c498517a6291b0385b12602c551c7", "filename": "crates/ra_analysis/src/hir/module/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3922503205e2798e21273a22112f584951f25623/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3922503205e2798e21273a22112f584951f25623/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs?ref=3922503205e2798e21273a22112f584951f25623", "patch": "@@ -13,8 +13,8 @@ use ra_syntax::{\n use relative_path::RelativePathBuf;\n \n use crate::{\n-    db::SyntaxDatabase, syntax_ptr::SyntaxPtr, FileId, FilePosition, Cancelable,\n-    hir::{Path, PathKind, HirDatabase},\n+    FileId, FilePosition, Cancelable,\n+    hir::{Path, PathKind, HirDatabase, SourceItemId},\n     input::SourceRootId,\n     arena::{Arena, Id},\n     loc2id::{DefLoc, DefId},\n@@ -52,7 +52,7 @@ impl Module {\n         let file = db.file_syntax(position.file_id);\n         let module_source = match find_node_at_offset::<ast::Module>(file.syntax(), position.offset)\n         {\n-            Some(m) if !m.has_semi() => ModuleSource::new_inline(position.file_id, m),\n+            Some(m) if !m.has_semi() => ModuleSource::new_inline(db, position.file_id, m),\n             _ => ModuleSource::SourceFile(position.file_id),\n         };\n         Module::guess_from_source(db, position.file_id, module_source)\n@@ -218,7 +218,7 @@ impl ModuleTree {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub(crate) enum ModuleSource {\n     SourceFile(FileId),\n-    Module(SyntaxPtr),\n+    Module(SourceItemId),\n }\n \n /// An owned syntax node for a module. Unlike `ModuleSource`,\n@@ -273,7 +273,7 @@ impl ModuleId {\n             Some((link.name.clone(), module))\n         })\n     }\n-    fn problems(self, tree: &ModuleTree, db: &impl SyntaxDatabase) -> Vec<(SyntaxNode, Problem)> {\n+    fn problems(self, tree: &ModuleTree, db: &impl HirDatabase) -> Vec<(SyntaxNode, Problem)> {\n         tree.mods[self]\n             .children\n             .iter()\n@@ -294,7 +294,7 @@ impl LinkId {\n     fn name(self, tree: &ModuleTree) -> SmolStr {\n         tree.links[self].name.clone()\n     }\n-    fn bind_source<'a>(self, tree: &ModuleTree, db: &impl SyntaxDatabase) -> ast::ModuleNode {\n+    fn bind_source<'a>(self, tree: &ModuleTree, db: &impl HirDatabase) -> ast::ModuleNode {\n         let owner = self.owner(tree);\n         match owner.source(tree).resolve(db) {\n             ModuleSourceNode::SourceFile(root) => {\n@@ -317,10 +317,16 @@ pub(crate) struct ModuleData {\n }\n \n impl ModuleSource {\n-    pub(crate) fn new_inline(file_id: FileId, module: ast::Module) -> ModuleSource {\n+    pub(crate) fn new_inline(\n+        db: &impl HirDatabase,\n+        file_id: FileId,\n+        module: ast::Module,\n+    ) -> ModuleSource {\n         assert!(!module.has_semi());\n-        let ptr = SyntaxPtr::new(file_id, module.syntax());\n-        ModuleSource::Module(ptr)\n+        let items = db.file_items(file_id);\n+        let item_id = items.id_of(module.syntax());\n+        let id = SourceItemId { file_id, item_id };\n+        ModuleSource::Module(id)\n     }\n \n     pub(crate) fn as_file(self) -> Option<FileId> {\n@@ -333,18 +339,18 @@ impl ModuleSource {\n     pub(crate) fn file_id(self) -> FileId {\n         match self {\n             ModuleSource::SourceFile(f) => f,\n-            ModuleSource::Module(ptr) => ptr.file_id(),\n+            ModuleSource::Module(source_item_id) => source_item_id.file_id,\n         }\n     }\n \n-    pub(crate) fn resolve(self, db: &impl SyntaxDatabase) -> ModuleSourceNode {\n+    pub(crate) fn resolve(self, db: &impl HirDatabase) -> ModuleSourceNode {\n         match self {\n             ModuleSource::SourceFile(file_id) => {\n                 let syntax = db.file_syntax(file_id);\n                 ModuleSourceNode::SourceFile(syntax.ast().owned())\n             }\n-            ModuleSource::Module(ptr) => {\n-                let syntax = db.resolve_syntax_ptr(ptr);\n+            ModuleSource::Module(item_id) => {\n+                let syntax = db.file_item(item_id);\n                 let syntax = syntax.borrowed();\n                 let module = ast::Module::cast(syntax).unwrap();\n                 ModuleSourceNode::Module(module.owned())"}, {"sha": "cdd986ce4164340cf93faa60408a10c32a2df6f4", "filename": "crates/ra_analysis/src/hir/query_definitions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3922503205e2798e21273a22112f584951f25623/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3922503205e2798e21273a22112f584951f25623/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs?ref=3922503205e2798e21273a22112f584951f25623", "patch": "@@ -63,16 +63,17 @@ pub(crate) fn submodules(\n     db.check_canceled()?;\n     let file_id = source.file_id();\n     let submodules = match source.resolve(db) {\n-        ModuleSourceNode::SourceFile(it) => collect_submodules(file_id, it.borrowed()),\n+        ModuleSourceNode::SourceFile(it) => collect_submodules(db, file_id, it.borrowed()),\n         ModuleSourceNode::Module(it) => it\n             .borrowed()\n             .item_list()\n-            .map(|it| collect_submodules(file_id, it))\n+            .map(|it| collect_submodules(db, file_id, it))\n             .unwrap_or_else(Vec::new),\n     };\n     return Ok(Arc::new(submodules));\n \n     fn collect_submodules<'a>(\n+        db: &impl HirDatabase,\n         file_id: FileId,\n         root: impl ast::ModuleItemOwner<'a>,\n     ) -> Vec<Submodule> {\n@@ -81,7 +82,7 @@ pub(crate) fn submodules(\n                 if m.has_semi() {\n                     Submodule::Declaration(name)\n                 } else {\n-                    let src = ModuleSource::new_inline(file_id, m);\n+                    let src = ModuleSource::new_inline(db, file_id, m);\n                     Submodule::Definition(name, src)\n                 }\n             })"}, {"sha": "ca8efc9b295f88217dc0e2f59e7843e20952eaa2", "filename": "crates/ra_analysis/src/syntax_ptr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3922503205e2798e21273a22112f584951f25623/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3922503205e2798e21273a22112f584951f25623/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs?ref=3922503205e2798e21273a22112f584951f25623", "patch": "@@ -22,10 +22,6 @@ impl SyntaxPtr {\n         let local = LocalSyntaxPtr::new(node);\n         SyntaxPtr { file_id, local }\n     }\n-\n-    pub(crate) fn file_id(self) -> FileId {\n-        self.file_id\n-    }\n }\n \n /// A pionter to a syntax node inside a file."}]}