{"sha": "76962482e684c71bb9d8021774dccd76cf80fddd", "node_id": "C_kwDOAAsO6NoAKDc2OTYyNDgyZTY4NGM3MWJiOWQ4MDIxNzc0ZGNjZDc2Y2Y4MGZkZGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-16T07:57:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-16T07:57:09Z"}, "message": "Rollup merge of #109180 - gimbles:master, r=compiler-errors\n\nUnequal \u2192 Not equal\n\nFixes #109168", "tree": {"sha": "671e5a43bc4e38c1371435df45ad18a1b84509db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/671e5a43bc4e38c1371435df45ad18a1b84509db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76962482e684c71bb9d8021774dccd76cf80fddd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEsvVCRBK7hj4Ov3rIwAAeyYIAHBITGE90pUWGOMbaJSPObUa\n23G9BzYB65/U8MqsT4+78BzslDskARLJMM+teVLzSVYuIn4SsKdFWu42SefKB785\nfEym179Vw6iLBas+yGoMGUe/o8D2OMlzzNjYkl86OMJAOIJzBxuzFXb307RUon0Y\nFg8t/Vtmvsaqab6fjDoYINICTDM38iSlsIW49uYjaQU7R6klIyBW6OQviKHBQrEz\nX8MM/9B3wyskHbE/Lpdyod6lQXs9e5nN1db+rBao2FSJWmtStheHXvGQvKY3hsn+\ncKY442kY74L4AxIRTD5tuGYsGYOYSDDy8oQoG2ZMWU3x/G3i4uj5nvCmYHSq3ws=\n=B46d\n-----END PGP SIGNATURE-----\n", "payload": "tree 671e5a43bc4e38c1371435df45ad18a1b84509db\nparent 113e815b3603283ed9dedde9c7f9729e6d263c34\nparent e5a5b90afc527dfb87f6034b52b7adca063ca078\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678953429 +0100\ncommitter GitHub <noreply@github.com> 1678953429 +0100\n\nRollup merge of #109180 - gimbles:master, r=compiler-errors\n\nUnequal \u2192 Not equal\n\nFixes #109168\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76962482e684c71bb9d8021774dccd76cf80fddd", "html_url": "https://github.com/rust-lang/rust/commit/76962482e684c71bb9d8021774dccd76cf80fddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76962482e684c71bb9d8021774dccd76cf80fddd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113e815b3603283ed9dedde9c7f9729e6d263c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/113e815b3603283ed9dedde9c7f9729e6d263c34", "html_url": "https://github.com/rust-lang/rust/commit/113e815b3603283ed9dedde9c7f9729e6d263c34"}, {"sha": "e5a5b90afc527dfb87f6034b52b7adca063ca078", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a5b90afc527dfb87f6034b52b7adca063ca078", "html_url": "https://github.com/rust-lang/rust/commit/e5a5b90afc527dfb87f6034b52b7adca063ca078"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "2cbd2e3bc0d86547ba9834ffcc1a439c9f424cdd", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n         }\n \n         // By passing `PlaceConflictBias::NoOverlap`, we conservatively assume that any given\n-        // pair of array indices are unequal, so that when `places_conflict` returns true, we\n+        // pair of array indices are not equal, so that when `places_conflict` returns true, we\n         // will be assured that two places being compared definitely denotes the same sets of\n         // locations.\n         let definitely_conflicting_borrows = other_borrows_of_local.filter(|&i| {"}, {"sha": "8c0edcee52147bd176139af3accbf478ef7d49e4", "filename": "compiler/rustc_error_codes/src/error_codes/E0416.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0416.md", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0416.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0416.md?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -23,6 +23,6 @@ Or maybe did you mean to unify? Consider using a guard:\n # let (A, B, C) = (1, 2, 3);\n match (A, B, C) {\n     (x, x2, see) if x == x2 => { /* A and B are equal, do one thing */ }\n-    (y, z, see) => { /* A and B unequal; do another thing */ }\n+    (y, z, see) => { /* A and B not equal; do another thing */ }\n }\n ```"}, {"sha": "a07cb65170dcae4fdacdee20f4f13c769f73447a", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -367,7 +367,7 @@ impl LockstepIterSize {\n ///\n /// Example: `$($($x $y)+*);+` -- we need to make sure that `x` and `y` repeat the same amount as\n /// each other at the given depth when the macro was invoked. If they don't it might mean they were\n-/// declared at unequal depths or there was a compile bug. For example, if we have 3 repetitions of\n+/// declared at depths which weren't equal or there was a compiler bug. For example, if we have 3 repetitions of\n /// the outer sequence and 4 repetitions of the inner sequence for `x`, we should have the same for\n /// `y`; otherwise, we can't transcribe them both at the given depth.\n fn lockstep_iter_size("}, {"sha": "a28ecfa9bdc47dc85adcefc03048facfc1551912", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -1081,7 +1081,7 @@ pub enum Rvalue<'tcx> {\n     /// Same as `BinaryOp`, but yields `(T, bool)` with a `bool` indicating an error condition.\n     ///\n     /// For addition, subtraction, and multiplication on integers the error condition is set when\n-    /// the infinite precision result would be unequal to the actual result.\n+    /// the infinite precision result would not be equal to the actual result.\n     ///\n     /// Other combinations of types and operators are unsupported.\n     CheckedBinaryOp(BinOp, Box<(Operand<'tcx>, Operand<'tcx>)>),"}, {"sha": "2cd791574417a89dc5ff57ee897d524688139c49", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -2215,7 +2215,7 @@ rustc_queries! {\n     }\n \n     /// Used in `super_combine_consts` to ICE if the type of the two consts are definitely not going to end up being\n-    /// equal to eachother. This might return `Ok` even if the types are unequal, but will never return `Err` if\n+    /// equal to eachother. This might return `Ok` even if the types are not equal, but will never return `Err` if\n     /// the types might be equal.\n     query check_tys_might_be_eq(arg: Canonical<'tcx, (ty::ParamEnv<'tcx>, Ty<'tcx>, Ty<'tcx>)>) -> Result<(), NoSolution> {\n         desc { \"check whether two const param are definitely not equal to eachother\"}"}, {"sha": "a7f38884ebcc4390b3f6df681feb92e0085e80ef", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -237,7 +237,7 @@ impl ScalarInt {\n     }\n \n     /// Tries to convert the `ScalarInt` to an unsigned integer of the given size.\n-    /// Fails if the size of the `ScalarInt` is unequal to `size` and returns the\n+    /// Fails if the size of the `ScalarInt` is not equal to `size` and returns the\n     /// `ScalarInt`s size in that case.\n     #[inline]\n     pub fn try_to_uint(self, size: Size) -> Result<u128, Size> {\n@@ -297,7 +297,7 @@ impl ScalarInt {\n     }\n \n     /// Tries to convert the `ScalarInt` to a signed integer of the given size.\n-    /// Fails if the size of the `ScalarInt` is unequal to `size` and returns the\n+    /// Fails if the size of the `ScalarInt` is not equal to `size` and returns the\n     /// `ScalarInt`s size in that case.\n     #[inline]\n     pub fn try_to_int(self, size: Size) -> Result<i128, Size> {\n@@ -306,35 +306,35 @@ impl ScalarInt {\n     }\n \n     /// Tries to convert the `ScalarInt` to i8.\n-    /// Fails if the size of the `ScalarInt` is unequal to `Size { raw: 1 }`\n+    /// Fails if the size of the `ScalarInt` is not equal to `Size { raw: 1 }`\n     /// and returns the `ScalarInt`s size in that case.\n     pub fn try_to_i8(self) -> Result<i8, Size> {\n         self.try_to_int(Size::from_bits(8)).map(|v| i8::try_from(v).unwrap())\n     }\n \n     /// Tries to convert the `ScalarInt` to i16.\n-    /// Fails if the size of the `ScalarInt` is unequal to `Size { raw: 2 }`\n+    /// Fails if the size of the `ScalarInt` is not equal to `Size { raw: 2 }`\n     /// and returns the `ScalarInt`s size in that case.\n     pub fn try_to_i16(self) -> Result<i16, Size> {\n         self.try_to_int(Size::from_bits(16)).map(|v| i16::try_from(v).unwrap())\n     }\n \n     /// Tries to convert the `ScalarInt` to i32.\n-    /// Fails if the size of the `ScalarInt` is unequal to `Size { raw: 4 }`\n+    /// Fails if the size of the `ScalarInt` is not equal to `Size { raw: 4 }`\n     /// and returns the `ScalarInt`s size in that case.\n     pub fn try_to_i32(self) -> Result<i32, Size> {\n         self.try_to_int(Size::from_bits(32)).map(|v| i32::try_from(v).unwrap())\n     }\n \n     /// Tries to convert the `ScalarInt` to i64.\n-    /// Fails if the size of the `ScalarInt` is unequal to `Size { raw: 8 }`\n+    /// Fails if the size of the `ScalarInt` is not equal to `Size { raw: 8 }`\n     /// and returns the `ScalarInt`s size in that case.\n     pub fn try_to_i64(self) -> Result<i64, Size> {\n         self.try_to_int(Size::from_bits(64)).map(|v| i64::try_from(v).unwrap())\n     }\n \n     /// Tries to convert the `ScalarInt` to i128.\n-    /// Fails if the size of the `ScalarInt` is unequal to `Size { raw: 16 }`\n+    /// Fails if the size of the `ScalarInt` is not equal to `Size { raw: 16 }`\n     /// and returns the `ScalarInt`s size in that case.\n     pub fn try_to_i128(self) -> Result<i128, Size> {\n         self.try_to_int(Size::from_bits(128)).map(|v| i128::try_from(v).unwrap())"}, {"sha": "089b6b6418dc15002b820e5cbaf8e3391a49e14c", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -1738,11 +1738,11 @@ impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n \n     /// Inequality for two `Rc`s.\n     ///\n-    /// Two `Rc`s are unequal if their inner values are unequal.\n+    /// Two `Rc`s are not equal if their inner values are not equal.\n     ///\n     /// If `T` also implements `Eq` (implying reflexivity of equality),\n     /// two `Rc`s that point to the same allocation are\n-    /// never unequal.\n+    /// always equal.\n     ///\n     /// # Examples\n     ///"}, {"sha": "8a27a7ecdf653c69c851b9b87e48c1256bf5b808", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -2475,10 +2475,10 @@ impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n \n     /// Inequality for two `Arc`s.\n     ///\n-    /// Two `Arc`s are unequal if their inner values are unequal.\n+    /// Two `Arc`s are not equal if their inner values are not equal.\n     ///\n     /// If `T` also implements `Eq` (implying reflexivity of equality),\n-    /// two `Arc`s that point to the same value are never unequal.\n+    /// two `Arc`s that point to the same value are always equal.\n     ///\n     /// # Examples\n     ///"}, {"sha": "3bdde0993b9a28e315c938a3647061f5e215965d", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -158,7 +158,7 @@ mod sip;\n ///\n /// Implementations of `hash` should ensure that the data they\n /// pass to the `Hasher` are prefix-free. That is,\n-/// unequal values should cause two different sequences of values to be written,\n+/// values which are not equal should cause two different sequences of values to be written,\n /// and neither of the two sequences should be a prefix of the other.\n ///\n /// For example, the standard implementation of [`Hash` for `&str`][impl] passes an extra"}, {"sha": "e791158e25948385f9a37d943dc7d44b8fa32e25", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -3721,7 +3721,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are unequal to those of\n+    /// Determines if the elements of this [`Iterator`] are not equal to those of\n     /// another.\n     ///\n     /// # Examples"}, {"sha": "e12a3e378a6154dbea7013bd5c5e6c6438980a19", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -1110,7 +1110,7 @@ impl<T: Copy> Copy for (T,) {\n /// - [NaN (not a number)](#associatedconstant.NAN): this value results from\n ///   calculations like `(-1.0).sqrt()`. NaN has some potentially unexpected\n ///   behavior:\n-///   - It is unequal to any float, including itself! This is the reason `f32`\n+///   - It is not equal to any float, including itself! This is the reason `f32`\n ///     doesn't implement the `Eq` trait.\n ///   - It is also neither smaller nor greater than any float, making it\n ///     impossible to sort by the default comparison operation, which is the"}, {"sha": "e12a3e378a6154dbea7013bd5c5e6c6438980a19", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -1110,7 +1110,7 @@ impl<T: Copy> Copy for (T,) {\n /// - [NaN (not a number)](#associatedconstant.NAN): this value results from\n ///   calculations like `(-1.0).sqrt()`. NaN has some potentially unexpected\n ///   behavior:\n-///   - It is unequal to any float, including itself! This is the reason `f32`\n+///   - It is not equal to any float, including itself! This is the reason `f32`\n ///     doesn't implement the `Eq` trait.\n ///   - It is also neither smaller nor greater than any float, making it\n ///     impossible to sort by the default comparison operation, which is the"}, {"sha": "519ec2c32bd5d5b59ec50b5699851e141cd9f6f3", "filename": "library/std/src/sync/remutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76962482e684c71bb9d8021774dccd76cf80fddd/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs?ref=76962482e684c71bb9d8021774dccd76cf80fddd", "patch": "@@ -35,7 +35,7 @@ use crate::sys::locks as sys;\n /// `owner` can be checked by other threads that want to see if they already\n /// hold the lock, so needs to be atomic. If it compares equal, we're on the\n /// same thread that holds the mutex and memory access can use relaxed ordering\n-/// since we're not dealing with multiple threads. If it compares unequal,\n+/// since we're not dealing with multiple threads. If it's not equal,\n /// synchronization is left to the mutex, making relaxed memory ordering for\n /// the `owner` field fine in all cases.\n pub struct ReentrantMutex<T> {"}]}