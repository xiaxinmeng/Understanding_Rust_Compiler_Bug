{"sha": "d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Yjg0YTU0NmNmNzk2OGVmN2E5ZTM1NThjMmYwYzNkODhiYTAzM2M=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-06T17:07:39Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-08T15:57:52Z"}, "message": "Converted the rest of the task-comm-* tests over. Also fixed some\nchannel lifecycle bugs.", "tree": {"sha": "a39833fd65311704db8a53971d8d3072a6f6410b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39833fd65311704db8a53971d8d3072a6f6410b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "html_url": "https://github.com/rust-lang/rust/commit/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/comments", "author": null, "committer": null, "parents": [{"sha": "86babab2fe92223511042e9cb4b233841cffa054", "url": "https://api.github.com/repos/rust-lang/rust/commits/86babab2fe92223511042e9cb4b233841cffa054", "html_url": "https://github.com/rust-lang/rust/commit/86babab2fe92223511042e9cb4b233841cffa054"}], "stats": {"total": 338, "additions": 171, "deletions": 167}, "files": [{"sha": "798daf1db12a0cfc36cba2f6a6a2120fd72187d9", "filename": "src/lib/comm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -29,8 +29,6 @@ native \"rust-intrinsic\" mod rusti {\n \n resource chan_ptr(ch: *rustrt::rust_chan) {\n     rustrt::drop_chan(ch);\n-    rustrt::drop_chan(ch); // FIXME: We shouldn't have to do this\n-                           // twice.\n }\n \n resource port_ptr(po: *rustrt::rust_port) {"}, {"sha": "862373e07dd795781b2f8a1cb7f9afd5f3f20781", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -901,7 +901,7 @@ new_chan(rust_task *task, rust_port *port) {\n extern \"C\" CDECL\n void del_chan(rust_task *task, rust_chan *chan) {\n     LOG(task, comm, \"del_chan(0x%\" PRIxPTR \")\", (uintptr_t) chan);\n-    chan->destroy();\n+    I(task->sched, false);\n }\n \n extern \"C\" CDECL"}, {"sha": "045694eee61f7744e21947201a1d3b93bcdfb486", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -22,7 +22,7 @@ rust_chan::~rust_chan() {\n     KLOG(kernel, comm, \"del rust_chan(task=0x%\" PRIxPTR \")\",\n          (uintptr_t) this);\n \n-    this->destroy();\n+    I(this->kernel, !is_associated());\n \n     A(kernel, is_associated() == false,\n       \"Channel must be disassociated before being freed.\");\n@@ -32,12 +32,12 @@ rust_chan::~rust_chan() {\n  * Link this channel with the specified port.\n  */\n void rust_chan::associate(rust_port *port) {\n+    this->ref();\n     this->port = port;\n     scoped_lock with(port->lock);\n     KLOG(kernel, task,\n          \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n          this, port);\n-    this->ref();\n     this->task = port->task;\n     this->task->ref();\n     this->port->chans.push(this);\n@@ -64,7 +64,7 @@ void rust_chan::disassociate() {\n     port->chans.swap_delete(this);\n \n     // Delete reference to the port.\n-    port = NULL;\n+     port = NULL;\n \n     this->deref();\n }\n@@ -99,30 +99,6 @@ rust_chan *rust_chan::clone(rust_task *target) {\n         rust_chan(kernel, port, buffer.unit_sz);\n }\n \n-/**\n- * Cannot Yield: If the task were to unwind, the dropped ref would still\n- * appear to be live, causing modify-after-free errors.\n- */\n-void rust_chan::destroy() {\n-    if (is_associated()) {\n-        // We're trying to delete a channel that another task may be\n-        // reading from. We have two options:\n-        //\n-        // 1. We can flush the channel by blocking in upcall_flush_chan()\n-        //    and resuming only when the channel is flushed. The problem\n-        //    here is that we can get ourselves in a deadlock if the\n-        //    parent task tries to join us.\n-        //\n-        // 2. We can leave the channel in a \"dormnat\" state by not freeing\n-        //    it and letting the receiver task delete it for us instead.\n-        if (buffer.is_empty() == false) {\n-            return;\n-        }\n-        scoped_lock with(port->lock);\n-        disassociate();\n-    }\n-}\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "9dbd9337a185ecf5d8d7d44619635dcd5d557935", "filename": "src/rt/rust_chan.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Frt%2Frust_chan.h", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Frt%2Frust_chan.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.h?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -23,9 +23,6 @@ class rust_chan : public kernel_owned<rust_chan>,\n     void send(void *sptr);\n \n     rust_chan *clone(rust_task *target);\n-\n-    // Called whenever the channel's ref count drops to zero.\n-    void destroy();\n };\n \n //"}, {"sha": "6f258d9f6e7e60156ad02fc99ebe6d25edd3f686", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -20,4 +20,4 @@ fn test05() {\n     value = po.recv();\n     value = po.recv();\n     assert (value == 30);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f634af9cee96dc820d4cc75373d29d917368af31", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -6,4 +6,4 @@ fn main() { test00(); }\n \n fn start() { log \"Started / Finished task.\"; }\n \n-fn test00() { let t: task = spawn start(); join(t); log \"Completing.\"; }\n\\ No newline at end of file\n+fn test00() { let t: task = spawn start(); join(t); log \"Completing.\"; }"}, {"sha": "cdd18478dbcfb759228049d693917c42711656db", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,29 +1,32 @@\n use std;\n import std::task;\n+import std::comm;\n \n-fn start(c: chan[chan[str]]) {\n-    let p: port[str];\n+fn start(pcc: *u8) {\n+    let c = comm::chan_from_unsafe_ptr(pcc);\n+    let p;\n \n     let a;\n     let b;\n-    p = port();\n-    c <| chan(p);\n-    p |> a;\n+    p = comm::mk_port[str]();\n+    c.send(p.mk_chan().unsafe_ptr());\n+    a = p.recv();\n     log_err a;\n-    p |> b;\n+    b = p.recv();\n     log_err b;\n }\n \n fn main() {\n-    let p: port[chan[str]];\n+    let p : comm::_port[*u8];\n     let child;\n \n-    p = port();\n-    child = spawn start(chan(p));\n-    let c;\n+    p = comm::mk_port();\n+    child = spawn start(p.mk_chan().unsafe_ptr());\n+    let pc; let c;\n \n-    p |> c;\n-    c <| \"A\";\n-    c <| \"B\";\n+    pc = p.recv();\n+    c = comm::chan_from_unsafe_ptr(pc);\n+    c.send(\"A\");\n+    c.send(\"B\");\n     task::yield();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1e3dc70e18ef4dec4c2c740d94227aa6b709c94b", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,10 +1,16 @@\n // xfail-stage3\n+use std;\n+import std::comm;\n \n-fn start(c: chan[chan[str]]) { let p: port[str] = port(); c <| chan(p); }\n+fn start(pcc: *u8) {\n+    let c = comm::chan_from_unsafe_ptr(pcc);\n+    let p : comm::_port[int] = comm::mk_port();\n+    c.send(p.mk_chan().unsafe_ptr());\n+}\n \n fn main() {\n-    let p: port[chan[str]] = port();\n-    let child = spawn start(chan(p));\n-    let c;\n-    p |> c;\n-}\n\\ No newline at end of file\n+    let p = comm::mk_port();\n+    let child = spawn start(p.mk_chan().unsafe_ptr());\n+    let pc = p.recv();\n+    let c : comm::_chan[int] = comm::chan_from_unsafe_ptr(pc);\n+}"}, {"sha": "bb05a7c24ba8a0a58de841e7ae01c7b511340fc6", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -16,4 +16,4 @@ fn test00() {\n     task::join(t);\n \n     log \"Joined task.\";\n-}\n\\ No newline at end of file\n+}"}, {"sha": "163ccbefb22691171cc5007a325ff2180097702d", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,15 +1,17 @@\n use std;\n import std::task;\n+import std::comm;\n \n-fn start(c: chan[int], start: int, number_of_messages: int) {\n+fn start(pc: *u8, start: int, number_of_messages: int) {\n+    let c = comm::chan_from_unsafe_ptr(pc);\n     let i: int = 0;\n-    while i < number_of_messages { c <| start + i; i += 1; }\n+    while i < number_of_messages { c.send(start + i); i += 1; }\n }\n \n fn main() {\n     log \"Check that we don't deadlock.\";\n-    let p: port[int] = port();\n-    let a: task = spawn start(chan(p), 0, 10);\n+    let p : comm::_port[int] = comm::mk_port();\n+    let a: task = spawn start(p.mk_chan().unsafe_ptr(), 0, 10);\n     task::join(a);\n     log \"Joined task\";\n }\n\\ No newline at end of file"}, {"sha": "9b666dd32ec1a45636d5f22d1213928b0f1e1e85", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -3,20 +3,25 @@\n // xfail-stage3\n // This test fails when run with multiple threads\n \n-fn start(c: chan[int], n: int) {\n+use std;\n+import std::comm;\n+\n+fn start(pc: *u8, n: int) {\n+    let c = comm::chan_from_unsafe_ptr();\n     let i: int = n;\n \n \n-    while i > 0 { c <| 0; i = i - 1; }\n+    while i > 0 { c.send(0); i = i - 1; }\n }\n \n fn main() {\n-    let p: port[int] = port();\n+    let p = comm::mk_port();\n     // Spawn a task that sends us back messages. The parent task\n     // is likely to terminate before the child completes, so from\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n-    let child = spawn start(chan(p), 10);\n+    let child = spawn start(p.mk_chan().unsafe_ptr(), 10);\n     let c;\n-    p |> c;\n+    let pc = p.recv();\n+    c = chan::chan_from_unsafe_ptr();\n }\n\\ No newline at end of file"}, {"sha": "e901fef3962e6484267bdb27547cdb970c05eb65", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,39 +1,43 @@\n // -*- rust -*-\n \n+use std;\n+import std::comm;\n+import std::comm::mk_port;\n+\n // Tests of ports and channels on various types\n fn test_rec() {\n     type r = {val0: int, val1: u8, val2: char};\n \n-    let po: port[r] = port();\n-    let ch: chan[r] = chan(po);\n+    let po = comm::mk_port();\n+    let ch = po.mk_chan();\n     let r0: r = {val0: 0, val1: 1u8, val2: '2'};\n-    ch <| r0;\n+    ch.send(r0);\n     let r1: r;\n-    po |> r1;\n+    r1 = po.recv();\n     assert (r1.val0 == 0);\n     assert (r1.val1 == 1u8);\n     assert (r1.val2 == '2');\n }\n \n fn test_vec() {\n-    let po: port[int[]] = port();\n-    let ch: chan[int[]] = chan(po);\n+    let po = comm::mk_port();\n+    let ch = po.mk_chan();\n     let v0: int[] = ~[0, 1, 2];\n-    ch <| v0;\n+    ch.send(v0);\n     let v1: int[];\n-    po |> v1;\n+    v1 = po.recv();\n     assert (v1.(0) == 0);\n     assert (v1.(1) == 1);\n     assert (v1.(2) == 2);\n }\n \n fn test_str() {\n-    let po: port[str] = port();\n-    let ch: chan[str] = chan(po);\n+    let po = comm::mk_port();\n+    let ch = po.mk_chan();\n     let s0: str = \"test\";\n-    ch <| s0;\n+    ch.send(s0);\n     let s1: str;\n-    po |> s1;\n+    s1 = po.recv();\n     assert (s1.(0) as u8 == 't' as u8);\n     assert (s1.(1) as u8 == 'e' as u8);\n     assert (s1.(2) as u8 == 's' as u8);\n@@ -42,33 +46,34 @@ fn test_str() {\n \n fn test_tag() {\n     tag t { tag1; tag2(int); tag3(int, u8, char); }\n-    let po: port[t] = port();\n-    let ch: chan[t] = chan(po);\n-    ch <| tag1;\n-    ch <| tag2(10);\n-    ch <| tag3(10, 11u8, 'A');\n+    let po = comm::mk_port();\n+    let ch = po.mk_chan();\n+    ch.send(tag1);\n+    ch.send(tag2(10));\n+    ch.send(tag3(10, 11u8, 'A'));\n+    // FIXME: Do port semantics really guarantee these happen in order?\n     let t1: t;\n-    po |> t1;\n+    t1 = po.recv();\n     assert (t1 == tag1);\n-    po |> t1;\n+    t1 = po.recv();\n     assert (t1 == tag2(10));\n-    po |> t1;\n+    t1 = po.recv();\n     assert (t1 == tag3(10, 11u8, 'A'));\n }\n \n fn test_chan() {\n-    let po: port[chan[int]] = port();\n-    let ch: chan[chan[int]] = chan(po);\n-    let po0: port[int] = port();\n-    let ch0: chan[int] = chan(po0);\n-    ch <| ch0;\n-    let ch1: chan[int];\n-    po |> ch1;\n+    let po = comm::mk_port();\n+    let ch = po.mk_chan();\n+    let po0 = comm::mk_port();\n+    let ch0 = po0.mk_chan();\n+    ch.send(ch0);\n+    let ch1;\n+    ch1 = po.recv();\n     // Does the transmitted channel still work?\n \n-    ch1 <| 10;\n+    ch1.send(10);\n     let i: int;\n-    po0 |> i;\n+    i = po0.recv();\n     assert (i == 10);\n }\n "}, {"sha": "a5d0af1aef0256676c7c1fed26868aa100947e1a", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,12 +1,14 @@\n use std;\n import std::task;\n+import std::comm;\n \n fn main() { log \"===== WITHOUT THREADS =====\"; test00(); }\n \n-fn test00_start(ch: chan[int], message: int, count: int) {\n+fn test00_start(pch: *u8, message: int, count: int) {\n     log \"Starting test00_start\";\n+    let ch = comm::chan_from_unsafe_ptr(pch);\n     let i: int = 0;\n-    while i < count { log \"Sending Message\"; ch <| message; i = i + 1; }\n+    while i < count { log \"Sending Message\"; ch.send(message); i = i + 1; }\n     log \"Ending test00_start\";\n }\n \n@@ -16,15 +18,15 @@ fn test00() {\n \n     log \"Creating tasks\";\n \n-    let po: port[int] = port();\n-    let ch: chan[int] = chan(po);\n+    let po = comm::mk_port();\n+    let ch = po.mk_chan();\n \n     let i: int = 0;\n \n     // Create and spawn tasks...\n     let tasks: vec[task] = [];\n     while i < number_of_tasks {\n-        tasks += [spawn test00_start(ch, i, number_of_messages)];\n+        tasks += [spawn test00_start(ch.unsafe_ptr(), i, number_of_messages)];\n         i = i + 1;\n     }\n \n@@ -34,7 +36,7 @@ fn test00() {\n         i = 0;\n         while i < number_of_messages {\n             let value: int;\n-            po |> value;\n+            value = po.recv();\n             sum += value;\n             i = i + 1;\n         }\n@@ -47,4 +49,4 @@ fn test00() {\n     // assert (sum == (((number_of_tasks * (number_of_tasks - 1)) / 2) *\n     //       number_of_messages));\n     assert (sum == 480);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3f1e05fce9ec71af52178359ea67d8da3edef211", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,42 +1,43 @@\n-\n+use std;\n+import std::comm;\n \n fn main() { test00(); }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p: port[int] = port();\n-    let c: chan[int] = chan(p);\n-    c <| 1;\n-    c <| 2;\n-    c <| 3;\n-    c <| 4;\n-    p |> r;\n+    let p = comm::mk_port();\n+    let c = p.mk_chan();\n+    c.send(1);\n+    c.send(2);\n+    c.send(3);\n+    c.send(4);\n+    r = p.recv();\n     sum += r;\n     log r;\n-    p |> r;\n+    r = p.recv();\n     sum += r;\n     log r;\n-    p |> r;\n+    r = p.recv();\n     sum += r;\n     log r;\n-    p |> r;\n+    r = p.recv();\n     sum += r;\n     log r;\n-    c <| 5;\n-    c <| 6;\n-    c <| 7;\n-    c <| 8;\n-    p |> r;\n+    c.send(5);\n+    c.send(6);\n+    c.send(7);\n+    c.send(8);\n+    r = p.recv();\n     sum += r;\n     log r;\n-    p |> r;\n+    r = p.recv();\n     sum += r;\n     log r;\n-    p |> r;\n+    r = p.recv();\n     sum += r;\n     log r;\n-    p |> r;\n+    r = p.recv();\n     sum += r;\n     log r;\n     assert (sum == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8);"}, {"sha": "3126d98d99bf8aaac8fe9d649250c3e74c53057c", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,16 +1,17 @@\n-\n+use std;\n+import std::comm;\n \n fn main() { test00(); }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p: port[int] = port();\n-    let c: chan[int] = chan(p);\n+    let p = comm::mk_port();\n+    let c = p.mk_chan();\n     let number_of_messages: int = 1000;\n     let i: int = 0;\n-    while i < number_of_messages { c <| i; i += 1; }\n+    while i < number_of_messages { c.send(i); i += 1; }\n     i = 0;\n-    while i < number_of_messages { p |> r; sum += r; i += 1; }\n+    while i < number_of_messages { r = p.recv(); sum += r; i += 1; }\n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }\n\\ No newline at end of file"}, {"sha": "74555ded4004c5c8938964c8fcf644fdb6cc59d2", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,33 +1,34 @@\n-\n+use std;\n+import std::comm;\n \n fn main() { test00(); }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p: port[int] = port();\n-    let c0: chan[int] = chan(p);\n-    let c1: chan[int] = chan(p);\n-    let c2: chan[int] = chan(p);\n-    let c3: chan[int] = chan(p);\n+    let p = comm::mk_port();\n+    let c0 = p.mk_chan();\n+    let c1 = p.mk_chan();\n+    let c2 = p.mk_chan();\n+    let c3 = p.mk_chan();\n     let number_of_messages: int = 1000;\n     let i: int = 0;\n     while i < number_of_messages {\n-        c0 <| i;\n-        c1 <| i;\n-        c2 <| i;\n-        c3 <| i;\n+        c0.send(i);\n+        c1.send(i);\n+        c2.send(i);\n+        c3.send(i);\n         i += 1;\n     }\n     i = 0;\n     while i < number_of_messages {\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n         i += 1;\n     }"}, {"sha": "6040487a98614d387032eec6f34a916c057feb02", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,41 +1,43 @@\n use std;\n import std::task;\n+import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: chan[int], start: int, number_of_messages: int) {\n+fn test00_start(pc: *u8, start: int, number_of_messages: int) {\n+    let c = comm::chan_from_unsafe_ptr(pc);\n     let i: int = 0;\n-    while i < number_of_messages { c <| start + i; i += 1; }\n+    while i < number_of_messages { c.send(start + i); i += 1; }\n }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p: port[int] = port();\n+    let p = comm::mk_port();\n     let number_of_messages: int = 10;\n \n     let t0: task =\n-        spawn test00_start(chan(p), number_of_messages * 0,\n+        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 0,\n                            number_of_messages);\n     let t1: task =\n-        spawn test00_start(chan(p), number_of_messages * 1,\n+        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 1,\n                            number_of_messages);\n     let t2: task =\n-        spawn test00_start(chan(p), number_of_messages * 2,\n+        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 2,\n                            number_of_messages);\n     let t3: task =\n-        spawn test00_start(chan(p), number_of_messages * 3,\n+        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 3,\n                            number_of_messages);\n \n     let i: int = 0;\n     while i < number_of_messages {\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n         i += 1;\n     }"}, {"sha": "6040487a98614d387032eec6f34a916c057feb02", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,41 +1,43 @@\n use std;\n import std::task;\n+import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: chan[int], start: int, number_of_messages: int) {\n+fn test00_start(pc: *u8, start: int, number_of_messages: int) {\n+    let c = comm::chan_from_unsafe_ptr(pc);\n     let i: int = 0;\n-    while i < number_of_messages { c <| start + i; i += 1; }\n+    while i < number_of_messages { c.send(start + i); i += 1; }\n }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p: port[int] = port();\n+    let p = comm::mk_port();\n     let number_of_messages: int = 10;\n \n     let t0: task =\n-        spawn test00_start(chan(p), number_of_messages * 0,\n+        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 0,\n                            number_of_messages);\n     let t1: task =\n-        spawn test00_start(chan(p), number_of_messages * 1,\n+        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 1,\n                            number_of_messages);\n     let t2: task =\n-        spawn test00_start(chan(p), number_of_messages * 2,\n+        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 2,\n                            number_of_messages);\n     let t3: task =\n-        spawn test00_start(chan(p), number_of_messages * 3,\n+        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 3,\n                            number_of_messages);\n \n     let i: int = 0;\n     while i < number_of_messages {\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n-        p |> r;\n+        r = p.recv();\n         sum += r;\n         i += 1;\n     }"}, {"sha": "9a04e113ac946e212617c136cfe697dee6fcc14e", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -1,23 +1,26 @@\n use std;\n import std::task;\n+import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: chan[int], number_of_messages: int) {\n+fn test00_start(pc: *u8, number_of_messages: int) {\n+    let c = comm::chan_from_unsafe_ptr(pc);\n     let i: int = 0;\n-    while i < number_of_messages { c <| i; i += 1; }\n+    while i < number_of_messages { c.send(i); i += 1; }\n }\n \n fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n-    let p: port[int] = port();\n+    let p = comm::mk_port();\n     let number_of_messages: int = 10;\n \n-    let t0: task = spawn test00_start(chan(p), number_of_messages);\n+    let t0: task = spawn test00_start(p.mk_chan().unsafe_ptr(),\n+                                      number_of_messages);\n \n     let i: int = 0;\n-    while i < number_of_messages { p |> r; sum += r; log r; i += 1; }\n+    while i < number_of_messages { r = p.recv(); sum += r; log r; i += 1; }\n \n     task::join(t0);\n "}, {"sha": "b65939e28542cb5c5aeee54d28b2f7f544b26b04", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=d9b84a546cf7968ef7a9e3558c2f0c3d88ba033c", "patch": "@@ -16,4 +16,4 @@ fn send_recv() {\n     let v = p.recv();\n     log_err v;\n     assert(42 == v);\n-}\n\\ No newline at end of file\n+}"}]}