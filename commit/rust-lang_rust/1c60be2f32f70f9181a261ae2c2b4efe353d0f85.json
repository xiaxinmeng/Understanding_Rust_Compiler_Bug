{"sha": "1c60be2f32f70f9181a261ae2c2b4efe353d0f85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNjBiZTJmMzJmNzBmOTE4MWEyNjFhZTJjMmI0ZWZlMzUzZDBmODU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-25T01:25:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-25T01:25:10Z"}, "message": "Fix bad output-slot logic in tag constructors.", "tree": {"sha": "d4907c3dce08f41d8ca8e05acb6fca53d57930ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4907c3dce08f41d8ca8e05acb6fca53d57930ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c60be2f32f70f9181a261ae2c2b4efe353d0f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c60be2f32f70f9181a261ae2c2b4efe353d0f85", "html_url": "https://github.com/rust-lang/rust/commit/1c60be2f32f70f9181a261ae2c2b4efe353d0f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c60be2f32f70f9181a261ae2c2b4efe353d0f85/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf29b882acdf477be412fdb401b0fc2a6c819aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf29b882acdf477be412fdb401b0fc2a6c819aa", "html_url": "https://github.com/rust-lang/rust/commit/bcf29b882acdf477be412fdb401b0fc2a6c819aa"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "d241e549dbc9a74b074da3cf697bdacd6551955b", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1c60be2f32f70f9181a261ae2c2b4efe353d0f85/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/1c60be2f32f70f9181a261ae2c2b4efe353d0f85/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=1c60be2f32f70f9181a261ae2c2b4efe353d0f85", "patch": "@@ -4675,21 +4675,24 @@ let trans_visitor\n     let tag_keys = sorted_htab_keys ttag in\n     let i = arr_idx tag_keys (Ast.NAME_base (Ast.BASE_ident n)) in\n     let _ = log cx \"tag variant: %s -> tag value #%d\" n i in\n-    let out_cell = deref (ptr_at (fp_imm out_mem_disp) (Ast.TY_tag ttag)) in\n-    let tag_cell = get_element_ptr out_cell 0 in\n-    let union_cell = get_element_ptr_dyn_in_current_frame out_cell 1 in\n-    let dst = get_variant_ptr union_cell i in\n-    let dst_ty = snd (need_mem_cell dst) in\n+    let (dst_cell, dst_slot) = get_current_output_cell_and_slot() in\n+    let dst_cell = deref_slot true dst_cell dst_slot in\n     let src = get_explicit_args_for_current_frame () in\n+    let tag_cell = get_element_ptr dst_cell 0 in\n+    let union_cell = get_element_ptr_dyn_in_current_frame dst_cell 1 in\n+    let tag_body_cell = get_variant_ptr union_cell i in\n+    let tag_body_rty = snd (need_mem_cell tag_body_cell) in\n       (* A clever compiler will inline this. We are not clever. *)\n-        iflog (fun _ -> annotate (Printf.sprintf \"write tag #%d\" i));\n-        mov tag_cell (imm (Int64.of_int i));\n-        iflog (fun _ -> annotate (\"copy tag-content tuple: dst_ty=\" ^\n-                                    (Il.string_of_referent_ty dst_ty)));\n-        trans_copy_tup (get_ty_params_of_current_frame()) true dst src slots;\n-        trace_str cx.ctxt_sess.Session.sess_trace_tag\n-          (\"finished tag constructor \" ^ n);\n-        trans_frame_exit tagid true;\n+      iflog (fun _ -> annotate (Printf.sprintf \"write tag #%d\" i));\n+      mov tag_cell (imm (Int64.of_int i));\n+      iflog (fun _ -> annotate (\"copy tag-content tuple: tag_body_rty=\" ^\n+                                  (Il.string_of_referent_ty tag_body_rty)));\n+      trans_copy_tup\n+        (get_ty_params_of_current_frame())\n+        true tag_body_cell src slots;\n+      trace_str cx.ctxt_sess.Session.sess_trace_tag\n+        (\"finished tag constructor \" ^ n);\n+      trans_frame_exit tagid true;\n   in\n \n   let enter_file_for id ="}, {"sha": "2a371317541a9b99b05adaeec7dda16037f28a2e", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c60be2f32f70f9181a261ae2c2b4efe353d0f85/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c60be2f32f70f9181a261ae2c2b4efe353d0f85/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=1c60be2f32f70f9181a261ae2c2b4efe353d0f85", "patch": "@@ -1,10 +1,10 @@\n // -*- rust -*-\n \n-type pair = rec(int head, mutable @mlist tail);\n-type mlist = tag(cons(@pair), nil());\n+type cell = tup(mutable @list);\n+type list = tag(link(@cell), nil());\n \n fn main() {\n-  let @pair p = rec(head=10, tail=mutable nil());\n-  let @mlist cycle = cons(p);\n-  //p.tail = cycle;\n+  let @cell first = tup(@nil());\n+  let @cell second = tup(@link(first));\n+  first._0 = link(second);\n }"}]}