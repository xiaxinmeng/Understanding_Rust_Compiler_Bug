{"sha": "d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYTZkNDdmOTQzZDhkZjlkNTY1ZGU4MzViYWJjMWUyZjNlOGQ0NWE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-28T22:44:51Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-05T16:05:25Z"}, "message": "Make LLVM symbol visibility FFI types more stable.", "tree": {"sha": "fa870471adbdad1375b41e8c4f544efa636c5ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa870471adbdad1375b41e8c4f544efa636c5ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "html_url": "https://github.com/rust-lang/rust/commit/d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1a6d47f943d8df9d565de835babc1e2f3e8d45a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692d7cfb0ce5ba43311ae553a3debcf09755b6b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/692d7cfb0ce5ba43311ae553a3debcf09755b6b9", "html_url": "https://github.com/rust-lang/rust/commit/692d7cfb0ce5ba43311ae553a3debcf09755b6b9"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "d2592a3acee473fa49d1090fd65656e28331f54c", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d1a6d47f943d8df9d565de835babc1e2f3e8d45a/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a6d47f943d8df9d565de835babc1e2f3e8d45a/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "patch": "@@ -64,6 +64,15 @@ pub enum Linkage {\n     CommonLinkage = 10,\n }\n \n+// LLVMRustVisibility\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[repr(C)]\n+pub enum Visibility {\n+    Default = 0,\n+    Hidden = 1,\n+    Protected = 2,\n+}\n+\n /// LLVMDiagnosticSeverity\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n@@ -399,13 +408,6 @@ pub type OperandBundleDefRef = *mut OperandBundleDef_opaque;\n pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void);\n pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n \n-/// LLVMVisibility\n-#[repr(C)]\n-pub enum Visibility {\n-    Default,\n-    Hidden,\n-    Protected,\n-}\n \n pub mod debuginfo {\n     use super::MetadataRef;\n@@ -655,7 +657,8 @@ extern \"C\" {\n     pub fn LLVMRustSetLinkage(Global: ValueRef, RustLinkage: Linkage);\n     pub fn LLVMGetSection(Global: ValueRef) -> *const c_char;\n     pub fn LLVMSetSection(Global: ValueRef, Section: *const c_char);\n-    pub fn LLVMSetVisibility(Global: ValueRef, Viz: Visibility);\n+    pub fn LLVMRustGetVisibility(Global: ValueRef) -> Visibility;\n+    pub fn LLVMRustSetVisibility(Global: ValueRef, Viz: Visibility);\n     pub fn LLVMGetAlignment(Global: ValueRef) -> c_uint;\n     pub fn LLVMSetAlignment(Global: ValueRef, Bytes: c_uint);\n     pub fn LLVMSetDLLStorageClass(V: ValueRef, C: DLLStorageClass);"}, {"sha": "eef3b9b11474bee1d9c6e2fc052ebdf437435834", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a6d47f943d8df9d565de835babc1e2f3e8d45a/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a6d47f943d8df9d565de835babc1e2f3e8d45a/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "patch": "@@ -78,7 +78,7 @@ fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty:\n     // don't want the symbols to get exported.\n     if attr::contains_name(ccx.tcx().map.krate_attrs(), \"compiler_builtins\") {\n         unsafe {\n-            llvm::LLVMSetVisibility(llfn, llvm::Visibility::Hidden);\n+            llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n         }\n     }\n "}, {"sha": "6a95b65d5e92f66e704e42ec3f0ec87e3d1be6a0", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d1a6d47f943d8df9d565de835babc1e2f3e8d45a/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d1a6d47f943d8df9d565de835babc1e2f3e8d45a/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "patch": "@@ -1408,3 +1408,45 @@ extern \"C\" void LLVMRustSetLinkage(LLVMValueRef V, LLVMRustLinkage RustLinkage)\n extern \"C\" LLVMContextRef LLVMRustGetValueContext(LLVMValueRef V) {\n     return wrap(&unwrap(V)->getContext());\n }\n+\n+enum class LLVMRustVisibility {\n+    Default = 0,\n+    Hidden = 1,\n+    Protected = 2,\n+};\n+\n+static LLVMRustVisibility to_rust(LLVMVisibility vis) {\n+    switch (vis) {\n+        case LLVMDefaultVisibility:\n+            return LLVMRustVisibility::Default;\n+        case LLVMHiddenVisibility:\n+            return LLVMRustVisibility::Hidden;\n+        case LLVMProtectedVisibility:\n+            return LLVMRustVisibility::Protected;\n+\n+        default:\n+            llvm_unreachable(\"Invalid LLVMRustVisibility value!\");\n+    }\n+}\n+\n+static LLVMVisibility from_rust(LLVMRustVisibility vis) {\n+    switch (vis) {\n+        case LLVMRustVisibility::Default:\n+            return LLVMDefaultVisibility;\n+        case LLVMRustVisibility::Hidden:\n+            return LLVMHiddenVisibility;\n+        case LLVMRustVisibility::Protected:\n+            return LLVMProtectedVisibility;\n+\n+        default:\n+            llvm_unreachable(\"Invalid LLVMRustVisibility value!\");\n+    }\n+}\n+\n+extern \"C\" LLVMRustVisibility LLVMRustGetVisibility(LLVMValueRef V) {\n+    return to_rust(LLVMGetVisibility(V));\n+}\n+\n+extern \"C\" void LLVMRustSetVisibility(LLVMValueRef V, LLVMRustVisibility RustVisibility) {\n+    LLVMSetVisibility(V, from_rust(RustVisibility));\n+}"}]}