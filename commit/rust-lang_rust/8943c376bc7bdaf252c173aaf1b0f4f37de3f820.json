{"sha": "8943c376bc7bdaf252c173aaf1b0f4f37de3f820", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NDNjMzc2YmM3YmRhZjI1MmMxNzNhYWYxYjBmNGYzN2RlM2Y4MjA=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-07T06:37:44Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-09T05:07:05Z"}, "message": "Use RefCell for RewriteContext fields", "tree": {"sha": "fc276c145ffe5f0a53a1e828d27989a2dc0be228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc276c145ffe5f0a53a1e828d27989a2dc0be228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8943c376bc7bdaf252c173aaf1b0f4f37de3f820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8943c376bc7bdaf252c173aaf1b0f4f37de3f820", "html_url": "https://github.com/rust-lang/rust/commit/8943c376bc7bdaf252c173aaf1b0f4f37de3f820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8943c376bc7bdaf252c173aaf1b0f4f37de3f820/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c", "html_url": "https://github.com/rust-lang/rust/commit/dc2f1429e73edd23b1736b31d2b6ce48ab5d0e9c"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "f65a6916af5b7eb9a409e8ecd1f343d486b708ca", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8943c376bc7bdaf252c173aaf1b0f4f37de3f820/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943c376bc7bdaf252c173aaf1b0f4f37de3f820/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=8943c376bc7bdaf252c173aaf1b0f4f37de3f820", "patch": "@@ -251,7 +251,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         Cow::from(\"\")\n     } else {\n         // Use new lines.\n-        if context.force_one_line_chain {\n+        if *context.force_one_line_chain.borrow() {\n             return None;\n         }\n         nested_shape.indent.to_string_with_newline(context.config)"}, {"sha": "01671227e39bdb797a24e0116f883e87f9134483", "filename": "src/rewrite.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8943c376bc7bdaf252c173aaf1b0f4f37de3f820/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943c376bc7bdaf252c173aaf1b0f4f37de3f820/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=8943c376bc7bdaf252c173aaf1b0f4f37de3f820", "patch": "@@ -17,6 +17,8 @@ use config::{Config, IndentStyle};\n use shape::Shape;\n use visitor::SnippetProvider;\n \n+use std::cell::RefCell;\n+\n pub trait Rewrite {\n     /// Rewrite self into shape.\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String>;\n@@ -29,12 +31,12 @@ pub struct RewriteContext<'a> {\n     pub config: &'a Config,\n     pub inside_macro: bool,\n     // Force block indent style even if we are using visual indent style.\n-    pub use_block: bool,\n+    pub use_block: RefCell<bool>,\n     // When `format_if_else_cond_comment` is true, unindent the comment on top\n     // of the `else` or `else if`.\n     pub is_if_else_block: bool,\n     // When rewriting chain, veto going multi line except the last element\n-    pub force_one_line_chain: bool,\n+    pub force_one_line_chain: RefCell<bool>,\n     pub snippet_provider: &'a SnippetProvider<'a>,\n }\n \n@@ -45,7 +47,7 @@ impl<'a> RewriteContext<'a> {\n \n     /// Return true if we should use block indent style for rewriting function call.\n     pub fn use_block_indent(&self) -> bool {\n-        self.config.indent_style() == IndentStyle::Block || self.use_block\n+        self.config.indent_style() == IndentStyle::Block || *self.use_block.borrow()\n     }\n \n     pub fn budget(&self, used_width: usize) -> usize {"}, {"sha": "f1b50e19b610fa8e2a8af6cac9e46b7978c751b3", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8943c376bc7bdaf252c173aaf1b0f4f37de3f820/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943c376bc7bdaf252c173aaf1b0f4f37de3f820/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8943c376bc7bdaf252c173aaf1b0f4f37de3f820", "patch": "@@ -26,6 +26,8 @@ use shape::{Indent, Shape};\n use spanned::Spanned;\n use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n+use std::cell::RefCell;\n+\n /// Creates a string slice corresponding to the specified span.\n pub struct SnippetProvider<'a> {\n     /// A pointer to the content of the file we are formatting.\n@@ -691,9 +693,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             inside_macro: false,\n-            use_block: false,\n+            use_block: RefCell::new(false),\n             is_if_else_block: false,\n-            force_one_line_chain: false,\n+            force_one_line_chain: RefCell::new(false),\n             snippet_provider: self.snippet_provider,\n         }\n     }"}]}