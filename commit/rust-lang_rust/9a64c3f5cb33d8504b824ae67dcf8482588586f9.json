{"sha": "9a64c3f5cb33d8504b824ae67dcf8482588586f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjRjM2Y1Y2IzM2Q4NTA0YjgyNGFlNjdkY2Y4NDgyNTg4NTg2Zjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-19T01:53:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-28T19:37:59Z"}, "message": "Show information of chain of bound obligations\n\nWhen the obligation that couldn't be fulfilled is specific to a nested\nobligation, maintain both the nested and parent obligations around for\nmore accurate and detailed error reporting.", "tree": {"sha": "6ef6428fa124c23ec0b3b0f88123faf33a9a1c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef6428fa124c23ec0b3b0f88123faf33a9a1c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a64c3f5cb33d8504b824ae67dcf8482588586f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a64c3f5cb33d8504b824ae67dcf8482588586f9", "html_url": "https://github.com/rust-lang/rust/commit/9a64c3f5cb33d8504b824ae67dcf8482588586f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a64c3f5cb33d8504b824ae67dcf8482588586f9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8119d0853d6f227c5e36ab423b6e2f22604fa87d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8119d0853d6f227c5e36ab423b6e2f22604fa87d", "html_url": "https://github.com/rust-lang/rust/commit/8119d0853d6f227c5e36ab423b6e2f22604fa87d"}], "stats": {"total": 171, "additions": 111, "deletions": 60}, "files": [{"sha": "b09522bbd33dad57b6da5c160bf9a00a2ec1b9be", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -67,7 +67,7 @@ pub enum MethodError<'tcx> {\n // could lead to matches if satisfied, and a list of not-in-scope traits which may work.\n pub struct NoMatchData<'tcx> {\n     pub static_candidates: Vec<CandidateSource>,\n-    pub unsatisfied_predicates: Vec<ty::Predicate<'tcx>>,\n+    pub unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n     pub out_of_scope_traits: Vec<DefId>,\n     pub lev_candidate: Option<ty::AssocItem>,\n     pub mode: probe::Mode,\n@@ -76,7 +76,7 @@ pub struct NoMatchData<'tcx> {\n impl<'tcx> NoMatchData<'tcx> {\n     pub fn new(\n         static_candidates: Vec<CandidateSource>,\n-        unsatisfied_predicates: Vec<ty::Predicate<'tcx>>,\n+        unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n         out_of_scope_traits: Vec<DefId>,\n         lev_candidate: Option<ty::AssocItem>,\n         mode: probe::Mode,"}, {"sha": "3e2826907b880dc7e5d5466d20aae6ed5ad47be2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -77,7 +77,7 @@ struct ProbeContext<'a, 'tcx> {\n \n     /// Collects near misses when trait bounds for type parameters are unsatisfied and is only used\n     /// for error reporting\n-    unsatisfied_predicates: Vec<ty::Predicate<'tcx>>,\n+    unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n \n     is_suggestion: IsSuggestion,\n }\n@@ -1223,7 +1223,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &self,\n         self_ty: Ty<'tcx>,\n         probes: ProbesIter,\n-        possibly_unsatisfied_predicates: &mut Vec<ty::Predicate<'tcx>>,\n+        possibly_unsatisfied_predicates: &mut Vec<(\n+            ty::Predicate<'tcx>,\n+            Option<ty::Predicate<'tcx>>,\n+        )>,\n         unstable_candidates: Option<&mut Vec<(&'b Candidate<'tcx>, Symbol)>>,\n     ) -> Option<PickResult<'tcx>>\n     where\n@@ -1342,7 +1345,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &self,\n         self_ty: Ty<'tcx>,\n         probe: &Candidate<'tcx>,\n-        possibly_unsatisfied_predicates: &mut Vec<ty::Predicate<'tcx>>,\n+        possibly_unsatisfied_predicates: &mut Vec<(\n+            ty::Predicate<'tcx>,\n+            Option<ty::Predicate<'tcx>>,\n+        )>,\n     ) -> ProbeResult {\n         debug!(\"consider_probe: self_ty={:?} probe={:?}\", self_ty, probe);\n \n@@ -1409,20 +1415,25 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                                         if !self.predicate_may_hold(&obligation) {\n                                             result = ProbeResult::NoMatch;\n                                             let o = self.resolve_vars_if_possible(obligation);\n-                                            possibly_unsatisfied_predicates.push(o.predicate);\n+                                            let predicate =\n+                                                self.resolve_vars_if_possible(&predicate);\n+                                            let p = if predicate == o.predicate {\n+                                                // Avoid \"`MyStruct: Foo` which is required by\n+                                                // `MyStruct: Foo`\" in E0599.\n+                                                None\n+                                            } else {\n+                                                Some(predicate)\n+                                            };\n+                                            possibly_unsatisfied_predicates.push((o.predicate, p));\n                                         }\n                                     }\n                                 }\n                                 _ => {\n                                     // Some nested subobligation of this predicate\n                                     // failed.\n-                                    //\n-                                    // FIXME: try to find the exact nested subobligation\n-                                    // and point at it rather than reporting the entire\n-                                    // trait-ref?\n                                     result = ProbeResult::NoMatch;\n                                     let predicate = self.resolve_vars_if_possible(&predicate);\n-                                    possibly_unsatisfied_predicates.push(predicate);\n+                                    possibly_unsatisfied_predicates.push((predicate, None));\n                                 }\n                             }\n                             false\n@@ -1447,7 +1458,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 let o = self.resolve_vars_if_possible(&o);\n                 if !self.predicate_may_hold(&o) {\n                     result = ProbeResult::NoMatch;\n-                    possibly_unsatisfied_predicates.push(o.predicate);\n+                    possibly_unsatisfied_predicates.push((o.predicate, None));\n                 }\n             }\n "}, {"sha": "973f8208f16f69bc0a1a6fc658e8368ca2ae99a1", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 49, "deletions": 33, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -538,9 +538,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let def_span =\n                         |def_id| self.tcx.sess.source_map().def_span(self.tcx.def_span(def_id));\n                     let mut bound_spans = vec![];\n-                    let mut bound_list = unsatisfied_predicates\n-                        .iter()\n-                        .filter_map(|pred| match pred {\n+                    let mut bound_span_label = |self_ty: Ty<'_>, obligation: &str| {\n+                        match &self_ty.kind {\n+                            ty::Adt(def, _) => {\n+                                // Point at the type that couldn't satisfy the bound.\n+                                bound_spans.push((\n+                                    def_span(def.did),\n+                                    format!(\"doesn't satisfy {}\", obligation),\n+                                ));\n+                            }\n+                            ty::Dynamic(preds, _) => {\n+                                // Point at the trait object that couldn't satisfy the bound.\n+                                for pred in *preds.skip_binder() {\n+                                    match pred {\n+                                        ty::ExistentialPredicate::Trait(tr) => bound_spans.push((\n+                                            def_span(tr.def_id),\n+                                            format!(\"doesn't satisfy {}\", obligation),\n+                                        )),\n+                                        ty::ExistentialPredicate::Projection(_)\n+                                        | ty::ExistentialPredicate::AutoTrait(_) => {}\n+                                    }\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n+                    };\n+                    let mut format_pred = |pred| {\n+                        match pred {\n                             ty::Predicate::Projection(pred) => {\n                                 // `<Foo as Iterator>::Item = String`.\n                                 let trait_ref =\n@@ -549,44 +573,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     .tcx\n                                     .associated_item(pred.skip_binder().projection_ty.item_def_id);\n                                 let ty = pred.skip_binder().ty;\n-                                Some(format!(\"`{}::{} = {}`\", trait_ref, assoc.ident, ty))\n+                                let obligation =\n+                                    format!(\"`{}::{} = {}`\", trait_ref, assoc.ident, ty);\n+                                bound_span_label(trait_ref.self_ty(), &obligation);\n+                                Some(obligation)\n                             }\n                             ty::Predicate::Trait(poly_trait_ref, _) => {\n                                 let p = poly_trait_ref.skip_binder().trait_ref;\n                                 let self_ty = p.self_ty();\n                                 let path = p.print_only_trait_path();\n-                                match &self_ty.kind {\n-                                    ty::Adt(def, _) => {\n-                                        // Point at the type that couldn't satisfy the bound.\n-                                        bound_spans.push((\n-                                            def_span(def.did),\n-                                            format!(\"doesn't satisfy `{}: {}`\", self_ty, path),\n-                                        ));\n-                                    }\n-                                    ty::Dynamic(preds, _) => {\n-                                        // Point at the trait object that couldn't satisfy the bound.\n-                                        for pred in *preds.skip_binder() {\n-                                            match pred {\n-                                                ty::ExistentialPredicate::Trait(tr) => bound_spans\n-                                                    .push((\n-                                                        def_span(tr.def_id),\n-                                                        format!(\n-                                                            \"doesn't satisfy `{}: {}`\",\n-                                                            self_ty, path\n-                                                        ),\n-                                                    )),\n-                                                ty::ExistentialPredicate::Projection(_)\n-                                                | ty::ExistentialPredicate::AutoTrait(_) => {}\n-                                            }\n-                                        }\n-                                    }\n-                                    _ => {}\n-                                }\n-                                Some(format!(\"`{}: {}`\", self_ty, path))\n+                                let obligation = format!(\"`{}: {}`\", self_ty, path);\n+                                bound_span_label(self_ty, &obligation);\n+                                Some(obligation)\n                             }\n                             _ => None,\n+                        }\n+                    };\n+                    let mut bound_list = unsatisfied_predicates\n+                        .iter()\n+                        .filter_map(|(pred, parent_pred)| {\n+                            format_pred(*pred).map(|pred| match parent_pred {\n+                                None => pred,\n+                                Some(parent_pred) => match format_pred(*parent_pred) {\n+                                    None => pred,\n+                                    Some(parent_pred) => {\n+                                        format!(\"{} which is required by {}\", pred, parent_pred)\n+                                    }\n+                                },\n+                            })\n                         })\n-                        .collect::<Vec<_>>();\n+                        .collect::<Vec<String>>();\n                     bound_list.sort();\n                     bound_list.dedup(); // #35677\n                     bound_spans.sort();"}, {"sha": "e837c7721afe39941d9db05f1fcdd1085086242e", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -2,7 +2,10 @@ error[E0599]: no method named `clone` found for struct `Bar<NotClone>` in the cu\n   --> $DIR/derive-assoc-type-not-impl.rs:18:30\n    |\n LL | struct Bar<T: Foo> {\n-   | ------------------ method `clone` not found for this\n+   | ------------------\n+   | |\n+   | method `clone` not found for this\n+   | doesn't satisfy `Bar<NotClone>: std::clone::Clone`\n ...\n LL | struct NotClone;\n    | ---------------- doesn't satisfy `NotClone: std::clone::Clone`\n@@ -11,7 +14,7 @@ LL |     Bar::<NotClone> { x: 1 }.clone();\n    |                              ^^^^^ method not found in `Bar<NotClone>`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `NotClone: std::clone::Clone`\n+           `NotClone: std::clone::Clone` which is required by `Bar<NotClone>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "bbd166180499a1ffcd693273600f79e8092125cb", "filename": "src/test/ui/issues/issue-21596.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -7,7 +7,7 @@ LL |     println!(\"{}\", z.to_string());\n    = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\n    = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior\n    = note: the method `to_string` exists but the following trait bounds were not satisfied:\n-           `*const u8: std::fmt::Display`\n+           `*const u8: std::fmt::Display` which is required by `*const u8: std::string::ToString`\n \n error: aborting due to previous error\n "}, {"sha": "9100f2c3a938d1750828247ef31b23321b56d281", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -17,10 +17,13 @@ LL |         .collect();\n    |\n LL | pub struct Cloned<I> {\n    | -------------------- doesn't satisfy `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+...\n+LL | pub struct TakeWhile<I, P> {\n+   | -------------------------- doesn't satisfy `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item = &_`\n    |\n    = note: the method `collect` exists but the following trait bounds were not satisfied:\n-           `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item = &_`\n-           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+           `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item = &_` which is required by `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator` which is required by `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b4e54ab77838fc27a74ac62f55c26eeec864d9a4", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -44,7 +44,7 @@ LL |      .take()\n    |       ^^^^ method not found in `Foo`\n    |\n    = note: the method `take` exists but the following trait bounds were not satisfied:\n-           `Foo: std::iter::Iterator`\n+           `Foo: std::iter::Iterator` which is required by `&mut Foo: std::iter::Iterator`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following traits define an item `take`, perhaps you need to implement one of them:\n            candidate #1: `std::io::Read`"}, {"sha": "5899dfffa41de71e90f5275f7b860415eb84e8d7", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -10,9 +10,9 @@ LL | pub struct Filter<I, P> {\n    | ----------------------- doesn't satisfy `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n    |\n    = note: the method `count` exists but the following trait bounds were not satisfied:\n-           `<[closure@$DIR/issue-36053-2.rs:11:39: 11:53] as std::ops::FnOnce<(&&str,)>>::Output = bool`\n-           `[closure@$DIR/issue-36053-2.rs:11:39: 11:53]: std::ops::FnMut<(&&str,)>`\n-           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+           `<[closure@$DIR/issue-36053-2.rs:11:39: 11:53] as std::ops::FnOnce<(&&str,)>>::Output = bool` which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+           `[closure@$DIR/issue-36053-2.rs:11:39: 11:53]: std::ops::FnMut<(&&str,)>` which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator` which is required by `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:11:32"}, {"sha": "5d297728eca6d46b3fd012ef8c4c7d0782c1e4e4", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -30,9 +30,14 @@ error[E0599]: no method named `write_fmt` found for struct `std::io::BufWriter<&\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::io::BufWriter<&dyn std::io::Write>`\n+   | \n+  ::: $SRC_DIR/libstd/io/buffered.rs:LL:COL\n+   |\n+LL | pub struct BufWriter<W: Write> {\n+   | ------------------------------ doesn't satisfy `std::io::BufWriter<&dyn std::io::Write>: std::io::Write`\n    |\n    = note: the method `write_fmt` exists but the following trait bounds were not satisfied:\n-           `&dyn std::io::Write: std::io::Write`\n+           `&dyn std::io::Write: std::io::Write` which is required by `std::io::BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "456e1cd83ef4e11e64dd1ec9817c2e17cbd9ba03", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -11,7 +11,10 @@ error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the c\n   --> $DIR/union-derive-clone.rs:37:15\n    |\n LL | union U5<T> {\n-   | ----------- method `clone` not found for this\n+   | -----------\n+   | |\n+   | method `clone` not found for this\n+   | doesn't satisfy `U5<CloneNoCopy>: std::clone::Clone`\n ...\n LL | struct CloneNoCopy;\n    | ------------------- doesn't satisfy `CloneNoCopy: std::marker::Copy`\n@@ -20,7 +23,7 @@ LL |     let w = u.clone();\n    |               ^^^^^ method not found in `U5<CloneNoCopy>`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `CloneNoCopy: std::marker::Copy`\n+           `CloneNoCopy: std::marker::Copy` which is required by `U5<CloneNoCopy>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "c3be38e1cf15d099a90d7b2a505cc9558c0761a9", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -9,10 +9,15 @@ LL | trait Foo {\n ...\n LL |     let _z = y.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<dyn Foo>`\n+   | \n+  ::: $SRC_DIR/liballoc/boxed.rs:LL:COL\n+   |\n+LL | pub struct Box<T: ?Sized>(Unique<T>);\n+   | ------------------------------------- doesn't satisfy `std::boxed::Box<dyn Foo>: std::clone::Clone`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `dyn Foo: std::clone::Clone`\n-           `dyn Foo: std::marker::Sized`\n+           `dyn Foo: std::clone::Clone` which is required by `std::boxed::Box<dyn Foo>: std::clone::Clone`\n+           `dyn Foo: std::marker::Sized` which is required by `std::boxed::Box<dyn Foo>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "fb2f4c01b63b8cfdee8c95a2a05b58943e2ae7f5", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a64c3f5cb33d8504b824ae67dcf8482588586f9/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=9a64c3f5cb33d8504b824ae67dcf8482588586f9", "patch": "@@ -6,9 +6,14 @@ LL | struct R {\n ...\n LL |     let _j = i.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<R>`\n+   | \n+  ::: $SRC_DIR/liballoc/boxed.rs:LL:COL\n+   |\n+LL | pub struct Box<T: ?Sized>(Unique<T>);\n+   | ------------------------------------- doesn't satisfy `std::boxed::Box<R>: std::clone::Clone`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `R: std::clone::Clone`\n+           `R: std::clone::Clone` which is required by `std::boxed::Box<R>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}]}