{"sha": "6203e9c4faee288f16d93dbb7dd0f1f8df487d83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDNlOWM0ZmFlZTI4OGYxNmQ5M2RiYjdkZDBmMWY4ZGY0ODdkODM=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-07T09:23:38Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-07T09:23:38Z"}, "message": "add if let and while let postfix for Option and Result #4348\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "55e64d14c213b74ce32e6db5cc5d84c201b1bf0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e64d14c213b74ce32e6db5cc5d84c201b1bf0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6203e9c4faee288f16d93dbb7dd0f1f8df487d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6203e9c4faee288f16d93dbb7dd0f1f8df487d83", "html_url": "https://github.com/rust-lang/rust/commit/6203e9c4faee288f16d93dbb7dd0f1f8df487d83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6203e9c4faee288f16d93dbb7dd0f1f8df487d83/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb55966fe0fee791072f275ac55b90b8ee13e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb55966fe0fee791072f275ac55b90b8ee13e32", "html_url": "https://github.com/rust-lang/rust/commit/9cb55966fe0fee791072f275ac55b90b8ee13e32"}], "stats": {"total": 222, "additions": 221, "deletions": 1}, "files": [{"sha": "7e840add54f2c78a0c047c322c81f2288191b80e", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6203e9c4faee288f16d93dbb7dd0f1f8df487d83/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6203e9c4faee288f16d93dbb7dd0f1f8df487d83/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6203e9c4faee288f16d93dbb7dd0f1f8df487d83", "patch": "@@ -1083,6 +1083,28 @@ impl Type {\n         matches!(self.ty.value, Ty::Apply(ApplicationTy { ctor: TypeCtor::Bool, .. }))\n     }\n \n+    pub fn is_option(&self, db: &dyn HirDatabase) -> bool {\n+        if let Some(adt_ty) = self.as_adt() {\n+            if let Adt::Enum(_) = adt_ty {\n+                if self.display(db).to_string().starts_with(\"Option<\") {\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n+    pub fn is_result(&self, db: &dyn HirDatabase) -> bool {\n+        if let Some(adt_ty) = self.as_adt() {\n+            if let Adt::Enum(_) = adt_ty {\n+                if self.display(db).to_string().starts_with(\"Result<\") {\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     pub fn is_mutable_reference(&self) -> bool {\n         matches!(\n             self.ty.value,"}, {"sha": "dc32bbee24a9d867e5d97d1e112aa308f9069e60", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 199, "deletions": 1, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/6203e9c4faee288f16d93dbb7dd0f1f8df487d83/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6203e9c4faee288f16d93dbb7dd0f1f8df487d83/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=6203e9c4faee288f16d93dbb7dd0f1f8df487d83", "patch": "@@ -38,7 +38,47 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n-    if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n+    if receiver_ty.is_option(ctx.db) {\n+        postfix_snippet(\n+            ctx,\n+            cap,\n+            &dot_receiver,\n+            \"ifl\",\n+            \"if let Some {}\",\n+            &format!(\"if let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+        )\n+        .add_to(acc);\n+\n+        postfix_snippet(\n+            ctx,\n+            cap,\n+            &dot_receiver,\n+            \"while\",\n+            \"while let Some {}\",\n+            &format!(\"while let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+        )\n+        .add_to(acc);\n+    } else if receiver_ty.is_result(ctx.db) {\n+        postfix_snippet(\n+            ctx,\n+            cap,\n+            &dot_receiver,\n+            \"ifl\",\n+            \"if let Ok {}\",\n+            &format!(\"if let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+        )\n+        .add_to(acc);\n+\n+        postfix_snippet(\n+            ctx,\n+            cap,\n+            &dot_receiver,\n+            \"while\",\n+            \"while let Ok {}\",\n+            &format!(\"while let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+        )\n+        .add_to(acc);\n+    } else if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n         postfix_snippet(\n             ctx,\n             cap,\n@@ -235,6 +275,164 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn postfix_completion_works_for_option() {\n+        assert_debug_snapshot!(\n+            do_postfix_completion(\n+                r#\"\n+                enum Option<T> {\n+                    Some(T),\n+                    None,\n+                }\n+\n+                fn main() {\n+                    let bar = Option::Some(true);\n+                    bar.<|>\n+                }\n+                \"#,\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"Box::new(bar)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"dbg!(bar)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"ifl\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"if let Some($1) = bar {\\n    $0\\n}\",\n+                detail: \"if let Some {}\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"match bar {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"!bar\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"&bar\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"&mut bar\",\n+                detail: \"&mut expr\",\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: 210..210,\n+                delete: 206..210,\n+                insert: \"while let Some($1) = bar {\\n    $0\\n}\",\n+                detail: \"while let Some {}\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn postfix_completion_works_for_result() {\n+        assert_debug_snapshot!(\n+            do_postfix_completion(\n+                r#\"\n+                enum Result<T, E> {\n+                    Ok(T),\n+                    Err(E),\n+                }\n+\n+                fn main() {\n+                    let bar = Result::Ok(true);\n+                    bar.<|>\n+                }\n+                \"#,\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"Box::new(bar)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"dbg!(bar)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"ifl\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"if let Ok($1) = bar {\\n    $0\\n}\",\n+                detail: \"if let Ok {}\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"match bar {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"!bar\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"&bar\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"&mut bar\",\n+                detail: \"&mut expr\",\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: 211..211,\n+                delete: 207..211,\n+                insert: \"while let Ok($1) = bar {\\n    $0\\n}\",\n+                detail: \"while let Ok {}\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn some_postfix_completions_ignored() {\n         assert_debug_snapshot!("}]}