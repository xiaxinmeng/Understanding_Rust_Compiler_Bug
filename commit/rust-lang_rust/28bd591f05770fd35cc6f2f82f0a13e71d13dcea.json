{"sha": "28bd591f05770fd35cc6f2f82f0a13e71d13dcea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YmQ1OTFmMDU3NzBmZDM1Y2M2ZjJmODJmMGExM2U3MWQxM2RjZWE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-30T17:50:03Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T15:12:49Z"}, "message": "Only build suggestion if necessary in `USELESS_VEC`", "tree": {"sha": "239d296fa9a80f504e8c92c8f7fe083413fa0a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/239d296fa9a80f504e8c92c8f7fe083413fa0a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28bd591f05770fd35cc6f2f82f0a13e71d13dcea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdohxAAoJEF5CfHlMukXo6rgP/RtEAswcUNPXyfkAjYdTr/zB\no+O8Z/VDLn4Z9CQaJKmSMqcMp4b/Uz8M06Zcb8pQrukwOAih2X0X9VDQxNK3XzTG\nuZdZGjD9b8sCIP6jFym+v6M18a443zPAZwulmeuLft6dYbILCSQgQ/CwTwurcdi/\nSV3kAffqeKnqp6fyYp76B5j1UMIIqiEXi+Y5Cs2ezpmaASJ1W+DMdXVHx3lusK5N\nvKSEiMCKCGQuaSckq8rKXJtWsMEjsyvPKb3c9evCVOu48xIqGtBnWFGP6cxX444W\nxMqohkMpg6NOft864Ar8MdxlelnsdhrqbUJVaV7hkKPjQ7iY1jFOHunPWRhIJ0hA\n1BtSZtbKgCLEvmPBfjAMXGnziqeGNWZIC/E6i8Lje7CAFGPbMlGEoQcnaV7KBbwY\nT+Hes4Pp6y9+7OHhiaU1a/aP6Psr3RbRlUivl2C3B7yK1UlCuI1Na1MnJhM5pLAy\n86SBygVLOapleDjh8SFiVtpoILrPQRT1PBW1p7Hamh0+of83w/+Et/LYVm6BEvxS\nhzbtB4Tjaczbmfr9qe33pjiAOU6VS7MTtZRAUnQeZxhuhM7M5K0br99pUC7miyw+\nxRZLUj3lbjbi0rkD7iN8HK1xgqs/L6lva3oOuolFW943f7Hd+g1wd8DWoGFyFq4Y\nRripwONyAabefLCskQPX\n=ptnN\n-----END PGP SIGNATURE-----", "payload": "tree 239d296fa9a80f504e8c92c8f7fe083413fa0a1b\nparent 98f18f047482c08f173e757c0521820ba2deea58\nauthor mcarton <cartonmartin+git@gmail.com> 1467309003 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467385969 +0200\n\nOnly build suggestion if necessary in `USELESS_VEC`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28bd591f05770fd35cc6f2f82f0a13e71d13dcea", "html_url": "https://github.com/rust-lang/rust/commit/28bd591f05770fd35cc6f2f82f0a13e71d13dcea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28bd591f05770fd35cc6f2f82f0a13e71d13dcea/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f18f047482c08f173e757c0521820ba2deea58", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f18f047482c08f173e757c0521820ba2deea58", "html_url": "https://github.com/rust-lang/rust/commit/98f18f047482c08f173e757c0521820ba2deea58"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "6f4c5a1e0e26ddb9e176ee1011c2f24d3f39c5f8", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/28bd591f05770fd35cc6f2f82f0a13e71d13dcea/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28bd591f05770fd35cc6f2f82f0a13e71d13dcea/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=28bd591f05770fd35cc6f2f82f0a13e71d13dcea", "patch": "@@ -51,26 +51,26 @@ impl LateLintPass for Pass {\n \n fn check_vec_macro(cx: &LateContext, vec: &Expr, span: Span) {\n     if let Some(vec_args) = higher::vec_macro(cx, vec) {\n-        let snippet = match vec_args {\n-            higher::VecArgs::Repeat(elem, len) => {\n-                format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n-            }\n-            higher::VecArgs::Vec(args) => {\n-                if let Some(last) = args.iter().last() {\n-                    let span = Span {\n-                        lo: args[0].span.lo,\n-                        hi: last.span.hi,\n-                        expn_id: args[0].span.expn_id,\n-                    };\n+        span_lint_and_then(cx, USELESS_VEC, span, \"useless use of `vec!`\", |db| {\n+            let snippet = match vec_args {\n+                higher::VecArgs::Repeat(elem, len) => {\n+                    format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n+                }\n+                higher::VecArgs::Vec(args) => {\n+                    if let Some(last) = args.iter().last() {\n+                        let span = Span {\n+                            lo: args[0].span.lo,\n+                            hi: last.span.hi,\n+                            expn_id: args[0].span.expn_id,\n+                        };\n \n-                    format!(\"&[{}]\", snippet(cx, span, \"..\")).into()\n-                } else {\n-                    \"&[]\".into()\n+                        format!(\"&[{}]\", snippet(cx, span, \"..\")).into()\n+                    } else {\n+                        \"&[]\".into()\n+                    }\n                 }\n-            }\n-        };\n+            };\n \n-        span_lint_and_then(cx, USELESS_VEC, span, \"useless use of `vec!`\", |db| {\n             db.span_suggestion(span, \"you can use a slice directly\", snippet);\n         });\n     }"}]}