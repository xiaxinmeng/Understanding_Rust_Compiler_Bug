{"sha": "1131bc0a0f9d4ce920f239dccbd0fcfe1c940548", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzFiYzBhMGY5ZDRjZTkyMGYyMzlkY2NiZDBmY2ZlMWM5NDA1NDg=", "commit": {"author": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-04-19T09:27:19Z"}, "committer": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-04-21T05:13:36Z"}, "message": "Implement Debug for File\n\nThis patch adds a `Debug` impl for `std::fs::File`.\n\nOn all platforms (Unix and Windows) it shows the file descriptor.\n\nOn Linux, it displays the path and access mode as well.\n\nIdeally we should show the path/mode for all platforms, not just Linux,\nbut this will do for now.\n\ncc #24570", "tree": {"sha": "b020e8d15fa077748f031c429886d95415ac7a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b020e8d15fa077748f031c429886d95415ac7a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548", "html_url": "https://github.com/rust-lang/rust/commit/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/comments", "author": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21c48c3e823ed21266e96779d700946db957a965", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c48c3e823ed21266e96779d700946db957a965", "html_url": "https://github.com/rust-lang/rust/commit/21c48c3e823ed21266e96779d700946db957a965"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "24a4a457224715c1eba2f7fd1e9c0f607a459d5f", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=1131bc0a0f9d4ce920f239dccbd0fcfe1c940548", "patch": "@@ -3296,6 +3296,8 @@ pub mod consts {\n             pub const F_GETFL : c_int = 3;\n             pub const F_SETFL : c_int = 4;\n \n+            pub const O_ACCMODE : c_int = 3;\n+\n             pub const SIGTRAP : c_int = 5;\n             pub const SIG_IGN: size_t = 1;\n "}, {"sha": "e8cdee9aca499a44022d9592c5f38f3badb83244", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=1131bc0a0f9d4ce920f239dccbd0fcfe1c940548", "patch": "@@ -19,6 +19,7 @@\n \n use core::prelude::*;\n \n+use fmt;\n use io::{self, Error, ErrorKind, SeekFrom, Seek, Read, Write};\n use path::{Path, PathBuf};\n use sys::fs2 as fs_imp;\n@@ -305,6 +306,12 @@ impl FromInner<fs_imp::File> for File {\n     }\n }\n \n+impl fmt::Debug for File {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.inner.fmt(f)\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {"}, {"sha": "8eb84b26f22f2f33d604b380cd57732b20f2664d", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=1131bc0a0f9d4ce920f239dccbd0fcfe1c940548", "patch": "@@ -13,6 +13,7 @@ use io::prelude::*;\n use os::unix::prelude::*;\n \n use ffi::{CString, CStr, OsString, OsStr};\n+use fmt;\n use io::{self, Error, SeekFrom};\n use libc::{self, c_int, size_t, off_t, c_char, mode_t};\n use mem;\n@@ -294,6 +295,54 @@ impl FromInner<c_int> for File {\n     }\n }\n \n+impl fmt::Debug for File {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        #[cfg(target_os = \"linux\")]\n+        fn get_path(fd: c_int) -> Option<PathBuf> {\n+            use string::ToString;\n+            let mut p = PathBuf::from(\"/proc/self/fd\");\n+            p.push(&fd.to_string());\n+            readlink(&p).ok()\n+        }\n+\n+        #[cfg(not(target_os = \"linux\"))]\n+        fn get_path(_fd: c_int) -> Option<PathBuf> {\n+            // FIXME(#24570): implement this for other Unix platforms\n+            None\n+        }\n+\n+        #[cfg(target_os = \"linux\")]\n+        fn get_mode(fd: c_int) -> Option<(bool, bool)> {\n+            let mode = unsafe { libc::fcntl(fd, libc::F_GETFL) };\n+            if mode == -1 {\n+                return None;\n+            }\n+            match mode & libc::O_ACCMODE {\n+                libc::O_RDONLY => Some((true, false)),\n+                libc::O_RDWR => Some((true, true)),\n+                libc::O_WRONLY => Some((false, true)),\n+                _ => None\n+            }\n+        }\n+\n+        #[cfg(not(target_os = \"linux\"))]\n+        fn get_mode(_fd: c_int) -> Option<(bool, bool)> {\n+            // FIXME(#24570): implement this for other Unix platforms\n+            None\n+        }\n+\n+        let fd = self.0.raw();\n+        let mut b = f.debug_struct(\"File\").field(\"fd\", &fd);\n+        if let Some(path) = get_path(fd) {\n+            b = b.field(\"path\", &path);\n+        }\n+        if let Some((read, write)) = get_mode(fd) {\n+            b = b.field(\"read\", &read).field(\"write\", &write);\n+        }\n+        b.finish()\n+    }\n+}\n+\n pub fn mkdir(p: &Path) -> io::Result<()> {\n     let p = try!(cstr(p));\n     try!(cvt(unsafe { libc::mkdir(p.as_ptr(), 0o777) }));"}, {"sha": "b0515a712297c28fe3a40905f8bfe128c17895db", "filename": "src/libstd/sys/windows/fs2.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1131bc0a0f9d4ce920f239dccbd0fcfe1c940548/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs?ref=1131bc0a0f9d4ce920f239dccbd0fcfe1c940548", "patch": "@@ -14,6 +14,7 @@ use os::windows::prelude::*;\n \n use default::Default;\n use ffi::{OsString, AsOsStr};\n+use fmt;\n use io::{self, Error, SeekFrom};\n use libc::{self, HANDLE};\n use mem;\n@@ -271,6 +272,15 @@ impl FromInner<libc::HANDLE> for File {\n     }\n }\n \n+impl fmt::Debug for File {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // FIXME(#24570): add more info here (e.g. path, mode)\n+        f.debug_struct(\"File\")\n+            .field(\"handle\", &self.handle.raw())\n+            .finish()\n+    }\n+}\n+\n pub fn to_utf16(s: &Path) -> Vec<u16> {\n     s.as_os_str().encode_wide().chain(Some(0).into_iter()).collect()\n }"}]}