{"sha": "f8009666beaedb34197da9c87cc54d8ca65203b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MDA5NjY2YmVhZWRiMzQxOTdkYTljODdjYzU0ZDhjYTY1MjAzYjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-12T14:17:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-12T14:17:23Z"}, "message": "internal: move inference diagnostics to hir", "tree": {"sha": "673322cf9a916270a2d20ccc35a5e62796ce812f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673322cf9a916270a2d20ccc35a5e62796ce812f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8009666beaedb34197da9c87cc54d8ca65203b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8009666beaedb34197da9c87cc54d8ca65203b8", "html_url": "https://github.com/rust-lang/rust/commit/f8009666beaedb34197da9c87cc54d8ca65203b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8009666beaedb34197da9c87cc54d8ca65203b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409f5fb563bfc992e4d05245d5c17e77ff8e2762", "url": "https://api.github.com/repos/rust-lang/rust/commits/409f5fb563bfc992e4d05245d5c17e77ff8e2762", "html_url": "https://github.com/rust-lang/rust/commit/409f5fb563bfc992e4d05245d5c17e77ff8e2762"}], "stats": {"total": 466, "additions": 222, "deletions": 244}, "files": [{"sha": "2edb53765ec90a0b76381b05df11fda730d23b27", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=f8009666beaedb34197da9c87cc54d8ca65203b8", "patch": "@@ -14,8 +14,7 @@ use syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n pub use hir_ty::{\n     diagnostics::{\n         IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms,\n-        MissingOkOrSomeInTailExpr, NoSuchField, RemoveThisSemicolon,\n-        ReplaceFilterMapNextWithFindMap,\n+        MissingOkOrSomeInTailExpr, RemoveThisSemicolon, ReplaceFilterMapNextWithFindMap,\n     },\n     diagnostics_sink::{Diagnostic, DiagnosticCode, DiagnosticSink, DiagnosticSinkBuilder},\n };\n@@ -251,3 +250,54 @@ impl Diagnostic for UnimplementedBuiltinMacro {\n         self\n     }\n }\n+\n+// Diagnostic: no-such-field\n+//\n+// This diagnostic is triggered if created structure does not have field provided in record.\n+#[derive(Debug)]\n+pub struct NoSuchField {\n+    pub file: HirFileId,\n+    pub field: AstPtr<ast::RecordExprField>,\n+}\n+\n+impl Diagnostic for NoSuchField {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"no-such-field\")\n+    }\n+\n+    fn message(&self) -> String {\n+        \"no such field\".to_string()\n+    }\n+\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile::new(self.file, self.field.clone().into())\n+    }\n+\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n+// Diagnostic: break-outside-of-loop\n+//\n+// This diagnostic is triggered if the `break` keyword is used outside of a loop.\n+#[derive(Debug)]\n+pub struct BreakOutsideOfLoop {\n+    pub file: HirFileId,\n+    pub expr: AstPtr<ast::Expr>,\n+}\n+\n+impl Diagnostic for BreakOutsideOfLoop {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"break-outside-of-loop\")\n+    }\n+    fn message(&self) -> String {\n+        \"break outside of loop\".to_string()\n+    }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.expr.clone().into() }\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}"}, {"sha": "bce626b034b3584b9229f1202a50b05c684c1f1e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f8009666beaedb34197da9c87cc54d8ca65203b8", "patch": "@@ -36,8 +36,9 @@ use std::{iter, sync::Arc};\n use arrayvec::ArrayVec;\n use base_db::{CrateDisplayName, CrateId, Edition, FileId};\n use diagnostics::{\n-    InactiveCode, MacroError, UnimplementedBuiltinMacro, UnresolvedExternCrate, UnresolvedImport,\n-    UnresolvedMacroCall, UnresolvedModule, UnresolvedProcMacro,\n+    BreakOutsideOfLoop, InactiveCode, MacroError, NoSuchField, UnimplementedBuiltinMacro,\n+    UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall, UnresolvedModule,\n+    UnresolvedProcMacro,\n };\n use either::Either;\n use hir_def::{\n@@ -1042,6 +1043,23 @@ impl Function {\n             }\n         }\n \n+        let infer = db.infer(self.id.into());\n+        let (_, source_map) = db.body_with_source_map(self.id.into());\n+        for d in &infer.diagnostics {\n+            match d {\n+                hir_ty::InferenceDiagnostic::NoSuchField { expr } => {\n+                    let field = source_map.field_syntax(*expr);\n+                    sink.push(NoSuchField { file: field.file_id, field: field.value })\n+                }\n+                hir_ty::InferenceDiagnostic::BreakOutsideOfLoop { expr } => {\n+                    let ptr = source_map\n+                        .expr_syntax(*expr)\n+                        .expect(\"break outside of loop in synthetic syntax\");\n+                    sink.push(BreakOutsideOfLoop { file: ptr.file_id, expr: ptr.value })\n+                }\n+            }\n+        }\n+\n         hir_ty::diagnostics::validate_module_item(db, krate, self.id.into(), sink);\n         hir_ty::diagnostics::validate_body(db, self.id.into(), sink);\n     }"}, {"sha": "28d6ca567662a720d5d106376942ab6cb76b73eb", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=f8009666beaedb34197da9c87cc54d8ca65203b8", "patch": "@@ -33,40 +33,12 @@ pub fn validate_module_item(\n pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut DiagnosticSink<'_>) {\n     let _p = profile::span(\"validate_body\");\n     let infer = db.infer(owner);\n-    infer.add_diagnostics(db, owner, sink);\n     let mut validator = expr::ExprValidator::new(owner, infer.clone(), sink);\n     validator.validate_body(db);\n     let mut validator = unsafe_check::UnsafeValidator::new(owner, infer, sink);\n     validator.validate_body(db);\n }\n \n-// Diagnostic: no-such-field\n-//\n-// This diagnostic is triggered if created structure does not have field provided in record.\n-#[derive(Debug)]\n-pub struct NoSuchField {\n-    pub file: HirFileId,\n-    pub field: AstPtr<ast::RecordExprField>,\n-}\n-\n-impl Diagnostic for NoSuchField {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"no-such-field\")\n-    }\n-\n-    fn message(&self) -> String {\n-        \"no such field\".to_string()\n-    }\n-\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.field.clone().into())\n-    }\n-\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n // Diagnostic: missing-structure-fields\n //\n // This diagnostic is triggered if record lacks some fields that exist in the corresponding structure.\n@@ -247,30 +219,6 @@ impl Diagnostic for RemoveThisSemicolon {\n     }\n }\n \n-// Diagnostic: break-outside-of-loop\n-//\n-// This diagnostic is triggered if the `break` keyword is used outside of a loop.\n-#[derive(Debug)]\n-pub struct BreakOutsideOfLoop {\n-    pub file: HirFileId,\n-    pub expr: AstPtr<ast::Expr>,\n-}\n-\n-impl Diagnostic for BreakOutsideOfLoop {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"break-outside-of-loop\")\n-    }\n-    fn message(&self) -> String {\n-        \"break outside of loop\".to_string()\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.expr.clone().into() }\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n // Diagnostic: missing-unsafe\n //\n // This diagnostic is triggered if an operation marked as `unsafe` is used outside of an `unsafe` function or block.\n@@ -530,129 +478,6 @@ mod tests {\n         assert_eq!(annotations, actual);\n     }\n \n-    #[test]\n-    fn no_such_field_diagnostics() {\n-        check_diagnostics(\n-            r#\"\n-struct S { foo: i32, bar: () }\n-impl S {\n-    fn new() -> S {\n-        S {\n-      //^ Missing structure fields:\n-      //|    - bar\n-            foo: 92,\n-            baz: 62,\n-          //^^^^^^^ no such field\n-        }\n-    }\n-}\n-\"#,\n-        );\n-    }\n-    #[test]\n-    fn no_such_field_with_feature_flag_diagnostics() {\n-        check_diagnostics(\n-            r#\"\n-//- /lib.rs crate:foo cfg:feature=foo\n-struct MyStruct {\n-    my_val: usize,\n-    #[cfg(feature = \"foo\")]\n-    bar: bool,\n-}\n-\n-impl MyStruct {\n-    #[cfg(feature = \"foo\")]\n-    pub(crate) fn new(my_val: usize, bar: bool) -> Self {\n-        Self { my_val, bar }\n-    }\n-    #[cfg(not(feature = \"foo\"))]\n-    pub(crate) fn new(my_val: usize, _bar: bool) -> Self {\n-        Self { my_val }\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn no_such_field_enum_with_feature_flag_diagnostics() {\n-        check_diagnostics(\n-            r#\"\n-//- /lib.rs crate:foo cfg:feature=foo\n-enum Foo {\n-    #[cfg(not(feature = \"foo\"))]\n-    Buz,\n-    #[cfg(feature = \"foo\")]\n-    Bar,\n-    Baz\n-}\n-\n-fn test_fn(f: Foo) {\n-    match f {\n-        Foo::Bar => {},\n-        Foo::Baz => {},\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn no_such_field_with_feature_flag_diagnostics_on_struct_lit() {\n-        check_diagnostics(\n-            r#\"\n-//- /lib.rs crate:foo cfg:feature=foo\n-struct S {\n-    #[cfg(feature = \"foo\")]\n-    foo: u32,\n-    #[cfg(not(feature = \"foo\"))]\n-    bar: u32,\n-}\n-\n-impl S {\n-    #[cfg(feature = \"foo\")]\n-    fn new(foo: u32) -> Self {\n-        Self { foo }\n-    }\n-    #[cfg(not(feature = \"foo\"))]\n-    fn new(bar: u32) -> Self {\n-        Self { bar }\n-    }\n-    fn new2(bar: u32) -> Self {\n-        #[cfg(feature = \"foo\")]\n-        { Self { foo: bar } }\n-        #[cfg(not(feature = \"foo\"))]\n-        { Self { bar } }\n-    }\n-    fn new2(val: u32) -> Self {\n-        Self {\n-            #[cfg(feature = \"foo\")]\n-            foo: val,\n-            #[cfg(not(feature = \"foo\"))]\n-            bar: val,\n-        }\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn no_such_field_with_type_macro() {\n-        check_diagnostics(\n-            r#\"\n-macro_rules! Type { () => { u32 }; }\n-struct Foo { bar: Type![] }\n-\n-impl Foo {\n-    fn new() -> Self {\n-        Foo { bar: 0 }\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn missing_record_pat_field_diagnostic() {\n         check_diagnostics(\n@@ -734,16 +559,6 @@ pub struct Claims {\n         );\n     }\n \n-    #[test]\n-    fn break_outside_of_loop() {\n-        check_diagnostics(\n-            r#\"\n-fn foo() { break; }\n-         //^^^^^ break outside of loop\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn missing_semicolon() {\n         check_diagnostics("}, {"sha": "7b57593e45229cf5ee2631e7d27e411a0e2d7758", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 9, "deletions": 53, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=f8009666beaedb34197da9c87cc54d8ca65203b8", "patch": "@@ -35,11 +35,9 @@ use stdx::impl_from;\n use syntax::SmolStr;\n \n use super::{DomainGoal, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty};\n-use crate::diagnostics_sink::DiagnosticSink;\n use crate::{\n-    db::HirDatabase, fold_tys, infer::diagnostics::InferenceDiagnostic,\n-    lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy, Goal, Interner, Substitution,\n-    TyBuilder, TyExt, TyKind,\n+    db::HirDatabase, fold_tys, lower::ImplTraitLoweringMode,\n+    to_assoc_type_id, AliasEq, AliasTy, Goal, Interner, Substitution, TyBuilder, TyExt, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details.\n@@ -111,6 +109,12 @@ pub(crate) struct InferOk {\n pub(crate) struct TypeError;\n pub(crate) type InferResult = Result<InferOk, TypeError>;\n \n+#[derive(Debug, PartialEq, Eq, Clone)]\n+pub enum InferenceDiagnostic {\n+    NoSuchField { expr: ExprId },\n+    BreakOutsideOfLoop { expr: ExprId },\n+}\n+\n /// A mismatch between an expected and an inferred type.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct TypeMismatch {\n@@ -140,7 +144,7 @@ pub struct InferenceResult {\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantId>,\n     /// For each associated item record what it resolves to\n     assoc_resolutions: FxHashMap<ExprOrPatId, AssocItemId>,\n-    diagnostics: Vec<InferenceDiagnostic>,\n+    pub diagnostics: Vec<InferenceDiagnostic>,\n     pub type_of_expr: ArenaMap<ExprId, Ty>,\n     /// For each pattern record the type it resolves to.\n     ///\n@@ -191,14 +195,6 @@ impl InferenceResult {\n             _ => None,\n         })\n     }\n-    pub fn add_diagnostics(\n-        &self,\n-        db: &dyn HirDatabase,\n-        owner: DefWithBodyId,\n-        sink: &mut DiagnosticSink,\n-    ) {\n-        self.diagnostics.iter().for_each(|it| it.add_to(db, owner, sink))\n-    }\n }\n \n impl Index<ExprId> for InferenceResult {\n@@ -804,43 +800,3 @@ impl std::ops::BitOrAssign for Diverges {\n         *self = *self | other;\n     }\n }\n-\n-mod diagnostics {\n-    use hir_def::{expr::ExprId, DefWithBodyId};\n-\n-    use crate::{\n-        db::HirDatabase,\n-        diagnostics::{BreakOutsideOfLoop, NoSuchField},\n-        diagnostics_sink::DiagnosticSink,\n-    };\n-\n-    #[derive(Debug, PartialEq, Eq, Clone)]\n-    pub(super) enum InferenceDiagnostic {\n-        NoSuchField { expr: ExprId },\n-        BreakOutsideOfLoop { expr: ExprId },\n-    }\n-\n-    impl InferenceDiagnostic {\n-        pub(super) fn add_to(\n-            &self,\n-            db: &dyn HirDatabase,\n-            owner: DefWithBodyId,\n-            sink: &mut DiagnosticSink,\n-        ) {\n-            match self {\n-                InferenceDiagnostic::NoSuchField { expr } => {\n-                    let (_, source_map) = db.body_with_source_map(owner);\n-                    let field = source_map.field_syntax(*expr);\n-                    sink.push(NoSuchField { file: field.file_id, field: field.value })\n-                }\n-                InferenceDiagnostic::BreakOutsideOfLoop { expr } => {\n-                    let (_, source_map) = db.body_with_source_map(owner);\n-                    let ptr = source_map\n-                        .expr_syntax(*expr)\n-                        .expect(\"break outside of loop in synthetic syntax\");\n-                    sink.push(BreakOutsideOfLoop { file: ptr.file_id, expr: ptr.value })\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "0c6b196534e94cd1b35f4c877faa2fdc8b0efe51", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=f8009666beaedb34197da9c87cc54d8ca65203b8", "patch": "@@ -50,7 +50,7 @@ use crate::{db::HirDatabase, utils::generics};\n pub use autoderef::autoderef;\n pub use builder::TyBuilder;\n pub use chalk_ext::*;\n-pub use infer::{could_unify, InferenceResult};\n+pub use infer::{could_unify, InferenceDiagnostic, InferenceResult};\n pub use interner::Interner;\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,"}, {"sha": "7febd6eaf41910941e78e6a2ab834a3332c675ab", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 140, "deletions": 1, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8009666beaedb34197da9c87cc54d8ca65203b8/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=f8009666beaedb34197da9c87cc54d8ca65203b8", "patch": "@@ -305,6 +305,7 @@ fn unresolved_fix(id: &'static str, label: &str, target: TextRange) -> Assist {\n #[cfg(test)]\n mod tests {\n     use expect_test::Expect;\n+    use hir::diagnostics::DiagnosticCode;\n     use ide_assists::AssistResolveStrategy;\n     use stdx::trim_indent;\n     use test_utils::{assert_eq_text, extract_annotations};\n@@ -410,7 +411,12 @@ mod tests {\n             .unwrap();\n \n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n-        let actual = diagnostics.into_iter().map(|d| (d.range, d.message)).collect::<Vec<_>>();\n+        let mut actual = diagnostics\n+            .into_iter()\n+            .filter(|d| d.code != Some(DiagnosticCode(\"inactive-code\")))\n+            .map(|d| (d.range, d.message))\n+            .collect::<Vec<_>>();\n+        actual.sort_by_key(|(range, _)| range.start());\n         assert_eq!(expected, actual);\n     }\n \n@@ -716,6 +722,139 @@ $0\n mod foo;\n \n //- /foo.rs\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn break_outside_of_loop() {\n+        check_diagnostics(\n+            r#\"\n+fn foo() { break; }\n+         //^^^^^ break outside of loop\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_such_field_diagnostics() {\n+        check_diagnostics(\n+            r#\"\n+struct S { foo: i32, bar: () }\n+impl S {\n+    fn new() -> S {\n+        S {\n+      //^ Missing structure fields:\n+      //|    - bar\n+            foo: 92,\n+            baz: 62,\n+          //^^^^^^^ no such field\n+        }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+    #[test]\n+    fn no_such_field_with_feature_flag_diagnostics() {\n+        check_diagnostics(\n+            r#\"\n+//- /lib.rs crate:foo cfg:feature=foo\n+struct MyStruct {\n+    my_val: usize,\n+    #[cfg(feature = \"foo\")]\n+    bar: bool,\n+}\n+\n+impl MyStruct {\n+    #[cfg(feature = \"foo\")]\n+    pub(crate) fn new(my_val: usize, bar: bool) -> Self {\n+        Self { my_val, bar }\n+    }\n+    #[cfg(not(feature = \"foo\"))]\n+    pub(crate) fn new(my_val: usize, _bar: bool) -> Self {\n+        Self { my_val }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_such_field_enum_with_feature_flag_diagnostics() {\n+        check_diagnostics(\n+            r#\"\n+//- /lib.rs crate:foo cfg:feature=foo\n+enum Foo {\n+    #[cfg(not(feature = \"foo\"))]\n+    Buz,\n+    #[cfg(feature = \"foo\")]\n+    Bar,\n+    Baz\n+}\n+\n+fn test_fn(f: Foo) {\n+    match f {\n+        Foo::Bar => {},\n+        Foo::Baz => {},\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_such_field_with_feature_flag_diagnostics_on_struct_lit() {\n+        check_diagnostics(\n+            r#\"\n+//- /lib.rs crate:foo cfg:feature=foo\n+struct S {\n+    #[cfg(feature = \"foo\")]\n+    foo: u32,\n+    #[cfg(not(feature = \"foo\"))]\n+    bar: u32,\n+}\n+\n+impl S {\n+    #[cfg(feature = \"foo\")]\n+    fn new(foo: u32) -> Self {\n+        Self { foo }\n+    }\n+    #[cfg(not(feature = \"foo\"))]\n+    fn new(bar: u32) -> Self {\n+        Self { bar }\n+    }\n+    fn new2(bar: u32) -> Self {\n+        #[cfg(feature = \"foo\")]\n+        { Self { foo: bar } }\n+        #[cfg(not(feature = \"foo\"))]\n+        { Self { bar } }\n+    }\n+    fn new2(val: u32) -> Self {\n+        Self {\n+            #[cfg(feature = \"foo\")]\n+            foo: val,\n+            #[cfg(not(feature = \"foo\"))]\n+            bar: val,\n+        }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_such_field_with_type_macro() {\n+        check_diagnostics(\n+            r#\"\n+macro_rules! Type { () => { u32 }; }\n+struct Foo { bar: Type![] }\n+\n+impl Foo {\n+    fn new() -> Self {\n+        Foo { bar: 0 }\n+    }\n+}\n \"#,\n         );\n     }"}]}