{"sha": "1fb257b3b4d11552963103acd8491d1bbea547d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYjI1N2IzYjRkMTE1NTI5NjMxMDNhY2Q4NDkxZDFiYmVhNTQ3ZDA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-24T17:12:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T17:51:37Z"}, "message": "Collect attributes during HIR lowering.", "tree": {"sha": "d851f4a3f6ca01388454bf02dd51986bf7ab4bbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d851f4a3f6ca01388454bf02dd51986bf7ab4bbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fb257b3b4d11552963103acd8491d1bbea547d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb257b3b4d11552963103acd8491d1bbea547d0", "html_url": "https://github.com/rust-lang/rust/commit/1fb257b3b4d11552963103acd8491d1bbea547d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fb257b3b4d11552963103acd8491d1bbea547d0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d50ca3cbeef4204ec7f163813f3ff7253c44b5c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d50ca3cbeef4204ec7f163813f3ff7253c44b5c2", "html_url": "https://github.com/rust-lang/rust/commit/d50ca3cbeef4204ec7f163813f3ff7253c44b5c2"}], "stats": {"total": 213, "additions": 126, "deletions": 87}, "files": [{"sha": "f0a139eccfe61e658fa7fd304ca399c231ddb85f", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -260,6 +260,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     // Merge attributes into the inner expression.\n                     let mut attrs: Vec<_> = e.attrs.iter().map(|a| self.lower_attr(a)).collect();\n                     attrs.extend::<Vec<_>>(ex.attrs.into());\n+                    self.attrs[ex.hir_id] = &*self.arena.alloc_from_iter(attrs.iter().cloned());\n                     ex.attrs = attrs.into();\n                     return ex;\n                 }\n@@ -272,12 +273,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::MacCall(_) => panic!(\"{:?} shouldn't exist here\", e.span),\n             };\n \n-            hir::Expr {\n-                hir_id: self.lower_node_id(e.id),\n-                kind,\n-                span: e.span,\n-                attrs: e.attrs.iter().map(|a| self.lower_attr(a)).collect::<Vec<_>>().into(),\n-            }\n+            let hir_id = self.lower_node_id(e.id);\n+            let attrs = e.attrs.iter().map(|a| self.lower_attr(a)).collect::<Vec<_>>();\n+            self.attrs.push_sparse(hir_id, &*self.arena.alloc_from_iter(attrs.iter().cloned()));\n+            hir::Expr { hir_id, kind, span: e.span, attrs: attrs.into() }\n         })\n     }\n \n@@ -618,9 +617,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::Guard::If(self.lower_expr(cond))\n             }\n         });\n+        let hir_id = self.next_id();\n         hir::Arm {\n-            hir_id: self.next_id(),\n-            attrs: self.lower_attrs(&arm.attrs),\n+            hir_id,\n+            attrs: self.lower_attrs(hir_id, &arm.attrs),\n             pat,\n             guard,\n             body: self.lower_expr(&arm.body),\n@@ -2159,7 +2159,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         kind: hir::ExprKind<'hir>,\n         attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n-        hir::Expr { hir_id: self.next_id(), kind, span, attrs }\n+        let hir_id = self.next_id();\n+        self.attrs.push_sparse(hir_id, &*self.arena.alloc_from_iter(attrs.iter().cloned()));\n+        hir::Expr { hir_id, kind, span, attrs }\n     }\n \n     fn field(&mut self, ident: Ident, expr: &'hir hir::Expr<'hir>, span: Span) -> hir::Field<'hir> {"}, {"sha": "5d733eda3490a4a6718ec036a8d8392876ca0810", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -217,42 +217,40 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item<'hir>> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n-        let attrs = self.lower_attrs(&i.attrs);\n \n         if let ItemKind::MacroDef(MacroDef { ref body, macro_rules }) = i.kind {\n             if !macro_rules || self.sess.contains_name(&i.attrs, sym::macro_export) {\n-                let def_id = self.lower_node_id(i.id).expect_owner();\n+                let hir_id = self.lower_node_id(i.id);\n+                let attrs = self.lower_attrs(hir_id, &i.attrs);\n                 let body = P(self.lower_mac_args(body));\n                 self.exported_macros.push(hir::MacroDef {\n                     ident,\n                     vis,\n                     attrs,\n-                    def_id,\n+                    def_id: hir_id.expect_owner(),\n                     span: i.span,\n                     ast: MacroDef { body, macro_rules },\n                 });\n             } else {\n-                self.non_exported_macro_attrs.extend(attrs.iter().cloned());\n+                for a in i.attrs.iter() {\n+                    let a = self.lower_attr(a);\n+                    self.non_exported_macro_attrs.push(a);\n+                }\n             }\n             return None;\n         }\n \n-        let kind = self.lower_item_kind(i.span, i.id, &mut ident, attrs, &mut vis, &i.kind);\n-\n-        Some(hir::Item {\n-            def_id: self.lower_node_id(i.id).expect_owner(),\n-            ident,\n-            attrs,\n-            kind,\n-            vis,\n-            span: i.span,\n-        })\n+        let hir_id = self.lower_node_id(i.id);\n+        let attrs = self.lower_attrs(hir_id, &i.attrs);\n+        let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, &mut vis, &i.kind);\n+        Some(hir::Item { def_id: hir_id.expect_owner(), ident, attrs, kind, vis, span: i.span })\n     }\n \n     fn lower_item_kind(\n         &mut self,\n         span: Span,\n         id: NodeId,\n+        hir_id: hir::HirId,\n         ident: &mut Ident,\n         attrs: &'hir [Attribute],\n         vis: &mut hir::Visibility<'hir>,\n@@ -365,14 +363,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_generics(generics, ImplTraitContext::disallowed()),\n             ),\n             ItemKind::Struct(ref struct_def, ref generics) => {\n-                let struct_def = self.lower_variant_data(struct_def);\n+                let struct_def = self.lower_variant_data(hir_id, struct_def);\n                 hir::ItemKind::Struct(\n                     struct_def,\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 )\n             }\n             ItemKind::Union(ref vdata, ref generics) => {\n-                let vdata = self.lower_variant_data(vdata);\n+                let vdata = self.lower_variant_data(hir_id, vdata);\n                 hir::ItemKind::Union(\n                     vdata,\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n@@ -554,6 +552,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         let path = this.lower_path_extra(res, &path, ParamMode::Explicit, None);\n                         let kind = hir::ItemKind::Use(path, hir::UseKind::Single);\n                         let vis = this.rebuild_vis(&vis);\n+                        this.attrs.push_sparse(new_id, attrs);\n \n                         this.insert_item(hir::Item {\n                             def_id: new_id.expect_owner(),\n@@ -626,6 +625,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                         let kind =\n                             this.lower_use_tree(use_tree, &prefix, id, &mut vis, &mut ident, attrs);\n+                        this.attrs.push_sparse(new_hir_id, attrs);\n \n                         this.insert_item(hir::Item {\n                             def_id: new_hir_id.expect_owner(),\n@@ -699,11 +699,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem<'hir> {\n-        let def_id = self.resolver.local_def_id(i.id);\n+        let hir_id = self.lower_node_id(i.id);\n+        let def_id = hir_id.expect_owner();\n         hir::ForeignItem {\n             def_id,\n             ident: i.ident,\n-            attrs: self.lower_attrs(&i.attrs),\n+            attrs: self.lower_attrs(hir_id, &i.attrs),\n             kind: match i.kind {\n                 ForeignItemKind::Fn(box FnKind(_, ref sig, ref generics, _)) => {\n                     let fdec = &sig.decl;\n@@ -748,29 +749,43 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant<'hir> {\n+        let id = self.lower_node_id(v.id);\n         hir::Variant {\n-            attrs: self.lower_attrs(&v.attrs),\n-            data: self.lower_variant_data(&v.data),\n+            id,\n+            attrs: self.lower_attrs(id, &v.attrs),\n+            data: self.lower_variant_data(id, &v.data),\n             disr_expr: v.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n-            id: self.lower_node_id(v.id),\n             ident: v.ident,\n             span: v.span,\n         }\n     }\n \n-    fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData<'hir> {\n+    fn lower_variant_data(\n+        &mut self,\n+        parent_id: hir::HirId,\n+        vdata: &VariantData,\n+    ) -> hir::VariantData<'hir> {\n         match *vdata {\n             VariantData::Struct(ref fields, recovered) => hir::VariantData::Struct(\n                 self.arena\n                     .alloc_from_iter(fields.iter().enumerate().map(|f| self.lower_struct_field(f))),\n                 recovered,\n             ),\n-            VariantData::Tuple(ref fields, id) => hir::VariantData::Tuple(\n-                self.arena\n-                    .alloc_from_iter(fields.iter().enumerate().map(|f| self.lower_struct_field(f))),\n-                self.lower_node_id(id),\n-            ),\n-            VariantData::Unit(id) => hir::VariantData::Unit(self.lower_node_id(id)),\n+            VariantData::Tuple(ref fields, id) => {\n+                let ctor_id = self.lower_node_id(id);\n+                self.attrs.push_sparse(ctor_id, self.attrs[parent_id]);\n+                hir::VariantData::Tuple(\n+                    self.arena.alloc_from_iter(\n+                        fields.iter().enumerate().map(|f| self.lower_struct_field(f)),\n+                    ),\n+                    ctor_id,\n+                )\n+            }\n+            VariantData::Unit(id) => {\n+                let ctor_id = self.lower_node_id(id);\n+                self.attrs.push_sparse(ctor_id, self.attrs[parent_id]);\n+                hir::VariantData::Unit(ctor_id)\n+            }\n         }\n     }\n \n@@ -787,22 +802,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         } else {\n             self.lower_ty(&f.ty, ImplTraitContext::disallowed())\n         };\n+        let hir_id = self.lower_node_id(f.id);\n         hir::StructField {\n             span: f.span,\n-            hir_id: self.lower_node_id(f.id),\n+            hir_id,\n             ident: match f.ident {\n                 Some(ident) => ident,\n                 // FIXME(jseyfried): positional field hygiene.\n                 None => Ident::new(sym::integer(index), f.span),\n             },\n             vis: self.lower_visibility(&f.vis, None),\n             ty,\n-            attrs: self.lower_attrs(&f.attrs),\n+            attrs: self.lower_attrs(hir_id, &f.attrs),\n         }\n     }\n \n     fn lower_trait_item(&mut self, i: &AssocItem) -> hir::TraitItem<'hir> {\n-        let trait_item_def_id = self.resolver.local_def_id(i.id);\n+        let hir_id = self.lower_node_id(i.id);\n+        let trait_item_def_id = hir_id.expect_owner();\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n@@ -838,7 +855,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::TraitItem {\n             def_id: trait_item_def_id,\n             ident: i.ident,\n-            attrs: self.lower_attrs(&i.attrs),\n+            attrs: self.lower_attrs(hir_id, &i.attrs),\n             generics,\n             kind,\n             span: i.span,\n@@ -920,10 +937,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // Since `default impl` is not yet implemented, this is always true in impls.\n         let has_value = true;\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n+        let hir_id = self.lower_node_id(i.id);\n         hir::ImplItem {\n-            def_id: self.lower_node_id(i.id).expect_owner(),\n+            def_id: hir_id.expect_owner(),\n             ident: i.ident,\n-            attrs: self.lower_attrs(&i.attrs),\n+            attrs: self.lower_attrs(hir_id, &i.attrs),\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n             defaultness,\n@@ -1024,9 +1042,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_param(&mut self, param: &Param) -> hir::Param<'hir> {\n+        let hir_id = self.lower_node_id(param.id);\n         hir::Param {\n-            attrs: self.lower_attrs(&param.attrs),\n-            hir_id: self.lower_node_id(param.id),\n+            hir_id,\n+            attrs: self.lower_attrs(hir_id, &param.attrs),\n             pat: self.lower_pat(&param.pat),\n             ty_span: param.ty.span,\n             span: param.span,"}, {"sha": "c7a2b33a1d8d40e8a888ed7187d764212dcde1cc", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -114,6 +114,8 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     generator_kind: Option<hir::GeneratorKind>,\n \n+    attrs: hir::HirIdVec<&'hir [Attribute]>,\n+\n     /// When inside an `async` context, this is the `HirId` of the\n     /// `task_context` local bound to the resume argument of the generator.\n     task_context: Option<hir::HirId>,\n@@ -309,6 +311,7 @@ pub fn lower_crate<'a, 'hir>(\n         bodies: BTreeMap::new(),\n         trait_impls: BTreeMap::new(),\n         modules: BTreeMap::new(),\n+        attrs: hir::HirIdVec::default(),\n         exported_macros: Vec::new(),\n         non_exported_macro_attrs: Vec::new(),\n         catch_scopes: Vec::new(),\n@@ -565,7 +568,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.items, c.span);\n-        let attrs = self.lower_attrs(&c.attrs);\n+        let attrs = self.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n         let body_ids = body_ids(&self.bodies);\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n@@ -592,6 +595,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         self.resolver.definitions().init_def_id_to_hir_id_mapping(def_id_to_hir_id);\n \n+        // Not all HIR owners have declared attrs. Complete with empty IndexVecs.\n+        self.attrs.push_owner(Idx::new(self.resolver.definitions().def_index_count() - 1));\n+\n         hir::Crate {\n             item: hir::CrateItem { module, attrs, span: c.span },\n             exported_macros: self.arena.alloc_from_iter(self.exported_macros),\n@@ -606,6 +612,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             modules: self.modules,\n             proc_macros,\n             trait_map,\n+            attrs: self.attrs,\n         }\n     }\n \n@@ -967,8 +974,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         ret\n     }\n \n-    fn lower_attrs(&mut self, attrs: &[Attribute]) -> &'hir [Attribute] {\n-        self.arena.alloc_from_iter(attrs.iter().map(|a| self.lower_attr(a)))\n+    fn lower_attrs(&mut self, id: hir::HirId, attrs: &[Attribute]) -> &'hir [Attribute] {\n+        let ret = self.arena.alloc_from_iter(attrs.iter().map(|a| self.lower_attr(a)));\n+        self.attrs.push_sparse(id, ret);\n+        ret\n     }\n \n     fn lower_attr(&mut self, attr: &Attribute) -> Attribute {\n@@ -1790,14 +1799,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             )\n         });\n         let init = l.init.as_ref().map(|e| self.lower_expr(e));\n+        let hir_id = self.lower_node_id(l.id);\n+        let attrs = l.attrs.iter().map(|a| self.lower_attr(a)).collect::<Vec<_>>();\n+        self.attrs.push_sparse(hir_id, &*self.arena.alloc_from_iter(attrs.iter().cloned()));\n         (\n             hir::Local {\n-                hir_id: self.lower_node_id(l.id),\n+                hir_id,\n                 ty,\n                 pat: self.lower_pat(&l.pat),\n                 init,\n                 span: l.span,\n-                attrs: l.attrs.iter().map(|a| self.lower_attr(a)).collect::<Vec<_>>().into(),\n+                attrs: attrs.into(),\n                 source: hir::LocalSource::Normal,\n             },\n             ids,\n@@ -2300,12 +2312,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         };\n \n+        let hir_id = self.lower_node_id(param.id);\n         hir::GenericParam {\n-            hir_id: self.lower_node_id(param.id),\n+            hir_id,\n             name,\n             span: param.ident.span,\n             pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n-            attrs: self.lower_attrs(&param.attrs),\n+            attrs: self.lower_attrs(hir_id, &param.attrs),\n             bounds: self.arena.alloc_from_iter(bounds),\n             kind,\n         }\n@@ -2519,7 +2532,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         pat: &'hir hir::Pat<'hir>,\n         source: hir::LocalSource,\n     ) -> hir::Stmt<'hir> {\n-        let local = hir::Local { attrs, hir_id: self.next_id(), init, pat, source, span, ty: None };\n+        let hir_id = self.next_id();\n+        self.attrs.push_sparse(hir_id, &*self.arena.alloc_from_iter(attrs.iter().cloned()));\n+        let local = hir::Local { attrs, hir_id, init, pat, source, span, ty: None };\n         self.stmt(span, hir::StmtKind::Local(self.arena.alloc(local)))\n     }\n "}, {"sha": "d4dfab2168c54ccdf5aa24b33287d8f2bfd9fc0c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -2,7 +2,7 @@\n use crate::def::{CtorKind, DefKind, Namespace, Res};\n use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n-use crate::{itemlikevisit, LangItem};\n+use crate::{itemlikevisit, HirIdVec, LangItem};\n \n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_ast::{self as ast, CrateSugar, LlvmAsmDialect};\n@@ -675,6 +675,9 @@ pub struct Crate<'hir> {\n     pub proc_macros: Vec<HirId>,\n \n     pub trait_map: BTreeMap<HirId, Vec<TraitCandidate>>,\n+\n+    /// Collected attributes from HIR nodes.\n+    pub attrs: HirIdVec<&'hir [Attribute]>,\n }\n \n impl Crate<'hir> {"}, {"sha": "e0b3d9026a07cfe240f0eca7930ae95ce1a87b12", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -82,6 +82,20 @@ impl<T> HirIdVec<T> {\n         debug_assert_eq!(_ret_id, id.local_id);\n     }\n \n+    pub fn push_sparse(&mut self, id: HirId, value: T)\n+    where\n+        T: Default,\n+    {\n+        self.map.ensure_contains_elem(id.owner, IndexVec::new);\n+        let submap = &mut self.map[id.owner];\n+        let i = id.local_id.index();\n+        let len = submap.len();\n+        if i >= len {\n+            submap.extend(std::iter::repeat_with(T::default).take(i - len + 1));\n+        }\n+        submap[id.local_id] = value;\n+    }\n+\n     pub fn get(&self, id: HirId) -> Option<&T> {\n         self.map.get(id.owner)?.get(id.local_id)\n     }"}, {"sha": "0d2db4af7a8e3aadbbd79c5ec67a44230f45968a", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -116,6 +116,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 modules: _,\n                 proc_macros: _,\n                 trait_map: _,\n+                attrs: _,\n             } = *krate;\n \n             hash_body(&mut hcx, root_mod_def_path_hash, item, &mut hir_body_nodes)\n@@ -131,7 +132,11 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             hcx,\n             hir_body_nodes,\n             map: (0..definitions.def_index_count())\n-                .map(|_| HirOwnerData { signature: None, with_bodies: None })\n+                .map(|id| HirOwnerData {\n+                    attrs: krate.attrs.get_owner(Idx::new(id)),\n+                    signature: None,\n+                    with_bodies: None,\n+                })\n                 .collect(),\n         };\n         collector.insert_entry("}, {"sha": "f0deb8bb6688b20a3f0a5bd31ba3fa60e1da979d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -88,6 +88,7 @@ fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n \n #[derive(Debug)]\n pub(super) struct HirOwnerData<'hir> {\n+    pub(super) attrs: &'hir IndexVec<ItemLocalId, &'hir [ast::Attribute]>,\n     pub(super) signature: Option<&'hir Owner<'hir>>,\n     pub(super) with_bodies: Option<&'hir mut OwnerNodes<'hir>>,\n }\n@@ -457,10 +458,7 @@ impl<'hir> Map<'hir> {\n     /// invoking `krate.attrs` because it registers a tighter\n     /// dep-graph access.\n     pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {\n-        match self.get_entry(CRATE_HIR_ID).node {\n-            Node::Crate(item) => item.attrs,\n-            _ => bug!(),\n-        }\n+        self.attrs(CRATE_HIR_ID)\n     }\n \n     pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {\n@@ -853,34 +851,7 @@ impl<'hir> Map<'hir> {\n     /// Given a node ID, gets a list of attributes associated with the AST\n     /// corresponding to the node-ID.\n     pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {\n-        self.find_entry(id).map_or(&[], |entry| match entry.node {\n-            Node::Param(a) => a.attrs,\n-            Node::Local(l) => &l.attrs[..],\n-            Node::Item(i) => i.attrs,\n-            Node::ForeignItem(fi) => fi.attrs,\n-            Node::TraitItem(ref ti) => ti.attrs,\n-            Node::ImplItem(ref ii) => ii.attrs,\n-            Node::Variant(ref v) => v.attrs,\n-            Node::Field(ref f) => f.attrs,\n-            Node::Expr(ref e) => &*e.attrs,\n-            Node::Stmt(ref s) => s.kind.attrs(|id| self.item(id)),\n-            Node::Arm(ref a) => &*a.attrs,\n-            Node::GenericParam(param) => param.attrs,\n-            // Unit/tuple structs/variants take the attributes straight from\n-            // the struct/variant definition.\n-            Node::Ctor(..) => self.attrs(self.get_parent_item(id)),\n-            Node::Crate(item) => item.attrs,\n-            Node::MacroDef(def) => def.attrs,\n-            Node::AnonConst(..)\n-            | Node::PathSegment(..)\n-            | Node::Ty(..)\n-            | Node::Pat(..)\n-            | Node::Binding(..)\n-            | Node::TraitRef(..)\n-            | Node::Block(..)\n-            | Node::Lifetime(..)\n-            | Node::Visibility(..) => &[],\n-        })\n+        self.tcx.hir_attrs(id.owner).get(id.local_id).copied().unwrap_or(&[])\n     }\n \n     /// Gets the span of the definition of the specified HIR node."}, {"sha": "491934b845ec5abb7fc04956fa1e34b4ad4fa1df", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -76,6 +76,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.hir_module_items = |tcx, id| &tcx.untracked_crate.modules[&id];\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n     providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n+    providers.hir_attrs = |tcx, id| &tcx.index_hir(LOCAL_CRATE).map[id].attrs;\n     providers.def_span = |tcx, def_id| tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP);\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();"}, {"sha": "8edcefe72da5b63c78ae0459f2c4c5c16d44c81e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb257b3b4d11552963103acd8491d1bbea547d0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1fb257b3b4d11552963103acd8491d1bbea547d0", "patch": "@@ -61,6 +61,15 @@ rustc_queries! {\n         desc { |tcx| \"HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n+    /// Gives access to the HIR attributes inside the HIR owner `key`.\n+    ///\n+    /// This can be conveniently accessed by methods on `tcx.hir()`.\n+    /// Avoid calling this query directly.\n+    query hir_attrs(key: LocalDefId) -> &'tcx IndexVec<ItemLocalId, &'tcx [ast::Attribute]> {\n+        eval_always\n+        desc { |tcx| \"HIR owner attributes in `{}`\", tcx.def_path_str(key.to_def_id()) }\n+    }\n+\n     /// Computes the `DefId` of the corresponding const parameter in case the `key` is a\n     /// const argument and returns `None` otherwise.\n     ///"}]}