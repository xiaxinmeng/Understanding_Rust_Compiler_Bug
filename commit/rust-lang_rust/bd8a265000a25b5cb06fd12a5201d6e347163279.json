{"sha": "bd8a265000a25b5cb06fd12a5201d6e347163279", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOGEyNjUwMDBhMjViNWNiMDZmZDEyYTUyMDFkNmUzNDcxNjMyNzk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-01-02T04:52:13Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-01-02T05:31:05Z"}, "message": "Add help on field binding", "tree": {"sha": "24322e54e3fdb79e3c02cf66e45311c6280acfdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24322e54e3fdb79e3c02cf66e45311c6280acfdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8a265000a25b5cb06fd12a5201d6e347163279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8a265000a25b5cb06fd12a5201d6e347163279", "html_url": "https://github.com/rust-lang/rust/commit/bd8a265000a25b5cb06fd12a5201d6e347163279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8a265000a25b5cb06fd12a5201d6e347163279/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cf6e32f66980cea7630edacaa66d1bd0497b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cf6e32f66980cea7630edacaa66d1bd0497b2e", "html_url": "https://github.com/rust-lang/rust/commit/32cf6e32f66980cea7630edacaa66d1bd0497b2e"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "dafe7816fe466f26facac1966bdc34642929eded", "filename": "src/misc_early.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bd8a265000a25b5cb06fd12a5201d6e347163279/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8a265000a25b5cb06fd12a5201d6e347163279/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=bd8a265000a25b5cb06fd12a5201d6e347163279", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::*;\n \n use syntax::ast::*;\n \n-use utils::span_lint;\n+use utils::{span_lint, span_help_and_lint};\n \n /// **What it does:** This lint `Warn`s on struct field patterns bound to wildcards.\n ///\n@@ -27,26 +27,51 @@ impl LintPass for MiscEarly {\n \n impl EarlyLintPass for MiscEarly {\n     fn check_pat(&mut self, cx: &EarlyContext, pat: &Pat) {\n-        if let PatStruct(_, ref pfields, _) = pat.node {\n+        if let PatStruct(ref npat, ref pfields, _) = pat.node {\n             let mut wilds = 0;\n+            let type_name = match npat.segments.last() {\n+                Some(elem) => format!(\"{}\", elem.identifier.name),\n+                None => String::new(),\n+            };\n \n             for field in pfields {\n                 if field.node.pat.node == PatWild {\n                     wilds += 1;\n                 }\n             }\n             if !pfields.is_empty() && wilds == pfields.len() {\n-                span_lint(cx, UNNEEDED_FIELD_PATTERN, pat.span,\n-                          \"All the struct fields are matched to a wildcard pattern, \\\n-                           consider using `..`.\");\n+                span_help_and_lint(cx, UNNEEDED_FIELD_PATTERN, pat.span,\n+                                   \"All the struct fields are matched to a wildcard pattern, \\\n+                                    consider using `..`.\",\n+                                   &format!(\"Try with `{} {{ .. }}` instead\",\n+                                            type_name));\n                 return;\n             }\n             if wilds > 0 {\n+                let mut normal = vec!();\n+\n+                for field in pfields {\n+                    if field.node.pat.node != PatWild {\n+                        if let Ok(n) = cx.sess().codemap().span_to_snippet(field.span) {\n+                            normal.push(n);\n+                        }\n+                    }\n+                }\n                 for field in pfields {\n                     if field.node.pat.node == PatWild {\n-                        span_lint(cx, UNNEEDED_FIELD_PATTERN, field.span,\n-                                  \"You matched a field with a wildcard pattern. \\\n-                                   Consider using `..` instead\");\n+                        wilds -= 1;\n+                        if wilds > 0 {\n+                            span_lint(cx, UNNEEDED_FIELD_PATTERN, field.span,\n+                                      \"You matched a field with a wildcard pattern. \\\n+                                       Consider using `..` instead\");\n+                        } else {\n+                            span_help_and_lint(cx, UNNEEDED_FIELD_PATTERN, field.span,\n+                                               \"You matched a field with a wildcard pattern. \\\n+                                                Consider using `..` instead\",\n+                                               &format!(\"Try with `{} {{ {}, .. }}`\",\n+                                                        type_name,\n+                                                        normal[..].join(\", \")));\n+                        }\n                     }\n                 }\n             }"}]}