{"sha": "ac9cf98564cc394672cd9a96a02093569951027c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOWNmOTg1NjRjYzM5NDY3MmNkOWE5NmEwMjA5MzU2OTk1MTAyN2M=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-20T00:56:30Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-20T00:56:30Z"}, "message": "Edit for style", "tree": {"sha": "3c0913d450c86dd60546350e8ae57b83d7f4351a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c0913d450c86dd60546350e8ae57b83d7f4351a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac9cf98564cc394672cd9a96a02093569951027c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9cf98564cc394672cd9a96a02093569951027c", "html_url": "https://github.com/rust-lang/rust/commit/ac9cf98564cc394672cd9a96a02093569951027c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac9cf98564cc394672cd9a96a02093569951027c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f34144be308d28260d2496104ad06c2cb9cf5c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f34144be308d28260d2496104ad06c2cb9cf5c3", "html_url": "https://github.com/rust-lang/rust/commit/0f34144be308d28260d2496104ad06c2cb9cf5c3"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "ef3004f8cbe3059c45cd4fc12e687e0ab9febd89", "filename": "doc/tutorial.md", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac9cf98564cc394672cd9a96a02093569951027c/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac9cf98564cc394672cd9a96a02093569951027c/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=ac9cf98564cc394672cd9a96a02093569951027c", "patch": "@@ -2504,22 +2504,33 @@ needed because it could also, for example, specify an implementation\n of `seq<int>`\u2014the `of` clause *refers* to a type, rather than defining\n one.\n \n-Note that functions do not explicitly have the type parameters that \n-are provided by the iface. It will cause a compile-time error if you\n-include them in the iface or impl.\n+The type parameters bound by an iface are in scope in each of the\n+method declarations. So, re-declaring the type parameter\n+`T` as an explicit type parameter for `len` -- in either the iface or\n+the impl -- would be a compile-time error.\n \n-## Use of the type `self` in interfaces\n+## The `self` type in interfaces\n \n-Interfaces may use `self` as a type where the implementation uses its\n-own type. This defines an interface for testing equality of a type with\n-itself:\n+In an interface, `self` is a special type that you can think of as a\n+type parameter. An implementation of the interface for any given type\n+`T` replaces the `self` type parameter with `T`. The following\n+interface describes types that support an equality operation:\n \n ~~~~\n iface eq {\n   fn equals(other: self) -> bool;\n }\n ~~~~\n \n+In an implementation for type `int`, the `equals` method takes an\n+`int` argument:\n+\n+~~~~\n+impl of eq for int {\n+  fn equals(other: int) { other == self }\n+}\n+~~~~\n+\n ## Casting to an interface type\n \n The above allows us to define functions that polymorphically act on"}]}