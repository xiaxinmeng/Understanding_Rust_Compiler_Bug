{"sha": "bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNDg1MjIzMTQ5ZTM1YzFjNGU2YjNlY2Y1ODY1M2UzOGRlNGI2Yzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-15T09:47:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-15T09:47:27Z"}, "message": "fix tests, and use variants to test debug and release builds together", "tree": {"sha": "56fe69284885e9f9d5ba17f95fc2ecfe6fcdf853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56fe69284885e9f9d5ba17f95fc2ecfe6fcdf853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "html_url": "https://github.com/rust-lang/rust/commit/bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "html_url": "https://github.com/rust-lang/rust/commit/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b"}], "stats": {"total": 1640, "additions": 872, "deletions": 768}, "files": [{"sha": "978f2333101225f80f7e7969b92484364c480cf9", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,11 +1,11 @@\n // build-pass\n // ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n \n-#![warn(const_err)]\n+#![warn(const_err, panic)]\n \n fn main() {\n     &{ [1, 2, 3][4] };\n-    //~^ WARN index out of bounds\n+    //~^ WARN operation will panic\n     //~| WARN reaching this expression at runtime will panic or abort\n     //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "605cd73db1f860b2927135775132f6ffd9ce76cd", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,14 +1,14 @@\n-warning: index out of bounds: the len is 3 but the index is 4\n+warning: this operation will panic at runtime\n   --> $DIR/array-literal-index-oob.rs:7:8\n    |\n LL |     &{ [1, 2, 3][4] };\n-   |        ^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 4\n    |\n note: the lint level is defined here\n-  --> $DIR/array-literal-index-oob.rs:4:9\n+  --> $DIR/array-literal-index-oob.rs:4:20\n    |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+LL | #![warn(const_err, panic)]\n+   |                    ^^^^^\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/array-literal-index-oob.rs:7:8\n@@ -17,6 +17,12 @@ LL |     &{ [1, 2, 3][4] };\n    |     ---^^^^^^^^^^^^--\n    |        |\n    |        indexing out of bounds: the len is 3 but the index is 4\n+   |\n+note: the lint level is defined here\n+  --> $DIR/array-literal-index-oob.rs:4:9\n+   |\n+LL | #![warn(const_err, panic)]\n+   |         ^^^^^^^^^\n \n warning: erroneous constant used\n   --> $DIR/array-literal-index-oob.rs:7:5"}, {"sha": "226874c29da20540cf0f79fb78c9fd636f17cd20", "filename": "src/test/ui/consts/const-err2.debug.stderr", "status": "renamed", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.debug.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,50 +1,48 @@\n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:18:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n    |             ^^^^^^^^^^^^^ attempt to negate with overflow\n    |\n-note: the lint level is defined here\n-  --> $DIR/const-err2.rs:11:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n+   = note: `#[deny(overflow)]` on by default\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:20:18\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n    |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:22:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^ attempt to add with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:24:18\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:26:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^ attempt to multiply with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:28:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n-error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:30:14\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(panic)]` on by default\n \n error: aborting due to 7 previous errors\n ", "previous_filename": "src/test/ui/consts/const-err2.stderr"}, {"sha": "226874c29da20540cf0f79fb78c9fd636f17cd20", "filename": "src/test/ui/consts/const-err2.opt.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -0,0 +1,48 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n+   |\n+LL |     let a_i128 = -std::i128::MIN;\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n+   |\n+LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^ attempt to multiply with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(panic)]` on by default\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "226874c29da20540cf0f79fb78c9fd636f17cd20", "filename": "src/test/ui/consts/const-err2.opt_with_overflow_checks.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -0,0 +1,48 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n+   |\n+LL |     let a_i128 = -std::i128::MIN;\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n+   |\n+LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^ attempt to multiply with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(panic)]` on by default\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "6ef4e17df8378d118124fa2570d898b2ab03d009", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -2,33 +2,34 @@\n // optimized compilation and unoptimized compilation and thus would\n // lead to different lints being emitted\n \n+// revisions: debug opt opt_with_overflow_checks\n+//[debug]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-fail\n-// compile-flags: -O\n \n #![feature(rustc_attrs)]\n-#![allow(exceeding_bitshifts)]\n-\n-#![deny(const_err)]\n \n fn black_box<T>(_: T) {\n     unimplemented!()\n }\n \n fn main() {\n     let a = -std::i8::MIN;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let a_i128 = -std::i128::MIN;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let b_i128 = std::i128::MIN - std::i128::MAX;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let c = 200u8 * 4;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let _e = [5u8][1];\n-    //~^ ERROR const_err\n+    //~^ ERROR operation will panic\n     black_box(a);\n     black_box(a_i128);\n     black_box(b);"}, {"sha": "43aba4a8b012b00a6022751d586c24a74c90bb4f", "filename": "src/test/ui/consts/const-err3.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "patch": "@@ -1,38 +0,0 @@\n-// needed because negating int::MIN will behave differently between\n-// optimized compilation and unoptimized compilation and thus would\n-// lead to different lints being emitted\n-\n-// build-fail\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![feature(rustc_attrs)]\n-#![allow(exceeding_bitshifts)]\n-\n-#![deny(const_err)]\n-\n-fn black_box<T>(_: T) {\n-    unimplemented!()\n-}\n-\n-fn main() {\n-    let a = -std::i8::MIN;\n-    //~^ ERROR const_err\n-    let a_i128 = -std::i128::MIN;\n-    //~^ ERROR const_err\n-    let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n-    let b_i128 = std::i128::MIN - std::i128::MAX;\n-    //~^ ERROR const_err\n-    let c = 200u8 * 4;\n-    //~^ ERROR const_err\n-    let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n-    let _e = [5u8][1];\n-    //~^ ERROR const_err\n-    black_box(a);\n-    black_box(a_i128);\n-    black_box(b);\n-    black_box(b_i128);\n-    black_box(c);\n-    black_box(d);\n-}"}, {"sha": "05f64b87fcce6debabaeb621523f95f9cb275e8c", "filename": "src/test/ui/consts/const-err3.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "patch": "@@ -1,50 +0,0 @@\n-error: attempt to negate with overflow\n-  --> $DIR/const-err3.rs:18:13\n-   |\n-LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/const-err3.rs:11:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: attempt to negate with overflow\n-  --> $DIR/const-err3.rs:20:18\n-   |\n-LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^\n-\n-error: attempt to add with overflow\n-  --> $DIR/const-err3.rs:22:13\n-   |\n-LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^\n-\n-error: attempt to subtract with overflow\n-  --> $DIR/const-err3.rs:24:18\n-   |\n-LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: attempt to multiply with overflow\n-  --> $DIR/const-err3.rs:26:13\n-   |\n-LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^\n-\n-error: attempt to subtract with overflow\n-  --> $DIR/const-err3.rs:28:13\n-   |\n-LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^\n-\n-error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err3.rs:30:14\n-   |\n-LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "608e6e112a10be5f4ad7657af9bd3e0958de17a6", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let array = [std::env::args().len()];\n-    array[1]; //~ ERROR index out of bounds\n+    array[1]; //~ ERROR operation will panic\n }"}, {"sha": "5da802d30f5a3242d9f98a70209e154756cde781", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/index_out_of_bounds_propagated.rs:5:5\n    |\n LL |     array[1];\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "1ed60c1f96e43c759adf8ff27ce0de43125f6d92", "filename": "src/test/ui/consts/const-eval/promoted_errors.debug.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.debug.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -0,0 +1,78 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:12:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |                    ^^^^^^^^\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:30\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |                              ^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "8f21ce537155992b4d2bc50663b70448dec71195", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -0,0 +1,72 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |                    ^^^^^^^^\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:30\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |                              ^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "1ed60c1f96e43c759adf8ff27ce0de43125f6d92", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -0,0 +1,78 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:12:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |                    ^^^^^^^^\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:30\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |                              ^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, overflow, panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "5a4c7a66bf53df9d659caf01c9e0a0c4f752d955", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,23 +1,28 @@\n+// revisions: debug opt opt_with_overflow_checks\n+//[debug]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-pass\n // ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n-// compile-flags: -O\n \n-#![warn(const_err)]\n+#![warn(const_err, overflow, panic)]\n \n fn main() {\n     println!(\"{}\", 0u32 - 1);\n+    //[opt_with_overflow_checks,debug]~^ WARN [overflow]\n     let _x = 0u32 - 1;\n-    //~^ WARN const_err\n+    //~^ WARN [overflow]\n     println!(\"{}\", 1 / (1 - 1));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n+    //~^ WARN [panic]\n+    //~| WARN panic or abort [const_err]\n     //~| WARN erroneous constant used [const_err]\n     let _x = 1 / (1 - 1);\n-    //~^ WARN const_err\n+    //~^ WARN [panic]\n     println!(\"{}\", 1 / (false as u32));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n+    //~^ WARN [panic]\n+    //~| WARN panic or abort [const_err]\n     //~| WARN erroneous constant used [const_err]\n     let _x = 1 / (false as u32);\n-    //~^ WARN const_err\n+    //~^ WARN [panic]\n }"}, {"sha": "08ae5c7a32b65f81258193581c931d2e418688ef", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "patch": "@@ -1,60 +0,0 @@\n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:9:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to subtract with overflow\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:5:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:15:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:21:14\n-   |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "62c77f76d9064ca7325cc14369ea7dc2b59ecb03", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "patch": "@@ -1,24 +0,0 @@\n-// build-pass\n-// ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![warn(const_err)]\n-\n-fn main() {\n-    println!(\"{}\", 0u32 - 1);\n-    //~^ WARN attempt to subtract with overflow\n-    let _x = 0u32 - 1;\n-    //~^ WARN attempt to subtract with overflow\n-    println!(\"{}\", 1 / (1 - 1));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (1 - 1);\n-    //~^ WARN const_err\n-    println!(\"{}\", 1 / (false as u32));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (false as u32);\n-    //~^ WARN const_err\n-}"}, {"sha": "d1a9cb958e1553d9e10111552c3af5904067b935", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "patch": "@@ -1,66 +0,0 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:8:20\n-   |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors2.rs:5:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:10:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:16:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:22:14\n-   |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "5bffe0206294d80718fdba1d52d1f8cfe11f3ec3", "filename": "src/test/ui/consts/const-prop-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n \n fn main() {\n-    [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n+    [0; 3][3u64 as usize]; //~ ERROR this operation will panic at runtime\n }"}, {"sha": "855b9e6b64bb749bfac6ae62caf838f8fa844667", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 3 but the index is 3\n+error: this operation will panic at runtime\n   --> $DIR/const-prop-ice.rs:4:5\n    |\n LL |     [0; 3][3u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 3\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "d533e394c06fb5cab82cfe774d70b7c7b5d76909", "filename": "src/test/ui/consts/const-prop-ice2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     enum Enum { One=1 }\n     let xs=[0;1 as usize];\n-    println!(\"{}\", xs[Enum::One as usize]); //~ ERROR the len is 1 but the index is 1\n+    println!(\"{}\", xs[Enum::One as usize]); //~ ERROR this operation will panic at runtime\n }"}, {"sha": "07faa39edc24303e390a38c8fc439cfe3e88d16c", "filename": "src/test/ui/consts/const-prop-ice2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/const-prop-ice2.rs:6:20\n    |\n LL |     println!(\"{}\", xs[Enum::One as usize]);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "33d846e3e910bc7e04ec4e6bba319b99e6dfd403", "filename": "src/test/ui/issues/issue-8460-const.debug.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.debug.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "33d846e3e910bc7e04ec4e6bba319b99e6dfd403", "filename": "src/test/ui/issues/issue-8460-const.opt.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "33d846e3e910bc7e04ec4e6bba319b99e6dfd403", "filename": "src/test/ui/issues/issue-8460-const.opt_with_overflow_checks.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "3ab873952e25409819383de9fa9c38386c5623ed", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd485223149e35c1c4e6b3ecf58653e38de4b6c9/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=bd485223149e35c1c4e6b3ecf58653e38de4b6c9", "patch": "@@ -1,5 +1,9 @@\n+// revisions: debug opt opt_with_overflow_checks\n+//[debug]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-fail\n-// compile-flags: -O\n \n #![deny(const_err)]\n \n@@ -8,63 +12,51 @@ use std::thread;\n \n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n }"}, {"sha": "d7373948cb9e0519b03ba75aee12fcf156ecc2ff", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "removed", "additions": 0, "deletions": 224, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "patch": "@@ -1,224 +0,0 @@\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-8460-const.rs:4:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:13:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:19:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:25:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:28:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:30:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:32:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:34:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:36:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:38:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:43:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:49:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:55:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:58:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:60:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:62:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:64:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:66:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:68:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: aborting due to 36 previous errors\n-"}, {"sha": "afea859bb65a905ea32ed8f151d90c4833fdc4b7", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "patch": "@@ -1,58 +0,0 @@\n-// build-fail\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![deny(const_err)]\n-\n-use std::{isize, i8, i16, i32, i64, i128};\n-use std::thread;\n-\n-fn main() {\n-    assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-}"}, {"sha": "e25d560fe0ce34e03b2cb53b030343fcb7e9b48c", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "removed", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4b3f3e175a1b5d9e532ed35a917cd47196e75b/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=ad4b3f3e175a1b5d9e532ed35a917cd47196e75b", "patch": "@@ -1,152 +0,0 @@\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-8460-const2.rs:4:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:12:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:14:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:18:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:20:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:24:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:26:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:28:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:30:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:32:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:34:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:36:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:38:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:42:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:44:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:48:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:50:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:54:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:56:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: aborting due to 24 previous errors\n-"}]}