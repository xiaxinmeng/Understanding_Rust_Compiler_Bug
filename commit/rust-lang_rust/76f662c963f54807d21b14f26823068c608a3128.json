{"sha": "76f662c963f54807d21b14f26823068c608a3128", "node_id": "C_kwDOAAsO6NoAKDc2ZjY2MmM5NjNmNTQ4MDdkMjFiMTRmMjY4MjMwNjhjNjA4YTMxMjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-20T17:54:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-20T17:54:39Z"}, "message": "Rollup merge of #97109 - TaKO8Ki:fix-misleading-cannot-infer-type-for-type-parameter-error, r=oli-obk\n\nFix misleading `cannot infer type for type parameter` error\n\ncloses #93198", "tree": {"sha": "cd27733fb0c4bf01f901849fd3e63db7c46967c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd27733fb0c4bf01f901849fd3e63db7c46967c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76f662c963f54807d21b14f26823068c608a3128", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJih9XgCRBK7hj4Ov3rIwAAElUIAD9c/Yxkv5/2QdylXAzmJopn\nFqdHpR+2gG9uiOiY5G8cHa33Ya+5ERnf++I6WWXe7FZkercEXT0Mhm1qj2B+NPSs\nKInruutKnBeAFjw0+5dWkLzK1/89o61/Meg0OAogk164iS75GWaxXc3HKV4daYdP\n3aMgsNFJGV82SO2HBObacrCdU9lfAWIVRRCVifwiOpRy+k2Tvijh7rM8cPt8tPUZ\n1L0gh4pisM+9wAcp3Q7tV61lfbKEZwdYiUAC9pkZH0Rn+gCKHdaZBy7BY64G6SS5\nwJTUXB2LMiUOVedd6sx9LwoKW3VdJhgL8XkppnHizUw9yZP7V4W4WRsq3RD0UbA=\n=8gYE\n-----END PGP SIGNATURE-----\n", "payload": "tree cd27733fb0c4bf01f901849fd3e63db7c46967c0\nparent 22ee39504a702f75485582d02060495a01254de1\nparent 3d0f9fb544cc73ea4016696e43868b71bf3c8226\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1653069279 +0200\ncommitter GitHub <noreply@github.com> 1653069279 +0200\n\nRollup merge of #97109 - TaKO8Ki:fix-misleading-cannot-infer-type-for-type-parameter-error, r=oli-obk\n\nFix misleading `cannot infer type for type parameter` error\n\ncloses #93198\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76f662c963f54807d21b14f26823068c608a3128", "html_url": "https://github.com/rust-lang/rust/commit/76f662c963f54807d21b14f26823068c608a3128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76f662c963f54807d21b14f26823068c608a3128/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ee39504a702f75485582d02060495a01254de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ee39504a702f75485582d02060495a01254de1", "html_url": "https://github.com/rust-lang/rust/commit/22ee39504a702f75485582d02060495a01254de1"}, {"sha": "3d0f9fb544cc73ea4016696e43868b71bf3c8226", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0f9fb544cc73ea4016696e43868b71bf3c8226", "html_url": "https://github.com/rust-lang/rust/commit/3d0f9fb544cc73ea4016696e43868b71bf3c8226"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "e1a2a237c2324525d6d0ef882b96a1a9cfbb0706", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -866,6 +866,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n \n+            self.report_ambiguous_type_parameter(&mut err, arg);\n             err.span_label(\n                 span,\n                 arg_data.cannot_infer_msg(use_diag.filter(|d| d.applies_to(span))),\n@@ -933,6 +934,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn report_ambiguous_type_parameter(&self, err: &mut Diagnostic, arg: GenericArg<'tcx>) {\n+        if let GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Infer(ty::TyVar(ty_vid)) = *ty.kind()\n+        {\n+            let mut inner = self.inner.borrow_mut();\n+            let ty_vars = &inner.type_variables();\n+            let var_origin = ty_vars.var_origin(ty_vid);\n+            if let TypeVariableOriginKind::TypeParameterDefinition(_, Some(def_id)) =\n+                var_origin.kind\n+                && let Some(parent_def_id) = self.tcx.parent(def_id).as_local()\n+                && let Some(node) = self.tcx.hir().find_by_def_id(parent_def_id)\n+            {\n+                match node {\n+                    hir::Node::Item(item) if matches!(item.kind, hir::ItemKind::Impl(_) | hir::ItemKind::Fn(..)) => (),\n+                    hir::Node::ImplItem(impl_item) if matches!(impl_item.kind, hir::ImplItemKind::Fn(..)) => (),\n+                    _ => return,\n+                }\n+                err.span_help(self.tcx.def_span(def_id), \"type parameter declared here\");\n+            }\n+        }\n+    }\n+\n     pub fn need_type_info_err_in_generator(\n         &self,\n         kind: hir::GeneratorKind,"}, {"sha": "3f44a54e80adc9cd5a284e96c19ec3c73b5eed8a", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -5,6 +5,12 @@ LL |     let _ = foo([0; 1]);\n    |         -   ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |         |\n    |         consider giving this pattern a type\n+   |\n+help: type parameter declared here\n+  --> $DIR/issue-83249.rs:12:8\n+   |\n+LL | fn foo<T: Foo>(_: [u8; T::N]) -> T {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "caa582d87f527295e587364270f9893ff04077d9", "filename": "src/test/ui/consts/issue-64662.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64662.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -3,12 +3,24 @@ error[E0282]: type annotations needed\n    |\n LL |     A = foo(),\n    |         ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/issue-64662.rs:6:14\n+   |\n+LL | const fn foo<T>() -> isize {\n+   |              ^\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-64662.rs:3:9\n    |\n LL |     B = foo(),\n    |         ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/issue-64662.rs:6:14\n+   |\n+LL | const fn foo<T>() -> isize {\n+   |              ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e58c9d3116a1c6af71b47ae788e1aaf43c63b37d", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -37,6 +37,12 @@ error[E0282]: type annotations needed\n    |\n LL |     bfnr(x);\n    |     ^^^^ cannot infer type for type parameter `U` declared on the function `bfnr`\n+   |\n+help: type parameter declared here\n+  --> $DIR/E0401.rs:4:13\n+   |\n+LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) {\n+   |             ^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "dc70ed661d2234515210458c0f5cdd333f1da573", "filename": "src/test/ui/inference/ambiguous_type_parameter.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.rs?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -0,0 +1,17 @@\n+use std::collections::HashMap;\n+\n+trait Store<K, V> {\n+    fn get_raw(&self, key: &K) -> Option<()>;\n+}\n+\n+struct InMemoryStore;\n+\n+impl<K> Store<String, HashMap<K, String>> for InMemoryStore {\n+    fn get_raw(&self, key: &String) -> Option<()> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    InMemoryStore.get_raw(&String::default()); //~ ERROR type annotations needed\n+}"}, {"sha": "47ef1948aee9fcab453c46c92602cd45070c5b45", "filename": "src/test/ui/inference/ambiguous_type_parameter.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fambiguous_type_parameter.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/ambiguous_type_parameter.rs:16:19\n+   |\n+LL |     InMemoryStore.get_raw(&String::default());\n+   |                   ^^^^^^^ cannot infer type for type parameter `K`\n+   |\n+help: type parameter declared here\n+  --> $DIR/ambiguous_type_parameter.rs:9:6\n+   |\n+LL | impl<K> Store<String, HashMap<K, String>> for InMemoryStore {\n+   |      ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "51fac5f79df475c54592504c9bef7914a09d745d", "filename": "src/test/ui/inference/erase-type-params-in-label.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -6,6 +6,11 @@ LL |     let foo = foo(1, \"\");\n    |         |\n    |         consider giving `foo` the explicit type `Foo<_, _, W, Z>`, where the type parameter `W` is specified\n    |\n+help: type parameter declared here\n+  --> $DIR/erase-type-params-in-label.rs:25:14\n+   |\n+LL | fn foo<T, K, W: Default, Z: Default>(t: T, k: K) -> Foo<T, K, W, Z> {\n+   |              ^\n    = note: cannot satisfy `_: Default`\n note: required by a bound in `foo`\n   --> $DIR/erase-type-params-in-label.rs:25:17\n@@ -25,6 +30,11 @@ LL |     let bar = bar(1, \"\");\n    |         |\n    |         consider giving `bar` the explicit type `Bar<_, _, Z>`, where the type parameter `Z` is specified\n    |\n+help: type parameter declared here\n+  --> $DIR/erase-type-params-in-label.rs:14:14\n+   |\n+LL | fn bar<T, K, Z: Default>(t: T, k: K) -> Bar<T, K, Z> {\n+   |              ^\n    = note: cannot satisfy `_: Default`\n note: required by a bound in `bar`\n   --> $DIR/erase-type-params-in-label.rs:14:17"}, {"sha": "edf97c0aed47ee04b51a62d76543e763a82a06e5", "filename": "src/test/ui/inference/issue-86162-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -4,6 +4,11 @@ error[E0283]: type annotations needed\n LL |     foo(gen()); //<- Do not suggest `foo::<impl Clone>()`!\n    |     ^^^ cannot infer type for type parameter `impl Clone` declared on the function `foo`\n    |\n+help: type parameter declared here\n+  --> $DIR/issue-86162-1.rs:3:11\n+   |\n+LL | fn foo(x: impl Clone) {}\n+   |           ^^^^^^^^^^\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `foo`\n   --> $DIR/issue-86162-1.rs:3:16"}, {"sha": "c642ebb057603b51aba7d53ffb803e103e2a48d5", "filename": "src/test/ui/inference/issue-86162-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -4,6 +4,11 @@ error[E0283]: type annotations needed\n LL |     Foo::bar(gen()); //<- Do not suggest `Foo::bar::<impl Clone>()`!\n    |     ^^^^^^^^ cannot infer type for type parameter `impl Clone` declared on the associated function `bar`\n    |\n+help: type parameter declared here\n+  --> $DIR/issue-86162-2.rs:8:15\n+   |\n+LL |     fn bar(x: impl Clone) {}\n+   |               ^^^^^^^^^^\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `Foo::bar`\n   --> $DIR/issue-86162-2.rs:8:20"}, {"sha": "f548692d785830f649b0ba637b89f75da3aac0e7", "filename": "src/test/ui/issues/issue-6458.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -3,6 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |    foo(TypeWithState(marker::PhantomData));\n    |    ^^^ cannot infer type for type parameter `State` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/issue-6458.rs:6:12\n+   |\n+LL | pub fn foo<State>(_: TypeWithState<State>) {}\n+   |            ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2aa2b0e6a3c2c062071485cf219f489948fd4c30", "filename": "src/test/ui/missing/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -3,6 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |     foo();\n    |     ^^^ cannot infer type for type parameter `X` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/missing-type-parameter.rs:1:8\n+   |\n+LL | fn foo<X>() { }\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "a4cfee55633731c2c43a6924a26e3f8e76e294f8", "filename": "src/test/ui/suggestions/fn-needing-specified-return-type-param.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-needing-specified-return-type-param.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -5,6 +5,12 @@ LL |     let _ = f;\n    |         -   ^ cannot infer type for type parameter `A` declared on the function `f`\n    |         |\n    |         consider giving this pattern the explicit type `fn() -> A`, where the type parameter `A` is specified\n+   |\n+help: type parameter declared here\n+  --> $DIR/fn-needing-specified-return-type-param.rs:1:6\n+   |\n+LL | fn f<A>() -> A { unimplemented!() }\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "da7461347106ffa68a2ca0c6b8061bce17aeb9c7", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -3,13 +3,24 @@ error[E0282]: type annotations needed\n    |\n LL |     test(22, std::default::Default::default());\n    |     ^^^^ cannot infer type for type parameter `U` declared on the function `test`\n+   |\n+help: type parameter declared here\n+  --> $DIR/multidispatch-convert-ambig-dest.rs:20:11\n+   |\n+LL | fn test<T,U>(_: T, _: U)\n+   |           ^\n \n error[E0283]: type annotations needed\n   --> $DIR/multidispatch-convert-ambig-dest.rs:26:5\n    |\n LL |     test(22, std::default::Default::default());\n    |     ^^^^ cannot infer type for type parameter `U` declared on the function `test`\n    |\n+help: type parameter declared here\n+  --> $DIR/multidispatch-convert-ambig-dest.rs:20:11\n+   |\n+LL | fn test<T,U>(_: T, _: U)\n+   |           ^\n note: multiple `impl`s satisfying `i32: Convert<_>` found\n   --> $DIR/multidispatch-convert-ambig-dest.rs:8:1\n    |"}, {"sha": "3c8d7450f96fa1f4bf200399e8c089cce13cd507", "filename": "src/test/ui/traits/not-suggest-non-existing-fully-qualified-path.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -16,6 +16,11 @@ LL |     a.method();\n    |     | cannot infer type for type parameter `U`\n    |     this method call resolves to `U`\n    |\n+help: type parameter declared here\n+  --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:12:9\n+   |\n+LL | impl<T, U> V<U> for A<T>\n+   |         ^\n note: multiple `impl`s satisfying `B: I<_>` found\n   --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:5:1\n    |"}, {"sha": "501fa7c8c67c198adfc54c5abeb899e5dd40fcbb", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn-with-assoc-type.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn-with-assoc-type.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -3,6 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |     foo();\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/unbounded-type-param-in-fn-with-assoc-type.rs:3:8\n+   |\n+LL | fn foo<T, U = u64>() -> (T, U) {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "d01c3a7d4e220258e1d35aeed2765c4948704dab", "filename": "src/test/ui/type-inference/unbounded-type-param-in-fn.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Funbounded-type-param-in-fn.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -3,6 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |     foo();\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |\n+help: type parameter declared here\n+  --> $DIR/unbounded-type-param-in-fn.rs:1:8\n+   |\n+LL | fn foo<T>() -> T {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "64fdbfe7db4c899d1fe8352d268966d7aa01cfcd", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76f662c963f54807d21b14f26823068c608a3128/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=76f662c963f54807d21b14f26823068c608a3128", "patch": "@@ -4,6 +4,11 @@ error[E0283]: type annotations needed\n LL |     foo(42);\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |\n+help: type parameter declared here\n+  --> $DIR/type-annotation-needed.rs:1:8\n+   |\n+LL | fn foo<T: Into<String>>(x: i32) {}\n+   |        ^\n    = note: cannot satisfy `_: Into<String>`\n note: required by a bound in `foo`\n   --> $DIR/type-annotation-needed.rs:1:11"}]}