{"sha": "85c0479e179639180c13c5fe6a6789e6538ea891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzA0NzllMTc5NjM5MTgwYzEzYzVmZTZhNjc4OWU2NTM4ZWE4OTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-11T14:01:27Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-11T14:04:18Z"}, "message": "Remove unnecessary Clean impl", "tree": {"sha": "b9a73ec390ee76dd6a59054723918c1fd0017f5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a73ec390ee76dd6a59054723918c1fd0017f5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c0479e179639180c13c5fe6a6789e6538ea891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c0479e179639180c13c5fe6a6789e6538ea891", "html_url": "https://github.com/rust-lang/rust/commit/85c0479e179639180c13c5fe6a6789e6538ea891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c0479e179639180c13c5fe6a6789e6538ea891/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc0d140baecbe6b38496f1d869de0698e639c7df", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0d140baecbe6b38496f1d869de0698e639c7df", "html_url": "https://github.com/rust-lang/rust/commit/cc0d140baecbe6b38496f1d869de0698e639c7df"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "6267b02e5d2c48c10ae6aa7bdb5b252bf5ed7a05", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c0479e179639180c13c5fe6a6789e6538ea891/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c0479e179639180c13c5fe6a6789e6538ea891/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=85c0479e179639180c13c5fe6a6789e6538ea891", "patch": "@@ -130,7 +130,7 @@ pub fn try_inline(\n         attrs,\n         inner,\n         visibility: clean::Public,\n-        stability: cx.tcx.lookup_stability(did).clean(cx),\n+        stability: cx.tcx.lookup_stability(did).cloned(),\n         deprecation: cx.tcx.lookup_deprecation(did).clean(cx),\n         def_id: did,\n     });\n@@ -461,7 +461,7 @@ pub fn build_impl(\n         name: None,\n         attrs,\n         visibility: clean::Inherited,\n-        stability: tcx.lookup_stability(did).clean(cx),\n+        stability: tcx.lookup_stability(did).cloned(),\n         deprecation: tcx.lookup_deprecation(did).clean(cx),\n         def_id: did,\n     });"}, {"sha": "776b131a076110c4c6a381493acd488feaab2579", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85c0479e179639180c13c5fe6a6789e6538ea891/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c0479e179639180c13c5fe6a6789e6538ea891/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=85c0479e179639180c13c5fe6a6789e6538ea891", "patch": "@@ -913,7 +913,7 @@ impl Clean<Item> for doctree::Function<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: did.to_def_id(),\n             inner: FunctionItem(Function {\n@@ -1022,7 +1022,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TraitItem(Trait {\n                 auto: self.is_auto.clean(cx),\n@@ -1046,7 +1046,7 @@ impl Clean<Item> for doctree::TraitAlias<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TraitAliasItem(TraitAlias {\n                 generics: self.generics.clean(cx),\n@@ -1831,7 +1831,7 @@ impl Clean<Item> for doctree::Struct<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StructItem(Struct {\n                 struct_type: self.struct_type,\n@@ -1851,7 +1851,7 @@ impl Clean<Item> for doctree::Union<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: UnionItem(Union {\n                 struct_type: self.struct_type,\n@@ -1881,7 +1881,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: EnumItem(Enum {\n                 variants: self.variants.iter().map(|v| v.clean(cx)).collect(),\n@@ -1899,7 +1899,7 @@ impl Clean<Item> for doctree::Variant<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: Inherited,\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             inner: VariantItem(Variant { kind: self.def.clean(cx) }),\n@@ -2048,7 +2048,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: TypedefItem(Typedef { type_, generics: self.gen.clean(cx), item_type }, false),\n         }\n@@ -2063,7 +2063,7 @@ impl Clean<Item> for doctree::OpaqueTy<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: OpaqueTyItem(OpaqueTy {\n                 bounds: self.opaque_ty.bounds.clean(cx),\n@@ -2091,7 +2091,7 @@ impl Clean<Item> for doctree::Static<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n@@ -2112,7 +2112,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n             source: self.span.clean(cx),\n             def_id: def_id.to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n@@ -2166,7 +2166,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n             source: self.span.clean(cx),\n             def_id: def_id.to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ImplItem(Impl {\n                 unsafety: self.unsafety,\n@@ -2348,7 +2348,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner,\n         }\n@@ -2363,7 +2363,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: Public,\n-            stability: cx.stability(self.hid).clean(cx),\n+            stability: cx.stability(self.hid),\n             deprecation: cx.deprecation(self.hid).clean(cx),\n             def_id: self.def_id,\n             inner: MacroItem(Macro {\n@@ -2388,20 +2388,14 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: Public,\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             inner: ProcMacroItem(ProcMacro { kind: self.kind, helpers: self.helpers.clean(cx) }),\n         }\n     }\n }\n \n-impl Clean<attr::Stability> for attr::Stability {\n-    fn clean(&self, _: &DocContext<'_>) -> attr::Stability {\n-        self.clone()\n-    }\n-}\n-\n impl Clean<Deprecation> for attr::Deprecation {\n     fn clean(&self, _: &DocContext<'_>) -> Deprecation {\n         Deprecation {"}, {"sha": "e6693540b238b7f3ff6a9231ee92dc38214bc0d1", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c0479e179639180c13c5fe6a6789e6538ea891/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c0479e179639180c13c5fe6a6789e6538ea891/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=85c0479e179639180c13c5fe6a6789e6538ea891", "patch": "@@ -103,7 +103,7 @@ pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n \n // extract the stability index for a node from tcx, if possible\n pub fn get_stability(cx: &DocContext<'_>, def_id: DefId) -> Option<Stability> {\n-    cx.tcx.lookup_stability(def_id).clean(cx)\n+    cx.tcx.lookup_stability(def_id).cloned()\n }\n \n pub fn get_deprecation(cx: &DocContext<'_>, def_id: DefId) -> Option<Deprecation> {"}]}