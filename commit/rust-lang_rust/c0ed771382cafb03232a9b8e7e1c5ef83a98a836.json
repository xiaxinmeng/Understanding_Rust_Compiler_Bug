{"sha": "c0ed771382cafb03232a9b8e7e1c5ef83a98a836", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZWQ3NzEzODJjYWZiMDMyMzJhOWI4ZTdlMWM1ZWY4M2E5OGE4MzY=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-12-15T16:26:18Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-12-15T16:26:18Z"}, "message": "Remove u8 cttz hack\n\nThis issue has since been fixed in LLVM:\nhttps://github.com/llvm-mirror/llvm/commit/1886c8e29a9992d73c5e6ba0d52eb98ee036ab5d\n\nFurthermore this doesn't actually work, because the \"8\" literal does\nnot match the $BITS provided from the macro invocation, so effectively\nthis code was not being used anyway...", "tree": {"sha": "2600ec2a28c9a12bf7a1bc61e428c69cd2711300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2600ec2a28c9a12bf7a1bc61e428c69cd2711300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ed771382cafb03232a9b8e7e1c5ef83a98a836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ed771382cafb03232a9b8e7e1c5ef83a98a836", "html_url": "https://github.com/rust-lang/rust/commit/c0ed771382cafb03232a9b8e7e1c5ef83a98a836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ed771382cafb03232a9b8e7e1c5ef83a98a836/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "html_url": "https://github.com/rust-lang/rust/commit/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387"}], "stats": {"total": 15, "additions": 1, "deletions": 14}, "files": [{"sha": "38a20bf9388bb5fa0716ca1a2fe66eed226cbbd1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0ed771382cafb03232a9b8e7e1c5ef83a98a836/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ed771382cafb03232a9b8e7e1c5ef83a98a836/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c0ed771382cafb03232a9b8e7e1c5ef83a98a836", "patch": "@@ -2150,19 +2150,6 @@ impl isize {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n }\n \n-// Emits the correct `cttz` call, depending on the size of the type.\n-macro_rules! uint_cttz_call {\n-    // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic\n-    // emits two conditional moves on x86_64. By promoting the value to\n-    // u16 and setting bit 8, we get better code without any conditional\n-    // operations.\n-    // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)\n-    // pending, remove this workaround once LLVM generates better code\n-    // for cttz8.\n-    ($value:expr, 8) => { intrinsics::cttz($value as u16 | 0x100) };\n-    ($value:expr, $_BITS:expr) => { intrinsics::cttz($value) }\n-}\n-\n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n@@ -2306,7 +2293,7 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n-                unsafe { uint_cttz_call!(self, $BITS) as u32 }\n+                unsafe { intrinsics::cttz(self) as u32 }\n             }\n         }\n "}]}