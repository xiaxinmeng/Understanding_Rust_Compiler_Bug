{"sha": "344889e963742e87181d3c023e2a1ea7d95f9468", "node_id": "C_kwDOAAsO6NoAKDM0NDg4OWU5NjM3NDJlODcxODFkM2MwMjNlMmExZWE3ZDk1Zjk0Njg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-04T11:34:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-04T11:34:30Z"}, "message": "Auto merge of #105248 - matthiaskrgr:rollup-d56k6bc, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #104856 (Don't suggest associated function call for associated const.)\n - #105123 (Fix passing MACOSX_DEPLOYMENT_TARGET to the linker)\n - #105142 (Make inline const block `ExprWithBlock`)\n - #105237 (Add regression test for #79450)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "80d844d6f252e41d0387acdef4c49f07a0d9b152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80d844d6f252e41d0387acdef4c49f07a0d9b152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/344889e963742e87181d3c023e2a1ea7d95f9468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/344889e963742e87181d3c023e2a1ea7d95f9468", "html_url": "https://github.com/rust-lang/rust/commit/344889e963742e87181d3c023e2a1ea7d95f9468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/344889e963742e87181d3c023e2a1ea7d95f9468/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e772114e6a17498f1ba27ba96693012788972e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e772114e6a17498f1ba27ba96693012788972e2", "html_url": "https://github.com/rust-lang/rust/commit/9e772114e6a17498f1ba27ba96693012788972e2"}, {"sha": "da9585b745cbbae321f414cd6171c5c851c645f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9585b745cbbae321f414cd6171c5c851c645f1", "html_url": "https://github.com/rust-lang/rust/commit/da9585b745cbbae321f414cd6171c5c851c645f1"}], "stats": {"total": 194, "additions": 152, "deletions": 42}, "files": [{"sha": "cdc244c12181d78e6209006a85d4abf71f962660", "filename": "compiler/rustc_ast/src/util/classify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -21,6 +21,7 @@ pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n             | ast::ExprKind::Loop(..)\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::TryBlock(..)\n+            | ast::ExprKind::ConstBlock(..)\n     )\n }\n "}, {"sha": "ae299cc9d13706d1402600eef7c2a61328144f87", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def::Namespace;\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1876,6 +1875,15 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.tcx.erase_late_bound_regions(value)\n     }\n \n+    /// Determine if the given associated item type is relevant in the current context.\n+    fn is_relevant_kind_for_mode(&self, kind: ty::AssocKind) -> bool {\n+        match (self.mode, kind) {\n+            (Mode::MethodCall, ty::AssocKind::Fn) => true,\n+            (Mode::Path, ty::AssocKind::Const | ty::AssocKind::Fn) => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Finds the method with the appropriate name (or return type, as the case may be). If\n     /// `allow_similar_names` is set, find methods with close-matching names.\n     // The length of the returned iterator is nearly always 0 or 1 and this\n@@ -1888,7 +1896,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .associated_items(def_id)\n                     .in_definition_order()\n                     .filter(|x| {\n-                        if x.kind.namespace() != Namespace::ValueNS {\n+                        if !self.is_relevant_kind_for_mode(x.kind) {\n                             return false;\n                         }\n                         match lev_distance_with_substrings(name.as_str(), x.name.as_str(), max_dist)\n@@ -1902,10 +1910,16 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 self.fcx\n                     .associated_value(def_id, name)\n+                    .filter(|x| self.is_relevant_kind_for_mode(x.kind))\n                     .map_or_else(SmallVec::new, |x| SmallVec::from_buf([x]))\n             }\n         } else {\n-            self.tcx.associated_items(def_id).in_definition_order().copied().collect()\n+            self.tcx\n+                .associated_items(def_id)\n+                .in_definition_order()\n+                .filter(|x| self.is_relevant_kind_for_mode(x.kind))\n+                .copied()\n+                .collect()\n         }\n     }\n }"}, {"sha": "e72cab629ff19058cd332c33689fc851ee263cc4", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -10,8 +10,6 @@ pub fn target() -> Target {\n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n-\n     Target {\n         // Clang automatically chooses a more specific target based on\n         // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work"}, {"sha": "3c90a5e7e93ea74ca2ae33ac230ad3522d10f841", "filename": "compiler/rustc_target/src/spec/apple/tests.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -1,6 +1,6 @@\n use crate::spec::{\n-    aarch64_apple_ios_sim, aarch64_apple_watchos_sim, x86_64_apple_ios, x86_64_apple_tvos,\n-    x86_64_apple_watchos_sim,\n+    aarch64_apple_darwin, aarch64_apple_ios_sim, aarch64_apple_watchos_sim, i686_apple_darwin,\n+    x86_64_apple_darwin, x86_64_apple_ios, x86_64_apple_tvos, x86_64_apple_watchos_sim,\n };\n \n #[test]\n@@ -18,3 +18,18 @@ fn simulator_targets_set_abi() {\n         assert_eq!(target.abi, \"sim\")\n     }\n }\n+\n+#[test]\n+fn macos_link_environment_unmodified() {\n+    let all_macos_targets = [\n+        aarch64_apple_darwin::target(),\n+        i686_apple_darwin::target(),\n+        x86_64_apple_darwin::target(),\n+    ];\n+\n+    for target in all_macos_targets {\n+        // macOS targets should only remove information for cross-compiling, but never\n+        // for the host.\n+        assert_eq!(target.link_env_remove, crate::spec::cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"]);\n+    }\n+}"}, {"sha": "7f8160b5dec62d7ce4ed0b5a4ff5113cfb4da9ac", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -72,16 +72,6 @@ impl Arch {\n             Arm64_sim => \"apple-a12\",\n         }\n     }\n-\n-    fn link_env_remove(self) -> StaticCow<[StaticCow<str>]> {\n-        match self {\n-            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n-            | Arm64_sim => {\n-                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n-            }\n-            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n-        }\n-    }\n }\n \n fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n@@ -140,7 +130,7 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n         abi: abi.into(),\n         os: os.into(),\n         cpu: arch.target_cpu().into(),\n-        link_env_remove: arch.link_env_remove(),\n+        link_env_remove: link_env_remove(arch, os),\n         vendor: \"apple\".into(),\n         linker_flavor: LinkerFlavor::Darwin(Cc::Yes, Lld::No),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n@@ -211,20 +201,38 @@ pub fn macos_llvm_target(arch: Arch) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch.target_name(), major, minor)\n }\n \n-pub fn macos_link_env_remove() -> Vec<StaticCow<str>> {\n-    let mut env_remove = Vec::with_capacity(2);\n-    // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n-    // may occur when we're linking a custom build script while targeting iOS for example.\n-    if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n-        if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\") {\n-            env_remove.push(\"SDKROOT\".into())\n+fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]> {\n+    // Apple platforms only officially support macOS as a host for any compilation.\n+    //\n+    // If building for macOS, we go ahead and remove any erronous environment state\n+    // that's only applicable to cross-OS compilation. Always leave anything for the\n+    // host OS alone though.\n+    if os == \"macos\" {\n+        let mut env_remove = Vec::with_capacity(2);\n+        // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n+        // may occur when we're linking a custom build script while targeting iOS for example.\n+        if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n+            if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\")\n+            {\n+                env_remove.push(\"SDKROOT\".into())\n+            }\n+        }\n+        // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n+        // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n+        // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n+        env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".into());\n+        env_remove.into()\n+    } else {\n+        // Otherwise if cross-compiling for a different OS/SDK, remove any part\n+        // of the linking environment that's wrong and reversed.\n+        match arch {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n+            | Arm64_sim => {\n+                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n+            }\n+            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n         }\n     }\n-    // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n-    // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n-    // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n-    env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".into());\n-    env_remove\n }\n \n fn ios_deployment_target() -> (u32, u32) {"}, {"sha": "ad22467ba9c8970ad4cdf13b804d648b307f6cfb", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -7,7 +7,6 @@ pub fn target() -> Target {\n     let mut base = opts(\"macos\", arch);\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m32\"]);\n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;\n "}, {"sha": "9a3e7a8050025c01cc63e69238ad78756b736213", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n@@ -8,7 +8,6 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(128); // core2 supports cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;"}, {"sha": "70fca04365378e4af715d7948589000a591399e4", "filename": "src/test/run-make/macos-deployment-target/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -0,0 +1,21 @@\n+# only-macos\n+#\n+# Check that a set deployment target actually makes it to the linker.\n+# This is important since its a compatibility hazard. The linker will\n+# generate load commands differently based on what minimum OS it can assume.\n+\n+include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(strip $(shell uname -m)),arm64)\n+\tGREP_PATTERN = \"minos 11.0\"\n+else\n+ \tGREP_PATTERN = \"version 10.9\"\n+endif\n+\n+OUT_FILE=$(TMPDIR)/with_deployment_target.dylib\n+all:\n+\tenv MACOSX_DEPLOYMENT_TARGET=10.9 $(RUSTC) with_deployment_target.rs -o $(OUT_FILE)\n+# XXX: The check is for either the x86_64 minimum OR the aarch64 minimum (M1 starts at macOS 11).\n+# They also use different load commands, so we let that change with each too. The aarch64 check\n+# isn't as robust as the x86 one, but testing both seems unneeded.\n+\tvtool -show-build $(OUT_FILE) | $(CGREP) -e $(GREP_PATTERN)"}, {"sha": "342fe0ecbcfcd20085014a4b62278cfe2b762cbc", "filename": "src/test/run-make/macos-deployment-target/with_deployment_target.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type = \"cdylib\"]\n+\n+#[allow(dead_code)]\n+fn something_and_nothing() {}"}, {"sha": "f7547742ddcbed9d0638bc12d694c0221b34e707", "filename": "src/test/ui/inline-const/expr-with-block-err.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block-err.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -0,0 +1,6 @@\n+#![feature(inline_const)]\n+\n+fn main() {\n+    const { 2 } - const { 1 };\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "6f7408f4e2a6aff3027dfb2d923880b8b51758ac", "filename": "src/test/ui/inline-const/expr-with-block-err.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block-err.stderr?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/expr-with-block-err.rs:4:13\n+   |\n+LL |     const { 2 } - const { 1 };\n+   |             ^ expected `()`, found integer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "391872476fccdfff56c333e2638ab4037dbecff3", "filename": "src/test/ui/inline-const/expr-with-block.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-with-block.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+#![feature(inline_const)]\n+fn main() {\n+    match true {\n+        true => const {}\n+        false => ()\n+    }\n+    const {}\n+    ()\n+}"}, {"sha": "b604c65d75100cec2cc491e547522e23dd4a4c42", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-79450.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-79450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-79450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-79450.rs?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_fmt_arguments_new)]\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+trait Tr {\n+    fn req(&self);\n+\n+    fn prov(&self) {\n+        println!(\"lul\"); //~ ERROR: cannot call non-const fn `_print` in constant functions\n+        self.req();\n+    }\n+}\n+\n+struct S;\n+\n+impl const Tr for S {\n+    fn req(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "082c0333fbfcdfd7130f72297becd8d915a607c4", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-79450.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-79450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-79450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-79450.stderr?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -0,0 +1,12 @@\n+error[E0015]: cannot call non-const fn `_print` in constant functions\n+  --> $DIR/issue-79450.rs:9:9\n+   |\n+LL |         println!(\"lul\");\n+   |         ^^^^^^^^^^^^^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "0d9543e0b8fa22d61ae4280b051aabe571f7aeef", "filename": "src/test/ui/suggestions/dont-suggest-ufcs-for-const.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/344889e963742e87181d3c023e2a1ea7d95f9468/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr?ref=344889e963742e87181d3c023e2a1ea7d95f9468", "patch": "@@ -2,13 +2,7 @@ error[E0599]: no method named `MAX` found for type `u32` in the current scope\n   --> $DIR/dont-suggest-ufcs-for-const.rs:2:11\n    |\n LL |     1_u32.MAX();\n-   |     ------^^^--\n-   |     |     |\n-   |     |     this is an associated function, not a method\n-   |     help: use associated function syntax instead: `u32::MAX()`\n-   |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = note: the candidate is defined in an impl for the type `u32`\n+   |           ^^^ method not found in `u32`\n \n error: aborting due to previous error\n "}]}