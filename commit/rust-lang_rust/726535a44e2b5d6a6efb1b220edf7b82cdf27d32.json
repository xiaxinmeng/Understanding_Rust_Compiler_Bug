{"sha": "726535a44e2b5d6a6efb1b220edf7b82cdf27d32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjUzNWE0NGUyYjVkNmE2ZWZiMWIyMjBlZGY3YjgyY2RmMjdkMzI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-09T19:18:47Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-09T19:19:34Z"}, "message": "Extract common logic", "tree": {"sha": "5c52e02e21518456d6fdb57850c762c1a931bf12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c52e02e21518456d6fdb57850c762c1a931bf12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/726535a44e2b5d6a6efb1b220edf7b82cdf27d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/726535a44e2b5d6a6efb1b220edf7b82cdf27d32", "html_url": "https://github.com/rust-lang/rust/commit/726535a44e2b5d6a6efb1b220edf7b82cdf27d32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/726535a44e2b5d6a6efb1b220edf7b82cdf27d32/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918addee2380d778b0998fc197c7037c0b09a0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/918addee2380d778b0998fc197c7037c0b09a0fa", "html_url": "https://github.com/rust-lang/rust/commit/918addee2380d778b0998fc197c7037c0b09a0fa"}], "stats": {"total": 97, "additions": 42, "deletions": 55}, "files": [{"sha": "fca5700a60160192fbdf3fa13095480c2ba9786b", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 42, "deletions": 55, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/726535a44e2b5d6a6efb1b220edf7b82cdf27d32/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726535a44e2b5d6a6efb1b220edf7b82cdf27d32/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=726535a44e2b5d6a6efb1b220edf7b82cdf27d32", "patch": "@@ -9,7 +9,7 @@ use lsp_types::{\n     TextEdit, WorkspaceEdit,\n };\n use ra_ide_api::{\n-    AssistId, Cancelable, FileId, FilePosition, FileRange, FoldKind, Query, RunnableKind,\n+    AssistId, Cancelable, FileId, FilePosition, FileRange, FoldKind, Query, Runnable, RunnableKind,\n };\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n@@ -325,27 +325,13 @@ pub fn handle_runnables(\n                 continue;\n             }\n         }\n-\n-        let args = runnable_args(&world, file_id, &runnable.kind)?;\n-\n-        let r = req::Runnable {\n-            range: runnable.range.conv_with(&line_index),\n-            label: match &runnable.kind {\n-                RunnableKind::Test { name } => format!(\"test {}\", name),\n-                RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n-                RunnableKind::Bench { name } => format!(\"bench {}\", name),\n-                RunnableKind::Bin => \"run binary\".to_string(),\n-            },\n-            bin: \"cargo\".to_string(),\n-            args,\n-            env: {\n-                let mut m = FxHashMap::default();\n-                m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());\n-                m\n-            },\n-            cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n+        let label = match &runnable.kind {\n+            RunnableKind::Test { name } => format!(\"test {}\", name),\n+            RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n+            RunnableKind::Bench { name } => format!(\"bench {}\", name),\n+            RunnableKind::Bin => \"run binary\".to_string(),\n         };\n-        res.push(r);\n+        res.push(to_lsp_runnable(&world, file_id, runnable, label)?);\n     }\n     let mut check_args = vec![\"check\".to_string()];\n     let label;\n@@ -693,46 +679,26 @@ pub fn handle_code_lens(\n     let line_index = world.analysis().file_line_index(file_id)?;\n \n     let mut lenses: Vec<CodeLens> = Default::default();\n-    let workspace_root = world.workspace_root_for(file_id);\n \n     // Gather runnables\n     for runnable in world.analysis().runnables(file_id)? {\n         let title = match &runnable.kind {\n-            RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => Some(\"\u25b6\ufe0fRun Test\"),\n-            RunnableKind::Bench { .. } => Some(\"Run Bench\"),\n-            RunnableKind::Bin => Some(\"\ufe0fRun\"),\n+            RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => \"\u25b6\ufe0fRun Test\",\n+            RunnableKind::Bench { .. } => \"Run Bench\",\n+            RunnableKind::Bin => \"Run\",\n+        };\n+        let r = to_lsp_runnable(&world, file_id, runnable, title.to_string())?;\n+        let lens = CodeLens {\n+            range: r.range,\n+            command: Some(Command {\n+                title: title.to_string(),\n+                command: \"rust-analyzer.runSingle\".into(),\n+                arguments: Some(vec![to_value(r).unwrap()]),\n+            }),\n+            data: None,\n         };\n \n-        if let Some(title) = title {\n-            let args = runnable_args(&world, file_id, &runnable.kind)?;\n-            let range = runnable.range.conv_with(&line_index);\n-\n-            // This represents the actual command that will be run.\n-            let r: req::Runnable = req::Runnable {\n-                range,\n-                label: Default::default(),\n-                bin: \"cargo\".into(),\n-                args,\n-                env: {\n-                    let mut m = FxHashMap::default();\n-                    m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());\n-                    m\n-                },\n-                cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n-            };\n-\n-            let lens = CodeLens {\n-                range,\n-                command: Some(Command {\n-                    title: title.into(),\n-                    command: \"rust-analyzer.runSingle\".into(),\n-                    arguments: Some(vec![to_value(r).unwrap()]),\n-                }),\n-                data: None,\n-            };\n-\n-            lenses.push(lens);\n-        }\n+        lenses.push(lens);\n     }\n \n     // Handle impls\n@@ -860,6 +826,27 @@ pub fn publish_decorations(\n     Ok(req::PublishDecorationsParams { uri, decorations: highlight(&world, file_id)? })\n }\n \n+fn to_lsp_runnable(\n+    world: &WorldSnapshot,\n+    file_id: FileId,\n+    runnable: Runnable,\n+    label: String,\n+) -> Result<req::Runnable> {\n+    let args = runnable_args(world, file_id, &runnable.kind)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+    Ok(req::Runnable {\n+        range: runnable.range.conv_with(&line_index),\n+        label,\n+        bin: \"cargo\".to_string(),\n+        args,\n+        env: {\n+            let mut m = FxHashMap::default();\n+            m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());\n+            m\n+        },\n+        cwd: world.workspace_root_for(file_id).map(|root| root.to_string_lossy().to_string()),\n+    })\n+}\n fn highlight(world: &WorldSnapshot, file_id: FileId) -> Result<Vec<Decoration>> {\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let res = world"}]}