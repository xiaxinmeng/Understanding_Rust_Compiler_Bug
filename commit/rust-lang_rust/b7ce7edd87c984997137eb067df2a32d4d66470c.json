{"sha": "b7ce7edd87c984997137eb067df2a32d4d66470c", "node_id": "C_kwDOAAsO6NoAKGI3Y2U3ZWRkODdjOTg0OTk3MTM3ZWIwNjdkZjJhMzJkNGQ2NjQ3MGM", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-15T18:51:49Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-06-14T07:24:51Z"}, "message": "remove drain-on-drop behavior from linked_list::DrainFilter and add #[must_use]", "tree": {"sha": "9536891d648676ce153ade1777bf7a24aa2b1499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9536891d648676ce153ade1777bf7a24aa2b1499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7ce7edd87c984997137eb067df2a32d4d66470c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ce7edd87c984997137eb067df2a32d4d66470c", "html_url": "https://github.com/rust-lang/rust/commit/b7ce7edd87c984997137eb067df2a32d4d66470c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7ce7edd87c984997137eb067df2a32d4d66470c/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b687e84aebe871f8dc76424ceee30379d3b3381f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b687e84aebe871f8dc76424ceee30379d3b3381f", "html_url": "https://github.com/rust-lang/rust/commit/b687e84aebe871f8dc76424ceee30379d3b3381f"}], "stats": {"total": 44, "additions": 14, "deletions": 30}, "files": [{"sha": "2e00e286edc8e1d2795292e569c33c7879ee334c", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b7ce7edd87c984997137eb067df2a32d4d66470c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ce7edd87c984997137eb067df2a32d4d66470c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=b7ce7edd87c984997137eb067df2a32d4d66470c", "patch": "@@ -1030,6 +1030,10 @@ impl<T, A: Allocator> LinkedList<T, A> {\n     /// If the closure returns false, the element will remain in the list and will not be yielded\n     /// by the iterator.\n     ///\n+    /// If the returned `DrainFilter` is not exhausted, e.g. because it is dropped without iterating\n+    /// or the iteration short-circuits, then the remaining elements will be retained.\n+    /// Use `drain_filter().for_each(drop)` if you do not need the returned iterator.\n+    ///\n     /// Note that `drain_filter` lets you mutate every element in the filter closure, regardless of\n     /// whether you choose to keep or remove it.\n     ///\n@@ -1805,6 +1809,7 @@ impl<'a, T, A: Allocator> CursorMut<'a, T, A> {\n \n /// An iterator produced by calling `drain_filter` on LinkedList.\n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct DrainFilter<\n     'a,\n     T: 'a,\n@@ -1849,33 +1854,6 @@ where\n     }\n }\n \n-#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n-impl<T, F, A: Allocator> Drop for DrainFilter<'_, T, F, A>\n-where\n-    F: FnMut(&mut T) -> bool,\n-{\n-    fn drop(&mut self) {\n-        struct DropGuard<'r, 'a, T, F, A: Allocator>(&'r mut DrainFilter<'a, T, F, A>)\n-        where\n-            F: FnMut(&mut T) -> bool;\n-\n-        impl<'r, 'a, T, F, A: Allocator> Drop for DropGuard<'r, 'a, T, F, A>\n-        where\n-            F: FnMut(&mut T) -> bool,\n-        {\n-            fn drop(&mut self) {\n-                self.0.for_each(drop);\n-            }\n-        }\n-\n-        while let Some(item) = self.next() {\n-            let guard = DropGuard(self);\n-            drop(item);\n-            mem::forget(guard);\n-        }\n-    }\n-}\n-\n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n impl<T: fmt::Debug, F> fmt::Debug for DrainFilter<'_, T, F>\n where"}, {"sha": "7627b3e8bdc9cc4a8f8e9f1f9f216e72124239e9", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7ce7edd87c984997137eb067df2a32d4d66470c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ce7edd87c984997137eb067df2a32d4d66470c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=b7ce7edd87c984997137eb067df2a32d4d66470c", "patch": "@@ -1005,17 +1005,23 @@ fn drain_filter_drop_panic_leak() {\n     q.push_front(d1.spawn(Panic::InDrop));\n     q.push_front(d0.spawn(Panic::Never));\n \n-    catch_unwind(AssertUnwindSafe(|| drop(q.drain_filter(|_| true)))).unwrap_err();\n+    catch_unwind(AssertUnwindSafe(|| q.drain_filter(|_| true).for_each(drop))).unwrap_err();\n \n     assert_eq!(d0.dropped(), 1);\n     assert_eq!(d1.dropped(), 1);\n+    assert_eq!(d2.dropped(), 0);\n+    assert_eq!(d3.dropped(), 0);\n+    assert_eq!(d4.dropped(), 0);\n+    assert_eq!(d5.dropped(), 0);\n+    assert_eq!(d6.dropped(), 0);\n+    assert_eq!(d7.dropped(), 0);\n+    drop(q);\n     assert_eq!(d2.dropped(), 1);\n     assert_eq!(d3.dropped(), 1);\n     assert_eq!(d4.dropped(), 1);\n     assert_eq!(d5.dropped(), 1);\n     assert_eq!(d6.dropped(), 1);\n     assert_eq!(d7.dropped(), 1);\n-    assert!(q.is_empty());\n }\n \n #[test]\n@@ -1045,7 +1051,7 @@ fn drain_filter_pred_panic_leak() {\n     q.push_front(D(0));\n \n     catch_unwind(AssertUnwindSafe(|| {\n-        drop(q.drain_filter(|item| if item.0 >= 2 { panic!() } else { true }))\n+        q.drain_filter(|item| if item.0 >= 2 { panic!() } else { true }).for_each(drop)\n     }))\n     .ok();\n "}]}