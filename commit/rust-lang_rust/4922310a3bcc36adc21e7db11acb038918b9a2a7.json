{"sha": "4922310a3bcc36adc21e7db11acb038918b9a2a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjIzMTBhM2JjYzM2YWRjMjFlN2RiMTFhY2IwMzg5MThiOWEyYTc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-26T22:24:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-29T09:45:00Z"}, "message": "Move reachable_set query in librustc_passes.", "tree": {"sha": "7865865c5d07f8a31fa3705161c9eac883d5f3af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7865865c5d07f8a31fa3705161c9eac883d5f3af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4922310a3bcc36adc21e7db11acb038918b9a2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4922310a3bcc36adc21e7db11acb038918b9a2a7", "html_url": "https://github.com/rust-lang/rust/commit/4922310a3bcc36adc21e7db11acb038918b9a2a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4922310a3bcc36adc21e7db11acb038918b9a2a7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7dbb42c7f343daa22f4b4e21db4c77e834a458", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7dbb42c7f343daa22f4b4e21db4c77e834a458", "html_url": "https://github.com/rust-lang/rust/commit/2e7dbb42c7f343daa22f4b4e21db4c77e834a458"}], "stats": {"total": 53, "additions": 22, "deletions": 31}, "files": [{"sha": "22bd333b6dded55b0280abfebeb157548cdafd73", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4922310a3bcc36adc21e7db11acb038918b9a2a7", "patch": "@@ -105,7 +105,6 @@ pub mod middle {\n     pub mod lang_items;\n     pub mod lib_features;\n     pub mod privacy;\n-    pub mod reachable;\n     pub mod recursion_limit;\n     pub mod region;\n     pub mod resolve_lifetime;"}, {"sha": "9b7ae0993357babedd1cf399465cf8c5a097711d", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=4922310a3bcc36adc21e7db11acb038918b9a2a7", "patch": "@@ -510,7 +510,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query reachable_set(_: CrateNum) -> ReachableSet {\n+        query reachable_set(_: CrateNum) -> Lrc<HirIdSet> {\n             desc { \"reachability\" }\n         }\n "}, {"sha": "f523cee49ec63ac71ab2b3507061758d3c32e3cc", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=4922310a3bcc36adc21e7db11acb038918b9a2a7", "patch": "@@ -10,7 +10,6 @@ use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lang_items::{LangItem, LanguageItems};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n-use crate::middle::reachable::ReachableSet;\n use crate::middle::region;\n use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLifetimes};\n use crate::middle::stability::{self, DeprecationEntry};\n@@ -37,7 +36,7 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::util::NeedsDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::{DefIdMap, DefIdSet};\n+use crate::util::nodemap::{DefIdMap, DefIdSet, HirIdSet};\n use rustc_data_structures::profiling::ProfileCategory::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;"}, {"sha": "5bdb310f9b54619e50823ce8fd30424e11de9266", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=4922310a3bcc36adc21e7db11acb038918b9a2a7", "patch": "@@ -65,7 +65,6 @@ fn reachable_non_generics_provider(\n \n     let mut reachable_non_generics: DefIdMap<_> = tcx\n         .reachable_set(LOCAL_CRATE)\n-        .0\n         .iter()\n         .filter_map(|&hir_id| {\n             // We want to ignore some FFI functions that are not exposed from\n@@ -313,7 +312,7 @@ fn upstream_monomorphizations_for_provider(\n \n fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n-        !tcx.reachable_set(LOCAL_CRATE).0.contains(&hir_id)\n+        !tcx.reachable_set(LOCAL_CRATE).contains(&hir_id)\n     } else {\n         bug!(\"is_unreachable_local_definition called with non-local DefId: {:?}\", def_id)\n     }"}, {"sha": "b4522f4c6653140087746b178797a6228c999913", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=4922310a3bcc36adc21e7db11acb038918b9a2a7", "patch": "@@ -10,7 +10,7 @@ use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::hir::lowering::lower_crate;\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n-use rustc::middle::{self, reachable, resolve_lifetime, stability};\n+use rustc::middle::{self, resolve_lifetime, stability};\n use rustc::session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n use rustc::session::config::{PpMode, PpSourceMode};\n use rustc::session::search_paths::PathKind;\n@@ -678,14 +678,12 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     plugin::build::provide(providers);\n     hir::provide(providers);\n     mir::provide(providers);\n-    reachable::provide(providers);\n     resolve_lifetime::provide(providers);\n     rustc_privacy::provide(providers);\n     typeck::provide(providers);\n     ty::provide(providers);\n     traits::provide(providers);\n     stability::provide(providers);\n-    reachable::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);"}, {"sha": "fd34b6e6f47b8a86c22a14d856b8576f886d9572", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=4922310a3bcc36adc21e7db11acb038918b9a2a7", "patch": "@@ -28,11 +28,13 @@ mod intrinsicck;\n pub mod layout_test;\n mod liveness;\n pub mod loops;\n+mod reachable;\n \n pub fn provide(providers: &mut Providers<'_>) {\n     check_const::provide(providers);\n     entry::provide(providers);\n     loops::provide(providers);\n     liveness::provide(providers);\n     intrinsicck::provide(providers);\n+    reachable::provide(providers);\n }"}, {"sha": "5241d9ea43f13f4e59a098d03ac49dda7bbe8df3", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4922310a3bcc36adc21e7db11acb038918b9a2a7/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=4922310a3bcc36adc21e7db11acb038918b9a2a7", "patch": "@@ -5,23 +5,22 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use crate::hir::def::{DefKind, Res};\n-use crate::hir::def_id::{CrateNum, DefId};\n-use crate::hir::Node;\n-use crate::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n-use crate::middle::privacy;\n-use crate::session::config;\n-use crate::ty::query::Providers;\n-use crate::ty::{self, TyCtxt};\n-use crate::util::nodemap::{FxHashSet, HirIdSet};\n+use rustc::hir::def::{DefKind, Res};\n+use rustc::hir::def_id::{CrateNum, DefId};\n+use rustc::hir::Node;\n+use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc::middle::privacy;\n+use rustc::session::config;\n+use rustc::ty::query::Providers;\n+use rustc::ty::{self, TyCtxt};\n+use rustc::util::nodemap::{FxHashSet, HirIdSet};\n use rustc_data_structures::sync::Lrc;\n \n-use crate::hir;\n-use crate::hir::def_id::LOCAL_CRATE;\n-use crate::hir::intravisit;\n-use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_macros::HashStable;\n+use rustc::hir;\n+use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::intravisit;\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_target::spec::abi::Abi;\n \n // Returns true if the given item must be inlined because it may be\n@@ -378,12 +377,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n     }\n }\n \n-// We introduce a new-type here, so we can have a specialized HashStable\n-// implementation for it.\n-#[derive(Clone, HashStable)]\n-pub struct ReachableSet(pub Lrc<HirIdSet>);\n-\n-fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n+fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Lrc<HirIdSet> {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n@@ -429,7 +423,7 @@ fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n     debug!(\"Inline reachability shows: {:?}\", reachable_context.reachable_symbols);\n \n     // Return the set of reachable symbols.\n-    ReachableSet(Lrc::new(reachable_context.reachable_symbols))\n+    Lrc::new(reachable_context.reachable_symbols)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}]}