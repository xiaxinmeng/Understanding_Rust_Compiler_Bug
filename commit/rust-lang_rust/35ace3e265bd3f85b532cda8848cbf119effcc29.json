{"sha": "35ace3e265bd3f85b532cda8848cbf119effcc29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YWNlM2UyNjViZDNmODViNTMyY2RhODg0OGNiZjExOWVmZmNjMjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-17T13:34:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-17T13:34:46Z"}, "message": "Merge #6574\n\n6574: **Unwrap Block** supports stand-alone blocks r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2ac6ed3ce23af719e18c521c894d63504f6eb4d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac6ed3ce23af719e18c521c894d63504f6eb4d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35ace3e265bd3f85b532cda8848cbf119effcc29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfs9F2CRBK7hj4Ov3rIwAAdHIIAHjwgTAgMOeF7Oz/jCSxNj4y\nEm6oackLl5ewBSAFgavJPJDRa7UO5L7dBhCsMrdGIXNdW/GQmVp9OeEHF+ivOPdw\ndlIW3I3786f/AxID+EBYFaOgUvvNBig4rnVHpbppfaeSMJnzNuNdBjFqxfus+1iH\nEfW6VIJVlSv7ClATcIwF0dmp+aUIwHD6+RXOBtL2yM037FMJ3dkdh0bOBjMQDmA3\nx3niD2pc0TeNH1nXWJcDhS4Nrv5HgTmZVmgRXrn5AtckM0SRkaJ+uLaUYzIo6UCS\nyVdodCp8RQat9j3r/tgqkwMj3a4Q0VD2v4ngGsEr3oa2h8MUO3RspePY8h+W0U4=\n=bb2s\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ac6ed3ce23af719e18c521c894d63504f6eb4d2\nparent d4c970d1f21f014eddb550a2c33cacbf9546889d\nparent 8c6f933773df872a394fdcae890b9c0c42bdbc6c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605620086 +0000\ncommitter GitHub <noreply@github.com> 1605620086 +0000\n\nMerge #6574\n\n6574: **Unwrap Block** supports stand-alone blocks r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35ace3e265bd3f85b532cda8848cbf119effcc29", "html_url": "https://github.com/rust-lang/rust/commit/35ace3e265bd3f85b532cda8848cbf119effcc29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35ace3e265bd3f85b532cda8848cbf119effcc29/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4c970d1f21f014eddb550a2c33cacbf9546889d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c970d1f21f014eddb550a2c33cacbf9546889d", "html_url": "https://github.com/rust-lang/rust/commit/d4c970d1f21f014eddb550a2c33cacbf9546889d"}, {"sha": "8c6f933773df872a394fdcae890b9c0c42bdbc6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6f933773df872a394fdcae890b9c0c42bdbc6c", "html_url": "https://github.com/rust-lang/rust/commit/8c6f933773df872a394fdcae890b9c0c42bdbc6c"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "4967142432cf90ba4e638e0764916296a7b4e537", "filename": "crates/assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/35ace3e265bd3f85b532cda8848cbf119effcc29/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ace3e265bd3f85b532cda8848cbf119effcc29/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=35ace3e265bd3f85b532cda8848cbf119effcc29", "patch": "@@ -3,7 +3,7 @@ use syntax::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n     },\n-    AstNode, TextRange, T,\n+    AstNode, SyntaxKind, TextRange, T,\n };\n \n use crate::{utils::unwrap_trivial_block, AssistContext, AssistId, AssistKind, Assists};\n@@ -31,11 +31,21 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let l_curly_token = ctx.find_token_syntax_at_offset(T!['{'])?;\n     let mut block = ast::BlockExpr::cast(l_curly_token.parent())?;\n+    let target = block.syntax().text_range();\n     let mut parent = block.syntax().parent()?;\n     if ast::MatchArm::can_cast(parent.kind()) {\n         parent = parent.ancestors().find(|it| ast::MatchExpr::can_cast(it.kind()))?\n     }\n \n+    if matches!(parent.kind(), SyntaxKind::BLOCK_EXPR | SyntaxKind::EXPR_STMT) {\n+        return acc.add(assist_id, assist_label, target, |builder| {\n+            builder.replace(\n+                block.syntax().text_range(),\n+                update_expr_string(block.to_string(), &[' ', '{', '\\n']),\n+            );\n+        });\n+    }\n+\n     let parent = ast::Expr::cast(parent)?;\n \n     match parent.clone() {\n@@ -48,7 +58,6 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                     // For `else if` blocks\n                     let ancestor_then_branch = ancestor.then_branch()?;\n \n-                    let target = then_branch.syntax().text_range();\n                     return acc.add(assist_id, assist_label, target, |edit| {\n                         let range_to_del_else_if = TextRange::new(\n                             ancestor_then_branch.syntax().text_range().end(),\n@@ -68,7 +77,6 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                     });\n                 }\n             } else {\n-                let target = block.syntax().text_range();\n                 return acc.add(assist_id, assist_label, target, |edit| {\n                     let range_to_del = TextRange::new(\n                         then_branch.syntax().text_range().end(),\n@@ -84,7 +92,6 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     };\n \n     let unwrapped = unwrap_trivial_block(block);\n-    let target = unwrapped.syntax().text_range();\n     acc.add(assist_id, assist_label, target, |builder| {\n         builder.replace(\n             parent.syntax().text_range(),\n@@ -111,6 +118,64 @@ mod tests {\n \n     use super::*;\n \n+    #[test]\n+    fn unwrap_tail_expr_block() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    <|>{\n+        92\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    92\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn unwrap_stmt_expr_block() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    <|>{\n+        92;\n+    }\n+    ()\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    92;\n+    ()\n+}\n+\"#,\n+        );\n+        // Pedantically, we should add an `;` here...\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    <|>{\n+        92\n+    }\n+    ()\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    92\n+    ()\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn simple_if() {\n         check_assist("}]}