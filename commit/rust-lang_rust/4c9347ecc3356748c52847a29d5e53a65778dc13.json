{"sha": "4c9347ecc3356748c52847a29d5e53a65778dc13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTM0N2VjYzMzNTY3NDhjNTI4NDdhMjlkNWU1M2E2NTc3OGRjMTM=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-02T22:01:22Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-02T22:01:22Z"}, "message": "Don't categorize things we don't care about", "tree": {"sha": "ae92bdebb395ea6a3f7740678b0cdb0558cdc40a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae92bdebb395ea6a3f7740678b0cdb0558cdc40a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c9347ecc3356748c52847a29d5e53a65778dc13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9347ecc3356748c52847a29d5e53a65778dc13", "html_url": "https://github.com/rust-lang/rust/commit/4c9347ecc3356748c52847a29d5e53a65778dc13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c9347ecc3356748c52847a29d5e53a65778dc13/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "html_url": "https://github.com/rust-lang/rust/commit/36cc81ac71e4246bf58a3758735cc68f7adb5e0f"}], "stats": {"total": 120, "additions": 52, "deletions": 68}, "files": [{"sha": "e2b94e7f89499aeaad8ffb1c8277d5da4126caac", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=4c9347ecc3356748c52847a29d5e53a65778dc13", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn add_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"add_derive\", AssistKind::Refactor), \"Add `#[derive]`\", target, |builder| {\n+    acc.add(AssistId(\"add_derive\", AssistKind::None), \"Add `#[derive]`\", target, |builder| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())"}, {"sha": "7150eb53a5fa4da5025cc0e750f967fe95fbd06b", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=4c9347ecc3356748c52847a29d5e53a65778dc13", "patch": "@@ -62,20 +62,15 @@ pub(crate) fn add_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let function_builder = FunctionBuilder::from_call(&ctx, &call, &path, target_module)?;\n \n     let target = call.syntax().text_range();\n-    acc.add(\n-        AssistId(\"add_function\", AssistKind::RefactorExtract),\n-        \"Add function\",\n-        target,\n-        |builder| {\n-            let function_template = function_builder.render();\n-            builder.edit_file(function_template.file);\n-            let new_fn = function_template.to_string(ctx.config.snippet_cap);\n-            match ctx.config.snippet_cap {\n-                Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),\n-                None => builder.insert(function_template.insert_offset, new_fn),\n-            }\n-        },\n-    )\n+    acc.add(AssistId(\"add_function\", AssistKind::None), \"Add function\", target, |builder| {\n+        let function_template = function_builder.render();\n+        builder.edit_file(function_template.file);\n+        let new_fn = function_template.to_string(ctx.config.snippet_cap);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),\n+            None => builder.insert(function_template.insert_offset, new_fn),\n+        }\n+    })\n }\n \n struct FunctionTemplate {"}, {"sha": "0b3d29c7c55dbf9436bbf7d1ac840e9c77af18ca", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 42, "deletions": 47, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=4c9347ecc3356748c52847a29d5e53a65778dc13", "patch": "@@ -42,55 +42,50 @@ pub(crate) fn add_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let impl_def = find_struct_impl(&ctx, &strukt)?;\n \n     let target = strukt.syntax().text_range();\n-    acc.add(\n-        AssistId(\"add_new\", AssistKind::Refactor),\n-        \"Add default constructor\",\n-        target,\n-        |builder| {\n-            let mut buf = String::with_capacity(512);\n-\n-            if impl_def.is_some() {\n-                buf.push('\\n');\n-            }\n+    acc.add(AssistId(\"add_new\", AssistKind::None), \"Add default constructor\", target, |builder| {\n+        let mut buf = String::with_capacity(512);\n \n-            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-\n-            let params = field_list\n-                .fields()\n-                .filter_map(|f| {\n-                    Some(format!(\"{}: {}\", f.name()?.syntax(), f.ascribed_type()?.syntax()))\n-                })\n-                .sep_by(\", \");\n-            let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n-\n-            format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n-\n-            let start_offset = impl_def\n-                .and_then(|impl_def| {\n-                    buf.push('\\n');\n-                    let start = impl_def\n-                        .syntax()\n-                        .descendants_with_tokens()\n-                        .find(|t| t.kind() == T!['{'])?\n-                        .text_range()\n-                        .end();\n-\n-                    Some(start)\n-                })\n-                .unwrap_or_else(|| {\n-                    buf = generate_impl_text(&strukt, &buf);\n-                    strukt.syntax().text_range().end()\n-                });\n-\n-            match ctx.config.snippet_cap {\n-                None => builder.insert(start_offset, buf),\n-                Some(cap) => {\n-                    buf = buf.replace(\"fn new\", \"fn $0new\");\n-                    builder.insert_snippet(cap, start_offset, buf);\n-                }\n+        if impl_def.is_some() {\n+            buf.push('\\n');\n+        }\n+\n+        let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+\n+        let params = field_list\n+            .fields()\n+            .filter_map(|f| {\n+                Some(format!(\"{}: {}\", f.name()?.syntax(), f.ascribed_type()?.syntax()))\n+            })\n+            .sep_by(\", \");\n+        let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n+\n+        format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n+\n+        let start_offset = impl_def\n+            .and_then(|impl_def| {\n+                buf.push('\\n');\n+                let start = impl_def\n+                    .syntax()\n+                    .descendants_with_tokens()\n+                    .find(|t| t.kind() == T!['{'])?\n+                    .text_range()\n+                    .end();\n+\n+                Some(start)\n+            })\n+            .unwrap_or_else(|| {\n+                buf = generate_impl_text(&strukt, &buf);\n+                strukt.syntax().text_range().end()\n+            });\n+\n+        match ctx.config.snippet_cap {\n+            None => builder.insert(start_offset, buf),\n+            Some(cap) => {\n+                buf = buf.replace(\"fn new\", \"fn $0new\");\n+                builder.insert_snippet(cap, start_offset, buf);\n             }\n-        },\n-    )\n+        }\n+    })\n }\n \n // Generates the surrounding `impl Type { <code> }` including type and lifetime"}, {"sha": "65cda95ee250afb943591c30008e731e3e607ff0", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=4c9347ecc3356748c52847a29d5e53a65778dc13", "patch": "@@ -34,8 +34,6 @@ pub enum AssistKind {\n     RefactorExtract,\n     RefactorInline,\n     RefactorRewrite,\n-    Source,\n-    OrganizeImports,\n }\n \n /// Unique identifier of the assist, should not be shown to the user"}, {"sha": "070ad5e684b97ab24aa704b853ed8d5dd8596739", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=4c9347ecc3356748c52847a29d5e53a65778dc13", "patch": "@@ -112,8 +112,6 @@ fn code_action_capabilities(client_caps: &ClientCapabilities) -> CodeActionProvi\n                     lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n                     lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n                     lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n-                    lsp_types::code_action_kind::SOURCE.to_string(),\n-                    lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n                 ]),\n                 work_done_progress_options: Default::default(),\n             })"}, {"sha": "2312a6e4d5558ba46569b428df867f5f01fe2632", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9347ecc3356748c52847a29d5e53a65778dc13/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=4c9347ecc3356748c52847a29d5e53a65778dc13", "patch": "@@ -635,8 +635,6 @@ pub(crate) fn code_action_kind(kind: AssistKind) -> String {\n         AssistKind::RefactorExtract => lsp_types::code_action_kind::REFACTOR_EXTRACT,\n         AssistKind::RefactorInline => lsp_types::code_action_kind::REFACTOR_INLINE,\n         AssistKind::RefactorRewrite => lsp_types::code_action_kind::REFACTOR_REWRITE,\n-        AssistKind::Source => lsp_types::code_action_kind::SOURCE,\n-        AssistKind::OrganizeImports => lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS,\n     }\n     .to_string()\n }"}]}