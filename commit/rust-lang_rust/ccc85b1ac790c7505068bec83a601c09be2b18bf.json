{"sha": "ccc85b1ac790c7505068bec83a601c09be2b18bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYzg1YjFhYzc5MGM3NTA1MDY4YmVjODNhNjAxYzA5YmUyYjE4YmY=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-08-13T01:10:29Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-08-13T07:36:21Z"}, "message": "librustc: Allow vector repeat exprs in statics.", "tree": {"sha": "5965d2e132329ae4d7f6554850a135d95c97a2f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5965d2e132329ae4d7f6554850a135d95c97a2f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccc85b1ac790c7505068bec83a601c09be2b18bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc85b1ac790c7505068bec83a601c09be2b18bf", "html_url": "https://github.com/rust-lang/rust/commit/ccc85b1ac790c7505068bec83a601c09be2b18bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccc85b1ac790c7505068bec83a601c09be2b18bf/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35040275b3f39618c3cec4a9f702b6e057309604", "url": "https://api.github.com/repos/rust-lang/rust/commits/35040275b3f39618c3cec4a9f702b6e057309604", "html_url": "https://github.com/rust-lang/rust/commit/35040275b3f39618c3cec4a9f702b6e057309604"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "160cc23bd19ff812e046a44e44c4608888652d53", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccc85b1ac790c7505068bec83a601c09be2b18bf/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc85b1ac790c7505068bec83a601c09be2b18bf/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=ccc85b1ac790c7505068bec83a601c09be2b18bf", "patch": "@@ -160,6 +160,7 @@ pub fn check_expr(sess: Session,\n           expr_field(*) |\n           expr_index(*) |\n           expr_tup(*) |\n+          expr_repeat(*) |\n           expr_struct(*) => { }\n           expr_addr_of(*) => {\n                 sess.span_err("}, {"sha": "68e3dfd63be9ff392e57c46f6ae07b74f3f2575c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccc85b1ac790c7505068bec83a601c09be2b18bf/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc85b1ac790c7505068bec83a601c09be2b18bf/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=ccc85b1ac790c7505068bec83a601c09be2b18bf", "patch": "@@ -153,6 +153,8 @@ pub fn classify(e: &expr,\n                 lookup_constness(tcx, e)\n               }\n \n+              ast::expr_repeat(*) => general_const,\n+\n               _ => non_const\n             };\n         tcx.ccache.insert(did, cn);"}, {"sha": "b362ba396f16d97f3c858c1b7b6015ac983955f8", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccc85b1ac790c7505068bec83a601c09be2b18bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc85b1ac790c7505068bec83a601c09be2b18bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=ccc85b1ac790c7505068bec83a601c09be2b18bf", "patch": "@@ -32,6 +32,7 @@ use middle::trans::type_::Type;\n \n use std::c_str::ToCStr;\n use std::libc::c_uint;\n+use std::vec;\n use syntax::{ast, ast_util, ast_map};\n \n pub fn const_lit(cx: &mut CrateContext, e: &ast::expr, lit: ast::lit)\n@@ -540,6 +541,23 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n               _ => cx.sess.span_bug(e.span, \"bad const-slice expr\")\n             }\n           }\n+          ast::expr_repeat(elem, count, _) => {\n+            let vec_ty = ty::expr_ty(cx.tcx, e);\n+            let unit_ty = ty::sequence_element_type(cx.tcx, vec_ty);\n+            let llunitty = type_of::type_of(cx, unit_ty);\n+            let n = match const_eval::eval_const_expr(cx.tcx, count) {\n+                const_eval::const_int(i)  => i as uint,\n+                const_eval::const_uint(i) => i as uint,\n+                _ => cx.sess.span_bug(count.span, \"count must be integral const expression.\")\n+            };\n+            let vs = vec::from_elem(n, const_expr(cx, elem));\n+            let v = if vs.iter().any(|vi| val_ty(*vi) != llunitty) {\n+                C_struct(vs)\n+            } else {\n+                C_array(llunitty, vs)\n+            };\n+            v\n+          }\n           ast::expr_path(ref pth) => {\n             assert_eq!(pth.types.len(), 0);\n             let tcx = cx.tcx;"}]}