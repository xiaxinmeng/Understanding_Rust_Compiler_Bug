{"sha": "a83b105b4c9dc1363c15685e99893a209438dc35", "node_id": "C_kwDOAAsO6NoAKGE4M2IxMDViNGM5ZGMxMzYzYzE1Njg1ZTk5ODkzYTIwOTQzOGRjMzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T13:31:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T13:31:05Z"}, "message": "Auto merge of #2685 - Nilstrieb:cargo-miri-wasm, r=RalfJung\n\nUse `.wasm` extension when building for wasm in cargo-miri\n\nWASM uses the `.wasm` file extension for its binaries (just like how windows uses `.exe`), so we need to set that as well.\n\nI'm not sure whether gating this behind the wasm target is a good idea, maybe it makes more sense to always do it just like on windows.", "tree": {"sha": "26ac8796aa292ebcda14815012e39e0b25f83e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ac8796aa292ebcda14815012e39e0b25f83e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a83b105b4c9dc1363c15685e99893a209438dc35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a83b105b4c9dc1363c15685e99893a209438dc35", "html_url": "https://github.com/rust-lang/rust/commit/a83b105b4c9dc1363c15685e99893a209438dc35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a83b105b4c9dc1363c15685e99893a209438dc35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f8df93b09f64269e41c29022e2f86ed1ea33349", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8df93b09f64269e41c29022e2f86ed1ea33349", "html_url": "https://github.com/rust-lang/rust/commit/9f8df93b09f64269e41c29022e2f86ed1ea33349"}, {"sha": "958d5918b0a3cf750c4fcf5bf4e584487eeb4552", "url": "https://api.github.com/repos/rust-lang/rust/commits/958d5918b0a3cf750c4fcf5bf4e584487eeb4552", "html_url": "https://github.com/rust-lang/rust/commit/958d5918b0a3cf750c4fcf5bf4e584487eeb4552"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "64b3187305e1af975c2c8a823d038f7cb20280d7", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a83b105b4c9dc1363c15685e99893a209438dc35/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83b105b4c9dc1363c15685e99893a209438dc35/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=a83b105b4c9dc1363c15685e99893a209438dc35", "patch": "@@ -281,9 +281,10 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n             eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n         }\n         info.store(&filename);\n-        // For Windows, do the same thing again with `.exe` appended to the filename.\n+        // For Windows and WASM, do the same thing again with `.exe`/`.wasm` appended to the filename.\n         // (Need to do this here as cargo moves that \"binary\" to a different place before running it.)\n         info.store(&out_filename(\"\", \".exe\"));\n+        info.store(&out_filename(\"\", \".wasm\"));\n     };\n \n     let runnable_crate = !info_query && is_runnable_crate();"}, {"sha": "dd2d2abe35b539cff216bfabbd848718d8d3c8b1", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a83b105b4c9dc1363c15685e99893a209438dc35/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a83b105b4c9dc1363c15685e99893a209438dc35/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=a83b105b4c9dc1363c15685e99893a209438dc35", "patch": "@@ -103,6 +103,7 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec panic/panic concurrency/simple atomic data_race env/var\n     MIRI_TEST_TARGET=aarch64-linux-android run_tests_minimal hello integer vec panic/panic\n+    MIRI_TEST_TARGET=wasm32-wasi MIRI_NO_STD=1 run_tests_minimal no_std # supports std but miri doesn't support it\n     MIRI_TEST_TARGET=thumbv7em-none-eabihf MIRI_NO_STD=1 run_tests_minimal no_std # no_std embedded architecture\n     ;;\n   x86_64-apple-darwin)"}]}