{"sha": "d93f1d6c04fab017a24d868dd766a290321e636c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5M2YxZDZjMDRmYWIwMTdhMjRkODY4ZGQ3NjZhMjkwMzIxZTYzNmM=", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-11-23T12:22:56Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-11-23T16:47:29Z"}, "message": "Apply `doc(cfg)` from parent items while collecting trait impls\n\nBecause trait impls bypass the standard `clean` hierarchy they do not\nparticipate in the `propagate_doc_cfg` pass, so instead we need to\npre-collect all possible `doc(cfg)` attributes that will apply to them\nwhen cleaning.", "tree": {"sha": "46cd3e61bd7d9a02ce99dd145a16634bb89beaad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46cd3e61bd7d9a02ce99dd145a16634bb89beaad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d93f1d6c04fab017a24d868dd766a290321e636c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIYEABYIAC4WIQSil6aeYAADwGp0ncHG9XSMbdFgewUCX7vnoRAcZ2l0QG5lbW8x\nNTcuY29tAAoJEMb1dIxt0WB7hJUA/jn5Rp/y3MLw6n8jSWB+ByY1nr5sPoPUFAXR\nIH/dPu/IAP9J7uZYsdV8Ai55J7Cr28SQ7fmaY536CfF5lVH0mw8kAA==\n=RvyM\n-----END PGP SIGNATURE-----", "payload": "tree 46cd3e61bd7d9a02ce99dd145a16634bb89beaad\nparent 3d11e96569861f2df3254af65bd8065dc70474bf\nauthor Wim Looman <git@nemo157.com> 1606134176 +0100\ncommitter Wim Looman <git@nemo157.com> 1606150049 +0100\n\nApply `doc(cfg)` from parent items while collecting trait impls\n\nBecause trait impls bypass the standard `clean` hierarchy they do not\nparticipate in the `propagate_doc_cfg` pass, so instead we need to\npre-collect all possible `doc(cfg)` attributes that will apply to them\nwhen cleaning.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d93f1d6c04fab017a24d868dd766a290321e636c", "html_url": "https://github.com/rust-lang/rust/commit/d93f1d6c04fab017a24d868dd766a290321e636c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d93f1d6c04fab017a24d868dd766a290321e636c/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d11e96569861f2df3254af65bd8065dc70474bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d11e96569861f2df3254af65bd8065dc70474bf", "html_url": "https://github.com/rust-lang/rust/commit/3d11e96569861f2df3254af65bd8065dc70474bf"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "17963e44a01fef42f5c7ffbe04be26e7c09139ba", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d93f1d6c04fab017a24d868dd766a290321e636c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93f1d6c04fab017a24d868dd766a290321e636c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d93f1d6c04fab017a24d868dd766a290321e636c", "patch": "@@ -339,9 +339,6 @@ crate fn build_impl(\n         return;\n     }\n \n-    let attrs = merge_attrs(cx, parent_module.into(), load_attrs(cx, did), attrs);\n-    debug!(\"merged_attrs={:?}\", attrs);\n-\n     let tcx = cx.tcx;\n     let associated_trait = tcx.impl_trait_ref(did);\n \n@@ -435,7 +432,7 @@ crate fn build_impl(\n \n     debug!(\"build_impl: impl {:?} for {:?}\", trait_.def_id(), for_.def_id());\n \n-    ret.push(clean::Item::from_def_id_and_parts(\n+    let mut item = clean::Item::from_def_id_and_parts(\n         did,\n         None,\n         clean::ImplItem(clean::Impl {\n@@ -450,7 +447,10 @@ crate fn build_impl(\n             blanket_impl: None,\n         }),\n         cx,\n-    ));\n+    );\n+    item.attrs = merge_attrs(cx, parent_module.into(), load_attrs(cx, did), attrs);\n+    debug!(\"merged_attrs={:?}\", item.attrs);\n+    ret.push(item);\n }\n \n fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>) -> clean::Module {"}, {"sha": "62eb7d4d11f3ef5753edcf45ea076236d62835bb", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d93f1d6c04fab017a24d868dd766a290321e636c/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93f1d6c04fab017a24d868dd766a290321e636c/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=d93f1d6c04fab017a24d868dd766a290321e636c", "patch": "@@ -5,6 +5,7 @@ use crate::fold::DocFolder;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_middle::ty::DefIdTree;\n use rustc_span::symbol::sym;\n \n crate const COLLECT_TRAIT_IMPLS: Pass = Pass {\n@@ -90,7 +91,32 @@ crate fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = cx.tcx.hir().local_def_id(impl_node);\n             cx.tcx.sess.time(\"build_local_trait_impl\", || {\n-                inline::build_impl(cx, None, impl_did.to_def_id(), None, &mut new_items);\n+                let mut extra_attrs = Vec::new();\n+                let mut parent = cx.tcx.parent(impl_did.to_def_id());\n+                while let Some(did) = parent {\n+                    extra_attrs.extend(\n+                        cx.tcx\n+                            .get_attrs(did)\n+                            .iter()\n+                            .filter(|attr| attr.has_name(sym::doc))\n+                            .filter(|attr| {\n+                                if let Some([attr]) = attr.meta_item_list().as_deref() {\n+                                    attr.has_name(sym::cfg)\n+                                } else {\n+                                    false\n+                                }\n+                            })\n+                            .cloned(),\n+                    );\n+                    parent = cx.tcx.parent(did);\n+                }\n+                inline::build_impl(\n+                    cx,\n+                    None,\n+                    impl_did.to_def_id(),\n+                    Some(&extra_attrs),\n+                    &mut new_items,\n+                );\n             });\n         }\n     }"}, {"sha": "471dd3a9d18216ed51deab9a1c50d79b7c3fc783", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d93f1d6c04fab017a24d868dd766a290321e636c/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93f1d6c04fab017a24d868dd766a290321e636c/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=d93f1d6c04fab017a24d868dd766a290321e636c", "patch": "@@ -25,12 +25,13 @@ pub mod unix_only {\n     // @has doc_cfg/unix_only/trait.ArmOnly.html \\\n     //  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n     //  'This is supported on Unix and ARM only.'\n-    // @count - '//*[@class=\"stab portability\"]' 2\n+    // @count - '//*[@class=\"stab portability\"]' 1\n     #[doc(cfg(target_arch = \"arm\"))]\n     pub trait ArmOnly {\n         fn unix_and_arm_only_function();\n     }\n \n+    #[doc(cfg(target_arch = \"arm\"))]\n     impl ArmOnly for super::Portable {\n         fn unix_and_arm_only_function() {}\n     }"}, {"sha": "f95d79cd493ea4cd7b4e23402a97c1a6feff8e1f", "filename": "src/test/rustdoc/issue-79201.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d93f1d6c04fab017a24d868dd766a290321e636c/src%2Ftest%2Frustdoc%2Fissue-79201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93f1d6c04fab017a24d868dd766a290321e636c/src%2Ftest%2Frustdoc%2Fissue-79201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-79201.rs?ref=d93f1d6c04fab017a24d868dd766a290321e636c", "patch": "@@ -0,0 +1,41 @@\n+#![feature(doc_cfg)]\n+\n+// @has 'issue_79201/trait.Foo.html'\n+// @count   - '//*[@class=\"stab portability\"]' 6\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-root'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-public-mod'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-private-mod'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-fn'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-method'\n+\n+pub trait Foo {}\n+\n+#[doc(cfg(feature = \"foo-root\"))]\n+impl crate::Foo for usize {}\n+\n+#[doc(cfg(feature = \"foo-public-mod\"))]\n+pub mod public {\n+    impl crate::Foo for u8 {}\n+}\n+\n+#[doc(cfg(feature = \"foo-private-mod\"))]\n+mod private {\n+    impl crate::Foo for u16 {}\n+}\n+\n+#[doc(cfg(feature = \"foo-const\"))]\n+const _: () = {\n+    impl crate::Foo for u32 {}\n+};\n+\n+#[doc(cfg(feature = \"foo-fn\"))]\n+fn __() {\n+    impl crate::Foo for u64 {}\n+}\n+\n+#[doc(cfg(feature = \"foo-method\"))]\n+impl dyn Foo {\n+    fn __() {\n+        impl crate::Foo for u128 {}\n+    }\n+}"}]}