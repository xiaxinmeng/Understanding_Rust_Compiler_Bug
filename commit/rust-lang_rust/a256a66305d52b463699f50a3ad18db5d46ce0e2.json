{"sha": "a256a66305d52b463699f50a3ad18db5d46ce0e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNTZhNjYzMDVkNTJiNDYzNjk5ZjUwYTNhZDE4ZGI1ZDQ2Y2UwZTI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-02T16:16:01Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-06T08:24:53Z"}, "message": "rustc/middle: use Cow<'static, str> where applicable", "tree": {"sha": "e3abe426012134035c244d296515a332d3a6adfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3abe426012134035c244d296515a332d3a6adfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a256a66305d52b463699f50a3ad18db5d46ce0e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a256a66305d52b463699f50a3ad18db5d46ce0e2", "html_url": "https://github.com/rust-lang/rust/commit/a256a66305d52b463699f50a3ad18db5d46ce0e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a256a66305d52b463699f50a3ad18db5d46ce0e2/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2b3aa99390213cc41f4a7a001963fa49e1ee509", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b3aa99390213cc41f4a7a001963fa49e1ee509", "html_url": "https://github.com/rust-lang/rust/commit/c2b3aa99390213cc41f4a7a001963fa49e1ee509"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "e40454a249fa6d0e8c9236770981634d4fe440b1", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a256a66305d52b463699f50a3ad18db5d46ce0e2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a256a66305d52b463699f50a3ad18db5d46ce0e2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a256a66305d52b463699f50a3ad18db5d46ce0e2", "patch": "@@ -83,6 +83,7 @@ use hir;\n use syntax::ast::{self, Name};\n use syntax_pos::Span;\n \n+use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use rustc_data_structures::sync::Lrc;\n@@ -1489,59 +1490,59 @@ impl<'tcx> cmt_<'tcx> {\n         }\n     }\n \n-    pub fn descriptive_string(&self, tcx: TyCtxt<'_, '_, '_>) -> String {\n+    pub fn descriptive_string(&self, tcx: TyCtxt<'_, '_, '_>) -> Cow<'static, str> {\n         match self.cat {\n             Categorization::StaticItem => {\n-                \"static item\".to_string()\n+                \"static item\".into()\n             }\n             Categorization::Rvalue(..) => {\n-                \"non-place\".to_string()\n+                \"non-place\".into()\n             }\n             Categorization::Local(vid) => {\n                 if tcx.hir.is_argument(vid) {\n-                    \"argument\".to_string()\n+                    \"argument\"\n                 } else {\n-                    \"local variable\".to_string()\n-                }\n+                    \"local variable\"\n+                }.into()\n             }\n             Categorization::Deref(_, pk) => {\n                 match self.upvar_cat() {\n                     Some(&Categorization::Upvar(ref var)) => {\n-                        var.to_string()\n+                        var.to_string().into()\n                     }\n                     Some(_) => bug!(),\n                     None => {\n                         match pk {\n                             Unique => {\n-                                \"`Box` content\".to_string()\n+                                \"`Box` content\"\n                             }\n                             UnsafePtr(..) => {\n-                                \"dereference of raw pointer\".to_string()\n+                                \"dereference of raw pointer\"\n                             }\n                             BorrowedPtr(..) => {\n                                 match self.note {\n-                                    NoteIndex => \"indexed content\".to_string(),\n-                                    _ => \"borrowed content\".to_string(),\n+                                    NoteIndex => \"indexed content\",\n+                                    _ => \"borrowed content\"\n                                 }\n                             }\n-                        }\n+                        }.into()\n                     }\n                 }\n             }\n             Categorization::Interior(_, InteriorField(..)) => {\n-                \"field\".to_string()\n+                \"field\".into()\n             }\n             Categorization::Interior(_, InteriorElement(InteriorOffsetKind::Index)) => {\n-                \"indexed content\".to_string()\n+                \"indexed content\".into()\n             }\n             Categorization::Interior(_, InteriorElement(InteriorOffsetKind::Pattern)) => {\n-                \"pattern-bound indexed content\".to_string()\n+                \"pattern-bound indexed content\".into()\n             }\n             Categorization::Upvar(ref var) => {\n-                var.to_string()\n+                var.to_string().into()\n             }\n             Categorization::Downcast(ref cmt, _) => {\n-                cmt.descriptive_string(tcx)\n+                cmt.descriptive_string(tcx).into()\n             }\n         }\n     }"}, {"sha": "0bec4f8ab8d456b3ab6e4b53e033037a2dd1c2ee", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a256a66305d52b463699f50a3ad18db5d46ce0e2/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a256a66305d52b463699f50a3ad18db5d46ce0e2/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=a256a66305d52b463699f50a3ad18db5d46ce0e2", "patch": "@@ -25,6 +25,7 @@ use errors::DiagnosticBuilder;\n use rustc::lint;\n use rustc_data_structures::sync::Lrc;\n use session::Session;\n+use std::borrow::Cow;\n use std::cell::Cell;\n use std::mem::replace;\n use syntax::ast;\n@@ -1250,8 +1251,8 @@ fn compute_object_lifetime_defaults(\n                     let object_lifetime_default_reprs: String = result\n                         .iter()\n                         .map(|set| match *set {\n-                            Set1::Empty => \"BaseDefault\".to_string(),\n-                            Set1::One(Region::Static) => \"'static\".to_string(),\n+                            Set1::Empty => \"BaseDefault\".into(),\n+                            Set1::One(Region::Static) => \"'static\".into(),\n                             Set1::One(Region::EarlyBound(mut i, _, _)) => {\n                                 generics.params.iter().find_map(|param| match param.kind {\n                                         GenericParamKind::Lifetime { .. } => {\n@@ -1265,9 +1266,9 @@ fn compute_object_lifetime_defaults(\n                                     }).unwrap()\n                             }\n                             Set1::One(_) => bug!(),\n-                            Set1::Many => \"Ambiguous\".to_string(),\n+                            Set1::Many => \"Ambiguous\".into(),\n                         })\n-                        .collect::<Vec<String>>()\n+                        .collect::<Vec<Cow<'static, str>>>()\n                         .join(\",\");\n                     tcx.sess.span_err(item.span, &object_lifetime_default_reprs);\n                 }\n@@ -2652,10 +2653,10 @@ pub fn report_missing_lifetime_specifiers(\n         if count > 1 { \"s\" } else { \"\" }\n     );\n \n-    let msg = if count > 1 {\n-        format!(\"expected {} lifetime parameters\", count)\n+    let msg: Cow<'static, str> = if count > 1 {\n+        format!(\"expected {} lifetime parameters\", count).into()\n     } else {\n-        \"expected lifetime parameter\".to_string()\n+        \"expected lifetime parameter\".into()\n     };\n \n     err.span_label(span, msg);"}, {"sha": "0ef0d284770f555f4577a758e68c5a590a4c3e93", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a256a66305d52b463699f50a3ad18db5d46ce0e2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a256a66305d52b463699f50a3ad18db5d46ce0e2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=a256a66305d52b463699f50a3ad18db5d46ce0e2", "patch": "@@ -38,6 +38,7 @@ use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n use rustc_mir::util::suggest_ref_mut;\n use rustc::util::nodemap::FxHashSet;\n \n+use std::borrow::Cow;\n use std::cell::{Cell, RefCell};\n use std::fmt;\n use std::rc::Rc;\n@@ -808,34 +809,34 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n         match err.code {\n             err_mutbl => {\n-                let descr = match err.cmt.note {\n+                let descr: Cow<'static, str> = match err.cmt.note {\n                     mc::NoteClosureEnv(_) | mc::NoteUpvarRef(_) => {\n-                        self.cmt_to_string(&err.cmt)\n+                        self.cmt_to_cow_str(&err.cmt)\n                     }\n                     _ => match opt_loan_path_is_field(&err.cmt) {\n                         (None, true) => {\n                             format!(\"{} of {} binding\",\n-                                    self.cmt_to_string(&err.cmt),\n-                                    err.cmt.mutbl.to_user_str())\n+                                    self.cmt_to_cow_str(&err.cmt),\n+                                    err.cmt.mutbl.to_user_str()).into()\n \n                         }\n                         (None, false) => {\n                             format!(\"{} {}\",\n                                     err.cmt.mutbl.to_user_str(),\n-                                    self.cmt_to_string(&err.cmt))\n+                                    self.cmt_to_cow_str(&err.cmt)).into()\n \n                         }\n                         (Some(lp), true) => {\n                             format!(\"{} `{}` of {} binding\",\n-                                    self.cmt_to_string(&err.cmt),\n+                                    self.cmt_to_cow_str(&err.cmt),\n                                     self.loan_path_to_string(&lp),\n-                                    err.cmt.mutbl.to_user_str())\n+                                    err.cmt.mutbl.to_user_str()).into()\n                         }\n                         (Some(lp), false) => {\n                             format!(\"{} {} `{}`\",\n                                     err.cmt.mutbl.to_user_str(),\n-                                    self.cmt_to_string(&err.cmt),\n-                                    self.loan_path_to_string(&lp))\n+                                    self.cmt_to_cow_str(&err.cmt),\n+                                    self.loan_path_to_string(&lp)).into()\n                         }\n                     }\n                 };\n@@ -1058,11 +1059,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             err_borrowed_pointer_too_short(loan_scope, ptr_scope) => {\n                 let descr = self.cmt_to_path_or_string(err.cmt);\n                 let mut db = self.lifetime_too_short_for_reborrow(error_span, &descr, Origin::Ast);\n-                let descr = match opt_loan_path(&err.cmt) {\n+                let descr: Cow<'static, str> = match opt_loan_path(&err.cmt) {\n                     Some(lp) => {\n-                        format!(\"`{}`\", self.loan_path_to_string(&lp))\n+                        format!(\"`{}`\", self.loan_path_to_string(&lp)).into()\n                     }\n-                    None => self.cmt_to_string(&err.cmt),\n+                    None => self.cmt_to_cow_str(&err.cmt)\n                 };\n                 self.tcx.note_and_explain_region(\n                     &self.region_scope_tree,\n@@ -1477,14 +1478,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         result\n     }\n \n-    pub fn cmt_to_string(&self, cmt: &mc::cmt_<'tcx>) -> String {\n+    pub fn cmt_to_cow_str(&self, cmt: &mc::cmt_<'tcx>) -> Cow<'static, str> {\n         cmt.descriptive_string(self.tcx)\n     }\n \n     pub fn cmt_to_path_or_string(&self, cmt: &mc::cmt_<'tcx>) -> String {\n         match opt_loan_path(cmt) {\n             Some(lp) => format!(\"`{}`\", self.loan_path_to_string(&lp)),\n-            None => self.cmt_to_string(cmt),\n+            None => self.cmt_to_cow_str(cmt).into_owned(),\n         }\n     }\n }"}]}