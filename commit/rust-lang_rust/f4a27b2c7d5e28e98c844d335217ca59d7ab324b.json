{"sha": "f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTI3YjJjN2Q1ZTI4ZTk4Yzg0NGQzMzUyMTdjYTU5ZDdhYjMyNGI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-02T07:04:22Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-03T20:55:10Z"}, "message": "oldmap: get rid of the legacy contains_key method", "tree": {"sha": "6b76d253feb2e1039723369c2f31571898e8e1a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b76d253feb2e1039723369c2f31571898e8e1a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "html_url": "https://github.com/rust-lang/rust/commit/f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "html_url": "https://github.com/rust-lang/rust/commit/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f"}], "stats": {"total": 173, "additions": 86, "deletions": 87}, "files": [{"sha": "4142b33f2dab2ea4ba09372fb56c2ea146ede2e1", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -1706,7 +1706,7 @@ pub fn cmd_sources(c: &Cargo) {\n                 return;\n             }\n \n-            if c.sources.contains_key(name) {\n+            if c.sources.contains_key_ref(&name) {\n                 error(fmt!(\"source already exists: %s\", name));\n             } else {\n                 c.sources.insert(name, @Source {\n@@ -1733,7 +1733,7 @@ pub fn cmd_sources(c: &Cargo) {\n                 return;\n             }\n \n-            if c.sources.contains_key(name) {\n+            if c.sources.contains_key_ref(&name) {\n                 c.sources.remove(name);\n                 info(fmt!(\"removed source: %s\", name));\n             } else {"}, {"sha": "6397eed2d72c93d014512b2187e77e5b3bd216d9", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -94,7 +94,7 @@ pub fn set_crate_data(cstore: CStore,\n }\n \n pub fn have_crate_data(cstore: CStore, cnum: ast::crate_num) -> bool {\n-    return p(cstore).metas.contains_key(cnum);\n+    return p(cstore).metas.contains_key_ref(&cnum);\n }\n \n pub fn iter_crate_data(cstore: CStore,"}, {"sha": "a1edc96a859ef9c020c58acaad3ab6eebb777fde", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -99,7 +99,7 @@ pub enum encode_ctxt = {\n };\n \n pub fn reachable(ecx: @encode_ctxt, id: node_id) -> bool {\n-    ecx.reachable.contains_key(id)\n+    ecx.reachable.contains_key_ref(&id)\n }\n \n fn encode_name(ecx: @encode_ctxt, ebml_w: writer::Encoder, name: ident) {"}, {"sha": "19740b6a929b28091ee465a6cc133e3c1604cb6b", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -665,7 +665,7 @@ fn check_loans_in_expr(expr: @ast::expr,\n \n     self.check_for_conflicting_loans(expr.id);\n \n-    if self.bccx.moves_map.contains_key(expr.id) {\n+    if self.bccx.moves_map.contains_key_ref(&expr.id) {\n         self.check_move_out_from_expr(expr);\n     }\n \n@@ -686,15 +686,15 @@ fn check_loans_in_expr(expr: @ast::expr,\n       }\n       ast::expr_index(_, rval) |\n       ast::expr_binary(_, _, rval)\n-      if self.bccx.method_map.contains_key(expr.id) => {\n+      if self.bccx.method_map.contains_key_ref(&expr.id) => {\n         self.check_call(expr,\n                         None,\n                         expr.callee_id,\n                         expr.span,\n                         ~[rval]);\n       }\n       ast::expr_unary(*) | ast::expr_index(*)\n-      if self.bccx.method_map.contains_key(expr.id) => {\n+      if self.bccx.method_map.contains_key_ref(&expr.id) => {\n         self.check_call(expr,\n                         None,\n                         expr.callee_id,"}, {"sha": "b7b9942492411618dac7b89656ce280c74c90b49", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -204,7 +204,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n       ast::expr_binary(_, rcvr, _) |\n       ast::expr_unary(_, rcvr) |\n       ast::expr_assign_op(_, rcvr, _)\n-      if self.bccx.method_map.contains_key(ex.id) => {\n+      if self.bccx.method_map.contains_key_ref(&ex.id) => {\n         // Receivers in method calls are always passed by ref.\n         //\n         // Here, in an overloaded operator, the call is this expression,\n@@ -241,7 +241,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n       // }\n \n       ast::expr_field(rcvr, _, _)\n-      if self.bccx.method_map.contains_key(ex.id) => {\n+      if self.bccx.method_map.contains_key_ref(&ex.id) => {\n         // Receivers in method calls are always passed by ref.\n         //\n         // Here, the field a.b is in fact a closure.  Eventually, this"}, {"sha": "3bc34d2ef292cb9cd381cd55ff998817be3ed684", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -375,7 +375,7 @@ impl PreserveCtxt {\n                 // scope_id;`. Though that would potentially re-introduce\n                 // the ICE. See #3511 for more details.\n                 let scope_to_use = if\n-                    self.bccx.stmt_map.contains_key(scope_id) {\n+                    self.bccx.stmt_map.contains_key_ref(&scope_id) {\n                     // Root it in its parent scope, b/c\n                     // trans won't introduce a new scope for the\n                     // stmt"}, {"sha": "98c3fdaa8c35d84065164da1f45010442e20712c", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -102,7 +102,7 @@ pub fn check_expr(sess: Session,\n           }\n           expr_lit(@codemap::spanned {node: lit_str(_), _}) => { }\n           expr_binary(_, _, _) | expr_unary(_, _) => {\n-            if method_map.contains_key(e.id) {\n+            if method_map.contains_key_ref(&e.id) {\n                 sess.span_err(e.span, ~\"user-defined operators are not \\\n                                        allowed in constant expressions\");\n             }"}, {"sha": "e25ceee5d30164a005ebed785c71e0e309d18901", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -59,7 +59,7 @@ pub fn expr_is_non_moving_lvalue(cx: @MatchCheckCtxt, expr: @expr) -> bool {\n         return false;\n     }\n \n-    !cx.moves_map.contains_key(expr.id)\n+    !cx.moves_map.contains_key_ref(&expr.id)\n }\n \n pub fn check_expr(cx: @MatchCheckCtxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n@@ -734,7 +734,7 @@ pub fn check_legality_of_move_bindings(cx: @MatchCheckCtxt,\n                     by_ref_span = Some(span);\n                 }\n                 bind_infer => {\n-                    if cx.moves_map.contains_key(id) {\n+                    if cx.moves_map.contains_key_ref(&id) {\n                         any_by_move = true;\n                     }\n                 }\n@@ -774,7 +774,7 @@ pub fn check_legality_of_move_bindings(cx: @MatchCheckCtxt,\n             if pat_is_binding(def_map, p) {\n                 match p.node {\n                     pat_ident(_, _, sub) => {\n-                        if cx.moves_map.contains_key(p.id) {\n+                        if cx.moves_map.contains_key_ref(&p.id) {\n                             check_move(p, sub);\n                         }\n                     }\n@@ -800,7 +800,7 @@ pub fn check_legality_of_move_bindings(cx: @MatchCheckCtxt,\n                                 behind_bad_pointer);\n \n                         if behind_bad_pointer &&\n-                            cx.moves_map.contains_key(pat.id)\n+                            cx.moves_map.contains_key_ref(&pat.id)\n                         {\n                             cx.tcx.sess.span_err(\n                                 pat.span,"}, {"sha": "1e9d8c9c08e28b595c8a5db07454f2afd8470535", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -71,7 +71,7 @@ fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n                       }\n                       if i == depth { // Made it to end of loop\n                         let dnum = ast_util::def_id_of_def(def).node;\n-                        if !seen.contains_key(dnum) {\n+                        if !seen.contains_key_ref(&dnum) {\n                             refs.push(@freevar_entry {\n                                 def: def,\n                                 span: expr.span,"}, {"sha": "94fc63b75ddaae2948bf82964ce8233b1f69b033", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -348,7 +348,7 @@ pub impl &mem_categorization_ctxt {\n         let expr_ty = tcx.ty(expr);\n         match expr.node {\n           ast::expr_unary(ast::deref, e_base) => {\n-            if self.method_map.contains_key(expr.id) {\n+            if self.method_map.contains_key_ref(&expr.id) {\n                 return self.cat_rvalue(expr, expr_ty);\n             }\n \n@@ -357,7 +357,7 @@ pub impl &mem_categorization_ctxt {\n           }\n \n           ast::expr_field(base, f_name, _) => {\n-            if self.method_map.contains_key(expr.id) {\n+            if self.method_map.contains_key_ref(&expr.id) {\n                 return self.cat_method_ref(expr, expr_ty);\n             }\n \n@@ -366,7 +366,7 @@ pub impl &mem_categorization_ctxt {\n           }\n \n           ast::expr_index(base, _) => {\n-            if self.method_map.contains_key(expr.id) {\n+            if self.method_map.contains_key_ref(&expr.id) {\n                 return self.cat_rvalue(expr, expr_ty);\n             }\n "}, {"sha": "8adebdb45820d88c2c7b7e61558249c8c43f20de", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -640,7 +640,7 @@ impl VisitContext {\n                                arg_exprs: &[@expr],\n                                visitor: vt<VisitContext>) -> bool\n     {\n-        if !self.method_map.contains_key(expr.id) {\n+        if !self.method_map.contains_key_ref(&expr.id) {\n             return false;\n         }\n \n@@ -771,7 +771,7 @@ impl VisitContext {\n             for arm.pats.each |pat| {\n                 let mut found = false;\n                 do pat_bindings(self.tcx.def_map, *pat) |_, node_id, _, _| {\n-                    if moves_map.contains_key(node_id) {\n+                    if moves_map.contains_key_ref(&node_id) {\n                         found = true;\n                     }\n                 }"}, {"sha": "e83fe9f0f99c3659053bde9a1e8a251a928dd08d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -296,7 +296,7 @@ pub fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n       _ => {}\n     };\n \n-    if new_cx.root_exprs.contains_key(expr.id) {\n+    if new_cx.root_exprs.contains_key_ref(&expr.id) {\n         new_cx.parent = Some(expr.id);\n     }\n "}, {"sha": "83fc335481c7640ef527ec48d5db88eb48ef4ad3", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -2211,7 +2211,7 @@ pub impl Resolver {\n         }\n \n         // We've successfully resolved the import. Write the results in.\n-        assert module_.import_resolutions.contains_key(target);\n+        assert module_.import_resolutions.contains_key_ref(&target);\n         let import_resolution = module_.import_resolutions.get(target);\n \n         match value_result {\n@@ -2370,7 +2370,7 @@ pub impl Resolver {\n         }\n \n         // We've successfully resolved the import. Write the results in.\n-        assert module_.import_resolutions.contains_key(target);\n+        assert module_.import_resolutions.contains_key_ref(&target);\n         let import_resolution = module_.import_resolutions.get(target);\n \n         match module_result {\n@@ -4090,7 +4090,7 @@ pub impl Resolver {\n             }\n \n             for map_i.each |key, binding| {\n-                if !map_0.contains_key(key) {\n+                if !map_0.contains_key_ref(&key) {\n                     self.session.span_err(\n                         binding.span,\n                         fmt!(\"variable `%s` from pattern #%u is \\\n@@ -4319,7 +4319,8 @@ pub impl Resolver {\n \n                             match bindings_list {\n                                 Some(bindings_list)\n-                                if !bindings_list.contains_key(ident) => {\n+                                if !bindings_list.contains_key_ref(&ident)\n+                                    => {\n                                     let last_rib = (*self.value_ribs).last();\n                                     last_rib.bindings.insert(ident,\n                                                              dl_def(def));\n@@ -4391,16 +4392,19 @@ pub impl Resolver {\n                 pat_struct(path, _, _) => {\n                     match self.resolve_path(path, TypeNS, false, visitor) {\n                         Some(def_ty(class_id))\n-                                if self.structs.contains_key(class_id) => {\n+                                if self.structs.contains_key_ref(&class_id)\n+                                     => {\n                             let class_def = def_struct(class_id);\n                             self.record_def(pattern.id, class_def);\n                         }\n                         Some(definition @ def_struct(class_id))\n-                                if self.structs.contains_key(class_id) => {\n+                                if self.structs.contains_key_ref(&class_id)\n+                                     => {\n                             self.record_def(pattern.id, definition);\n                         }\n                         Some(definition @ def_variant(_, variant_id))\n-                                if self.structs.contains_key(variant_id) => {\n+                                if self.structs.contains_key_ref(&variant_id)\n+                                     => {\n                             self.record_def(pattern.id, definition);\n                         }\n                         result => {\n@@ -4848,12 +4852,12 @@ pub impl Resolver {\n \n                 match self.resolve_path(path, TypeNS, false, visitor) {\n                     Some(def_ty(class_id)) | Some(def_struct(class_id))\n-                            if self.structs.contains_key(class_id) => {\n+                            if self.structs.contains_key_ref(&class_id) => {\n                         let class_def = def_struct(class_id);\n                         self.record_def(expr.id, class_def);\n                     }\n                     Some(definition @ def_variant(_, class_id))\n-                            if self.structs.contains_key(class_id) => {\n+                            if self.structs.contains_key_ref(&class_id) => {\n                         self.record_def(expr.id, definition);\n                     }\n                     _ => {\n@@ -5073,7 +5077,7 @@ pub impl Resolver {\n                self.session.str_of(name));\n \n         match self.trait_info.find(trait_def_id) {\n-            Some(trait_info) if trait_info.contains_key(name) => {\n+            Some(trait_info) if trait_info.contains_key_ref(&name) => {\n                 debug!(\"(adding trait info if containing method) found trait \\\n                         %d:%d for method '%s'\",\n                        trait_def_id.crate,"}, {"sha": "4a1225efe52cb902405ef7c0a85824d23d0f6376", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -1586,7 +1586,7 @@ pub fn trans_match_inner(scope_cx: block,\n                     // but during matching we need to store a *T as explained\n                     // above\n                     let is_move =\n-                        scope_cx.ccx().maps.moves_map.contains_key(p_id);\n+                        scope_cx.ccx().maps.moves_map.contains_key_ref(&p_id);\n                     llmatch = alloca(bcx, T_ptr(llvariable_ty));\n                     trmode = TrByValue(is_move, alloca(bcx, llvariable_ty));\n                 }"}, {"sha": "115aea2897f719ac9003ee538f24d35fd2139230", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -169,8 +169,7 @@ pub fn get_extern_fn(externs: HashMap<~str, ValueRef>,\n                      +name: ~str,\n                      cc: lib::llvm::CallConv,\n                      ty: TypeRef) -> ValueRef {\n-    // XXX: Bad copy.\n-    if externs.contains_key(copy name) { return externs.get(name); }\n+    if externs.contains_key_ref(&name) { return externs.get(name); }\n     // XXX: Bad copy.\n     let f = decl_fn(llmod, copy name, cc, ty);\n     externs.insert(name, f);\n@@ -180,8 +179,7 @@ pub fn get_extern_fn(externs: HashMap<~str, ValueRef>,\n pub fn get_extern_const(externs: HashMap<~str, ValueRef>, llmod: ModuleRef,\n                         +name: ~str, ty: TypeRef) -> ValueRef {\n     unsafe {\n-        // XXX: Bad copy.\n-        if externs.contains_key(copy name) { return externs.get(name); }\n+        if externs.contains_key_ref(&name) { return externs.get(name); }\n         let c = str::as_c_str(name, |buf| {\n             llvm::LLVMAddGlobal(llmod, ty, buf)\n         });\n@@ -451,7 +449,7 @@ pub fn set_glue_inlining(f: ValueRef, t: ty::t) {\n // silently mangles such symbols, breaking our linkage model.\n pub fn note_unique_llvm_symbol(ccx: @crate_ctxt, +sym: ~str) {\n     // XXX: Bad copy.\n-    if ccx.all_llvm_symbols.contains_key(copy sym) {\n+    if ccx.all_llvm_symbols.contains_key_ref(&sym) {\n         ccx.sess.bug(~\"duplicate LLVM symbol: \" + sym);\n     }\n     ccx.all_llvm_symbols.insert(sym, ());\n@@ -2485,7 +2483,7 @@ pub fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             ccx.sess.bug(~\"get_item_val(): unexpected variant\")\n           }\n         };\n-        if !(exprt || ccx.reachable.contains_key(id)) {\n+        if !(exprt || ccx.reachable.contains_key_ref(&id)) {\n             lib::llvm::SetLinkage(val, lib::llvm::InternalLinkage);\n         }\n         ccx.item_vals.insert(id, val);"}, {"sha": "833cff80d2ddb9d69f55a381e14962637168e064", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -672,7 +672,8 @@ pub fn trans_arg_expr(bcx: block,\n         // FIXME(#3548) use the adjustments table\n         match autoref_arg {\n             DoAutorefArg => {\n-                assert !bcx.ccx().maps.moves_map.contains_key(arg_expr.id);\n+                assert !bcx.ccx().maps.moves_map.contains_key_ref(\n+                    &arg_expr.id);\n                 val = arg_datum.to_ref_llval(bcx);\n             }\n             DontAutorefArg => {\n@@ -682,16 +683,16 @@ pub fn trans_arg_expr(bcx: block,\n                         // the explicit self code currently passes by-ref, it\n                         // does not hold.\n                         //\n-                        //assert !bcx.ccx().maps.moves_map.contains_key(\n-                        //    arg_expr.id);\n+                        //assert !bcx.ccx().maps.moves_map.contains_key_ref(\n+                        //    &arg_expr.id);\n                         val = arg_datum.to_ref_llval(bcx);\n                     }\n \n                     ast::by_val => {\n                         // NB: avoid running the take glue.\n \n-                        assert !bcx.ccx().maps.moves_map.contains_key(\n-                            arg_expr.id);\n+                        assert !bcx.ccx().maps.moves_map.contains_key_ref(\n+                            &arg_expr.id);\n                         val = arg_datum.to_value_llval(bcx);\n                     }\n "}, {"sha": "b5652fed10e6dbbdadc1bb9070b4c4dfb4323275", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -126,7 +126,7 @@ pub fn get_const_val(cx: @crate_ctxt, def_id: ast::def_id) -> ValueRef {\n     if !ast_util::is_local(def_id) {\n         cx.tcx.sess.bug(~\"cross-crate constants\");\n     }\n-    if !cx.const_values.contains_key(def_id.node) {\n+    if !cx.const_values.contains_key_ref(&def_id.node) {\n         match cx.tcx.items.get(def_id.node) {\n             ast_map::node_item(@ast::item {\n                 node: ast::item_const(_, subexpr), _"}, {"sha": "240c323965faa4f8fd68521bac8dffbfb42f9f6b", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -183,8 +183,7 @@ pub fn trans_log(log_ex: @ast::expr,\n     // XXX: Bad copy.\n     let modname = path_str(ccx.sess, copy modpath);\n \n-    // XXX: Bad copy.\n-    let global = if ccx.module_data.contains_key(copy modname) {\n+    let global = if ccx.module_data.contains_key_ref(&modname) {\n         ccx.module_data.get(modname)\n     } else {\n         let s = link::mangle_internal_name_by_path_and_seq("}, {"sha": "c3bd34ececbd0873c299cf28c3bfff1341b95ce4", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -223,7 +223,7 @@ pub impl Datum {\n          * `id` is located in the move table, but copies otherwise.\n          */\n \n-        if bcx.ccx().maps.moves_map.contains_key(id) {\n+        if bcx.ccx().maps.moves_map.contains_key_ref(&id) {\n             self.move_to(bcx, action, dst)\n         } else {\n             self.copy_to(bcx, action, dst)"}, {"sha": "35abddfb85a515c5b47cd6787cd1d6cf552641be", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -117,7 +117,7 @@ pub fn mk_ctxt(+crate: ~str, intr: @ident_interner) -> debug_ctxt {\n }\n \n fn update_cache(cache: metadata_cache, mdtag: int, val: debug_metadata) {\n-    let existing = if cache.contains_key(mdtag) {\n+    let existing = if cache.contains_key_ref(&mdtag) {\n         cache.get(mdtag)\n     } else {\n         ~[]\n@@ -176,7 +176,7 @@ fn cached_metadata<T: Copy>(cache: metadata_cache,\n                             eq_fn: fn(md: T) -> bool)\n                          -> Option<T> {\n     unsafe {\n-        if cache.contains_key(mdtag) {\n+        if cache.contains_key_ref(&mdtag) {\n             let items = cache.get(mdtag);\n             for items.each |item| {\n                 let md: T = md_from_metadata::<T>(*item);"}, {"sha": "4cf449cd972104e7a0413c9d6b321e7f3e98f2e1", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -265,7 +265,7 @@ pub fn trans_to_datum(bcx: block, expr: @ast::expr) -> DatumBlock {\n }\n \n pub fn trans_into(bcx: block, expr: @ast::expr, dest: Dest) -> block {\n-    if bcx.tcx().adjustments.contains_key(expr.id) {\n+    if bcx.tcx().adjustments.contains_key_ref(&expr.id) {\n         // use trans_to_datum, which is mildly less efficient but\n         // which will perform the adjustments:\n         let datumblock = trans_to_datum(bcx, expr);\n@@ -426,7 +426,7 @@ fn trans_rvalue_datum_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         }\n         ast::expr_binary(op, lhs, rhs) => {\n             // if overloaded, would be RvalueDpsExpr\n-            assert !bcx.ccx().maps.method_map.contains_key(expr.id);\n+            assert !bcx.ccx().maps.method_map.contains_key_ref(&expr.id);\n \n             return trans_binary(bcx, expr, op, lhs, rhs);\n         }\n@@ -1243,7 +1243,7 @@ fn trans_unary_datum(bcx: block,\n     assert op != ast::deref;\n \n     // if overloaded, would be RvalueDpsExpr\n-    assert !bcx.ccx().maps.method_map.contains_key(un_expr.id);\n+    assert !bcx.ccx().maps.method_map.contains_key_ref(&un_expr.id);\n \n     let un_ty = expr_ty(bcx, un_expr);\n     let sub_ty = expr_ty(bcx, sub_expr);"}, {"sha": "0c93ca18c3b8aa88bacf44fedf47d0cbebf23993", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -380,7 +380,7 @@ pub fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) {\n     let _icx = bcx.insn_ctxt(\"make_visit_glue\");\n     let mut bcx = bcx;\n     let ty_visitor_name = special_idents::ty_visitor;\n-    assert bcx.ccx().tcx.intrinsic_defs.contains_key(ty_visitor_name);\n+    assert bcx.ccx().tcx.intrinsic_defs.contains_key_ref(&ty_visitor_name);\n     let (trait_id, ty) = bcx.ccx().tcx.intrinsic_defs.get(ty_visitor_name);\n     let v = PointerCast(bcx, v, T_ptr(type_of::type_of(bcx.ccx(), ty)));\n     bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, trait_id);"}, {"sha": "1b3e13cddabffe17c4cc8c831e7930283e664606", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -178,7 +178,7 @@ pub fn llalign_of(cx: @crate_ctxt, t: TypeRef) -> ValueRef {\n \n // Computes the size of the data part of an enum.\n pub fn static_size_of_enum(cx: @crate_ctxt, t: ty::t) -> uint {\n-    if cx.enum_sizes.contains_key(t) { return cx.enum_sizes.get(t); }\n+    if cx.enum_sizes.contains_key_ref(&t) { return cx.enum_sizes.get(t); }\n     match ty::get(t).sty {\n       ty::ty_enum(tid, ref substs) => {\n         // Compute max(variant sizes)."}, {"sha": "f488c32437c73d0f8618a6f20198961feec4535d", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -871,7 +871,7 @@ pub fn trans_trait_cast(bcx: block,\n     match vstore {\n         ty::vstore_slice(*) | ty::vstore_box => {\n             let mut llboxdest = GEPi(bcx, lldest, [0u, 1u]);\n-            if bcx.tcx().legacy_boxed_traits.contains_key(id) {\n+            if bcx.tcx().legacy_boxed_traits.contains_key_ref(&id) {\n                 // Allocate an @ box and store the value into it\n                 let {bcx: new_bcx, box: llbox, body: body} =\n                     malloc_boxed(bcx, v_ty);"}, {"sha": "02e07e8484abd79f5fa59ceeb08438935569098f", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -95,7 +95,7 @@ fn traverse_public_mod(cx: ctx, mod_id: node_id, m: _mod) {\n }\n \n fn traverse_public_item(cx: ctx, item: @item) {\n-    if cx.rmap.contains_key(item.id) { return; }\n+    if cx.rmap.contains_key_ref(&item.id) { return; }\n     cx.rmap.insert(item.id, ());\n     match /*bad*/copy item.node {\n       item_mod(m) => traverse_public_mod(cx, item.id, m),\n@@ -145,7 +145,7 @@ fn mk_ty_visitor() -> visit::vt<ctx> {\n }\n \n fn traverse_ty(ty: @Ty, cx: ctx, v: visit::vt<ctx>) {\n-    if cx.rmap.contains_key(ty.id) { return; }\n+    if cx.rmap.contains_key_ref(&ty.id) { return; }\n     cx.rmap.insert(ty.id, ());\n \n     match ty.node {"}, {"sha": "b9a055ad8ab23e02ed57702c110bedb47743b449", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -316,7 +316,7 @@ pub fn emit_calls_to_trait_visit_ty(bcx: block,\n                                  -> block {\n     use syntax::parse::token::special_idents::tydesc;\n     let final = sub_block(bcx, ~\"final\");\n-    assert bcx.ccx().tcx.intrinsic_defs.contains_key(tydesc);\n+    assert bcx.ccx().tcx.intrinsic_defs.contains_key_ref(&tydesc);\n     let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(tydesc);\n     let tydesc_ty = type_of::type_of(bcx.ccx(), tydesc_ty);\n     let r = reflector({"}, {"sha": "72efab0c371c4eecfdbecbbfb0d4d5c3b0558f23", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -87,7 +87,7 @@ pub fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n     debug!(\"type_of %?: %?\", t, ty::get(t));\n \n     // Check the cache.\n-    if cx.lltypes.contains_key(t) { return cx.lltypes.get(t); }\n+    if cx.lltypes.contains_key_ref(&t) { return cx.lltypes.get(t); }\n \n     // Replace any typedef'd types with their equivalent non-typedef\n     // type. This ensures that all LLVM nominal types that contain"}, {"sha": "9c5ca53f68bb05fec547ec4c4b9a061a8d43af1e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -2817,7 +2817,7 @@ pub fn node_id_to_type_params(cx: ctxt, id: ast::node_id) -> ~[t] {\n }\n \n fn node_id_has_type_params(cx: ctxt, id: ast::node_id) -> bool {\n-    return cx.node_type_substs.contains_key(id);\n+    return cx.node_type_substs.contains_key_ref(&id);\n }\n \n // Type accessors for substructures of types\n@@ -3114,7 +3114,7 @@ pub enum ExprKind {\n pub fn expr_kind(tcx: ctxt,\n                  method_map: typeck::method_map,\n                  expr: @ast::expr) -> ExprKind {\n-    if method_map.contains_key(expr.id) {\n+    if method_map.contains_key_ref(&expr.id) {\n         // Overloaded operations are generally calls, and hence they are\n         // generated via DPS.  However, assign_op (e.g., `x += y`) is an\n         // exception, as its result is always unit.\n@@ -4368,7 +4368,7 @@ pub fn iter_bound_traits_and_supertraits(tcx: ctxt,\n                     let super_t = supertrait.tpt.ty;\n                     let d_id = ty_to_def_id(super_t).expect(\"supertrait \\\n                         should be a trait ty\");\n-                    if !supertrait_map.contains_key(d_id) {\n+                    if !supertrait_map.contains_key_ref(&d_id) {\n                         supertrait_map.insert(d_id, super_t);\n                         trait_ty = super_t;\n                         seen_def_ids.push(d_id);"}, {"sha": "3e898ce3aa676742c8887104e13c6e0987733304", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -239,7 +239,7 @@ pub fn check_struct_pat_fields(pcx: pat_ctxt,\n     // Report an error if not all the fields were specified.\n     if !etc {\n         for class_fields.eachi |i, field| {\n-            if found_fields.contains_key(i) {\n+            if found_fields.contains_key_ref(&i) {\n                 loop;\n             }\n             tcx.sess.span_err(span,"}, {"sha": "5a12f9fc3a1968e567b03928cba730c3dc4fc418", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -1171,11 +1171,12 @@ pub impl LookupContext {\n         match candidate.origin {\n             method_static(method_id) | method_self(method_id, _)\n                 | method_super(method_id, _) => {\n-                bad = self.tcx().destructors.contains_key(method_id);\n+                bad = self.tcx().destructors.contains_key_ref(&method_id);\n             }\n             method_param(method_param { trait_id: trait_id, _ }) |\n             method_trait(trait_id, _, _) => {\n-                bad = self.tcx().destructor_for_type.contains_key(trait_id);\n+                bad = self.tcx().destructor_for_type.contains_key_ref(\n+                    &trait_id);\n             }\n         }\n "}, {"sha": "f3abfe3282a3131a53bab4ea1e554b6e2c667895", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -3078,8 +3078,8 @@ pub fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       ~\"visit_tydesc\" => {\n           let tydesc_name = special_idents::tydesc;\n           let ty_visitor_name = tcx.sess.ident_of(~\"TyVisitor\");\n-          assert tcx.intrinsic_defs.contains_key(tydesc_name);\n-          assert ccx.tcx.intrinsic_defs.contains_key(ty_visitor_name);\n+          assert tcx.intrinsic_defs.contains_key_ref(&tydesc_name);\n+          assert ccx.tcx.intrinsic_defs.contains_key_ref(&ty_visitor_name);\n           let (_, tydesc_ty) = tcx.intrinsic_defs.get(tydesc_name);\n           let (_, visitor_trait) = tcx.intrinsic_defs.get(ty_visitor_name);\n           let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {ty: tydesc_ty,"}, {"sha": "9ae55d4556b15bc1b99d691de168a25e2efb160e", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -211,7 +211,7 @@ pub fn visit_expr(expr: @ast::expr, &&rcx: @rcx, v: rvt) {\n             // `constrain_auto_ref()` on all exprs.  But that causes a\n             // lot of spurious errors because of how the region\n             // hierarchy is setup.\n-            if rcx.fcx.ccx.method_map.contains_key(callee.id) {\n+            if rcx.fcx.ccx.method_map.contains_key_ref(&callee.id) {\n                 match callee.node {\n                     ast::expr_field(base, _, _) => {\n                         constrain_auto_ref(rcx, base);\n@@ -750,7 +750,7 @@ pub mod guarantor {\n         let _i = ::util::common::indenter();\n \n         let guarantor = {\n-            if rcx.fcx.ccx.method_map.contains_key(expr.id) {\n+            if rcx.fcx.ccx.method_map.contains_key_ref(&expr.id) {\n                 None\n             } else {\n                 guarantor(rcx, expr)"}, {"sha": "18a4f20d031b5be7bbe5ccd6360394287f8d4166", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -268,7 +268,7 @@ pub fn lookup_vtable(vcx: &VtableContext,\n                         // im is one specific impl of trait_ty.\n \n                         // First, ensure we haven't processed this impl yet.\n-                        if impls_seen.contains_key(im.did) {\n+                        if impls_seen.contains_key_ref(&im.did) {\n                             loop;\n                         }\n                         impls_seen.insert(im.did, ());"}, {"sha": "64ea45c8704001cf44747ddf56a35dc698c007e4", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -141,7 +141,7 @@ fn maybe_resolve_type_vars_for_node(wbcx: wb_ctxt, sp: span,\n                                     id: ast::node_id)\n     -> Option<ty::t>\n {\n-    if wbcx.fcx.inh.node_types.contains_key(id) {\n+    if wbcx.fcx.inh.node_types.contains_key_ref(&id) {\n         resolve_type_vars_for_node(wbcx, sp, id)\n     } else {\n         None"}, {"sha": "2ceb8dc93ef20a54913bca3ef2aa384fee948a48", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -502,7 +502,7 @@ pub impl CoherenceChecker {\n         }\n \n         for ty::trait_methods(tcx, trait_did).each |method| {\n-            if provided_method_idents.contains_key(method.ident) {\n+            if provided_method_idents.contains_key_ref(&method.ident) {\n                 if !f(method) {\n                     break;\n                 }\n@@ -912,7 +912,7 @@ pub impl CoherenceChecker {\n         let tcx = self.crate_context.tcx;\n         let pmm = tcx.provided_methods;\n \n-        if pmm.contains_key(trait_def_id) { return; }\n+        if pmm.contains_key_ref(&trait_def_id) { return; }\n \n         debug!(\"(adding default methods for trait) processing trait\");\n "}, {"sha": "32d924891886aac8fe29d8304b0766a755883a87", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -326,7 +326,7 @@ pub fn ensure_supertraits(ccx: @crate_ctxt,\n                           rp: Option<ty::region_variance>,\n                           trait_refs: &[@ast::trait_ref]) {\n     let tcx = ccx.tcx;\n-    if tcx.supertraits.contains_key(local_def(id)) { return; }\n+    if tcx.supertraits.contains_key_ref(&local_def(id)) { return; }\n \n     let instantiated = dvec::DVec();\n     for trait_refs.each |trait_ref| {"}, {"sha": "a8742ec0535528a641be9f8877630ccca1ee392e", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -164,10 +164,6 @@ pub mod chained {\n     impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V> {\n         pure fn size() -> uint { self.count }\n \n-        pure fn contains_key(k: K) -> bool {\n-            self.contains_key_ref(&k)\n-        }\n-\n         pure fn contains_key_ref(k: &K) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(k, hash) {\n@@ -638,9 +634,9 @@ mod tests {\n     fn test_contains_key() {\n         let key = ~\"k\";\n         let map = HashMap::<~str, ~str>();\n-        assert (!map.contains_key(key));\n+        assert (!map.contains_key_ref(&key));\n         map.insert(key, ~\"val\");\n-        assert (map.contains_key(key));\n+        assert (map.contains_key_ref(&key));\n     }\n \n     #[test]\n@@ -658,10 +654,10 @@ mod tests {\n         let map = HashMap::<~str, ~str>();\n         map.insert(key, ~\"val\");\n         assert (map.size() == 1);\n-        assert (map.contains_key(key));\n+        assert (map.contains_key_ref(&key));\n         map.clear();\n         assert (map.size() == 0);\n-        assert (!map.contains_key(key));\n+        assert (!map.contains_key_ref(&key));\n     }\n \n     #[test]"}, {"sha": "c6c79f1289c0911b83f67f52ed40eab3ae9048ae", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -363,7 +363,7 @@ pub fn require_unique_names(diagnostic: span_handler,\n         let name = get_meta_item_name(*meta);\n \n         // FIXME: How do I silence the warnings? --pcw (#2619)\n-        if map.contains_key(name) {\n+        if map.contains_key_ref(&name) {\n             diagnostic.span_fatal(meta.span,\n                                   fmt!(\"duplicate meta item `%s`\", name));\n         }"}, {"sha": "9548db70b94c3e85f7d8652d07f4673517629a27", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -197,7 +197,7 @@ pub fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@named_match])\n           codemap::spanned {\n                 node: match_nonterminal(bind_name, _, idx), span: sp\n           } => {\n-            if ret_val.contains_key(bind_name) {\n+            if ret_val.contains_key_ref(&bind_name) {\n                 p_s.span_diagnostic.span_fatal(sp, ~\"Duplicated bind name: \"+\n                                                *p_s.interner.get(bind_name))\n             }"}, {"sha": "cdde542bb1f32381c52de8736e455a51f19fcd84", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -137,7 +137,7 @@ pub impl Parser {\n                    desc: &str) {\n         self.span_err(sp, fmt!(\"obsolete syntax: %s\", kind_str));\n \n-        if !self.obsolete_set.contains_key(kind) {\n+        if !self.obsolete_set.contains_key_ref(&kind) {\n             self.sess.span_diagnostic.handler().note(fmt!(\"%s\", desc));\n             self.obsolete_set.insert(kind, ());\n         }"}, {"sha": "bedea9600b6db12a4c3c1f44be2f3177a196e420", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a27b2c7d5e28e98c844d335217ca59d7ab324b/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "patch": "@@ -134,7 +134,7 @@ fn writer(path: ~str, pport: pipes::Port<Line>, size: uint)\n             done += 1_u;\n             let mut prev = done;\n             while prev <= i {\n-                if lines.contains_key(prev) {\n+                if lines.contains_key_ref(&prev) {\n                     debug!(\"WS %u\", prev);\n                     cout.write(lines.get(prev));\n                     done += 1_u;"}]}