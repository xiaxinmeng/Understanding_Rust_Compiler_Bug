{"sha": "98d66340d6e63eda115afc8b0da1d87965881936", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDY2MzQwZDZlNjNlZGExMTVhZmM4YjBkYTFkODc5NjU4ODE5MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-14T18:03:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-14T18:03:17Z"}, "message": "Auto merge of #78809 - vn-ki:fix-issue-76064, r=oli-obk\n\nadd error_occured field to ConstQualifs,\n\nfix #76064\n\nI wasn't sure what `in_return_place` actually did and not sure why it returns `ConstQualifs` while it's sibling functions return `bool`. So I tried to make as minimal changes to the structure as possible. Please point out whether I have to refactor it or not.\n\nr? `@oli-obk`\ncc `@RalfJung`", "tree": {"sha": "96ad525be05173c8af11a088b5c55f9c4afa530a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96ad525be05173c8af11a088b5c55f9c4afa530a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d66340d6e63eda115afc8b0da1d87965881936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d66340d6e63eda115afc8b0da1d87965881936", "html_url": "https://github.com/rust-lang/rust/commit/98d66340d6e63eda115afc8b0da1d87965881936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d66340d6e63eda115afc8b0da1d87965881936/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e49a9ead550551e879af64ba91a0316da1c422", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e49a9ead550551e879af64ba91a0316da1c422", "html_url": "https://github.com/rust-lang/rust/commit/30e49a9ead550551e879af64ba91a0316da1c422"}, {"sha": "f026d0fcf804b71614a6aa070e34a0b42f5469d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f026d0fcf804b71614a6aa070e34a0b42f5469d2", "html_url": "https://github.com/rust-lang/rust/commit/f026d0fcf804b71614a6aa070e34a0b42f5469d2"}], "stats": {"total": 235, "additions": 78, "deletions": 157}, "files": [{"sha": "db0056e482be06bf89890d3e408ce90bd9514ab0", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -233,14 +233,15 @@ pub struct BorrowCheckResult<'tcx> {\n \n /// The result of the `mir_const_qualif` query.\n ///\n-/// Each field corresponds to an implementer of the `Qualif` trait in\n-/// `librustc_mir/transform/check_consts/qualifs.rs`. See that file for more information on each\n+/// Each field (except `error_occured`) corresponds to an implementer of the `Qualif` trait in\n+/// `rustc_mir/src/transform/check_consts/qualifs.rs`. See that file for more information on each\n /// `Qualif`.\n #[derive(Clone, Copy, Debug, Default, TyEncodable, TyDecodable, HashStable)]\n pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n     pub needs_drop: bool,\n     pub custom_eq: bool,\n+    pub error_occured: Option<ErrorReported>,\n }\n \n /// After we borrow check a closure, we are left with various"}, {"sha": "6e09ae43406456ea78a49de1daae97f7e4e91c43", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -6,6 +6,7 @@ use crate::interpret::{\n     ScalarMaybeUninit, StackPopCleanup,\n };\n \n+use rustc_errors::ErrorReported;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -274,6 +275,16 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 return Err(ErrorHandled::Reported(error_reported));\n             }\n         }\n+        if !tcx.is_mir_available(def.did) {\n+            tcx.sess.delay_span_bug(\n+                tcx.def_span(def.did),\n+                &format!(\"no MIR body is available for {:?}\", def.did),\n+            );\n+            return Err(ErrorHandled::Reported(ErrorReported {}));\n+        }\n+        if let Some(error_reported) = tcx.mir_const_qualif_opt_const_arg(def).error_occured {\n+            return Err(ErrorHandled::Reported(error_reported));\n+        }\n     }\n \n     let is_static = tcx.is_static(def.did);"}, {"sha": "c66d3ed76df904190ddfc9d94774e5213132229e", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -2,18 +2,24 @@\n //!\n //! See the `Qualif` trait for more info.\n \n+use rustc_errors::ErrorReported;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits;\n \n use super::ConstCx;\n \n-pub fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> ConstQualifs {\n+pub fn in_any_value_of_ty(\n+    cx: &ConstCx<'_, 'tcx>,\n+    ty: Ty<'tcx>,\n+    error_occured: Option<ErrorReported>,\n+) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n         needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n+        error_occured,\n     }\n }\n "}, {"sha": "e4893044a159933cabf2b6c5e323d508ece31145", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -1,6 +1,6 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -123,7 +123,11 @@ impl Qualifs<'mir, 'tcx> {\n         has_mut_interior.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n     }\n \n-    fn in_return_place(&mut self, ccx: &'mir ConstCx<'mir, 'tcx>) -> ConstQualifs {\n+    fn in_return_place(\n+        &mut self,\n+        ccx: &'mir ConstCx<'mir, 'tcx>,\n+        error_occured: Option<ErrorReported>,\n+    ) -> ConstQualifs {\n         // Find the `Return` terminator if one exists.\n         //\n         // If no `Return` terminator exists, this MIR is divergent. Just return the conservative\n@@ -139,7 +143,7 @@ impl Qualifs<'mir, 'tcx> {\n             .map(|(bb, _)| bb);\n \n         let return_block = match return_block {\n-            None => return qualifs::in_any_value_of_ty(ccx, ccx.body.return_ty()),\n+            None => return qualifs::in_any_value_of_ty(ccx, ccx.body.return_ty(), error_occured),\n             Some(bb) => bb,\n         };\n \n@@ -170,6 +174,7 @@ impl Qualifs<'mir, 'tcx> {\n             needs_drop: self.needs_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n             custom_eq,\n+            error_occured,\n         }\n     }\n }\n@@ -181,7 +186,7 @@ pub struct Validator<'mir, 'tcx> {\n     /// The span of the current statement.\n     span: Span,\n \n-    error_emitted: bool,\n+    error_emitted: Option<ErrorReported>,\n     secondary_errors: Vec<Diagnostic>,\n }\n \n@@ -199,7 +204,7 @@ impl Validator<'mir, 'tcx> {\n             span: ccx.body.span,\n             ccx,\n             qualifs: Default::default(),\n-            error_emitted: false,\n+            error_emitted: None,\n             secondary_errors: Vec::new(),\n         }\n     }\n@@ -266,7 +271,7 @@ impl Validator<'mir, 'tcx> {\n         // If we got through const-checking without emitting any \"primary\" errors, emit any\n         // \"secondary\" errors if they occurred.\n         let secondary_errors = mem::take(&mut self.secondary_errors);\n-        if !self.error_emitted {\n+        if self.error_emitted.is_none() {\n             for error in secondary_errors {\n                 self.tcx.sess.diagnostic().emit_diagnostic(&error);\n             }\n@@ -276,7 +281,7 @@ impl Validator<'mir, 'tcx> {\n     }\n \n     pub fn qualifs_in_return_place(&mut self) -> ConstQualifs {\n-        self.qualifs.in_return_place(self.ccx)\n+        self.qualifs.in_return_place(self.ccx, self.error_emitted)\n     }\n \n     /// Emits an error if an expression cannot be evaluated in the current context.\n@@ -318,7 +323,7 @@ impl Validator<'mir, 'tcx> {\n \n         match op.importance() {\n             ops::DiagnosticImportance::Primary => {\n-                self.error_emitted = true;\n+                self.error_emitted = Some(ErrorReported);\n                 err.emit();\n             }\n "}, {"sha": "4519833b864867f106ff167242eb73fe9c436331", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -11,5 +11,4 @@ fn main() {\n     //~| ERROR calls in constants are limited to constant functions\n     //~| ERROR mutable references are not allowed in constants\n     //~| ERROR calls in constants are limited to constant functions\n-    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "06ab9a6ff2910b26ee20a4223f92b58a8d6081bf", "filename": "src/test/ui/const-generics/nested-type.full.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -4,13 +4,6 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     Foo::<17>::value()\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/nested-type.rs:16:5\n-   |\n-LL |     Foo::<17>::value()\n-   |     ^^^^^^^^^^^^^^^^^^ calling non-const function `Foo::{constant#0}::Foo::<17_usize>::value`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "4f76ec6e02b22acd19094a46aa59b2d2dfe86ffd", "filename": "src/test/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -20,13 +20,6 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     Foo::<17>::value()\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/nested-type.rs:16:5\n-   |\n-LL |     Foo::<17>::value()\n-   |     ^^^^^^^^^^^^^^^^^^ calling non-const function `Foo::{constant#0}::Foo::<17_usize>::value`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "c5660983985c3f81588fae000a61672fbc0108ac", "filename": "src/test/ui/const-generics/nested-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -15,7 +15,6 @@ struct Foo<const N: [u8; { //[min]~ ERROR `[u8; _]` is forbidden\n \n     Foo::<17>::value()\n     //~^ ERROR calls in constants are limited to constant functions\n-    //~| ERROR evaluation of constant value failed\n }]>;\n \n fn main() {}"}, {"sha": "db642988971e0266d10968e32b7afca1bca8070b", "filename": "src/test/ui/consts/const-call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-call.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -5,5 +5,4 @@ fn f(x: usize) -> usize {\n fn main() {\n     let _ = [0; f(2)];\n     //~^ ERROR calls in constants are limited to constant functions\n-    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "9761348bab824f77f70589ec67a437410a1b74fe", "filename": "src/test/ui/consts/const-call.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -4,13 +4,6 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     let _ = [0; f(2)];\n    |                 ^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-call.rs:6:17\n-   |\n-LL |     let _ = [0; f(2)];\n-   |                 ^^^^ calling non-const function `f`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "159b48d42b6c69e50fc146865244fbb3101ee721", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n     [();  { &loop { break } as *const _ as usize } ];\n     //~^ ERROR casting pointers to integers in constants is unstable\n-    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "2a8f34279c3db67d9f114333de6a0b50b6b9e079", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -7,13 +7,6 @@ LL |     [();  { &loop { break } as *const _ as usize } ];\n    = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52442.rs:2:13\n-   |\n-LL |     [();  { &loop { break } as *const _ as usize } ];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0658.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d980eb92a243e87f47020b8c2997f676d40b3ed3", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -5,7 +5,6 @@ fn main() {\n     let _: [u8; 0] = [4; {\n         match &1 as *const i32 as usize {\n             //~^ ERROR casting pointers to integers in constants\n-            //~| ERROR evaluation of constant value failed\n             0 => 42,\n             n => n,\n         }"}, {"sha": "22d6bb16944b57427eb83560c90df86b09492b43", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -7,13 +7,6 @@ LL |         match &1 as *const i32 as usize {\n    = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/match-test-ptr-null.rs:6:15\n-   |\n-LL |         match &1 as *const i32 as usize {\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0658.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d77fd9aa831bee8973e35b7a2be7073299421150", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -4,7 +4,6 @@\n \n struct Bug {\n     a: [(); (|| { 0 })()] //~ ERROR calls in constants are limited to\n-    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {}"}, {"sha": "74d70e18a24cb57d57369575c12b6e2eba359d67", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -4,13 +4,6 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     a: [(); (|| { 0 })()]\n    |             ^^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n-   |\n-LL |     a: [(); (|| { 0 })()]\n-   |             ^^^^^^^^^^^^ calling non-const function `Bug::a::{constant#0}::{closure#0}`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "2da764b47c0c44d89ee8984509e450212a5fcc18", "filename": "src/test/ui/consts/issue-76064.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -0,0 +1,3 @@\n+struct Bug([u8; panic!(1)]); //~ ERROR panicking in constants is unstable\n+\n+fn main() {}"}, {"sha": "f939ff3397504e54093cc2f48f0d8fa15965098a", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -0,0 +1,13 @@\n+error[E0658]: panicking in constants is unstable\n+  --> $DIR/issue-76064.rs:1:17\n+   |\n+LL | struct Bug([u8; panic!(1)]);\n+   |                 ^^^^^^^^^\n+   |\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n+   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "07d3a82b1ed9da3b0ffb06384e3c689b84665cd2", "filename": "src/test/ui/issues/issue-39559-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -13,8 +13,6 @@ impl Dim for Dim3 {\n fn main() {\n     let array: [usize; Dim3::dim()]\n     //~^ ERROR E0015\n-    //~| ERROR E0080\n         = [0; Dim3::dim()];\n         //~^ ERROR E0015\n-        //~| ERROR E0080\n }"}, {"sha": "3d765daa7cdef1a5ffed4eca68131f192d891a1d", "filename": "src/test/ui/issues/issue-39559-2.stderr", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -4,25 +4,12 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     let array: [usize; Dim3::dim()]\n    |                        ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-39559-2.rs:14:24\n-   |\n-LL |     let array: [usize; Dim3::dim()]\n-   |                        ^^^^^^^^^^^ calling non-const function `<Dim3 as Dim>::dim`\n-\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-39559-2.rs:17:15\n+  --> $DIR/issue-39559-2.rs:16:15\n    |\n LL |         = [0; Dim3::dim()];\n    |               ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-39559-2.rs:17:15\n-   |\n-LL |         = [0; Dim3::dim()];\n-   |               ^^^^^^^^^^^ calling non-const function `<Dim3 as Dim>::dim`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0080.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "cc6a485085372eb849052549a58c519d94fee30e", "filename": "src/test/ui/issues/issue-43105.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -2,7 +2,6 @@ fn xyz() -> u8 { 42 }\n \n const NUM: u8 = xyz();\n //~^ ERROR calls in constants are limited to constant functions, tuple structs and tuple variants\n-//~| ERROR any use of this value will cause an error [const_err]\n \n fn main() {\n     match 1 {"}, {"sha": "e508cbdd1dd53e3fbd64e86bdba6b9bc436a5193", "filename": "src/test/ui/issues/issue-43105.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -4,28 +4,18 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL | const NUM: u8 = xyz();\n    |                 ^^^^^\n \n-error: any use of this value will cause an error\n-  --> $DIR/issue-43105.rs:3:17\n-   |\n-LL | const NUM: u8 = xyz();\n-   | ----------------^^^^^-\n-   |                 |\n-   |                 calling non-const function `xyz`\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n error: could not evaluate constant pattern\n-  --> $DIR/issue-43105.rs:9:9\n+  --> $DIR/issue-43105.rs:8:9\n    |\n LL |         NUM => unimplemented!(),\n    |         ^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/issue-43105.rs:9:9\n+  --> $DIR/issue-43105.rs:8:9\n    |\n LL |         NUM => unimplemented!(),\n    |         ^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "cc756ce815f15c19af1038930ce2a002911d2fbb", "filename": "src/test/ui/issues/issue-52023-array-size-pointer-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -1,4 +1,3 @@\n fn main() {\n     let _ = [0; (&0 as *const i32) as usize]; //~ ERROR casting pointers to integers in constants\n-    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "68b5cbd9bd7c7a8be4174f1cef77b077887b3b7d", "filename": "src/test/ui/issues/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -7,13 +7,6 @@ LL |     let _ = [0; (&0 as *const i32) as usize];\n    = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52023-array-size-pointer-cast.rs:2:17\n-   |\n-LL |     let _ = [0; (&0 as *const i32) as usize];\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0658.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "13b914c0331d1a29d559174aecc2843297b12c43", "filename": "src/test/ui/issues/issue-52060.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -3,6 +3,5 @@\n static A: &'static [u32] = &[1];\n static B: [u32; 1] = [0; A.len()];\n //~^ ERROR [E0013]\n-//~| ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "95e5f2a8282cb64c5ce9d48d701cd0ce30feb2ec", "filename": "src/test/ui/issues/issue-52060.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -6,13 +6,6 @@ LL | static B: [u32; 1] = [0; A.len()];\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52060.rs:4:26\n-   |\n-LL | static B: [u32; 1] = [0; A.len()];\n-   |                          ^ constant accesses static\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0013, E0080.\n-For more information about an error, try `rustc --explain E0013`.\n+For more information about this error, try `rustc --explain E0013`."}, {"sha": "966d76d148af3f69d901198d4955d3b4654d769a", "filename": "src/test/ui/issues/issue-77919.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n-    [1; <Multiply<Five, Five>>::VAL]; //~ ERROR evaluation of constant value failed\n+    [1; <Multiply<Five, Five>>::VAL];\n }\n trait TypeVal<T> {\n-    const VAL: T; //~ ERROR any use of this value will cause an error\n+    const VAL: T;\n }\n struct Five;\n struct Multiply<N, M> {"}, {"sha": "97bd5ab36b65d176d2e4ab0fb8580f0d2342dde0", "filename": "src/test/ui/issues/issue-77919.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -26,21 +26,7 @@ LL |     const VAL: T;\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error: any use of this value will cause an error\n-  --> $DIR/issue-77919.rs:5:5\n-   |\n-LL |     const VAL: T;\n-   |     ^^^^^^^^^^^^^ no MIR body is available for DefId(0:7 ~ issue_77919[317d]::TypeVal::VAL)\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-77919.rs:2:9\n-   |\n-LL |     [1; <Multiply<Five, Five>>::VAL];\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0046, E0080, E0412.\n+Some errors have detailed explanations: E0046, E0412.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "eaa5e6f51cb4abd51ed518386e1fb9a867061237", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d66340d6e63eda115afc8b0da1d87965881936/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=98d66340d6e63eda115afc8b0da1d87965881936", "patch": "@@ -26,21 +26,7 @@ LL |     const VAL: T;\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error: any use of this value will cause an error\n-  --> $DIR/ice-6252.rs:5:5\n-   |\n-LL |     const VAL: T;\n-   |     ^^^^^^^^^^^^^ no MIR body is available for DefId(0:5 ~ ice_6252[317d]::TypeVal::VAL)\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ice-6252.rs:14:9\n-   |\n-LL |     [1; <Multiply<Five, Five>>::VAL];\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0046, E0080, E0412.\n+Some errors have detailed explanations: E0046, E0412.\n For more information about an error, try `rustc --explain E0046`."}]}