{"sha": "bad4e48672f928644457cece3b7e21dd78ea1e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZDRlNDg2NzJmOTI4NjQ0NDU3Y2VjZTNiN2UyMWRkNzhlYTFlOWI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-21T19:08:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-23T10:32:10Z"}, "message": "Set up a search scope when searching for mbe macro references", "tree": {"sha": "ae9a17f4f08b05204b78a5d015ff7ece1305e88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9a17f4f08b05204b78a5d015ff7ece1305e88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bad4e48672f928644457cece3b7e21dd78ea1e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bad4e48672f928644457cece3b7e21dd78ea1e9b", "html_url": "https://github.com/rust-lang/rust/commit/bad4e48672f928644457cece3b7e21dd78ea1e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bad4e48672f928644457cece3b7e21dd78ea1e9b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1efd220f2f844596dd22bfd73a8a0c596354be38", "url": "https://api.github.com/repos/rust-lang/rust/commits/1efd220f2f844596dd22bfd73a8a0c596354be38", "html_url": "https://github.com/rust-lang/rust/commit/1efd220f2f844596dd22bfd73a8a0c596354be38"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "ea0a609612309b63de3a097123ae6fa144ecd18b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bad4e48672f928644457cece3b7e21dd78ea1e9b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad4e48672f928644457cece3b7e21dd78ea1e9b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=bad4e48672f928644457cece3b7e21dd78ea1e9b", "patch": "@@ -1150,6 +1150,11 @@ impl MacroDef {\n         // FIXME: wrong for `ProcMacro`\n         matches!(self.id.kind, MacroDefKind::ProcMacro(..) | MacroDefKind::BuiltInDerive(..))\n     }\n+\n+    /// Indicate it is a declarative macro\n+    pub fn is_declarative(&self) -> bool {\n+        matches!(self.id.kind, MacroDefKind::Declarative(..))\n+    }\n }\n \n /// Invariant: `inner.as_assoc_item(db).is_some()`"}, {"sha": "95ed8a0457e1342b543ed4b0c81dfe72d732cfed", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bad4e48672f928644457cece3b7e21dd78ea1e9b/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad4e48672f928644457cece3b7e21dd78ea1e9b/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=bad4e48672f928644457cece3b7e21dd78ea1e9b", "patch": "@@ -1294,4 +1294,34 @@ pub use level1::Foo;\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_decl_macro_references() {\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib\n+#[macro_use]\n+mod qux;\n+mod bar;\n+\n+pub use self::foo;\n+//- /qux.rs\n+#[macro_export]\n+macro_rules! foo$0 {\n+    () => {struct Foo;};\n+}\n+//- /bar.rs\n+foo!();\n+//- /other.rs crate:other deps:lib new_source_root:\n+lib::foo!();\n+\"#,\n+            expect![[r#\"\n+                foo Macro FileId(1) 0..61 29..32\n+\n+                FileId(0) 46..49\n+                FileId(2) 0..3\n+                FileId(3) 5..8\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "5fdcb13cfb9a07ae0caa4dbd20167720246c06db", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bad4e48672f928644457cece3b7e21dd78ea1e9b/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad4e48672f928644457cece3b7e21dd78ea1e9b/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=bad4e48672f928644457cece3b7e21dd78ea1e9b", "patch": "@@ -7,7 +7,7 @@\n use std::{convert::TryInto, mem};\n \n use base_db::{FileId, FileRange, SourceDatabase, SourceDatabaseExt};\n-use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n+use hir::{DefWithBody, HasAttrs, HasSource, Module, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use rustc_hash::FxHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n@@ -244,17 +244,34 @@ impl Definition {\n             return SearchScope::new(res);\n         }\n \n-        if let Some(Visibility::Public) = vis {\n+        let rev_dep_scope = || {\n             let mut res = FxHashMap::default();\n-\n             let krate = module.krate();\n             for rev_dep in krate.transitive_reverse_dependencies(db) {\n                 let root_file = rev_dep.root_file(db);\n                 let source_root_id = db.file_source_root(root_file);\n                 let source_root = db.source_root(source_root_id);\n                 res.extend(source_root.iter().map(|id| (id, None)));\n             }\n-            return SearchScope::new(res);\n+            SearchScope::new(res)\n+        };\n+\n+        if let Definition::Macro(macro_def) = self {\n+            if macro_def.is_declarative() {\n+                return if macro_def.attrs(db).by_key(\"macro_export\").exists() {\n+                    rev_dep_scope()\n+                } else {\n+                    let source_root_id = db.file_source_root(file_id);\n+                    let source_root = db.source_root(source_root_id);\n+                    SearchScope::new(\n+                        source_root.iter().map(|id| (id, None)).collect::<FxHashMap<_, _>>(),\n+                    )\n+                };\n+            }\n+        }\n+\n+        if let Some(Visibility::Public) = vis {\n+            return rev_dep_scope();\n         }\n \n         let mut res = FxHashMap::default();"}]}