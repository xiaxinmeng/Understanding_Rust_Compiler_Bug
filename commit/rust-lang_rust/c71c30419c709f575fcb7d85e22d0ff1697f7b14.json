{"sha": "c71c30419c709f575fcb7d85e22d0ff1697f7b14", "node_id": "C_kwDOAAsO6NoAKGM3MWMzMDQxOWM3MDlmNTc1ZmNiN2Q4NWUyMmQwZmYxNjk3ZjdiMTQ", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-07T14:13:37Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-07T14:22:34Z"}, "message": "Use bitflags for `FnFlags`", "tree": {"sha": "eec2b7a32a2ee22b838c0bb11b8cefb6d7cdfa49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eec2b7a32a2ee22b838c0bb11b8cefb6d7cdfa49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71c30419c709f575fcb7d85e22d0ff1697f7b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71c30419c709f575fcb7d85e22d0ff1697f7b14", "html_url": "https://github.com/rust-lang/rust/commit/c71c30419c709f575fcb7d85e22d0ff1697f7b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71c30419c709f575fcb7d85e22d0ff1697f7b14/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82fa6ad245300c817f5ff67094dd2108704ca531", "url": "https://api.github.com/repos/rust-lang/rust/commits/82fa6ad245300c817f5ff67094dd2108704ca531", "html_url": "https://github.com/rust-lang/rust/commit/82fa6ad245300c817f5ff67094dd2108704ca531"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "55cf7d638fdbc47c44e9e81245c70bd25fdd717a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c71c30419c709f575fcb7d85e22d0ff1697f7b14/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c71c30419c709f575fcb7d85e22d0ff1697f7b14/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c71c30419c709f575fcb7d85e22d0ff1697f7b14", "patch": "@@ -497,6 +497,7 @@ dependencies = [\n  \"anymap\",\n  \"arrayvec\",\n  \"base_db\",\n+ \"bitflags\",\n  \"cfg\",\n  \"cov-mark\",\n  \"dashmap\","}, {"sha": "5863092839b8e9b8ad5e6decc3f853daafa22c00", "filename": "crates/hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c71c30419c709f575fcb7d85e22d0ff1697f7b14/crates%2Fhir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c71c30419c709f575fcb7d85e22d0ff1697f7b14/crates%2Fhir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2FCargo.toml?ref=c71c30419c709f575fcb7d85e22d0ff1697f7b14", "patch": "@@ -10,6 +10,7 @@ rust-version = \"1.57\"\n doctest = false\n \n [dependencies]\n+bitflags = \"1.3.2\"\n cov-mark = \"2.0.0-pre.1\"\n dashmap = { version = \"5.2.0\", features = [\"raw-api\"] }\n lock_api = \"0.4.6\""}, {"sha": "4cce419a7fe7e35a84e5eb6efff982d056abd0a8", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c71c30419c709f575fcb7d85e22d0ff1697f7b14/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71c30419c709f575fcb7d85e22d0ff1697f7b14/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=c71c30419c709f575fcb7d85e22d0ff1697f7b14", "patch": "@@ -54,9 +54,9 @@ impl FunctionData {\n \n         let mut flags = func.flags;\n         if is_varargs {\n-            flags.bits |= FnFlags::IS_VARARGS;\n+            flags |= FnFlags::IS_VARARGS;\n         }\n-        if flags.bits & FnFlags::HAS_SELF_PARAM != 0 {\n+        if flags.contains(FnFlags::HAS_SELF_PARAM) {\n             // If there's a self param in the syntax, but it is cfg'd out, remove the flag.\n             let is_cfgd_out = match func.params.clone().next() {\n                 Some(param) => {\n@@ -69,7 +69,7 @@ impl FunctionData {\n             };\n             if is_cfgd_out {\n                 cov_mark::hit!(cfgd_out_self_param);\n-                flags.bits &= !FnFlags::HAS_SELF_PARAM;\n+                flags.remove(FnFlags::HAS_SELF_PARAM);\n             }\n         }\n \n@@ -101,33 +101,33 @@ impl FunctionData {\n     }\n \n     pub fn has_body(&self) -> bool {\n-        self.flags.bits & FnFlags::HAS_BODY != 0\n+        self.flags.contains(FnFlags::HAS_BODY)\n     }\n \n     /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n     pub fn has_self_param(&self) -> bool {\n-        self.flags.bits & FnFlags::HAS_SELF_PARAM != 0\n+        self.flags.contains(FnFlags::HAS_SELF_PARAM)\n     }\n \n     pub fn is_default(&self) -> bool {\n-        self.flags.bits & FnFlags::IS_DEFAULT != 0\n+        self.flags.contains(FnFlags::IS_DEFAULT)\n     }\n \n     pub fn is_const(&self) -> bool {\n-        self.flags.bits & FnFlags::IS_CONST != 0\n+        self.flags.contains(FnFlags::IS_CONST)\n     }\n \n     pub fn is_async(&self) -> bool {\n-        self.flags.bits & FnFlags::IS_ASYNC != 0\n+        self.flags.contains(FnFlags::IS_ASYNC)\n     }\n \n     pub fn is_unsafe(&self) -> bool {\n-        self.flags.bits & FnFlags::IS_UNSAFE != 0\n+        self.flags.contains(FnFlags::IS_UNSAFE)\n     }\n \n     pub fn is_varargs(&self) -> bool {\n-        self.flags.bits & FnFlags::IS_VARARGS != 0\n+        self.flags.contains(FnFlags::IS_VARARGS)\n     }\n }\n "}, {"sha": "23a01010391f482e8b15b64a73c4b79f3430460c", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c71c30419c709f575fcb7d85e22d0ff1697f7b14/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71c30419c709f575fcb7d85e22d0ff1697f7b14/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=c71c30419c709f575fcb7d85e22d0ff1697f7b14", "patch": "@@ -601,18 +601,17 @@ pub enum Param {\n     Varargs,\n }\n \n-#[derive(Debug, Clone, Copy, Eq, PartialEq, Default)]\n-pub(crate) struct FnFlags {\n-    pub(crate) bits: u8,\n-}\n-impl FnFlags {\n-    pub(crate) const HAS_SELF_PARAM: u8 = 1 << 0;\n-    pub(crate) const HAS_BODY: u8 = 1 << 1;\n-    pub(crate) const IS_DEFAULT: u8 = 1 << 2;\n-    pub(crate) const IS_CONST: u8 = 1 << 3;\n-    pub(crate) const IS_ASYNC: u8 = 1 << 4;\n-    pub(crate) const IS_UNSAFE: u8 = 1 << 5;\n-    pub(crate) const IS_VARARGS: u8 = 1 << 7;\n+bitflags::bitflags! {\n+    #[derive(Default)]\n+    pub(crate) struct FnFlags: u8 {\n+        const HAS_SELF_PARAM = 1 << 0;\n+        const HAS_BODY = 1 << 1;\n+        const IS_DEFAULT = 1 << 2;\n+        const IS_CONST = 1 << 3;\n+        const IS_ASYNC = 1 << 4;\n+        const IS_UNSAFE = 1 << 5;\n+        const IS_VARARGS = 1 << 6;\n+    }\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "dd7a8a5f24bb2eb6dea5c7ca50d7acde0d7c98a3", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c71c30419c709f575fcb7d85e22d0ff1697f7b14/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71c30419c709f575fcb7d85e22d0ff1697f7b14/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c71c30419c709f575fcb7d85e22d0ff1697f7b14", "patch": "@@ -337,22 +337,22 @@ impl<'a> Ctx<'a> {\n \n         let mut flags = FnFlags::default();\n         if func.body().is_some() {\n-            flags.bits |= FnFlags::HAS_BODY;\n+            flags |= FnFlags::HAS_BODY;\n         }\n         if has_self_param {\n-            flags.bits |= FnFlags::HAS_SELF_PARAM;\n+            flags |= FnFlags::HAS_SELF_PARAM;\n         }\n         if func.default_token().is_some() {\n-            flags.bits |= FnFlags::IS_DEFAULT;\n+            flags |= FnFlags::IS_DEFAULT;\n         }\n         if func.const_token().is_some() {\n-            flags.bits |= FnFlags::IS_CONST;\n+            flags |= FnFlags::IS_CONST;\n         }\n         if func.async_token().is_some() {\n-            flags.bits |= FnFlags::IS_ASYNC;\n+            flags |= FnFlags::IS_ASYNC;\n         }\n         if func.unsafe_token().is_some() {\n-            flags.bits |= FnFlags::IS_UNSAFE;\n+            flags |= FnFlags::IS_UNSAFE;\n         }\n \n         let mut res = Function {\n@@ -559,7 +559,7 @@ impl<'a> Ctx<'a> {\n                             let func = &mut self.data().functions[func_id.index];\n                             if is_intrinsic_fn_unsafe(&func.name) {\n                                 // FIXME: this breaks in macros\n-                                func.flags.bits |= FnFlags::IS_UNSAFE;\n+                                func.flags |= FnFlags::IS_UNSAFE;\n                             }\n                             func_id.into()\n                         }"}]}