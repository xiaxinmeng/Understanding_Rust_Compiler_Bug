{"sha": "e136f93d0f996fb2f6b8c92c43fa2d9e10c43b36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMzZmOTNkMGY5OTZmYjJmNmI4YzkyYzQzZmEyZDllMTBjNDNiMzY=", "commit": {"author": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2015-04-13T21:49:39Z"}, "committer": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2015-05-06T05:26:23Z"}, "message": "std: update select internals to not use mutable transmuting", "tree": {"sha": "9da5fb7d80937c290d5940bcc3c61c4d5019379c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da5fb7d80937c290d5940bcc3c61c4d5019379c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e136f93d0f996fb2f6b8c92c43fa2d9e10c43b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e136f93d0f996fb2f6b8c92c43fa2d9e10c43b36", "html_url": "https://github.com/rust-lang/rust/commit/e136f93d0f996fb2f6b8c92c43fa2d9e10c43b36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e136f93d0f996fb2f6b8c92c43fa2d9e10c43b36/comments", "author": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d131f335579b8c080a2416a65ca703169fae560b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d131f335579b8c080a2416a65ca703169fae560b", "html_url": "https://github.com/rust-lang/rust/commit/d131f335579b8c080a2416a65ca703169fae560b"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "2d91581192c6fcf49d4af771317f5b59f8384f22", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e136f93d0f996fb2f6b8c92c43fa2d9e10c43b36/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e136f93d0f996fb2f6b8c92c43fa2d9e10c43b36/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=e136f93d0f996fb2f6b8c92c43fa2d9e10c43b36", "patch": "@@ -58,7 +58,7 @@\n \n use core::prelude::*;\n \n-use core::cell::Cell;\n+use core::cell::{Cell, UnsafeCell};\n use core::marker;\n use core::mem;\n use core::ptr;\n@@ -70,9 +70,13 @@ use sync::mpsc::blocking::{self, SignalToken};\n /// The \"receiver set\" of the select interface. This structure is used to manage\n /// a set of receivers which are being selected over.\n pub struct Select {\n+    inner: UnsafeCell<SelectInner>,\n+    next_id: Cell<usize>,\n+}\n+\n+struct SelectInner {\n     head: *mut Handle<'static, ()>,\n     tail: *mut Handle<'static, ()>,\n-    next_id: Cell<usize>,\n }\n \n impl !marker::Send for Select {}\n@@ -84,7 +88,7 @@ pub struct Handle<'rx, T:Send+'rx> {\n     /// The ID of this handle, used to compare against the return value of\n     /// `Select::wait()`\n     id: usize,\n-    selector: &'rx Select,\n+    selector: *mut SelectInner,\n     next: *mut Handle<'static, ()>,\n     prev: *mut Handle<'static, ()>,\n     added: bool,\n@@ -127,8 +131,10 @@ impl Select {\n     /// ```\n     pub fn new() -> Select {\n         Select {\n-            head: ptr::null_mut(),\n-            tail: ptr::null_mut(),\n+            inner: UnsafeCell::new(SelectInner {\n+                head: ptr::null_mut(),\n+                tail: ptr::null_mut(),\n+            }),\n             next_id: Cell::new(1),\n         }\n     }\n@@ -141,7 +147,7 @@ impl Select {\n         self.next_id.set(id + 1);\n         Handle {\n             id: id,\n-            selector: self,\n+            selector: self.inner.get(),\n             next: ptr::null_mut(),\n             prev: ptr::null_mut(),\n             added: false,\n@@ -250,7 +256,7 @@ impl Select {\n         }\n     }\n \n-    fn iter(&self) -> Packets { Packets { cur: self.head } }\n+    fn iter(&self) -> Packets { Packets { cur: unsafe { &*self.inner.get() }.head } }\n }\n \n impl<'rx, T: Send> Handle<'rx, T> {\n@@ -271,7 +277,7 @@ impl<'rx, T: Send> Handle<'rx, T> {\n     /// while it is added to the `Select` set.\n     pub unsafe fn add(&mut self) {\n         if self.added { return }\n-        let selector: &mut Select = mem::transmute(&*self.selector);\n+        let selector = &mut *self.selector;\n         let me: *mut Handle<'static, ()> = mem::transmute(&*self);\n \n         if selector.head.is_null() {\n@@ -292,7 +298,7 @@ impl<'rx, T: Send> Handle<'rx, T> {\n     pub unsafe fn remove(&mut self) {\n         if !self.added { return }\n \n-        let selector: &mut Select = mem::transmute(&*self.selector);\n+        let selector = &mut *self.selector;\n         let me: *mut Handle<'static, ()> = mem::transmute(&*self);\n \n         if self.prev.is_null() {\n@@ -317,8 +323,10 @@ impl<'rx, T: Send> Handle<'rx, T> {\n \n impl Drop for Select {\n     fn drop(&mut self) {\n-        assert!(self.head.is_null());\n-        assert!(self.tail.is_null());\n+        unsafe {\n+            assert!((&*self.inner.get()).head.is_null());\n+            assert!((&*self.inner.get()).tail.is_null());\n+        }\n     }\n }\n "}]}