{"sha": "ae646687e0032564469f2c839063bee2485e88e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNjQ2Njg3ZTAwMzI1NjQ0NjlmMmM4MzkwNjNiZWUyNDg1ZTg4ZTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-24T04:55:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-24T04:55:55Z"}, "message": "Rollup merge of #57364 - hdhoang:33418_negative_bounds, r=estebank\n\nImprove parsing diagnostic for negative supertrait bounds\n\ncloses #33418\n\nr? @estebank", "tree": {"sha": "9aee9e1d3abdec26357abd3403b585e45dbdd29d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aee9e1d3abdec26357abd3403b585e45dbdd29d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae646687e0032564469f2c839063bee2485e88e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcciPbCRBK7hj4Ov3rIwAAdHIIACAGIg1pcnq+zlMb4ecRSsS4\nUP5aoBnm1ZhnxsaD6KfnZz3sg9dGYt+FGLv4jHshkK/N4tw74ol0iMcs4kQvMms9\n8VWtywU+FXMmlSFOk53JHmxEqtCiB1EYnuBIGRCfmTyURBvIkVdEj6dHI4cm8MYc\noFBCJho2SAnTHEb5a0BDu91OnS333ClbdfxVXf7p9d4AzOm6ajtNmGdhg8EP5Uxb\nAXeU4INvbH+FGMHG7zHaAXqi9A0gsrm3LEJhgYCwdZaTx9/1FmxqVytlSfiNGgCw\nspFLGRXrlsfz29oJBOYORPMCoMmzi1kR7gqMOaK8ftiVyAgyvkMeLFqLswSQS2k=\n=A1BO\n-----END PGP SIGNATURE-----\n", "payload": "tree 9aee9e1d3abdec26357abd3403b585e45dbdd29d\nparent f573049729ca7f4a4977e48467156d7fc8b13f62\nparent 7cfddfb4e40584dc206cedef7c70b5fecb03d6a1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550984155 +0100\ncommitter GitHub <noreply@github.com> 1550984155 +0100\n\nRollup merge of #57364 - hdhoang:33418_negative_bounds, r=estebank\n\nImprove parsing diagnostic for negative supertrait bounds\n\ncloses #33418\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae646687e0032564469f2c839063bee2485e88e4", "html_url": "https://github.com/rust-lang/rust/commit/ae646687e0032564469f2c839063bee2485e88e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae646687e0032564469f2c839063bee2485e88e4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f573049729ca7f4a4977e48467156d7fc8b13f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/f573049729ca7f4a4977e48467156d7fc8b13f62", "html_url": "https://github.com/rust-lang/rust/commit/f573049729ca7f4a4977e48467156d7fc8b13f62"}, {"sha": "7cfddfb4e40584dc206cedef7c70b5fecb03d6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cfddfb4e40584dc206cedef7c70b5fecb03d6a1", "html_url": "https://github.com/rust-lang/rust/commit/7cfddfb4e40584dc206cedef7c70b5fecb03d6a1"}], "stats": {"total": 152, "additions": 131, "deletions": 21}, "files": [{"sha": "7e900dfeb1eeb1040eae25390c66c3c4fc3155da", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 59, "deletions": 21, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ae646687e0032564469f2c839063bee2485e88e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae646687e0032564469f2c839063bee2485e88e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ae646687e0032564469f2c839063bee2485e88e4", "patch": "@@ -1733,7 +1733,7 @@ impl<'a> Parser<'a> {\n             }\n         } else if self.eat_keyword(keywords::Impl) {\n             // Always parse bounds greedily for better error recovery.\n-            let bounds = self.parse_generic_bounds()?;\n+            let bounds = self.parse_generic_bounds(None)?;\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n             TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds)\n         } else if self.check_keyword(keywords::Dyn) &&\n@@ -1742,13 +1742,13 @@ impl<'a> Parser<'a> {\n                                           !can_continue_type_after_non_fn_ident(t))) {\n             self.bump(); // `dyn`\n             // Always parse bounds greedily for better error recovery.\n-            let bounds = self.parse_generic_bounds()?;\n+            let bounds = self.parse_generic_bounds(None)?;\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n             TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn)\n         } else if self.check(&token::Question) ||\n                   self.check_lifetime() && self.look_ahead(1, |t| t.is_like_plus()) {\n             // Bound list (trait object type)\n-            TyKind::TraitObject(self.parse_generic_bounds_common(allow_plus)?,\n+            TyKind::TraitObject(self.parse_generic_bounds_common(allow_plus, None)?,\n                                 TraitObjectSyntax::None)\n         } else if self.eat_lt() {\n             // Qualified path\n@@ -1794,7 +1794,7 @@ impl<'a> Parser<'a> {\n         let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n-            bounds.append(&mut self.parse_generic_bounds()?);\n+            bounds.append(&mut self.parse_generic_bounds(None)?);\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n@@ -1819,7 +1819,7 @@ impl<'a> Parser<'a> {\n         }\n \n         self.bump(); // `+`\n-        let bounds = self.parse_generic_bounds()?;\n+        let bounds = self.parse_generic_bounds(None)?;\n         let sum_span = ty.span.to(self.prev_span);\n \n         let mut err = struct_span_err!(self.sess.span_diagnostic, sum_span, E0178,\n@@ -5496,18 +5496,24 @@ impl<'a> Parser<'a> {\n     /// TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n     /// TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g., `?for<'a: 'b> m::Trait<'a>`)\n     /// ```\n-    fn parse_generic_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, GenericBounds> {\n+    fn parse_generic_bounds_common(&mut self,\n+                                   allow_plus: bool,\n+                                   colon_span: Option<Span>) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n+        let mut negative_bounds = Vec::new();\n+        let mut last_plus_span = None;\n         loop {\n             // This needs to be synchronized with `Token::can_begin_bound`.\n             let is_bound_start = self.check_path() || self.check_lifetime() ||\n+                                 self.check(&token::Not) || // used for error reporting only\n                                  self.check(&token::Question) ||\n                                  self.check_keyword(keywords::For) ||\n                                  self.check(&token::OpenDelim(token::Paren));\n             if is_bound_start {\n                 let lo = self.span;\n                 let has_parens = self.eat(&token::OpenDelim(token::Paren));\n                 let inner_lo = self.span;\n+                let is_negative = self.eat(&token::Not);\n                 let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n                 if self.token.is_lifetime() {\n                     if let Some(question_span) = question {\n@@ -5538,28 +5544,60 @@ impl<'a> Parser<'a> {\n                     if has_parens {\n                         self.expect(&token::CloseDelim(token::Paren))?;\n                     }\n-                    let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n-                    let modifier = if question.is_some() {\n-                        TraitBoundModifier::Maybe\n+                    let poly_span = lo.to(self.prev_span);\n+                    if is_negative {\n+                        negative_bounds.push(\n+                            last_plus_span.or(colon_span).unwrap()\n+                                .to(poly_span));\n                     } else {\n-                        TraitBoundModifier::None\n-                    };\n-                    bounds.push(GenericBound::Trait(poly_trait, modifier));\n+                        let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n+                        let modifier = if question.is_some() {\n+                            TraitBoundModifier::Maybe\n+                        } else {\n+                            TraitBoundModifier::None\n+                        };\n+                        bounds.push(GenericBound::Trait(poly_trait, modifier));\n+                    }\n                 }\n             } else {\n                 break\n             }\n \n             if !allow_plus || !self.eat_plus() {\n                 break\n-            }\n+            } else {\n+                last_plus_span = Some(self.prev_span);\n+            }\n+        }\n+\n+        if !negative_bounds.is_empty() {\n+            let plural = negative_bounds.len() > 1;\n+            let mut err = self.struct_span_err(negative_bounds,\n+                                               \"negative trait bounds are not supported\");\n+            let bound_list = colon_span.unwrap().to(self.prev_span);\n+            let mut new_bound_list = String::new();\n+            if !bounds.is_empty() {\n+                let mut snippets = bounds.iter().map(|bound| bound.span())\n+                    .map(|span| self.sess.source_map().span_to_snippet(span));\n+                while let Some(Ok(snippet)) = snippets.next() {\n+                    new_bound_list.push_str(\" + \");\n+                    new_bound_list.push_str(&snippet);\n+                }\n+                new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n+            }\n+            err.span_suggestion_short(bound_list,\n+                                      &format!(\"remove the trait bound{}\",\n+                                              if plural { \"s\" } else { \"\" }),\n+                                      new_bound_list,\n+                                      Applicability::MachineApplicable);\n+            err.emit();\n         }\n \n         return Ok(bounds);\n     }\n \n-    fn parse_generic_bounds(&mut self) -> PResult<'a, GenericBounds> {\n-        self.parse_generic_bounds_common(true)\n+    fn parse_generic_bounds(&mut self, colon_span: Option<Span>) -> PResult<'a, GenericBounds> {\n+        self.parse_generic_bounds_common(true, colon_span)\n     }\n \n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n@@ -5587,7 +5625,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_generic_bounds()?\n+            self.parse_generic_bounds(None)?\n         } else {\n             Vec::new()\n         };\n@@ -5619,7 +5657,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_generic_bounds()?\n+            self.parse_generic_bounds(None)?\n         } else {\n             Vec::new()\n         };\n@@ -6032,7 +6070,7 @@ impl<'a> Parser<'a> {\n                 // or with mandatory equality sign and the second type.\n                 let ty = self.parse_ty()?;\n                 if self.eat(&token::Colon) {\n-                    let bounds = self.parse_generic_bounds()?;\n+                    let bounds = self.parse_generic_bounds(None)?;\n                     where_clause.predicates.push(ast::WherePredicate::BoundPredicate(\n                         ast::WhereBoundPredicate {\n                             span: lo.to(self.prev_span),\n@@ -6546,14 +6584,14 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and supertrait bounds.\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_generic_bounds()?\n+            self.parse_generic_bounds(Some(self.prev_span))?\n         } else {\n             Vec::new()\n         };\n \n         if self.eat(&token::Eq) {\n             // it's a trait alias\n-            let bounds = self.parse_generic_bounds()?;\n+            let bounds = self.parse_generic_bounds(None)?;\n             tps.where_clause = self.parse_where_clause()?;\n             self.expect(&token::Semi)?;\n             if is_auto == IsAuto::Yes {\n@@ -7588,7 +7626,7 @@ impl<'a> Parser<'a> {\n         tps.where_clause = self.parse_where_clause()?;\n         let alias = if existential {\n             self.expect(&token::Colon)?;\n-            let bounds = self.parse_generic_bounds()?;\n+            let bounds = self.parse_generic_bounds(None)?;\n             AliasKind::Existential(bounds)\n         } else {\n             self.expect(&token::Eq)?;"}, {"sha": "df11f2d855ce0115bf16a7be7cadb88869837de1", "filename": "src/test/ui/parser/issue-33418.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae646687e0032564469f2c839063bee2485e88e4/src%2Ftest%2Fui%2Fparser%2Fissue-33418.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ae646687e0032564469f2c839063bee2485e88e4/src%2Ftest%2Fui%2Fparser%2Fissue-33418.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33418.fixed?ref=ae646687e0032564469f2c839063bee2485e88e4", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+trait Tr {} //~ ERROR negative trait bounds are not supported\n+trait Tr2: SuperA {} //~ ERROR negative trait bounds are not supported\n+trait Tr3: SuperB {} //~ ERROR negative trait bounds are not supported\n+trait Tr4: SuperB + SuperD {}\n+trait Tr5 {}\n+\n+trait SuperA {}\n+trait SuperB {}\n+trait SuperC {}\n+trait SuperD {}\n+\n+fn main() {}"}, {"sha": "5bb5f2afca377188105ed00011294633bda41c81", "filename": "src/test/ui/parser/issue-33418.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae646687e0032564469f2c839063bee2485e88e4/src%2Ftest%2Fui%2Fparser%2Fissue-33418.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae646687e0032564469f2c839063bee2485e88e4/src%2Ftest%2Fui%2Fparser%2Fissue-33418.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33418.rs?ref=ae646687e0032564469f2c839063bee2485e88e4", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+trait Tr: !SuperA {} //~ ERROR negative trait bounds are not supported\n+trait Tr2: SuperA + !SuperB {} //~ ERROR negative trait bounds are not supported\n+trait Tr3: !SuperA + SuperB {} //~ ERROR negative trait bounds are not supported\n+trait Tr4: !SuperA + SuperB //~ ERROR negative trait bounds are not supported\n+    + !SuperC + SuperD {}\n+trait Tr5: !SuperA //~ ERROR negative trait bounds are not supported\n+    + !SuperB {}\n+\n+trait SuperA {}\n+trait SuperB {}\n+trait SuperC {}\n+trait SuperD {}\n+\n+fn main() {}"}, {"sha": "bfe44588a5b0b08d858c4db271f3961c4f09fafc", "filename": "src/test/ui/parser/issue-33418.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ae646687e0032564469f2c839063bee2485e88e4/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae646687e0032564469f2c839063bee2485e88e4/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr?ref=ae646687e0032564469f2c839063bee2485e88e4", "patch": "@@ -0,0 +1,42 @@\n+error: negative trait bounds are not supported\n+  --> $DIR/issue-33418.rs:3:9\n+   |\n+LL | trait Tr: !SuperA {} //~ ERROR negative trait bounds are not supported\n+   |         ^^^^^^^^^ help: remove the trait bound\n+\n+error: negative trait bounds are not supported\n+  --> $DIR/issue-33418.rs:4:19\n+   |\n+LL | trait Tr2: SuperA + !SuperB {} //~ ERROR negative trait bounds are not supported\n+   |          ---------^^^^^^^^^\n+   |          |\n+   |          help: remove the trait bound\n+\n+error: negative trait bounds are not supported\n+  --> $DIR/issue-33418.rs:5:10\n+   |\n+LL | trait Tr3: !SuperA + SuperB {} //~ ERROR negative trait bounds are not supported\n+   |          ^^^^^^^^^---------\n+   |          |\n+   |          help: remove the trait bound\n+\n+error: negative trait bounds are not supported\n+  --> $DIR/issue-33418.rs:6:10\n+   |\n+LL |   trait Tr4: !SuperA + SuperB //~ ERROR negative trait bounds are not supported\n+   |  __________-^^^^^^^^\n+LL | |     + !SuperC + SuperD {}\n+   | |_____^^^^^^^^^________- help: remove the trait bounds\n+\n+error: negative trait bounds are not supported\n+  --> $DIR/issue-33418.rs:8:10\n+   |\n+LL |   trait Tr5: !SuperA //~ ERROR negative trait bounds are not supported\n+   |  __________-^^^^^^^^\n+LL | |     + !SuperB {}\n+   | |     ^^^^^^^^-\n+   | |_____________|\n+   |               help: remove the trait bounds\n+\n+error: aborting due to 5 previous errors\n+"}]}