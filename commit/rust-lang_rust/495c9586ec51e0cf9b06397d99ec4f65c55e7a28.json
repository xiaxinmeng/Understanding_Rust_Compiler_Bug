{"sha": "495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NWM5NTg2ZWM1MWUwY2Y5YjA2Mzk3ZDk5ZWM0ZjY1YzU1ZTdhMjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-23T21:55:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-23T21:55:51Z"}, "message": "Merge #8945\n\n8945: fix: Make expected type work in more situations r=flodiebold a=flodiebold\n\nAlso makes call info show the correct types for generic methods.\r\n\r\n![2021-05-23-182952_1134x616_scrot](https://user-images.githubusercontent.com/906069/119269023-dd5a5b00-bbf5-11eb-993a-b6e122c3b9a6.png)\r\n![2021-05-23-183117_922x696_scrot](https://user-images.githubusercontent.com/906069/119269025-dfbcb500-bbf5-11eb-983c-fc415b8428e0.png)\r\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "c18eb1b1568ab0f0251339f7995b6ea177b3285f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18eb1b1568ab0f0251339f7995b6ea177b3285f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqs9nCRBK7hj4Ov3rIwAA7m0IAGR7t2pXwQ/iN/T3xmA1C6Xu\niyG0PEPP3MiXHQ3yDcLz/THAi4srfjmDr6Z6ifDun3O9jMTLjOzSIxIVyxXGjB80\nIMsbHJkx1p/9tSc+7LIKLkJnWBoT9u+Mb+TAD5EbYZy4Bucjy3tuDxN188NwAbNZ\nyIPSwX6n3w/Q9cOVbJor+BcnXgrpdv915L2EQLQXcKw3ixaeIZSU2ENoWAoBq9zr\ng+aNit/FDy6wX9eZSSr3fSiwG6xoBItdC9mg5RyII9ayBO7oZ+pvXGjtvTmZe/Ct\nhaqnK4Nbbws/2zL987F8yKPwbCLb8I1JEsPJ98ih2WRdeMGa+iQqAaLjJq07dP0=\n=b8Cv\n-----END PGP SIGNATURE-----\n", "payload": "tree c18eb1b1568ab0f0251339f7995b6ea177b3285f\nparent a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb\nparent b8262099cc51065259daf10b4b23ff49ce74434f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621806951 +0000\ncommitter GitHub <noreply@github.com> 1621806951 +0000\n\nMerge #8945\n\n8945: fix: Make expected type work in more situations r=flodiebold a=flodiebold\n\nAlso makes call info show the correct types for generic methods.\r\n\r\n![2021-05-23-182952_1134x616_scrot](https://user-images.githubusercontent.com/906069/119269023-dd5a5b00-bbf5-11eb-993a-b6e122c3b9a6.png)\r\n![2021-05-23-183117_922x696_scrot](https://user-images.githubusercontent.com/906069/119269025-dfbcb500-bbf5-11eb-983c-fc415b8428e0.png)\r\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "html_url": "https://github.com/rust-lang/rust/commit/495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb", "html_url": "https://github.com/rust-lang/rust/commit/a2ce091fd7e149f809bdf0ee0d960d9e185ee5fb"}, {"sha": "b8262099cc51065259daf10b4b23ff49ce74434f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8262099cc51065259daf10b4b23ff49ce74434f", "html_url": "https://github.com/rust-lang/rust/commit/b8262099cc51065259daf10b4b23ff49ce74434f"}], "stats": {"total": 244, "additions": 175, "deletions": 69}, "files": [{"sha": "ca9a7f7fa0adb9daeeca25d6679ef48573689c36", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -513,9 +513,8 @@ impl Field {\n     }\n \n     /// Returns the type as in the signature of the struct (i.e., with\n-    /// placeholder types for type parameters). This is good for showing\n-    /// signature help, but not so good to actually get the type of the field\n-    /// when you actually have a variable of the struct.\n+    /// placeholder types for type parameters). Only use this in the context of\n+    /// the field definition.\n     pub fn ty(&self, db: &dyn HirDatabase) -> Type {\n         let var_id = self.parent.into();\n         let generic_def_id: GenericDefId = match self.parent {"}, {"sha": "3aa467e3ca304a5e5216f1125bc0d67f4978b5d3", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n use hir_expand::{name::AsName, ExpansionInfo};\n-use hir_ty::associated_type_shorthand_candidates;\n+use hir_ty::{associated_type_shorthand_candidates, Interner};\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n@@ -227,7 +227,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     pub fn resolve_record_field(\n         &self,\n         field: &ast::RecordExprField,\n-    ) -> Option<(Field, Option<Local>)> {\n+    ) -> Option<(Field, Option<Local>, Type)> {\n         self.imp.resolve_record_field(field)\n     }\n \n@@ -501,14 +501,12 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<FunctionId> {\n-        self.analyze(call.syntax()).resolve_method_call(self.db, call)\n+        self.analyze(call.syntax()).resolve_method_call(self.db, call).map(|(id, _)| id)\n     }\n \n     fn resolve_method_call_as_callable(&self, call: &ast::MethodCallExpr) -> Option<Callable> {\n-        // FIXME: this erases Substs, we should instead record the correct\n-        // substitution during inference and use that\n-        let func = self.resolve_method_call(call)?;\n-        let ty = hir_ty::TyBuilder::value_ty(self.db, func.into()).fill_with_unknown().build();\n+        let (func, subst) = self.analyze(call.syntax()).resolve_method_call(self.db, call)?;\n+        let ty = self.db.value_ty(func.into()).substitute(&Interner, &subst);\n         let resolver = self.analyze(call.syntax()).resolver;\n         let ty = Type::new_with_resolver(self.db, &resolver, ty)?;\n         let mut res = ty.as_callable(self.db)?;\n@@ -520,7 +518,10 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(field.syntax()).resolve_field(self.db, field)\n     }\n \n-    fn resolve_record_field(&self, field: &ast::RecordExprField) -> Option<(Field, Option<Local>)> {\n+    fn resolve_record_field(\n+        &self,\n+        field: &ast::RecordExprField,\n+    ) -> Option<(Field, Option<Local>, Type)> {\n         self.analyze(field.syntax()).resolve_record_field(self.db, field)\n     }\n "}, {"sha": "3f940124cc53c768c7ac67858b7f5c02e8b5c36b", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -143,7 +143,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         call: &ast::MethodCallExpr,\n-    ) -> Option<FunctionId> {\n+    ) -> Option<(FunctionId, Substitution)> {\n         let expr_id = self.expr_id(db, &call.clone().into())?;\n         self.infer.as_ref()?.method_resolution(expr_id)\n     }\n@@ -161,7 +161,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::RecordExprField,\n-    ) -> Option<(Field, Option<Local>)> {\n+    ) -> Option<(Field, Option<Local>, Type)> {\n         let record_expr = ast::RecordExpr::cast(field.syntax().parent().and_then(|p| p.parent())?)?;\n         let expr = ast::Expr::from(record_expr);\n         let expr_id = self.body_source_map.as_ref()?.node_expr(InFile::new(self.file_id, &expr))?;\n@@ -178,10 +178,13 @@ impl SourceAnalyzer {\n                 _ => None,\n             }\n         };\n+        let (_, subst) = self.infer.as_ref()?.type_of_expr.get(expr_id)?.as_adt()?;\n         let variant = self.infer.as_ref()?.variant_resolution_for_expr(expr_id)?;\n         let variant_data = variant.variant_data(db.upcast());\n         let field = FieldId { parent: variant, local_id: variant_data.field(&local_name)? };\n-        Some((field.into(), local))\n+        let field_ty =\n+            db.field_types(variant).get(field.local_id)?.clone().substitute(&Interner, subst);\n+        Some((field.into(), local, Type::new_with_resolver(db, &self.resolver, field_ty)?))\n     }\n \n     pub(crate) fn resolve_record_pat_field("}, {"sha": "70001cac86668e57071d2ef66744cbc5fda18f40", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -485,6 +485,14 @@ impl VariantId {\n             VariantId::UnionId(it) => it.lookup(db).id.file_id(),\n         }\n     }\n+\n+    pub fn adt_id(self) -> AdtId {\n+        match self {\n+            VariantId::EnumVariantId(it) => it.parent.into(),\n+            VariantId::StructId(it) => it.into(),\n+            VariantId::UnionId(it) => it.into(),\n+        }\n+    }\n }\n \n trait Intern {"}, {"sha": "d1f113e7ff9789f2dec08e4b5b1d306f8f3ddfd7", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         for (id, expr) in body.exprs.iter() {\n             if let Expr::MethodCall { receiver, .. } = expr {\n                 let function_id = match self.infer.method_resolution(id) {\n-                    Some(id) => id,\n+                    Some((id, _)) => id,\n                     None => continue,\n                 };\n \n@@ -239,15 +239,11 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                     return;\n                 }\n \n-                // FIXME: note that we erase information about substs here. This\n-                // is not right, but, luckily, doesn't matter as we care only\n-                // about the number of params\n-                let callee = match self.infer.method_resolution(call_id) {\n-                    Some(callee) => callee,\n+                let (callee, subst) = match self.infer.method_resolution(call_id) {\n+                    Some(it) => it,\n                     None => return,\n                 };\n-                let sig =\n-                    db.callable_item_signature(callee.into()).into_value_and_skipped_binders().0;\n+                let sig = db.callable_item_signature(callee.into()).substitute(&Interner, &subst);\n \n                 (sig, args)\n             }"}, {"sha": "5d13bddea3598e3720018347568e4cb95d8f4dfe", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -105,7 +105,7 @@ fn walk_unsafe(\n         Expr::MethodCall { .. } => {\n             if infer\n                 .method_resolution(current)\n-                .map(|func| db.function_data(func).is_unsafe())\n+                .map(|(func, _)| db.function_data(func).is_unsafe())\n                 .unwrap_or(false)\n             {\n                 unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });"}, {"sha": "db3c937ff5e780f576a6d59d119b7e73397cc82a", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -37,8 +37,8 @@ use syntax::SmolStr;\n use super::{DomainGoal, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty};\n use crate::{\n     db::HirDatabase, fold_tys, infer::diagnostics::InferenceDiagnostic,\n-    lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy, Goal, Interner, TyBuilder,\n-    TyExt, TyKind,\n+    lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy, Goal, Interner, Substitution,\n+    TyBuilder, TyExt, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details.\n@@ -132,7 +132,7 @@ impl Default for InternedStandardTypes {\n #[derive(Clone, PartialEq, Eq, Debug, Default)]\n pub struct InferenceResult {\n     /// For each method call expr, records the function it resolves to.\n-    method_resolutions: FxHashMap<ExprId, FunctionId>,\n+    method_resolutions: FxHashMap<ExprId, (FunctionId, Substitution)>,\n     /// For each field access expr, records the field it resolves to.\n     field_resolutions: FxHashMap<ExprId, FieldId>,\n     /// For each struct literal or pattern, records the variant it resolves to.\n@@ -152,8 +152,8 @@ pub struct InferenceResult {\n }\n \n impl InferenceResult {\n-    pub fn method_resolution(&self, expr: ExprId) -> Option<FunctionId> {\n-        self.method_resolutions.get(&expr).copied()\n+    pub fn method_resolution(&self, expr: ExprId) -> Option<(FunctionId, Substitution)> {\n+        self.method_resolutions.get(&expr).cloned()\n     }\n     pub fn field_resolution(&self, expr: ExprId) -> Option<FieldId> {\n         self.field_resolutions.get(&expr).copied()\n@@ -284,14 +284,17 @@ impl<'a> InferenceContext<'a> {\n         self.table.propagate_diverging_flag();\n         let mut result = std::mem::take(&mut self.result);\n         for ty in result.type_of_expr.values_mut() {\n-            *ty = self.table.resolve_ty_completely(ty.clone());\n+            *ty = self.table.resolve_completely(ty.clone());\n         }\n         for ty in result.type_of_pat.values_mut() {\n-            *ty = self.table.resolve_ty_completely(ty.clone());\n+            *ty = self.table.resolve_completely(ty.clone());\n         }\n         for mismatch in result.type_mismatches.values_mut() {\n-            mismatch.expected = self.table.resolve_ty_completely(mismatch.expected.clone());\n-            mismatch.actual = self.table.resolve_ty_completely(mismatch.actual.clone());\n+            mismatch.expected = self.table.resolve_completely(mismatch.expected.clone());\n+            mismatch.actual = self.table.resolve_completely(mismatch.actual.clone());\n+        }\n+        for (_, subst) in result.method_resolutions.values_mut() {\n+            *subst = self.table.resolve_completely(subst.clone());\n         }\n         result\n     }\n@@ -300,8 +303,8 @@ impl<'a> InferenceContext<'a> {\n         self.result.type_of_expr.insert(expr, ty);\n     }\n \n-    fn write_method_resolution(&mut self, expr: ExprId, func: FunctionId) {\n-        self.result.method_resolutions.insert(expr, func);\n+    fn write_method_resolution(&mut self, expr: ExprId, func: FunctionId, subst: Substitution) {\n+        self.result.method_resolutions.insert(expr, (func, subst));\n     }\n \n     fn write_field_resolution(&mut self, expr: ExprId, field: FieldId) {"}, {"sha": "eab8fac910ed42505279b3d6b55ce7fcbff017ed", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -891,17 +891,21 @@ impl<'a> InferenceContext<'a> {\n                 method_name,\n             )\n         });\n-        let (derefed_receiver_ty, method_ty, def_generics) = match resolved {\n+        let (derefed_receiver_ty, method_ty, substs) = match resolved {\n             Some((ty, func)) => {\n                 let ty = canonicalized_receiver.decanonicalize_ty(ty);\n-                self.write_method_resolution(tgt_expr, func);\n-                (ty, self.db.value_ty(func.into()), Some(generics(self.db.upcast(), func.into())))\n+                let generics = generics(self.db.upcast(), func.into());\n+                let substs = self.substs_for_method_call(generics, generic_args, &ty);\n+                self.write_method_resolution(tgt_expr, func, substs.clone());\n+                (ty, self.db.value_ty(func.into()), substs)\n             }\n-            None => (receiver_ty, Binders::empty(&Interner, self.err_ty()), None),\n+            None => (\n+                receiver_ty,\n+                Binders::empty(&Interner, self.err_ty()),\n+                Substitution::empty(&Interner),\n+            ),\n         };\n-        let substs = self.substs_for_method_call(def_generics, generic_args, &derefed_receiver_ty);\n         let method_ty = method_ty.substitute(&Interner, &substs);\n-        let method_ty = self.insert_type_vars(method_ty);\n         self.register_obligations_for_call(&method_ty);\n         let (expected_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {\n             Some(sig) => {\n@@ -950,23 +954,21 @@ impl<'a> InferenceContext<'a> {\n \n     fn substs_for_method_call(\n         &mut self,\n-        def_generics: Option<Generics>,\n+        def_generics: Generics,\n         generic_args: Option<&GenericArgs>,\n         receiver_ty: &Ty,\n     ) -> Substitution {\n         let (parent_params, self_params, type_params, impl_trait_params) =\n-            def_generics.as_ref().map_or((0, 0, 0, 0), |g| g.provenance_split());\n+            def_generics.provenance_split();\n         assert_eq!(self_params, 0); // method shouldn't have another Self param\n         let total_len = parent_params + type_params + impl_trait_params;\n         let mut substs = Vec::with_capacity(total_len);\n         // Parent arguments are unknown, except for the receiver type\n-        if let Some(parent_generics) = def_generics.as_ref().map(|p| p.iter_parent()) {\n-            for (_id, param) in parent_generics {\n-                if param.provenance == hir_def::generics::TypeParamProvenance::TraitSelf {\n-                    substs.push(receiver_ty.clone());\n-                } else {\n-                    substs.push(self.err_ty());\n-                }\n+        for (_id, param) in def_generics.iter_parent() {\n+            if param.provenance == hir_def::generics::TypeParamProvenance::TraitSelf {\n+                substs.push(receiver_ty.clone());\n+            } else {\n+                substs.push(self.table.new_type_var());\n             }\n         }\n         // handle provided type arguments\n@@ -989,7 +991,7 @@ impl<'a> InferenceContext<'a> {\n         };\n         let supplied_params = substs.len();\n         for _ in supplied_params..total_len {\n-            substs.push(self.err_ty());\n+            substs.push(self.table.new_type_var());\n         }\n         assert_eq!(substs.len(), total_len);\n         Substitution::from_iter(&Interner, substs)"}, {"sha": "ea5684229f0840e68312ed7ed9bb20a01afc92e5", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -295,8 +295,11 @@ impl<'a> InferenceTable<'a> {\n         .expect(\"fold failed unexpectedly\")\n     }\n \n-    pub(crate) fn resolve_ty_completely(&mut self, ty: Ty) -> Ty {\n-        self.resolve_with_fallback(ty, |_, _, d, _| d)\n+    pub(crate) fn resolve_completely<T>(&mut self, t: T) -> T::Result\n+    where\n+        T: HasInterner<Interner = Interner> + Fold<Interner>,\n+    {\n+        self.resolve_with_fallback(t, |_, _, d, _| d)\n     }\n \n     /// Unify two types and register new trait goals that arise from that."}, {"sha": "89f7b2c2c37975d063d550f7cf677a0f63972c7f", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -85,7 +85,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n \n fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let record_field: ast::RecordExprField = ctx.find_node_at_offset()?;\n-    let (record_field_def, _) = ctx.sema.resolve_record_field(&record_field)?;\n+    let (record_field_def, _, _) = ctx.sema.resolve_record_field(&record_field)?;\n \n     let current_module = ctx.sema.scope(record_field.syntax()).module()?;\n     let visibility = record_field_def.visibility(ctx.db());"}, {"sha": "1ec59ff804d602f2f17e7f275e3bc87ed118e723", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 81, "deletions": 15, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -337,25 +337,24 @@ impl<'a> CompletionContext<'a> {\n                     },\n                     ast::RecordExprFieldList(_it) => {\n                         cov_mark::hit!(expected_type_struct_field_without_leading_char);\n-                        self.token.prev_sibling_or_token()\n-                            .and_then(|se| se.into_node())\n-                            .and_then(|node| ast::RecordExprField::cast(node))\n-                            .and_then(|rf| self.sema.resolve_record_field(&rf).zip(Some(rf)))\n-                            .map(|(f, rf)|(\n-                                Some(f.0.ty(self.db)),\n-                                rf.field_name().map(NameOrNameRef::NameRef),\n+                        // wouldn't try {} be nice...\n+                        (|| {\n+                            let expr_field = self.token.prev_sibling_or_token()?\n+                                      .into_node()\n+                                      .and_then(|node| ast::RecordExprField::cast(node))?;\n+                            let (_, _, ty) = self.sema.resolve_record_field(&expr_field)?;\n+                            Some((\n+                                Some(ty),\n+                                expr_field.field_name().map(NameOrNameRef::NameRef),\n                             ))\n-                            .unwrap_or((None, None))\n+                        })().unwrap_or((None, None))\n                     },\n                     ast::RecordExprField(it) => {\n                         cov_mark::hit!(expected_type_struct_field_with_leading_char);\n-                        self.sema\n-                            .resolve_record_field(&it)\n-                            .map(|f|(\n-                                Some(f.0.ty(self.db)),\n-                                it.field_name().map(NameOrNameRef::NameRef),\n-                            ))\n-                            .unwrap_or((None, None))\n+                        (\n+                            it.expr().as_ref().and_then(|e| self.sema.type_of_expr(e)),\n+                            it.field_name().map(NameOrNameRef::NameRef),\n+                        )\n                     },\n                     ast::MatchExpr(it) => {\n                         cov_mark::hit!(expected_type_match_arm_without_leading_char);\n@@ -382,6 +381,12 @@ impl<'a> CompletionContext<'a> {\n                         let def = self.sema.to_def(&it);\n                         (def.map(|def| def.ret_type(self.db)), None)\n                     },\n+                    ast::ClosureExpr(it) => {\n+                        let ty = self.sema.type_of_expr(&it.into());\n+                        ty.and_then(|ty| ty.as_callable(self.db))\n+                            .map(|c| (Some(c.return_type()), None))\n+                            .unwrap_or((None, None))\n+                    },\n                     ast::Stmt(_it) => (None, None),\n                     _ => {\n                         match node.parent() {\n@@ -784,6 +789,19 @@ fn foo() {\n         )\n     }\n \n+    #[test]\n+    fn expected_type_generic_struct_field() {\n+        check_expected_type_and_name(\n+            r#\"\n+struct Foo<T> { a: T }\n+fn foo() -> Foo<u32> {\n+    Foo { a: $0 }\n+}\n+\"#,\n+            expect![[r#\"ty: u32, name: a\"#]],\n+        )\n+    }\n+\n     #[test]\n     fn expected_type_struct_field_with_leading_char() {\n         cov_mark::check!(expected_type_struct_field_with_leading_char);\n@@ -895,4 +913,52 @@ fn foo() -> u32 {\n             expect![[r#\"ty: u32, name: ?\"#]],\n         )\n     }\n+\n+    #[test]\n+    fn expected_type_closure_param_return() {\n+        // FIXME: make this work with `|| $0`\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() {\n+    bar(|| a$0);\n+}\n+\n+fn bar(f: impl FnOnce() -> u32) {}\n+#[lang = \"fn_once\"]\n+trait FnOnce { type Output; }\n+\"#,\n+            expect![[r#\"ty: u32, name: ?\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn expected_type_generic_function() {\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() {\n+    bar::<u32>($0);\n+}\n+\n+fn bar<T>(t: T) {}\n+\"#,\n+            expect![[r#\"ty: u32, name: t\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn expected_type_generic_method() {\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() {\n+    S(1u32).bar($0);\n+}\n+\n+struct S<T>(T);\n+impl<T> S<T> {\n+    fn bar(self, t: T) {}\n+}\n+\"#,\n+            expect![[r#\"ty: u32, name: t\"#]],\n+        );\n+    }\n }"}, {"sha": "d7f96b8645bfe5ff5e6e84bac32feab749bbea03", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -667,6 +667,13 @@ fn foo() { A { the$0 } }\n                         ),\n                         detail: \"u32\",\n                         deprecated: true,\n+                        relevance: CompletionRelevance {\n+                            exact_name_match: false,\n+                            type_match: Some(\n+                                CouldUnify,\n+                            ),\n+                            is_local: false,\n+                        },\n                     },\n                 ]\n             \"#]],"}, {"sha": "1aeda08e5f58c5806489b774cc0ab669ca9eb7d3", "filename": "crates/ide_db/src/call_info/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -188,6 +188,24 @@ fn main() { S.foo($0); }\n     );\n }\n \n+#[test]\n+fn test_fn_signature_for_generic_method() {\n+    check(\n+        r#\"\n+struct S<T>(T);\n+impl<T> S<T> {\n+    fn foo(&self, x: T) {}\n+}\n+\n+fn main() { S(1u32).foo($0); }\n+\"#,\n+        expect![[r#\"\n+                fn foo(&self, x: u32)\n+                (<x: u32>)\n+            \"#]],\n+    );\n+}\n+\n #[test]\n fn test_fn_signature_for_method_with_arg_as_assoc_fn() {\n     check("}, {"sha": "1dcccbb8be7cb436e06fe5e6fa2fb3c79159ec30", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495c9586ec51e0cf9b06397d99ec4f65c55e7a28/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=495c9586ec51e0cf9b06397d99ec4f65c55e7a28", "patch": "@@ -311,7 +311,7 @@ impl NameRefClass {\n         }\n \n         if let Some(record_field) = ast::RecordExprField::for_field_name(name_ref) {\n-            if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n+            if let Some((field, local, _)) = sema.resolve_record_field(&record_field) {\n                 let field = Definition::Field(field);\n                 let res = match local {\n                     None => NameRefClass::Definition(field),"}]}