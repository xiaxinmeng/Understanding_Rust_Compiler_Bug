{"sha": "d0648494e61b1ab277697ff4cc799f98f516a07d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjQ4NDk0ZTYxYjFhYjI3NzY5N2ZmNGNjNzk5Zjk4ZjUxNmEwN2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-09T13:16:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-09T13:16:43Z"}, "message": "Merge #9823\n\n9823: fix: avoid pathological macro expansions  r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5e854c8c367f3539dbd0c0d2c97c0861e657374e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e854c8c367f3539dbd0c0d2c97c0861e657374e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0648494e61b1ab277697ff4cc799f98f516a07d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhESq7CRBK7hj4Ov3rIwAAyHAIAC5vaTXVGmFgCIfZtuFx6niQ\nrCoLIVIYMO4QRmy0eetSH6T7D9o8DUFfhNmffewWQy0lv/A+tcZ3FWpY56Y/qI1X\nfDhh7oXJvUBG8vJ482OPDwbNStDEn+PjAHl02zc+ookkBz0ljAlbA3w9wEhcWjuj\ncZYaL4c84E2MxXAV9u/7Au7C5Hc//31ARLwGXnK9R/nn8C34hKt3wVvsghYogel3\nc78Jc01NpX9jY/fNG7hlTTcfxDgULeNHXW5vOMgMXIzYZRJefWm8EaqqkY0o30VK\ns/rxmwC6WhfZpfMdqfOLVDTPxTLjkaR40OV+oKvnvFQE/juVVQD3ftBkC3EkKyM=\n=0xBw\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e854c8c367f3539dbd0c0d2c97c0861e657374e\nparent 977fef713e7ca109a76ba018387e618d8faafddc\nparent 3e5b15571632467f203c3f93d0b56f41d0fb64f5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628515003 +0000\ncommitter GitHub <noreply@github.com> 1628515003 +0000\n\nMerge #9823\n\n9823: fix: avoid pathological macro expansions  r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0648494e61b1ab277697ff4cc799f98f516a07d", "html_url": "https://github.com/rust-lang/rust/commit/d0648494e61b1ab277697ff4cc799f98f516a07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0648494e61b1ab277697ff4cc799f98f516a07d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977fef713e7ca109a76ba018387e618d8faafddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/977fef713e7ca109a76ba018387e618d8faafddc", "html_url": "https://github.com/rust-lang/rust/commit/977fef713e7ca109a76ba018387e618d8faafddc"}, {"sha": "3e5b15571632467f203c3f93d0b56f41d0fb64f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5b15571632467f203c3f93d0b56f41d0fb64f5", "html_url": "https://github.com/rust-lang/rust/commit/3e5b15571632467f203c3f93d0b56f41d0fb64f5"}], "stats": {"total": 133, "additions": 73, "deletions": 60}, "files": [{"sha": "61180fcb9a89162ad1ef9470d6560e080e62e9ab", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -508,6 +508,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"base_db\",\n  \"cfg\",\n+ \"cov-mark\",\n  \"either\",\n  \"expect-test\",\n  \"la-arena\","}, {"sha": "ea04114d3a3b6318d2d3236ff7e7a890daa260a7", "filename": "crates/cfg/src/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fcfg%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fcfg%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Ftests.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -1,5 +1,5 @@\n use expect_test::{expect, Expect};\n-use mbe::ast_to_token_tree;\n+use mbe::syntax_node_to_token_tree;\n use syntax::{ast, AstNode};\n \n use crate::{CfgAtom, CfgExpr, CfgOptions, DnfExpr};\n@@ -8,7 +8,7 @@ fn assert_parse_result(input: &str, expected: CfgExpr) {\n     let (tt, _) = {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        ast_to_token_tree(&tt)\n+        syntax_node_to_token_tree(tt.syntax())\n     };\n     let cfg = CfgExpr::parse(&tt);\n     assert_eq!(cfg, expected);\n@@ -18,7 +18,7 @@ fn check_dnf(input: &str, expect: Expect) {\n     let (tt, _) = {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        ast_to_token_tree(&tt)\n+        syntax_node_to_token_tree(tt.syntax())\n     };\n     let cfg = CfgExpr::parse(&tt);\n     let actual = format!(\"#![cfg({})]\", DnfExpr::new(cfg));\n@@ -29,7 +29,7 @@ fn check_why_inactive(input: &str, opts: &CfgOptions, expect: Expect) {\n     let (tt, _) = {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        ast_to_token_tree(&tt)\n+        syntax_node_to_token_tree(tt.syntax())\n     };\n     let cfg = CfgExpr::parse(&tt);\n     let dnf = DnfExpr::new(cfg);\n@@ -42,7 +42,7 @@ fn check_enable_hints(input: &str, opts: &CfgOptions, expected_hints: &[&str]) {\n     let (tt, _) = {\n         let source_file = ast::SourceFile::parse(input).ok().unwrap();\n         let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        ast_to_token_tree(&tt)\n+        syntax_node_to_token_tree(tt.syntax())\n     };\n     let cfg = CfgExpr::parse(&tt);\n     let dnf = DnfExpr::new(cfg);"}, {"sha": "b2f8e4d20d90c1556a109acec253ee340a187808", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -12,7 +12,7 @@ use either::Either;\n use hir_expand::{hygiene::Hygiene, name::AsName, AstId, InFile};\n use itertools::Itertools;\n use la_arena::ArenaMap;\n-use mbe::{ast_to_token_tree, DelimiterKind};\n+use mbe::{syntax_node_to_token_tree, DelimiterKind};\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n@@ -679,7 +679,7 @@ impl Attr {\n             };\n             Some(Interned::new(AttrInput::Literal(value)))\n         } else if let Some(tt) = ast.token_tree() {\n-            Some(Interned::new(AttrInput::TokenTree(ast_to_token_tree(&tt).0)))\n+            Some(Interned::new(AttrInput::TokenTree(syntax_node_to_token_tree(tt.syntax()).0)))\n         } else {\n             None\n         };"}, {"sha": "763dff5a2142ce17f4b8ffea9e849d8b08b39f41", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -1,4 +1,5 @@\n use super::*;\n+\n use crate::nameres::proc_macro::{ProcMacroDef, ProcMacroKind};\n \n #[test]\n@@ -1021,3 +1022,20 @@ pub mod prelude {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn issue9358_bad_macro_stack_overflow() {\n+    cov_mark::check!(issue9358_bad_macro_stack_overflow);\n+    check(\n+        r#\"\n+macro_rules! m {\n+  ($cond:expr) => { m!($cond, stringify!($cond)) };\n+  ($cond:expr, $($arg:tt)*) => { $cond };\n+}\n+m!(\n+\"#,\n+        expect![[r#\"\n+            crate\n+        \"#]],\n+    )\n+}"}, {"sha": "4645970266cc8f10b16ee5ae2962654cbde50e4a", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -9,6 +9,7 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n+cov-mark = \"2.0.0-pre.1\"\n log = \"0.4.8\"\n either = \"1.5.3\"\n rustc-hash = \"1.0.0\""}, {"sha": "c9149f27a9979e5035e31121dfa9b28c69e46d56", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -610,7 +610,7 @@ mod tests {\n \n                 let fragment = crate::to_fragment_kind(&macro_call);\n                 let args = macro_call.token_tree().unwrap();\n-                let parsed_args = mbe::ast_to_token_tree(&args).0;\n+                let parsed_args = mbe::syntax_node_to_token_tree(args.syntax()).0;\n                 let call_id = AstId::new(file_id.into(), ast_id_map.ast_id(&macro_call));\n \n                 let arg_id = db.intern_macro(MacroCallLoc {"}, {"sha": "a9bf6db476f3f92ea57313a6bd33d9931e9d3594", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use base_db::{salsa, SourceDatabase};\n use limit::Limit;\n use mbe::{ExpandError, ExpandResult};\n-use parser::FragmentKind;\n+use parser::{FragmentKind, T};\n use syntax::{\n     algo::diff,\n     ast::{self, NameOwner},\n@@ -273,6 +273,23 @@ fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     let loc = db.lookup_intern_macro(id);\n     let arg = loc.kind.arg(db)?;\n     let arg = process_macro_input(db, arg, id);\n+    if matches!(loc.kind, MacroCallKind::FnLike { .. }) {\n+        let first = arg.first_child_or_token().map_or(T![.], |it| it.kind());\n+        let last = arg.last_child_or_token().map_or(T![.], |it| it.kind());\n+        let well_formed_tt =\n+            matches!((first, last), (T!['('], T![')']) | (T!['['], T![']']) | (T!['{'], T!['}']));\n+        if !well_formed_tt {\n+            // Don't expand malformed (unbalanced) macro invocations. This is\n+            // less than ideal, but trying to expand unbalanced  macro calls\n+            // sometimes produces pathological, deeply nested code which breaks\n+            // all kinds of things.\n+            //\n+            // Some day, we'll have explicit recursion counters for all\n+            // recursive things, at which point this code might be removed.\n+            cov_mark::hit!(issue9358_bad_macro_stack_overflow);\n+            return None;\n+        }\n+    }\n     Some(arg.green().into())\n }\n \n@@ -281,7 +298,7 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<TokenExpander>>\n         MacroDefKind::Declarative(ast_id) => match ast_id.to_node(db) {\n             ast::Macro::MacroRules(macro_rules) => {\n                 let arg = macro_rules.token_tree()?;\n-                let (tt, def_site_token_map) = mbe::ast_to_token_tree(&arg);\n+                let (tt, def_site_token_map) = mbe::syntax_node_to_token_tree(arg.syntax());\n                 let mac = match mbe::MacroRules::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n@@ -294,7 +311,7 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<TokenExpander>>\n             }\n             ast::Macro::MacroDef(macro_def) => {\n                 let arg = macro_def.body()?;\n-                let (tt, def_site_token_map) = mbe::ast_to_token_tree(&arg);\n+                let (tt, def_site_token_map) = mbe::syntax_node_to_token_tree(arg.syntax());\n                 let mac = match mbe::MacroDef::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {"}, {"sha": "052f1bf20e5d32865890870ef5e24d7074399586", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -107,7 +107,7 @@ pub fn expand_eager_macro(\n     mut diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<MacroCallId, ErrorEmitted> {\n     let parsed_args = diagnostic_sink.option_with(\n-        || Some(mbe::ast_to_token_tree(&macro_call.value.token_tree()?).0),\n+        || Some(mbe::syntax_node_to_token_tree(&macro_call.value.token_tree()?.syntax()).0),\n         || err(\"malformed macro invocation\"),\n     )?;\n "}, {"sha": "9a42dd7b2751415b11d7aaadaf90ee16b7e31d61", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -308,27 +308,7 @@ fn quux(x: i32) {\n     m!(x$0\n }\n \"#,\n-        expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw return\n-            kw self\n-            kw super\n-            kw crate\n-            lc y         i32\n-            bt u32\n-            lc x         i32\n-            fn quux(\u2026)   fn(i32)\n-            ma m!(\u2026)     macro_rules! m\n-        \"#]],\n+        expect![[r#\"\"#]],\n     );\n }\n "}, {"sha": "0b0c1111c4663c33a35c18a1c289b5e1eb15916d", "filename": "crates/ide_ssr/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ftests.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -921,13 +921,13 @@ fn preserves_whitespace_within_macro_expansion() {\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(1   *   2 + 3 + 4}\n+            fn f() {macro1!(1   *   2 + 3 + 4)}\n             \"#,\n         expect![[r#\"\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(4 - (3 - 1   *   2)}\n+            fn f() {macro1!(4 - (3 - 1   *   2))}\n             \"#]],\n     )\n }"}, {"sha": "ffa316dd24c1128fe0effc7093be313eec2a1d57", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -8,9 +8,8 @@ use syntax::{\n use test_utils::{bench, bench_fixture, skip_slow_tests};\n \n use crate::{\n-    ast_to_token_tree,\n     parser::{Op, RepeatKind, Separator},\n-    MacroRules,\n+    syntax_node_to_token_tree, MacroRules,\n };\n \n #[test]\n@@ -65,7 +64,7 @@ fn macro_rules_fixtures_tt() -> FxHashMap<String, tt::Subtree> {\n         .filter_map(ast::MacroRules::cast)\n         .map(|rule| {\n             let id = rule.name().unwrap().to_string();\n-            let (def_tt, _) = ast_to_token_tree(&rule.token_tree().unwrap());\n+            let (def_tt, _) = syntax_node_to_token_tree(rule.token_tree().unwrap().syntax());\n             (id, def_tt)\n         })\n         .collect()"}, {"sha": "e9ef8ccecde2081dbe6f48cb7b5bc45f874871ac", "filename": "crates/mbe/src/expander.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Fexpander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Fexpander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -120,7 +120,7 @@ mod tests {\n     use syntax::{ast, AstNode};\n \n     use super::*;\n-    use crate::ast_to_token_tree;\n+    use crate::syntax_node_to_token_tree;\n \n     #[test]\n     fn test_expand_rule() {\n@@ -159,7 +159,8 @@ mod tests {\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n-        let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap());\n+        let (definition_tt, _) =\n+            syntax_node_to_token_tree(macro_definition.token_tree().unwrap().syntax());\n         crate::MacroRules::parse(&definition_tt).unwrap()\n     }\n \n@@ -168,7 +169,8 @@ mod tests {\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let (invocation_tt, _) = ast_to_token_tree(&macro_invocation.token_tree().unwrap());\n+        let (invocation_tt, _) =\n+            syntax_node_to_token_tree(macro_invocation.token_tree().unwrap().syntax());\n \n         expand_rules(&rules.rules, &invocation_tt)\n     }"}, {"sha": "e0bbb825b93bf731ada321101d9b4224092c9fb8", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -66,7 +66,7 @@ impl fmt::Display for ExpandError {\n \n pub use crate::{\n     syntax_bridge::{\n-        ast_to_token_tree, parse_exprs_with_sep, parse_to_token_tree, syntax_node_to_token_tree,\n+        parse_exprs_with_sep, parse_to_token_tree, syntax_node_to_token_tree,\n         token_tree_to_syntax_node,\n     },\n     token_map::TokenMap,"}, {"sha": "2aaa440a7124529bf19d4bbd3e59e48cbbea1a56", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -13,12 +13,6 @@ use tt::buffer::{Cursor, TokenBuffer};\n use crate::{subtree_source::SubtreeTokenSource, tt_iter::TtIter};\n use crate::{ExpandError, TokenMap};\n \n-/// Convert the syntax tree (what user has written) to a `TokenTree` (what macro\n-/// will consume).\n-pub fn ast_to_token_tree(ast: &impl ast::AstNode) -> (tt::Subtree, TokenMap) {\n-    syntax_node_to_token_tree(ast.syntax())\n-}\n-\n /// Convert the syntax node to a `TokenTree` (what macro\n /// will consume).\n pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> (tt::Subtree, TokenMap) {\n@@ -812,7 +806,7 @@ mod tests {\n         // - T!['}']\n         // - WHITE_SPACE\n         let token_tree = ast::TokenTree::cast(token_tree).unwrap();\n-        let tt = ast_to_token_tree(&token_tree).0;\n+        let tt = syntax_node_to_token_tree(token_tree.syntax()).0;\n \n         assert_eq!(tt.delimiter_kind(), Some(tt::DelimiterKind::Brace));\n     }\n@@ -821,15 +815,15 @@ mod tests {\n     fn test_token_tree_multi_char_punct() {\n         let source_file = ast::SourceFile::parse(\"struct Foo { a: x::Y }\").ok().unwrap();\n         let struct_def = source_file.syntax().descendants().find_map(ast::Struct::cast).unwrap();\n-        let tt = ast_to_token_tree(&struct_def).0;\n+        let tt = syntax_node_to_token_tree(struct_def.syntax()).0;\n         token_tree_to_syntax_node(&tt, FragmentKind::Item).unwrap();\n     }\n \n     #[test]\n     fn test_missing_closing_delim() {\n         let source_file = ast::SourceFile::parse(\"m!(x\").tree();\n         let node = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-        let tt = ast_to_token_tree(&node).0.to_string();\n+        let tt = syntax_node_to_token_tree(node.syntax()).0.to_string();\n         assert_eq_text!(&*tt, \"( x\");\n     }\n }"}, {"sha": "705cf5a2b16acaf6a68c971130ee82f7d409a488", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -29,7 +29,8 @@ macro_rules! impl_fixture {\n                 let macro_invocation =\n                     source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-                let (invocation_tt, _) = ast_to_token_tree(&macro_invocation.token_tree().unwrap());\n+                let (invocation_tt, _) =\n+                    syntax_node_to_token_tree(macro_invocation.token_tree().unwrap().syntax());\n \n                 self.rules.expand(&invocation_tt).result()\n             }\n@@ -100,7 +101,7 @@ macro_rules! impl_fixture {\n                         .descendants()\n                         .find_map(ast::TokenTree::cast)\n                         .unwrap();\n-                    let mut wrapped = ast_to_token_tree(&wrapped).0;\n+                    let mut wrapped = syntax_node_to_token_tree(wrapped.syntax()).0;\n                     wrapped.delimiter = None;\n                     wrapped\n                 };\n@@ -163,7 +164,8 @@ fn parse_macro_rules_to_tt(ra_fixture: &str) -> tt::Subtree {\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n-    let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap());\n+    let (definition_tt, _) =\n+        syntax_node_to_token_tree(macro_definition.token_tree().unwrap().syntax());\n \n     let parsed = parse_to_token_tree(\n         &ra_fixture[macro_definition.token_tree().unwrap().syntax().text_range()],\n@@ -180,7 +182,7 @@ fn parse_macro_def_to_tt(ra_fixture: &str) -> tt::Subtree {\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroDef::cast).unwrap();\n \n-    let (definition_tt, _) = ast_to_token_tree(&macro_definition.body().unwrap());\n+    let (definition_tt, _) = syntax_node_to_token_tree(macro_definition.body().unwrap().syntax());\n \n     let parsed =\n         parse_to_token_tree(&ra_fixture[macro_definition.body().unwrap().syntax().text_range()])"}, {"sha": "691e359e4d7a02060d75bd0bfde0521533e169cd", "filename": "crates/mbe/src/tests/rule.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Frule.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -1,7 +1,5 @@\n use syntax::{ast, AstNode};\n \n-use crate::ast_to_token_tree;\n-\n use super::*;\n \n #[test]\n@@ -44,6 +42,7 @@ fn parse_macro_arm(arm_definition: &str) -> Result<crate::MacroRules, ParseError\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n-    let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap());\n+    let (definition_tt, _) =\n+        syntax_node_to_token_tree(macro_definition.token_tree().unwrap().syntax());\n     crate::MacroRules::parse(&definition_tt)\n }"}, {"sha": "a8894e0f022c0f33ed353de3ac36f579b7f061f4", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0648494e61b1ab277697ff4cc799f98f516a07d/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=d0648494e61b1ab277697ff4cc799f98f516a07d", "patch": "@@ -191,7 +191,7 @@ mod tests {\n     use super::*;\n \n     use cfg::CfgExpr;\n-    use mbe::ast_to_token_tree;\n+    use mbe::syntax_node_to_token_tree;\n     use syntax::{\n         ast::{self, AstNode},\n         SmolStr,\n@@ -201,7 +201,7 @@ mod tests {\n         let cfg_expr = {\n             let source_file = ast::SourceFile::parse(cfg).ok().unwrap();\n             let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-            let (tt, _) = ast_to_token_tree(&tt);\n+            let (tt, _) = syntax_node_to_token_tree(tt.syntax());\n             CfgExpr::parse(&tt)\n         };\n "}]}