{"sha": "48d351b21e72112059b705f6ba7ad9b09afa1819", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZDM1MWIyMWU3MjExMjA1OWI3MDVmNmJhN2FkOWIwOWFmYTE4MTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-18T01:32:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-18T02:37:34Z"}, "message": "Add a variance transform for calculation of recursive variance", "tree": {"sha": "64a15231316e7fb036cacbbcc1cb69703c0ecae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64a15231316e7fb036cacbbcc1cb69703c0ecae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48d351b21e72112059b705f6ba7ad9b09afa1819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48d351b21e72112059b705f6ba7ad9b09afa1819", "html_url": "https://github.com/rust-lang/rust/commit/48d351b21e72112059b705f6ba7ad9b09afa1819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48d351b21e72112059b705f6ba7ad9b09afa1819/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6613384fdd3b942981e517320708f813e1ad8b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6613384fdd3b942981e517320708f813e1ad8b6", "html_url": "https://github.com/rust-lang/rust/commit/d6613384fdd3b942981e517320708f813e1ad8b6"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "473f12aa7b6c7bd45a383a7c3fbb1057c17204f7", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/48d351b21e72112059b705f6ba7ad9b09afa1819/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d351b21e72112059b705f6ba7ad9b09afa1819/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=48d351b21e72112059b705f6ba7ad9b09afa1819", "patch": "@@ -1846,7 +1846,7 @@ mod unify {\n         cx: @ctxt, key: int, typ: t, variance: variance) -> result {\n         record_var_binding(\n             cx, key, typ,\n-            fn (cx: @ctxt, old_type: t, new_type: t) -> result {\n+            lambda (cx: @ctxt, old_type: t, new_type: t) -> result {\n                 unify_step(cx, old_type, new_type, variance)\n             })\n     }\n@@ -1855,7 +1855,7 @@ mod unify {\n         cx: @ctxt, key: int, typ: t, variance: variance) -> result {\n         record_var_binding(\n             cx, key, typ,\n-            fn (cx: @ctxt, old_type: t, new_type: t) -> result {\n+            lambda (cx: @ctxt, old_type: t, new_type: t) -> result {\n                 unify_step(cx, new_type, old_type, variance)\n             })\n     }\n@@ -2007,7 +2007,8 @@ mod unify {\n                 expected: t, actual: t, expected_inputs: [arg],\n                 expected_output: t, actual_inputs: [arg], actual_output: t,\n                 expected_cf: ret_style, actual_cf: ret_style,\n-                _expected_constrs: [@constr], actual_constrs: [@constr]) ->\n+                _expected_constrs: [@constr], actual_constrs: [@constr],\n+                variance: variance) ->\n        result {\n         if e_proto != a_proto { ret ures_err(terr_mismatch); }\n         if actual_cf != ast::noreturn && actual_cf != expected_cf {\n@@ -2020,7 +2021,8 @@ mod unify {\n         }\n         let t =\n             unify_fn_common(cx, expected, actual, expected_inputs,\n-                            expected_output, actual_inputs, actual_output);\n+                            expected_output, actual_inputs, actual_output,\n+                            variance);\n         alt t {\n           fn_common_res_err(r) { ret r; }\n           fn_common_res_ok(result_ins, result_out) {\n@@ -2034,11 +2036,13 @@ mod unify {\n     fn unify_native_fn(cx: @ctxt, e_abi: ast::native_abi,\n                        a_abi: ast::native_abi, expected: t, actual: t,\n                        expected_inputs: [arg], expected_output: t,\n-                       actual_inputs: [arg], actual_output: t) -> result {\n+                       actual_inputs: [arg], actual_output: t,\n+                       variance: variance) -> result {\n         if e_abi != a_abi { ret ures_err(terr_mismatch); }\n         let t =\n             unify_fn_common(cx, expected, actual, expected_inputs,\n-                            expected_output, actual_inputs, actual_output);\n+                            expected_output, actual_inputs, actual_output,\n+                            variance);\n         alt t {\n           fn_common_res_err(r) { ret r; }\n           fn_common_res_ok(result_ins, result_out) {\n@@ -2048,7 +2052,7 @@ mod unify {\n         }\n     }\n     fn unify_obj(cx: @ctxt, expected: t, actual: t, expected_meths: [method],\n-                 actual_meths: [method]) -> result {\n+                 actual_meths: [method], variance: variance) -> result {\n         let result_meths: [method] = [];\n         let i: uint = 0u;\n         let expected_len: uint = vec::len::<method>(expected_meths);\n@@ -2064,7 +2068,7 @@ mod unify {\n                 unify_fn(cx, e_meth.proto, a_meth.proto, expected, actual,\n                          e_meth.inputs, e_meth.output, a_meth.inputs,\n                          a_meth.output, e_meth.cf, a_meth.cf, e_meth.constrs,\n-                         a_meth.constrs);\n+                         a_meth.constrs, variance);\n             alt r {\n               ures_ok(tfn) {\n                 alt struct(cx.tcx, tfn) {\n@@ -2109,6 +2113,38 @@ mod unify {\n         invariant;\n     }\n \n+    // The calculation for recursive variance\n+    // \"Taming the Wildcards: Combining Definition- and Use-Site Variance\"\n+    // by John Altidor, et. al.\n+    //\n+    // I'm just copying the table from figure 1 - haven't actually\n+    // read the paper (yet).\n+    fn variance_transform(a: variance, b: variance) -> variance {\n+        alt a {\n+          covariant. {\n+            alt b {\n+              covariant. { covariant }\n+              contravariant. { contravariant }\n+              invariant. { invariant }\n+            }\n+          }\n+          contravariant. {\n+            alt b {\n+              covariant. { contravariant }\n+              contravariant. { covariant }\n+              invariant. { invariant }\n+            }\n+          }\n+          invariant. {\n+            alt b {\n+              covariant. { invariant }\n+              contravariant. { invariant }\n+              invariant. { invariant }\n+            }\n+          }\n+        }\n+    }\n+\n     fn unify_step(cx: @ctxt, expected: t, actual: t,\n                   variance: variance) -> result {\n         // TODO: rewrite this using tuple pattern matching when available, to\n@@ -2128,14 +2164,15 @@ mod unify {\n             alt struct(cx.tcx, expected) {\n               ty::ty_var(expected_id) {\n                 let expected_n = expected_id as uint;\n-                alt union(cx, expected_n, actual_n) {\n+                alt union(cx, expected_n, actual_n, variance) {\n                   unres_ok. {/* fall through */ }\n                   unres_err(t_e) { ret ures_err(t_e); }\n                 }\n               }\n               _ {\n                 // Just bind the type variable to the expected type.\n-                alt record_var_binding_for_actual(cx, actual_id, expected) {\n+                alt record_var_binding_for_actual(\n+                    cx, actual_id, expected, variance) {\n                   ures_ok(_) {/* fall through */ }\n                   rs { ret rs; }\n                 }\n@@ -2149,7 +2186,9 @@ mod unify {\n           ty::ty_var(expected_id) {\n             // Add a binding. (`actual` can't actually be a var here.)\n \n-            alt record_var_binding_for_expected(cx, expected_id, actual) {\n+            alt record_var_binding_for_expected(\n+                cx, expected_id, actual,\n+                variance) {\n               ures_ok(_) {/* fall through */ }\n               rs { ret rs; }\n             }\n@@ -2413,7 +2452,7 @@ mod unify {\n                 ret unify_fn(cx, ep, ap, expected, actual, expected_inputs,\n                              expected_output, actual_inputs, actual_output,\n                              expected_cf, actual_cf, expected_constrs,\n-                             actual_constrs);\n+                             actual_constrs, variance);\n               }\n               _ { ret ures_err(terr_mismatch); }\n             }\n@@ -2423,7 +2462,7 @@ mod unify {\n               ty::ty_native_fn(a_abi, actual_inputs, actual_output) {\n                 ret unify_native_fn(cx, e_abi, a_abi, expected, actual,\n                                     expected_inputs, expected_output,\n-                                    actual_inputs, actual_output);\n+                                    actual_inputs, actual_output, variance);\n               }\n               _ { ret ures_err(terr_mismatch); }\n             }\n@@ -2432,7 +2471,7 @@ mod unify {\n             alt struct(cx.tcx, actual) {\n               ty::ty_obj(actual_meths) {\n                 ret unify_obj(cx, expected, actual, expected_meths,\n-                              actual_meths);\n+                              actual_meths, variance);\n               }\n               _ { ret ures_err(terr_mismatch); }\n             }"}]}