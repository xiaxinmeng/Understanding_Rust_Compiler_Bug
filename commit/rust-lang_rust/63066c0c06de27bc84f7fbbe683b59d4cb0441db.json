{"sha": "63066c0c06de27bc84f7fbbe683b59d4cb0441db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMDY2YzBjMDZkZTI3YmM4NGY3ZmJiZTY4M2I1OWQ0Y2IwNDQxZGI=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-23T21:11:55Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-27T18:37:59Z"}, "message": "Use `LintId`s to check for gated lints", "tree": {"sha": "e081e13deabc3f2c6ba457253893d6d307796c83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e081e13deabc3f2c6ba457253893d6d307796c83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63066c0c06de27bc84f7fbbe683b59d4cb0441db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63066c0c06de27bc84f7fbbe683b59d4cb0441db", "html_url": "https://github.com/rust-lang/rust/commit/63066c0c06de27bc84f7fbbe683b59d4cb0441db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63066c0c06de27bc84f7fbbe683b59d4cb0441db/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b0885062266a21e67fdeb12320c92ac7c00742e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0885062266a21e67fdeb12320c92ac7c00742e", "html_url": "https://github.com/rust-lang/rust/commit/1b0885062266a21e67fdeb12320c92ac7c00742e"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3d2ddf12a0a1f933042a88f7765d8e1740906163", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63066c0c06de27bc84f7fbbe683b59d4cb0441db/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63066c0c06de27bc84f7fbbe683b59d4cb0441db/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=63066c0c06de27bc84f7fbbe683b59d4cb0441db", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{struct_lint_level, LintLevelMap, LintLevelSets, LintSet, LintSource};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::lint::{builtin, Level, Lint};\n+use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n@@ -80,13 +80,13 @@ impl<'s> LintLevelsBuilder<'s> {\n             let level = cmp::min(level, self.sets.lint_cap);\n \n             let lint_flag_val = Symbol::intern(lint_name);\n-            self.check_gated_lint(lint_flag_val, DUMMY_SP);\n \n             let ids = match store.find_lints(&lint_name) {\n                 Ok(ids) => ids,\n                 Err(_) => continue, // errors handled in check_lint_name_cmdline above\n             };\n             for id in ids {\n+                self.check_gated_lint(id, DUMMY_SP);\n                 let src = LintSource::CommandLine(lint_flag_val);\n                 specs.insert(id, (level, src));\n             }\n@@ -213,9 +213,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                 let name = meta_item.path.segments.last().expect(\"empty lint name\").ident.name;\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n-                        self.check_gated_lint(name, attr.span);\n                         let src = LintSource::Node(name, li.span(), reason);\n                         for id in ids {\n+                            self.check_gated_lint(*id, attr.span);\n                             specs.insert(*id, (level, src));\n                         }\n                     }\n@@ -386,8 +386,8 @@ impl<'s> LintLevelsBuilder<'s> {\n         BuilderPush { prev, changed: prev != self.cur }\n     }\n \n-    fn check_gated_lint(&self, name: Symbol, span: Span) {\n-        if name.as_str() == builtin::UNSAFE_OP_IN_UNSAFE_FN.name\n+    fn check_gated_lint(&self, id: LintId, span: Span) {\n+        if id == LintId::of(builtin::UNSAFE_OP_IN_UNSAFE_FN)\n             && !self.sess.features_untracked().unsafe_block_in_unsafe_fn\n         {\n             feature_err("}]}