{"sha": "9e0e9386a64c4dfa9875a2f3e8be265eaae394f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMGU5Mzg2YTY0YzRkZmE5ODc1YTJmM2U4YmUyNjVlYWFlMzk0ZjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-23T09:52:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-23T16:04:13Z"}, "message": "better approach to skip ZST reborrows", "tree": {"sha": "95e58faa4ac0234aefcae47caa468f75235266bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95e58faa4ac0234aefcae47caa468f75235266bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e0e9386a64c4dfa9875a2f3e8be265eaae394f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0e9386a64c4dfa9875a2f3e8be265eaae394f4", "html_url": "https://github.com/rust-lang/rust/commit/9e0e9386a64c4dfa9875a2f3e8be265eaae394f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e0e9386a64c4dfa9875a2f3e8be265eaae394f4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09c571eec1fff99632f96eb1f74a7e177fcf2b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09c571eec1fff99632f96eb1f74a7e177fcf2b0", "html_url": "https://github.com/rust-lang/rust/commit/e09c571eec1fff99632f96eb1f74a7e177fcf2b0"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "3e176d94b9902e29206eb784f3eb3d42041a0173", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e9386a64c4dfa9875a2f3e8be265eaae394f4/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e9386a64c4dfa9875a2f3e8be265eaae394f4/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=9e0e9386a64c4dfa9875a2f3e8be265eaae394f4", "patch": "@@ -572,6 +572,18 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         new_tag: Tag,\n         protect: bool,\n     ) -> InterpResult<'tcx> {\n+        // Nothing to do for ZSTs.\n+        if size == Size::ZERO {\n+            trace!(\n+                \"reborrow of size 0: {} reference {:?} derived from {:?} (pointee {})\",\n+                kind,\n+                new_tag,\n+                place.ptr,\n+                place.layout.ty,\n+            );\n+            return Ok(());\n+        }\n+\n         let this = self.eval_context_mut();\n         let protector = if protect { Some(this.frame().extra.call_id) } else { None };\n         let ptr = place.ptr.assert_ptr();\n@@ -617,6 +629,8 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         };\n         // Here we can avoid `borrow()` calls because we have mutable references.\n+        // Note that this asserts that the allocation is mutable -- but since we are creating a\n+        // mutable pointer, that seems reasonable.\n         let (alloc_extra, memory_extra) = this.memory.get_alloc_extra_mut(ptr.alloc_id)?;\n         let stacked_borrows =\n             alloc_extra.stacked_borrows.as_mut().expect(\"we should have Stacked Borrows data\");\n@@ -649,12 +663,6 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // We can see dangling ptrs in here e.g. after a Box's `Unique` was\n         // updated using \"self.0 = ...\" (can happen in Box::from_raw) so we cannot ICE; see miri#1050.\n         let place = this.mplace_access_checked(place, Some(Align::from_bytes(1).unwrap()))?;\n-        // Nothing to do for ZSTs. We use `is_bits` here because we *do* need to retag even ZSTs\n-        // when there actually is a tag (to avoid inheriting a tag that would let us access more\n-        // than 0 bytes).\n-        if size == Size::ZERO && place.ptr.is_bits() {\n-            return Ok(*val);\n-        }\n \n         // Compute new borrow.\n         let new_tag = {"}]}