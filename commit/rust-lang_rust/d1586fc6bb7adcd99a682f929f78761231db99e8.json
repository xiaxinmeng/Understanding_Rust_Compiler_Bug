{"sha": "d1586fc6bb7adcd99a682f929f78761231db99e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNTg2ZmM2YmI3YWRjZDk5YTY4MmY5MjlmNzg3NjEyMzFkYjk5ZTg=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-08-01T00:26:55Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-08-01T00:27:29Z"}, "message": "Fix unused sync::atomic import on targets without atomics", "tree": {"sha": "ed59cba3bdf82c92b0e61dafac6b32130afce103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed59cba3bdf82c92b0e61dafac6b32130afce103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1586fc6bb7adcd99a682f929f78761231db99e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmEF6nEACgkQ+boUO5X/\nbYKZew//W3hAwlAcQyN0bD6SvFewXpbsDy2WcDjicMnFJpdere0kvZ3oSmKSJGIt\njw8M+ApTbuXwSyqugIk5Zq1mysbEAF21oysq9On4Etxht9DZPGYY81ZmfkZkR+v1\nbaWI6PCthE+vZQKGbPOQt6OmIr34j0AuQolnpuHfTPZZoXmKGwbWQFq3UqFqwF3j\n5WKOvYWqLJL4qR5iR6aD0txjq1JWuWmclwrvuiuz4M9v2WE7ZfRBmPQmYBIgmj8H\nqxG+BLYpHk2S/gTkxi1AlSrTUjLQ0/S3iLIxbBL28+RhbKT5lUhlEswYuGDjfjZp\nghJDqd4EC0UALtQjzZbbaDupGPGQ4afdP/V5Tv39DfQ9ImzHvffX99Y9oNqKr6Yt\n7XH6doLdGFy0sqsNX+80XcrFA/t0ADI8T6ggz1u51APOLNyRbvc08eumdzsotzCY\nlk9uaA/SD5c61k2bl+RvM4ZIAVGDMx9ybxvZvmYCoXbDVPrcTjXEmCUHcm898mlH\npaR/qn8hujneqpwQqGomA06d7JzL/ENWPcSka/5r5pqJEk+yFV9iWrzK7QITMGrU\ntptaAle8RRbG1xYBSa3l2LYJrAOH0iSKkM0IS8ua3H3eOp+Q1uvoxKR6qL9Jw0JG\n9x1494Tl4/yi/N4UF412wpKkH6j2jkdSuoVj49MZYlzlFTWyYnk=\n=v6nc\n-----END PGP SIGNATURE-----", "payload": "tree ed59cba3bdf82c92b0e61dafac6b32130afce103\nparent 96ecaa17a7f333f3c374d5742565087a72798479\nauthor David Tolnay <dtolnay@gmail.com> 1627777615 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1627777649 -0700\n\nFix unused sync::atomic import on targets without atomics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1586fc6bb7adcd99a682f929f78761231db99e8", "html_url": "https://github.com/rust-lang/rust/commit/d1586fc6bb7adcd99a682f929f78761231db99e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1586fc6bb7adcd99a682f929f78761231db99e8/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96ecaa17a7f333f3c374d5742565087a72798479", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ecaa17a7f333f3c374d5742565087a72798479", "html_url": "https://github.com/rust-lang/rust/commit/96ecaa17a7f333f3c374d5742565087a72798479"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "092b7cf0f2cd57b6223ab20866da1147e225867a", "filename": "library/core/src/panic/unwind_safe.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d1586fc6bb7adcd99a682f929f78761231db99e8/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1586fc6bb7adcd99a682f929f78761231db99e8/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Funwind_safe.rs?ref=d1586fc6bb7adcd99a682f929f78761231db99e8", "patch": "@@ -5,7 +5,6 @@ use crate::ops::{Deref, DerefMut};\n use crate::pin::Pin;\n use crate::ptr::{NonNull, Unique};\n use crate::stream::Stream;\n-use crate::sync::atomic;\n use crate::task::{Context, Poll};\n \n /// A marker trait which represents \"panic safe\" types in Rust.\n@@ -204,49 +203,49 @@ impl<T> RefUnwindSafe for AssertUnwindSafe<T> {}\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n-impl RefUnwindSafe for atomic::AtomicIsize {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicIsize {}\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n-impl RefUnwindSafe for atomic::AtomicI8 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicI8 {}\n #[cfg(target_has_atomic_load_store = \"16\")]\n #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n-impl RefUnwindSafe for atomic::AtomicI16 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicI16 {}\n #[cfg(target_has_atomic_load_store = \"32\")]\n #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n-impl RefUnwindSafe for atomic::AtomicI32 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicI32 {}\n #[cfg(target_has_atomic_load_store = \"64\")]\n #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n-impl RefUnwindSafe for atomic::AtomicI64 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicI64 {}\n #[cfg(target_has_atomic_load_store = \"128\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n-impl RefUnwindSafe for atomic::AtomicI128 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicI128 {}\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n-impl RefUnwindSafe for atomic::AtomicUsize {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicUsize {}\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n-impl RefUnwindSafe for atomic::AtomicU8 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicU8 {}\n #[cfg(target_has_atomic_load_store = \"16\")]\n #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n-impl RefUnwindSafe for atomic::AtomicU16 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicU16 {}\n #[cfg(target_has_atomic_load_store = \"32\")]\n #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n-impl RefUnwindSafe for atomic::AtomicU32 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicU32 {}\n #[cfg(target_has_atomic_load_store = \"64\")]\n #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n-impl RefUnwindSafe for atomic::AtomicU64 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicU64 {}\n #[cfg(target_has_atomic_load_store = \"128\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n-impl RefUnwindSafe for atomic::AtomicU128 {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicU128 {}\n \n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n-impl RefUnwindSafe for atomic::AtomicBool {}\n+impl RefUnwindSafe for crate::sync::atomic::AtomicBool {}\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n-impl<T> RefUnwindSafe for atomic::AtomicPtr<T> {}\n+impl<T> RefUnwindSafe for crate::sync::atomic::AtomicPtr<T> {}\n \n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T> Deref for AssertUnwindSafe<T> {"}]}