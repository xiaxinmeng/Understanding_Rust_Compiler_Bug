{"sha": "d4dcb16a02fa0f12f2c1d22836ffe88928f9ab79", "node_id": "C_kwDOAAsO6NoAKGQ0ZGNiMTZhMDJmYTBmMTJmMmMxZDIyODM2ZmZlODg5MjhmOWFiNzk", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-04-19T06:07:10Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-04-19T06:08:39Z"}, "message": "Fix changelog generation after repo move", "tree": {"sha": "7a16612faf94aaec2fe6566d0a1af8f0568cfe56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a16612faf94aaec2fe6566d0a1af8f0568cfe56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4dcb16a02fa0f12f2c1d22836ffe88928f9ab79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dcb16a02fa0f12f2c1d22836ffe88928f9ab79", "html_url": "https://github.com/rust-lang/rust/commit/d4dcb16a02fa0f12f2c1d22836ffe88928f9ab79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4dcb16a02fa0f12f2c1d22836ffe88928f9ab79/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65fbe0a8d17fc257f037f4dd465bff69a3d3054a", "url": "https://api.github.com/repos/rust-lang/rust/commits/65fbe0a8d17fc257f037f4dd465bff69a3d3054a", "html_url": "https://github.com/rust-lang/rust/commit/65fbe0a8d17fc257f037f4dd465bff69a3d3054a"}], "stats": {"total": 108, "additions": 59, "deletions": 49}, "files": [{"sha": "2647f7794f2c689a7be91927456152e405f51143", "filename": "xtask/src/release/changelog.rs", "status": "modified", "additions": 59, "deletions": 49, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/d4dcb16a02fa0f12f2c1d22836ffe88928f9ab79/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dcb16a02fa0f12f2c1d22836ffe88928f9ab79/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease%2Fchangelog.rs?ref=d4dcb16a02fa0f12f2c1d22836ffe88928f9ab79", "patch": "@@ -11,56 +11,53 @@ pub(crate) fn get_changelog(\n     prev_tag: &str,\n     today: &str,\n ) -> anyhow::Result<String> {\n-    let git_log = cmd!(sh, \"git log {prev_tag}..HEAD --merges --reverse\").read()?;\n+    let token = match env::var(\"GITHUB_TOKEN\") {\n+        Ok(token) => token,\n+        Err(_) => bail!(\"Please obtain a personal access token from https://github.com/settings/tokens and set the `GITHUB_TOKEN` environment variable.\"),\n+    };\n+\n+    let git_log = cmd!(sh, \"git log {prev_tag}..HEAD --reverse\").read()?;\n     let mut features = String::new();\n     let mut fixes = String::new();\n     let mut internal = String::new();\n     let mut others = String::new();\n     for line in git_log.lines() {\n         let line = line.trim_start();\n-        if let Some(p) = line.find(':') {\n-            let pr = &line[..p];\n-            if let Ok(pr_num) = pr.parse::<u32>() {\n-                let accept = \"Accept: application/vnd.github.v3+json\";\n-                let token = match env::var(\"GITHUB_TOKEN\") {\n-                    Ok(token) => token,\n-                    Err(_) => bail!(\"Please obtain a personal access token from https://github.com/settings/tokens and set the `GITHUB_TOKEN` environment variable.\"),\n-                };\n-                let authorization = format!(\"Authorization: token {}\", token);\n-                let pr_url = \"https://api.github.com/repos/rust-analyzer/rust-analyzer/issues\";\n-\n-                // we don't use an HTTPS client or JSON parser to keep the build times low\n-                let pr_json =\n-                    cmd!(sh, \"curl -s -H {accept} -H {authorization} {pr_url}/{pr}\").read()?;\n-                let pr_title = cmd!(sh, \"jq .title\").stdin(&pr_json).read()?;\n-                let pr_title = unescape(&pr_title[1..pr_title.len() - 1]);\n-                let pr_comment = cmd!(sh, \"jq .body\").stdin(pr_json).read()?;\n-\n-                let comments_json =\n-                    cmd!(sh, \"curl -s -H {accept} -H {authorization} {pr_url}/{pr}/comments\")\n-                        .read()?;\n-                let pr_comments = cmd!(sh, \"jq .[].body\").stdin(comments_json).read()?;\n-\n-                let l = iter::once(pr_comment.as_str())\n-                    .chain(pr_comments.lines())\n-                    .rev()\n-                    .find_map(|it| {\n-                        let it = unescape(&it[1..it.len() - 1]);\n-                        it.lines().find_map(parse_changelog_line)\n-                    })\n-                    .into_iter()\n-                    .next()\n-                    .unwrap_or_else(|| parse_title_line(&pr_title));\n-                let s = match l.kind {\n-                    PrKind::Feature => &mut features,\n-                    PrKind::Fix => &mut fixes,\n-                    PrKind::Internal => &mut internal,\n-                    PrKind::Other => &mut others,\n-                    PrKind::Skip => continue,\n-                };\n-                writeln!(s, \"* pr:{}[] {}\", pr_num, l.message.as_deref().unwrap_or(&pr_title))\n-                    .unwrap();\n-            }\n+        if let Some(pr_num) = parse_pr_number(&line) {\n+            let accept = \"Accept: application/vnd.github.v3+json\";\n+            let authorization = format!(\"Authorization: token {}\", token);\n+            let pr_url = \"https://api.github.com/repos/rust-lang/rust-analyzer/issues\";\n+\n+            // we don't use an HTTPS client or JSON parser to keep the build times low\n+            let pr = pr_num.to_string();\n+            let pr_json =\n+                cmd!(sh, \"curl -s -H {accept} -H {authorization} {pr_url}/{pr}\").read()?;\n+            let pr_title = cmd!(sh, \"jq .title\").stdin(&pr_json).read()?;\n+            let pr_title = unescape(&pr_title[1..pr_title.len() - 1]);\n+            let pr_comment = cmd!(sh, \"jq .body\").stdin(pr_json).read()?;\n+\n+            let comments_json =\n+                cmd!(sh, \"curl -s -H {accept} -H {authorization} {pr_url}/{pr}/comments\").read()?;\n+            let pr_comments = cmd!(sh, \"jq .[].body\").stdin(comments_json).read()?;\n+\n+            let l = iter::once(pr_comment.as_str())\n+                .chain(pr_comments.lines())\n+                .rev()\n+                .find_map(|it| {\n+                    let it = unescape(&it[1..it.len() - 1]);\n+                    it.lines().find_map(parse_changelog_line)\n+                })\n+                .into_iter()\n+                .next()\n+                .unwrap_or_else(|| parse_title_line(&pr_title));\n+            let s = match l.kind {\n+                PrKind::Feature => &mut features,\n+                PrKind::Fix => &mut fixes,\n+                PrKind::Internal => &mut internal,\n+                PrKind::Other => &mut others,\n+                PrKind::Skip => continue,\n+            };\n+            writeln!(s, \"* pr:{}[] {}\", pr_num, l.message.as_deref().unwrap_or(&pr_title)).unwrap();\n         }\n     }\n \n@@ -73,11 +70,6 @@ pub(crate) fn get_changelog(\n Commit: commit:{}[] +\n Release: release:{}[]\n \n-== Sponsors\n-\n-**Become a sponsor:** On https://opencollective.com/rust-analyzer/[OpenCollective] or\n-https://github.com/sponsors/rust-analyzer[GitHub Sponsors].\n-\n == New Features\n \n {}\n@@ -117,6 +109,24 @@ fn unescape(s: &str) -> String {\n     s.replace(r#\"\\\"\"#, \"\").replace(r#\"\\n\"#, \"\\n\").replace(r#\"\\r\"#, \"\")\n }\n \n+fn parse_pr_number(s: &str) -> Option<u32> {\n+    const BORS_PREFIX: &str = \"Merge #\";\n+    const HOMU_PREFIX: &str = \"Auto merge of #\";\n+    if s.starts_with(BORS_PREFIX) {\n+        let s = &s[BORS_PREFIX.len()..];\n+        s.parse().ok()\n+    } else if s.starts_with(HOMU_PREFIX) {\n+        let s = &s[HOMU_PREFIX.len()..];\n+        if let Some(space) = s.find(' ') {\n+            s[..space].parse().ok()\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n fn parse_changelog_line(s: &str) -> Option<PrInfo> {\n     let parts = s.splitn(3, ' ').collect::<Vec<_>>();\n     if parts.len() < 2 || parts[0] != \"changelog\" {"}]}