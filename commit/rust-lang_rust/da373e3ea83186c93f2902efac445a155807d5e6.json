{"sha": "da373e3ea83186c93f2902efac445a155807d5e6", "node_id": "C_kwDOAAsO6NoAKGRhMzczZTNlYTgzMTg2YzkzZjI5MDJlZmFjNDQ1YTE1NTgwN2Q1ZTY", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-27T14:32:47Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-13T15:40:59Z"}, "message": "use ty::Unevaluated<'tcx, ()> in type system", "tree": {"sha": "b5c47c42f4e4dd18c8f662103c59c3b18f8fbdd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5c47c42f4e4dd18c8f662103c59c3b18f8fbdd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da373e3ea83186c93f2902efac445a155807d5e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da373e3ea83186c93f2902efac445a155807d5e6", "html_url": "https://github.com/rust-lang/rust/commit/da373e3ea83186c93f2902efac445a155807d5e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da373e3ea83186c93f2902efac445a155807d5e6/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c831d6960b96bbf23e788291ddc25c9aa2cb23", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c831d6960b96bbf23e788291ddc25c9aa2cb23", "html_url": "https://github.com/rust-lang/rust/commit/11c831d6960b96bbf23e788291ddc25c9aa2cb23"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "7bf578b6a4e676ebc004328efc7f24f4c281adc6", "filename": "src/constant.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/da373e3ea83186c93f2902efac445a155807d5e6/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da373e3ea83186c93f2902efac445a155807d5e6/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=da373e3ea83186c93f2902efac445a155807d5e6", "patch": "@@ -124,26 +124,33 @@ pub(crate) fn codegen_constant<'tcx>(\n ) -> CValue<'tcx> {\n     let const_ = match fx.monomorphize(constant.literal) {\n         ConstantKind::Ty(ct) => ct,\n-        ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n-    };\n-    let const_val = match const_.kind() {\n-        ConstKind::Value(valtree) => fx.tcx.valtree_to_const_val((const_.ty(), valtree)),\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+        ConstantKind::Unevaluated(mir::Unevaluated { def, substs, promoted })\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n             return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(unevaluated) => {\n+        ConstantKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n                 Ok(const_val) => const_val,\n                 Err(_) => {\n                     span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n                 }\n             }\n         }\n+        ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n+    };\n+    let const_val = match const_.kind() {\n+        ConstKind::Value(valtree) => fx.tcx.valtree_to_const_val((const_.ty(), valtree)),\n+        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+            if fx.tcx.is_static(def.did) =>\n+        {\n+            assert!(substs.is_empty());\n+            assert!(promoted.is_none());\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n+        }\n         ConstKind::Param(_)\n         | ConstKind::Infer(_)\n         | ConstKind::Bound(_, _)"}]}