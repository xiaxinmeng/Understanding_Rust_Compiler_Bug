{"sha": "f69a6c2a8018ac69db62446996e815893b70dfcd", "node_id": "C_kwDOAAsO6NoAKGY2OWE2YzJhODAxOGFjNjlkYjYyNDQ2OTk2ZTgxNTg5M2I3MGRmY2Q", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T14:41:54Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T15:14:15Z"}, "message": "jsondoclint: Fix TODO's", "tree": {"sha": "38a21084f1bcb2ced7e7ba03718ac9570c759ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a21084f1bcb2ced7e7ba03718ac9570c759ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69a6c2a8018ac69db62446996e815893b70dfcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69a6c2a8018ac69db62446996e815893b70dfcd", "html_url": "https://github.com/rust-lang/rust/commit/f69a6c2a8018ac69db62446996e815893b70dfcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69a6c2a8018ac69db62446996e815893b70dfcd/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e21a28ddaf31bf5c6c78d83d051214d2212e803", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e21a28ddaf31bf5c6c78d83d051214d2212e803", "html_url": "https://github.com/rust-lang/rust/commit/6e21a28ddaf31bf5c6c78d83d051214d2212e803"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "a0e77127dc2ca15091be88c3b99cb06c23971ff7", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f69a6c2a8018ac69db62446996e815893b70dfcd/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69a6c2a8018ac69db62446996e815893b70dfcd/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=f69a6c2a8018ac69db62446996e815893b70dfcd", "patch": "@@ -63,7 +63,7 @@ impl<'a> Validator<'a> {\n                 ItemEnum::Struct(x) => self.check_struct(x),\n                 ItemEnum::StructField(x) => self.check_struct_field(x),\n                 ItemEnum::Enum(x) => self.check_enum(x),\n-                ItemEnum::Variant(x) => self.check_variant(x),\n+                ItemEnum::Variant(x) => self.check_variant(x, id),\n                 ItemEnum::Function(x) => self.check_function(x),\n                 ItemEnum::Trait(x) => self.check_trait(x),\n                 ItemEnum::TraitAlias(x) => self.check_trait_alias(x),\n@@ -135,9 +135,23 @@ impl<'a> Validator<'a> {\n         x.impls.iter().for_each(|i| self.add_impl_id(i));\n     }\n \n-    fn check_variant(&mut self, x: &'a Variant) {\n+    fn check_variant(&mut self, x: &'a Variant, id: &'a Id) {\n         match x {\n-            Variant::Plain(_discriminant) => {} // TODO: Check discriminant value parses\n+            Variant::Plain(discr) => {\n+                if let Some(discr) = discr {\n+                    if let (Err(_), Err(_)) =\n+                        (discr.value.parse::<i128>(), discr.value.parse::<u128>())\n+                    {\n+                        self.fail(\n+                            id,\n+                            ErrorKind::Custom(format!(\n+                                \"Failed to parse discriminant value `{}`\",\n+                                discr.value\n+                            )),\n+                        );\n+                    }\n+                }\n+            }\n             Variant::Tuple(tys) => tys.iter().flatten().for_each(|t| self.add_field_id(t)),\n             Variant::Struct { fields, fields_stripped: _ } => {\n                 fields.iter().for_each(|f| self.add_field_id(f))\n@@ -198,15 +212,15 @@ impl<'a> Validator<'a> {\n     }\n \n     fn check_macro(&mut self, _: &'a str) {\n-        // TODO\n+        // nop\n     }\n \n     fn check_proc_macro(&mut self, _: &'a ProcMacro) {\n-        // TODO\n+        // nop\n     }\n \n     fn check_primitive_type(&mut self, _: &'a str) {\n-        // TODO\n+        // nop\n     }\n \n     fn check_generics(&mut self, x: &'a Generics) {"}]}