{"sha": "d63d363ef9d6627dc9649477b337a3f915d0660e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2M2QzNjNlZjlkNjYyN2RjOTY0OTQ3N2IzMzdhM2Y5MTVkMDY2MGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-24T03:38:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-27T18:47:49Z"}, "message": "Diagnostic tweaks (review)", "tree": {"sha": "477268a91ade60ae4800706bdd567d00eb94644c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/477268a91ade60ae4800706bdd567d00eb94644c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d63d363ef9d6627dc9649477b337a3f915d0660e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d63d363ef9d6627dc9649477b337a3f915d0660e", "html_url": "https://github.com/rust-lang/rust/commit/d63d363ef9d6627dc9649477b337a3f915d0660e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d63d363ef9d6627dc9649477b337a3f915d0660e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36baa81be9f430329f5ea7b6bbb539e41105bfe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/36baa81be9f430329f5ea7b6bbb539e41105bfe2", "html_url": "https://github.com/rust-lang/rust/commit/36baa81be9f430329f5ea7b6bbb539e41105bfe2"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "69b2723449849230b777c67a04166f98879574e1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d63d363ef9d6627dc9649477b337a3f915d0660e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63d363ef9d6627dc9649477b337a3f915d0660e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d63d363ef9d6627dc9649477b337a3f915d0660e", "patch": "@@ -3231,18 +3231,8 @@ impl<'a> Parser<'a> {\n             return Err(err)\n         }\n         let not_block = self.token != token::OpenDelim(token::Brace);\n-        let fat_arrow_sp = if self.token == token::FatArrow {\n-            Some(self.span)\n-        } else {\n-            None\n-        };\n         let thn = self.parse_block().map_err(|mut err| {\n-            if let Some(sp) = fat_arrow_sp {\n-                // if cond => expr\n-                err.span_suggestion(sp,\n-                                    \"only necessary in match arms, not before if blocks\",\n-                                    \"\".to_string());\n-            } else if not_block {\n+            if not_block {\n                 err.span_label(lo, \"this `if` statement has a condition, but no block\");\n             }\n             err\n@@ -3444,7 +3434,7 @@ impl<'a> Parser<'a> {\n \n         let expr = self.parse_expr_res(Restrictions::STMT_EXPR, None)\n             .map_err(|mut err| {\n-                err.span_label(arrow_span, \"while parsing the match arm starting here\");\n+                err.span_label(arrow_span, \"while parsing the `match` arm starting here\");\n                 err\n             })?;\n \n@@ -3455,7 +3445,6 @@ impl<'a> Parser<'a> {\n             let cm = self.sess.codemap();\n             self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)])\n                 .map_err(|mut err| {\n-                    err.span_label(arrow_span, \"while parsing the match arm starting here\");\n                     match (cm.span_to_lines(expr.span), cm.span_to_lines(arm_start_span)) {\n                         (Ok(ref expr_lines), Ok(ref arm_start_lines))\n                         if arm_start_lines.lines[0].end_col == expr_lines.lines[0].end_col\n@@ -3472,11 +3461,16 @@ impl<'a> Parser<'a> {\n                             //   |      - ^^ self.span\n                             //   |      |\n                             //   |      parsed until here as `\"y\" & X`\n-                            err.span_suggestion_short(cm.next_point(arm_start_span),\n-                                                      \"missing a comma here to end this match arm\",\n-                                                      \",\".to_owned());\n+                            err.span_suggestion_short(\n+                                cm.next_point(arm_start_span),\n+                                \"missing a comma here to end this `match` arm\",\n+                                \",\".to_owned()\n+                            );\n+                        }\n+                        _ => {\n+                            err.span_label(arrow_span,\n+                                           \"while parsing the `match` arm starting here\");\n                         }\n-                        _ => {}\n                     }\n                     err\n                 })?;"}, {"sha": "a48eff890b331448750f525310b98f1341d2e44e", "filename": "src/test/ui/missing-block-hint.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d63d363ef9d6627dc9649477b337a3f915d0660e/src%2Ftest%2Fui%2Fmissing-block-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d63d363ef9d6627dc9649477b337a3f915d0660e/src%2Ftest%2Fui%2Fmissing-block-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-block-hint.stderr?ref=d63d363ef9d6627dc9649477b337a3f915d0660e", "patch": "@@ -2,7 +2,9 @@ error: expected `{`, found `=>`\n   --> $DIR/missing-block-hint.rs:13:18\n    |\n LL |         if (foo) => {} //~ ERROR expected `{`, found `=>`\n-   |                  ^^ help: only necessary in match arms, not before if blocks\n+   |         --       ^^\n+   |         |\n+   |         this `if` statement has a condition, but no block\n \n error: expected `{`, found `bar`\n   --> $DIR/missing-block-hint.rs:17:13"}, {"sha": "6f86cdea3cf5e867806e81fedab1cc537e70d867", "filename": "src/test/ui/suggestions/missing-comma-in-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d63d363ef9d6627dc9649477b337a3f915d0660e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63d363ef9d6627dc9649477b337a3f915d0660e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs?ref=d63d363ef9d6627dc9649477b337a3f915d0660e", "patch": "@@ -14,7 +14,6 @@ fn main() {\n         &Some(2) => { 3 }\n         //~^ ERROR expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n         //~| NOTE expected one of `,`, `.`, `?`, `}`, or an operator here\n-        //~^^^^ NOTE while parsing the match arm starting here\n         _ => 2\n     };\n }"}, {"sha": "71123a160a5f8b39ad0806ddc5ef3ed24dc8f108", "filename": "src/test/ui/suggestions/missing-comma-in-match.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d63d363ef9d6627dc9649477b337a3f915d0660e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d63d363ef9d6627dc9649477b337a3f915d0660e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr?ref=d63d363ef9d6627dc9649477b337a3f915d0660e", "patch": "@@ -2,9 +2,7 @@ error: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n   --> $DIR/missing-comma-in-match.rs:14:18\n    |\n 13 |         &None => 1\n-   |               --  - help: missing a comma here to end this match arm\n-   |               |\n-   |               while parsing the match arm starting here\n+   |                   - help: missing a comma here to end this `match` arm\n 14 |         &Some(2) => { 3 }\n    |                  ^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n "}]}