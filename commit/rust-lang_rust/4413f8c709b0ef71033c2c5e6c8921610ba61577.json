{"sha": "4413f8c709b0ef71033c2c5e6c8921610ba61577", "node_id": "C_kwDOAAsO6NoAKDQ0MTNmOGM3MDliMGVmNzEwMzNjMmM1ZTZjODkyMTYxMGJhNjE1Nzc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-16T13:54:08Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-18T15:50:56Z"}, "message": "Member constraints already covered all of E0482 already, so that error never occurred anymore", "tree": {"sha": "59516f0379a82f89f8da535d76dfc4f55d5ebed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59516f0379a82f89f8da535d76dfc4f55d5ebed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4413f8c709b0ef71033c2c5e6c8921610ba61577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4413f8c709b0ef71033c2c5e6c8921610ba61577", "html_url": "https://github.com/rust-lang/rust/commit/4413f8c709b0ef71033c2c5e6c8921610ba61577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4413f8c709b0ef71033c2c5e6c8921610ba61577/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2220fafa8c902efba544a880b77f5fe0f5525f37", "url": "https://api.github.com/repos/rust-lang/rust/commits/2220fafa8c902efba544a880b77f5fe0f5525f37", "html_url": "https://github.com/rust-lang/rust/commit/2220fafa8c902efba544a880b77f5fe0f5525f37"}], "stats": {"total": 71, "additions": 6, "deletions": 65}, "files": [{"sha": "ad363816e1890dada37f084ab48f9ae1a9e5a0ef", "filename": "compiler/rustc_error_codes/src/error_codes/E0482.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4413f8c709b0ef71033c2c5e6c8921610ba61577/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md", "raw_url": "https://github.com/rust-lang/rust/raw/4413f8c709b0ef71033c2c5e6c8921610ba61577/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md?ref=4413f8c709b0ef71033c2c5e6c8921610ba61577", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A lifetime of a returned value does not outlive the function call.\n \n Erroneous code example:\n \n-```compile_fail,E0482\n+```compile_fail,E0700\n fn prefix<'a>(\n     words: impl Iterator<Item = &'a str>\n ) -> impl Iterator<Item = String> { // error!\n@@ -41,7 +43,7 @@ fn prefix(\n \n A similar lifetime problem might arise when returning closures:\n \n-```compile_fail,E0482\n+```compile_fail,E0700\n fn foo(\n     x: &mut Vec<i32>\n ) -> impl FnMut(&mut Vec<i32>) -> &[i32] { // error!"}, {"sha": "167a8893a11c88aded07e7fac752865577cd5816", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4413f8c709b0ef71033c2c5e6c8921610ba61577/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4413f8c709b0ef71033c2c5e6c8921610ba61577/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=4413f8c709b0ef71033c2c5e6c8921610ba61577", "patch": "@@ -53,9 +53,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::RelateObjectBound(span) => {\n                 label_or_note(span, \"...so that it can be closed over into an object\");\n             }\n-            infer::CallReturn(span) => {\n-                label_or_note(span, \"...so that return value is valid for the call\");\n-            }\n             infer::DataBorrowed(ty, span) => {\n                 label_or_note(\n                     span,\n@@ -281,23 +278,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n                 err\n             }\n-            infer::CallReturn(span) => {\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0482,\n-                    \"lifetime of return value does not outlive the function call\"\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"the return value is only valid for \",\n-                    sup,\n-                    \"\",\n-                    None,\n-                );\n-                err\n-            }\n             infer::DataBorrowed(ty, span) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "6b905f67e683f900b53ed0e9ca99dba49342161a", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4413f8c709b0ef71033c2c5e6c8921610ba61577/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4413f8c709b0ef71033c2c5e6c8921610ba61577/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=4413f8c709b0ef71033c2c5e6c8921610ba61577", "patch": "@@ -417,9 +417,6 @@ pub enum SubregionOrigin<'tcx> {\n     /// (&'a &'b T) where a >= b\n     ReferenceOutlivesReferent(Ty<'tcx>, Span),\n \n-    /// Region in return type of invoked fn must enclose call\n-    CallReturn(Span),\n-\n     /// Comparing the signature and requirements of an impl method against\n     /// the containing trait.\n     CompareImplMethodObligation {\n@@ -1803,7 +1800,6 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             ReborrowUpvar(a, _) => a,\n             DataBorrowed(_, a) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n-            CallReturn(a) => a,\n             CompareImplMethodObligation { span, .. } => span,\n             CompareImplTypeObligation { span, .. } => span,\n         }"}, {"sha": "6c5e6b1cfc385fbc0b5e2e9daa8d55ce649726da", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4413f8c709b0ef71033c2c5e6c8921610ba61577/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4413f8c709b0ef71033c2c5e6c8921610ba61577/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=4413f8c709b0ef71033c2c5e6c8921610ba61577", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::opaque_types::OpaqueTypeDecl;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::{self, InferCtxt, InferOk};\n+use rustc_infer::infer::{InferCtxt, InferOk};\n use rustc_middle::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt};\n@@ -295,51 +295,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             hir::OpaqueTyOrigin::TyAlias => 0,\n         };\n \n-        let span = tcx.def_span(def_id);\n-\n-        // Check if the `impl Trait` bounds include region bounds.\n-        // For example, this would be true for:\n-        //\n-        //     fn foo<'a, 'b, 'c>() -> impl Trait<'c> + 'a + 'b\n-        //\n-        // but false for:\n-        //\n-        //     fn foo<'c>() -> impl Trait<'c>\n-        //\n-        // unless `Trait` was declared like:\n-        //\n-        //     trait Trait<'c>: 'c\n-        //\n-        // in which case it would be true.\n-        //\n-        // This is used during regionck to decide whether we need to\n-        // impose any additional constraints to ensure that region\n-        // variables in `concrete_ty` wind up being constrained to\n-        // something from `substs` (or, at minimum, things that outlive\n-        // the fn body). (Ultimately, writeback is responsible for this\n-        // check.)\n-        let bounds = tcx.explicit_item_bounds(def_id);\n-        debug!(\"{:#?}\", bounds);\n-        let bounds = bounds.iter().map(|(bound, _)| bound.subst(tcx, opaque_type_key.substs));\n-        debug!(\"{:#?}\", bounds);\n-        let opaque_type = tcx.mk_opaque(def_id, opaque_type_key.substs);\n-\n-        // (A) The regions that appear in the hidden type must be equal to\n+        // The regions that appear in the hidden type must be equal to\n         // one of the regions in scope for the opaque type.\n         self.generate_member_constraint(\n             concrete_ty,\n             opaque_defn,\n             opaque_type_key,\n             first_own_region,\n         );\n-\n-        // (B) We can also generate outlives bounds that must be enforced.\n-        for required_region in required_region_bounds(tcx, opaque_type, bounds) {\n-            concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-                tcx,\n-                op: |r| self.sub_regions(infer::CallReturn(span), required_region, r),\n-            });\n-        }\n     }\n \n     /// As a fallback, we sometimes generate an \"in constraint\". For"}]}