{"sha": "a19b164661675be6a03cacfbc652cbd5f06492a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOWIxNjQ2NjE2NzViZTZhMDNjYWNmYmM2NTJjYmQ1ZjA2NDkyYTA=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-10T16:59:48Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-10T17:21:46Z"}, "message": "Correct path docs and add colon2 token to Path ast node", "tree": {"sha": "e4eec2621723596e9bdbe8022157ee6b3b005fff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4eec2621723596e9bdbe8022157ee6b3b005fff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a19b164661675be6a03cacfbc652cbd5f06492a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a19b164661675be6a03cacfbc652cbd5f06492a0", "html_url": "https://github.com/rust-lang/rust/commit/a19b164661675be6a03cacfbc652cbd5f06492a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a19b164661675be6a03cacfbc652cbd5f06492a0/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eedf11ae8897083ba4d5f64e6bce38f4e19cd8e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eedf11ae8897083ba4d5f64e6bce38f4e19cd8e2", "html_url": "https://github.com/rust-lang/rust/commit/eedf11ae8897083ba4d5f64e6bce38f4e19cd8e2"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "fc6733d648cf7352691f7b1c8b13e830ed028a41", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a19b164661675be6a03cacfbc652cbd5f06492a0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19b164661675be6a03cacfbc652cbd5f06492a0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=a19b164661675be6a03cacfbc652cbd5f06492a0", "patch": "@@ -2323,10 +2323,10 @@ impl ArgList {\n /// generic parameters.\n ///\n /// ```\n-/// (0..10).\u2770 collect \u2770 ::<Vec<_>> \u2771 \u2771();\n-/// \u2770 Vec \u2770 ::<u8> \u2770 ::with_capacity \u2771 \u2771 \u2771(1024);\n-/// \u2770 <Foo as Bar> \u2770 ::baz \u2771 \u2771();\n-/// \u2770 <bruh> \u2770 ::bruuh \u2771 \u2771();\n+/// (0..10).\u2770 \u2770 collect \u2771 ::<Vec<_>> \u2771();\n+/// \u2770 \u2770 \u2770 Vec \u2771 ::<u8> \u2771 ::with_capacity \u2771(1024);\n+/// \u2770 \u2770 <\u2770 Foo \u2771 as \u2770 \u2770 bar \u2771 ::Bar \u2771> \u2771 ::baz \u2771();\n+/// \u2770 \u2770 <\u2770 bruh \u2771> \u2771 ::bruuh \u2771();\n /// ```\n ///\n /// [Reference](https://doc.rust-lang.org/reference/paths.html)\n@@ -2336,15 +2336,21 @@ pub struct Path {\n }\n impl Path {\n     pub fn segment(&self) -> Option<PathSegment> { support::child(&self.syntax) }\n+    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n     pub fn qualifier(&self) -> Option<Path> { support::child(&self.syntax) }\n }\n /// Segment of the path to a symbol.\n+/// Only path segment of an absolute path holds the `::` token,\n+/// all other `::` tokens that connect path segments reside under `Path` itself.`\n ///\n /// ```\n-/// (0..10).\u2770 collect \u2771 \u2770 ::<Vec<_>> \u2771();\n-/// \u2770 Vec >| \u2770 ::<u8> \u2771 \u2770 ::with_capacity \u2771(1024);\n-/// \u2770 <Foo as Bar> \u2771 \u2770 ::baz \u2771();\n-/// \u2770 <bruh> \u2771 \u2770 ::bruuh \u2771();\n+/// (0..10).\u2770 collect \u2771 :: \u2770 <Vec<_>> \u2771();\n+/// \u2770 Vec \u2771 :: \u2770 <u8> \u2771 :: \u2770 with_capacity \u2771(1024);\n+/// \u2770 <\u2770 Foo \u2771 as \u2770 bar \u2771 :: \u2770 Bar \u2771> \u2771 :: \u2770 baz \u2771();\n+/// \u2770 <\u2770 bruh \u2771> \u2771 :: \u2770 bruuh \u2771();\n+///\n+/// // Note that only in this case `::` token is inlcuded:\n+/// \u2770 ::foo \u2771;\n /// ```\n ///\n /// [Reference](https://doc.rust-lang.org/reference/paths.html)"}, {"sha": "61580bd1a18b922b56ad25e2f543a1f9d3d1689f", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a19b164661675be6a03cacfbc652cbd5f06492a0/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19b164661675be6a03cacfbc652cbd5f06492a0/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=a19b164661675be6a03cacfbc652cbd5f06492a0", "patch": "@@ -1893,32 +1893,35 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             T![')']\n         }\n \n-        // TODO: correct the example\n         /// Path to a symbol. Includes single identifier names and elaborate paths with\n         /// generic parameters.\n         ///\n         /// ```\n-        /// (0..10).\u2770 collect \u2770 ::<Vec<_>> \u2771 \u2771();\n-        /// \u2770 Vec \u2770 ::<u8> \u2770 ::with_capacity \u2771 \u2771 \u2771(1024);\n-        /// \u2770 <Foo as Bar> \u2770 ::baz \u2771 \u2771();\n-        /// \u2770 <bruh> \u2770 ::bruuh \u2771 \u2771();\n+        /// (0..10).\u2770 \u2770 collect \u2771 ::<Vec<_>> \u2771();\n+        /// \u2770 \u2770 \u2770 Vec \u2771 ::<u8> \u2771 ::with_capacity \u2771(1024);\n+        /// \u2770 \u2770 <\u2770 Foo \u2771 as \u2770 \u2770 bar \u2771 ::Bar \u2771> \u2771 ::baz \u2771();\n+        /// \u2770 \u2770 <\u2770 bruh \u2771> \u2771 ::bruuh \u2771();\n         /// ```\n         ///\n         /// [Reference](https://doc.rust-lang.org/reference/paths.html)\n         struct Path {\n             segment: PathSegment,\n+            T![::],\n             qualifier: Path,\n         }\n \n-        // TODO: verify the example\n-        // TODO: what RetType is doing here? is this for Fn() -> T syntax?\n         /// Segment of the path to a symbol.\n+        /// Only path segment of an absolute path holds the `::` token,\n+        /// all other `::` tokens that connect path segments reside under `Path` itself.`\n         ///\n         /// ```\n-        /// (0..10).\u2770 collect \u2771 \u2770 ::<Vec<_>> \u2771();\n-        /// \u2770 Vec >| \u2770 ::<u8> \u2771 \u2770 ::with_capacity \u2771(1024);\n-        /// \u2770 <Foo as Bar> \u2771 \u2770 ::baz \u2771();\n-        /// \u2770 <bruh> \u2771 \u2770 ::bruuh \u2771();\n+        /// (0..10).\u2770 collect \u2771 :: \u2770 <Vec<_>> \u2771();\n+        /// \u2770 Vec \u2771 :: \u2770 <u8> \u2771 :: \u2770 with_capacity \u2771(1024);\n+        /// \u2770 <\u2770 Foo \u2771 as \u2770 bar \u2771 :: \u2770 Bar \u2771> \u2771 :: \u2770 baz \u2771();\n+        /// \u2770 <\u2770 bruh \u2771> \u2771 :: \u2770 bruuh \u2771();\n+        ///\n+        /// // Note that only in this case `::` token is inlcuded:\n+        /// \u2770 ::foo \u2771;\n         /// ```\n         ///\n         /// [Reference](https://doc.rust-lang.org/reference/paths.html)\n@@ -1956,7 +1959,6 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         /// [Reference](https://doc.rust-lang.org/reference/paths.html#paths-in-expressions)\n         struct TypeArg { TypeRef }\n \n-        // TODO: verify inline type bounds example\n         /// Associated type argument that is passed at generic instantiation site.\n         /// ```\n         /// use foo::<'a, u64, bool, \u2770 Item = Bar \u2771, 42>::baz;"}]}