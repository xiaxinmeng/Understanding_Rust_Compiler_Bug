{"sha": "930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDg4NWQ1ZTVmODE3ZTNkNzYwOWY5M2Q1YmE4OWIxYWJlYmZhZjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-09T08:25:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-13T06:20:46Z"}, "message": "Forbid pub/priv where it has no effect\n\nCloses #5495", "tree": {"sha": "16719bb119d7e3f0aa056d4c3391d6e968bd1198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16719bb119d7e3f0aa056d4c3391d6e968bd1198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "html_url": "https://github.com/rust-lang/rust/commit/930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44675ac6aff91889f960655b0034964740415e8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/44675ac6aff91889f960655b0034964740415e8c", "html_url": "https://github.com/rust-lang/rust/commit/44675ac6aff91889f960655b0034964740415e8c"}], "stats": {"total": 355, "additions": 234, "deletions": 121}, "files": [{"sha": "8ee9006f6136c0f33984a8ce5aa7f43a0dee8c28", "filename": "src/libextra/crypto/sha1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Fcrypto%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Fcrypto%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha1.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -159,7 +159,7 @@ impl Sha1 {\n }\n \n impl Digest for Sha1 {\n-    pub fn reset(&mut self) {\n+    fn reset(&mut self) {\n         self.length_bits = 0;\n         self.h[0] = 0x67452301u32;\n         self.h[1] = 0xEFCDAB89u32;\n@@ -169,9 +169,9 @@ impl Digest for Sha1 {\n         self.buffer.reset();\n         self.computed = false;\n     }\n-    pub fn input(&mut self, msg: &[u8]) { add_input(self, msg); }\n-    pub fn result(&mut self, out: &mut [u8]) { return mk_result(self, out); }\n-    pub fn output_bits(&self) -> uint { 160 }\n+    fn input(&mut self, msg: &[u8]) { add_input(self, msg); }\n+    fn result(&mut self, out: &mut [u8]) { return mk_result(self, out); }\n+    fn output_bits(&self) -> uint { 160 }\n }\n \n #[cfg(test)]"}, {"sha": "28ff16c43e8afbc79d9ad5efe665d35507a6b86d", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -21,9 +21,9 @@ pub struct EnumSet<E> {\n /// An iterface for casting C-like enum to uint and back.\n pub trait CLike {\n     /// Converts C-like enum to uint.\n-    pub fn to_uint(&self) -> uint;\n+    fn to_uint(&self) -> uint;\n     /// Converts uint to C-like enum.\n-    pub fn from_uint(uint) -> Self;\n+    fn from_uint(uint) -> Self;\n }\n \n fn bit<E:CLike>(e: E) -> uint {\n@@ -142,11 +142,11 @@ mod test {\n     }\n \n     impl CLike for Foo {\n-        pub fn to_uint(&self) -> uint {\n+        fn to_uint(&self) -> uint {\n             *self as uint\n         }\n \n-        pub fn from_uint(v: uint) -> Foo {\n+        fn from_uint(v: uint) -> Foo {\n             unsafe { cast::transmute(v) }\n         }\n     }"}, {"sha": "354696ef42060642e23ee3fa6b7e58a756cd57b4", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -537,7 +537,7 @@ impl ToStrRadix for BigUint {\n impl FromStrRadix for BigUint {\n     /// Creates and initializes an BigUint.\n \n-    pub fn from_str_radix(s: &str, radix: uint)\n+    fn from_str_radix(s: &str, radix: uint)\n         -> Option<BigUint> {\n         BigUint::parse_bytes(s.as_bytes(), radix)\n     }"}, {"sha": "a9c3bf98cb6599684c13cfc5bb99bba9abe56e78", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -104,7 +104,7 @@ pub struct Metric {\n pub struct MetricMap(TreeMap<~str,Metric>);\n \n impl Clone for MetricMap {\n-    pub fn clone(&self) -> MetricMap {\n+    fn clone(&self) -> MetricMap {\n         MetricMap((**self).clone())\n     }\n }"}, {"sha": "486a7dab5c1bb105a58c797152254ef2be690c06", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -853,7 +853,7 @@ impl<K: TotalOrd, V, T: Iterator<(K, V)>> Extendable<(K, V), T> for TreeMap<K, V\n }\n \n impl<T: TotalOrd, Iter: Iterator<T>> FromIterator<T, Iter> for TreeSet<T> {\n-    pub fn from_iterator(iter: &mut Iter) -> TreeSet<T> {\n+    fn from_iterator(iter: &mut Iter) -> TreeSet<T> {\n         let mut set = TreeSet::new();\n         set.extend(iter);\n         set"}, {"sha": "3f23cbd02abab64abcea103b919f4d56fcf1b9b2", "filename": "src/libextra/url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -701,7 +701,7 @@ pub fn to_str(url: &Url) -> ~str {\n }\n \n impl ToStr for Url {\n-    pub fn to_str(&self) -> ~str {\n+    fn to_str(&self) -> ~str {\n         to_str(self)\n     }\n }"}, {"sha": "54e7c79e97cc2c96c8cce196a23603dadfff44cb", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -351,6 +351,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n             // Do not check privacy inside items with the resolve_unexported\n             // attribute. This is used for the test runner.\n             if !attr::contains_name(item.attrs, \"!resolve_unexported\") {\n+                check_sane_privacy(tcx, item);\n                 oldvisit::visit_item(item, (method_map, visitor));\n             }\n         },\n@@ -540,3 +541,81 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n     });\n     oldvisit::visit_crate(crate, (method_map, visitor));\n }\n+\n+/// Validates all of the visibility qualifers placed on the item given. This\n+/// ensures that there are no extraneous qualifiers that don't actually do\n+/// anything. In theory these qualifiers wouldn't parse, but that may happen\n+/// later on down the road...\n+fn check_sane_privacy(tcx: ty::ctxt, item: @ast::item) {\n+    match item.node {\n+        // implementations of traits don't need visibility qualifiers because\n+        // that's controlled by having the trait in scope.\n+        ast::item_impl(_, Some(*), _, ref methods) => {\n+            for m in methods.iter() {\n+                match m.vis {\n+                    ast::private | ast::public => {\n+                        tcx.sess.span_err(m.span, \"unnecessary visibility\")\n+                    }\n+                    ast::inherited => {}\n+                }\n+            }\n+        }\n+\n+        ast::item_enum(ref def, _) => {\n+            for v in def.variants.iter() {\n+                match v.node.vis {\n+                    ast::public => {\n+                        if item.vis == ast::public {\n+                            tcx.sess.span_err(v.span, \"unnecessary `pub` \\\n+                                                       visibility\");\n+                        }\n+                    }\n+                    ast::private => {\n+                        if item.vis != ast::public {\n+                            tcx.sess.span_err(v.span, \"unnecessary `priv` \\\n+                                                       visibility\");\n+                        }\n+                    }\n+                    ast::inherited => {}\n+                }\n+            }\n+        }\n+\n+        ast::item_struct(ref def, _) => {\n+            for f in def.fields.iter() {\n+                match f.node.kind {\n+                    ast::named_field(_, ast::public) => {\n+                        tcx.sess.span_err(f.span, \"unnecessary `pub` \\\n+                                                   visibility\");\n+                    }\n+                    ast::named_field(_, ast::private) => {\n+                        // Fields should really be private by default...\n+                    }\n+                    ast::named_field(*) | ast::unnamed_field => {}\n+                }\n+            }\n+        }\n+\n+        ast::item_trait(_, _, ref methods) => {\n+            for m in methods.iter() {\n+                match *m {\n+                    ast::provided(ref m) => {\n+                        match m.vis {\n+                            ast::private | ast::public => {\n+                                tcx.sess.span_err(m.span, \"unnecessary \\\n+                                                           visibility\");\n+                            }\n+                            ast::inherited => {}\n+                        }\n+                    }\n+                    // this is warned about in the parser\n+                    ast::required(*) => {}\n+                }\n+            }\n+        }\n+\n+        ast::item_impl(*) | ast::item_static(*) | ast::item_foreign_mod(*) |\n+        ast::item_fn(*) | ast::item_mod(*) | ast::item_ty(*) |\n+        ast::item_mac(*) => {}\n+    }\n+}"}, {"sha": "7331b50dd107c95a5743829aa46fce6167cfdf7d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -165,7 +165,7 @@ impl<'self> StatRecorder<'self> {\n \n #[unsafe_destructor]\n impl<'self> Drop for StatRecorder<'self> {\n-    pub fn drop(&self) {\n+    fn drop(&self) {\n         if self.ccx.sess.trans_stats() {\n             let end = time::precise_time_ns();\n             let elapsed = ((end - self.start) / 1_000_000) as uint;"}, {"sha": "80d6ce6ab080971f36967675ba5f299d92c1d671", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -709,10 +709,10 @@ pub fn AllBuiltinBounds() -> BuiltinBounds {\n }\n \n impl CLike for BuiltinBound {\n-    pub fn to_uint(&self) -> uint {\n+    fn to_uint(&self) -> uint {\n         *self as uint\n     }\n-    pub fn from_uint(v: uint) -> BuiltinBound {\n+    fn from_uint(v: uint) -> BuiltinBound {\n         unsafe { cast::transmute(v) }\n     }\n }\n@@ -4345,16 +4345,16 @@ pub fn normalize_ty(cx: ctxt, t: t) -> t {\n }\n \n pub trait ExprTyProvider {\n-    pub fn expr_ty(&self, ex: &ast::expr) -> t;\n-    pub fn ty_ctxt(&self) -> ctxt;\n+    fn expr_ty(&self, ex: &ast::expr) -> t;\n+    fn ty_ctxt(&self) -> ctxt;\n }\n \n impl ExprTyProvider for ctxt {\n-    pub fn expr_ty(&self, ex: &ast::expr) -> t {\n+    fn expr_ty(&self, ex: &ast::expr) -> t {\n         expr_ty(*self, ex)\n     }\n \n-    pub fn ty_ctxt(&self) -> ctxt {\n+    fn ty_ctxt(&self) -> ctxt {\n         *self\n     }\n }"}, {"sha": "d27b7f07a12271253b699360a0a430357ede7a2d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -287,11 +287,11 @@ pub fn blank_fn_ctxt(ccx: @mut CrateCtxt,\n }\n \n impl ExprTyProvider for FnCtxt {\n-    pub fn expr_ty(&self, ex: &ast::expr) -> ty::t {\n+    fn expr_ty(&self, ex: &ast::expr) -> ty::t {\n         self.expr_ty(ex)\n     }\n \n-    pub fn ty_ctxt(&self) -> ty::ctxt {\n+    fn ty_ctxt(&self) -> ty::ctxt {\n         self.ccx.tcx\n     }\n }"}, {"sha": "2c8e7b280598ef81603df489b980fdca27750ef4", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -76,12 +76,12 @@ use util::ppaux::UserString;\n use util::ppaux::note_and_explain_region;\n \n pub trait ErrorReporting {\n-    pub fn report_region_errors(@mut self,\n-                                errors: &OptVec<RegionResolutionError>);\n+    fn report_region_errors(@mut self,\n+                            errors: &OptVec<RegionResolutionError>);\n \n-    pub fn report_and_explain_type_error(@mut self,\n-                                         trace: TypeTrace,\n-                                         terr: &ty::type_err);\n+    fn report_and_explain_type_error(@mut self,\n+                                     trace: TypeTrace,\n+                                     terr: &ty::type_err);\n \n     fn values_str(@mut self, values: &ValuePairs) -> Option<~str>;\n \n@@ -112,8 +112,8 @@ pub trait ErrorReporting {\n \n \n impl ErrorReporting for InferCtxt {\n-    pub fn report_region_errors(@mut self,\n-                                errors: &OptVec<RegionResolutionError>) {\n+    fn report_region_errors(@mut self,\n+                            errors: &OptVec<RegionResolutionError>) {\n         for error in errors.iter() {\n             match *error {\n                 ConcreteFailure(origin, sub, sup) => {\n@@ -139,7 +139,7 @@ impl ErrorReporting for InferCtxt {\n         }\n     }\n \n-    pub fn report_and_explain_type_error(@mut self,\n+    fn report_and_explain_type_error(@mut self,\n                                      trace: TypeTrace,\n                                      terr: &ty::type_err) {\n         let tcx = self.tcx;"}, {"sha": "61027519b5b9dddbced8cca323b8f2a686eaf478", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -294,11 +294,11 @@ trait get_and_find_region {\n }\n \n impl get_and_find_region for isr_alist {\n-    pub fn get(&self, br: ty::bound_region) -> ty::Region {\n+    fn get(&self, br: ty::bound_region) -> ty::Region {\n         self.find(br).unwrap()\n     }\n \n-    pub fn find(&self, br: ty::bound_region) -> Option<ty::Region> {\n+    fn find(&self, br: ty::bound_region) -> Option<ty::Region> {\n         let mut ret = None;\n         do list::each(*self) |isr| {\n             let (isr_br, isr_r) = *isr;"}, {"sha": "dd43e22fc0c57b051239e4d09b68652c27cef71e", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -22,18 +22,18 @@ use extra::getopts;\n #[deriving(Clone, Eq)]\n pub enum OutputFormat {\n     /// Markdown\n-    pub Markdown,\n+    Markdown,\n     /// HTML, via markdown and pandoc\n-    pub PandocHtml\n+    PandocHtml\n }\n \n /// How to organize the output\n #[deriving(Clone, Eq)]\n pub enum OutputStyle {\n     /// All in a single document\n-    pub DocPerCrate,\n+    DocPerCrate,\n     /// Each module in its own document\n-    pub DocPerMod\n+    DocPerMod\n }\n \n /// The configuration for a rustdoc session"}, {"sha": "9e72b355bf9f96ae2d10f4a4c1b36893f0c96319", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -414,11 +414,11 @@ impl_num_cast!(f64,   to_f64)\n impl_num_cast!(float, to_float)\n \n pub trait ToStrRadix {\n-    pub fn to_str_radix(&self, radix: uint) -> ~str;\n+    fn to_str_radix(&self, radix: uint) -> ~str;\n }\n \n pub trait FromStrRadix {\n-    pub fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n+    fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n }\n \n /// Calculates a power to a given radix, optimized for uint `pow` and `radix`."}, {"sha": "b13d46d540d4adae771882066939ec0011ffe512", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -394,7 +394,7 @@ impl<T, I: Int> Add<I, *T> for *T {\n     /// Add an integer value to a pointer to get an offset pointer.\n     /// Is calculated according to the size of the type pointed to.\n     #[inline]\n-    pub fn add(&self, rhs: &I) -> *T {\n+    fn add(&self, rhs: &I) -> *T {\n         self.offset(rhs.to_int() as int)\n     }\n }\n@@ -404,7 +404,7 @@ impl<T, I: Int> Sub<I, *T> for *T {\n     /// Subtract an integer value from a pointer to get an offset pointer.\n     /// Is calculated according to the size of the type pointed to.\n     #[inline]\n-    pub fn sub(&self, rhs: &I) -> *T {\n+    fn sub(&self, rhs: &I) -> *T {\n         self.offset(-rhs.to_int() as int)\n     }\n }\n@@ -414,7 +414,7 @@ impl<T, I: Int> Add<I, *mut T> for *mut T {\n     /// Add an integer value to a pointer to get an offset pointer.\n     /// Is calculated according to the size of the type pointed to.\n     #[inline]\n-    pub fn add(&self, rhs: &I) -> *mut T {\n+    fn add(&self, rhs: &I) -> *mut T {\n         self.offset(rhs.to_int() as int)\n     }\n }\n@@ -424,7 +424,7 @@ impl<T, I: Int> Sub<I, *mut T> for *mut T {\n     /// Subtract an integer value from a pointer to get an offset pointer.\n     /// Is calculated according to the size of the type pointed to.\n     #[inline]\n-    pub fn sub(&self, rhs: &I) -> *mut T {\n+    fn sub(&self, rhs: &I) -> *mut T {\n         self.offset(-rhs.to_int() as int)\n     }\n }"}, {"sha": "500278fddb0b16110bd329e42ebc62b7566b560c", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -260,7 +260,7 @@ pub mod rustrt {\n /// A random number generator\n pub trait Rng {\n     /// Return the next random integer\n-    pub fn next(&mut self) -> u32;\n+    fn next(&mut self) -> u32;\n }\n \n /// A value with a particular weight compared to other values\n@@ -825,7 +825,7 @@ pub struct XorShiftRng {\n \n impl Rng for XorShiftRng {\n     #[inline]\n-    pub fn next(&mut self) -> u32 {\n+    fn next(&mut self) -> u32 {\n         let x = self.x;\n         let t = x ^ (x << 11);\n         self.x = self.y;"}, {"sha": "06424fee8bc121831a71eb2aeb5afd69a8240f75", "filename": "src/libstd/rt/io/comm_adapters.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Frt%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Frt%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fcomm_adapters.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -31,9 +31,9 @@ impl<C: GenericChan<~[u8]>> ChanWriter<C> {\n }\n \n impl<C: GenericChan<~[u8]>> Writer for ChanWriter<C> {\n-    pub fn write(&mut self, _buf: &[u8]) { fail!() }\n+    fn write(&mut self, _buf: &[u8]) { fail!() }\n \n-    pub fn flush(&mut self) { fail!() }\n+    fn flush(&mut self) { fail!() }\n }\n \n struct ReaderPort<R>;"}, {"sha": "6c5a28b31b1e4e43568cb442ed5d06c35dc13900", "filename": "src/libstd/rt/uv/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -90,8 +90,8 @@ pub trait Request { }\n \n /// A type that wraps a native handle\n pub trait NativeHandle<T> {\n-    pub fn from_native_handle(T) -> Self;\n-    pub fn native_handle(&self) -> T;\n+    fn from_native_handle(T) -> Self;\n+    fn native_handle(&self) -> T;\n }\n \n impl Loop {\n@@ -155,15 +155,15 @@ pub trait WatcherInterop {\n \n impl<H, W: Watcher + NativeHandle<*H>> WatcherInterop for W {\n     /// Get the uv event loop from a Watcher\n-    pub fn event_loop(&self) -> Loop {\n+    fn event_loop(&self) -> Loop {\n         unsafe {\n             let handle = self.native_handle();\n             let loop_ = uvll::get_loop_for_uv_handle(handle);\n             NativeHandle::from_native_handle(loop_)\n         }\n     }\n \n-    pub fn install_watcher_data(&mut self) {\n+    fn install_watcher_data(&mut self) {\n         unsafe {\n             let data = ~WatcherData {\n                 read_cb: None,\n@@ -182,15 +182,15 @@ impl<H, W: Watcher + NativeHandle<*H>> WatcherInterop for W {\n         }\n     }\n \n-    pub fn get_watcher_data<'r>(&'r mut self) -> &'r mut WatcherData {\n+    fn get_watcher_data<'r>(&'r mut self) -> &'r mut WatcherData {\n         unsafe {\n             let data = uvll::get_data_for_uv_handle(self.native_handle());\n             let data = transmute::<&*c_void, &mut ~WatcherData>(&data);\n             return &mut **data;\n         }\n     }\n \n-    pub fn drop_watcher_data(&mut self) {\n+    fn drop_watcher_data(&mut self) {\n         unsafe {\n             let data = uvll::get_data_for_uv_handle(self.native_handle());\n             let _data = transmute::<*c_void, ~WatcherData>(data);"}, {"sha": "886e4d86ab643f23d3ed3003489ad154dae749e2", "filename": "src/libstd/str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -142,13 +142,13 @@ pub fn push_str(lhs: &mut ~str, rhs: &str) {\n \n #[allow(missing_doc)]\n pub trait StrVector {\n-    pub fn concat(&self) -> ~str;\n-    pub fn connect(&self, sep: &str) -> ~str;\n+    fn concat(&self) -> ~str;\n+    fn connect(&self, sep: &str) -> ~str;\n }\n \n impl<'self, S: Str> StrVector for &'self [S] {\n     /// Concatenate a vector of strings.\n-    pub fn concat(&self) -> ~str {\n+    fn concat(&self) -> ~str {\n         if self.is_empty() { return ~\"\"; }\n \n         let len = self.iter().map(|s| s.as_slice().len()).sum();\n@@ -171,7 +171,7 @@ impl<'self, S: Str> StrVector for &'self [S] {\n     }\n \n     /// Concatenate a vector of strings, placing a given separator between each.\n-    pub fn connect(&self, sep: &str) -> ~str {\n+    fn connect(&self, sep: &str) -> ~str {\n         if self.is_empty() { return ~\"\"; }\n \n         // concat is faster\n@@ -1554,7 +1554,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// # Return value\n     ///\n     /// The original string with all occurances of `from` replaced with `to`\n-    pub fn replace(&self, from: &str, to: &str) -> ~str {\n+    fn replace(&self, from: &str, to: &str) -> ~str {\n         let mut result = ~\"\";\n         let mut last_end = 0;\n         for (start, end) in self.matches_index_iter(from) {\n@@ -2081,7 +2081,7 @@ impl OwnedStr for ~str {\n     /// * s - A string\n     /// * n - The number of bytes to reserve space for\n     #[inline]\n-    pub fn reserve(&mut self, n: uint) {\n+    fn reserve(&mut self, n: uint) {\n         unsafe {\n             let v: &mut ~[u8] = cast::transmute(self);\n             (*v).reserve(n);"}, {"sha": "27e09d8547989f1bbe2214f9adaceb97805fb08d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -313,18 +313,18 @@ pub fn connect_slices<T:Clone>(v: &[&[T]], sep: &T) -> ~[T] { v.connect_vec(sep)\n pub trait VectorVector<T> {\n     // FIXME #5898: calling these .concat and .connect conflicts with\n     // StrVector::con{cat,nect}, since they have generic contents.\n-    pub fn concat_vec(&self) -> ~[T];\n-    pub fn connect_vec(&self, sep: &T) -> ~[T];\n+    fn concat_vec(&self) -> ~[T];\n+    fn connect_vec(&self, sep: &T) -> ~[T];\n }\n \n impl<'self, T:Clone> VectorVector<T> for &'self [~[T]] {\n     /// Flattens a vector of slices of T into a single vector of T.\n-    pub fn concat_vec(&self) -> ~[T] {\n+    fn concat_vec(&self) -> ~[T] {\n         self.flat_map(|inner| (*inner).clone())\n     }\n \n     /// Concatenate a vector of vectors, placing a given separator between each.\n-    pub fn connect_vec(&self, sep: &T) -> ~[T] {\n+    fn connect_vec(&self, sep: &T) -> ~[T] {\n         let mut r = ~[];\n         let mut first = true;\n         for inner in self.iter() {\n@@ -337,12 +337,12 @@ impl<'self, T:Clone> VectorVector<T> for &'self [~[T]] {\n \n impl<'self,T:Clone> VectorVector<T> for &'self [&'self [T]] {\n     /// Flattens a vector of slices of T into a single vector of T.\n-    pub fn concat_vec(&self) -> ~[T] {\n+    fn concat_vec(&self) -> ~[T] {\n         self.flat_map(|&inner| inner.to_owned())\n     }\n \n     /// Concatenate a vector of slices, placing a given separator between each.\n-    pub fn connect_vec(&self, sep: &T) -> ~[T] {\n+    fn connect_vec(&self, sep: &T) -> ~[T] {\n         let mut r = ~[];\n         let mut first = true;\n         for &inner in self.iter() {\n@@ -1649,7 +1649,7 @@ impl<T:Eq> OwnedEqVector<T> for ~[T] {\n     * Remove consecutive repeated elements from a vector; if the vector is\n     * sorted, this removes all duplicates.\n     */\n-    pub fn dedup(&mut self) {\n+    fn dedup(&mut self) {\n         unsafe {\n             // Although we have a mutable reference to `self`, we cannot make\n             // *arbitrary* changes. There exists the possibility that this\n@@ -2079,7 +2079,7 @@ pub mod bytes {\n     /// A trait for operations on mutable operations on `[u8]`\n     pub trait MutableByteVector {\n         /// Sets all bytes of the receiver to the given value.\n-        pub fn set_memory(self, value: u8);\n+        fn set_memory(self, value: u8);\n     }\n \n     impl<'self> MutableByteVector for &'self mut [u8] {"}, {"sha": "02eaf432b5402ba91b62217807ecd2a922cda2ee", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -672,7 +672,7 @@ pub fn walk_pat(pat: @pat, it: &fn(@pat) -> bool) -> bool {\n }\n \n pub trait EachViewItem {\n-    pub fn each_view_item(&self, f: @fn(&ast::view_item) -> bool) -> bool;\n+    fn each_view_item(&self, f: @fn(&ast::view_item) -> bool) -> bool;\n }\n \n struct EachViewItemData {"}, {"sha": "51df08f52283f9c5509cc852a9d22a2d5d90ea72", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -82,7 +82,7 @@ impl AttrMetaMethods for MetaItem {\n         }\n     }\n \n-    pub fn name_str_pair(&self) -> Option<(@str, @str)> {\n+    fn name_str_pair(&self) -> Option<(@str, @str)> {\n         self.value_str().map_move(|s| (self.name(), s))\n     }\n }\n@@ -105,14 +105,14 @@ pub trait AttributeMethods {\n \n impl AttributeMethods for Attribute {\n     /// Extract the MetaItem from inside this Attribute.\n-    pub fn meta(&self) -> @MetaItem {\n+    fn meta(&self) -> @MetaItem {\n         self.node.value\n     }\n \n     /// Convert self to a normal #[doc=\"foo\"] comment, if it is a\n     /// comment like `///` or `/** */`. (Returns self unchanged for\n     /// non-sugared doc attributes.)\n-    pub fn desugar_doc(&self) -> Attribute {\n+    fn desugar_doc(&self) -> Attribute {\n         if self.node.is_sugared_doc {\n             let comment = self.value_str().unwrap();\n             let meta = mk_name_value_item_str(@\"doc\","}, {"sha": "d4337523cfb25826f9850ec945e7ecfad45aba3b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -194,10 +194,10 @@ pub struct FileLines\n // represents the origin of a file:\n pub enum FileSubstr {\n     // indicates that this is a normal standalone file:\n-    pub FssNone,\n+    FssNone,\n     // indicates that this \"file\" is actually a substring\n     // of another file that appears earlier in the codemap\n-    pub FssInternal(span),\n+    FssInternal(span),\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap"}, {"sha": "6b028e25c0fff73ef3b8833ed27329167dcc6df3", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -542,7 +542,7 @@ impl<'self> MethodDef<'self> {\n             id: cx.next_id(),\n             span: span,\n             self_id: cx.next_id(),\n-            vis: ast::public\n+            vis: ast::inherited,\n         }\n     }\n "}, {"sha": "9d82bb9c4f8abf07357e0987ca06e6a7394a227b", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -40,11 +40,11 @@ pub mod rt {\n     pub use codemap::{BytePos, span, dummy_spanned};\n \n     pub trait ToTokens {\n-        pub fn to_tokens(&self, _cx: @ExtCtxt) -> ~[token_tree];\n+        fn to_tokens(&self, _cx: @ExtCtxt) -> ~[token_tree];\n     }\n \n     impl ToTokens for ~[token_tree] {\n-        pub fn to_tokens(&self, _cx: @ExtCtxt) -> ~[token_tree] {\n+        fn to_tokens(&self, _cx: @ExtCtxt) -> ~[token_tree] {\n             (*self).clone()\n         }\n     }\n@@ -65,7 +65,7 @@ pub mod rt {\n \n     pub trait ToSource {\n         // Takes a thing and generates a string containing rust code for it.\n-        pub fn to_source(&self) -> @str;\n+        fn to_source(&self) -> @str;\n     }\n \n     impl ToSource for ast::ident {"}, {"sha": "2d7801a22dedab7c4a2c02af0a99e13bdd42f408", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -124,7 +124,7 @@ impl<T:Clone> OptVec<T> {\n }\n \n impl<A:Eq> Eq for OptVec<A> {\n-    pub fn eq(&self, other: &OptVec<A>) -> bool {\n+    fn eq(&self, other: &OptVec<A>) -> bool {\n         // Note: cannot use #[deriving(Eq)] here because\n         // (Empty, Vec(~[])) ought to be equal.\n         match (self, other) {\n@@ -135,7 +135,7 @@ impl<A:Eq> Eq for OptVec<A> {\n         }\n     }\n \n-    pub fn ne(&self, other: &OptVec<A>) -> bool {\n+    fn ne(&self, other: &OptVec<A>) -> bool {\n         !self.eq(other)\n     }\n }"}, {"sha": "01c1af7464db618537f4a311c80fa04fa3c2538c", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -65,6 +65,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteExternVisibility,\n     ObsoleteUnsafeExternFn,\n     ObsoletePrivVisibility,\n+    ObsoleteTraitFuncVisibility,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -95,7 +96,7 @@ pub trait ParserObsoleteMethods {\n \n impl ParserObsoleteMethods for Parser {\n     /// Reports an obsolete syntax non-fatal error.\n-    pub fn obsolete(&self, sp: span, kind: ObsoleteSyntax) {\n+    fn obsolete(&self, sp: span, kind: ObsoleteSyntax) {\n         let (kind_str, desc) = match kind {\n             ObsoleteLet => (\n                 \"`let` in field declaration\",\n@@ -258,14 +259,18 @@ impl ParserObsoleteMethods for Parser {\n                 \"`priv` not necessary\",\n                 \"an item without a visibility qualifier is private by default\"\n             ),\n+            ObsoleteTraitFuncVisibility => (\n+                \"visibility not necessary\",\n+                \"trait functions inherit the visibility of the trait itself\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);\n     }\n \n     // Reports an obsolete syntax non-fatal error, and returns\n     // a placeholder expression\n-    pub fn obsolete_expr(&self, sp: span, kind: ObsoleteSyntax) -> @expr {\n+    fn obsolete_expr(&self, sp: span, kind: ObsoleteSyntax) -> @expr {\n         self.obsolete(sp, kind);\n         self.mk_expr(sp.lo, sp.hi, expr_lit(@respan(sp, lit_nil)))\n     }\n@@ -283,7 +288,7 @@ impl ParserObsoleteMethods for Parser {\n         }\n     }\n \n-    pub fn token_is_obsolete_ident(&self, ident: &str, token: &Token)\n+    fn token_is_obsolete_ident(&self, ident: &str, token: &Token)\n                                    -> bool {\n         match *token {\n             token::IDENT(sid, _) => {\n@@ -293,11 +298,11 @@ impl ParserObsoleteMethods for Parser {\n         }\n     }\n \n-    pub fn is_obsolete_ident(&self, ident: &str) -> bool {\n+    fn is_obsolete_ident(&self, ident: &str) -> bool {\n         self.token_is_obsolete_ident(ident, self.token)\n     }\n \n-    pub fn eat_obsolete_ident(&self, ident: &str) -> bool {\n+    fn eat_obsolete_ident(&self, ident: &str) -> bool {\n         if self.is_obsolete_ident(ident) {\n             self.bump();\n             true\n@@ -306,7 +311,7 @@ impl ParserObsoleteMethods for Parser {\n         }\n     }\n \n-    pub fn try_parse_obsolete_struct_ctor(&self) -> bool {\n+    fn try_parse_obsolete_struct_ctor(&self) -> bool {\n         if self.eat_obsolete_ident(\"new\") {\n             self.obsolete(*self.last_span, ObsoleteStructCtor);\n             self.parse_fn_decl();\n@@ -317,7 +322,7 @@ impl ParserObsoleteMethods for Parser {\n         }\n     }\n \n-    pub fn try_parse_obsolete_with(&self) -> bool {\n+    fn try_parse_obsolete_with(&self) -> bool {\n         if *self.token == token::COMMA\n             && self.look_ahead(1,\n                                |t| self.token_is_obsolete_ident(\"with\", t)) {\n@@ -332,7 +337,7 @@ impl ParserObsoleteMethods for Parser {\n         }\n     }\n \n-    pub fn try_parse_obsolete_priv_section(&self, attrs: &[Attribute])\n+    fn try_parse_obsolete_priv_section(&self, attrs: &[Attribute])\n                                            -> bool {\n         if self.is_keyword(keywords::Priv) &&\n                 self.look_ahead(1, |t| *t == token::LBRACE) {"}, {"sha": "b38de31c56a7ff8117836a1bf5ea5f6a9001021e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -70,24 +70,7 @@ use parse::common::{SeqSep, seq_sep_none};\n use parse::common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed};\n use parse::lexer::reader;\n use parse::lexer::TokenAndSpan;\n-use parse::obsolete::{ObsoleteClassTraits};\n-use parse::obsolete::{ObsoleteLet, ObsoleteFieldTerminator};\n-use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove, ObsoleteSwap};\n-use parse::obsolete::ObsoleteSyntax;\n-use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n-use parse::obsolete::{ObsoleteMutOwnedPointer};\n-use parse::obsolete::{ObsoleteMutVector, ObsoleteImplVisibility};\n-use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n-use parse::obsolete::{ObsoletePostFnTySigil};\n-use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n-use parse::obsolete::ObsoleteMode;\n-use parse::obsolete::{ObsoleteLifetimeNotation, ObsoleteConstManagedPointer};\n-use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n-use parse::obsolete::{ObsoleteConstItem, ObsoleteFixedLengthVectorType};\n-use parse::obsolete::{ObsoleteNamedExternModule, ObsoleteMultipleLocalDecl};\n-use parse::obsolete::{ObsoleteMutWithMultipleBindings};\n-use parse::obsolete::{ObsoleteExternVisibility, ObsoleteUnsafeExternFn};\n-use parse::obsolete::{ParserObsoleteMethods, ObsoletePrivVisibility};\n+use parse::obsolete::*;\n use parse::token::{can_begin_expr, get_ident_interner, ident_to_str, is_ident};\n use parse::token::{is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, keywords, special_idents};\n@@ -932,6 +915,10 @@ impl Parser {\n                 debug!(\"parse_trait_methods(): parsing required method\");\n                 // NB: at the moment, visibility annotations on required\n                 // methods are ignored; this could change.\n+                if vis != ast::inherited {\n+                    self.obsolete(*self.last_span,\n+                                  ObsoleteTraitFuncVisibility);\n+                }\n                 required(TypeMethod {\n                     ident: ident,\n                     attrs: attrs,"}, {"sha": "e1ecbf8c5432e65de64ba295bcd5befec6d9eeca", "filename": "src/test/auxiliary/private_variant_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -1,4 +1,4 @@\n pub enum Foo {\n-    pub Bar,\n+    Bar,\n     priv Baz,\n }"}, {"sha": "bb20b04762d5af873b51c18c710e3983ccd20900", "filename": "src/test/auxiliary/reexported_static_methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fauxiliary%2Freexported_static_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fauxiliary%2Freexported_static_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Freexported_static_methods.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -14,20 +14,20 @@ pub use sub_foo::Boz;\n pub use sub_foo::Bort;\n \n pub trait Bar {\n-    pub fn bar() -> Self;\n+    fn bar() -> Self;\n }\n \n impl Bar for int {\n-    pub fn bar() -> int { 84 }\n+    fn bar() -> int { 84 }\n }\n \n pub mod sub_foo {\n     pub trait Foo {\n-        pub fn foo() -> Self;\n+        fn foo() -> Self;\n     }\n \n     impl Foo for int {\n-        pub fn foo() -> int { 42 }\n+        fn foo() -> int { 42 }\n     }\n \n     pub struct Boz {"}, {"sha": "75bc93c6d0b30725f3d188f18e7ebd00f5093284", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -15,19 +15,17 @@\n struct Foo {\n     a: int,\n     priv b: int,\n-    pub c: int, // doesn't matter, Foo is private\n }\n \n pub struct PubFoo { //~ ERROR: missing documentation\n     a: int,      //~ ERROR: missing documentation\n     priv b: int,\n-    pub c: int,  //~ ERROR: missing documentation\n }\n \n #[allow(missing_doc)]\n pub struct PubFoo2 {\n     a: int,\n-    pub c: int,\n+    c: int,\n }\n \n /// dox\n@@ -44,9 +42,9 @@ pub trait C {} //~ ERROR: missing documentation\n \n trait Bar {\n     /// dox\n-    pub fn foo();\n+    fn foo();\n     fn foo2(); //~ ERROR: missing documentation\n-    pub fn foo3(); //~ ERROR: missing documentation\n+    fn foo3(); //~ ERROR: missing documentation\n }\n \n impl Foo {\n@@ -59,13 +57,13 @@ impl Foo {\n \n #[allow(missing_doc)]\n trait F {\n-    pub fn a();\n+    fn a();\n     fn b(&self);\n }\n \n // should need to redefine documentation for implementations of traits\n impl F for Foo {\n-    pub fn a() {}\n+    fn a() {}\n     fn b(&self) {}\n }\n "}, {"sha": "3d6841c919a4d2aa6903f7e334a39ce2a55d04ba", "filename": "src/test/compile-fail/useless-priv.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A { pub i: int }         //~ ERROR: unnecessary `pub`\n+struct B { priv i: int }        // don't warn b/c B can still be returned\n+pub enum C { pub Variant }      //~ ERROR: unnecessary `pub`\n+enum D { priv Variant2 }        //~ ERROR: unnecessary `priv`\n+\n+pub trait E {\n+    pub fn foo() {}             //~ ERROR: unnecessary visibility\n+}\n+trait F { pub fn foo() {} }     //~ ERROR: unnecessary visibility\n+\n+impl E for A {\n+    pub fn foo() {}             //~ ERROR: unnecessary visibility\n+}\n+\n+fn main() {}"}, {"sha": "0d94300329c2daedc899814770d5472ff049fecb", "filename": "src/test/compile-fail/useless-priv2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait E {\n+    pub fn foo();               //~ ERROR: obsolete syntax\n+}\n+trait F { pub fn foo(); }       //~ ERROR: obsolete syntax\n+\n+struct B;\n+impl E for B {\n+    priv fn foo() {}             //~ ERROR: obsolete syntax\n+}"}, {"sha": "ea711d78dd28e0bb890693b42e0b3d696739924a", "filename": "src/test/run-pass/bug-7295.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7295.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n pub trait Foo<T> {\n-    pub fn func1<U>(&self, t: U);\n+    fn func1<U>(&self, t: U);\n \n-    pub fn func2<U>(&self, t: U) {\n+    fn func2<U>(&self, t: U) {\n         self.func1(t);\n     }\n }"}, {"sha": "1ea8312ddd927b2bdc2f94b2c51229dec85745e4", "filename": "src/test/run-pass/issue-7712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7712.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -11,7 +11,7 @@\n // compile-flags:-Z debug-info\n \n pub trait TraitWithDefaultMethod {\n-    pub fn method(self) {\n+    fn method(self) {\n         ()\n     }\n }"}, {"sha": "180cd115c96e8503002aae46475672494d1d94f5", "filename": "src/test/run-pass/static-methods-in-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930885d5e5f817e3d7609f93d5ba89b1abebfaf4/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs?ref=930885d5e5f817e3d7609f93d5ba89b1abebfaf4", "patch": "@@ -10,17 +10,17 @@\n \n mod a {\n     pub trait Foo {\n-        pub fn foo() -> Self;\n+        fn foo() -> Self;\n     }\n \n     impl Foo for int {\n-        pub fn foo() -> int {\n+        fn foo() -> int {\n             3\n         }\n     }\n \n     impl Foo for uint {\n-        pub fn foo() -> uint {\n+        fn foo() -> uint {\n             5u\n         }\n     }"}]}