{"sha": "f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTc5MjQ3ZDFkNjljMWE4ZmI3Y2QxZDI4MjlhNjI5YmFmOWQ5NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-24T01:41:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-24T01:41:30Z"}, "message": "auto merge of #8705 : brson/rust/lesscxx, r=graydon", "tree": {"sha": "f0113632549a4b009cb8a37cb2ef3de73d69c9cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0113632549a4b009cb8a37cb2ef3de73d69c9cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "html_url": "https://github.com/rust-lang/rust/commit/f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "html_url": "https://github.com/rust-lang/rust/commit/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea"}, {"sha": "9cdfe1e6039598961838ba2cc88a6ed6aa5449bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdfe1e6039598961838ba2cc88a6ed6aa5449bf", "html_url": "https://github.com/rust-lang/rust/commit/9cdfe1e6039598961838ba2cc88a6ed6aa5449bf"}], "stats": {"total": 954, "additions": 116, "deletions": 838}, "files": [{"sha": "6a9620c7364d25f092125106d2ff40f2af69c532", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -63,7 +63,6 @@ endif\n endif\n \n RUNTIME_CXXS_$(1)_$(2) := \\\n-              rt/sync/timer.cpp \\\n               rt/sync/lock_and_signal.cpp \\\n               rt/sync/rust_thread.cpp \\\n               rt/rust_builtin.cpp \\\n@@ -72,13 +71,9 @@ RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/rust_upcall.cpp \\\n               rt/rust_uv.cpp \\\n               rt/rust_crate_map.cpp \\\n-              rt/rust_gc_metadata.cpp \\\n-              rt/rust_util.cpp \\\n               rt/rust_log.cpp \\\n-              rt/rust_exchange_alloc.cpp \\\n               rt/isaac/randport.cpp \\\n               rt/miniz.cpp \\\n-              rt/rust_abi.cpp \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\\n               rt/arch/$$(HOST_$(1))/context.cpp \\"}, {"sha": "6119170f13057f75e5fe8ea63f425b4a24e9ba60", "filename": "src/libextra/time.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -121,6 +121,9 @@ pub struct Tm {\n }\n \n pub fn empty_tm() -> Tm {\n+    // 64 is the max size of the timezone buffer allocated on windows\n+    // in rust_localtime. In glibc the max timezone size is supposedly 3.\n+    let zone = str::with_capacity(64);\n     Tm {\n         tm_sec: 0_i32,\n         tm_min: 0_i32,\n@@ -132,7 +135,7 @@ pub fn empty_tm() -> Tm {\n         tm_yday: 0_i32,\n         tm_isdst: 0_i32,\n         tm_gmtoff: 0_i32,\n-        tm_zone: ~\"\",\n+        tm_zone: zone,\n         tm_nsec: 0_i32,\n     }\n }"}, {"sha": "aa8c5dd46743e25ed9e85a8d13d760c4a27366b7", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -40,12 +40,10 @@ impl LocalHeap {\n     #[fixed_stack_segment] #[inline(never)]\n     pub fn new() -> LocalHeap {\n         unsafe {\n-            // Don't need synchronization for the single-threaded local heap\n-            let synchronized = false as uintptr_t;\n             // XXX: These usually come from the environment\n             let detailed_leaks = false as uintptr_t;\n             let poison_on_free = false as uintptr_t;\n-            let region = rust_new_memory_region(synchronized, detailed_leaks, poison_on_free);\n+            let region = rust_new_memory_region(detailed_leaks, poison_on_free);\n             assert!(region.is_not_null());\n             let boxed = rust_new_boxed_region(region, poison_on_free);\n             assert!(boxed.is_not_null());\n@@ -109,8 +107,7 @@ pub fn live_allocs() -> *raw::Box<()> {\n \n extern {\n     #[fast_ffi]\n-    fn rust_new_memory_region(synchronized: uintptr_t,\n-                               detailed_leaks: uintptr_t,\n+    fn rust_new_memory_region(detailed_leaks: uintptr_t,\n                                poison_on_free: uintptr_t) -> *MemoryRegion;\n     #[fast_ffi]\n     fn rust_delete_memory_region(region: *MemoryRegion);"}, {"sha": "ead0fb63793ce627fcb5ecc17cab1ee5b0647939", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -224,10 +224,7 @@ pub fn init(argc: int, argv: **u8, crate_map: *u8) {\n         args::init(argc, argv);\n         env::init();\n         logging::init(crate_map);\n-        rust_update_gc_metadata(crate_map);\n     }\n-\n-    externfn!(fn rust_update_gc_metadata(crate_map: *u8));\n }\n \n /// One-time runtime cleanup."}, {"sha": "f2ede8872c298440116e618b06f42e73c3274078", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -14,6 +14,7 @@ use libc;\n use option::{Some, None};\n use os;\n use str::StrSlice;\n+use unstable::atomics::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n \n #[cfg(target_os=\"macos\")]\n use unstable::running_on_valgrind;\n@@ -129,24 +130,12 @@ memory and partly incapable of presentation to others.\",\n     }\n }\n \n-pub fn set_exit_status(code: int) {\n-    #[fixed_stack_segment]; #[inline(never)];\n-    unsafe {\n-        return rust_set_exit_status_newrt(code as libc::uintptr_t);\n-    }\n+static mut EXIT_STATUS: AtomicInt = INIT_ATOMIC_INT;\n \n-    extern {\n-        fn rust_set_exit_status_newrt(code: libc::uintptr_t);\n-    }\n+pub fn set_exit_status(code: int) {\n+    unsafe { EXIT_STATUS.store(code, SeqCst) }\n }\n \n pub fn get_exit_status() -> int {\n-    #[fixed_stack_segment]; #[inline(never)];\n-    unsafe {\n-        return rust_get_exit_status_newrt() as int;\n-    }\n-\n-    extern {\n-        fn rust_get_exit_status_newrt() -> libc::uintptr_t;\n-    }\n+    unsafe { EXIT_STATUS.load(SeqCst) }\n }"}, {"sha": "4a34312c6d4a5582cfb6b7bcc64dfccbb10ddfe4", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-#include \"sync/sync.h\"\n #include \"memory_region.h\"\n \n #if RUSTRT_TRACK_ALLOCATIONS >= 3\n@@ -42,30 +41,25 @@ inline void memory_region::maybe_print_backtrace(const alloc_header *header) con\n #   endif\n }\n \n-memory_region::memory_region(bool synchronized,\n-                             bool detailed_leaks,\n+memory_region::memory_region(bool detailed_leaks,\n                              bool poison_on_free) :\n     _parent(NULL), _live_allocations(0),\n     _detailed_leaks(detailed_leaks),\n-    _poison_on_free(poison_on_free),\n-    _synchronized(synchronized) {\n+    _poison_on_free(poison_on_free) {\n }\n \n memory_region::memory_region(memory_region *parent) :\n     _parent(parent), _live_allocations(0),\n     _detailed_leaks(parent->_detailed_leaks),\n-    _poison_on_free(parent->_poison_on_free),\n-    _synchronized(parent->_synchronized) {\n+    _poison_on_free(parent->_poison_on_free) {\n }\n \n void memory_region::add_alloc() {\n-    //_live_allocations++;\n-    sync::increment(_live_allocations);\n+    _live_allocations++;\n }\n \n void memory_region::dec_alloc() {\n-    //_live_allocations--;\n-    sync::decrement(_live_allocations);\n+    _live_allocations--;\n }\n \n void memory_region::free(void *mem) {\n@@ -112,7 +106,6 @@ memory_region::realloc(void *mem, size_t orig_size) {\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 2\n-    if (_synchronized) { _lock.lock(); }\n     if (_allocation_list[newMem->index] != alloc) {\n         printf(\"at index %d, found %p, expected %p\\n\",\n                alloc->index, _allocation_list[alloc->index], alloc);\n@@ -125,7 +118,6 @@ memory_region::realloc(void *mem, size_t orig_size) {\n         // printf(\"realloc: stored %p at index %d, replacing %p\\n\",\n         //        newMem, index, mem);\n     }\n-    if (_synchronized) { _lock.unlock(); }\n #   endif\n \n     return get_data(newMem);\n@@ -160,9 +152,7 @@ memory_region::malloc(size_t size, const char *tag) {\n }\n \n memory_region::~memory_region() {\n-    if (_synchronized) { _lock.lock(); }\n     if (_live_allocations == 0 && !_detailed_leaks) {\n-        if (_synchronized) { _lock.unlock(); }\n         return;\n     }\n     char msg[128];\n@@ -193,7 +183,6 @@ memory_region::~memory_region() {\n         fprintf(stderr, \"%s\\n\", msg);\n         assert(false);\n     }\n-    if (_synchronized) { _lock.unlock(); }\n }\n \n void\n@@ -204,7 +193,6 @@ memory_region::release_alloc(void *mem) {\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 2\n-    if (_synchronized) { _lock.lock(); }\n     if (((size_t) alloc->index) >= _allocation_list.size()) {\n         printf(\"free: ptr 0x%\" PRIxPTR \" (%s) index %d is beyond allocation_list of size %zu\\n\",\n                (uintptr_t) get_data(alloc), alloc->tag, alloc->index, _allocation_list.size());\n@@ -222,7 +210,6 @@ memory_region::release_alloc(void *mem) {\n         _allocation_list[alloc->index] = NULL;\n         alloc->index = -1;\n     }\n-    if (_synchronized) { _lock.unlock(); }\n #   endif\n \n     dec_alloc();\n@@ -236,9 +223,7 @@ memory_region::claim_alloc(void *mem) {\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 2\n-    if (_synchronized) { _lock.lock(); }\n     alloc->index = _allocation_list.append(alloc);\n-    if (_synchronized) { _lock.unlock(); }\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 3"}, {"sha": "ace463ede2187eb4c5527bd049c14f9b5fc37e00", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -59,7 +59,6 @@ class memory_region {\n     array_list<alloc_header *> _allocation_list;\n     const bool _detailed_leaks;\n     const bool _poison_on_free;\n-    const bool _synchronized;\n     lock_and_signal _lock;\n \n     void add_alloc();\n@@ -77,8 +76,7 @@ class memory_region {\n     memory_region& operator=(const memory_region& rhs);\n \n public:\n-    memory_region(bool synchronized,\n-                  bool detailed_leaks, bool poison_on_free);\n+    memory_region(bool detailed_leaks, bool poison_on_free);\n     memory_region(memory_region *parent);\n     void *malloc(size_t size, const char *tag);\n     void *realloc(void *mem, size_t size);"}, {"sha": "fd1b7860b29a423ce08149853e51e33962fe859a", "filename": "src/rt/rust_abi.cpp", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_abi.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_abi.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.cpp?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,88 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ABI-specific routines.\n-\n-#include <sstream>\n-#include <string>\n-#include <vector>\n-#include <cstdlib>\n-#include <stdint.h>\n-#include \"rust_abi.h\"\n-\n-#if defined(__APPLE__) || defined(__linux__) || defined(__FreeBSD__)\n-#define HAVE_DLFCN_H\n-#include <dlfcn.h>\n-#elif defined(_WIN32)\n-// Otherwise it's windows.h -- included in rust_abi.h\n-#endif\n-\n-#define END_OF_STACK_RA     (void (*)())0xdeadbeef\n-\n-weak_symbol<uint32_t> abi_version(\"rust_abi_version\");\n-\n-uint32_t get_abi_version() {\n-    return (*abi_version == NULL) ? 0 : **abi_version;\n-}\n-\n-namespace stack_walk {\n-\n-#ifdef HAVE_DLFCN_H\n-std::string\n-frame::symbol() const {\n-    std::stringstream ss;\n-\n-    Dl_info info;\n-    if (!dladdr((void *)ra, &info))\n-        ss << \"??\";\n-    else\n-        ss << info.dli_sname;\n-\n-    ss << \" @ \" << std::hex << (uintptr_t)ra;\n-    return ss.str();\n-}\n-#else\n-std::string\n-frame::symbol() const {\n-    std::stringstream ss;\n-    ss << std::hex << (uintptr_t)ra;\n-    return ss.str();\n-}\n-#endif\n-\n-std::vector<frame>\n-backtrace() {\n-    std::vector<frame> frames;\n-\n-    // Ideally we would use the current value of EIP here, but there's no\n-    // portable way to get that and there are never any GC roots in our C++\n-    // frames anyhow.\n-    frame f(__builtin_frame_address(0), (void (*)())NULL);\n-\n-    while (f.ra != END_OF_STACK_RA) {\n-        frames.push_back(f);\n-        f.next();\n-    }\n-    return frames;\n-}\n-\n-std::string\n-symbolicate(const std::vector<frame> &frames) {\n-    std::stringstream ss;\n-    std::vector<frame>::const_iterator begin(frames.begin()),\n-                                       end(frames.end());\n-    while (begin != end) {\n-        ss << begin->symbol() << std::endl;\n-        ++begin;\n-    }\n-    return ss.str();\n-}\n-\n-}   // end namespace stack_walk"}, {"sha": "4179bf751579f35a01d67b13585c8fb164fddd23", "filename": "src/rt/rust_abi.h", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_abi.h", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_abi.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.h?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,78 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ABI-specific routines.\n-\n-#ifndef RUST_ABI_H\n-#define RUST_ABI_H\n-\n-#include <cstdlib>\n-#include <string>\n-#include <vector>\n-#include <stdint.h>\n-\n-#ifdef __WIN32__\n-#include <windows.h>\n-#else\n-#include <dlfcn.h>\n-#endif\n-\n-template<typename T>\n-class weak_symbol {\n-private:\n-    bool init;\n-    T *data;\n-    const char *name;\n-\n-    void fill() {\n-        if (init)\n-            return;\n-\n-#ifdef __WIN32__\n-        data = (T *)GetProcAddress(GetModuleHandle(NULL), name);\n-#else\n-        data = (T *)dlsym(RTLD_DEFAULT, name);\n-#endif\n-\n-        init = true;\n-    }\n-\n-public:\n-    weak_symbol(const char *in_name)\n-    : init(false), data(NULL), name(in_name) {}\n-\n-    T *&operator*() { fill(); return data; }\n-};\n-\n-namespace stack_walk {\n-\n-struct frame {\n-    uint8_t *bp;    // The frame pointer.\n-    void (*ra)();   // The return address.\n-\n-    frame(void *in_bp, void (*in_ra)()) : bp((uint8_t *)in_bp), ra(in_ra) {}\n-\n-    inline void next() {\n-        ra = *(void (**)())(bp + sizeof(void *));\n-        bp = *(uint8_t **)bp;\n-    }\n-\n-    std::string symbol() const;\n-};\n-\n-std::vector<frame> backtrace();\n-std::string symbolicate(const std::vector<frame> &frames);\n-\n-}   // end namespace stack_walk\n-\n-\n-uint32_t get_abi_version();\n-\n-#endif"}, {"sha": "6f3a3bd36865f8d5eac738276f8f91966cb16443", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 29, "deletions": 71, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -11,12 +11,10 @@\n /* Foreign builtins. */\n \n #include \"rust_util.h\"\n-#include \"sync/timer.h\"\n #include \"sync/rust_thread.h\"\n #include \"sync/lock_and_signal.h\"\n #include \"memory_region.h\"\n #include \"boxed_region.h\"\n-#include \"rust_abi.h\"\n #include \"rust_rng.h\"\n #include \"vg/valgrind.h\"\n #include \"sp.h\"\n@@ -25,6 +23,7 @@\n \n #ifdef __APPLE__\n #include <crt_externs.h>\n+#include <mach/mach_time.h>\n #endif\n \n #if !defined(__WIN32__)\n@@ -99,53 +98,6 @@ rand_free(rust_rng *rng) {\n     free(rng);\n }\n \n-\n-/* Debug helpers strictly to verify ABI conformance.\n- *\n- * FIXME (#2665): move these into a testcase when the testsuite\n- * understands how to have explicit C files included.\n- */\n-\n-struct quad {\n-    uint64_t a;\n-    uint64_t b;\n-    uint64_t c;\n-    uint64_t d;\n-};\n-\n-struct floats {\n-    double a;\n-    uint8_t b;\n-    double c;\n-};\n-\n-extern \"C\" quad\n-debug_abi_1(quad q) {\n-    quad qq = { q.c + 1,\n-                q.d - 1,\n-                q.a + 1,\n-                q.b - 1 };\n-    return qq;\n-}\n-\n-extern \"C\" floats\n-debug_abi_2(floats f) {\n-    floats ff = { f.c + 1.0,\n-                  0xff,\n-                  f.a - 1.0 };\n-    return ff;\n-}\n-\n-extern \"C\" int\n-debug_static_mut;\n-\n-int debug_static_mut = 3;\n-\n-extern \"C\" void\n-debug_static_mut_check_four() {\n-    assert(debug_static_mut == 4);\n-}\n-\n extern \"C\" CDECL char*\n #if defined(__WIN32__)\n rust_list_dir_val(WIN32_FIND_DATA* entry_ptr) {\n@@ -242,10 +194,33 @@ get_time(int64_t *sec, int32_t *nsec) {\n }\n #endif\n \n+const uint64_t ns_per_s = 1000000000LL;\n+\n extern \"C\" CDECL void\n precise_time_ns(uint64_t *ns) {\n-    timer t;\n-    *ns = t.time_ns();\n+\n+#ifdef __APPLE__\n+    uint64_t time = mach_absolute_time();\n+    mach_timebase_info_data_t info = {0, 0};\n+    if (info.denom == 0) {\n+        mach_timebase_info(&info);\n+    }\n+    uint64_t time_nano = time * (info.numer / info.denom);\n+    *ns = time_nano;\n+#elif __WIN32__\n+    uint64_t ticks_per_s;\n+    QueryPerformanceFrequency((LARGE_INTEGER *)&ticks_per_s);\n+    if (ticks_per_s == 0LL) {\n+        ticks_per_s = 1LL;\n+    }\n+    uint64_t ticks;\n+    QueryPerformanceCounter((LARGE_INTEGER *)&ticks);\n+    *ns = ((ticks * ns_per_s) / ticks_per_s);\n+#else\n+    timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    *ns = (ts.tv_sec * ns_per_s + ts.tv_nsec);\n+#endif\n }\n \n struct rust_tm {\n@@ -292,7 +267,7 @@ void tm_to_rust_tm(tm* in_tm, rust_tm* out_tm, int32_t gmtoff,\n \n     if (zone != NULL) {\n         size_t size = strlen(zone);\n-        reserve_vec_exact(&out_tm->tm_zone, size);\n+        assert(out_tm->tm_zone->alloc >= size);\n         memcpy(out_tm->tm_zone->data, zone, size);\n         out_tm->tm_zone->fill = size;\n     }\n@@ -505,11 +480,9 @@ rust_initialize_rt_tls_key() {\n }\n \n extern \"C\" CDECL memory_region*\n-rust_new_memory_region(uintptr_t synchronized,\n-                       uintptr_t detailed_leaks,\n+rust_new_memory_region(uintptr_t detailed_leaks,\n                        uintptr_t poison_on_free) {\n-    return new memory_region((bool)synchronized,\n-                             (bool)detailed_leaks,\n+    return new memory_region((bool)detailed_leaks,\n                              (bool)poison_on_free);\n }\n \n@@ -632,21 +605,6 @@ rust_get_global_args_ptr() {\n     return &global_args_ptr;\n }\n \n-static lock_and_signal exit_status_lock;\n-static uintptr_t exit_status = 0;\n-\n-extern \"C\" CDECL void\n-rust_set_exit_status_newrt(uintptr_t code) {\n-    scoped_lock with(exit_status_lock);\n-    exit_status = code;\n-}\n-\n-extern \"C\" CDECL uintptr_t\n-rust_get_exit_status_newrt() {\n-    scoped_lock with(exit_status_lock);\n-    return exit_status;\n-}\n-\n static lock_and_signal change_dir_lock;\n \n extern \"C\" CDECL void"}, {"sha": "658d97031ce0aa28910706cd62ba6e289df1404a", "filename": "src/rt/rust_exchange_alloc.cpp", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_exchange_alloc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_exchange_alloc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_exchange_alloc.cpp?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include \"rust_exchange_alloc.h\"\n-#include \"sync/sync.h\"\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <string.h>\n-#include <stdio.h>\n-\n-void *\n-rust_exchange_alloc::malloc(size_t size) {\n-  void *value = ::malloc(size);\n-  assert(value);\n-  return value;\n-}\n-\n-void *\n-rust_exchange_alloc::realloc(void *ptr, size_t size) {\n-  void *new_ptr = ::realloc(ptr, size);\n-  assert(new_ptr);\n-  return new_ptr;\n-}\n-\n-void\n-rust_exchange_alloc::free(void *ptr) {\n-  ::free(ptr);\n-}"}, {"sha": "9699ef6b5e9d9c1f2c4030b7757d598148e42b8e", "filename": "src/rt/rust_exchange_alloc.h", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_exchange_alloc.h", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_exchange_alloc.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_exchange_alloc.h?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_EXCHANGE_ALLOC_H\n-#define RUST_EXCHANGE_ALLOC_H\n-\n-#include <stddef.h>\n-#include <stdint.h>\n-\n-class rust_exchange_alloc {\n- public:\n-    void *malloc(size_t size);\n-    void *realloc(void *mem, size_t size);\n-    void free(void *mem);\n-};\n-\n-#endif"}, {"sha": "e37856255a7d60a360873d326cb66360cecb20c8", "filename": "src/rt/rust_gc_metadata.cpp", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_gc_metadata.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_gc_metadata.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc_metadata.cpp?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,95 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include \"rust_gc_metadata.h\"\n-#include \"rust_crate_map.h\"\n-#include \"rust_globals.h\"\n-\n-#include <algorithm>\n-#include <vector>\n-\n-struct safe_point {\n-    uintptr_t safe_point_loc;\n-    uintptr_t safe_point_meta;\n-    uintptr_t function_meta;\n-};\n-\n-struct update_gc_entry_args {\n-    std::vector<safe_point> *safe_points;\n-};\n-\n-static void\n-update_gc_entry(const mod_entry *entry, void *cookie) {\n-    update_gc_entry_args *args = (update_gc_entry_args *)cookie;\n-    if (!strcmp(entry->name, \"_gc_module_metadata\")) {\n-        uintptr_t *next = (uintptr_t *)entry->state;\n-        uint32_t num_safe_points = *(uint32_t *)next;\n-        next++;\n-\n-        for (uint32_t i = 0; i < num_safe_points; i++) {\n-            safe_point sp = { next[0], next[1], next[2] };\n-            next += 3;\n-\n-            args->safe_points->push_back(sp);\n-        }\n-    }\n-}\n-\n-static bool\n-cmp_safe_point(safe_point a, safe_point b) {\n-    return a.safe_point_loc < b.safe_point_loc;\n-}\n-\n-uintptr_t *global_safe_points = 0;\n-\n-void\n-update_gc_metadata(const void* map) {\n-    std::vector<safe_point> safe_points;\n-    update_gc_entry_args args = { &safe_points };\n-\n-    // Extract list of safe points from each module.\n-    iter_crate_map((const cratemap *)map, update_gc_entry, (void *)&args);\n-    std::sort(safe_points.begin(), safe_points.end(), cmp_safe_point);\n-\n-    // Serialize safe point list into format expected by runtime.\n-    global_safe_points =\n-        (uintptr_t *)malloc((safe_points.size()*3 + 1)*sizeof(uintptr_t));\n-    if (!global_safe_points) return;\n-\n-    uintptr_t *next = global_safe_points;\n-    *next = safe_points.size();\n-    next++;\n-    for (uint32_t i = 0; i < safe_points.size(); i++) {\n-        next[0] = safe_points[i].safe_point_loc;\n-        next[1] = safe_points[i].safe_point_meta;\n-        next[2] = safe_points[i].function_meta;\n-        next += 3;\n-    }\n-}\n-\n-extern \"C\" CDECL void *\n-rust_gc_metadata() {\n-    return (void *)global_safe_points;\n-}\n-\n-extern \"C\" CDECL void\n-rust_update_gc_metadata(const void* map) {\n-    update_gc_metadata(map);\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "d8d98e75b937349316af0196bccfa143758e77f6", "filename": "src/rt/rust_gc_metadata.h", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_gc_metadata.h", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_gc_metadata.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc_metadata.h?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_GC_METADATA_H\n-#define RUST_GC_METADATA_H\n-\n-void update_gc_metadata(const void* map);\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//\n-\n-#endif /* RUST_GC_METADATA_H */"}, {"sha": "f10a1f36938a30cc9a73834e997ab06535db1438", "filename": "src/rt/rust_test_helpers.cpp", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Frust_test_helpers.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Frust_test_helpers.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.cpp?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -11,10 +11,8 @@\n // Helper functions used only in tests\n \n #include \"rust_util.h\"\n-#include \"sync/timer.h\"\n #include \"sync/rust_thread.h\"\n #include \"sync/lock_and_signal.h\"\n-#include \"rust_abi.h\"\n \n // These functions are used in the unit tests for C ABI calls.\n \n@@ -179,3 +177,49 @@ extern \"C\" CDECL intptr_t\n rust_get_test_int() {\n   return 1;\n }\n+\n+/* Debug helpers strictly to verify ABI conformance.\n+ *\n+ * FIXME (#2665): move these into a testcase when the testsuite\n+ * understands how to have explicit C files included.\n+ */\n+\n+struct quad {\n+    uint64_t a;\n+    uint64_t b;\n+    uint64_t c;\n+    uint64_t d;\n+};\n+\n+struct floats {\n+    double a;\n+    uint8_t b;\n+    double c;\n+};\n+\n+extern \"C\" quad\n+rust_dbg_abi_1(quad q) {\n+    quad qq = { q.c + 1,\n+                q.d - 1,\n+                q.a + 1,\n+                q.b - 1 };\n+    return qq;\n+}\n+\n+extern \"C\" floats\n+rust_dbg_abi_2(floats f) {\n+    floats ff = { f.c + 1.0,\n+                  0xff,\n+                  f.a - 1.0 };\n+    return ff;\n+}\n+\n+extern \"C\" int\n+rust_dbg_static_mut;\n+\n+int rust_dbg_static_mut = 3;\n+\n+extern \"C\" void\n+rust_dbg_static_mut_check_four() {\n+    assert(rust_dbg_static_mut == 4);\n+}"}, {"sha": "28c69af427a32c54f75b8c0056b4b187f3b3444d", "filename": "src/rt/rust_util.cpp", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Frust_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.cpp?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include \"rust_type.h\"\n-\n-\n-// A hardcoded type descriptor for strings, since the runtime needs to\n-// be able to create them.\n-\n-struct type_desc str_body_tydesc = {\n-    1, // size\n-    1, // align\n-    NULL, // take_glue\n-    NULL, // drop_glue\n-    NULL, // free_glue\n-    NULL, // visit_glue\n-    0, // borrow_offset\n-};\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "d78ade4e94c51f678230fbb4e27b0bc118e0abe9", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -12,11 +12,8 @@\n #define RUST_UTIL_H\n \n #include <limits.h>\n-#include \"rust_exchange_alloc.h\"\n #include \"rust_type.h\"\n \n-extern struct type_desc str_body_tydesc;\n-\n // Inline fn used regularly elsewhere.\n \n // Rounds |size| to the nearest |alignment|. Invariant: |alignment| is a power\n@@ -57,16 +54,6 @@ vec_data(rust_vec *v) {\n     return reinterpret_cast<T*>(v->data);\n }\n \n-inline void reserve_vec_exact(rust_vec** vpp,\n-                              size_t size) {\n-    if (size > (*vpp)->alloc) {\n-        rust_exchange_alloc exchange_alloc;\n-        *vpp = (rust_vec*)exchange_alloc\n-            .realloc(*vpp, size + sizeof(rust_vec));\n-        (*vpp)->alloc = size;\n-    }\n-}\n-\n typedef rust_vec rust_str;\n \n inline size_t get_box_size(size_t body_size, size_t body_align) {"}, {"sha": "6e95d96012bbfab310ab7ea3e1b4e569475bd142", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -1,7 +1,7 @@\n-debug_abi_1\n-debug_abi_2\n-debug_static_mut\n-debug_static_mut_check_four\n+rust_dbg_abi_1\n+rust_dbg_abi_2\n+rust_dbg_static_mut\n+rust_dbg_static_mut_check_four\n get_time\n rust_tzset\n rust_gmtime\n@@ -130,8 +130,6 @@ rust_lock_little_lock\n rust_unlock_little_lock\n tdefl_compress_mem_to_heap\n tinfl_decompress_mem_to_heap\n-rust_gc_metadata\n-rust_update_gc_metadata\n rust_uv_ip4_port\n rust_uv_ip6_port\n rust_uv_tcp_getpeername\n@@ -191,8 +189,6 @@ rust_get_num_cpus\n rust_get_global_args_ptr\n rust_take_global_args_lock\n rust_drop_global_args_lock\n-rust_set_exit_status_newrt\n-rust_get_exit_status_newrt\n rust_take_change_dir_lock\n rust_drop_change_dir_lock\n rust_get_test_int"}, {"sha": "6ac97d57933621caf64ececa1423995c1a0c9edf", "filename": "src/rt/sync/sync.h", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Fsync%2Fsync.h", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Fsync%2Fsync.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Fsync.h?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,53 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef SYNC_H\n-#define SYNC_H\n-\n-class sync {\n-public:\n-    template <class T>\n-    static bool compare_and_swap(T *address,\n-        T oldValue, T newValue) {\n-        return __sync_bool_compare_and_swap(address, oldValue, newValue);\n-    }\n-\n-    template <class T>\n-    static T increment(T *address) {\n-        return __sync_add_and_fetch(address, 1);\n-    }\n-\n-    template <class T>\n-    static T decrement(T *address) {\n-        return __sync_sub_and_fetch(address, 1);\n-    }\n-\n-    template <class T>\n-    static T increment(T &address) {\n-        return __sync_add_and_fetch(&address, 1);\n-    }\n-\n-    template <class T>\n-    static T decrement(T &address) {\n-        return __sync_sub_and_fetch(&address, 1);\n-    }\n-\n-    template <class T>\n-    static T read(T *address) {\n-        return __sync_add_and_fetch(address, 0);\n-    }\n-\n-    template <class T>\n-    static T read(T &address) {\n-        return __sync_add_and_fetch(&address, 0);\n-    }\n-};\n-\n-#endif /* SYNC_H */"}, {"sha": "99e5b107dc91705ca2fe1856db592f623611501a", "filename": "src/rt/sync/timer.cpp", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Fsync%2Ftimer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Fsync%2Ftimer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.cpp?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,85 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include \"../rust_globals.h\"\n-#include \"timer.h\"\n-\n-#if defined(__APPLE__)\n-#include <mach/mach_time.h>\n-#endif\n-\n-uint64_t ns_per_s = 1000000000LL;\n-\n-timer::timer() {\n-#if __WIN32__\n-    _ticks_per_s = 0LL;\n-    // FIXME (#2675): assert this works or have a workaround.\n-    QueryPerformanceFrequency((LARGE_INTEGER *)&_ticks_per_s);\n-    if (_ticks_per_s == 0LL) {\n-      _ticks_per_s = 1LL;\n-    }\n-#endif\n-    reset_us(0);\n-}\n-\n-void\n-timer::reset_us(uint64_t timeout_us) {\n-    _start_us = time_us();\n-    _timeout_us = timeout_us;\n-}\n-\n-uint64_t\n-timer::elapsed_us() {\n-    return time_us() - _start_us;\n-}\n-\n-double\n-timer::elapsed_ms() {\n-    return (double) elapsed_us() / 1000.0;\n-}\n-\n-int64_t\n-timer::remaining_us() {\n-    return _timeout_us - elapsed_us();\n-}\n-\n-bool\n-timer::has_timed_out() {\n-    return remaining_us() <= 0;\n-}\n-\n-uint64_t\n-timer::time_ns() {\n-#ifdef __APPLE__\n-    uint64_t time = mach_absolute_time();\n-    mach_timebase_info_data_t info = {0, 0};\n-    if (info.denom == 0) {\n-        mach_timebase_info(&info);\n-    }\n-    uint64_t time_nano = time * (info.numer / info.denom);\n-    return time_nano;\n-#elif __WIN32__\n-    uint64_t ticks;\n-    QueryPerformanceCounter((LARGE_INTEGER *)&ticks);\n-    return ((ticks * ns_per_s) / _ticks_per_s);\n-#else\n-    timespec ts;\n-    clock_gettime(CLOCK_MONOTONIC, &ts);\n-    return (ts.tv_sec * ns_per_s + ts.tv_nsec);\n-#endif\n-}\n-\n-uint64_t\n-timer::time_us() {\n-    return time_ns() / 1000;\n-}\n-\n-timer::~timer() {\n-}"}, {"sha": "59d05878b50716bc3327585973ac7f03bbd49b82", "filename": "src/rt/sync/timer.h", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Fsync%2Ftimer.h", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Fsync%2Ftimer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.h?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n- *  Utility class to measure time in a platform independent way.\n- */\n-\n-#ifndef TIMER_H\n-#define TIMER_H\n-\n-class timer {\n-private:\n-    uint64_t _start_us;\n-    uint64_t _timeout_us;\n-    uint64_t time_us();\n-#if __WIN32__\n-    uint64_t _ticks_per_s;\n-#endif\n-public:\n-    timer();\n-    void reset_us(uint64_t timeout);\n-    uint64_t elapsed_us();\n-    double elapsed_ms();\n-    int64_t remaining_us();\n-    bool has_timed_out();\n-    uint64_t time_ns();\n-    virtual ~timer();\n-};\n-\n-#endif /* TIMER_H */"}, {"sha": "4673e9e27e31b7baa06fe396750a8d4adcbf59ac", "filename": "src/rt/util/indexed_list.h", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Futil%2Findexed_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea/src%2Frt%2Futil%2Findexed_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Findexed_list.h?ref=7b5a91f4b346b99b4e9171eb8deb52d9bf2525ea", "patch": "@@ -1,115 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef INDEXED_LIST_H\n-#define INDEXED_LIST_H\n-\n-#include <assert.h>\n-#include \"array_list.h\"\n-\n-class indexed_list_object {\n-public:\n-    virtual ~indexed_list_object() {}\n-    int32_t list_index;\n-};\n-\n-template<typename T>\n-class indexed_list_element : public indexed_list_object {\n-public:\n-    T value;\n-    indexed_list_element(T value) : value(value) {\n-    }\n-};\n-\n-/**\n- * An array list of objects that are aware of their position in the list.\n- * Normally, objects in this list should derive from the base class\n- * \"indexed_list_object\" however because of nasty Rust compiler dependencies\n- * on the layout of runtime objects we cannot always derive from this\n- * base class, so instead we just enforce the informal protocol that any\n- * object inserted in this list must define a \"int32_t list_index\" member.\n- */\n-template<typename T> class indexed_list {\n-    array_list<T*> list;\n-public:\n-    int32_t append(T *value);\n-    bool pop(T **value);\n-    /**\n-     * Same as pop(), except that it returns NULL if the list is empty.\n-     */\n-    T* pop_value();\n-    size_t length() const {\n-        return list.size();\n-    }\n-    bool is_empty() const {\n-        return list.is_empty();\n-    }\n-    int32_t remove(T* value);\n-    T * operator[](int32_t index);\n-    const T * operator[](int32_t index) const;\n-    ~indexed_list() {}\n-};\n-\n-template<typename T> int32_t\n-indexed_list<T>::append(T *value) {\n-    value->list_index = list.push(value);\n-    return value->list_index;\n-}\n-\n-/**\n- * Swap delete the last object in the list with the specified object.\n- */\n-template<typename T> int32_t\n-indexed_list<T>::remove(T *value) {\n-    assert (value->list_index >= 0);\n-    assert (value->list_index < (int32_t)list.size());\n-    int32_t removeIndex = value->list_index;\n-    T *last = 0;\n-    list.pop(&last);\n-    if (last->list_index == removeIndex) {\n-        last->list_index = -1;\n-        return removeIndex;\n-    } else {\n-        value->list_index = -1;\n-        list[removeIndex] = last;\n-        last->list_index = removeIndex;\n-        return removeIndex;\n-    }\n-}\n-\n-template<typename T> bool\n-indexed_list<T>::pop(T **value) {\n-    return list.pop(value);\n-}\n-\n-template<typename T> T*\n-indexed_list<T>::pop_value() {\n-    T *value = NULL;\n-    if (list.pop(&value)) {\n-        return value;\n-    }\n-    return NULL;\n-}\n-\n-template <typename T> T *\n-indexed_list<T>::operator[](int32_t index) {\n-    T *value = list[index];\n-    assert(value->list_index == index);\n-    return value;\n-}\n-\n-template <typename T> const T *\n-indexed_list<T>::operator[](int32_t index) const {\n-    T *value = list[index];\n-    assert(value->list_index == index);\n-    return value;\n-}\n-\n-#endif /* INDEXED_LIST_H */"}, {"sha": "3102fb2664f7d53eb36d38584bcd851b0b691cfc", "filename": "src/test/compile-fail/attrs-after-extern-mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -16,8 +16,8 @@ use std::libc;\n \n #[nolink]\n extern {\n-    static mut debug_static_mut: libc::c_int;\n-    pub fn debug_static_mut_check_four();\n+    static mut rust_dbg_static_mut: libc::c_int;\n+    pub fn rust_dbg_static_mut_check_four();\n     #[cfg(stage37)] //~ ERROR expected item after attributes\n }\n "}, {"sha": "0d042d002a144211f0b0c1e1a89de87dab6192bd", "filename": "src/test/run-pass/static-mut-foreign.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -16,8 +16,8 @@ use std::libc;\n \n #[nolink]\n extern {\n-    static mut debug_static_mut: libc::c_int;\n-    pub fn debug_static_mut_check_four();\n+    static mut rust_dbg_static_mut: libc::c_int;\n+    pub fn rust_dbg_static_mut_check_four();\n }\n \n unsafe fn static_bound(_: &'static libc::c_int) {}\n@@ -28,18 +28,18 @@ fn static_bound_set(a: &'static mut libc::c_int) {\n \n #[fixed_stack_segment] #[inline(never)]\n unsafe fn run() {\n-    assert!(debug_static_mut == 3);\n-    debug_static_mut = 4;\n-    assert!(debug_static_mut == 4);\n-    debug_static_mut_check_four();\n-    debug_static_mut += 1;\n-    assert!(debug_static_mut == 5);\n-    debug_static_mut *= 3;\n-    assert!(debug_static_mut == 15);\n-    debug_static_mut = -3;\n-    assert!(debug_static_mut == -3);\n-    static_bound(&debug_static_mut);\n-    static_bound_set(&mut debug_static_mut);\n+    assert!(rust_dbg_static_mut == 3);\n+    rust_dbg_static_mut = 4;\n+    assert!(rust_dbg_static_mut == 4);\n+    rust_dbg_static_mut_check_four();\n+    rust_dbg_static_mut += 1;\n+    assert!(rust_dbg_static_mut == 5);\n+    rust_dbg_static_mut *= 3;\n+    assert!(rust_dbg_static_mut == 15);\n+    rust_dbg_static_mut = -3;\n+    assert!(rust_dbg_static_mut == -3);\n+    static_bound(&rust_dbg_static_mut);\n+    static_bound_set(&mut rust_dbg_static_mut);\n }\n \n pub fn main() {"}, {"sha": "3f63902eb3193f298888d9510a58567720bc8f68", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9979247d1d69c1a8fb7cd1d2829a629baf9d965/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=f9979247d1d69c1a8fb7cd1d2829a629baf9d965", "patch": "@@ -16,8 +16,8 @@ mod rustrt {\n \n     #[nolink]\n     extern {\n-        pub fn debug_abi_1(q: Quad) -> Quad;\n-        pub fn debug_abi_2(f: Floats) -> Floats;\n+        pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n+        pub fn rust_dbg_abi_2(f: Floats) -> Floats;\n     }\n }\n \n@@ -28,7 +28,7 @@ fn test1() {\n                  b: 0xbbbb_bbbb_bbbb_bbbb_u64,\n                  c: 0xcccc_cccc_cccc_cccc_u64,\n                  d: 0xdddd_dddd_dddd_dddd_u64 };\n-        let qq = rustrt::debug_abi_1(q);\n+        let qq = rustrt::rust_dbg_abi_1(q);\n         error!(\"a: %x\", qq.a as uint);\n         error!(\"b: %x\", qq.b as uint);\n         error!(\"c: %x\", qq.c as uint);\n@@ -48,7 +48,7 @@ fn test2() {\n         let f = Floats { a: 1.234567890e-15_f64,\n                  b: 0b_1010_1010_u8,\n                  c: 1.0987654321e-15_f64 };\n-        let ff = rustrt::debug_abi_2(f);\n+        let ff = rustrt::rust_dbg_abi_2(f);\n         error!(\"a: %f\", ff.a as float);\n         error!(\"b: %u\", ff.b as uint);\n         error!(\"c: %f\", ff.c as float);"}]}