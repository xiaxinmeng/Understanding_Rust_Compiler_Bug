{"sha": "b1b7727e046b4b25dcca034ee767a7fc3238409d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjc3MjdlMDQ2YjRiMjVkY2NhMDM0ZWU3NjdhN2ZjMzIzODQwOWQ=", "commit": {"author": {"name": "Anatol Liu", "email": "axlui@anatols-mbp.lan", "date": "2020-11-13T01:48:07Z"}, "committer": {"name": "Anatol Liu", "email": "axlui@anatols-mbp.lan", "date": "2020-11-13T01:48:07Z"}, "message": "add open Cargo.toml action", "tree": {"sha": "c1942b7af1e73b139d2c62d1d81e8d6749dc8cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1942b7af1e73b139d2c62d1d81e8d6749dc8cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b7727e046b4b25dcca034ee767a7fc3238409d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b7727e046b4b25dcca034ee767a7fc3238409d", "html_url": "https://github.com/rust-lang/rust/commit/b1b7727e046b4b25dcca034ee767a7fc3238409d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b7727e046b4b25dcca034ee767a7fc3238409d/comments", "author": null, "committer": null, "parents": [{"sha": "111cc34c8f181315f4dcfa85c616d54d47eff0b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/111cc34c8f181315f4dcfa85c616d54d47eff0b9", "html_url": "https://github.com/rust-lang/rust/commit/111cc34c8f181315f4dcfa85c616d54d47eff0b9"}], "stats": {"total": 156, "additions": 114, "deletions": 42}, "files": [{"sha": "7e097c01585091c4d297061cfa367efc456955ed", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -10,3 +10,4 @@ crates/*/target\n generated_assists.adoc\n generated_features.adoc\n generated_diagnostic.adoc\n+.DS_Store"}, {"sha": "c5645b2d25529d4df81b621ec2de1c59d3211b0b", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -612,6 +612,7 @@ dependencies = [\n  \"hir_expand\",\n  \"itertools\",\n  \"log\",\n+ \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n  \"scoped-tls\",\n@@ -1053,9 +1054,9 @@ checksum = \"8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397\"\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.4.1\"\n+version = \"1.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"260e51e7efe62b592207e9e13a68e43692a7a279171d6ba57abd208bf23645ad\"\n+checksum = \"f53cef67919d7d247eb9a2f128ca9e522789967ef1eb4ccd8c71a95a8aedf596\"\n \n [[package]]\n name = \"oorandom\""}, {"sha": "cf5c38a23578cca3c262d0556cef52a83018cea1", "filename": "crates/hir_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Fhir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Fhir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2FCargo.toml?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -35,3 +35,4 @@ expect-test = \"1.0\"\n tracing = \"0.1\"\n tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"env-filter\", \"registry\"] }\n tracing-tree = { version = \"0.1.4\" }\n+once_cell = { version = \"1.5.0\", features = [\"unstable\"] }"}, {"sha": "0a400cb705080e688e5805a695c74107e52f43f4", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -22,7 +22,8 @@ use hir_def::{\n     AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n };\n use hir_expand::{db::AstDatabase, InFile};\n-use stdx::{format_to, RacyFlag};\n+use once_cell::race::OnceBool;\n+use stdx::format_to;\n use syntax::{\n     algo,\n     ast::{self, AstNode},\n@@ -40,8 +41,8 @@ use crate::{\n // `env UPDATE_EXPECT=1 cargo test -p hir_ty` to update the snapshots.\n \n fn setup_tracing() -> Option<tracing::subscriber::DefaultGuard> {\n-    static ENABLE: RacyFlag = RacyFlag::new();\n-    if !ENABLE.get(|| env::var(\"CHALK_DEBUG\").is_ok()) {\n+    static ENABLE: OnceBool = OnceBool::new();\n+    if !ENABLE.get_or_init(|| env::var(\"CHALK_DEBUG\").is_ok()) {\n         return None;\n     }\n "}, {"sha": "a566736aa9e5aab4c0493be03fee3ac09047de3d", "filename": "crates/ide/.DS_Store", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Fide%2F.DS_Store", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Fide%2F.DS_Store", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2F.DS_Store?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d"}, {"sha": "9cc14fe827b7a98367c09d73a09dd1e7726f75e5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -385,13 +385,10 @@ impl Config {\n             }\n \n             if let Some(code_action) = &doc_caps.code_action {\n-                match (code_action.data_support, &code_action.resolve_support) {\n-                    (Some(true), Some(resolve_support)) => {\n-                        if resolve_support.properties.iter().any(|it| it == \"edit\") {\n-                            self.client_caps.code_action_resolve = true;\n-                        }\n+                if let Some(resolve_support) = &code_action.resolve_support {\n+                    if resolve_support.properties.iter().any(|it| it == \"edit\") {\n+                        self.client_caps.code_action_resolve = true;\n                     }\n-                    _ => (),\n                 }\n             }\n         }"}, {"sha": "782797e85f7fb7c82d6aacc5a81c90354346f6b0", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -1322,6 +1322,28 @@ pub(crate) fn handle_open_docs(\n     Ok(remote.and_then(|remote| Url::parse(&remote).ok()))\n }\n \n+pub(crate) fn handle_open_cargo_toml(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_ext::OpenCargoTomlParams,\n+) -> Result<Option<lsp_types::GotoDefinitionResponse>> {\n+    let _p = profile::span(\"handle_open_cargo_toml\");\n+    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n+    let maybe_cargo_spec = CargoTargetSpec::for_file(&snap, file_id)?;\n+    if maybe_cargo_spec.is_none() {\n+        return Ok(None);\n+    }\n+\n+    let cargo_spec = maybe_cargo_spec.unwrap();\n+    let cargo_toml_path = cargo_spec.workspace_root.join(\"Cargo.toml\");\n+    if !cargo_toml_path.exists() {\n+        return Ok(None);\n+    }\n+    let cargo_toml_url = to_proto::url_from_abs_path(&cargo_toml_path);\n+    let cargo_toml_location = Location::new(cargo_toml_url, Range::default());\n+    let res = lsp_types::GotoDefinitionResponse::from(cargo_toml_location);\n+    Ok(Some(res))\n+}\n+\n fn implementation_title(count: usize) -> String {\n     if count == 1 {\n         \"1 implementation\".into()"}, {"sha": "a5c65fa3e8baaf2ddc82f3d0fe969d42f9fbc623", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -354,3 +354,17 @@ impl Request for ExternalDocs {\n     type Result = Option<lsp_types::Url>;\n     const METHOD: &'static str = \"experimental/externalDocs\";\n }\n+\n+pub enum OpenCargoToml {}\n+\n+impl Request for OpenCargoToml {\n+    type Params = OpenCargoTomlParams;\n+    type Result = Option<lsp_types::GotoDefinitionResponse>;\n+    const METHOD: &'static str = \"experimental/openCargoToml\";\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct OpenCargoTomlParams {\n+    pub text_document: TextDocumentIdentifier,\n+}"}, {"sha": "68a53bbcb969f0ba5f6a85dfaa19697d121c1ea0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -438,6 +438,7 @@ impl GlobalState {\n             .on::<lsp_ext::CodeActionResolveRequest>(handlers::handle_code_action_resolve)\n             .on::<lsp_ext::HoverRequest>(handlers::handle_hover)\n             .on::<lsp_ext::ExternalDocs>(handlers::handle_open_docs)\n+            .on::<lsp_ext::OpenCargoToml>(handlers::handle_open_cargo_toml)\n             .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)\n             .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)\n             .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)"}, {"sha": "374ed59105dbe524f574b96365a8277291045bb6", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -1,8 +1,5 @@\n //! Missing batteries for standard libraries.\n-use std::{\n-    sync::atomic::{AtomicUsize, Ordering},\n-    time::Instant,\n-};\n+use std::time::Instant;\n \n mod macros;\n pub mod panic_context;\n@@ -150,31 +147,6 @@ where\n     left\n }\n \n-pub struct RacyFlag(AtomicUsize);\n-\n-impl RacyFlag {\n-    pub const fn new() -> RacyFlag {\n-        RacyFlag(AtomicUsize::new(!0))\n-    }\n-\n-    pub fn get(&self, init: impl FnMut() -> bool) -> bool {\n-        let mut init = Some(init);\n-        self.get_impl(&mut || init.take().map_or(false, |mut f| f()))\n-    }\n-\n-    fn get_impl(&self, init: &mut dyn FnMut() -> bool) -> bool {\n-        match self.0.load(Ordering::Relaxed) {\n-            0 => false,\n-            1 => true,\n-            _ => {\n-                let res = init();\n-                self.0.store(if res { 1 } else { 0 }, Ordering::Relaxed);\n-                res\n-            }\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "db9727bee42aeeb3a543d378da897e79d334b415", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -1,8 +1,8 @@\n <!---\n-lsp_ext.rs hash: 4f86fb54e4b2870e\n+lsp_ext.rs hash: 9d5daed5b25dc4f6\n \n If you need to change the above hash to make the test pass, please check if you\n-need to adjust this doc as well and ping this issue:\n+need to adjust this doc as well and ping this  issue:\n \n   https://github.com/rust-analyzer/rust-analyzer/issues/4604\n \n@@ -537,3 +537,28 @@ Such actions on the client side are appended to a hover bottom as command links:\n   +-----------------------------+\n   ...\n ```\n+\n+## Open Cargo.toml\n+\n+**Issue:** https://github.com/rust-analyzer/rust-analyzer/issues/6462\n+\n+This request is sent from client to server to open the current project's Cargo.toml\n+\n+**Method:** `experimental/openCargoToml`\n+\n+**Request:** `OpenCargoTomlParams`\n+\n+**Response:** `Location | null`\n+\n+\n+### Example\n+\n+```rust\n+// Cargo.toml\n+[package]\n+// src/main.rs\n+\n+/* cursor here*/\n+```\n+\n+`experimental/openCargoToml` returns a single `Link` to the start of the `[package]` keyword."}, {"sha": "b02c807734f9e5559b0fcf0b427561a724c1a6b2", "filename": "editors/code/package.json", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -187,6 +187,11 @@\n                 \"command\": \"rust-analyzer.openDocs\",\n                 \"title\": \"Open docs under cursor\",\n                 \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.openCargoToml\",\n+                \"title\": \"Open Cargo.toml\",\n+                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": [\n@@ -1057,6 +1062,10 @@\n                 {\n                     \"command\": \"rust-analyzer.openDocs\",\n                     \"when\": \"inRustProject\"\n+                },\n+                {\n+                    \"command\": \"rust-analyzer.openCargoToml\",\n+                    \"when\": \"inRustProject\"\n                 }\n             ]\n         }"}, {"sha": "92bc4d7f7239506d34c5d99d02e6520185385eb0", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -188,6 +188,27 @@ export function parentModule(ctx: Ctx): Cmd {\n     };\n }\n \n+export function openCargoToml(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const response = await client.sendRequest(ra.openCargoToml, {\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n+        });\n+        if (!response) return;\n+\n+        const uri = client.protocol2CodeConverter.asUri(response.uri);\n+        const range = client.protocol2CodeConverter.asRange(response.range);\n+\n+        const doc = await vscode.workspace.openTextDocument(uri);\n+        const e = await vscode.window.showTextDocument(doc);\n+        e.selection = new vscode.Selection(range.start, range.start);\n+        e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n+    };\n+}\n+\n export function ssr(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = vscode.window.activeTextEditor;"}, {"sha": "5e877ce65114a9897165b06b0ebfe2a472f6e796", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -114,3 +114,9 @@ export interface CommandLinkGroup {\n }\n \n export const openDocs = new lc.RequestType<lc.TextDocumentPositionParams, string | void, void>('experimental/externalDocs');\n+\n+export const openCargoToml = new lc.RequestType<OpenCargoTomlParams, lc.Location, void>(\"experimental/openCargoToml\");\n+\n+export interface OpenCargoTomlParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+}"}, {"sha": "2f3dde8acd6dedc51fc58a6560cfdae304156783", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1b7727e046b4b25dcca034ee767a7fc3238409d/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b1b7727e046b4b25dcca034ee767a7fc3238409d/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=b1b7727e046b4b25dcca034ee767a7fc3238409d", "patch": "@@ -111,6 +111,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('debug', commands.debug);\n     ctx.registerCommand('newDebugConfig', commands.newDebugConfig);\n     ctx.registerCommand('openDocs', commands.openDocs);\n+    ctx.registerCommand('openCargoToml', commands.openCargoToml);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand('onEnter', commands.onEnter);"}]}