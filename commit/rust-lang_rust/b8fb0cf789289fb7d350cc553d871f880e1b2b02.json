{"sha": "b8fb0cf789289fb7d350cc553d871f880e1b2b02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZmIwY2Y3ODkyODlmYjdkMzUwY2M1NTNkODcxZjg4MGUxYjJiMDI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-06T23:35:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:51Z"}, "message": "rustrt: Convert statics to constants", "tree": {"sha": "4a7bb00ccc4d0edcf4112ca8c6f5df3bf293b815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7bb00ccc4d0edcf4112ca8c6f5df3bf293b815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8fb0cf789289fb7d350cc553d871f880e1b2b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8fb0cf789289fb7d350cc553d871f880e1b2b02", "html_url": "https://github.com/rust-lang/rust/commit/b8fb0cf789289fb7d350cc553d871f880e1b2b02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8fb0cf789289fb7d350cc553d871f880e1b2b02/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3eaf3290048a9da680b2c13b158fd6aeb307902", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3eaf3290048a9da680b2c13b158fd6aeb307902", "html_url": "https://github.com/rust-lang/rust/commit/d3eaf3290048a9da680b2c13b158fd6aeb307902"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "a5ac70286fe81e7454a71efed8d19c5f60fa1ba6", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=b8fb0cf789289fb7d350cc553d871f880e1b2b02", "patch": "@@ -414,7 +414,7 @@ impl ToCStr for String {\n }\n \n // The length of the stack allocated buffer for `vec.with_c_str()`\n-static BUF_LEN: uint = 128;\n+const BUF_LEN: uint = 128;\n \n impl<'a> ToCStr for &'a [u8] {\n     fn to_c_str(&self) -> CString {"}, {"sha": "26fc399968cd578bd59243ecfc30d3057dc26e38", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=b8fb0cf789289fb7d350cc553d871f880e1b2b02", "patch": "@@ -100,7 +100,7 @@ pub trait Runtime {\n \n /// The default error code of the rust runtime if the main task fails instead\n /// of exiting cleanly.\n-pub static DEFAULT_ERROR_CODE: int = 101;\n+pub const DEFAULT_ERROR_CODE: int = 101;\n \n /// One-time runtime initialization.\n ///"}, {"sha": "6867cb2e76b344822aa45fa58e44cc1233749d12", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=b8fb0cf789289fb7d350cc553d871f880e1b2b02", "patch": "@@ -57,19 +57,19 @@ pub type _Unwind_Exception_Class = u64;\n pub type _Unwind_Word = libc::uintptr_t;\n \n #[cfg(target_arch = \"x86\")]\n-pub static unwinder_private_data_size: uint = 5;\n+pub const unwinder_private_data_size: uint = 5;\n \n #[cfg(target_arch = \"x86_64\")]\n-pub static unwinder_private_data_size: uint = 6;\n+pub const unwinder_private_data_size: uint = 6;\n \n #[cfg(all(target_arch = \"arm\", not(target_os = \"ios\")))]\n-pub static unwinder_private_data_size: uint = 20;\n+pub const unwinder_private_data_size: uint = 20;\n \n #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))]\n-pub static unwinder_private_data_size: uint = 5;\n+pub const unwinder_private_data_size: uint = 5;\n \n #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n-pub static unwinder_private_data_size: uint = 2;\n+pub const unwinder_private_data_size: uint = 2;\n \n #[repr(C)]\n pub struct _Unwind_Exception {"}, {"sha": "d10ba69386695277e1d82b8546815c651daf1b09", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=b8fb0cf789289fb7d350cc553d871f880e1b2b02", "patch": "@@ -88,7 +88,7 @@ pub struct LockGuard<'a> {\n     lock: &'a StaticNativeMutex\n }\n \n-pub static NATIVE_MUTEX_INIT: StaticNativeMutex = StaticNativeMutex {\n+pub const NATIVE_MUTEX_INIT: StaticNativeMutex = StaticNativeMutex {\n     inner: imp::MUTEX_INIT,\n };\n \n@@ -353,9 +353,9 @@ mod imp {\n         pub type pthread_mutex_t = *mut libc::c_void;\n         pub type pthread_cond_t = *mut libc::c_void;\n \n-        pub static PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t =\n+        pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t =\n             0 as pthread_mutex_t;\n-        pub static PTHREAD_COND_INITIALIZER: pthread_cond_t =\n+        pub const PTHREAD_COND_INITIALIZER: pthread_cond_t =\n             0 as pthread_cond_t;\n     }\n \n@@ -390,11 +390,11 @@ mod imp {\n             __opaque: [u8, ..__PTHREAD_COND_SIZE__],\n         }\n \n-        pub static PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n+        pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n             __sig: _PTHREAD_MUTEX_SIG_INIT,\n             __opaque: [0, ..__PTHREAD_MUTEX_SIZE__],\n         };\n-        pub static PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n+        pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n             __sig: _PTHREAD_COND_SIG_INIT,\n             __opaque: [0, ..__PTHREAD_COND_SIZE__],\n         };\n@@ -406,25 +406,25 @@ mod imp {\n \n         // minus 8 because we have an 'align' field\n         #[cfg(target_arch = \"x86_64\")]\n-        static __SIZEOF_PTHREAD_MUTEX_T: uint = 40 - 8;\n+        const __SIZEOF_PTHREAD_MUTEX_T: uint = 40 - 8;\n         #[cfg(target_arch = \"x86\")]\n-        static __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n+        const __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n         #[cfg(target_arch = \"arm\")]\n-        static __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n+        const __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n         #[cfg(target_arch = \"mips\")]\n-        static __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n+        const __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n         #[cfg(target_arch = \"mipsel\")]\n-        static __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n+        const __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n         #[cfg(target_arch = \"x86_64\")]\n-        static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n+        const __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n         #[cfg(target_arch = \"x86\")]\n-        static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n+        const __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n         #[cfg(target_arch = \"arm\")]\n-        static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n+        const __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n         #[cfg(target_arch = \"mips\")]\n-        static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n+        const __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n         #[cfg(target_arch = \"mipsel\")]\n-        static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n+        const __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n \n         #[repr(C)]\n         pub struct pthread_mutex_t {\n@@ -437,11 +437,11 @@ mod imp {\n             size: [u8, ..__SIZEOF_PTHREAD_COND_T],\n         }\n \n-        pub static PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n+        pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n             __align: 0,\n             size: [0, ..__SIZEOF_PTHREAD_MUTEX_T],\n         };\n-        pub static PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n+        pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n             __align: 0,\n             size: [0, ..__SIZEOF_PTHREAD_COND_T],\n         };\n@@ -455,10 +455,10 @@ mod imp {\n         #[repr(C)]\n         pub struct pthread_cond_t { value: libc::c_int }\n \n-        pub static PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n+        pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n             value: 0,\n         };\n-        pub static PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n+        pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n             value: 0,\n         };\n     }\n@@ -468,7 +468,7 @@ mod imp {\n         cond: UnsafeCell<pthread_cond_t>,\n     }\n \n-    pub static MUTEX_INIT: Mutex = Mutex {\n+    pub const MUTEX_INIT: Mutex = Mutex {\n         lock: UnsafeCell { value: PTHREAD_MUTEX_INITIALIZER },\n         cond: UnsafeCell { value: PTHREAD_COND_INITIALIZER },\n     };\n@@ -523,19 +523,19 @@ mod imp {\n     use libc;\n \n     type LPCRITICAL_SECTION = *mut c_void;\n-    static SPIN_COUNT: DWORD = 4000;\n+    const SPIN_COUNT: DWORD = 4000;\n     #[cfg(target_arch = \"x86\")]\n-    static CRIT_SECTION_SIZE: uint = 24;\n+    const CRIT_SECTION_SIZE: uint = 24;\n     #[cfg(target_arch = \"x86_64\")]\n-    static CRIT_SECTION_SIZE: uint = 40;\n+    const CRIT_SECTION_SIZE: uint = 40;\n \n     pub struct Mutex {\n         // pointers for the lock/cond handles, atomically updated\n         lock: atomic::AtomicUint,\n         cond: atomic::AtomicUint,\n     }\n \n-    pub static MUTEX_INIT: Mutex = Mutex {\n+    pub const MUTEX_INIT: Mutex = Mutex {\n         lock: atomic::INIT_ATOMIC_UINT,\n         cond: atomic::INIT_ATOMIC_UINT,\n     };"}, {"sha": "4034000e28f33e22adbfad9af7f14f028bb61a47", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=b8fb0cf789289fb7d350cc553d871f880e1b2b02", "patch": "@@ -46,7 +46,7 @@\n // corresponding prolog, decision was taken to disable segmented\n // stack support on iOS.\n \n-pub static RED_ZONE: uint = 20 * 1024;\n+pub const RED_ZONE: uint = 20 * 1024;\n \n /// This function is invoked from rust's current __morestack function. Segmented\n /// stacks are currently not enabled as segmented stacks, but rather one giant"}, {"sha": "2a2fa29eca0b29bd4ead1b4c96e3d3f2a1b08487", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=b8fb0cf789289fb7d350cc553d871f880e1b2b02", "patch": "@@ -91,7 +91,7 @@ pub type Callback = fn(msg: &Any + Send, file: &'static str, line: uint);\n // Variables used for invoking callbacks when a task starts to unwind.\n //\n // For more information, see below.\n-static MAX_CALLBACKS: uint = 16;\n+const MAX_CALLBACKS: uint = 16;\n static mut CALLBACKS: [atomic::AtomicUint, ..MAX_CALLBACKS] =\n         [atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT,\n          atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT,"}, {"sha": "a94da33e543572bfe6d241db4f51c2caeb1907cc", "filename": "src/librustrt/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fb0cf789289fb7d350cc553d871f880e1b2b02/src%2Flibrustrt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Futil.rs?ref=b8fb0cf789289fb7d350cc553d871f880e1b2b02", "patch": "@@ -23,15 +23,15 @@ use libc;\n //\n // FIXME: Once the runtime matures remove the `true` below to turn off rtassert,\n //        etc.\n-pub static ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) ||\n+pub const ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) ||\n                                   cfg!(rtassert);\n \n pub struct Stdio(libc::c_int);\n \n #[allow(non_uppercase_statics)]\n-pub static Stdout: Stdio = Stdio(libc::STDOUT_FILENO);\n+pub const Stdout: Stdio = Stdio(libc::STDOUT_FILENO);\n #[allow(non_uppercase_statics)]\n-pub static Stderr: Stdio = Stdio(libc::STDERR_FILENO);\n+pub const Stderr: Stdio = Stdio(libc::STDERR_FILENO);\n \n impl fmt::FormatWriter for Stdio {\n     fn write(&mut self, data: &[u8]) -> fmt::Result {"}]}