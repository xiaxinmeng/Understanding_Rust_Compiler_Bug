{"sha": "7ddafaf6f95370935be339af71974da34752f1b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZGFmYWY2Zjk1MzcwOTM1YmUzMzlhZjcxOTc0ZGEzNDc1MmYxYjU=", "commit": {"author": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-15T21:23:39Z"}, "committer": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-15T22:07:30Z"}, "message": "normalize use of backticks in compiler messages for libsyntax/parse\n\nhttps://github.com/rust-lang/rust/issues/60532", "tree": {"sha": "eebf449d74302f48bbf5236f8ba7e7e4eb176ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eebf449d74302f48bbf5236f8ba7e7e4eb176ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ddafaf6f95370935be339af71974da34752f1b5", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEExrhwoK6DmrCETV5+4ilOki9MVuUFAl0s+SIACgkQ4ilOki9M\nVuUN3gv9EDFGTgc1ZntG/11X0nO+fawQNFWbKceeZoO6qI4Dd1YSfImhhZYdelI2\noa/WqGYEHByZWT4pyRjAW3wkff1OAszLJVf3jeNNgtuIDlrP4S/TGrKc+xqSrkKl\nd2NqVUTM+Whq9FcwfmTbxdODL0vxg+Nv9D84K3nit0T7iLcfBKTh3igS3oLAA/P3\n3/NgTgQ6dus6He1JoHCXj0AfYK0dLbkY2YDhWkxDRglc3FzjJ1CZ+r+8JgGaZr3J\n4BGqg9ErfzbA4aBpFYWSttuzPbX2VwtakYBALNXoy34CjdCDvnCki9fjsUbelf8Z\nuhyfVaEuVb2AydcOzvWvdaXxhbhRgx3KqDhLH4orLVibe/mNZQ8zLda8COolQQ0M\nKUmGkWNUy1KZt92GfwM0oyy42IYflFRK800yuen4N1GtKjUpDU4e4U9ysGWjwM1t\nf7pPcJhMtEaly2sITsaPNjsPCwxaLoTc1O22BNRhwVWWDMQwl/mNvHjfsP18LQAG\n+irekhwT\n=3Ou7\n-----END PGP SIGNATURE-----", "payload": "tree eebf449d74302f48bbf5236f8ba7e7e4eb176ca7\nparent 4b65a86ebace8600c8e269e8bfe3365cdc460e68\nauthor Samy Kacimi <samy.kacimi@protonmail.ch> 1563225819 +0200\ncommitter Samy Kacimi <samy.kacimi@protonmail.ch> 1563228450 +0200\n\nnormalize use of backticks in compiler messages for libsyntax/parse\n\nhttps://github.com/rust-lang/rust/issues/60532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ddafaf6f95370935be339af71974da34752f1b5", "html_url": "https://github.com/rust-lang/rust/commit/7ddafaf6f95370935be339af71974da34752f1b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ddafaf6f95370935be339af71974da34752f1b5/comments", "author": null, "committer": null, "parents": [{"sha": "4b65a86ebace8600c8e269e8bfe3365cdc460e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b65a86ebace8600c8e269e8bfe3365cdc460e68", "html_url": "https://github.com/rust-lang/rust/commit/4b65a86ebace8600c8e269e8bfe3365cdc460e68"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "1758d0b0bb947781bcef87b8afa132918f53a351", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ddafaf6f95370935be339af71974da34752f1b5/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ddafaf6f95370935be339af71974da34752f1b5/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=7ddafaf6f95370935be339af71974da34752f1b5", "patch": "@@ -226,7 +226,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_unsuffixed_lit(&mut self) -> PResult<'a, ast::Lit> {\n         let lit = self.parse_lit()?;\n-        debug!(\"Checking if {:?} is unusuffixed.\", lit);\n+        debug!(\"checking if {:?} is unusuffixed\", lit);\n \n         if !lit.node.is_unsuffixed() {\n             let msg = \"suffixed literals are not allowed in attributes\";"}, {"sha": "0e88a0ee289378ff3353d269a3d014c65f2ec897", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ddafaf6f95370935be339af71974da34752f1b5/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ddafaf6f95370935be339af71974da34752f1b5/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=7ddafaf6f95370935be339af71974da34752f1b5", "patch": "@@ -919,7 +919,7 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.note(\"#![feature(type_ascription)] lets you annotate an \\\n+                err.note(\"`#![feature(type_ascription)]` lets you annotate an \\\n                           expression with a type: `<expr>: <type>`\")\n                     .span_note(\n                         lhs_span,"}, {"sha": "7be8e57c7f87fdaa7fb536e9601846b902489cad", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ddafaf6f95370935be339af71974da34752f1b5/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ddafaf6f95370935be339af71974da34752f1b5/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=7ddafaf6f95370935be339af71974da34752f1b5", "patch": "@@ -443,7 +443,7 @@ impl<'a> StringReader<'a> {\n \n                 let is_beginning_of_file = self.pos == self.source_file.start_pos;\n                 if is_beginning_of_file {\n-                    debug!(\"Skipping a shebang\");\n+                    debug!(\"skipping a shebang\");\n                     let start = self.pos;\n                     while !self.ch_is('\\n') && !self.is_eof() {\n                         self.bump();"}, {"sha": "4f0dc0a48876507581ba75d6a65186fb6d590477", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=7ddafaf6f95370935be339af71974da34752f1b5", "patch": "@@ -89,7 +89,7 @@ error: expected type, found `4`\n LL |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-22644.rs:34:20\n    |"}, {"sha": "0218a7abeaa4c8a4e6a39a433ac1fdc6f56aa646", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=7ddafaf6f95370935be339af71974da34752f1b5", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `42`\n LL |     Test::Drill(field: 42);\n    |                        ^^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-34255-1.rs:8:17\n    |"}, {"sha": "84e4c87ebc4daa215f691aeb408debbc5188d2e8", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=7ddafaf6f95370935be339af71974da34752f1b5", "patch": "@@ -14,7 +14,7 @@ error: expected type, found keyword `loop`\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/lifetime_starts_expressions.rs:6:12\n    |"}, {"sha": "d525bd3f4c6e5fee5e26c4b8466c158d3f282cfa", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=7ddafaf6f95370935be339af71974da34752f1b5", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `3`\n LL |     let x = Enum::Foo(a: 3, b: 4);\n    |                          ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/recover-from-bad-variant.rs:7:23\n    |"}, {"sha": "1f8989db81412856a61c3e4a9c45ee12ccfb085f", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ddafaf6f95370935be339af71974da34752f1b5/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=7ddafaf6f95370935be339af71974da34752f1b5", "patch": "@@ -12,7 +12,7 @@ error: expected type, found `0`\n LL |     println!(\"test\"): 0;\n    |                       ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n    |"}]}