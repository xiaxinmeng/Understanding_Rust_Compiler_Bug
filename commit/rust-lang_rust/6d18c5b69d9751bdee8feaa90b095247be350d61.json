{"sha": "6d18c5b69d9751bdee8feaa90b095247be350d61", "node_id": "C_kwDOAAsO6NoAKDZkMThjNWI2OWQ5NzUxYmRlZThmZWFhOTBiMDk1MjQ3YmUzNTBkNjE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-27T22:23:09Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-28T08:31:59Z"}, "message": "feat: Honor recursion limit configuration\n\nThis patch makes RA understand `#![recursion_limit = \"N\"]` annotations.\n\n- `crate_limits` query is moved to `DefDatabase`\n- `DefMap` now has `recursion_limit: Option<u32>` field", "tree": {"sha": "220f0d3961ffcca5ffa1ecf70670fb8ded650f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220f0d3961ffcca5ffa1ecf70670fb8ded650f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d18c5b69d9751bdee8feaa90b095247be350d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d18c5b69d9751bdee8feaa90b095247be350d61", "html_url": "https://github.com/rust-lang/rust/commit/6d18c5b69d9751bdee8feaa90b095247be350d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d18c5b69d9751bdee8feaa90b095247be350d61/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1", "html_url": "https://github.com/rust-lang/rust/commit/81211f538ccfbcd1cfb83dc0ad29c7577ad74fa1"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "d80660f7c9a36553775b52a5ac483e602b4ee651", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=6d18c5b69d9751bdee8feaa90b095247be350d61", "patch": "@@ -69,21 +69,6 @@ pub trait SourceDatabase: FileLoader + std::fmt::Debug {\n     /// The crate graph.\n     #[salsa::input]\n     fn crate_graph(&self) -> Arc<CrateGraph>;\n-\n-    #[salsa::transparent]\n-    fn crate_limits(&self, crate_id: CrateId) -> CrateLimits;\n-}\n-\n-pub struct CrateLimits {\n-    /// The maximum depth for potentially infinitely-recursive compile-time operations like macro expansion or auto-dereference.\n-    pub recursion_limit: u32,\n-}\n-\n-fn crate_limits(_db: &dyn SourceDatabase, _crate_id: CrateId) -> CrateLimits {\n-    CrateLimits {\n-        // 128 is the default in rustc.\n-        recursion_limit: 128,\n-    }\n }\n \n fn parse_query(db: &dyn SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {"}, {"sha": "1d84da48fb9bcbd2ed5471be4456ae1b8623ff17", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=6d18c5b69d9751bdee8feaa90b095247be350d61", "patch": "@@ -61,6 +61,24 @@ fn main() { n_nuple!(1,2,3); }\n     );\n }\n \n+#[test]\n+fn recursion_limit() {\n+    cov_mark::check!(your_stack_belongs_to_me);\n+\n+    lower(\n+        r#\"\n+#![recursion_limit = \"2\"]\n+macro_rules! n_nuple {\n+    ($e:tt) => ();\n+    ($first:tt $($rest:tt)*) => {{\n+        n_nuple!($($rest)*)\n+    }};\n+}\n+fn main() { n_nuple!(1,2,3); }\n+\"#,\n+    );\n+}\n+\n #[test]\n fn macro_resolve() {\n     // Regression test for a path resolution bug introduced with inner item handling."}, {"sha": "f9dd935c4b0c994e2cda76947b69852f7a04d02a", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=6d18c5b69d9751bdee8feaa90b095247be350d61", "patch": "@@ -157,9 +157,26 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n \n     #[salsa::invoke(visibility::function_visibility_query)]\n     fn function_visibility(&self, def: FunctionId) -> Visibility;\n+\n+    #[salsa::transparent]\n+    fn crate_limits(&self, crate_id: CrateId) -> CrateLimits;\n }\n \n fn crate_def_map_wait(db: &dyn DefDatabase, krate: CrateId) -> Arc<DefMap> {\n     let _p = profile::span(\"crate_def_map:wait\");\n     db.crate_def_map_query(krate)\n }\n+\n+pub struct CrateLimits {\n+    /// The maximum depth for potentially infinitely-recursive compile-time operations like macro expansion or auto-dereference.\n+    pub recursion_limit: u32,\n+}\n+\n+fn crate_limits(db: &dyn DefDatabase, crate_id: CrateId) -> CrateLimits {\n+    let def_map = db.crate_def_map(crate_id);\n+\n+    CrateLimits {\n+        // 128 is the default in rustc.\n+        recursion_limit: def_map.recursion_limit().unwrap_or(128),\n+    }\n+}"}, {"sha": "ca4255c58193f9b407b543448107789a906b3ccd", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=6d18c5b69d9751bdee8feaa90b095247be350d61", "patch": "@@ -114,6 +114,7 @@ pub struct DefMap {\n     registered_tools: Vec<SmolStr>,\n \n     edition: Edition,\n+    recursion_limit: Option<u32>,\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n@@ -272,6 +273,7 @@ impl DefMap {\n             block: None,\n             krate,\n             edition,\n+            recursion_limit: None,\n             extern_prelude: FxHashMap::default(),\n             exported_proc_macros: FxHashMap::default(),\n             prelude: None,\n@@ -461,6 +463,7 @@ impl DefMap {\n             registered_tools,\n             block: _,\n             edition: _,\n+            recursion_limit: _,\n             krate: _,\n             prelude: _,\n             root: _,\n@@ -482,6 +485,10 @@ impl DefMap {\n     pub fn diagnostics(&self) -> &[DefDiagnostic] {\n         self.diagnostics.as_slice()\n     }\n+\n+    pub fn recursion_limit(&self) -> Option<u32> {\n+        self.recursion_limit\n+    }\n }\n \n impl ModuleData {"}, {"sha": "7f7213f4c3e6946a42c7d6b68572cd44be147031", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=6d18c5b69d9751bdee8feaa90b095247be350d61", "patch": "@@ -271,6 +271,17 @@ impl DefCollector<'_> {\n                     None => continue,\n                 };\n \n+                if *attr_name == hir_expand::name![recursion_limit] {\n+                    if let Some(input) = &attr.input {\n+                        if let AttrInput::Literal(limit) = &**input {\n+                            if let Ok(limit) = limit.parse() {\n+                                self.def_map.recursion_limit = Some(limit);\n+                            }\n+                        }\n+                    }\n+                    continue;\n+                }\n+\n                 let attr_is_register_like = *attr_name == hir_expand::name![register_attr]\n                     || *attr_name == hir_expand::name![register_tool];\n                 if !attr_is_register_like {"}, {"sha": "c36bd09e2b3b780e90b60291fee178431c08c327", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d18c5b69d9751bdee8feaa90b095247be350d61/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=6d18c5b69d9751bdee8feaa90b095247be350d61", "patch": "@@ -270,6 +270,7 @@ pub mod known {\n         global_allocator,\n         test,\n         test_case,\n+        recursion_limit,\n         // Safe intrinsics\n         abort,\n         add_with_overflow,"}]}