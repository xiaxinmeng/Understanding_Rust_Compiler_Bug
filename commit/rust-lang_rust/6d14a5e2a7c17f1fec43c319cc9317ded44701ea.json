{"sha": "6d14a5e2a7c17f1fec43c319cc9317ded44701ea", "node_id": "C_kwDOAAsO6NoAKDZkMTRhNWUyYTdjMTdmMWZlYzQzYzMxOWNjOTMxN2RlZDQ0NzAxZWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-05T23:21:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T00:18:37Z"}, "message": "avoid strerror_r failure on unknown errnum", "tree": {"sha": "cc7f4c42b0622a367c35c90ea39ef0e3a03c0de7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc7f4c42b0622a367c35c90ea39ef0e3a03c0de7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d14a5e2a7c17f1fec43c319cc9317ded44701ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d14a5e2a7c17f1fec43c319cc9317ded44701ea", "html_url": "https://github.com/rust-lang/rust/commit/6d14a5e2a7c17f1fec43c319cc9317ded44701ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d14a5e2a7c17f1fec43c319cc9317ded44701ea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a87926a312fca90033c03c2ece5257e960dd242", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a87926a312fca90033c03c2ece5257e960dd242", "html_url": "https://github.com/rust-lang/rust/commit/1a87926a312fca90033c03c2ece5257e960dd242"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "220347ff1b96884371ebb0f12ffd6842a6962bde", "filename": "src/helpers.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d14a5e2a7c17f1fec43c319cc9317ded44701ea/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d14a5e2a7c17f1fec43c319cc9317ded44701ea/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=6d14a5e2a7c17f1fec43c319cc9317ded44701ea", "patch": "@@ -609,20 +609,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// The inverse of `io_error_to_errnum`.\n-    fn errnum_to_io_error(\n+    #[allow(clippy::needless_return)]\n+    fn try_errnum_to_io_error(\n         &self,\n         errnum: Scalar<Provenance>,\n-    ) -> InterpResult<'tcx, std::io::ErrorKind> {\n+    ) -> InterpResult<'tcx, Option<std::io::ErrorKind>> {\n         let this = self.eval_context_ref();\n         let target = &this.tcx.sess.target;\n         if target.families.iter().any(|f| f == \"unix\") {\n             let errnum = errnum.to_i32()?;\n             for &(name, kind) in UNIX_IO_ERROR_TABLE {\n                 if errnum == this.eval_libc_i32(name)? {\n-                    return Ok(kind);\n+                    return Ok(Some(kind));\n                 }\n             }\n-            throw_unsup_format!(\"raw errnum {:?} cannot be translated into io::Error\", errnum)\n+            // Our table is as complete as the mapping in std, so we are okay with saying \"that's a\n+            // strange one\" here.\n+            return Ok(None);\n         } else {\n             throw_unsup_format!(\n                 \"converting errnum into io::Error is unsupported for OS {}\","}, {"sha": "dc80d592a0c1a5919a0fe6fe461f0dea375b6efd", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d14a5e2a7c17f1fec43c319cc9317ded44701ea/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d14a5e2a7c17f1fec43c319cc9317ded44701ea/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=6d14a5e2a7c17f1fec43c319cc9317ded44701ea", "patch": "@@ -465,8 +465,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let buf = this.read_pointer(buf)?;\n                 let buflen = this.read_scalar(buflen)?.to_machine_usize(this)?;\n \n-                let error = this.errnum_to_io_error(errnum)?;\n-                let formatted = error.to_string();\n+                let error = this.try_errnum_to_io_error(errnum)?;\n+                let formatted = match error {\n+                    Some(err) => format!(\"{err}\"),\n+                    None => format!(\"<unknown errnum in strerror_r: {errnum}>\"),\n+                };\n                 let (complete, _) = this.write_os_str_to_c_str(OsStr::new(&formatted), buf, buflen)?;\n                 let ret = if complete { 0 } else { this.eval_libc_i32(\"ERANGE\")? };\n                 this.write_int(ret, dest)?;"}, {"sha": "af9f854ce527f913fd54e6a25866b9a6593855fc", "filename": "tests/pass/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d14a5e2a7c17f1fec43c319cc9317ded44701ea/tests%2Fpass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d14a5e2a7c17f1fec43c319cc9317ded44701ea/tests%2Fpass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ffs.rs?ref=6d14a5e2a7c17f1fec43c319cc9317ded44701ea", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(rustc_private)]\n #![feature(io_error_more)]\n+#![feature(io_error_uncategorized)]\n \n use std::ffi::CString;\n use std::fs::{\n@@ -26,6 +27,7 @@ fn main() {\n     test_directory();\n     test_canonicalize();\n     test_dup_stdout_stderr();\n+    test_from_raw_os_error();\n \n     // These all require unix, if the test is changed to no longer `ignore-windows`, move these to a unix test\n     test_file_open_unix_allow_two_args();\n@@ -434,3 +436,11 @@ fn test_dup_stdout_stderr() {\n         libc::write(new_stderr, bytes.as_ptr() as *const libc::c_void, bytes.len());\n     }\n }\n+\n+fn test_from_raw_os_error() {\n+    let code = 6; // not a code that std or Miri know\n+    let error = Error::from_raw_os_error(code);\n+    assert!(matches!(error.kind(), ErrorKind::Uncategorized));\n+    // Make sure we can also format this.\n+    format!(\"{error:?}\");\n+}"}]}