{"sha": "6c476ce462333fccd89ce3ed8c290998db874653", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNDc2Y2U0NjIzMzNmY2NkODljZTNlZDhjMjkwOTk4ZGI4NzQ2NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-25T20:37:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-25T20:37:02Z"}, "message": "Auto merge of #44279 - smaeul:crt_static-deps, r=alexcrichton\n\nRequire rlibs for dependent crates when linking static executables\n\nThis handles the case for `CrateTypeExecutable` and `+crt_static`. I reworked the match block to avoid duplicating the `attempt_static` and error checking code again (this case would have been a copy of the `CrateTypeCdylib`/`CrateTypeStaticlib` case).\n\nOn `linux-musl` targets where `std` was built with `crt_static = false` in `config.toml`, this change brings the test suite from entirely failing to mostly passing.\n\nThis change should not affect behavior for other crate types, or for targets which do not respect `+crt_static`.", "tree": {"sha": "b038e489f1b2bbaa639778c0061506fbe96826ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b038e489f1b2bbaa639778c0061506fbe96826ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c476ce462333fccd89ce3ed8c290998db874653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c476ce462333fccd89ce3ed8c290998db874653", "html_url": "https://github.com/rust-lang/rust/commit/6c476ce462333fccd89ce3ed8c290998db874653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c476ce462333fccd89ce3ed8c290998db874653/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df1f7b82d9bede5122ee745cdd4e731abbce892", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df1f7b82d9bede5122ee745cdd4e731abbce892", "html_url": "https://github.com/rust-lang/rust/commit/3df1f7b82d9bede5122ee745cdd4e731abbce892"}, {"sha": "314c2b14479a98acf9155dce43348e77073a09a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/314c2b14479a98acf9155dce43348e77073a09a1", "html_url": "https://github.com/rust-lang/rust/commit/314c2b14479a98acf9155dce43348e77073a09a1"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "db0ecb6aa5eb1d624315e9f478530666b6d50c12", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 47, "deletions": 39, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6c476ce462333fccd89ce3ed8c290998db874653/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c476ce462333fccd89ce3ed8c290998db874653/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=6c476ce462333fccd89ce3ed8c290998db874653", "patch": "@@ -112,52 +112,61 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return Vec::new();\n     }\n \n-    match ty {\n-        // If the global prefer_dynamic switch is turned off, first attempt\n-        // static linkage (this can fail).\n-        config::CrateTypeExecutable if !sess.opts.cg.prefer_dynamic => {\n-            if let Some(v) = attempt_static(tcx) {\n-                return v;\n-            }\n-        }\n+    let preferred_linkage = match ty {\n+        // cdylibs must have all static dependencies.\n+        config::CrateTypeCdylib => Linkage::Static,\n+\n+        // Generating a dylib without `-C prefer-dynamic` means that we're going\n+        // to try to eagerly statically link all dependencies. This is normally\n+        // done for end-product dylibs, not intermediate products.\n+        config::CrateTypeDylib if !sess.opts.cg.prefer_dynamic => Linkage::Static,\n+        config::CrateTypeDylib => Linkage::Dynamic,\n+\n+        // If the global prefer_dynamic switch is turned off, or the final\n+        // executable will be statically linked, prefer static crate linkage.\n+        config::CrateTypeExecutable if !sess.opts.cg.prefer_dynamic ||\n+            sess.crt_static() => Linkage::Static,\n+        config::CrateTypeExecutable => Linkage::Dynamic,\n+\n+        // proc-macro crates are required to be dylibs, and they're currently\n+        // required to link to libsyntax as well.\n+        config::CrateTypeProcMacro => Linkage::Dynamic,\n \n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything.\n-        config::CrateTypeRlib => return Vec::new(),\n-\n-        // Staticlibs and cdylibs must have all static dependencies. If any fail\n-        // to be found, we generate some nice pretty errors.\n-        config::CrateTypeStaticlib |\n-        config::CrateTypeCdylib => {\n-            if let Some(v) = attempt_static(tcx) {\n-                return v;\n-            }\n+        config::CrateTypeRlib => Linkage::NotLinked,\n+\n+        // staticlibs must have all static dependencies.\n+        config::CrateTypeStaticlib => Linkage::Static,\n+    };\n+\n+    if preferred_linkage == Linkage::NotLinked {\n+        // If the crate is not linked, there are no link-time dependencies.\n+        return Vec::new();\n+    }\n+\n+    if preferred_linkage == Linkage::Static {\n+        // Attempt static linkage first. For dylibs and executables, we may be\n+        // able to retry below with dynamic linkage.\n+        if let Some(v) = attempt_static(tcx) {\n+            return v;\n+        }\n+\n+        // Staticlibs, cdylibs, and static executables must have all static\n+        // dependencies. If any are not found, generate some nice pretty errors.\n+        if ty == config::CrateTypeCdylib || ty == config::CrateTypeStaticlib ||\n+                (ty == config::CrateTypeExecutable && sess.crt_static() &&\n+                !sess.target.target.options.crt_static_allows_dylibs) {\n             for &cnum in tcx.crates().iter() {\n                 if tcx.dep_kind(cnum).macros_only() { continue }\n                 let src = tcx.used_crate_source(cnum);\n                 if src.rlib.is_some() { continue }\n-                sess.err(&format!(\"dependency `{}` not found in rlib format\",\n+                sess.err(&format!(\"crate `{}` required to be available in rlib format, \\\n+                                  but was not found in this form\",\n                                   tcx.crate_name(cnum)));\n             }\n             return Vec::new();\n         }\n-\n-        // Generating a dylib without `-C prefer-dynamic` means that we're going\n-        // to try to eagerly statically link all dependencies. This is normally\n-        // done for end-product dylibs, not intermediate products.\n-        config::CrateTypeDylib if !sess.opts.cg.prefer_dynamic => {\n-            if let Some(v) = attempt_static(tcx) {\n-                return v;\n-            }\n-        }\n-\n-        // Everything else falls through below. This will happen either with the\n-        // `-C prefer-dynamic` or because we're a proc-macro crate. Note that\n-        // proc-macro crates are required to be dylibs, and they're currently\n-        // required to link to libsyntax as well.\n-        config::CrateTypeExecutable |\n-        config::CrateTypeDylib |\n-        config::CrateTypeProcMacro => {},\n     }\n \n     let mut formats = FxHashMap();\n@@ -236,10 +245,9 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     Linkage::Static => \"rlib\",\n                     _ => \"dylib\",\n                 };\n-                let name = tcx.crate_name(cnum);\n-                sess.err(&format!(\"crate `{}` required to be available in {}, \\\n-                                  but it was not available in this form\",\n-                                  name, kind));\n+                sess.err(&format!(\"crate `{}` required to be available in {} format, \\\n+                                  but was not found in this form\",\n+                                  tcx.crate_name(cnum), kind));\n             }\n         }\n     }"}, {"sha": "bf7189c21fbfdfc4a588d5df62a9fd6709da47da", "filename": "src/test/compile-fail/cdylib-deps-must-be-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c476ce462333fccd89ce3ed8c290998db874653/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c476ce462333fccd89ce3ed8c290998db874653/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs?ref=6c476ce462333fccd89ce3ed8c290998db874653", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: dependency `cdylib_dep` not found in rlib format\n+// error-pattern: crate `cdylib_dep` required to be available in rlib format, but was not found\n // aux-build:cdylib-dep.rs\n // ignore-musl\n // ignore-emscripten"}, {"sha": "a61ff05e8c8b5c37bf7664453704df7f67b775a2", "filename": "src/test/compile-fail/rmeta_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c476ce462333fccd89ce3ed8c290998db874653/src%2Ftest%2Fcompile-fail%2Frmeta_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c476ce462333fccd89ce3ed8c290998db874653/src%2Ftest%2Fcompile-fail%2Frmeta_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frmeta_lib.rs?ref=6c476ce462333fccd89ce3ed8c290998db874653", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:rmeta_meta.rs\n // no-prefer-dynamic\n-// error-pattern: crate `rmeta_meta` required to be available in rlib, but it was not available\n+// error-pattern: crate `rmeta_meta` required to be available in rlib format, but was not found\n \n // Check that building a non-metadata crate fails if a dependent crate is\n // metadata-only."}]}