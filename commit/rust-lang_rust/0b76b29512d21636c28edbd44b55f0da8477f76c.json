{"sha": "0b76b29512d21636c28edbd44b55f0da8477f76c", "node_id": "C_kwDOAAsO6NoAKDBiNzZiMjk1MTJkMjE2MzZjMjhlZGJkNDRiNTVmMGRhODQ3N2Y3NmM", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-09-28T19:23:46Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-09-28T19:23:46Z"}, "message": "support non-extern-prelude dependencies", "tree": {"sha": "95812feeb6af86845bd29eb671f262eb08c1fbd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95812feeb6af86845bd29eb671f262eb08c1fbd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b76b29512d21636c28edbd44b55f0da8477f76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b76b29512d21636c28edbd44b55f0da8477f76c", "html_url": "https://github.com/rust-lang/rust/commit/0b76b29512d21636c28edbd44b55f0da8477f76c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b76b29512d21636c28edbd44b55f0da8477f76c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd9f27d42445bcc4bb6b857bd441170c833b0475", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9f27d42445bcc4bb6b857bd441170c833b0475", "html_url": "https://github.com/rust-lang/rust/commit/cd9f27d42445bcc4bb6b857bd441170c833b0475"}], "stats": {"total": 260, "additions": 205, "deletions": 55}, "files": [{"sha": "017684fc83023c76b1611b79363a5c1017ebc70e", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -10,8 +10,8 @@ use tt::Subtree;\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n-    input::CrateName, Change, CrateDisplayName, CrateGraph, CrateId, Edition, Env, FileId,\n-    FilePosition, FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n+    input::CrateName, Change, CrateDisplayName, CrateGraph, CrateId, Dependency, Edition, Env,\n+    FileId, FilePosition, FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n     SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n@@ -144,8 +144,9 @@ impl ChangeFixture {\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n                 for dep in meta.deps {\n+                    let prelude = meta.extern_prelude.contains(&dep);\n                     let dep = CrateName::normalize_dashes(&dep);\n-                    crate_deps.push((crate_name.clone(), dep))\n+                    crate_deps.push((crate_name.clone(), dep, prelude))\n                 }\n             } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n                 assert!(default_crate_root.is_none());\n@@ -173,10 +174,15 @@ impl ChangeFixture {\n                 Default::default(),\n             );\n         } else {\n-            for (from, to) in crate_deps {\n+            for (from, to, prelude) in crate_deps {\n                 let from_id = crates[&from];\n                 let to_id = crates[&to];\n-                crate_graph.add_dep(from_id, CrateName::new(&to).unwrap(), to_id).unwrap();\n+                crate_graph\n+                    .add_dep(\n+                        from_id,\n+                        Dependency::with_prelude(CrateName::new(&to).unwrap(), to_id, prelude),\n+                    )\n+                    .unwrap();\n             }\n         }\n \n@@ -203,7 +209,9 @@ impl ChangeFixture {\n             );\n \n             for krate in all_crates {\n-                crate_graph.add_dep(krate, CrateName::new(\"core\").unwrap(), core_crate).unwrap();\n+                crate_graph\n+                    .add_dep(krate, Dependency::new(CrateName::new(\"core\").unwrap(), core_crate))\n+                    .unwrap();\n             }\n         }\n \n@@ -235,7 +243,10 @@ impl ChangeFixture {\n \n             for krate in all_crates {\n                 crate_graph\n-                    .add_dep(krate, CrateName::new(\"proc_macros\").unwrap(), proc_macros_crate)\n+                    .add_dep(\n+                        krate,\n+                        Dependency::new(CrateName::new(\"proc_macros\").unwrap(), proc_macros_crate),\n+                    )\n                     .unwrap();\n             }\n         }\n@@ -301,6 +312,7 @@ struct FileMeta {\n     path: String,\n     krate: Option<String>,\n     deps: Vec<String>,\n+    extern_prelude: Vec<String>,\n     cfg: CfgOptions,\n     edition: Edition,\n     env: Env,\n@@ -313,10 +325,12 @@ impl From<Fixture> for FileMeta {\n         f.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n         f.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n \n+        let deps = f.deps;\n         FileMeta {\n             path: f.path,\n             krate: f.krate,\n-            deps: f.deps,\n+            extern_prelude: f.extern_prelude.unwrap_or_else(|| deps.clone()),\n+            deps,\n             cfg,\n             edition: f.edition.as_ref().map_or(Edition::CURRENT, |v| Edition::from_str(v).unwrap()),\n             env: f.env.into_iter().collect(),"}, {"sha": "1dd7783b0ecba3125ce7e643a3067e891250a41f", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -217,6 +217,22 @@ pub struct Env {\n pub struct Dependency {\n     pub crate_id: CrateId,\n     pub name: CrateName,\n+    prelude: bool,\n+}\n+\n+impl Dependency {\n+    pub fn new(name: CrateName, crate_id: CrateId) -> Self {\n+        Self { name, crate_id, prelude: true }\n+    }\n+\n+    pub fn with_prelude(name: CrateName, crate_id: CrateId, prelude: bool) -> Self {\n+        Self { name, crate_id, prelude }\n+    }\n+\n+    /// Whether this dependency is to be added to the depending crate's extern prelude.\n+    pub fn is_prelude(&self) -> bool {\n+        self.prelude\n+    }\n }\n \n impl CrateGraph {\n@@ -249,22 +265,21 @@ impl CrateGraph {\n     pub fn add_dep(\n         &mut self,\n         from: CrateId,\n-        name: CrateName,\n-        to: CrateId,\n+        dep: Dependency,\n     ) -> Result<(), CyclicDependenciesError> {\n         let _p = profile::span(\"add_dep\");\n \n         // Check if adding a dep from `from` to `to` creates a cycle. To figure\n         // that out, look for a  path in the *opposite* direction, from `to` to\n         // `from`.\n-        if let Some(path) = self.find_path(&mut FxHashSet::default(), to, from) {\n+        if let Some(path) = self.find_path(&mut FxHashSet::default(), dep.crate_id, from) {\n             let path = path.into_iter().map(|it| (it, self[it].display_name.clone())).collect();\n             let err = CyclicDependenciesError { path };\n-            assert!(err.from().0 == from && err.to().0 == to);\n+            assert!(err.from().0 == from && err.to().0 == dep.crate_id);\n             return Err(err);\n         }\n \n-        self.arena.get_mut(&from).unwrap().add_dep(name, to);\n+        self.arena.get_mut(&from).unwrap().add_dep(dep);\n         Ok(())\n     }\n \n@@ -409,7 +424,7 @@ impl CrateGraph {\n                     .get_mut(&std)\n                     .unwrap()\n                     .dependencies\n-                    .push(Dependency { crate_id: cfg_if, name: CrateName::new(\"cfg_if\").unwrap() });\n+                    .push(Dependency::new(CrateName::new(\"cfg_if\").unwrap(), cfg_if));\n                 true\n             }\n             _ => false,\n@@ -435,8 +450,8 @@ impl CrateId {\n }\n \n impl CrateData {\n-    fn add_dep(&mut self, name: CrateName, crate_id: CrateId) {\n-        self.dependencies.push(Dependency { crate_id, name })\n+    fn add_dep(&mut self, dep: Dependency) {\n+        self.dependencies.push(dep)\n     }\n }\n \n@@ -562,9 +577,15 @@ mod tests {\n             Env::default(),\n             Default::default(),\n         );\n-        assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n-        assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n-        assert!(graph.add_dep(crate3, CrateName::new(\"crate1\").unwrap(), crate1).is_err());\n+        assert!(graph\n+            .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate2, Dependency::new(CrateName::new(\"crate3\").unwrap(), crate3))\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate3, Dependency::new(CrateName::new(\"crate1\").unwrap(), crate1))\n+            .is_err());\n     }\n \n     #[test]\n@@ -588,8 +609,12 @@ mod tests {\n             Env::default(),\n             Default::default(),\n         );\n-        assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n-        assert!(graph.add_dep(crate2, CrateName::new(\"crate2\").unwrap(), crate2).is_err());\n+        assert!(graph\n+            .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate2, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n+            .is_err());\n     }\n \n     #[test]\n@@ -622,8 +647,12 @@ mod tests {\n             Env::default(),\n             Default::default(),\n         );\n-        assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n-        assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n+        assert!(graph\n+            .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate2, Dependency::new(CrateName::new(\"crate3\").unwrap(), crate3))\n+            .is_ok());\n     }\n \n     #[test]\n@@ -648,14 +677,14 @@ mod tests {\n             Default::default(),\n         );\n         assert!(graph\n-            .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)\n+            .add_dep(\n+                crate1,\n+                Dependency::new(CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)\n+            )\n             .is_ok());\n         assert_eq!(\n             graph[crate1].dependencies,\n-            vec![Dependency {\n-                crate_id: crate2,\n-                name: CrateName::new(\"crate_name_with_dashes\").unwrap()\n-            }]\n+            vec![Dependency::new(CrateName::new(\"crate_name_with_dashes\").unwrap(), crate2)]\n         );\n     }\n }"}, {"sha": "53ab87005ca0ea98c95db0f08287c66ba71d92d5", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -61,14 +61,17 @@ pub(super) fn collect_defs(\n ) -> DefMap {\n     let crate_graph = db.crate_graph();\n \n-    if block.is_none() {\n-        // populate external prelude\n-        for dep in &crate_graph[def_map.krate].dependencies {\n-            tracing::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n-            let dep_def_map = db.crate_def_map(dep.crate_id);\n-            def_map\n-                .extern_prelude\n-                .insert(dep.as_name(), dep_def_map.module_id(dep_def_map.root).into());\n+    let mut deps = FxHashMap::default();\n+    // populate external prelude and dependency list\n+    for dep in &crate_graph[def_map.krate].dependencies {\n+        tracing::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n+        let dep_def_map = db.crate_def_map(dep.crate_id);\n+        let dep_root = dep_def_map.module_id(dep_def_map.root);\n+\n+        deps.insert(dep.as_name(), dep_root.into());\n+\n+        if dep.is_prelude() && block.is_none() {\n+            def_map.extern_prelude.insert(dep.as_name(), dep_root.into());\n         }\n     }\n \n@@ -87,6 +90,7 @@ pub(super) fn collect_defs(\n     let mut collector = DefCollector {\n         db,\n         def_map,\n+        deps,\n         glob_imports: FxHashMap::default(),\n         unresolved_imports: Vec::new(),\n         resolved_imports: Vec::new(),\n@@ -239,6 +243,7 @@ struct DefData<'a> {\n struct DefCollector<'a> {\n     db: &'a dyn DefDatabase,\n     def_map: DefMap,\n+    deps: FxHashMap<Name, ModuleDefId>,\n     glob_imports: FxHashMap<LocalModuleId, Vec<(LocalModuleId, Visibility)>>,\n     unresolved_imports: Vec<ImportDirective>,\n     resolved_imports: Vec<ImportDirective>,\n@@ -660,7 +665,7 @@ impl DefCollector<'_> {\n             self.def_map.edition,\n         );\n \n-        let res = self.def_map.resolve_name_in_extern_prelude(self.db, &extern_crate.name);\n+        let res = self.resolve_extern_crate(&extern_crate.name);\n \n         if let Some(ModuleDefId::ModuleId(m)) = res.take_types() {\n             if m == self.def_map.module_id(current_module_id) {\n@@ -720,13 +725,13 @@ impl DefCollector<'_> {\n     fn resolve_import(&self, module_id: LocalModuleId, import: &Import) -> PartialResolvedImport {\n         tracing::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n         if import.is_extern_crate {\n-            let res = self.def_map.resolve_name_in_extern_prelude(\n-                self.db,\n-                import\n-                    .path\n-                    .as_ident()\n-                    .expect(\"extern crate should have been desugared to one-element path\"),\n-            );\n+            let name = import\n+                .path\n+                .as_ident()\n+                .expect(\"extern crate should have been desugared to one-element path\");\n+\n+            let res = self.resolve_extern_crate(name);\n+\n             if res.is_none() {\n                 PartialResolvedImport::Unresolved\n             } else {\n@@ -766,6 +771,24 @@ impl DefCollector<'_> {\n         }\n     }\n \n+    fn resolve_extern_crate(&self, name: &Name) -> PerNs {\n+        let arc;\n+        let root = match self.def_map.block {\n+            Some(_) => {\n+                arc = self.def_map.crate_root(self.db).def_map(self.db);\n+                &*arc\n+            }\n+            None => &self.def_map,\n+        };\n+\n+        if name == &name!(self) {\n+            cov_mark::hit!(extern_crate_self_as);\n+            PerNs::types(root.module_id(root.root()).into(), Visibility::Public)\n+        } else {\n+            self.deps.get(name).map_or(PerNs::none(), |&it| PerNs::types(it, Visibility::Public))\n+        }\n+    }\n+\n     fn record_resolved_import(&mut self, directive: &ImportDirective) {\n         let module_id = directive.module_id;\n         let import = &directive.import;\n@@ -2009,6 +2032,7 @@ mod tests {\n         let mut collector = DefCollector {\n             db,\n             def_map,\n+            deps: FxHashMap::default(),\n             glob_imports: FxHashMap::default(),\n             unresolved_imports: Vec::new(),\n             resolved_imports: Vec::new(),"}, {"sha": "4fb81bde461905c811a9b2983403e14255b7feb9", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -11,7 +11,6 @@\n //! `ReachedFixedPoint` signals about this.\n \n use base_db::Edition;\n-use hir_expand::name;\n use hir_expand::name::Name;\n \n use crate::{\n@@ -65,11 +64,6 @@ impl DefMap {\n         db: &dyn DefDatabase,\n         name: &Name,\n     ) -> PerNs {\n-        if name == &name!(self) {\n-            cov_mark::hit!(extern_crate_self_as);\n-            return PerNs::types(self.module_id(self.root).into(), Visibility::Public);\n-        }\n-\n         let arc;\n         let root = match self.block {\n             Some(_) => {"}, {"sha": "37336ce1e95f10984d21ce91104c0039f8ada605", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -860,3 +860,33 @@ pub const settings: () = ();\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn non_prelude_deps() {\n+    check(\n+        r#\"\n+//- /lib.rs crate:lib deps:dep extern-prelude:\n+use dep::Struct;\n+//- /dep.rs crate:dep\n+pub struct Struct;\n+        \"#,\n+        expect![[r#\"\n+            crate\n+            Struct: _\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+//- /lib.rs crate:lib deps:dep extern-prelude:\n+extern crate dep;\n+use dep::Struct;\n+//- /dep.rs crate:dep\n+pub struct Struct;\n+        \"#,\n+        expect![[r#\"\n+            crate\n+            Struct: t v\n+            dep: t\n+        \"#]],\n+    );\n+}"}, {"sha": "75ad66a5cc489d88e6f4026164518388d6551d26", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -83,9 +83,8 @@ impl ProjectJson {\n                         deps: crate_data\n                             .deps\n                             .into_iter()\n-                            .map(|dep_data| Dependency {\n-                                crate_id: CrateId(dep_data.krate as u32),\n-                                name: dep_data.name,\n+                            .map(|dep_data| {\n+                                Dependency::new(dep_data.name, CrateId(dep_data.krate as u32))\n                             })\n                             .collect::<Vec<_>>(),\n                         cfg: crate_data.cfg,"}, {"sha": "452ba18fe7572cf95720d99bf2de850be8f532ef", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -166,6 +166,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -231,6 +232,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -287,6 +289,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -295,6 +298,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -407,6 +411,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -415,6 +420,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -527,6 +533,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -535,6 +542,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -615,6 +623,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -680,6 +689,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -738,6 +748,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -746,6 +757,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -860,6 +872,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -868,6 +881,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -982,6 +996,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -990,6 +1005,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1061,6 +1077,7 @@ fn cargo_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1128,6 +1145,7 @@ fn cargo_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1186,6 +1204,7 @@ fn cargo_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1194,6 +1213,7 @@ fn cargo_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1310,6 +1330,7 @@ fn cargo_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1318,6 +1339,7 @@ fn cargo_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1434,6 +1456,7 @@ fn cargo_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"hello_world\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1442,6 +1465,7 @@ fn cargo_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"libc\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1491,6 +1515,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"core\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1581,6 +1606,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"std\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1644,6 +1670,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"core\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1652,6 +1679,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"alloc\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1660,6 +1688,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"std\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],\n@@ -1804,6 +1833,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"alloc\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1812,6 +1842,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"core\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1820,6 +1851,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"panic_abort\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1828,6 +1860,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"panic_unwind\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1836,6 +1869,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"profiler_builtins\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1844,6 +1878,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"std_detect\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1852,6 +1887,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"term\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1860,6 +1896,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"test\",\n                                 ),\n+                                prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n@@ -1868,6 +1905,7 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"unwind\",\n                                 ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: [],"}, {"sha": "225c7f90252fe8915b200563d46909cd30f7537d", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -5,7 +5,9 @@\n use std::{collections::VecDeque, convert::TryFrom, fmt, fs, process::Command};\n \n use anyhow::{format_err, Context, Result};\n-use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n+use base_db::{\n+    CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env, FileId, ProcMacro,\n+};\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -875,7 +877,7 @@ fn sysroot_to_crate_graph(\n }\n \n fn add_dep(graph: &mut CrateGraph, from: CrateId, name: CrateName, to: CrateId) {\n-    if let Err(err) = graph.add_dep(from, name, to) {\n+    if let Err(err) = graph.add_dep(from, Dependency::new(name, to)) {\n         tracing::error!(\"{}\", err)\n     }\n }"}, {"sha": "f2013b34c5aef81e71f10197bc7643c960c8e98c", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76b29512d21636c28edbd44b55f0da8477f76c/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=0b76b29512d21636c28edbd44b55f0da8477f76c", "patch": "@@ -70,6 +70,7 @@ pub struct Fixture {\n     pub text: String,\n     pub krate: Option<String>,\n     pub deps: Vec<String>,\n+    pub extern_prelude: Option<Vec<String>>,\n     pub cfg_atoms: Vec<String>,\n     pub cfg_key_values: Vec<(String, String)>,\n     pub edition: Option<String>,\n@@ -171,6 +172,7 @@ impl Fixture {\n \n         let mut krate = None;\n         let mut deps = Vec::new();\n+        let mut extern_prelude = None;\n         let mut edition = None;\n         let mut cfg_atoms = Vec::new();\n         let mut cfg_key_values = Vec::new();\n@@ -183,6 +185,14 @@ impl Fixture {\n             match key {\n                 \"crate\" => krate = Some(value.to_string()),\n                 \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n+                \"extern-prelude\" => {\n+                    if value.is_empty() {\n+                        extern_prelude = Some(Vec::new());\n+                    } else {\n+                        extern_prelude =\n+                            Some(value.split(',').map(|it| it.to_string()).collect::<Vec<_>>());\n+                    }\n+                }\n                 \"edition\" => edition = Some(value.to_string()),\n                 \"cfg\" => {\n                     for entry in value.split(',') {\n@@ -204,11 +214,21 @@ impl Fixture {\n             }\n         }\n \n+        for prelude_dep in extern_prelude.iter().flatten() {\n+            assert!(\n+                deps.contains(prelude_dep),\n+                \"extern-prelude {:?} must be a subset of deps {:?}\",\n+                extern_prelude,\n+                deps\n+            );\n+        }\n+\n         Fixture {\n             path,\n             text: String::new(),\n             krate,\n             deps,\n+            extern_prelude,\n             cfg_atoms,\n             cfg_key_values,\n             edition,"}]}