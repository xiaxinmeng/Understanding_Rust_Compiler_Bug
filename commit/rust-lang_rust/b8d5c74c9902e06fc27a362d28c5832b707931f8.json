{"sha": "b8d5c74c9902e06fc27a362d28c5832b707931f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZDVjNzRjOTkwMmUwNmZjMjdhMzYyZDI4YzU4MzJiNzA3OTMxZjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-08-11T08:35:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-08-11T12:00:07Z"}, "message": "It now completely compiles without LLVM!!!", "tree": {"sha": "e9cb9b9773f4554fab35f2737c4e8ae0b7e080da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9cb9b9773f4554fab35f2737c4e8ae0b7e080da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d5c74c9902e06fc27a362d28c5832b707931f8", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQIcBAABCgAGBQJZjZxHAAoJEEpHzFJ6U7W8wP4P/0eU6O26/GGd5xjCGn88qiA6\nhVtMjA2YRX9sdNEYM89vlpcgX5TbGsnWrlF5Np1nifL17iIr7S1qtGAm3GjHWoxi\nYXXU+chzMQV7cQVDCgU0aSiyVfdJHW06MWtNSQagoYWU+NUlypyjm1qr9oTvdreZ\nuDU4gdRqxCPaA2JGjhMrm2xKkhsQJGgdGhSihquxXax3yBWu1F46U77WNWFPDs2f\nUR3smQRVxI9+OETWceFVqUlJCWubwEiHsAgKPiOi3m0kEoAhSE5acT0cfjrf/ABe\naK4lsSeIzaD3kT/lzHvSq8oj8+6CZJuNYYFw3kc3yb9x43Gbk3TEKwmirCa29z6l\n9Y5Z4folKaZUaFJM7MtdtUh2NdzqkuIl/VtwPXa7D008kV4EC7Yv7rp/G4HztqiV\ncT38agTqap6qreoekJJCjsKdeaTkIuHwHvOfvSajZJhYfOwcKzj9SSFlbhrG1C7R\nsiopP3iOrrkgcXBFFNWZ7BxV0/vZj46vkfjXWttud+7QeykAzv19g3Fe/gE1y8wz\nzREreHfwjC2B58dZ5mEg0YRccZ7LgufxaL4Q1aTZDO0kgItPO/oRRyQI9rhvLVxi\nbVrRn1grr1m7DI0HEiyEZUPOCBfwRvL2R+kWLTFG3pU439PG6aYOh7BHbjAijtDp\nS1FeCQwwJ9eBNlu7FqRO\n=r7AO\n-----END PGP SIGNATURE-----", "payload": "tree e9cb9b9773f4554fab35f2737c4e8ae0b7e080da\nparent b7314c7cafc657afa6b98eb9c4958e56a82129bb\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1502440501 +0200\ncommitter bjorn3 <bjorn3@users.noreply.github.com> 1502452807 +0200\n\nIt now completely compiles without LLVM!!!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d5c74c9902e06fc27a362d28c5832b707931f8", "html_url": "https://github.com/rust-lang/rust/commit/b8d5c74c9902e06fc27a362d28c5832b707931f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d5c74c9902e06fc27a362d28c5832b707931f8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7314c7cafc657afa6b98eb9c4958e56a82129bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7314c7cafc657afa6b98eb9c4958e56a82129bb", "html_url": "https://github.com/rust-lang/rust/commit/b7314c7cafc657afa6b98eb9c4958e56a82129bb"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "6cb46c5c40001748e0152c4893a61d07cf13c33b", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=b8d5c74c9902e06fc27a362d28c5832b707931f8", "patch": "@@ -1343,6 +1343,7 @@ dependencies = [\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_allocator 0.0.0\",\n  \"rustc_back 0.0.0\","}, {"sha": "d6155f53485e3a8caca6b161bb38ac83e55ce1e8", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=b8d5c74c9902e06fc27a362d28c5832b707931f8", "patch": "@@ -12,6 +12,7 @@ crate-type = [\"dylib\"]\n arena = { path = \"../libarena\" }\n graphviz = { path = \"../libgraphviz\" }\n log = { version = \"0.3\", features = [\"release_max_level_info\"] }\n+owning_ref = \"0.3.3\"\n env_logger = { version = \"0.4\", default-features = false }\n rustc = { path = \"../librustc\" }\n rustc_allocator = { path = \"../librustc_allocator\" }"}, {"sha": "0e92499e1e1fcc2de443944e61c9ea67f87a4849", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b8d5c74c9902e06fc27a362d28c5832b707931f8", "patch": "@@ -18,7 +18,9 @@ use rustc::session::CompileIncomplete;\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n-use rustc::middle::{self, dependency_format, stability, reachable};\n+use rustc::middle::{self, stability, reachable};\n+#[cfg(feature=\"llvm\")]\n+use rustc::middle::dependency_format;\n use rustc::middle::privacy::AccessLevels;\n use rustc::mir::transform::{MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED, Passes};\n use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n@@ -71,6 +73,11 @@ pub fn compile_input(sess: &Session,\n                      output: &Option<PathBuf>,\n                      addl_plugins: Option<Vec<String>>,\n                      control: &CompileController) -> CompileResult {\n+    #[cfg(feature=\"llvm\")]\n+    use rustc_trans::back::write::OngoingCrateTranslation;\n+    #[cfg(not(feature=\"llvm\"))]\n+    type OngoingCrateTranslation = ();\n+\n     macro_rules! controller_entry_point {\n         ($point: ident, $tsess: expr, $make_state: expr, $phase_result: expr) => {{\n             let state = &mut $make_state;\n@@ -90,7 +97,7 @@ pub fn compile_input(sess: &Session,\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n-    let (outputs, trans) = {\n+    let (outputs, trans): (OutputFilenames, OngoingCrateTranslation) = {\n         let krate = match phase_1_parse_input(control, sess, input) {\n             Ok(krate) => krate,\n             Err(mut parse_error) => {\n@@ -213,8 +220,6 @@ pub fn compile_input(sess: &Session,\n             #[cfg(feature=\"llvm\")]\n             let trans = phase_4_translate_to_llvm(tcx, analysis, incremental_hashes_map,\n                                                   &outputs);\n-            #[cfg(not(feature=\"llvm\"))]\n-            let trans = { panic!(\"LLVM not supported by this rustc.\"); () };\n \n             if log_enabled!(::log::LogLevel::Info) {\n                 println!(\"Post-trans\");\n@@ -228,12 +233,25 @@ pub fn compile_input(sess: &Session,\n                 }\n             }\n \n+            #[cfg(not(feature=\"llvm\"))]\n+            {\n+                let _ = incremental_hashes_map;\n+                sess.err(&format!(\"LLVM is not supported by this rustc\"));\n+                sess.abort_if_errors();\n+                unreachable!();\n+            }\n+\n+            #[cfg(feature=\"llvm\")]\n             Ok((outputs, trans))\n         })??\n     };\n \n     #[cfg(not(feature=\"llvm\"))]\n-    unreachable!();\n+    {\n+        let _ = outputs;\n+        let _ = trans;\n+        unreachable!();\n+    }\n \n     #[cfg(feature=\"llvm\")]\n     {\n@@ -505,6 +523,7 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         }\n     }\n \n+    #[cfg(feature=\"llvm\")]\n     fn state_when_compilation_done(input: &'a Input,\n                                    session: &'tcx Session,\n                                    out_dir: &'a Option<PathBuf>,\n@@ -1145,7 +1164,12 @@ fn write_out_deps(sess: &Session, outputs: &OutputFilenames, crate_name: &str) {\n         match *output_type {\n             OutputType::Exe => {\n                 for output in sess.crate_types.borrow().iter() {\n-                    let p = ::rustc_trans_utils::link::filename_for_input(sess, *output, crate_name, outputs);\n+                    let p = ::rustc_trans_utils::link::filename_for_input(\n+                        sess,\n+                        *output,\n+                        crate_name,\n+                        outputs\n+                    );\n                     out_filenames.push(p);\n                 }\n             }\n@@ -1263,7 +1287,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n \n     base.into_iter()\n         .filter(|crate_type| {\n-            let res = !rustc_trans_utils::link::invalid_output_for_target(session, *crate_type);\n+            let res = !::rustc_trans_utils::link::invalid_output_for_target(session, *crate_type);\n \n             if !res {\n                 session.warn(&format!(\"dropping unsupported crate type `{}` for target `{}`\","}, {"sha": "91ba7ed1958e7c85299cf4795b54fc30ddcc486b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b8d5c74c9902e06fc27a362d28c5832b707931f8", "patch": "@@ -35,6 +35,8 @@ extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n extern crate env_logger;\n+#[cfg(not(feature=\"llvm\"))]\n+extern crate owning_ref;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_allocator;\n@@ -70,8 +72,6 @@ use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n #[cfg(feature=\"llvm\")]\n-use rustc_trans::back::link;\n-#[cfg(feature=\"llvm\")]\n use rustc_trans::back::write::{RELOC_MODEL_ARGS, CODE_GEN_MODEL_ARGS};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n@@ -82,7 +82,7 @@ use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n #[cfg(not(feature=\"llvm\"))]\n-use rustc::middle::cstore::MetadataLoader;\n+use rustc::middle::cstore::MetadataLoader as MetadataLoaderTrait;\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc::util::common::{time, ErrorReported};\n@@ -114,6 +114,9 @@ use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n use syntax_pos::{DUMMY_SP, MultiSpan};\n \n+#[cfg(not(feature=\"llvm\"))]\n+use owning_ref::{OwningRef, ErasedBoxRef};\n+\n #[cfg(test)]\n pub mod test;\n \n@@ -174,7 +177,7 @@ pub use NoLLvmMetadataLoader as MetadataLoader;\n pub use rustc_trans::LlvmMetadataLoader as MetadataLoader;\n \n #[cfg(not(feature=\"llvm\"))]\n-impl MetadataLoader for NoLLvmMetadataLoader {\n+impl MetadataLoaderTrait for NoLLvmMetadataLoader {\n     fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<ErasedBoxRef<[u8]>, String> {\n         use std::fs::File;\n         use std::io;\n@@ -185,20 +188,20 @@ impl MetadataLoader for NoLLvmMetadataLoader {\n \n         while let Some(entry_result) = archive.next_entry() {\n             let mut entry = entry_result.map_err(|e|format!(\"metadata section read err: {:?}\", e))?;\n-            if entry.header().identifier() == METADATA_FILENAME {\n+            if entry.header().identifier() == \"rust.metadata.bin\" {\n                 let mut buf = Vec::new();\n                 io::copy(&mut entry, &mut buf).unwrap();\n                 let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n-                return Ok(buf.erase_owner());\n+                return Ok(buf.map_owner_box().erase_owner());\n             }\n         }\n \n         Err(\"Couldnt find metadata section\".to_string())\n     }\n \n     fn get_dylib_metadata(&self,\n-                          target: &Target,\n-                          filename: &Path)\n+                          _target: &Target,\n+                          _filename: &Path)\n                           -> Result<ErasedBoxRef<[u8]>, String> {\n         panic!(\"Dylib metadata loading not supported without LLVM\")\n     }\n@@ -207,6 +210,7 @@ impl MetadataLoader for NoLLvmMetadataLoader {\n // Parse args and run the compiler. This is the primary entry point for rustc.\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n+#[cfg_attr(not(feature=\"llvm\"), allow(unused_mut))]\n pub fn run_compiler<'a>(args: &[String],\n                         callbacks: &mut CompilerCalls<'a>,\n                         file_loader: Option<Box<FileLoader + 'static>>,\n@@ -516,6 +520,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n         Compilation::Continue\n     }\n \n+    #[cfg_attr(not(feature=\"llvm\"), allow(unused_mut))]\n     fn no_input(&mut self,\n                 matches: &getopts::Matches,\n                 sopts: &config::Options,\n@@ -743,7 +748,12 @@ impl RustcDefaultCalls {\n                     }\n                     let crate_types = driver::collect_crate_types(sess, attrs);\n                     for &style in &crate_types {\n-                        let fname = rustc_trans_utils::link::filename_for_input(sess, style, &id, &t_outputs);\n+                        let fname = rustc_trans_utils::link::filename_for_input(\n+                            sess,\n+                            style,\n+                            &id,\n+                            &t_outputs\n+                        );\n                         println!(\"{}\",\n                                  fname.file_name()\n                                       .unwrap()\n@@ -792,15 +802,15 @@ impl RustcDefaultCalls {\n                 }\n                 PrintRequest::RelocationModels => {\n                     println!(\"Available relocation models:\");\n-                    #[cfg(features=\"llvm\")]\n+                    #[cfg(feature=\"llvm\")]\n                     for &(name, _) in RELOC_MODEL_ARGS.iter() {\n                         println!(\"    {}\", name);\n                     }\n                     println!(\"\");\n                 }\n                 PrintRequest::CodeModels => {\n                     println!(\"Available code models:\");\n-                    #[cfg(features=\"llvm\")]\n+                    #[cfg(feature=\"llvm\")]\n                     for &(name, _) in CODE_GEN_MODEL_ARGS.iter(){\n                         println!(\"    {}\", name);\n                     }"}, {"sha": "a9bd8ea90109e24316c7b4a150802d389c36a95b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d5c74c9902e06fc27a362d28c5832b707931f8/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=b8d5c74c9902e06fc27a362d28c5832b707931f8", "patch": "@@ -88,7 +88,8 @@ pub const RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET: usize =\n pub const RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET: usize =\n     RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET + 8;\n \n-pub use self::rustc_trans_utils::link::{find_crate_name, filename_for_input, default_output_for_target, invalid_output_for_target};\n+pub use self::rustc_trans_utils::link::{find_crate_name, filename_for_input,\n+                                        default_output_for_target, invalid_output_for_target};\n \n pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap) -> LinkMeta {\n     let krate_dep_node = &DepNode::new_no_params(DepKind::Krate);"}]}