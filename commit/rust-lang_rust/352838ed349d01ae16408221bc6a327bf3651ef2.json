{"sha": "352838ed349d01ae16408221bc6a327bf3651ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MjgzOGVkMzQ5ZDAxYWUxNjQwODIyMWJjNmEzMjdiZjM2NTFlZjI=", "commit": {"author": {"name": "Michael Rosenberg", "email": "42micro@gmail.com", "date": "2015-04-24T00:33:46Z"}, "committer": {"name": "Michael Rosenberg", "email": "42micro@gmail.com", "date": "2015-04-24T00:33:46Z"}, "message": "Update \"Generic Functions\" section\n\nUpdated sample code to updated syntax (now compiles). Also tweaked the text to reflect the change.", "tree": {"sha": "5b55f62e66bcf67cd2d8f00f4c02b06ba682970c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b55f62e66bcf67cd2d8f00f4c02b06ba682970c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/352838ed349d01ae16408221bc6a327bf3651ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/352838ed349d01ae16408221bc6a327bf3651ef2", "html_url": "https://github.com/rust-lang/rust/commit/352838ed349d01ae16408221bc6a327bf3651ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/352838ed349d01ae16408221bc6a327bf3651ef2/comments", "author": null, "committer": null, "parents": [{"sha": "90bed3f9479f9f63746f227d5fc4ddecdd37642a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90bed3f9479f9f63746f227d5fc4ddecdd37642a", "html_url": "https://github.com/rust-lang/rust/commit/90bed3f9479f9f63746f227d5fc4ddecdd37642a"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "930cf44fd2ce9dce660b1772780fa2d5c895ed38", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/352838ed349d01ae16408221bc6a327bf3651ef2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/352838ed349d01ae16408221bc6a327bf3651ef2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=352838ed349d01ae16408221bc6a327bf3651ef2", "patch": "@@ -1099,40 +1099,31 @@ signature. Each type parameter must be explicitly declared, in an\n angle-bracket-enclosed, comma-separated list following the function name.\n \n ```{.ignore}\n-fn iter<T>(seq: &[T], f: |T|) {\n-    for elt in seq.iter() { f(elt); }\n+fn iter<T, F>(seq: &[T], f: F) where T: Copy, F: Fn(T) {\n+    for elt in seq { f(*elt); }\n }\n-fn map<T, U>(seq: &[T], f: |T| -> U) -> Vec<U> {\n+fn map<T, U, F>(seq: &[T], f: F) -> Vec<U> where T: Copy, U: Copy, F: Fn(T) -> U {\n     let mut acc = vec![];\n-    for elt in seq.iter() { acc.push(f(elt)); }\n+    for elt in seq { acc.push(f(*elt)); }\n     acc\n }\n ```\n \n Inside the function signature and body, the name of the type parameter can be\n-used as a type name.\n+used as a type name. [Trait](#traits) bounds can be specified for type parameters\n+to allow methods with that trait to be called on values of that type. This is\n+specified using the `where` syntax, as in the above example.\n \n When a generic function is referenced, its type is instantiated based on the\n context of the reference. For example, calling the `iter` function defined\n above on `[1, 2]` will instantiate type parameter `T` with `i32`, and require\n-the closure parameter to have type `fn(i32)`.\n+the closure parameter to have type `Fn(i32)`.\n \n The type parameters can also be explicitly supplied in a trailing\n [path](#paths) component after the function name. This might be necessary if\n there is not sufficient context to determine the type parameters. For example,\n `mem::size_of::<u32>() == 4`.\n \n-Since a parameter type is opaque to the generic function, the set of operations\n-that can be performed on it is limited. Values of parameter type can only be\n-moved, not copied.\n-\n-```\n-fn id<T>(x: T) -> T { x }\n-```\n-\n-Similarly, [trait](#traits) bounds can be specified for type parameters to\n-allow methods with that trait to be called on values of that type.\n-\n #### Unsafety\n \n Unsafe operations are those that potentially violate the memory-safety"}]}