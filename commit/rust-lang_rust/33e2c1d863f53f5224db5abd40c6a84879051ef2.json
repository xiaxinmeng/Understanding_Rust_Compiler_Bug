{"sha": "33e2c1d863f53f5224db5abd40c6a84879051ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZTJjMWQ4NjNmNTNmNTIyNGRiNWFiZDQwYzZhODQ4NzkwNTFlZjI=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-02-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-02-12T19:01:07Z"}, "message": "bootstrap: Configure cmake when building sanitizer runtimes", "tree": {"sha": "a1dd95a1031f75f50b097180b4e1d50d553068d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1dd95a1031f75f50b097180b4e1d50d553068d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33e2c1d863f53f5224db5abd40c6a84879051ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33e2c1d863f53f5224db5abd40c6a84879051ef2", "html_url": "https://github.com/rust-lang/rust/commit/33e2c1d863f53f5224db5abd40c6a84879051ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33e2c1d863f53f5224db5abd40c6a84879051ef2/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ed25f069768c046464e68fd382c867ddb04a1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed25f069768c046464e68fd382c867ddb04a1e3", "html_url": "https://github.com/rust-lang/rust/commit/2ed25f069768c046464e68fd382c867ddb04a1e3"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "566984a96fe09009aad51ca35ae07873ee6b2f08", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33e2c1d863f53f5224db5abd40c6a84879051ef2/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e2c1d863f53f5224db5abd40c6a84879051ef2/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=33e2c1d863f53f5224db5abd40c6a84879051ef2", "patch": "@@ -262,7 +262,7 @@ impl Step for Llvm {\n             cfg.define(\"PYTHON_EXECUTABLE\", python);\n         }\n \n-        configure_cmake(builder, target, &mut cfg);\n+        configure_cmake(builder, target, &mut cfg, true);\n \n         // FIXME: we don't actually need to build all LLVM tools and all LLVM\n         //        libraries here, e.g., we just want a few components and a few\n@@ -301,7 +301,12 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     panic!(\"\\n\\nbad LLVM version: {}, need >=7.0\\n\\n\", version)\n }\n \n-fn configure_cmake(builder: &Builder<'_>, target: Interned<String>, cfg: &mut cmake::Config) {\n+fn configure_cmake(\n+    builder: &Builder<'_>,\n+    target: Interned<String>,\n+    cfg: &mut cmake::Config,\n+    use_compiler_launcher: bool,\n+) {\n     // Do not print installation messages for up-to-date files.\n     // LLVM and LLD builds can produce a lot of those and hit CI limits on log size.\n     cfg.define(\"CMAKE_INSTALL_MESSAGE\", \"LAZY\");\n@@ -372,9 +377,11 @@ fn configure_cmake(builder: &Builder<'_>, target: Interned<String>, cfg: &mut cm\n     } else {\n         // If ccache is configured we inform the build a little differently how\n         // to invoke ccache while also invoking our compilers.\n-        if let Some(ref ccache) = builder.config.ccache {\n-            cfg.define(\"CMAKE_C_COMPILER_LAUNCHER\", ccache)\n-                .define(\"CMAKE_CXX_COMPILER_LAUNCHER\", ccache);\n+        if use_compiler_launcher {\n+            if let Some(ref ccache) = builder.config.ccache {\n+                cfg.define(\"CMAKE_C_COMPILER_LAUNCHER\", ccache)\n+                    .define(\"CMAKE_CXX_COMPILER_LAUNCHER\", ccache);\n+            }\n         }\n         cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n             .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx));\n@@ -458,7 +465,7 @@ impl Step for Lld {\n         t!(fs::create_dir_all(&out_dir));\n \n         let mut cfg = cmake::Config::new(builder.src.join(\"src/llvm-project/lld\"));\n-        configure_cmake(builder, target, &mut cfg);\n+        configure_cmake(builder, target, &mut cfg, true);\n \n         // This is an awful, awful hack. Discovered when we migrated to using\n         // clang-cl to compile LLVM/LLD it turns out that LLD, when built out of\n@@ -595,10 +602,7 @@ impl Step for Sanitizers {\n         let _time = util::timeit(&builder);\n \n         let mut cfg = cmake::Config::new(&compiler_rt_dir);\n-        cfg.target(&self.target);\n-        cfg.host(&builder.config.build);\n         cfg.profile(\"Release\");\n-\n         cfg.define(\"CMAKE_C_COMPILER_TARGET\", self.target);\n         cfg.define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\");\n         cfg.define(\"COMPILER_RT_BUILD_CRT\", \"OFF\");\n@@ -610,6 +614,12 @@ impl Step for Sanitizers {\n         cfg.define(\"COMPILER_RT_USE_LIBCXX\", \"OFF\");\n         cfg.define(\"LLVM_CONFIG_PATH\", &llvm_config);\n \n+        // On Darwin targets the sanitizer runtimes are build as universal binaries.\n+        // Unfortunately sccache currently lacks support to build them successfully.\n+        // Disable compiler launcher on Darwin targets to avoid potential issues.\n+        let use_compiler_launcher = !self.target.contains(\"apple-darwin\");\n+        configure_cmake(builder, self.target, &mut cfg, use_compiler_launcher);\n+\n         t!(fs::create_dir_all(&out_dir));\n         cfg.out_dir(out_dir);\n "}]}