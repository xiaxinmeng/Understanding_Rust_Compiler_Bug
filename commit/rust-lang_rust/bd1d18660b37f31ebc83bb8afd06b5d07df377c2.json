{"sha": "bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "node_id": "C_kwDOAAsO6NoAKGJkMWQxODY2MGIzN2YzMWViYzgzYmI4YWZkMDZiNWQwN2RmMzc3YzI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-27T08:22:08Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-09T14:48:30Z"}, "message": "store `codegen_fn_attrs` in crate metadata", "tree": {"sha": "81f3f92fedcbd779700f640b75d3911fd6ee2986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f3f92fedcbd779700f640b75d3911fd6ee2986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "html_url": "https://github.com/rust-lang/rust/commit/bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e013f9e0ca4055930f931a30171c355de42f9f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/e013f9e0ca4055930f931a30171c355de42f9f92", "html_url": "https://github.com/rust-lang/rust/commit/e013f9e0ca4055930f931a30171c355de42f9f92"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "9f7ef3981c75b6ff5a922a5164bb2b1abde43b21", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "patch": "@@ -129,6 +129,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     type_of => { table }\n     variances_of => { table }\n     fn_sig => { table }\n+    codegen_fn_attrs => { table }\n     impl_trait_ref => { table }\n     const_param_default => { table }\n     thir_abstract_const => { table }"}, {"sha": "72c38d41d5b4f155a64f75b2b239d4cd36ba8c1d", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "patch": "@@ -1007,6 +1007,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             record!(self.tables.def_span[def_id] <- tcx.def_span(def_id));\n             self.encode_attrs(def_id);\n             record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));\n+            record!(self.tables.codegen_fn_attrs[def_id] <- self.tcx.codegen_fn_attrs(def_id));\n             if should_encode_visibility(def_kind) {\n                 record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n             }"}, {"sha": "356dad4b56be1b404a19836fbd20c266bae3d734", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "patch": "@@ -14,6 +14,7 @@ use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_middle::metadata::ModChild;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::mir;\n use rustc_middle::thir;\n@@ -329,6 +330,7 @@ define_tables! {\n     type_of: Table<DefIndex, Lazy!(Ty<'tcx>)>,\n     variances_of: Table<DefIndex, Lazy<[ty::Variance]>>,\n     fn_sig: Table<DefIndex, Lazy!(ty::PolyFnSig<'tcx>)>,\n+    codegen_fn_attrs: Table<DefIndex, Lazy!(CodegenFnAttrs)>,\n     impl_trait_ref: Table<DefIndex, Lazy!(ty::TraitRef<'tcx>)>,\n     const_param_default: Table<DefIndex, Lazy<rustc_middle::ty::Const<'tcx>>>,\n     optimized_mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,"}, {"sha": "1abf8e9080ca05635acaa9122ff0e2f834c44ef6", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "patch": "@@ -1081,6 +1081,7 @@ rustc_queries! {\n         desc { |tcx| \"computing codegen attributes of `{}`\", tcx.def_path_str(def_id) }\n         storage(ArenaCacheSelector<'tcx>)\n         cache_on_disk_if { true }\n+        separate_provide_extern\n     }\n \n     query asm_target_features(def_id: DefId) -> &'tcx FxHashSet<Symbol> {"}, {"sha": "4c6a2ebd93b651e5a346d9f74eba73ae0c9e3493", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1d18660b37f31ebc83bb8afd06b5d07df377c2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=bd1d18660b37f31ebc83bb8afd06b5d07df377c2", "patch": "@@ -2610,7 +2610,6 @@ fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind>\n \n fn from_target_feature(\n     tcx: TyCtxt<'_>,\n-    id: DefId,\n     attr: &ast::Attribute,\n     supported_target_features: &FxHashMap<String, Option<Symbol>>,\n     target_features: &mut Vec<Symbol>,\n@@ -2679,7 +2678,7 @@ fn from_target_feature(\n                 Some(name) => bug!(\"unknown target feature gate {}\", name),\n                 None => true,\n             };\n-            if !allowed && id.is_local() {\n+            if !allowed {\n                 feature_err(\n                     &tcx.sess.parse_sess,\n                     feature_gate.unwrap(),\n@@ -2693,7 +2692,7 @@ fn from_target_feature(\n     }\n }\n \n-fn linkage_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Linkage {\n+fn linkage_by_name(tcx: TyCtxt<'_>, def_id: LocalDefId, name: &str) -> Linkage {\n     use rustc_middle::mir::mono::Linkage::*;\n \n     // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n@@ -2716,36 +2715,28 @@ fn linkage_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Linkage {\n         \"private\" => Private,\n         \"weak\" => WeakAny,\n         \"weak_odr\" => WeakODR,\n-        _ => {\n-            let span = tcx.hir().span_if_local(def_id);\n-            if let Some(span) = span {\n-                tcx.sess.span_fatal(span, \"invalid linkage specified\")\n-            } else {\n-                tcx.sess.fatal(&format!(\"invalid linkage specified: {}\", name))\n-            }\n-        }\n+        _ => tcx.sess.span_fatal(tcx.def_span(def_id), \"invalid linkage specified\"),\n     }\n }\n-\n-fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n-    let attrs = tcx.get_attrs(id);\n-\n+fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n+    let did = did.expect_local();\n+    let attrs = tcx.hir().attrs(tcx.hir().local_def_id_to_hir_id(did));\n     let mut codegen_fn_attrs = CodegenFnAttrs::new();\n-    if tcx.should_inherit_track_caller(id) {\n+    if tcx.should_inherit_track_caller(did) {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n     }\n \n     // With -Z panic-in-drop=abort, drop_in_place never unwinds.\n     if tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Abort {\n-        if Some(id) == tcx.lang_items().drop_in_place_fn() {\n+        if Some(did.to_def_id()) == tcx.lang_items().drop_in_place_fn() {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n         }\n     }\n \n     // The panic_no_unwind function called by TerminatorKind::Abort will never\n     // unwind. If the panic handler that it invokes unwind then it will simply\n     // call the panic handler again.\n-    if Some(id) == tcx.lang_items().panic_no_unwind() {\n+    if Some(did.to_def_id()) == tcx.lang_items().panic_no_unwind() {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n     }\n \n@@ -2760,7 +2751,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::rustc_allocator) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR;\n         } else if attr.has_name(sym::ffi_returns_twice) {\n-            if tcx.is_foreign_item(id) {\n+            if tcx.is_foreign_item(did) {\n                 codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE;\n             } else {\n                 // `#[ffi_returns_twice]` is only allowed `extern fn`s.\n@@ -2773,7 +2764,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 .emit();\n             }\n         } else if attr.has_name(sym::ffi_pure) {\n-            if tcx.is_foreign_item(id) {\n+            if tcx.is_foreign_item(did) {\n                 if attrs.iter().any(|a| a.has_name(sym::ffi_const)) {\n                     // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n                     struct_span_err!(\n@@ -2797,7 +2788,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 .emit();\n             }\n         } else if attr.has_name(sym::ffi_const) {\n-            if tcx.is_foreign_item(id) {\n+            if tcx.is_foreign_item(did) {\n                 codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n             } else {\n                 // `#[ffi_const]` is only allowed on foreign functions\n@@ -2857,7 +2848,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 None => codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED,\n             }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n-            if !matches!(tcx.fn_sig(id).abi(), abi::Abi::C { .. }) {\n+            if !matches!(tcx.fn_sig(did).abi(), abi::Abi::C { .. }) {\n                 struct_span_err!(\n                     tcx.sess,\n                     attr.span,\n@@ -2874,11 +2865,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if attr.has_name(sym::track_caller) {\n-            if !tcx.is_closure(id) && tcx.fn_sig(id).abi() != abi::Abi::Rust {\n+            if !tcx.is_closure(did.to_def_id()) && tcx.fn_sig(did).abi() != abi::Abi::Rust {\n                 struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n                     .emit();\n             }\n-            if tcx.is_closure(id) && !tcx.features().closure_track_caller {\n+            if tcx.is_closure(did.to_def_id()) && !tcx.features().closure_track_caller {\n                 feature_err(\n                     &tcx.sess.parse_sess,\n                     sym::closure_track_caller,\n@@ -2904,7 +2895,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 codegen_fn_attrs.export_name = Some(s);\n             }\n         } else if attr.has_name(sym::target_feature) {\n-            if !tcx.is_closure(id) && tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+            if !tcx.is_closure(did.to_def_id())\n+                && tcx.fn_sig(did).unsafety() == hir::Unsafety::Normal\n+            {\n                 if tcx.sess.target.is_like_wasm || tcx.sess.opts.actually_rustdoc {\n                     // The `#[target_feature]` attribute is allowed on\n                     // WebAssembly targets on all functions, including safe\n@@ -2930,22 +2923,21 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                         attr.span,\n                         \"`#[target_feature(..)]` can only be applied to `unsafe` functions\",\n                     );\n-                    err.span_label(tcx.def_span(id), \"not an `unsafe` function\");\n+                    err.span_label(tcx.def_span(did), \"not an `unsafe` function\");\n                     err.emit();\n-                } else if let Some(local_id) = id.as_local() {\n-                    check_target_feature_trait_unsafe(tcx, local_id, attr.span);\n+                } else {\n+                    check_target_feature_trait_unsafe(tcx, did, attr.span);\n                 }\n             }\n             from_target_feature(\n                 tcx,\n-                id,\n                 attr,\n                 supported_target_features,\n                 &mut codegen_fn_attrs.target_features,\n             );\n         } else if attr.has_name(sym::linkage) {\n             if let Some(val) = attr.value_str() {\n-                codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, id, val.as_str()));\n+                codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, did, val.as_str()));\n             }\n         } else if attr.has_name(sym::link_section) {\n             if let Some(val) = attr.value_str() {\n@@ -3161,8 +3153,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     });\n \n     // #73631: closures inherit `#[target_feature]` annotations\n-    if tcx.features().target_feature_11 && tcx.is_closure(id) {\n-        let owner_id = tcx.parent(id);\n+    if tcx.features().target_feature_11 && tcx.is_closure(did.to_def_id()) {\n+        let owner_id = tcx.parent(did.to_def_id());\n         codegen_fn_attrs\n             .target_features\n             .extend(tcx.codegen_fn_attrs(owner_id).target_features.iter().copied())\n@@ -3187,7 +3179,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     if !codegen_fn_attrs.no_sanitize.is_empty() {\n         if codegen_fn_attrs.inline == InlineAttr::Always {\n             if let (Some(no_sanitize_span), Some(inline_span)) = (no_sanitize_span, inline_span) {\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(id.expect_local());\n+                let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n                 tcx.struct_span_lint_hir(\n                     lint::builtin::INLINE_NO_SANITIZE,\n                     hir_id,\n@@ -3207,7 +3199,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     // strippable by the linker.\n     //\n     // Additionally weak lang items have predetermined symbol names.\n-    if tcx.is_weak_lang_item(id) {\n+    if tcx.is_weak_lang_item(did.to_def_id()) {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n     }\n     if let Some(name) = weak_lang_items::link_name(attrs) {"}]}