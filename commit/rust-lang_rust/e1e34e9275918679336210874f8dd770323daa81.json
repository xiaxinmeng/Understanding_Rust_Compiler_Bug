{"sha": "e1e34e9275918679336210874f8dd770323daa81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZTM0ZTkyNzU5MTg2NzkzMzYyMTA4NzRmOGRkNzcwMzIzZGFhODE=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-05-11T16:34:59Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2015-05-11T18:58:45Z"}, "message": "Reintroduce non-null assumptions in core::slice iterators\n\nThe previous assumptions were not valid for slices of zero-sized\nelements.", "tree": {"sha": "2f3e4b329c486cc57d4b99154ef9f68883e7e46b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f3e4b329c486cc57d4b99154ef9f68883e7e46b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e34e9275918679336210874f8dd770323daa81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e34e9275918679336210874f8dd770323daa81", "html_url": "https://github.com/rust-lang/rust/commit/e1e34e9275918679336210874f8dd770323daa81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e34e9275918679336210874f8dd770323daa81/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52efe55d0425d963ee949be96e36d584a603a455", "url": "https://api.github.com/repos/rust-lang/rust/commits/52efe55d0425d963ee949be96e36d584a603a455", "html_url": "https://github.com/rust-lang/rust/commit/52efe55d0425d963ee949be96e36d584a603a455"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "3abba3145582c17d097770dc1c41e6d553d21ecc", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1e34e9275918679336210874f8dd770323daa81/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e34e9275918679336210874f8dd770323daa81/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e1e34e9275918679336210874f8dd770323daa81", "patch": "@@ -665,10 +665,14 @@ macro_rules! iterator {\n             #[inline]\n             fn next(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n-                unsafe {\n-                    if self.ptr == self.end {\n-                        None\n-                    } else {\n+                if self.ptr == self.end {\n+                    None\n+                } else {\n+                    unsafe {\n+                        if mem::size_of::<T>() != 0 {\n+                            ::intrinsics::assume(!self.ptr.is_null());\n+                            ::intrinsics::assume(!self.end.is_null());\n+                        }\n                         let old = self.ptr;\n                         self.ptr = slice_offset!(self.ptr, 1);\n                         Some(slice_ref!(old))\n@@ -706,11 +710,15 @@ macro_rules! iterator {\n             #[inline]\n             fn next_back(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n-                unsafe {\n-                    if self.end == self.ptr {\n-                        None\n-                    } else {\n+                if self.end == self.ptr {\n+                    None\n+                } else {\n+                    unsafe {\n                         self.end = slice_offset!(self.end, -1);\n+                        if mem::size_of::<T>() != 0 {\n+                            ::intrinsics::assume(!self.ptr.is_null());\n+                            ::intrinsics::assume(!self.end.is_null());\n+                        }\n                         Some(slice_ref!(self.end))\n                     }\n                 }"}]}