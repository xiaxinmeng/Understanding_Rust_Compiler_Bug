{"sha": "9c67dcfe423cb08873a3c9cde1190ed9a607381a", "node_id": "C_kwDOAAsO6NoAKDljNjdkY2ZlNDIzY2IwODg3M2EzYzljZGUxMTkwZWQ5YTYwNzM4MWE", "commit": {"author": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-27T02:57:40Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:13:19Z"}, "message": "lint and remove unused diagnostic", "tree": {"sha": "095039bbb550cbf524e01f76cb26bb358eba356b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095039bbb550cbf524e01f76cb26bb358eba356b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c67dcfe423cb08873a3c9cde1190ed9a607381a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c67dcfe423cb08873a3c9cde1190ed9a607381a", "html_url": "https://github.com/rust-lang/rust/commit/9c67dcfe423cb08873a3c9cde1190ed9a607381a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c67dcfe423cb08873a3c9cde1190ed9a607381a/comments", "author": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70aeb9e2b316829398940194d949a1130842e9cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/70aeb9e2b316829398940194d949a1130842e9cc", "html_url": "https://github.com/rust-lang/rust/commit/70aeb9e2b316829398940194d949a1130842e9cc"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "83f4af16612e7ae95d9f3b15e8a0c5852dc3dfbf", "filename": "src/errors.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c67dcfe423cb08873a3c9cde1190ed9a607381a/src%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c67dcfe423cb08873a3c9cde1190ed9a607381a/src%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferrors.rs?ref=9c67dcfe423cb08873a3c9cde1190ed9a607381a", "patch": "@@ -4,13 +4,12 @@ use rustc_middle::ty::Ty;\n use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n \n-struct ExitCode {\n-    pub exit_code: Option<i32>,\n-}\n+struct ExitCode(Option<i32>);\n \n impl IntoDiagnosticArg for ExitCode {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        match self.exit_code {\n+        let ExitCode(exit_code) = self;\n+        match exit_code {\n             Some(t) => t.into_diagnostic_arg(),\n             None => DiagnosticArgValue::Str(Cow::Borrowed(\"None\")),\n         }\n@@ -25,8 +24,7 @@ pub(crate) struct RanlibFailure {\n \n impl RanlibFailure {\n     pub fn new(exit_code: Option<i32>) -> Self {\n-        let exit_code = ExitCode{ exit_code };\n-        RanlibFailure { exit_code }\n+        RanlibFailure { exit_code: ExitCode(exit_code) }\n     }\n }\n "}]}