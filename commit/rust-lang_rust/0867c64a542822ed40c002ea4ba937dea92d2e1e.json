{"sha": "0867c64a542822ed40c002ea4ba937dea92d2e1e", "node_id": "C_kwDOAAsO6NoAKDA4NjdjNjRhNTQyODIyZWQ0MGMwMDJlYTRiYTkzN2RlYTkyZDJlMWU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-09-16T15:07:01Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-01T10:03:06Z"}, "message": "clippy: adopt to the new lint API", "tree": {"sha": "990641fb4a45f8831838d7e18c8fdc2fcadfea12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990641fb4a45f8831838d7e18c8fdc2fcadfea12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0867c64a542822ed40c002ea4ba937dea92d2e1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0867c64a542822ed40c002ea4ba937dea92d2e1e", "html_url": "https://github.com/rust-lang/rust/commit/0867c64a542822ed40c002ea4ba937dea92d2e1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0867c64a542822ed40c002ea4ba937dea92d2e1e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ce6d18df883f593e72f7958bebdc3ebcdbe85e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ce6d18df883f593e72f7958bebdc3ebcdbe85e", "html_url": "https://github.com/rust-lang/rust/commit/e5ce6d18df883f593e72f7958bebdc3ebcdbe85e"}], "stats": {"total": 65, "additions": 29, "deletions": 36}, "files": [{"sha": "102b9fbae83c5c3fcf0dc6fec2fb5e6d03de1f49", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0867c64a542822ed40c002ea4ba937dea92d2e1e/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0867c64a542822ed40c002ea4ba937dea92d2e1e/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=0867c64a542822ed40c002ea4ba937dea92d2e1e", "patch": "@@ -117,11 +117,13 @@ impl EarlyLintPass for ModStyle {\n                     cx.struct_span_lint(\n                         SELF_NAMED_MODULE_FILES,\n                         Span::new(file.start_pos, file.start_pos, SyntaxContext::root(), None),\n-                        |build| {\n-                            let mut lint =\n-                                build.build(&format!(\"`mod.rs` files are required, found `{}`\", path.display()));\n-                            lint.help(&format!(\"move `{}` to `{}`\", path.display(), correct.display(),));\n-                            lint.emit();\n+                        format!(\"`mod.rs` files are required, found `{}`\", path.display()),\n+                        |lint| {\n+                            lint.help(format!(\n+                                \"move `{}` to `{}`\",\n+                                path.display(),\n+                                correct.display(),\n+                            ))\n                         },\n                     );\n                 }\n@@ -156,11 +158,8 @@ fn check_self_named_mod_exists(cx: &EarlyContext<'_>, path: &Path, file: &Source\n         cx.struct_span_lint(\n             MOD_MODULE_FILES,\n             Span::new(file.start_pos, file.start_pos, SyntaxContext::root(), None),\n-            |build| {\n-                let mut lint = build.build(&format!(\"`mod.rs` files are not allowed, found `{}`\", path.display()));\n-                lint.help(&format!(\"move `{}` to `{}`\", path.display(), mod_file.display(),));\n-                lint.emit();\n-            },\n+            format!(\"`mod.rs` files are not allowed, found `{}`\", path.display()),\n+            |lint| lint.help(format!(\"move `{}` to `{}`\", path.display(), mod_file.display())),\n         );\n     }\n }"}, {"sha": "78960d1ab1da558bc3220852f6d97305c9182f2f", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0867c64a542822ed40c002ea4ba937dea92d2e1e/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0867c64a542822ed40c002ea4ba937dea92d2e1e/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=0867c64a542822ed40c002ea4ba937dea92d2e1e", "patch": "@@ -47,10 +47,9 @@ fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    cx.struct_span_lint(lint, sp, |diag| {\n-        let mut diag = diag.build(msg);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+    cx.struct_span_lint(lint, sp, msg, |diag| {\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n@@ -82,15 +81,14 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n     help_span: Option<Span>,\n     help: &str,\n ) {\n-    cx.struct_span_lint(lint, span, |diag| {\n-        let mut diag = diag.build(msg);\n+    cx.struct_span_lint(lint, span, msg, |diag| {\n         if let Some(help_span) = help_span {\n             diag.span_help(help_span, help);\n         } else {\n             diag.help(help);\n         }\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n@@ -125,15 +123,14 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n     note_span: Option<Span>,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, |diag| {\n-        let mut diag = diag.build(msg);\n+    cx.struct_span_lint(lint, span, msg, |diag| {\n         if let Some(note_span) = note_span {\n             diag.span_note(note_span, note);\n         } else {\n             diag.note(note);\n         }\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n@@ -147,19 +144,17 @@ where\n     S: Into<MultiSpan>,\n     F: FnOnce(&mut Diagnostic),\n {\n-    cx.struct_span_lint(lint, sp, |diag| {\n-        let mut diag = diag.build(msg);\n-        f(&mut diag);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+    cx.struct_span_lint(lint, sp, msg, |diag| {\n+        f(diag);\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n-        let mut diag = diag.build(msg);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n \n@@ -171,11 +166,10 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut Diagnostic),\n ) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n-        let mut diag = diag.build(msg);\n-        f(&mut diag);\n-        docs_link(&mut diag, lint);\n-        diag.emit();\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+        f(diag);\n+        docs_link(diag, lint);\n+        diag\n     });\n }\n "}]}