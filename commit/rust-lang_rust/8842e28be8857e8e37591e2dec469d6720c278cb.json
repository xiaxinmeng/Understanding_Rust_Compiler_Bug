{"sha": "8842e28be8857e8e37591e2dec469d6720c278cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NDJlMjhiZTg4NTdlOGUzNzU5MWUyZGVjNDY5ZDY3MjBjMjc4Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-18T23:23:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-18T23:23:22Z"}, "message": "Auto merge of #31684 - tmiasko:alternate-stack, r=alexcrichton\n\nRemove alternate stack with sigaltstack before unmaping it.\n\nAlso reuse existing signal stack if already set, this is especially\nuseful when working with sanitizers that configure alternate stack\nthemselves.\n\nThis change depends on SS_DISABLE recently introduced in libc crate and updates\nthis git submodule accordingly.", "tree": {"sha": "0993e9663e68ab676419c48fb4502d633f640788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0993e9663e68ab676419c48fb4502d633f640788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8842e28be8857e8e37591e2dec469d6720c278cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8842e28be8857e8e37591e2dec469d6720c278cb", "html_url": "https://github.com/rust-lang/rust/commit/8842e28be8857e8e37591e2dec469d6720c278cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8842e28be8857e8e37591e2dec469d6720c278cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de366b5218974e79c4961e26f063e5fb51039745", "url": "https://api.github.com/repos/rust-lang/rust/commits/de366b5218974e79c4961e26f063e5fb51039745", "html_url": "https://github.com/rust-lang/rust/commit/de366b5218974e79c4961e26f063e5fb51039745"}, {"sha": "77922b817e012989ee8b0f371242e078e58b9ca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/77922b817e012989ee8b0f371242e078e58b9ca1", "html_url": "https://github.com/rust-lang/rust/commit/77922b817e012989ee8b0f371242e078e58b9ca1"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "403bdc88394919f297bdb365032044cc0481c319", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=8842e28be8857e8e37591e2dec469d6720c278cb", "patch": "@@ -1 +1 @@\n-Subproject commit a64ee24718c0289b82a77d692cf56f8a1226de51\n+Subproject commit 403bdc88394919f297bdb365032044cc0481c319"}, {"sha": "1b5faf64ad6e588d8b280b6edb4bfee32e79a123", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8842e28be8857e8e37591e2dec469d6720c278cb/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8842e28be8857e8e37591e2dec469d6720c278cb/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=8842e28be8857e8e37591e2dec469d6720c278cb", "patch": "@@ -46,7 +46,7 @@ mod imp {\n     use super::Handler;\n     use mem;\n     use ptr;\n-    use libc::{sigaltstack, SIGSTKSZ};\n+    use libc::{sigaltstack, SIGSTKSZ, SS_DISABLE};\n     use libc::{sigaction, SIGBUS, SIG_DFL,\n                SA_SIGINFO, SA_ONSTACK, sighandler_t};\n     use libc;\n@@ -169,13 +169,32 @@ mod imp {\n     }\n \n     pub unsafe fn make_handler() -> Handler {\n-        let stack = get_stack();\n-        sigaltstack(&stack, ptr::null_mut());\n-        Handler { _data: stack.ss_sp as *mut libc::c_void }\n+        let mut stack = mem::zeroed();\n+        sigaltstack(ptr::null(), &mut stack);\n+        // Configure alternate signal stack, if one is not already set.\n+        if stack.ss_flags & SS_DISABLE != 0 {\n+            stack = get_stack();\n+            sigaltstack(&stack, ptr::null_mut());\n+            Handler { _data: stack.ss_sp as *mut libc::c_void }\n+        } else {\n+            Handler { _data: ptr::null_mut() }\n+        }\n     }\n \n     pub unsafe fn drop_handler(handler: &mut Handler) {\n-        munmap(handler._data, SIGSTKSZ);\n+        if !handler._data.is_null() {\n+            let stack =  libc::stack_t {\n+                ss_sp: ptr::null_mut(),\n+                ss_flags: SS_DISABLE,\n+                // Workaround for bug in MacOS implementation of sigaltstack\n+                // UNIX2003 which returns ENOMEM when disabling a stack while\n+                // passing ss_size smaller than MINSIGSTKSZ. According to POSIX\n+                // both ss_sp and ss_size should be ignored in this case.\n+                ss_size: SIGSTKSZ,\n+            };\n+            sigaltstack(&stack, ptr::null_mut());\n+            munmap(handler._data, SIGSTKSZ);\n+        }\n     }\n }\n "}, {"sha": "26fa36f0c13d4bd0d3691a5fdac0c0af11f5eb7a", "filename": "src/test/run-pass/signal-alternate-stack-cleanup.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8842e28be8857e8e37591e2dec469d6720c278cb/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8842e28be8857e8e37591e2dec469d6720c278cb/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs?ref=8842e28be8857e8e37591e2dec469d6720c278cb", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Previously memory for alternate signal stack have been unmapped during\n+// main thread exit while still being in use by signal handlers. This test\n+// triggers this situation by sending signal from atexit handler.\n+//\n+// ignore-windows\n+\n+#![feature(libc)]\n+extern crate libc;\n+\n+use libc::*;\n+\n+unsafe extern fn signal_handler(signum: c_int, _: *mut siginfo_t, _: *mut c_void) {\n+    assert_eq!(signum, SIGWINCH);\n+}\n+\n+extern fn send_signal() {\n+    unsafe {\n+        raise(SIGWINCH);\n+    }\n+}\n+\n+fn main() {\n+    unsafe {\n+        // Install signal hander that runs on alternate signal stack.\n+        let mut action: sigaction = std::mem::zeroed();\n+        action.sa_flags = SA_SIGINFO | SA_ONSTACK;\n+        action.sa_sigaction = signal_handler as sighandler_t;\n+        sigaction(SIGWINCH, &action, std::ptr::null_mut());\n+\n+        // Send SIGWINCH on exit.\n+        atexit(send_signal);\n+    }\n+}\n+"}]}