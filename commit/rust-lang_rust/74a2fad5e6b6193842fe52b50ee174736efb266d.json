{"sha": "74a2fad5e6b6193842fe52b50ee174736efb266d", "node_id": "C_kwDOAAsO6NoAKDc0YTJmYWQ1ZTZiNjE5Mzg0MmZlNTJiNTBlZTE3NDczNmVmYjI2NmQ", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-25T14:22:39Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-25T14:22:39Z"}, "message": "Gate and rename binary, use it if it's in the sysroot", "tree": {"sha": "c5ee04588520e3f28490d4df04f21fe3927827f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ee04588520e3f28490d4df04f21fe3927827f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74a2fad5e6b6193842fe52b50ee174736efb266d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74a2fad5e6b6193842fe52b50ee174736efb266d", "html_url": "https://github.com/rust-lang/rust/commit/74a2fad5e6b6193842fe52b50ee174736efb266d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74a2fad5e6b6193842fe52b50ee174736efb266d/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dadb83282d7dc7bfb408d93d4953019a328e8e2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dadb83282d7dc7bfb408d93d4953019a328e8e2b", "html_url": "https://github.com/rust-lang/rust/commit/dadb83282d7dc7bfb408d93d4953019a328e8e2b"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "c4018d3b39e7705fabcdc36424a9de5a2d37aae3", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a2fad5e6b6193842fe52b50ee174736efb266d/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a2fad5e6b6193842fe52b50ee174736efb266d/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=74a2fad5e6b6193842fe52b50ee174736efb266d", "patch": "@@ -86,6 +86,7 @@ fn mk_child(\n ) -> io::Result<Child> {\n     Command::new(path.as_os_str())\n         .args(args)\n+        .env(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\", \"this is unstable\")\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())\n         .stderr(Stdio::inherit())"}, {"sha": "9d0da5dee9c109e28e3f803d329a9f34b89115de", "filename": "crates/proc-macro-srv-cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a2fad5e6b6193842fe52b50ee174736efb266d/crates%2Fproc-macro-srv-cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/74a2fad5e6b6193842fe52b50ee174736efb266d/crates%2Fproc-macro-srv-cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv-cli%2FCargo.toml?ref=74a2fad5e6b6193842fe52b50ee174736efb266d", "patch": "@@ -13,5 +13,5 @@ proc-macro-srv = { version = \"0.0.0\", path = \"../proc-macro-srv\" }\n sysroot-abi = [\"proc-macro-srv/sysroot-abi\"]\n \n [[bin]]\n-name = \"proc-macro-srv\"\n+name = \"rust-analyzer-proc-macro-srv\"\n path = \"src/main.rs\""}, {"sha": "ac9fa9f5a4ce5fa38668fe81ce48b87539905339", "filename": "crates/proc-macro-srv-cli/src/main.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74a2fad5e6b6193842fe52b50ee174736efb266d/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a2fad5e6b6193842fe52b50ee174736efb266d/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs?ref=74a2fad5e6b6193842fe52b50ee174736efb266d", "patch": "@@ -3,5 +3,17 @@\n use proc_macro_srv::cli;\n \n fn main() -> std::io::Result<()> {\n+    let v = std::env::var(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\");\n+    match v.as_deref() {\n+        Ok(\"this is unstable\") => {\n+            // very well, if you must\n+        }\n+        _ => {\n+            eprintln!(\"If you're rust-analyzer, you can use this tool by exporting RUST_ANALYZER_INTERNALS_DO_NOT_USE='this is unstable'.\");\n+            eprintln!(\"If not, you probably shouldn't use this tool. But do what you want: I'm an error message, not a cop.\");\n+            std::process::exit(122);\n+        }\n+    }\n+\n     cli::run()\n }"}, {"sha": "9ae361b034e28959043b1fbd2a40298fb86a7146", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74a2fad5e6b6193842fe52b50ee174736efb266d/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a2fad5e6b6193842fe52b50ee174736efb266d/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=74a2fad5e6b6193842fe52b50ee174736efb266d", "patch": "@@ -309,7 +309,9 @@ impl GlobalState {\n                     .workspaces\n                     .iter()\n                     .map(|ws| {\n+                        let mut args = args.clone();\n                         let mut path = path.clone();\n+\n                         if let ProjectWorkspace::Cargo { sysroot, .. } = ws {\n                             tracing::info!(\"Found a cargo workspace...\");\n                             if let Some(sysroot) = sysroot.as_ref() {\n@@ -324,6 +326,7 @@ impl GlobalState {\n                                         server_path.display()\n                                     );\n                                     path = server_path;\n+                                    args = vec![];\n                                 } else {\n                                     tracing::info!(\n                                         \"And the server does not exist at {}\",\n@@ -333,6 +336,11 @@ impl GlobalState {\n                             }\n                         }\n \n+                        tracing::info!(\n+                            \"Using proc-macro server at {} with args {:?}\",\n+                            path.display(),\n+                            args\n+                        );\n                         ProcMacroServer::spawn(path.clone(), args.clone()).map_err(|err| {\n                             let error = format!(\n                                 \"Failed to run proc_macro_srv from path {}, error: {:?}\","}]}