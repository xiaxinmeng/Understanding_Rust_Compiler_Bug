{"sha": "e4f7561bcdf3b54dafefd478b86e1f7610e74348", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Zjc1NjFiY2RmM2I1NGRhZmVmZDQ3OGI4NmUxZjc2MTBlNzQzNDg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-16T17:08:08Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-16T17:10:13Z"}, "message": "Clean-up tests after debug!/std-macros change.\n\nThe entire testsuite is converted to using info! rather than debug!\nbecause some depend on the code within the debug! being trans'd.", "tree": {"sha": "6f4506b96626346a45157e2ed5122942ca932add", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f4506b96626346a45157e2ed5122942ca932add"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f7561bcdf3b54dafefd478b86e1f7610e74348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f7561bcdf3b54dafefd478b86e1f7610e74348", "html_url": "https://github.com/rust-lang/rust/commit/e4f7561bcdf3b54dafefd478b86e1f7610e74348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f7561bcdf3b54dafefd478b86e1f7610e74348/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b48e37e8eecafe3cfc72062a9369aae245063e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48e37e8eecafe3cfc72062a9369aae245063e19", "html_url": "https://github.com/rust-lang/rust/commit/b48e37e8eecafe3cfc72062a9369aae245063e19"}], "stats": {"total": 1253, "additions": 640, "deletions": 613}, "files": [{"sha": "6d7d7911468f339688eb02056b3df3d2648f89b9", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -140,7 +140,8 @@ fn should_prune_unconfigured_items() {\n     let source = ~\"#[cfg(shut_up_and_leave_me_alone)]fn a() { }\";\n     do from_str(source) |srv| {\n         do exec(srv) |ctxt| {\n-            assert!(ctxt.ast.node.module.items.is_empty());\n+            // one item: the __std_macros secret module\n+            assert_eq!(ctxt.ast.node.module.items.len(), 1);\n         }\n     }\n }"}, {"sha": "3c7d50911723232ebb3d85e7cc3ef06651a6b7f9", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -255,7 +255,8 @@ mod test {\n     #[test]\n     fn should_should_extract_mod_attributes() {\n         let doc = mk_doc(~\"#[doc = \\\"test\\\"] mod a { }\");\n-        assert!(doc.cratemod().mods()[0].desc() == Some(~\"test\"));\n+        // hidden __std_macros module at the start.\n+        assert!(doc.cratemod().mods()[1].desc() == Some(~\"test\"));\n     }\n \n     #[test]"}, {"sha": "9554db85e27def168cb866e36cfb21f62a93e2f3", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -190,7 +190,8 @@ mod test {\n     #[test]\n     fn should_promote_desc() {\n         let doc = mk_doc(~\"#[doc = \\\"desc\\\"] mod m { }\");\n-        assert_eq!(doc.cratemod().mods()[0].brief(), Some(~\"desc\"));\n+        // hidden __std_macros module at the start.\n+        assert_eq!(doc.cratemod().mods()[1].brief(), Some(~\"desc\"));\n     }\n \n     #[test]"}, {"sha": "0c2ea5f138073e0c2b68269dcb643d855c0b5da3", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -172,6 +172,7 @@ mod test {\n     use extract;\n     use markdown_index_pass::run;\n     use path_pass;\n+    use prune_hidden_pass;\n     use super::pandoc_header_id;\n \n     fn mk_doc(output_style: config::OutputStyle, source: ~str)\n@@ -183,8 +184,10 @@ mod test {\n             };\n             let doc = extract::from_srv(srv.clone(), ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            let doc = (prune_hidden_pass::mk_pass().f)(srv.clone(), doc);\n             let doc = (desc_to_brief_pass::mk_pass().f)(srv.clone(), doc);\n             let doc = (path_pass::mk_pass().f)(srv.clone(), doc);\n+\n             run(srv.clone(), doc, config)\n         }\n     }\n@@ -240,13 +243,13 @@ mod test {\n             config::DocPerMod,\n             ~\"mod a { } fn b() { }\"\n         );\n-        assert!(doc.cratemod().index.get().entries[0] == doc::IndexEntry {\n+        assert_eq!(doc.cratemod().index.get().entries[0], doc::IndexEntry {\n             kind: ~\"Module\",\n             name: ~\"a\",\n             brief: None,\n             link: ~\"a.html\"\n         });\n-        assert!(doc.cratemod().index.get().entries[1] == doc::IndexEntry {\n+        assert_eq!(doc.cratemod().index.get().entries[1], doc::IndexEntry {\n             kind: ~\"Function\",\n             name: ~\"b\",\n             brief: None,\n@@ -260,8 +263,7 @@ mod test {\n             config::DocPerMod,\n             ~\"#[doc = \\\"test\\\"] mod a { }\"\n         );\n-        assert!(doc.cratemod().index.get().entries[0].brief\n-                == Some(~\"test\"));\n+        assert_eq!(doc.cratemod().index.get().entries[0].brief, Some(~\"test\"));\n     }\n \n     #[test]\n@@ -270,12 +272,13 @@ mod test {\n             config::DocPerCrate,\n             ~\"extern { fn b(); }\"\n         );\n-        assert!(doc.cratemod().nmods()[0].index.get().entries[0]\n-                == doc::IndexEntry {\n-                    kind: ~\"Function\",\n-                    name: ~\"b\",\n-                    brief: None,\n-                    link: ~\"#function-b\"\n-                });\n+        // hidden __std_macros module at the start.\n+        assert_eq!(doc.cratemod().nmods()[0].index.get().entries[0],\n+                   doc::IndexEntry {\n+                       kind: ~\"Function\",\n+                       name: ~\"b\",\n+                       brief: None,\n+                       link: ~\"#function-b\"\n+                   });\n     }\n }"}, {"sha": "f9ac8beb97457050ba557efb6249e05c38d611a1", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -529,6 +529,7 @@ mod test {\n     use markdown_writer;\n     use path_pass;\n     use page_pass;\n+    use prune_hidden_pass;\n     use sectionalize_pass;\n     use trim_pass;\n     use tystr_pass;\n@@ -557,6 +558,8 @@ mod test {\n             debug!(\"doc (path): %?\", doc);\n             let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (attr): %?\", doc);\n+            let doc = (prune_hidden_pass::mk_pass().f)(srv.clone(), doc);\n+            debug!(\"doc (prune_hidden): %?\", doc);\n             let doc = (desc_to_brief_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (desc_to_brief): %?\", doc);\n             let doc = (unindent_pass::mk_pass().f)(srv.clone(), doc);"}, {"sha": "3dc9f1799a4b148e2472baf2e50c5afdaf452c82", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -277,7 +277,8 @@ mod test {\n             .. config::default_config(&Path(\"input/test.rc\"))\n         };\n         let doc = mk_doc(~\"\", ~\"mod a { mod b { } }\");\n-        let modb = copy doc.cratemod().mods()[0].mods()[0];\n+        // hidden __std_macros module at the start.\n+        let modb = copy doc.cratemod().mods()[1].mods()[0];\n         let page = doc::ItemPage(doc::ModTag(modb));\n         let filename = make_local_filename(&config, page);\n         assert_eq!(filename, Path(\"output/dir/a_b.html\"));"}, {"sha": "7abbc0e823a47d38dbd2342af4bb88ccb0d989a4", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -152,8 +152,10 @@ fn fold_nmod(\n mod test {\n     use astsrv;\n     use config;\n+    use attr_pass;\n     use doc;\n     use extract;\n+    use prune_hidden_pass;\n     use page_pass::run;\n \n     fn mk_doc_(\n@@ -162,6 +164,8 @@ mod test {\n     ) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv.clone(), ~\"\");\n+            let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            let doc = (prune_hidden_pass::mk_pass().f)(srv.clone(), doc);\n             run(srv.clone(), doc, output_style)\n         }\n     }\n@@ -182,6 +186,7 @@ mod test {\n     #[test]\n     fn should_make_a_page_for_every_mod() {\n         let doc = mk_doc(~\"mod a { }\");\n+        // hidden __std_macros module at the start.\n         assert_eq!(doc.pages.mods()[0].name(), ~\"a\");\n     }\n "}, {"sha": "d26c3f8da6edb694b8bb4dcf55e97853d6deeaf5", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -97,10 +97,11 @@ fn should_record_mod_paths() {\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv.clone(), ~\"\");\n         let doc = run(srv.clone(), doc);\n-        assert!(doc.cratemod().mods()[0].mods()[0].mods()[0].path()\n-            == ~[~\"a\", ~\"b\"]);\n-        assert!(doc.cratemod().mods()[0].mods()[1].mods()[0].path()\n-            == ~[~\"a\", ~\"d\"]);\n+        // hidden __std_macros module at the start.\n+        assert_eq!(doc.cratemod().mods()[1].mods()[0].mods()[0].path(),\n+                   ~[~\"a\", ~\"b\"]);\n+        assert_eq!(doc.cratemod().mods()[1].mods()[1].mods()[0].path(),\n+                   ~[~\"a\", ~\"d\"]);\n     }\n }\n \n@@ -110,6 +111,7 @@ fn should_record_fn_paths() {\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv.clone(), ~\"\");\n         let doc = run(srv.clone(), doc);\n-        assert_eq!(doc.cratemod().mods()[0].fns()[0].path(), ~[~\"a\"]);\n+        // hidden __std_macros module at the start.\n+        assert_eq!(doc.cratemod().mods()[1].fns()[0].path(), ~[~\"a\"]);\n     }\n }"}, {"sha": "9b7374eb71c7a05613b9c2c2487d255bea312624", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -166,12 +166,14 @@ mod test {\n     use attr_pass;\n     use doc;\n     use extract;\n+    use prune_hidden_pass;\n     use sectionalize_pass::run;\n \n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv.clone(), ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            let doc = (prune_hidden_pass::mk_pass().f)(srv.clone(), doc);\n             run(srv.clone(), doc)\n         }\n     }"}, {"sha": "5ad0c5606d98c5bcc205a0d85263ed0b129fb816", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -31,7 +31,8 @@ fn test() {\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv.clone(), ~\"\");\n         let doc = (mk_pass().f)(srv.clone(), doc);\n-        assert_eq!(doc.cratemod().items[0].name(), ~\"y\");\n-        assert_eq!(doc.cratemod().items[1].name(), ~\"z\");\n+        // hidden __std_macros module at the start.\n+        assert_eq!(doc.cratemod().items[1].name(), ~\"y\");\n+        assert_eq!(doc.cratemod().items[2].name(), ~\"z\");\n     }\n }"}, {"sha": "b37be5482ac6e40f63e1ba53e6f7e0d6b4bc6f72", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -53,13 +53,15 @@ fn test() {\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv.clone(), ~\"\");\n         let doc = (mk_pass().f)(srv.clone(), doc);\n+        // hidden __std_macros module at the start.\n         assert_eq!(doc.cratemod().items[0].name(), ~\"iconst\");\n         assert_eq!(doc.cratemod().items[1].name(), ~\"itype\");\n         assert_eq!(doc.cratemod().items[2].name(), ~\"ienum\");\n         assert_eq!(doc.cratemod().items[3].name(), ~\"istruct\");\n         assert_eq!(doc.cratemod().items[4].name(), ~\"itrait\");\n         assert_eq!(doc.cratemod().items[5].name(), ~\"__extensions__\");\n         assert_eq!(doc.cratemod().items[6].name(), ~\"ifn\");\n-        assert_eq!(doc.cratemod().items[7].name(), ~\"imod\");\n+        // hidden __std_macros module fits here.\n+        assert_eq!(doc.cratemod().items[8].name(), ~\"imod\");\n     }\n }"}, {"sha": "9b125f16afe6052b55b35930ff7ccc3ae85578e6", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -67,10 +67,11 @@ fn test() {\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv.clone(), ~\"\");\n         let doc = (mk_pass(~\"\", name_lteq).f)(srv.clone(), doc);\n-        assert_eq!(doc.cratemod().mods()[0].name(), ~\"w\");\n-        assert_eq!(doc.cratemod().mods()[1].items[0].name(), ~\"x\");\n-        assert_eq!(doc.cratemod().mods()[1].items[1].name(), ~\"y\");\n-        assert_eq!(doc.cratemod().mods()[1].name(), ~\"z\");\n+        // hidden __std_macros module at the start.\n+        assert_eq!(doc.cratemod().mods()[1].name(), ~\"w\");\n+        assert_eq!(doc.cratemod().mods()[2].items[0].name(), ~\"x\");\n+        assert_eq!(doc.cratemod().mods()[2].items[1].name(), ~\"y\");\n+        assert_eq!(doc.cratemod().mods()[2].name(), ~\"z\");\n     }\n }\n \n@@ -84,10 +85,11 @@ fn should_be_stable() {\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv.clone(), ~\"\");\n         let doc = (mk_pass(~\"\", always_eq).f)(srv.clone(), doc);\n-        assert_eq!(doc.cratemod().mods()[0].items[0].name(), ~\"b\");\n-        assert_eq!(doc.cratemod().mods()[1].items[0].name(), ~\"d\");\n+        // hidden __std_macros module at the start.\n+        assert_eq!(doc.cratemod().mods()[1].items[0].name(), ~\"b\");\n+        assert_eq!(doc.cratemod().mods()[2].items[0].name(), ~\"d\");\n         let doc = (mk_pass(~\"\", always_eq).f)(srv.clone(), doc);\n-        assert_eq!(doc.cratemod().mods()[0].items[0].name(), ~\"b\");\n-        assert_eq!(doc.cratemod().mods()[1].items[0].name(), ~\"d\");\n+        assert_eq!(doc.cratemod().mods()[1].items[0].name(), ~\"b\");\n+        assert_eq!(doc.cratemod().mods()[2].items[0].name(), ~\"d\");\n     }\n }"}, {"sha": "0d284fb48e2642f67151b3612c0c069987caa5d7", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -28,12 +28,14 @@ mod test {\n     use attr_pass;\n     use doc;\n     use extract;\n+    use prune_hidden_pass;\n     use trim_pass::mk_pass;\n \n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv.clone(), ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            let doc = (prune_hidden_pass::mk_pass().f)(srv.clone(), doc);\n             (mk_pass().f)(srv.clone(), doc)\n         }\n     }"}, {"sha": "c421da067951ca057f65f73f3aacebbf9c32d479", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -453,8 +453,9 @@ pub fn new_span(cx: @ExtCtxt, sp: span) -> span {\n \n pub fn std_macros() -> @str {\n     return\n-@\"pub mod __std_macros {\n+@\"mod __std_macros {\n     #[macro_escape];\n+    #[doc(hidden)];\n \n     macro_rules! ignore (($($x:tt)*) => (()))\n "}, {"sha": "fc62e50b9bd6e14c02f66c5df0195b1c8998b22d", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -26,7 +26,7 @@ pub mod rustrt {\n \n pub fn fact(n: uint) -> uint {\n     unsafe {\n-        debug!(\"n = %?\", n);\n+        info!(\"n = %?\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }"}, {"sha": "f960363766dfd57cf022c4e72c4f00c764b10f2c", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -25,6 +25,6 @@ fn main() {\n \n     for uint::range(0u, n) |i| {\n         let x = uint::to_str(i);\n-        debug!(x);\n+        info!(x);\n     }\n }"}, {"sha": "91576bad73d960c5192ae481a3e106e850b2ba00", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -110,6 +110,6 @@ fn main() {\n         copy args\n     };\n \n-    debug!(\"%?\", args);\n+    info!(\"%?\", args);\n     run(args);\n }"}, {"sha": "12c0871566c93d7450387d1b03a23f9ba22c0ae5", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -106,6 +106,6 @@ fn main() {\n         copy args\n     };\n \n-    debug!(\"%?\", args);\n+    info!(\"%?\", args);\n     run(args);\n }"}, {"sha": "d30c1294435253e374acdde82427ff06df4736fe", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -44,7 +44,7 @@ fn roundtrip(id: int, n_tasks: int, p: &Port<int>, ch: &Chan<int>) {\n             return;\n           }\n           token => {\n-            debug!(\"thread: %d   got token: %d\", id, token);\n+            info!(\"thread: %d   got token: %d\", id, token);\n             ch.send(token - 1);\n             if token <= n_tasks {\n                 return;"}, {"sha": "f397f954623b0bd42ec4a501e2bf7ff94b2d4f9e", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -33,11 +33,11 @@ fn main() {\n \n fn run(repeat: int, depth: int) {\n     for (repeat as uint).times {\n-        debug!(\"starting %.4f\", precise_time_s());\n+        info!(\"starting %.4f\", precise_time_s());\n         do task::try {\n             recurse_or_fail(depth, None)\n         };\n-        debug!(\"stopping %.4f\", precise_time_s());\n+        info!(\"stopping %.4f\", precise_time_s());\n     }\n }\n \n@@ -71,7 +71,7 @@ fn r(l: @nillist) -> r {\n \n fn recurse_or_fail(depth: int, st: Option<State>) {\n     if depth == 0 {\n-        debug!(\"unwinding %.4f\", precise_time_s());\n+        info!(\"unwinding %.4f\", precise_time_s());\n         fail!();\n     } else {\n         let depth = depth - 1;"}, {"sha": "7eeaa9435deff1e5d78df15a676eec5c427434eb", "filename": "src/test/compile-fail/assign-imm-local-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,9 +11,9 @@\n fn test() {\n     let v: int;\n     v = 1; //~ NOTE prior assignment occurs here\n-    debug!(\"v=%d\", v);\n+    info!(\"v=%d\", v);\n     v = 2; //~ ERROR re-assignment of immutable variable\n-    debug!(\"v=%d\", v);\n+    info!(\"v=%d\", v);\n }\n \n fn main() {"}, {"sha": "f300bd51b24eca1582df34ca467bfdaf8e6e1242", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : uint, in_y : int) -> cat {\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  nyan.speak = || debug!(\"meow\"); //~ ERROR attempted to take value of method\n+  nyan.speak = || info!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "3102a1a9d99480a9328abe2eeb614402ecd8222d", "filename": "src/test/compile-fail/attr-before-ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     #[attr] //~ ERROR expected item after attributes\n-    debug!(\"hi\");\n+    info!(\"hi\");\n }"}, {"sha": "e1ad19e32bddc7e553d01c434a1b792094123685", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -21,11 +21,11 @@ fn main() {\n     let a: clam = clam{x: @1, y: @2};\n     let b: clam = clam{x: @10, y: @20};\n     let z: int = a.x + b.y; //~ ERROR binary operation + cannot be applied to type `@int`\n-    debug!(z);\n+    info!(z);\n     assert_eq!(z, 21);\n     let forty: fish = fish{a: @40};\n     let two: fish = fish{a: @2};\n     let answer: int = forty.a + two.a;  //~ ERROR binary operation + cannot be applied to type `@int`\n-    debug!(answer);\n+    info!(answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "5045c87c2f3a80b2bb229164ec3a95d21b831986", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:expected `~str` but found `int`\n \n static i: ~str = 10i;\n-fn main() { debug!(i); }\n+fn main() { info!(i); }"}, {"sha": "d2366c2b5bc5d25819e25c59fb4524ad460efcb5", "filename": "src/test/compile-fail/block-arg-as-stmt-with-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -17,6 +17,6 @@ fn compute1() -> float {\n \n fn main() {\n     let x = compute1();\n-    debug!(x);\n+    info!(x);\n     assert_eq!(x, -4f);\n }"}, {"sha": "63d12b72cc6353c1fcd8e2d4a404751d0bb12d36", "filename": "src/test/compile-fail/bogus-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -17,7 +17,7 @@ enum color { rgb(int, int, int), rgba(int, int, int, int), }\n fn main() {\n     let red: color = rgb(255, 0, 0);\n     match red {\n-      rgb(r, g, b) => { debug!(\"rgb\"); }\n-      hsl(h, s, l) => { debug!(\"hsl\"); }\n+      rgb(r, g, b) => { info!(\"rgb\"); }\n+      hsl(h, s, l) => { info!(\"hsl\"); }\n     }\n }"}, {"sha": "0256c88b01d5d20a7509a287576c4a9c9cae7bc8", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -21,7 +21,7 @@ fn a() {\n \n     p[0] = 5; //~ ERROR cannot assign\n \n-    debug!(\"%d\", *q);\n+    info!(\"%d\", *q);\n }\n \n fn borrow(_x: &[int], _f: &fn()) {}"}, {"sha": "87ab36348c6a659f048e4be731f2e1a58e8d15db", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -18,14 +18,14 @@ fn box_imm() {\n     let v = ~3;\n     let _w = &v;\n     do task::spawn {\n-        debug!(\"v=%d\", *v);\n+        info!(\"v=%d\", *v);\n         //~^ ERROR cannot move `v` into closure\n     }\n \n     let v = ~3;\n     let _w = &v;\n     task::spawn(|| {\n-        debug!(\"v=%d\", *v);\n+        info!(\"v=%d\", *v);\n         //~^ ERROR cannot move\n     });\n }"}, {"sha": "0b9897f23fc06da7fde5bf32973665a942790127", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n                 }\n             }\n             let z = copy tail[0];\n-            debug!(fmt!(\"%?\", z));\n+            info!(fmt!(\"%?\", z));\n         }\n         _ => {\n             ::std::util::unreachable();"}, {"sha": "f69036ff9d9136aee2c03c44185c7bda2befac46", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let x: int = 3;\n     let y: &mut int = &mut x; //~ ERROR cannot borrow\n     *y = 5;\n-    debug!(*y);\n+    info!(*y);\n }"}, {"sha": "2e4ae7f8544afbedea49d91aa8d49d4fabbadc2a", "filename": "src/test/compile-fail/dead-code-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     return;\n-    debug!(\"Paul is dead\"); //~ ERROR: unreachable\n+    info!(\"Paul is dead\"); //~ ERROR: unreachable\n }"}, {"sha": "9d2b68ddb81ef6ce2cd712ac3160e3941998c7c2", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -1,2 +1,2 @@\n // error-pattern: unresolved name `this_does_nothing_what_the`.\n-fn main() { debug!(\"doing\"); this_does_nothing_what_the; debug!(\"boing\"); }\n+fn main() { info!(\"doing\"); this_does_nothing_what_the; info!(\"boing\"); }"}, {"sha": "22762eb4a7eb514d54cbe8c37b38422abbce6ef8", "filename": "src/test/compile-fail/export2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,7 +15,7 @@ mod foo {\n }\n \n mod bar {\n-    fn x() { debug!(\"x\"); }\n+    fn x() { info!(\"x\"); }\n \n     pub fn y() { }\n }"}, {"sha": "8e3318f6945ac1a1fa0a289b0672cb3488cd6c7e", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     let a = if true { true };\n-    debug!(a);\n+    info!(a);\n }"}, {"sha": "805aace081d02e75b44376492912c808212c8947", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,10 +13,10 @@\n use module_of_many_things::*;\n \n mod module_of_many_things {\n-    pub fn f1() { debug!(\"f1\"); }\n-    pub fn f2() { debug!(\"f2\"); }\n-    fn f3() { debug!(\"f3\"); }\n-    pub fn f4() { debug!(\"f4\"); }\n+    pub fn f1() { info!(\"f1\"); }\n+    pub fn f2() { info!(\"f2\"); }\n+    fn f3() { info!(\"f3\"); }\n+    pub fn f4() { info!(\"f4\"); }\n }\n \n "}, {"sha": "49ee1ad55c0caa6b33c35915d443b2b32607f05e", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,13 +12,13 @@\n \n mod circ1 {\n     pub use circ2::f2;\n-    pub fn f1() { debug!(\"f1\"); }\n+    pub fn f1() { info!(\"f1\"); }\n     pub fn common() -> uint { return 0u; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n-    pub fn f2() { debug!(\"f2\"); }\n+    pub fn f2() { info!(\"f2\"); }\n     pub fn common() -> uint { return 1u; }\n }\n "}, {"sha": "5177dc4e47570caa711ee236b52fed63724dddf0", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,6 +12,6 @@\n use zed::bar;\n use zed::baz;\n mod zed {\n-    pub fn bar() { debug!(\"bar\"); }\n+    pub fn bar() { info!(\"bar\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "e67a79130b1f9a6e0529088136cf7aa14a2166e7", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,6 +13,6 @@ use baz::zed::bar;  //~ ERROR unresolved import\n \n mod baz {}\n mod zed {\n-    pub fn bar() { debug!(\"bar3\"); }\n+    pub fn bar() { info!(\"bar3\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "7a7f4f20aea07f1b4dc57eba1a17d144120c92df", "filename": "src/test/compile-fail/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport3.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,4 +11,4 @@\n // error-pattern: unresolved\n use main::bar;\n \n-fn main(args: ~[str]) { debug!(\"foo\"); }\n+fn main(args: ~[str]) { info!(\"foo\"); }"}, {"sha": "087842d78c709f6910011c49886675be479cf420", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,4 +13,4 @@\n mod a { pub use b::foo; }\n mod b { pub use a::foo; }\n \n-fn main(args: ~[str]) { debug!(\"loop\"); }\n+fn main(args: ~[str]) { info!(\"loop\"); }"}, {"sha": "ba0a2cbab50221dbeb077fbf63d3626a931f715a", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,5 +11,5 @@\n // Regression test for issue #1448 and #1386\n \n fn main() {\n-    debug!(\"%u\", 10i); //~ ERROR mismatched types\n+    info!(\"%u\", 10i); //~ ERROR mismatched types\n }"}, {"sha": "0d94e378a4ca8a7226971bd18d3fd2aeba1b581c", "filename": "src/test/compile-fail/issue-2281-part1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern: unresolved name `foobar`.\n \n-fn main(args: ~[str]) { debug!(foobar); }\n+fn main(args: ~[str]) { info!(foobar); }"}, {"sha": "e16b9f933f79d1f79caa950224632ee87a19ed6b", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,7 +19,7 @@ fn main()\n {\n \n     let _z = match g(1, 2) {\n-      g(x, x) => { debug!(x + x); }\n+      g(x, x) => { info!(x + x); }\n       //~^ ERROR Identifier `x` is bound more than once in the same pattern\n     };\n "}, {"sha": "64618bb2f7a533409ddfef2580bf7382193ad41f", "filename": "src/test/compile-fail/liveness-and-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-and-init.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let i: int;\n \n-    debug!(false && { i = 5; true });\n-    debug!(i); //~ ERROR use of possibly uninitialized variable: `i`\n+    info!(false && { i = 5; true });\n+    info!(i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "e9ab87f09e26d0bfd2231d349aa854f0dfc4e2de", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,6 +12,6 @@\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: some control paths may return\n \n-fn bad_bang(i: uint) -> ! { debug!(3); }\n+fn bad_bang(i: uint) -> ! { info!(3); }\n \n fn main() { bad_bang(5u); }"}, {"sha": "159c945f3c21953f09d1fbe7c0e55515bc3270b3", "filename": "src/test/compile-fail/liveness-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,6 +12,6 @@ fn force(f: &fn()) { f(); }\n fn main() {\n     let x: int;\n     force(|| {\n-        debug!(x); //~ ERROR capture of possibly uninitialized variable: `x`\n+        info!(x); //~ ERROR capture of possibly uninitialized variable: `x`\n     });\n }"}, {"sha": "2c3004056eae076b3f482c17cfcd82d63a4ad964", "filename": "src/test/compile-fail/liveness-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit-2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,9 +16,9 @@ fn foo() -> int {\n         x = 0;\n     }\n \n-    debug!(x); //~ ERROR use of possibly uninitialized variable: `x`\n+    info!(x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     return 17;\n }\n \n-fn main() { debug!(foo()); }\n+fn main() { info!(foo()); }"}, {"sha": "9e8a1e8a4d350511f07a4d28b3e8f41bf556c6ed", "filename": "src/test/compile-fail/liveness-break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-break-uninit.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,9 +16,9 @@ fn foo() -> int {\n         x = 0;\n     }\n \n-    debug!(x); //~ ERROR use of possibly uninitialized variable: `x`\n+    info!(x); //~ ERROR use of possibly uninitialized variable: `x`\n \n     return 17;\n }\n \n-fn main() { debug!(foo()); }\n+fn main() { info!(foo()); }"}, {"sha": "f624bfe800f5fd71e61f2458a1e869b0242a343f", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn force(f: &fn() -> int) -> int { f() }\n-fn main() { debug!(force(|| {})); } //~ ERROR mismatched types\n+fn main() { info!(force(|| {})); } //~ ERROR mismatched types"}, {"sha": "e9f831219e0c7dd14bbc3759efd8f1fdeff5ad1f", "filename": "src/test/compile-fail/liveness-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-if-no-else.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { debug!(x); }\n+fn foo(x: int) { info!(x); }\n \n fn main() {\n     let x: int; if 1 > 2 { x = 10; }"}, {"sha": "e2cf820f1911adbdf41cddf5a2a31f7f12ff3170", "filename": "src/test/compile-fail/liveness-if-with-else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-if-with-else.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { debug!(x); }\n+fn foo(x: int) { info!(x); }\n \n fn main() {\n     let x: int;\n     if 1 > 2 {\n-        debug!(\"whoops\");\n+        info!(\"whoops\");\n     } else {\n         x = 10;\n     }"}, {"sha": "605233d3da0ae57180228acde6686ea90cad8bad", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let y: ~int = ~42;\n     let mut x: ~int;\n     loop {\n-        debug!(y);\n+        info!(y);\n         loop {\n             loop {\n                 loop {"}, {"sha": "c501607aee6ce3c811ac9e6737dd021b6983ed08", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let y: ~int = ~42;\n     let mut x: ~int;\n     loop {\n-        debug!(y); //~ ERROR use of moved value: `y`\n+        info!(y); //~ ERROR use of moved value: `y`\n         while true { while true { while true { x = y; copy x; } } }\n         //~^ ERROR use of moved value: `y`\n     }"}, {"sha": "ee2a550d98370859ff16ad12c4f2d28d5301a896", "filename": "src/test/compile-fail/liveness-or-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-or-init.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let i: int;\n \n-    debug!(false || { i = 5; true });\n-    debug!(i); //~ ERROR use of possibly uninitialized variable: `i`\n+    info!(false || { i = 5; true });\n+    info!(i); //~ ERROR use of possibly uninitialized variable: `i`\n }"}, {"sha": "015f824f6891b232877cf7db9cbfa2ac724c5d2c", "filename": "src/test/compile-fail/liveness-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-uninit.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { debug!(x); }\n+fn foo(x: int) { info!(x); }\n \n fn main() {\n     let x: int;"}, {"sha": "662514e133b5fad44d3d22faa963152247d49632", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     let x = ~5;\n     let y = x;\n-    debug!(*x); //~ ERROR use of moved value: `x`\n+    info!(*x); //~ ERROR use of moved value: `x`\n     copy y;\n }"}, {"sha": "5a748fbc81c9ebb5565a1d9bfc3b95fc380f9666", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn send<T:Send>(ch: _chan<T>, data: T) {\n-    debug!(ch);\n-    debug!(data);\n+    info!(ch);\n+    info!(data);\n     fail!();\n }\n \n@@ -20,7 +20,7 @@ struct _chan<T>(int);\n // message after the send deinitializes it\n fn test00_start(ch: _chan<~int>, message: ~int, _count: ~int) {\n     send(ch, message);\n-    debug!(message); //~ ERROR use of moved value: `message`\n+    info!(message); //~ ERROR use of moved value: `message`\n }\n \n fn main() { fail!(); }"}, {"sha": "712d586852af4b2582f16a93b11949624b683698", "filename": "src/test/compile-fail/liveness-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-while-break.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@ fn test(cond: bool) {\n         v = 3;\n         break;\n     }\n-    debug!(\"%d\", v); //~ ERROR use of possibly uninitialized variable: `v`\n+    info!(\"%d\", v); //~ ERROR use of possibly uninitialized variable: `v`\n }\n \n fn main() {"}, {"sha": "818671e1133222ab046bb78321f737f41fe2bba9", "filename": "src/test/compile-fail/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,6 +16,6 @@ fn my_fail() -> ! { fail!(); }\n fn main() {\n     match true { false => { my_fail(); } true => { } }\n \n-    debug!(x); //~ ERROR unresolved name `x`.\n+    info!(x); //~ ERROR unresolved name `x`.\n     let x: int;\n }"}, {"sha": "9cfd63dd51fdbd20a54e8ce379b1f4bd63ea4d7f", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,5 +15,5 @@ struct foo {\n }\n \n fn main() {\n-    debug!(foo{ x: 1 } as int);\n+    info!(foo{ x: 1 } as int);\n }"}, {"sha": "f46ef0563164e8345a99ff791a6bf9340bf3959d", "filename": "src/test/compile-fail/oversized-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:literal out of range\n \n-fn main() { debug!(300u8); }\n+fn main() { info!(300u8); }"}, {"sha": "8e15f11231e970b50f35a3ec2f6e051ff14def48", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -32,6 +32,6 @@ fn main() {\n     let foo = Foo { bar: [1u8, 2, 3, 4, 5], baz: 10i32 };\n     unsafe {\n         let oof: Oof<[u8, .. 5], i32> = cast::transmute(foo);\n-        debug!(oof);\n+        info!(oof);\n     }\n }"}, {"sha": "38419b8df88a2c8992a6e994562929c44146ee7d", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -32,6 +32,6 @@ fn main() {\n     let foo = Foo { bar: 1, baz: 10 };\n     unsafe {\n         let oof: Oof = cast::transmute(foo);\n-        debug!(oof);\n+        info!(oof);\n     }\n }"}, {"sha": "49ad8f87de33914e084426c3644e6495194c4f37", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -18,7 +18,7 @@ enum bar { t1((), Option<~[int]>), t2, }\n fn foo(t: bar) {\n     match t {\n       t1(_, Some::<int>(x)) => {\n-        debug!(x);\n+        info!(x);\n       }\n       _ => { fail!(); }\n     }"}, {"sha": "b7fc2a64669f9dd6b792cc3c9b38ca64f23fd79b", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -34,7 +34,7 @@ fn main() {\n         // Can't do this copy\n         let x = ~~~A {y: r(i)};\n         let _z = copy x; //~ ERROR copying a value of non-copyable type\n-        debug!(x);\n+        info!(x);\n     }\n     error!(*i);\n }"}, {"sha": "4565d897c72ba3199937d9e020a12274fe2cb922", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -33,5 +33,5 @@ fn dog() -> dog {\n fn main() {\n     let mut d = dog();\n     d.chase_cat();\n-    debug!(\"cats_chased: %u\", d.cats_chased);\n+    info!(\"cats_chased: %u\", d.cats_chased);\n }"}, {"sha": "6bc93e3af7c742ee437ec3921882a3e7edca6a1b", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,6 +13,6 @@ fn wants_static_fn(_x: &'static fn()) {}\n fn main() {\n     let i = 3;\n     do wants_static_fn { //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n-        debug!(\"i=%d\", i);\n+        info!(\"i=%d\", i);\n     }\n }"}, {"sha": "de4a05c9895c30144cd1811a78a4a4dd344ca9a4", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -24,5 +24,5 @@ fn return_it<'a>() -> &'a int {\n \n fn main() {\n     let x = return_it();\n-    debug!(\"foo=%d\", *x);\n+    info!(\"foo=%d\", *x);\n }"}, {"sha": "1aa2329aaec6131d521e7f9e47dd335247cd90fb", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -27,5 +27,5 @@ fn return_it() -> &int {\n \n fn main() {\n     let x = return_it();\n-    debug!(\"foo=%d\", *x);\n+    info!(\"foo=%d\", *x);\n }"}, {"sha": "609439d7b8e2b6205978287311074e724512579b", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,5 +14,5 @@ fn test(f: @fn(uint) -> uint) -> uint {\n \n fn main() {\n     let f: ~fn(x: uint) -> uint = |x| 4u;\n-    debug!(test(f)); //~ ERROR expected @ closure, found ~ closure\n+    info!(test(f)); //~ ERROR expected @ closure, found ~ closure\n }"}, {"sha": "30848a18af7dd87391d8c2ecfc2950eb80c6d92c", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,5 +19,5 @@ impl Drop for r {\n fn main() {\n     let i = ~r { b: true };\n     let _j = copy i; //~ ERROR copying a value of non-copyable type\n-    debug!(i);\n+    info!(i);\n }"}, {"sha": "cfb517938225fad5e93ee50fc23d7203fa0e63d2", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -32,6 +32,6 @@ fn main() {\n     f(copy r1, copy r2);\n     //~^ ERROR copying a value of non-copyable type\n     //~^^ ERROR copying a value of non-copyable type\n-    debug!((r2, *i1));\n-    debug!((r1, *i2));\n+    info!((r2, *i1));\n+    info!((r1, *i2));\n }"}, {"sha": "faa0069a1136ad35f6d4072e48e3f60ce53fa5fe", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,5 +13,5 @@\n use std::libc;\n \n fn main() {\n-  debug!(1.0 as *libc::FILE); // Can't cast float to foreign.\n+  info!(1.0 as *libc::FILE); // Can't cast float to foreign.\n }"}, {"sha": "bc2786b2c19a8bb015cd9424016897583c468de9", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,7 +13,7 @@\n \n fn f() {\n     let v = ~[1i];\n-    debug!(v.some_field_name); //type error\n+    info!(v.some_field_name); //type error\n }\n \n fn main() { }"}, {"sha": "e0fc3357d7bd0da23e4b46931d8061c79785d246", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     let i = ~[r(0)];\n     let j = ~[r(1)];\n     let k = i + j;\n-    debug!(j);\n+    info!(j);\n }"}, {"sha": "9e6f053e4c2b9013b660438b953acbc711cdf5d6", "filename": "src/test/pretty/block-arg-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn blk1(b: &fn()) -> @fn() { return || { }; }\n-fn test1() { (do blk1 { debug!(\"hi\"); })(); }\n+fn test1() { (do blk1 { info!(\"hi\"); })(); }"}, {"sha": "022a879eca4969c33a11e4c7f31adcd6f4c2639c", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -43,7 +43,7 @@ fn main() {\n     for 10u.times {\n         do task::spawn {\n             let result = count(5u);\n-            debug!(\"result = %?\", result);\n+            info!(\"result = %?\", result);\n             fail!();\n         };\n     }"}, {"sha": "844bac9d3d03772079a7aed141b7062a447247c6", "filename": "src/test/run-fail/fail-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:woe\n-fn f(a: int) { debug!(a); }\n+fn f(a: int) { info!(a); }\n \n fn main() { f(fail!(\"woe\")); }"}, {"sha": "f7d37d1532973185d1057ef007800bb591f25c10", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -17,7 +17,7 @@ fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if even(x) {\n-        debug!(x);\n+        info!(x);\n     } else {\n         fail!(\"Number is odd\");\n     }"}, {"sha": "c48fbbca2b7404e06462146144501654e393d971", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,7 +19,7 @@ fn f<A:Copy + 'static>(a: A, b: u16) -> @fn() -> (A, u16) {\n \n pub fn main() {\n     let (a, b) = f(22_u64, 44u16)();\n-    debug!(\"a=%? b=%?\", a, b);\n+    info!(\"a=%? b=%?\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);\n }"}, {"sha": "f0f86222a2501b1c1eee2e0c8d63173aa190081d", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     let z = f(~x, y);\n     make_cycle(z);\n     let (a, b) = z();\n-    debug!(\"a=%u b=%u\", *a as uint, b as uint);\n+    info!(\"a=%u b=%u\", *a as uint, b as uint);\n     assert_eq!(*a, x);\n     assert_eq!(b, y);\n }"}, {"sha": "ca01e1e10c3024f584224667a8097cfc0e34a6c4", "filename": "src/test/run-pass/arith-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Farith-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Farith-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-0.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,6 +12,6 @@\n \n pub fn main() {\n     let a: int = 10;\n-    debug!(a);\n+    info!(a);\n     assert_eq!(a * (a - 1), 90);\n }"}, {"sha": "8cde06ab4284ffa80c3d89eafdd14606e85aab72", "filename": "src/test/run-pass/arith-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Farith-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Farith-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-1.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -28,6 +28,6 @@ pub fn main() {\n     assert_eq!(i32_b << 1, i32_b << 1);\n     assert_eq!(i32_b >> 1, i32_b >> 1);\n     assert_eq!(i32_b & i32_b << 1, 0);\n-    debug!(i32_b | i32_b << 1);\n+    info!(i32_b | i32_b << 1);\n     assert_eq!(i32_b | i32_b << 1, 0x30303030);\n }"}, {"sha": "184fef52c8c14e9245e24d4e699175b8d5e1d7c0", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,6 +19,6 @@ struct Triple { x: int, y: int, z: int }\n fn f<T:Copy,U:Copy>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n pub fn main() {\n-    debug!(\"%?\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n-    debug!(\"%?\", f(5, 6).a);\n+    info!(\"%?\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n+    info!(\"%?\", f(5, 6).a);\n }"}, {"sha": "49ff17317c8b070368c2f8acc0a93ee1170151f3", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -27,8 +27,8 @@ fn general() {\n     a ^= b;\n     b ^= a;\n     a = a ^ b;\n-    debug!(a);\n-    debug!(b);\n+    info!(a);\n+    info!(b);\n     assert_eq!(b, 1);\n     assert_eq!(a, 2);\n     assert_eq!(!0xf0 & 0xff, 0xf);"}, {"sha": "219e57a3e8ccbfb1cabac3840f97a53a77191c5a", "filename": "src/test/run-pass/borrowck-preserve-box-in-discr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n         x = @F {f: ~4};\n \n-        debug!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n                ptr::to_unsafe_ptr(&(**b_x)) as uint);\n         assert_eq!(**b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(**b_x)));"}, {"sha": "a85ab027f2c92e5f901171f267c0ad37a587bd50", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @F {f: ~4};\n \n-        debug!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));"}, {"sha": "8fad933281118b8d470449169a4b43453a3e8406", "filename": "src/test/run-pass/borrowck-preserve-box-in-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n \n         *x = @F {f: ~4};\n \n-        debug!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n                ptr::to_unsafe_ptr(&(**b_x)) as uint);\n         assert_eq!(**b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(**b_x)));"}, {"sha": "b25d731680133fcfa2c8ec1dbbf63243f7c99da9", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         *x = @F{f: ~4};\n \n-        debug!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));"}, {"sha": "ec57194cb43906a986870ead4fa4b46efc007c0e", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -26,7 +26,7 @@ pub fn main() {\n         assert_eq!(ptr::to_unsafe_ptr(&(*x)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @22;\n \n-        debug!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x)) != ptr::to_unsafe_ptr(&(*b_x)));"}, {"sha": "e5cef1dbc059961acf94cfb6c7e5a1e25887a830", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -25,13 +25,13 @@ fn testfn(cond: bool) {\n         exp = 4;\n     }\n \n-    debug!(\"*r = %d, exp = %d\", *r, exp);\n+    info!(\"*r = %d, exp = %d\", *r, exp);\n     assert_eq!(*r, exp);\n \n     x = @5;\n     y = @6;\n \n-    debug!(\"*r = %d, exp = %d\", *r, exp);\n+    info!(\"*r = %d, exp = %d\", *r, exp);\n     assert_eq!(*r, exp);\n }\n "}, {"sha": "94b8f70b759fb1d5e476e0349b8db97997b1f2d7", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @F {f: ~4};\n \n-        debug!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n+        info!(\"ptr::to_unsafe_ptr(*b_x) = %x\",\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));"}, {"sha": "2c45ec83d00309071915401233218b6be515d7da", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -17,6 +17,6 @@ fn unbox<T:Copy>(b: Box<T>) -> T { return copy *b.c; }\n pub fn main() {\n     let foo: int = 17;\n     let bfoo: Box<int> = Box {c: @foo};\n-    debug!(\"see what's in our box\");\n+    info!(\"see what's in our box\");\n     assert_eq!(unbox::<int>(bfoo), foo);\n }"}, {"sha": "7472e0ca73a6c1b79475e485e6e541932f323b66", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,5 +12,5 @@ use std::borrow;\n \n pub fn main() {\n     let x = 3;\n-    debug!(\"&x=%x\", borrow::to_uint(&x));\n+    info!(\"&x=%x\", borrow::to_uint(&x));\n }"}, {"sha": "c5fa8bba1a5de6242161b63d520d060e8e1eb8fa", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -17,6 +17,6 @@ use cci_borrow_lib::foo;\n pub fn main() {\n     let p = @22u;\n     let r = foo(p);\n-    debug!(\"r=%u\", r);\n+    info!(\"r=%u\", r);\n     assert_eq!(r, 22u);\n }"}, {"sha": "097184540fdfcb4994c7e7c0c768a2cbc593ac61", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,13 +16,13 @@ use cci_impl_lib::uint_helpers;\n \n pub fn main() {\n     //let bt0 = sys::frame_address();\n-    //debug!(\"%?\", bt0);\n+    //info!(\"%?\", bt0);\n \n     do 3u.to(10u) |i| {\n         print(fmt!(\"%u\\n\", i));\n \n         //let bt1 = sys::frame_address();\n-        //debug!(\"%?\", bt1);\n+        //info!(\"%?\", bt1);\n         //assert!(bt0 == bt1);\n     }\n }"}, {"sha": "a8c0583701380f1a8f05d52b9351aeb0985a0445", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,7 +15,7 @@ extern mod cci_iter_lib;\n \n pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n-    //debug!(\"%?\", bt0);\n+    //info!(\"%?\", bt0);\n     do cci_iter_lib::iter(~[1, 2, 3]) |i| {\n         print(fmt!(\"%d\", *i));\n         //assert!(bt0 == sys::rusti::frame_address(2u32));"}, {"sha": "83a77ad987736455270e0a691e8bb6b284e9f623", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -21,12 +21,12 @@ pub fn main() {\n     // sys::frame_address() to determine if we are inlining is\n     // actually working.\n     //let bt0 = sys::frame_address();\n-    //debug!(\"%?\", bt0);\n+    //info!(\"%?\", bt0);\n     do iter(~[1u, 2u, 3u]) |i| {\n         print(fmt!(\"%u\\n\", i));\n \n         //let bt1 = sys::frame_address();\n-        //debug!(\"%?\", bt1);\n+        //info!(\"%?\", bt1);\n \n         //assert!(bt0 != bt1);\n     }"}, {"sha": "d81e6fc687811e41e699582cf013f7a18d5f11f8", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,7 +16,7 @@ use cci_class_cast::kitty::*;\n \n fn print_out(thing: @ToStr, expected: ~str) {\n   let actual = thing.to_str();\n-  debug!(\"%s\", actual);\n+  info!(\"%s\", actual);\n   assert_eq!(actual, expected);\n }\n "}, {"sha": "475915cf9642597f737236f811e486599b378360", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -22,15 +22,15 @@ struct dog {\n \n impl dog {\n     priv fn bark(&self) -> int {\n-      debug!(\"Woof %u %d\", *self.barks, *self.volume);\n+      info!(\"Woof %u %d\", *self.barks, *self.volume);\n       *self.barks += 1u;\n       if *self.barks % 3u == 0u {\n           *self.volume += 1;\n       }\n       if *self.barks % 10u == 0u {\n           *self.volume -= 2;\n       }\n-      debug!(\"Grrr %u %d\", *self.barks, *self.volume);\n+      info!(\"Grrr %u %d\", *self.barks, *self.volume);\n       *self.volume\n     }\n }\n@@ -63,7 +63,7 @@ impl cat {\n \n impl cat {\n     fn meow(&self) -> uint {\n-      debug!(\"Meow\");\n+      info!(\"Meow\");\n       *self.meows += 1u;\n       if *self.meows % 5u == 0u {\n           *self.how_hungry += 1;"}, {"sha": "f7f1039d1b7864db83d6ed679aa813df033242ae", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -43,7 +43,7 @@ class cat : noisy, scratchy, bitey {\n     let bite_counts : hashmap<body_part, uint>;\n \n     fn meow() -> uint {\n-      debug!(\"Meow: %u\", *self.meows);\n+      info!(\"Meow: %u\", *self.meows);\n       *self.meows += 1u;\n       if *self.meows % 5u == 0u {\n           *self.how_hungry += 1;\n@@ -84,28 +84,28 @@ class cat : noisy, scratchy, bitey {\n     let all = ~[toe, nose, ear];\n     let mut min = finger;\n     do iter(all) |next| {\n-      debug!(\"min = %?\", min);\n+      info!(\"min = %?\", min);\n         if self.bite_counts.get(next) < self.bite_counts.get(min) {\n             min = next;\n           }};\n     self.bite_counts.insert(min, self.bite_counts.get(min) + 1u);\n-    debug!(\"Bit %?\", min);\n+    info!(\"Bit %?\", min);\n     min\n   }\n }\n \n fn annoy_neighbors<T:noisy>(critter: T) {\n   for uint::range(0u, 10u) |i| {\n       let what = critter.speak();\n-      debug!(\"%u %d\", i, what);\n+      info!(\"%u %d\", i, what);\n   }\n }\n \n fn bite_everything<T:bitey>(critter: T) -> bool {\n   let mut left : ~[body_part] = ~[finger, toe, nose, ear];\n   while left.len() > 0u {\n     let part = critter.bite();\n-    debug!(\"%? %?\", left, part);\n+    info!(\"%? %?\", left, part);\n     if vec_includes(left, part) {\n         left = vec::filter(left, |p| p != part );\n     }"}, {"sha": "fcce5a73cf853f225d0258bb38596a071cedc088", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -61,7 +61,7 @@ impl ToStr for cat {\n \n fn print_out(thing: @ToStr, expected: ~str) {\n   let actual = thing.to_str();\n-  debug!(\"%s\", actual);\n+  info!(\"%s\", actual);\n   assert_eq!(actual, expected);\n }\n "}, {"sha": "1fa102225436fafbac963d9dd4d5838557d3b72e", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -23,7 +23,7 @@ fn f<A:Copy + 'static>(a: A, b: u16) -> @fn() -> (A, u16) {\n \n pub fn main() {\n     let (a, b) = f(22_u64, 44u16)();\n-    debug!(\"a=%? b=%?\", a, b);\n+    info!(\"a=%? b=%?\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);\n }"}, {"sha": "e01c7d32f85c6b8e2690a5118d8bb53640044291", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -37,7 +37,7 @@ fn foo(x: int) -> int {\n \n pub fn main() {\n     let x: int = 2 + 2;\n-    debug!(\"%?\", x);\n-    debug!(\"hello, world\");\n-    debug!(\"%?\", 10);\n+    info!(\"%?\", x);\n+    info!(\"hello, world\");\n+    info!(\"%?\", 10);\n }"}, {"sha": "402277c19b3c1811d7603df467dc578d2b4b345f", "filename": "src/test/run-pass/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,4 +12,4 @@\n \n static i: int = 10;\n \n-pub fn main() { debug!(\"%i\", i); }\n+pub fn main() { info!(\"%i\", i); }"}, {"sha": "10bd013b618bc4d28f6be9248f0b5eea29dcc357", "filename": "src/test/run-pass/core-rt-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,6 +15,6 @@\n #[start]\n fn start(argc: int, argv: **u8, crate_map: *u8) -> int {\n     do std::rt::start(argc, argv, crate_map) {\n-        debug!(\"creating my own runtime is joy\");\n+        info!(\"creating my own runtime is joy\");\n     }\n }"}, {"sha": "2749fc31ceab75d0164e22d769e60b3bb71d8d7e", "filename": "src/test/run-pass/dead-code-one-arm-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,4 +12,4 @@\n \n \n // -*- rust -*-\n-pub fn main() { if 1 == 1 { return; } debug!(\"Paul is dead\"); }\n+pub fn main() { if 1 == 1 { return; } info!(\"Paul is dead\"); }"}, {"sha": "e2f615b3ed2b58255183ec0d90f8ed73552dc770", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { let x = @mut 5; *x = 1000; debug!(\"%?\", *x); }\n+pub fn main() { let x = @mut 5; *x = 1000; info!(\"%?\", *x); }"}, {"sha": "268b6974d7f6cf35572517b25e2f28ef760d5d13", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,8 +14,8 @@ pub fn main() {\n     let v = &\"hello\";\n     let mut y : &str = &\"there\";\n \n-    debug!(x);\n-    debug!(y);\n+    info!(x);\n+    info!(y);\n \n     assert_eq!(x[0], 'h' as u8);\n     assert_eq!(x[4], 'o' as u8);\n@@ -30,29 +30,29 @@ pub fn main() {\n     let c = &\"cccc\";\n     let cc = &\"ccccc\";\n \n-    debug!(a);\n+    info!(a);\n \n     assert!(a < b);\n     assert!(a <= b);\n     assert!(a != b);\n     assert!(b >= a);\n     assert!(b > a);\n \n-    debug!(b);\n+    info!(b);\n \n     assert!(a < c);\n     assert!(a <= c);\n     assert!(a != c);\n     assert!(c >= a);\n     assert!(c > a);\n \n-    debug!(c);\n+    info!(c);\n \n     assert!(c < cc);\n     assert!(c <= cc);\n     assert!(c != cc);\n     assert!(cc >= c);\n     assert!(cc > c);\n \n-    debug!(cc);\n+    info!(cc);\n }"}, {"sha": "38891d35e8e6c6b61c2ac5d96c205e35cb8f8578", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -20,15 +20,15 @@ pub fn main() {\n     let c : &[int] = &[2,2,2,2,3];\n     let cc : &[int] = &[2,2,2,2,2,2];\n \n-    debug!(a);\n+    info!(a);\n \n     assert!(a < b);\n     assert!(a <= b);\n     assert!(a != b);\n     assert!(b >= a);\n     assert!(b > a);\n \n-    debug!(b);\n+    info!(b);\n \n     assert!(b < c);\n     assert!(b <= c);\n@@ -42,13 +42,13 @@ pub fn main() {\n     assert!(c >= a);\n     assert!(c > a);\n \n-    debug!(c);\n+    info!(c);\n \n     assert!(a < cc);\n     assert!(a <= cc);\n     assert!(a != cc);\n     assert!(cc >= a);\n     assert!(cc > a);\n \n-    debug!(cc);\n+    info!(cc);\n }"}, {"sha": "95d61e08eb89c6d566e6e237e16364b6242e8ad7", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,7 +13,7 @@ mod foo {\n         pub fn y() { super::super::foo::x(); }\n     }\n \n-    pub fn x() { debug!(\"x\"); }\n+    pub fn x() { info!(\"x\"); }\n }\n \n pub fn main() { self::foo::bar::y(); }"}, {"sha": "e2af3121f16e1065445dc37a90128886deb5c708", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,7 +15,7 @@ pub mod foo {\n }\n \n pub mod bar {\n-    pub fn x() { debug!(\"x\"); }\n+    pub fn x() { info!(\"x\"); }\n }\n \n pub fn main() { foo::x(); }"}, {"sha": "2c9021818105f3a0ed349c5b0a99790caa5540c3", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -21,8 +21,8 @@ fn test_generic<T>(expected: @T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool {\n-        debug!(*b1);\n-        debug!(*b2);\n+        info!(*b1);\n+        info!(*b2);\n         return *b1 == *b2;\n     }\n     test_generic::<bool>(@true, compare_box);"}, {"sha": "679210351bd1ffe2b0ea62c00a868fea007199f9", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -20,8 +20,8 @@ fn test_generic<T:Copy+Clone>(expected: ~T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: ~bool, b2: ~bool) -> bool {\n-        debug!(*b1);\n-        debug!(*b2);\n+        info!(*b1);\n+        info!(*b2);\n         return *b1 == *b2;\n     }\n     test_generic::<bool>(~true, compare_box);"}, {"sha": "63d616d43495b6a0dcbf39a358c8d05ccdec4887", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -29,13 +29,13 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n \n fn count(n: uint) -> uint {\n     unsafe {\n-        debug!(\"n = %?\", n);\n+        info!(\"n = %?\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n     let result = count(1000u);\n-    debug!(\"result = %?\", result);\n+    info!(\"result = %?\", result);\n     assert_eq!(result, 1000u);\n }"}, {"sha": "58ad044dfa3ce54e676945ee766598f5f77205bd", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -30,7 +30,7 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n \n fn count(n: uint) -> uint {\n     unsafe {\n-        debug!(\"n = %?\", n);\n+        info!(\"n = %?\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n@@ -40,7 +40,7 @@ pub fn main() {\n     // has a large stack)\n     do task::spawn {\n         let result = count(1000u);\n-        debug!(\"result = %?\", result);\n+        info!(\"result = %?\", result);\n         assert_eq!(result, 1000u);\n     };\n }"}, {"sha": "cde0006afce5b7481215faf9fedc60fe27150ab9", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -34,7 +34,7 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n \n fn count(n: uint) -> uint {\n     unsafe {\n-        debug!(\"n = %?\", n);\n+        info!(\"n = %?\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n@@ -44,7 +44,7 @@ pub fn main() {\n     // has a large stack)\n     do task::spawn {\n         let result = count(12u);\n-        debug!(\"result = %?\", result);\n+        info!(\"result = %?\", result);\n         assert_eq!(result, 2048u);\n     };\n }"}, {"sha": "1d2ee22b89f510934a0b3fd21d2536b80a10f2c6", "filename": "src/test/run-pass/extern-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -29,13 +29,13 @@ extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n \n fn fact(n: uint) -> uint {\n     unsafe {\n-        debug!(\"n = %?\", n);\n+        info!(\"n = %?\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n     let result = fact(10u);\n-    debug!(\"result = %?\", result);\n+    info!(\"result = %?\", result);\n     assert_eq!(result, 3628800u);\n }"}, {"sha": "97bbd3478a1a56ade7700dff7f882757ac81874f", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,13 +15,13 @@ extern mod externcallback(vers = \"0.1\");\n \n fn fact(n: uint) -> uint {\n     unsafe {\n-        debug!(\"n = %?\", n);\n+        info!(\"n = %?\", n);\n         externcallback::rustrt::rust_dbg_call(externcallback::cb, n)\n     }\n }\n \n pub fn main() {\n     let result = fact(10u);\n-    debug!(\"result = %?\", result);\n+    info!(\"result = %?\", result);\n     assert_eq!(result, 3628800u);\n }"}, {"sha": "cdf236fcb9ef3f80d35448e502f9362fe6a9bf32", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -39,7 +39,7 @@ pub fn main() {\n     for 10u.times {\n         do task::spawn {\n             let result = count(5u);\n-            debug!(\"result = %?\", result);\n+            info!(\"result = %?\", result);\n             assert_eq!(result, 16u);\n         };\n     }"}, {"sha": "ff651effc8d4de68361e858165ba15fdbe797d3d", "filename": "src/test/run-pass/fact.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ffact.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ffact.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffact.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,26 +13,26 @@\n \n // -*- rust -*-\n fn f(x: int) -> int {\n-    // debug!(\"in f:\");\n+    // info!(\"in f:\");\n \n-    debug!(x);\n+    info!(x);\n     if x == 1 {\n-        // debug!(\"bottoming out\");\n+        // info!(\"bottoming out\");\n \n         return 1;\n     } else {\n-        // debug!(\"recurring\");\n+        // info!(\"recurring\");\n \n         let y: int = x * f(x - 1);\n-        // debug!(\"returned\");\n+        // info!(\"returned\");\n \n-        debug!(y);\n+        info!(y);\n         return y;\n     }\n }\n \n pub fn main() {\n     assert_eq!(f(5), 120);\n-    // debug!(\"all done\");\n+    // info!(\"all done\");\n \n }"}, {"sha": "f6a9e05d81803c0a77c5ce556f46ca26e8b4f6ea", "filename": "src/test/run-pass/float-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-signature.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,5 +14,5 @@ pub fn main() {\n     fn foo(n: float) -> float { return n + 0.12345; }\n     let n: float = 0.1;\n     let m: float = foo(n);\n-    debug!(m);\n+    info!(m);\n }"}, {"sha": "a9f1555ade419d9de502a2d0f69a4d5eb3ec61ba", "filename": "src/test/run-pass/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,9 +12,9 @@\n \n pub fn main() {\n     let pi = 3.1415927;\n-    debug!(-pi * (pi + 2.0 / pi) - pi * 5.0);\n+    info!(-pi * (pi + 2.0 / pi) - pi * 5.0);\n     if pi == 5.0 || pi < 10.0 || pi <= 2.0 || pi != 22.0 / 7.0 || pi >= 10.0\n            || pi > 1.0 {\n-        debug!(\"yes\");\n+        info!(\"yes\");\n     }\n }"}, {"sha": "e01c7ee998c3140843eb519c06d88a3764e355e3", "filename": "src/test/run-pass/fn-bare-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() {\n-    debug!(\"This is a bare function\");\n+    info!(\"This is a bare function\");\n }\n \n pub fn main() {"}, {"sha": "bd3799e47e1e52c78461a118a7e8c09660b18d32", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -21,8 +21,8 @@ pub fn main() {\n     let mut j: int = 0;\n     do pairs() |p| {\n         let (_0, _1) = p;\n-        debug!(_0);\n-        debug!(_1);\n+        info!(_0);\n+        info!(_1);\n         assert_eq!(_0 + 10, i);\n         i += 1;\n         j = _1;"}, {"sha": "9292c11570587e5e95c11628d1564dd682b23417", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,13 +14,13 @@\n // -*- rust -*-\n pub fn main() {\n     let mut sum: int = 0;\n-    do first_ten |i| { debug!(\"main\"); debug!(i); sum = sum + i; }\n-    debug!(\"sum\");\n-    debug!(sum);\n+    do first_ten |i| { info!(\"main\"); info!(i); sum = sum + i; }\n+    info!(\"sum\");\n+    info!(sum);\n     assert_eq!(sum, 45);\n }\n \n fn first_ten(it: &fn(int)) {\n     let mut i: int = 0;\n-    while i < 10 { debug!(\"first_ten\"); it(i); i = i + 1; }\n+    while i < 10 { info!(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "efb514caba95b1d9f58607c3c7025121b3331d48", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,6 +15,6 @@ fn id<T:Copy>(t: T) -> T { return t; }\n pub fn main() {\n     let expected = @100;\n     let actual = id::<@int>(expected);\n-    debug!(*actual);\n+    info!(*actual);\n     assert_eq!(*expected, *actual);\n }"}, {"sha": "203adf81cecd1df584b7e4c4bd16f659cea0978c", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,6 +15,6 @@ fn id<T:Copy + Send>(t: T) -> T { return t; }\n pub fn main() {\n     let expected = ~100;\n     let actual = id::<~int>(expected.clone());\n-    debug!(*actual);\n+    info!(*actual);\n     assert_eq!(*expected, *actual);\n }"}, {"sha": "8d31c3d2481b314dfbfe37a484610f0e7eb911fc", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -21,8 +21,8 @@ fn f<T:Copy>(t: T) -> Pair<T> {\n \n pub fn main() {\n     let b = f::<int>(10);\n-    debug!(b.a);\n-    debug!(b.b);\n+    info!(b.a);\n+    info!(b.b);\n     assert_eq!(b.a, 10);\n     assert_eq!(b.b, 10);\n }"}, {"sha": "97905449fbef0980f950bc917a12302405d478ea", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,4 +12,4 @@\n \n fn f<T>(x: @T) -> @T { return x; }\n \n-pub fn main() { let x = f(@3); debug!(*x); }\n+pub fn main() { let x = f(@3); info!(*x); }"}, {"sha": "bf4729a058944cf3707ddb2099b7631449f2b4ac", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,4 +11,4 @@\n \n fn f<T:Copy>(x: ~T) -> ~T { return x; }\n \n-pub fn main() { let x = f(~3); debug!(*x); }\n+pub fn main() { let x = f(~3); info!(*x); }"}, {"sha": "e5e6beb8c706e1c9df62ed337246a0177a382273", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -24,14 +24,14 @@ pub fn main() {\n     let p: Triple = Triple {x: 65, y: 66, z: 67};\n     let mut q: Triple = Triple {x: 68, y: 69, z: 70};\n     y = id::<int>(x);\n-    debug!(y);\n+    info!(y);\n     assert_eq!(x, y);\n     b = id::<char>(a);\n-    debug!(b);\n+    info!(b);\n     assert_eq!(a, b);\n     q = id::<Triple>(p);\n     x = p.z;\n     y = q.z;\n-    debug!(y);\n+    info!(y);\n     assert_eq!(x, y);\n }"}, {"sha": "55b527989de53b06ab798e5424fa63dc18b1a031", "filename": "src/test/run-pass/generic-tag-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@ enum foo<T> { arm(T), }\n \n fn altfoo<T>(f: foo<T>) {\n     let mut hit = false;\n-    match f { arm::<T>(x) => { debug!(\"in arm\"); hit = true; } }\n+    match f { arm::<T>(x) => { info!(\"in arm\"); hit = true; } }\n     assert!((hit));\n }\n "}, {"sha": "d132eb5d5a96d83a254523d3c6c59fb8ca9a2548", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -18,12 +18,12 @@ struct Pair { x: int, y: int }\n \n pub fn main() {\n     let nop: noption<int> = some::<int>(5);\n-    match nop { some::<int>(n) => { debug!(n); assert!((n == 5)); } }\n+    match nop { some::<int>(n) => { info!(n); assert!((n == 5)); } }\n     let nop2: noption<Pair> = some(Pair{x: 17, y: 42});\n     match nop2 {\n       some(t) => {\n-        debug!(t.x);\n-        debug!(t.y);\n+        info!(t.x);\n+        info!(t.y);\n         assert_eq!(t.x, 17);\n         assert_eq!(t.y, 42);\n       }"}, {"sha": "82c8a3e85c68922afb538afc1c5aa801e82738b3", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,7 +12,7 @@\n \n fn mk() -> int { return 1; }\n \n-fn chk(a: int) { debug!(a); assert!((a == 1)); }\n+fn chk(a: int) { info!(a); assert!((a == 1)); }\n \n fn apply<T>(produce: extern fn() -> T,\n             consume: extern fn(T)) {"}, {"sha": "d09996cc2dae52a1e49d8d60014c343c7cad6e9c", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,7 +11,7 @@\n fn get_third<T:Copy>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n \n pub fn main() {\n-    debug!(get_third((1, 2, 3)));\n+    info!(get_third((1, 2, 3)));\n     assert_eq!(get_third((1, 2, 3)), 3);\n     assert_eq!(get_third((5u8, 6u8, 7u8)), 7u8);\n }"}, {"sha": "125ea295e65aaf893ee26e4b052d20daae1e6b9b", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,5 +12,5 @@\n \n pub fn main() {\n     let i: int = if false { fail!() } else { 5 };\n-    debug!(i);\n+    info!(i);\n }"}, {"sha": "3fb45f82f57dcfe4a984ac62db377698f3bb6f8c", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,7 +16,7 @@ fn even(x: uint) -> bool {\n \n fn foo(x: uint) {\n     if even(x) {\n-        debug!(x);\n+        info!(x);\n     } else {\n         fail!();\n     }"}, {"sha": "378bc25eaf6ad29ccd3bfba1c05864b42e2c606f", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,10 +14,10 @@ use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;\n \n mod module_of_many_things {\n-    pub fn f1() { debug!(\"f1\"); }\n-    pub fn f2() { debug!(\"f2\"); }\n-    fn f3() { debug!(\"f3\"); }\n-    pub fn f4() { debug!(\"f4\"); }\n+    pub fn f1() { info!(\"f1\"); }\n+    pub fn f2() { info!(\"f2\"); }\n+    fn f3() { info!(\"f3\"); }\n+    pub fn f4() { info!(\"f4\"); }\n }\n \n mod dug {\n@@ -26,8 +26,8 @@ mod dug {\n             pub mod and {\n                 pub mod too {\n                     pub mod deep {\n-                        pub fn nameless_fear() { debug!(\"Boo!\"); }\n-                        pub fn also_redstone() { debug!(\"Whatever.\"); }\n+                        pub fn nameless_fear() { info!(\"Boo!\"); }\n+                        pub fn also_redstone() { info!(\"Whatever.\"); }\n                     }\n                 }\n             }"}, {"sha": "dcbe038c65af4ac97792b8486f9cd0e521f6c310", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n mod foo {\n-    pub fn x(y: int) { debug!(y); }\n+    pub fn x(y: int) { info!(y); }\n }\n \n mod bar {"}, {"sha": "9cda55f508408cf2d67d409fdbfed4899d6472c4", "filename": "src/test/run-pass/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@\n use zed::bar;\n \n mod zed {\n-    pub fn bar() { debug!(\"bar\"); }\n+    pub fn bar() { info!(\"bar\"); }\n }\n \n pub fn main() { bar(); }"}, {"sha": "8e53affd2dd3601df62348434040bd88ecc7a5d2", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,7 +16,7 @@ use baz::zed::bar;\n \n mod baz {\n     pub mod zed {\n-        pub fn bar() { debug!(\"bar2\"); }\n+        pub fn bar() { info!(\"bar2\"); }\n     }\n }\n "}, {"sha": "d52877fa11db9ae86bc0ca749dcc6a34bff5216d", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@\n use zed::bar;\n \n mod zed {\n-    pub fn bar() { debug!(\"bar\"); }\n+    pub fn bar() { info!(\"bar\"); }\n }\n \n pub fn main() { let zed = 42; bar(); }"}, {"sha": "e9539b290ae1d1ab8c491c9b425ebfdb33f9842f", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@ use foo::bar;\n mod foo {\n     pub use foo::zed::bar;\n     pub mod zed {\n-        pub fn bar() { debug!(\"foo\"); }\n+        pub fn bar() { info!(\"foo\"); }\n     }\n }\n "}, {"sha": "296b0c605d625a65c7d5924168d9026ea37990af", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@ use foo::zed;\n use bar::baz;\n mod foo {\n     pub mod zed {\n-        pub fn baz() { debug!(\"baz\"); }\n+        pub fn baz() { info!(\"baz\"); }\n     }\n }\n mod bar {"}, {"sha": "969d2b176cfb2d95f8379bdf7cf01ecf87d692de", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@ use foo::zed;\n use bar::baz;\n mod foo {\n     pub mod zed {\n-        pub fn baz() { debug!(\"baz\"); }\n+        pub fn baz() { info!(\"baz\"); }\n     }\n }\n mod bar {"}, {"sha": "849522ab6e5998352677eab0443236b55209abc6", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,7 +15,7 @@ use foo::x;\n use z = foo::x;\n \n mod foo {\n-    pub fn x(y: int) { debug!(y); }\n+    pub fn x(y: int) { info!(y); }\n }\n \n pub fn main() { x(10); z(10); }"}, {"sha": "1e53dd849fc8fc607e0c3eda04d258eb526832f3", "filename": "src/test/run-pass/inner-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Finner-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Finner-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-module.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@\n // -*- rust -*-\n mod inner {\n     pub mod inner2 {\n-        pub fn hello() { debug!(\"hello, modular world\"); }\n+        pub fn hello() { info!(\"hello, modular world\"); }\n     }\n     pub fn hello() { inner2::hello(); }\n }"}, {"sha": "1915e8ac800a76e9f9a2a9dea7aed04418bfa49d", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -20,11 +20,11 @@ pub fn main() {\n     assert_eq!(v[3i8], 3);\n     assert_eq!(v[3u32], 3);\n     assert_eq!(v[3i32], 3);\n-    debug!(v[3u8]);\n+    info!(v[3u8]);\n     assert_eq!(s[3u], 'd' as u8);\n     assert_eq!(s[3u8], 'd' as u8);\n     assert_eq!(s[3i8], 'd' as u8);\n     assert_eq!(s[3u32], 'd' as u8);\n     assert_eq!(s[3i32], 'd' as u8);\n-    debug!(s[3u8]);\n+    info!(s[3u8]);\n }"}, {"sha": "ef1349c23445285561df149a0812c2613e2527ef", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let a = A { x: 0 };\n \n     let A { x: ref x } = a;\n-    debug!(\"%?\", x)\n+    info!(\"%?\", x)\n }"}, {"sha": "4b1d274c40df9af68bc439843479be239b3b907d", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -18,7 +18,7 @@ fn main() {\n \n     match a {\n         A { x : ref x } => {\n-            debug!(\"%?\", x)\n+            info!(\"%?\", x)\n         }\n     }\n }"}, {"sha": "66ad233866afa26c41cc053ac35663185fb5f83f", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -10,7 +10,7 @@\n \n fn test_stack_assign() {\n     let s: ~str = ~\"a\";\n-    debug!(s.clone());\n+    info!(s.clone());\n     let t: ~str = ~\"a\";\n     assert!(s == t);\n     let u: ~str = ~\"b\";\n@@ -27,7 +27,7 @@ fn test_heap_assign() {\n     assert!((s != u));\n }\n \n-fn test_heap_log() { let s = ~\"a big ol' string\"; debug!(s); }\n+fn test_heap_log() { let s = ~\"a big ol' string\"; info!(s); }\n \n fn test_stack_add() {\n     assert_eq!(~\"a\" + ~\"b\", ~\"ab\");\n@@ -49,7 +49,7 @@ fn test_append() {\n \n     let mut s = ~\"a\";\n     s.push_str(~\"b\");\n-    debug!(s.clone());\n+    info!(s.clone());\n     assert_eq!(s, ~\"ab\");\n \n     let mut s = ~\"c\";"}, {"sha": "51499e85590e5a58a29aaa7ec07b464cee4c01c3", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,5 +19,5 @@ fn range(a: int, b: int, it: &fn(int)) {\n pub fn main() {\n     let mut sum: int = 0;\n     range(0, 100, |x| sum += x );\n-    debug!(sum);\n+    info!(sum);\n }"}, {"sha": "6dc1063aed8c2b9a3e35c90235ba0580eedb3f14", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let x = 1 == 2 || 3 == 3;\n     assert!((x));\n     let mut y: int = 10;\n-    debug!(x || incr(&mut y));\n+    info!(x || incr(&mut y));\n     assert_eq!(y, 10);\n     if true && x { assert!((true)); } else { assert!((false)); }\n }"}, {"sha": "33cccacaf90909434998ae3c60d6210c2624bd01", "filename": "src/test/run-pass/lazy-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Flazy-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Flazy-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-init.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -10,6 +10,6 @@\n \n \n \n-fn foo(x: int) { debug!(x); }\n+fn foo(x: int) { info!(x); }\n \n pub fn main() { let mut x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }"}, {"sha": "95d5483a72ade94155b0139614f8bb09ea780f02", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,8 +11,8 @@\n pub fn main() {\n     let x = ~[1, 2, 3];\n     let mut y = 0;\n-    for x.iter().advance |i| { debug!(*i); y += *i; }\n-    debug!(y);\n+    for x.iter().advance |i| { info!(*i); y += *i; }\n+    info!(y);\n     assert_eq!(y, 6);\n     let s = ~\"hello there\";\n     let mut i: int = 0;\n@@ -25,8 +25,8 @@ pub fn main() {\n         // ...\n \n         i += 1;\n-        debug!(i);\n-        debug!(c);\n+        info!(i);\n+        info!(c);\n     }\n     assert_eq!(i, 11);\n }"}, {"sha": "b539429b07971eb4b910774b1d3874671ba880de", "filename": "src/test/run-pass/liveness-loop-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-loop-break.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@ fn test() {\n         v = 3;\n         break;\n     }\n-    debug!(\"%d\", v);\n+    info!(\"%d\", v);\n }\n \n pub fn main() {"}, {"sha": "08ff87df1b97baf3bc3710f274bbf48948967193", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,7 +13,7 @@ enum Numbers {\n }\n \n pub fn main() {\n-    debug!(1);\n+    info!(1);\n     info!(2.0);\n     warn!(Three);\n     error!(~[4]);"}, {"sha": "29087be8af6e950c09a0755b11971d59fb6bc8a6", "filename": "src/test/run-pass/match-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-bot.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,5 +12,5 @@\n pub fn main() {\n     let i: int =\n         match Some::<int>(3) { None::<int> => { fail!() } Some::<int>(_) => { 5 } };\n-    debug!(\"%?\", i);\n+    info!(\"%?\", i);\n }"}, {"sha": "0f01985f274ad25f37f7ed61021f553a866207b4", "filename": "src/test/run-pass/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-join.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -28,4 +28,4 @@ fn foo<T>(y: Option<T>) {\n     return;\n }\n \n-pub fn main() { debug!(\"hello\"); foo::<int>(Some::<int>(5)); }\n+pub fn main() { info!(\"hello\"); foo::<int>(Some::<int>(5)); }"}, {"sha": "b8fa09ca63f039dd8f534585f83fada18c70231f", "filename": "src/test/run-pass/match-pattern-drop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-drop.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,20 +14,20 @@\n enum t { make_t(@int), clam, }\n \n fn foo(s: @int) {\n-    debug!(::std::sys::refcount(s));\n+    info!(::std::sys::refcount(s));\n     let count = ::std::sys::refcount(s);\n     let x: t = make_t(s); // ref up\n     assert_eq!(::std::sys::refcount(s), count + 1u);\n-    debug!(::std::sys::refcount(s));\n+    info!(::std::sys::refcount(s));\n \n     match x {\n       make_t(y) => {\n-        debug!(\"%?\", y); // ref up then down\n+        info!(\"%?\", y); // ref up then down\n \n       }\n-      _ => { debug!(\"?\"); fail!(); }\n+      _ => { info!(\"?\"); fail!(); }\n     }\n-    debug!(::std::sys::refcount(s));\n+    info!(::std::sys::refcount(s));\n     assert_eq!(::std::sys::refcount(s), count + 1u);\n     let _ = ::std::sys::refcount(s); // don't get bitten by last-use.\n }\n@@ -39,7 +39,7 @@ pub fn main() {\n \n     foo(s); // ref up then down\n \n-    debug!(\"%u\", ::std::sys::refcount(s));\n+    info!(\"%u\", ::std::sys::refcount(s));\n     let count2 = ::std::sys::refcount(s);\n     assert_eq!(count, count2);\n }"}, {"sha": "84e9012be4e24a13221a496a2d7232694fb601d6", "filename": "src/test/run-pass/match-pattern-lit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-lit.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,8 +12,8 @@\n \n fn altlit(f: int) -> int {\n     match f {\n-      10 => { debug!(\"case 10\"); return 20; }\n-      11 => { debug!(\"case 11\"); return 22; }\n+      10 => { info!(\"case 10\"); return 20; }\n+      11 => { info!(\"case 11\"); return 22; }\n       _  => fail!(\"the impossible happened\")\n     }\n }"}, {"sha": "9d62bc57ace926de9e1de630a4fc2f33f8bb1310", "filename": "src/test/run-pass/match-unique-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n     match ~100 {\n       ~x => {\n-        debug!(\"%?\", x);\n+        info!(\"%?\", x);\n         assert_eq!(x, 100);\n       }\n     }"}, {"sha": "da96e14695246d147fc51160786a69487cf19ce7", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -23,6 +23,6 @@ pub fn main() {\n     grow(&mut v);\n     grow(&mut v);\n     let len = v.len();\n-    debug!(len);\n+    info!(len);\n     assert_eq!(len, 3 as uint);\n }"}, {"sha": "181ec238b0e714eb78164196a375a809784ba44e", "filename": "src/test/run-pass/nested-matchs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-matchs.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,9 +16,9 @@ fn foo() {\n       Some::<int>(x) => {\n         let mut bar;\n         match None::<int> { None::<int> => { bar = 5; } _ => { baz(); } }\n-        debug!(bar);\n+        info!(bar);\n       }\n-      None::<int> => { debug!(\"hello\"); }\n+      None::<int> => { info!(\"hello\"); }\n     }\n }\n "}, {"sha": "f384740f5f28fb96afae0245e8b395746b946496", "filename": "src/test/run-pass/opeq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fopeq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fopeq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopeq.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,15 +15,15 @@\n pub fn main() {\n     let mut x: int = 1;\n     x *= 2;\n-    debug!(x);\n+    info!(x);\n     assert_eq!(x, 2);\n     x += 3;\n-    debug!(x);\n+    info!(x);\n     assert_eq!(x, 5);\n     x *= x;\n-    debug!(x);\n+    info!(x);\n     assert_eq!(x, 25);\n     x /= 5;\n-    debug!(x);\n+    info!(x);\n     assert_eq!(x, 5);\n }"}, {"sha": "a41b79115230ae6220f5b934a2484ef79be0180f", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     while b <= 32u {\n         0u << b;\n         b <<= 1u;\n-        debug!(b);\n+        info!(b);\n     }\n }"}, {"sha": "751ba78b2820fcfd9c3add03a545bf4ceea6711c", "filename": "src/test/run-pass/paren-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fparen-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fparen-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparen-free.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,5 +11,5 @@\n pub fn main() {\n     let x = true;\n     if x { let mut i = 10; while i > 0 { i -= 1; } }\n-    match x { true => { debug!(\"right\"); } false => { debug!(\"wrong\"); } }\n+    match x { true => { info!(\"right\"); } false => { info!(\"wrong\"); } }\n }"}, {"sha": "4a2ff74d064de9612818d46e2c20dd2c63a0909d", "filename": "src/test/run-pass/parse-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-fail.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,6 +12,6 @@\n \n \n // -*- rust -*-\n-fn dont_call_me() { fail!(); debug!(1); }\n+fn dont_call_me() { fail!(); info!(1); }\n \n pub fn main() { }"}, {"sha": "716725899ab1c36b1cfb89994641cd0ad0f57d7b", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn magic(x: A) { debug!(x); }\n-fn magic2(x: @int) { debug!(x); }\n+fn magic(x: A) { info!(x); }\n+fn magic2(x: @int) { info!(x); }\n \n struct A { a: @int }\n "}, {"sha": "cb126017247bc4d2979ccdb785d9ccbc1f729ad0", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -48,11 +48,11 @@ fn test(+foo: foo::client::foo, +bar: bar::client::bar) {\n \n         bar => {\n             bar::do_bar(x) -> _next {\n-                debug!(\"%?\", x)\n+                info!(\"%?\", x)\n             },\n \n             do_baz(b) -> _next {\n-                if b { debug!(\"true\") } else { debug!(\"false\") }\n+                if b { info!(\"true\") } else { info!(\"false\") }\n             }\n         }\n     )"}, {"sha": "8569cd30cf5133592d1a2812e07c31a018aafeaa", "filename": "src/test/run-pass/platform_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplatform_thread.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n \n fn run(i: int) {\n \n-    debug!(i);\n+    info!(i);\n \n     if i == 0 {\n         return;"}, {"sha": "f34cc268a0c255ea2632b93c9456867cf49a2bc7", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -18,24 +18,24 @@ use std::comm;\n use extra::comm;\n \n fn starve_main(alive: Port<int>) {\n-    debug!(\"signalling main\");\n+    info!(\"signalling main\");\n     alive.recv();\n-    debug!(\"starving main\");\n+    info!(\"starving main\");\n     let mut i: int = 0;\n     loop { i += 1; }\n }\n \n pub fn main() {\n     let (port, chan) = stream();\n \n-    debug!(\"main started\");\n+    info!(\"main started\");\n     do spawn {\n         starve_main(port);\n     };\n     let mut i: int = 0;\n-    debug!(\"main waiting for alive signal\");\n+    info!(\"main waiting for alive signal\");\n     chan.send(i);\n-    debug!(\"main got alive signal\");\n-    while i < 50 { debug!(\"main iterated\"); i += 1; }\n-    debug!(\"main completed\");\n+    info!(\"main got alive signal\");\n+    while i < 50 { info!(\"main iterated\"); i += 1; }\n+    info!(\"main completed\");\n }"}, {"sha": "c16b10da5de403f2fe5b22527a23d5350772b781", "filename": "src/test/run-pass/pure-fmt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-fmt.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Testing that calling fmt! (via debug!) doesn't complain about impure borrows\n+// Testing that calling fmt! (via info!) doesn't complain about impure borrows\n \n struct Big { b: @~str, c: uint, d: int, e: char,\n             f: float, g: bool }\n@@ -22,12 +22,12 @@ fn foo() {\n         f: 0.0,\n         g: true\n     };\n-    debug!(\"test %?\", a.b);\n-    debug!(\"test %u\", a.c);\n-    debug!(\"test %i\", a.d);\n-    debug!(\"test %c\", a.e);\n-    debug!(\"test %f\", a.f);\n-    debug!(\"test %b\", a.g);\n+    info!(\"test %?\", a.b);\n+    info!(\"test %u\", a.c);\n+    info!(\"test %i\", a.d);\n+    info!(\"test %c\", a.e);\n+    info!(\"test %f\", a.f);\n+    info!(\"test %b\", a.g);\n }\n \n pub fn main() {"}, {"sha": "28396119596b0d94fbe1ee8cf2a5901019fda8e3", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -26,21 +26,21 @@ pub fn main() {\n \n     let x = @6;\n     let y = x.get();\n-    debug!(\"y=%d\", y);\n+    info!(\"y=%d\", y);\n     assert_eq!(y, 6);\n \n     let x = ~6;\n     let y = x.get();\n-    debug!(\"y=%d\", y);\n+    info!(\"y=%d\", y);\n     assert_eq!(y, 6);\n \n     let x = ~6;\n     let y = x.get();\n-    debug!(\"y=%d\", y);\n+    info!(\"y=%d\", y);\n     assert_eq!(y, 6);\n \n     let x = &6;\n     let y = x.get();\n-    debug!(\"y=%d\", y);\n+    info!(\"y=%d\", y);\n     assert_eq!(y, 6);\n }"}, {"sha": "5ea94020a22f063223bf1871d7da19ec700d1721", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -26,16 +26,16 @@ fn call_sum(x: &[int]) -> int { x.sum_() }\n pub fn main() {\n     let x = ~[1, 2, 3];\n     let y = call_sum(x);\n-    debug!(\"y==%d\", y);\n+    info!(\"y==%d\", y);\n     assert_eq!(y, 6);\n \n     let mut x = ~[1, 2, 3];\n     let y = x.sum_();\n-    debug!(\"y==%d\", y);\n+    info!(\"y==%d\", y);\n     assert_eq!(y, 6);\n \n     let x = ~[1, 2, 3];\n     let y = x.sum_();\n-    debug!(\"y==%d\", y);\n+    info!(\"y==%d\", y);\n     assert_eq!(y, 6);\n }"}, {"sha": "a3c9b2adf7a54442ea7b434521af68724c68988a", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -53,9 +53,9 @@ pub fn main() {\n         // Send it through the shape code\n         let y = fmt!(\"%?\", x);\n \n-        debug!(\"align inner = %?\", rusti::min_align_of::<Inner>());\n-        debug!(\"size outer = %?\", sys::size_of::<Outer>());\n-        debug!(\"y = %s\", y);\n+        info!(\"align inner = %?\", rusti::min_align_of::<Inner>());\n+        info!(\"size outer = %?\", sys::size_of::<Outer>());\n+        info!(\"y = %s\", y);\n \n         // per clang/gcc the alignment of `inner` is 4 on x86.\n         assert_eq!(rusti::min_align_of::<Inner>(), m::align());"}, {"sha": "13f26dff2acfe144c7b68493797d4009c7185007", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -75,9 +75,9 @@ pub fn main() {\n         // Send it through the shape code\n         let y = fmt!(\"%?\", x);\n \n-        debug!(\"align inner = %?\", rusti::min_align_of::<Inner>());\n-        debug!(\"size outer = %?\", sys::size_of::<Outer>());\n-        debug!(\"y = %s\", y);\n+        info!(\"align inner = %?\", rusti::min_align_of::<Inner>());\n+        info!(\"size outer = %?\", sys::size_of::<Outer>());\n+        info!(\"y = %s\", y);\n \n         // per clang/gcc the alignment of `Inner` is 4 on x86.\n         assert_eq!(rusti::min_align_of::<Inner>(), m::m::align());"}, {"sha": "01a31ebf3337bf881d2b3b44bc7364c4dcc68d78", "filename": "src/test/run-pass/rec-auto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frec-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Frec-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-auto.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,6 +19,6 @@ struct X { foo: ~str, bar: ~str }\n \n pub fn main() {\n     let x = X {foo: ~\"hello\", bar: ~\"world\"};\n-    debug!(x.foo.clone());\n-    debug!(x.bar.clone());\n+    info!(x.foo.clone());\n+    info!(x.bar.clone());\n }"}, {"sha": "08a09c59facca26ccc970b4f7895a7cd2b2149cb", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -15,6 +15,6 @@ fn foo(x: &uint) -> uint {\n pub fn main() {\n     let p = @22u;\n     let r = foo(p);\n-    debug!(\"r=%u\", r);\n+    info!(\"r=%u\", r);\n     assert_eq!(r, 22u);\n }"}, {"sha": "2a2fbcfe61f3fa046a8cf135cfa71b21efe7b178", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -22,6 +22,6 @@ impl<'self> get_chowder<'self> for Clam<'self> {\n \n pub fn main() {\n     let clam = Clam { chowder: &3 };\n-    debug!(*clam.get_chowder());\n+    info!(*clam.get_chowder());\n     clam.get_chowder();\n }"}, {"sha": "c35ec383665add16f2414de7a5cb5f7ad84c783d", "filename": "src/test/run-pass/regions-self-in-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n     match y {\n         int_wrapper_ctor(zz) => { z = zz; }\n     }\n-    debug!(*z);\n+    info!(*z);\n }"}, {"sha": "318c8a8670e016c6b31cbea6a3f310e3a07b9d7f", "filename": "src/test/run-pass/regions-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-simple.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,5 +12,5 @@ pub fn main() {\n     let mut x: int = 3;\n     let y: &mut int = &mut x;\n     *y = 5;\n-    debug!(*y);\n+    info!(*y);\n }"}, {"sha": "a2eb459ce206ed575f8d535be41f65e2d7ffd49e", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -21,6 +21,6 @@ fn call_static_closure(cl: closure_box<'static>) {\n }\n \n pub fn main() {\n-    let cl_box = box_it(|| debug!(\"Hello, world!\"));\n+    let cl_box = box_it(|| info!(\"Hello, world!\"));\n     call_static_closure(cl_box);\n }"}, {"sha": "a9c4a114054fda816cb235afa1917a43816e0a35", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n         let a = r(i);\n         let b = (a, 10);\n         let (c, _d) = b;\n-        debug!(c);\n+        info!(c);\n     }\n     assert_eq!(*i, 1);\n }"}, {"sha": "7858417a3ca22afa36a7331080c7a7642c72a4eb", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,7 +19,7 @@ struct r {\n impl Drop for r {\n     fn drop(&self) {\n         unsafe {\n-            debug!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n+            info!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n               cast::transmute::<*r, uint>(self),\n               cast::transmute::<**int, uint>(&(self.v)),\n               cast::transmute::<*int, uint>(self.v));\n@@ -56,24 +56,24 @@ pub fn main() {\n             next: None,\n               r: {\n               let rs = r(i1p);\n-              debug!(\"r = %x\", cast::transmute::<*r, uint>(&rs));\n+              info!(\"r = %x\", cast::transmute::<*r, uint>(&rs));\n               rs }\n         });\n \n-        debug!(\"x1 = %x, x1.r = %x\",\n+        info!(\"x1 = %x, x1.r = %x\",\n                cast::transmute::<@mut t, uint>(x1),\n                cast::transmute::<*r, uint>(&x1.r));\n \n         let mut x2 = @mut t(Node{\n             next: None,\n               r: {\n               let rs = r(i2p);\n-              debug!(\"r2 = %x\", cast::transmute::<*r, uint>(&rs));\n+              info!(\"r2 = %x\", cast::transmute::<*r, uint>(&rs));\n               rs\n                 }\n         });\n \n-        debug!(\"x2 = %x, x2.r = %x\",\n+        info!(\"x2 = %x, x2.r = %x\",\n                cast::transmute::<@mut t, uint>(x2),\n                cast::transmute::<*r, uint>(&(x2.r)));\n "}, {"sha": "b74e81bb612d0846c974721eee29de6dddc75e1a", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -22,12 +22,12 @@ fn make_generic_record<A:Copy,B:Copy>(a: A, b: B) -> Pair<A,B> {\n \n fn test05_start(f: &~fn(v: float, v: ~str) -> Pair<float, ~str>) {\n     let p = (*f)(22.22f, ~\"Hi\");\n-    debug!(copy p);\n+    info!(copy p);\n     assert!(p.a == 22.22f);\n     assert!(p.b == ~\"Hi\");\n \n     let q = (*f)(44.44f, ~\"Ho\");\n-    debug!(copy q);\n+    info!(copy q);\n     assert!(q.a == 44.44f);\n     assert!(q.b == ~\"Ho\");\n }"}, {"sha": "7486005f7e56dc446606271cf021c445b0b6fc4d", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -17,7 +17,7 @@ fn foo(c: ~[int]) {\n     match none::<int> {\n         some::<int>(_) => {\n             for c.iter().advance |i| {\n-                debug!(a);\n+                info!(a);\n                 let a = 17;\n                 b.push(a);\n             }"}, {"sha": "efdf7f2792c96c0f428a0e4eb4ed5e46708cf6ee", "filename": "src/test/run-pass/simple-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-infer.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { let mut n; n = 1; debug!(n); }\n+pub fn main() { let mut n; n = 1; info!(n); }"}, {"sha": "d8b7c99d000aa30e52f15ad5514eb25ac8afda6b", "filename": "src/test/run-pass/simple-match-generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,5 +14,5 @@ enum opt<T> { none, }\n \n pub fn main() {\n     let x = none::<int>;\n-    match x { none::<int> => { debug!(\"hello world\"); } }\n+    match x { none::<int> => { info!(\"hello world\"); } }\n }"}, {"sha": "973c38438948a17fb53cf691c3243c444876d91f", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,8 +16,8 @@ enum clam<T> { a(T, int), b, }\n \n fn uhoh<T>(v: ~[clam<T>]) {\n     match v[1] {\n-      a::<T>(ref t, ref u) => { debug!(\"incorrect\"); debug!(u); fail!(); }\n-      b::<T> => { debug!(\"correct\"); }\n+      a::<T>(ref t, ref u) => { info!(\"incorrect\"); info!(u); fail!(); }\n+      b::<T> => { info!(\"correct\"); }\n     }\n }\n "}, {"sha": "ca0c066043de0edc59f6c62bcefd2aae1cf9dca1", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,14 +12,14 @@\n use std::task;\n \n fn x(s: ~str, n: int) {\n-    debug!(s);\n-    debug!(n);\n+    info!(s);\n+    info!(n);\n }\n \n pub fn main() {\n     task::spawn(|| x(~\"hello from first spawned fn\", 65) );\n     task::spawn(|| x(~\"hello from second spawned fn\", 66) );\n     task::spawn(|| x(~\"hello from third spawned fn\", 67) );\n     let mut i: int = 30;\n-    while i > 0 { i = i - 1; debug!(\"parent sleeping\"); task::yield(); }\n+    while i > 0 { i = i - 1; info!(\"parent sleeping\"); task::yield(); }\n }"}, {"sha": "5ac3c0530af5a4af639b3a5c1e011b7599ad7ad5", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,7 +16,7 @@ extern mod extra;\n fn test1() {\n     let mut s: ~str = ~\"hello\";\n     s.push_str(\"world\");\n-    debug!(s.clone());\n+    info!(s.clone());\n     assert_eq!(s[9], 'd' as u8);\n }\n \n@@ -26,8 +26,8 @@ fn test2() {\n     let ff: ~str = ~\"abc\";\n     let a: ~str = ff + ~\"ABC\" + ff;\n     let b: ~str = ~\"ABC\" + ff + ~\"ABC\";\n-    debug!(a.clone());\n-    debug!(b.clone());\n+    info!(a.clone());\n+    info!(b.clone());\n     assert_eq!(a, ~\"abcABCabc\");\n     assert_eq!(b, ~\"ABCabcABC\");\n }"}, {"sha": "89804a6e5629e7290aec5203001997a2b0f8e8d6", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,6 +16,6 @@ pub fn main() {\n     let a: ~str = ~\"hello\";\n     let b: ~str = ~\"world\";\n     let s: ~str = a + b;\n-    debug!(s.clone());\n+    info!(s.clone());\n     assert_eq!(s[9], 'd' as u8);\n }"}, {"sha": "68dcc0b9822943ba46c594a856e469679b5ab1a5", "filename": "src/test/run-pass/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-idx.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n     let s = ~\"hello\";\n     let c: u8 = s[4];\n-    debug!(c);\n+    info!(c);\n     assert_eq!(c, 0x6f as u8);\n }"}, {"sha": "edadf282163b66bad533cf285b679c2cda8317db", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 232, "deletions": 232, "changes": 464, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,251 +12,251 @@ use std::libc;\n \n pub fn main() {\n   let f = 1 as *libc::FILE;\n-  debug!(f as int);\n-  debug!(f as uint);\n-  debug!(f as i8);\n-  debug!(f as i16);\n-  debug!(f as i32);\n-  debug!(f as i64);\n-  debug!(f as u8);\n-  debug!(f as u16);\n-  debug!(f as u32);\n-  debug!(f as u64);\n+  info!(f as int);\n+  info!(f as uint);\n+  info!(f as i8);\n+  info!(f as i16);\n+  info!(f as i32);\n+  info!(f as i64);\n+  info!(f as u8);\n+  info!(f as u16);\n+  info!(f as u32);\n+  info!(f as u64);\n \n-  debug!(1 as int);\n-  debug!(1 as uint);\n-  debug!(1 as float);\n-  debug!(1 as bool);\n-  debug!(1 as *libc::FILE);\n-  debug!(1 as i8);\n-  debug!(1 as i16);\n-  debug!(1 as i32);\n-  debug!(1 as i64);\n-  debug!(1 as u8);\n-  debug!(1 as u16);\n-  debug!(1 as u32);\n-  debug!(1 as u64);\n-  debug!(1 as f32);\n-  debug!(1 as f64);\n+  info!(1 as int);\n+  info!(1 as uint);\n+  info!(1 as float);\n+  info!(1 as bool);\n+  info!(1 as *libc::FILE);\n+  info!(1 as i8);\n+  info!(1 as i16);\n+  info!(1 as i32);\n+  info!(1 as i64);\n+  info!(1 as u8);\n+  info!(1 as u16);\n+  info!(1 as u32);\n+  info!(1 as u64);\n+  info!(1 as f32);\n+  info!(1 as f64);\n \n-  debug!(1u as int);\n-  debug!(1u as uint);\n-  debug!(1u as float);\n-  debug!(1u as bool);\n-  debug!(1u as *libc::FILE);\n-  debug!(1u as i8);\n-  debug!(1u as i16);\n-  debug!(1u as i32);\n-  debug!(1u as i64);\n-  debug!(1u as u8);\n-  debug!(1u as u16);\n-  debug!(1u as u32);\n-  debug!(1u as u64);\n-  debug!(1u as f32);\n-  debug!(1u as f64);\n+  info!(1u as int);\n+  info!(1u as uint);\n+  info!(1u as float);\n+  info!(1u as bool);\n+  info!(1u as *libc::FILE);\n+  info!(1u as i8);\n+  info!(1u as i16);\n+  info!(1u as i32);\n+  info!(1u as i64);\n+  info!(1u as u8);\n+  info!(1u as u16);\n+  info!(1u as u32);\n+  info!(1u as u64);\n+  info!(1u as f32);\n+  info!(1u as f64);\n \n-  debug!(1i8 as int);\n-  debug!(1i8 as uint);\n-  debug!(1i8 as float);\n-  debug!(1i8 as bool);\n-  debug!(1i8 as *libc::FILE);\n-  debug!(1i8 as i8);\n-  debug!(1i8 as i16);\n-  debug!(1i8 as i32);\n-  debug!(1i8 as i64);\n-  debug!(1i8 as u8);\n-  debug!(1i8 as u16);\n-  debug!(1i8 as u32);\n-  debug!(1i8 as u64);\n-  debug!(1i8 as f32);\n-  debug!(1i8 as f64);\n+  info!(1i8 as int);\n+  info!(1i8 as uint);\n+  info!(1i8 as float);\n+  info!(1i8 as bool);\n+  info!(1i8 as *libc::FILE);\n+  info!(1i8 as i8);\n+  info!(1i8 as i16);\n+  info!(1i8 as i32);\n+  info!(1i8 as i64);\n+  info!(1i8 as u8);\n+  info!(1i8 as u16);\n+  info!(1i8 as u32);\n+  info!(1i8 as u64);\n+  info!(1i8 as f32);\n+  info!(1i8 as f64);\n \n-  debug!(1u8 as int);\n-  debug!(1u8 as uint);\n-  debug!(1u8 as float);\n-  debug!(1u8 as bool);\n-  debug!(1u8 as *libc::FILE);\n-  debug!(1u8 as i8);\n-  debug!(1u8 as i16);\n-  debug!(1u8 as i32);\n-  debug!(1u8 as i64);\n-  debug!(1u8 as u8);\n-  debug!(1u8 as u16);\n-  debug!(1u8 as u32);\n-  debug!(1u8 as u64);\n-  debug!(1u8 as f32);\n-  debug!(1u8 as f64);\n+  info!(1u8 as int);\n+  info!(1u8 as uint);\n+  info!(1u8 as float);\n+  info!(1u8 as bool);\n+  info!(1u8 as *libc::FILE);\n+  info!(1u8 as i8);\n+  info!(1u8 as i16);\n+  info!(1u8 as i32);\n+  info!(1u8 as i64);\n+  info!(1u8 as u8);\n+  info!(1u8 as u16);\n+  info!(1u8 as u32);\n+  info!(1u8 as u64);\n+  info!(1u8 as f32);\n+  info!(1u8 as f64);\n \n-  debug!(1i16 as int);\n-  debug!(1i16 as uint);\n-  debug!(1i16 as float);\n-  debug!(1i16 as bool);\n-  debug!(1i16 as *libc::FILE);\n-  debug!(1i16 as i8);\n-  debug!(1i16 as i16);\n-  debug!(1i16 as i32);\n-  debug!(1i16 as i64);\n-  debug!(1i16 as u8);\n-  debug!(1i16 as u16);\n-  debug!(1i16 as u32);\n-  debug!(1i16 as u64);\n-  debug!(1i16 as f32);\n-  debug!(1i16 as f64);\n+  info!(1i16 as int);\n+  info!(1i16 as uint);\n+  info!(1i16 as float);\n+  info!(1i16 as bool);\n+  info!(1i16 as *libc::FILE);\n+  info!(1i16 as i8);\n+  info!(1i16 as i16);\n+  info!(1i16 as i32);\n+  info!(1i16 as i64);\n+  info!(1i16 as u8);\n+  info!(1i16 as u16);\n+  info!(1i16 as u32);\n+  info!(1i16 as u64);\n+  info!(1i16 as f32);\n+  info!(1i16 as f64);\n \n-  debug!(1u16 as int);\n-  debug!(1u16 as uint);\n-  debug!(1u16 as float);\n-  debug!(1u16 as bool);\n-  debug!(1u16 as *libc::FILE);\n-  debug!(1u16 as i8);\n-  debug!(1u16 as i16);\n-  debug!(1u16 as i32);\n-  debug!(1u16 as i64);\n-  debug!(1u16 as u8);\n-  debug!(1u16 as u16);\n-  debug!(1u16 as u32);\n-  debug!(1u16 as u64);\n-  debug!(1u16 as f32);\n-  debug!(1u16 as f64);\n+  info!(1u16 as int);\n+  info!(1u16 as uint);\n+  info!(1u16 as float);\n+  info!(1u16 as bool);\n+  info!(1u16 as *libc::FILE);\n+  info!(1u16 as i8);\n+  info!(1u16 as i16);\n+  info!(1u16 as i32);\n+  info!(1u16 as i64);\n+  info!(1u16 as u8);\n+  info!(1u16 as u16);\n+  info!(1u16 as u32);\n+  info!(1u16 as u64);\n+  info!(1u16 as f32);\n+  info!(1u16 as f64);\n \n-  debug!(1i32 as int);\n-  debug!(1i32 as uint);\n-  debug!(1i32 as float);\n-  debug!(1i32 as bool);\n-  debug!(1i32 as *libc::FILE);\n-  debug!(1i32 as i8);\n-  debug!(1i32 as i16);\n-  debug!(1i32 as i32);\n-  debug!(1i32 as i64);\n-  debug!(1i32 as u8);\n-  debug!(1i32 as u16);\n-  debug!(1i32 as u32);\n-  debug!(1i32 as u64);\n-  debug!(1i32 as f32);\n-  debug!(1i32 as f64);\n+  info!(1i32 as int);\n+  info!(1i32 as uint);\n+  info!(1i32 as float);\n+  info!(1i32 as bool);\n+  info!(1i32 as *libc::FILE);\n+  info!(1i32 as i8);\n+  info!(1i32 as i16);\n+  info!(1i32 as i32);\n+  info!(1i32 as i64);\n+  info!(1i32 as u8);\n+  info!(1i32 as u16);\n+  info!(1i32 as u32);\n+  info!(1i32 as u64);\n+  info!(1i32 as f32);\n+  info!(1i32 as f64);\n \n-  debug!(1u32 as int);\n-  debug!(1u32 as uint);\n-  debug!(1u32 as float);\n-  debug!(1u32 as bool);\n-  debug!(1u32 as *libc::FILE);\n-  debug!(1u32 as i8);\n-  debug!(1u32 as i16);\n-  debug!(1u32 as i32);\n-  debug!(1u32 as i64);\n-  debug!(1u32 as u8);\n-  debug!(1u32 as u16);\n-  debug!(1u32 as u32);\n-  debug!(1u32 as u64);\n-  debug!(1u32 as f32);\n-  debug!(1u32 as f64);\n+  info!(1u32 as int);\n+  info!(1u32 as uint);\n+  info!(1u32 as float);\n+  info!(1u32 as bool);\n+  info!(1u32 as *libc::FILE);\n+  info!(1u32 as i8);\n+  info!(1u32 as i16);\n+  info!(1u32 as i32);\n+  info!(1u32 as i64);\n+  info!(1u32 as u8);\n+  info!(1u32 as u16);\n+  info!(1u32 as u32);\n+  info!(1u32 as u64);\n+  info!(1u32 as f32);\n+  info!(1u32 as f64);\n \n-  debug!(1i64 as int);\n-  debug!(1i64 as uint);\n-  debug!(1i64 as float);\n-  debug!(1i64 as bool);\n-  debug!(1i64 as *libc::FILE);\n-  debug!(1i64 as i8);\n-  debug!(1i64 as i16);\n-  debug!(1i64 as i32);\n-  debug!(1i64 as i64);\n-  debug!(1i64 as u8);\n-  debug!(1i64 as u16);\n-  debug!(1i64 as u32);\n-  debug!(1i64 as u64);\n-  debug!(1i64 as f32);\n-  debug!(1i64 as f64);\n+  info!(1i64 as int);\n+  info!(1i64 as uint);\n+  info!(1i64 as float);\n+  info!(1i64 as bool);\n+  info!(1i64 as *libc::FILE);\n+  info!(1i64 as i8);\n+  info!(1i64 as i16);\n+  info!(1i64 as i32);\n+  info!(1i64 as i64);\n+  info!(1i64 as u8);\n+  info!(1i64 as u16);\n+  info!(1i64 as u32);\n+  info!(1i64 as u64);\n+  info!(1i64 as f32);\n+  info!(1i64 as f64);\n \n-  debug!(1u64 as int);\n-  debug!(1u64 as uint);\n-  debug!(1u64 as float);\n-  debug!(1u64 as bool);\n-  debug!(1u64 as *libc::FILE);\n-  debug!(1u64 as i8);\n-  debug!(1u64 as i16);\n-  debug!(1u64 as i32);\n-  debug!(1u64 as i64);\n-  debug!(1u64 as u8);\n-  debug!(1u64 as u16);\n-  debug!(1u64 as u32);\n-  debug!(1u64 as u64);\n-  debug!(1u64 as f32);\n-  debug!(1u64 as f64);\n+  info!(1u64 as int);\n+  info!(1u64 as uint);\n+  info!(1u64 as float);\n+  info!(1u64 as bool);\n+  info!(1u64 as *libc::FILE);\n+  info!(1u64 as i8);\n+  info!(1u64 as i16);\n+  info!(1u64 as i32);\n+  info!(1u64 as i64);\n+  info!(1u64 as u8);\n+  info!(1u64 as u16);\n+  info!(1u64 as u32);\n+  info!(1u64 as u64);\n+  info!(1u64 as f32);\n+  info!(1u64 as f64);\n \n-  debug!(1u64 as int);\n-  debug!(1u64 as uint);\n-  debug!(1u64 as float);\n-  debug!(1u64 as bool);\n-  debug!(1u64 as *libc::FILE);\n-  debug!(1u64 as i8);\n-  debug!(1u64 as i16);\n-  debug!(1u64 as i32);\n-  debug!(1u64 as i64);\n-  debug!(1u64 as u8);\n-  debug!(1u64 as u16);\n-  debug!(1u64 as u32);\n-  debug!(1u64 as u64);\n-  debug!(1u64 as f32);\n-  debug!(1u64 as f64);\n+  info!(1u64 as int);\n+  info!(1u64 as uint);\n+  info!(1u64 as float);\n+  info!(1u64 as bool);\n+  info!(1u64 as *libc::FILE);\n+  info!(1u64 as i8);\n+  info!(1u64 as i16);\n+  info!(1u64 as i32);\n+  info!(1u64 as i64);\n+  info!(1u64 as u8);\n+  info!(1u64 as u16);\n+  info!(1u64 as u32);\n+  info!(1u64 as u64);\n+  info!(1u64 as f32);\n+  info!(1u64 as f64);\n \n-  debug!(true as int);\n-  debug!(true as uint);\n-  debug!(true as float);\n-  debug!(true as bool);\n-  debug!(true as *libc::FILE);\n-  debug!(true as i8);\n-  debug!(true as i16);\n-  debug!(true as i32);\n-  debug!(true as i64);\n-  debug!(true as u8);\n-  debug!(true as u16);\n-  debug!(true as u32);\n-  debug!(true as u64);\n-  debug!(true as f32);\n-  debug!(true as f64);\n+  info!(true as int);\n+  info!(true as uint);\n+  info!(true as float);\n+  info!(true as bool);\n+  info!(true as *libc::FILE);\n+  info!(true as i8);\n+  info!(true as i16);\n+  info!(true as i32);\n+  info!(true as i64);\n+  info!(true as u8);\n+  info!(true as u16);\n+  info!(true as u32);\n+  info!(true as u64);\n+  info!(true as f32);\n+  info!(true as f64);\n \n-  debug!(1. as int);\n-  debug!(1. as uint);\n-  debug!(1. as float);\n-  debug!(1. as bool);\n-  debug!(1. as i8);\n-  debug!(1. as i16);\n-  debug!(1. as i32);\n-  debug!(1. as i64);\n-  debug!(1. as u8);\n-  debug!(1. as u16);\n-  debug!(1. as u32);\n-  debug!(1. as u64);\n-  debug!(1. as f32);\n-  debug!(1. as f64);\n+  info!(1. as int);\n+  info!(1. as uint);\n+  info!(1. as float);\n+  info!(1. as bool);\n+  info!(1. as i8);\n+  info!(1. as i16);\n+  info!(1. as i32);\n+  info!(1. as i64);\n+  info!(1. as u8);\n+  info!(1. as u16);\n+  info!(1. as u32);\n+  info!(1. as u64);\n+  info!(1. as f32);\n+  info!(1. as f64);\n \n-  debug!(1f32 as int);\n-  debug!(1f32 as uint);\n-  debug!(1f32 as float);\n-  debug!(1f32 as bool);\n-  debug!(1f32 as i8);\n-  debug!(1f32 as i16);\n-  debug!(1f32 as i32);\n-  debug!(1f32 as i64);\n-  debug!(1f32 as u8);\n-  debug!(1f32 as u16);\n-  debug!(1f32 as u32);\n-  debug!(1f32 as u64);\n-  debug!(1f32 as f32);\n-  debug!(1f32 as f64);\n+  info!(1f32 as int);\n+  info!(1f32 as uint);\n+  info!(1f32 as float);\n+  info!(1f32 as bool);\n+  info!(1f32 as i8);\n+  info!(1f32 as i16);\n+  info!(1f32 as i32);\n+  info!(1f32 as i64);\n+  info!(1f32 as u8);\n+  info!(1f32 as u16);\n+  info!(1f32 as u32);\n+  info!(1f32 as u64);\n+  info!(1f32 as f32);\n+  info!(1f32 as f64);\n \n-  debug!(1f64 as int);\n-  debug!(1f64 as uint);\n-  debug!(1f64 as float);\n-  debug!(1f64 as bool);\n-  debug!(1f64 as i8);\n-  debug!(1f64 as i16);\n-  debug!(1f64 as i32);\n-  debug!(1f64 as i64);\n-  debug!(1f64 as u8);\n-  debug!(1f64 as u16);\n-  debug!(1f64 as u32);\n-  debug!(1f64 as u64);\n-  debug!(1f64 as f32);\n-  debug!(1f64 as f64);\n+  info!(1f64 as int);\n+  info!(1f64 as uint);\n+  info!(1f64 as float);\n+  info!(1f64 as bool);\n+  info!(1f64 as i8);\n+  info!(1f64 as i16);\n+  info!(1f64 as i32);\n+  info!(1f64 as i64);\n+  info!(1f64 as u8);\n+  info!(1f64 as u16);\n+  info!(1f64 as u32);\n+  info!(1f64 as u64);\n+  info!(1f64 as f32);\n+  info!(1f64 as f64);\n }"}, {"sha": "4dd1dc61c0d00381c4e0f3ecc818ccce0c13b069", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -11,8 +11,8 @@\n extern mod extra;\n \n fn test(actual: ~str, expected: ~str) {\n-    debug!(actual.clone());\n-    debug!(expected.clone());\n+    info!(actual.clone());\n+    info!(expected.clone());\n     assert_eq!(actual, expected);\n }\n "}, {"sha": "f86c134eef247edac0a9e02e526f3d505e531f43", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -20,6 +20,6 @@ struct t_rec {\n pub fn main() {\n     let x = t_rec {c8: 22u8, t: a_tag(44u64)};\n     let y = fmt!(\"%?\", x);\n-    debug!(\"y = %s\", y);\n+    info!(\"y = %s\", y);\n     assert_eq!(y, ~\"{c8: 22, t: a_tag(44)}\");\n }"}, {"sha": "99371bec58bdb8f1796e4c541e3ae797d75fca0c", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -17,13 +17,13 @@ fn checktrue(rs: bool) -> bool { assert!((rs)); return true; }\n pub fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n fn evenk(n: int, k: extern fn(bool) -> bool) -> bool {\n-    debug!(\"evenk\");\n-    debug!(n);\n+    info!(\"evenk\");\n+    info!(n);\n     if n == 0 { return k(true); } else { return oddk(n - 1, k); }\n }\n \n fn oddk(n: int, k: extern fn(bool) -> bool) -> bool {\n-    debug!(\"oddk\");\n-    debug!(n);\n+    info!(\"oddk\");\n+    info!(n);\n     if n == 0 { return k(false); } else { return evenk(n - 1, k); }\n }"}, {"sha": "d202bac7089b1997cc2959d433971478301b64b8", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -12,9 +12,9 @@ use std::task;\n \n pub fn main() { test00(); }\n \n-fn start() { debug!(\"Started / Finished task.\"); }\n+fn start() { info!(\"Started / Finished task.\"); }\n \n fn test00() {\n     task::try(|| start() );\n-    debug!(\"Completing.\");\n+    info!(\"Completing.\");\n }"}, {"sha": "fd2e81d062e8ebe3a011cf4d266c667d10a709da", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -14,7 +14,7 @@ use std::task;\n \n pub fn main() { test00(); }\n \n-fn start(task_number: int) { debug!(\"Started / Finished task.\"); }\n+fn start(task_number: int) { info!(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n@@ -35,5 +35,5 @@ fn test00() {\n     // Try joining tasks that have already finished.\n     result.unwrap().recv();\n \n-    debug!(\"Joined task.\");\n+    info!(\"Joined task.\");\n }"}, {"sha": "3caf3464563983a61fe3d990b4f0975708c48353", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -21,8 +21,8 @@ fn start(c: &comm::Chan<int>, start: int, number_of_messages: int) {\n }\n \n pub fn main() {\n-    debug!(\"Check that we don't deadlock.\");\n+    info!(\"Check that we don't deadlock.\");\n     let (p, ch) = comm::stream();\n     task::try(|| start(&ch, 0, 10) );\n-    debug!(\"Joined task\");\n+    info!(\"Joined task\");\n }"}, {"sha": "6910d39d495ae0db9a4239bbad6d9b4c3a7d0b30", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     // Spawn 10 tasks each sending us back one int.\n     let mut i = 10;\n     while (i > 0) {\n-        debug!(i);\n+        info!(i);\n         let (p, ch) = comm::stream();\n         po.add(p);\n         task::spawn({let i = i; || child(i, &ch)});\n@@ -31,15 +31,15 @@ pub fn main() {\n \n     i = 10;\n     while (i > 0) {\n-        debug!(i);\n+        info!(i);\n         po.recv();\n         i = i - 1;\n     }\n \n-    debug!(\"main thread exiting\");\n+    info!(\"main thread exiting\");\n }\n \n fn child(x: int, ch: &comm::Chan<int>) {\n-    debug!(x);\n+    info!(x);\n     ch.send(x);\n }"}, {"sha": "6c7405ef441880d461207d1d84322cc4c2a08b92", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,24 +16,24 @@ use std::comm::Chan;\n use std::comm;\n use std::task;\n \n-pub fn main() { debug!(\"===== WITHOUT THREADS =====\"); test00(); }\n+pub fn main() { info!(\"===== WITHOUT THREADS =====\"); test00(); }\n \n fn test00_start(ch: &Chan<int>, message: int, count: int) {\n-    debug!(\"Starting test00_start\");\n+    info!(\"Starting test00_start\");\n     let mut i: int = 0;\n     while i < count {\n-        debug!(\"Sending Message\");\n+        info!(\"Sending Message\");\n         ch.send(message + 0);\n         i = i + 1;\n     }\n-    debug!(\"Ending test00_start\");\n+    info!(\"Ending test00_start\");\n }\n \n fn test00() {\n     let number_of_tasks: int = 16;\n     let number_of_messages: int = 4;\n \n-    debug!(\"Creating tasks\");\n+    info!(\"Creating tasks\");\n \n     let po = comm::PortSet::new();\n \n@@ -66,7 +66,7 @@ fn test00() {\n     // Join spawned tasks...\n     for results.iter().advance |r| { r.recv(); }\n \n-    debug!(\"Completed: Final number is: \");\n+    info!(\"Completed: Final number is: \");\n     error!(sum);\n     // assert (sum == (((number_of_tasks * (number_of_tasks - 1)) / 2) *\n     //       number_of_messages));"}, {"sha": "5b0ebb0fa2508456a54364bca662cdab4ecb5e21", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -22,31 +22,31 @@ fn test00() {\n     c.send(4);\n     r = p.recv();\n     sum += r;\n-    debug!(r);\n+    info!(r);\n     r = p.recv();\n     sum += r;\n-    debug!(r);\n+    info!(r);\n     r = p.recv();\n     sum += r;\n-    debug!(r);\n+    info!(r);\n     r = p.recv();\n     sum += r;\n-    debug!(r);\n+    info!(r);\n     c.send(5);\n     c.send(6);\n     c.send(7);\n     c.send(8);\n     r = p.recv();\n     sum += r;\n-    debug!(r);\n+    info!(r);\n     r = p.recv();\n     sum += r;\n-    debug!(r);\n+    info!(r);\n     r = p.recv();\n     sum += r;\n-    debug!(r);\n+    info!(r);\n     r = p.recv();\n     sum += r;\n-    debug!(r);\n+    info!(r);\n     assert_eq!(sum, 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8);\n }"}, {"sha": "14c462f410cb22be103aab4118bf6bf0d7a64529", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -39,7 +39,7 @@ fn test00() {\n     let mut i: int = 0;\n     while i < number_of_messages {\n         sum += p.recv();\n-        debug!(r);\n+        info!(r);\n         i += 1;\n     }\n "}, {"sha": "0c82e0194e523a0723fc407700e73c14eea32aa4", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,7 +16,7 @@ use std::task;\n pub fn main() {\n     let mut i = 10;\n     while i > 0 { task::spawn({let i = i; || child(i)}); i = i - 1; }\n-    debug!(\"main thread exiting\");\n+    info!(\"main thread exiting\");\n }\n \n-fn child(x: int) { debug!(x); }\n+fn child(x: int) { info!(x); }"}, {"sha": "3bfe7d76ce8b00aada48440987cacdbfb0d071c3", "filename": "src/test/run-pass/use-uninit-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fuse-uninit-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fuse-uninit-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-match.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -18,4 +18,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n enum myoption<T> { none, some(T), }\n \n-pub fn main() { debug!(5); }\n+pub fn main() { info!(5); }"}, {"sha": "ea627a7c7602ba4521ee577733ea5e919d932658", "filename": "src/test/run-pass/use-uninit-match2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fuse-uninit-match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fuse-uninit-match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-match2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -18,4 +18,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n enum myoption<T> { none, some(T), }\n \n-pub fn main() { debug!(5); }\n+pub fn main() { info!(5); }"}, {"sha": "e0cb2703deb4dbb72b6924bedb683e3c0e5f9ed7", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -42,10 +42,10 @@ pub fn main() {\n     fn check_str_eq(a: ~str, b: ~str) {\n         let mut i: int = 0;\n         for a.bytes_iter().advance |ab| {\n-            debug!(i);\n-            debug!(ab);\n+            info!(i);\n+            info!(ab);\n             let bb: u8 = b[i];\n-            debug!(bb);\n+            info!(bb);\n             assert_eq!(ab, bb);\n             i += 1;\n         }"}, {"sha": "54fe4408e48f505322d13c5575602bfaf0941e66", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     let a: ~[int] = ~[1, 2, 3, 4, 5];\n     let b: ~[int] = ~[6, 7, 8, 9, 0];\n     let v: ~[int] = a + b;\n-    debug!(v[9]);\n+    info!(v[9]);\n     assert_eq!(v[0], 1);\n     assert_eq!(v[7], 8);\n     assert_eq!(v[9], 0);"}, {"sha": "3b07a4ecbcb73857d2187d733e8ee362a48c68b3", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,5 +13,5 @@\n pub fn main() {\n     let mut later: ~[int];\n     if true { later = ~[1]; } else { later = ~[2]; }\n-    debug!(later[0]);\n+    info!(later[0]);\n }"}, {"sha": "565188829d6b978e2cfbe02f012d32ca0f71e58a", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -61,7 +61,7 @@ fn canttouchthis() -> uint {\n     fn p() -> bool { true }\n     let _a = (assert!((true)) == (assert!(p())));\n     let _c = (assert!((p())) == ());\n-    let _b: bool = (debug!(\"%d\", 0) == (return 0u));\n+    let _b: bool = (info!(\"%d\", 0) == (return 0u));\n }\n \n fn angrydome() {\n@@ -71,7 +71,7 @@ fn angrydome() {\n       break; }\n }\n \n-fn evil_lincoln() { let evil = debug!(\"lincoln\"); }\n+fn evil_lincoln() { let evil = info!(\"lincoln\"); }\n \n pub fn main() {\n     strange();"}, {"sha": "836f737b845fe523d888d563806f6b8c802449df", "filename": "src/test/run-pass/while-cont.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-cont.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     let mut i = 1;\n     while i > 0 {\n         assert!((i > 0));\n-        debug!(i);\n+        info!(i);\n         i -= 1;\n         loop;\n     }"}, {"sha": "de87a40a61f7e94ac99ece6fae88a2ddc234563c", "filename": "src/test/run-pass/while-loop-constraints-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     while z < 50 {\n         z += 1;\n         while false { x = y; y = z; }\n-        debug!(y);\n+        info!(y);\n     }\n     assert!((y == 42 && z == 50));\n }"}, {"sha": "a7ab011f8e1432be5311b58aed38256c46696d9d", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -5,13 +5,13 @@\n pub fn main() {\n     let mut i: int = 90;\n     while i < 100 {\n-        debug!(i);\n+        info!(i);\n         i = i + 1;\n         if i == 95 {\n             let v: ~[int] =\n                 ~[1, 2, 3, 4, 5]; // we check that it is freed by break\n \n-            debug!(\"breaking\");\n+            info!(\"breaking\");\n             break;\n         }\n     }"}, {"sha": "8c6186ef10e0da51cd9bc42296b9a2743f9dd9cc", "filename": "src/test/run-pass/while.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fwhile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f7561bcdf3b54dafefd478b86e1f7610e74348/src%2Ftest%2Frun-pass%2Fwhile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile.rs?ref=e4f7561bcdf3b54dafefd478b86e1f7610e74348", "patch": "@@ -13,10 +13,10 @@\n pub fn main() {\n     let mut x: int = 10;\n     let mut y: int = 0;\n-    while y < x { debug!(y); debug!(\"hello\"); y = y + 1; }\n+    while y < x { info!(y); info!(\"hello\"); y = y + 1; }\n     while x > 0 {\n-        debug!(\"goodbye\");\n+        info!(\"goodbye\");\n         x = x - 1;\n-        debug!(x);\n+        info!(x);\n     }\n }"}]}