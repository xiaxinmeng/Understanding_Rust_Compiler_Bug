{"sha": "d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTAzZDVmOWM0ZTU4Y2MzZmEyNTZlYzViZTUyNzE3Yjg0ZTYzMDg=", "commit": {"author": {"name": "Denys Zariaiev", "email": "denys.zariaiev@gmail.com", "date": "2019-01-19T20:59:34Z"}, "committer": {"name": "Denys Zariaiev", "email": "denys.zariaiev@gmail.com", "date": "2019-01-27T15:04:09Z"}, "message": "Create `nvptx64-nvidia-cuda` target specification", "tree": {"sha": "f605e94869041dbafa407c1cae38ef2acb84517c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f605e94869041dbafa407c1cae38ef2acb84517c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "html_url": "https://github.com/rust-lang/rust/commit/d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/comments", "author": {"login": "denzp", "id": 747869, "node_id": "MDQ6VXNlcjc0Nzg2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/747869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denzp", "html_url": "https://github.com/denzp", "followers_url": "https://api.github.com/users/denzp/followers", "following_url": "https://api.github.com/users/denzp/following{/other_user}", "gists_url": "https://api.github.com/users/denzp/gists{/gist_id}", "starred_url": "https://api.github.com/users/denzp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denzp/subscriptions", "organizations_url": "https://api.github.com/users/denzp/orgs", "repos_url": "https://api.github.com/users/denzp/repos", "events_url": "https://api.github.com/users/denzp/events{/privacy}", "received_events_url": "https://api.github.com/users/denzp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denzp", "id": 747869, "node_id": "MDQ6VXNlcjc0Nzg2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/747869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denzp", "html_url": "https://github.com/denzp", "followers_url": "https://api.github.com/users/denzp/followers", "following_url": "https://api.github.com/users/denzp/following{/other_user}", "gists_url": "https://api.github.com/users/denzp/gists{/gist_id}", "starred_url": "https://api.github.com/users/denzp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denzp/subscriptions", "organizations_url": "https://api.github.com/users/denzp/orgs", "repos_url": "https://api.github.com/users/denzp/repos", "events_url": "https://api.github.com/users/denzp/events{/privacy}", "received_events_url": "https://api.github.com/users/denzp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01af12008d63a64446a86d995e772f8a539a4202", "url": "https://api.github.com/repos/rust-lang/rust/commits/01af12008d63a64446a86d995e772f8a539a4202", "html_url": "https://github.com/rust-lang/rust/commit/01af12008d63a64446a86d995e772f8a539a4202"}], "stats": {"total": 450, "additions": 433, "deletions": 17}, "files": [{"sha": "b0bbf2395e2fc0db50ff26fe3a88b435f94d32bc", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -831,6 +831,7 @@ impl Build {\n                   !target.contains(\"msvc\") &&\n                   !target.contains(\"emscripten\") &&\n                   !target.contains(\"wasm32\") &&\n+                  !target.contains(\"nvptx\") &&\n                   !target.contains(\"fuchsia\") {\n             Some(self.cc(target))\n         } else {"}, {"sha": "ff4fb85bbfad335b4a7d41b8e1bba4a41f36e40c", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -156,7 +156,7 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n-        if target.contains(\"-none-\") {\n+        if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n             if build.no_std(*target).is_none() {\n                 let target = build.config.target_config.entry(target.clone())\n                     .or_default();\n@@ -165,7 +165,7 @@ pub fn check(build: &mut Build) {\n             }\n \n             if build.no_std(*target) == Some(false) {\n-                panic!(\"All the *-none-* targets are no-std targets\")\n+                panic!(\"All the *-none-* and nvptx* targets are no-std targets\")\n             }\n         }\n "}, {"sha": "c126bff42582a327974871bb1a5d815bf41fabbe", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -1675,6 +1675,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n         false\n     }\n+\n+    /// Determine whether identifiers in the assembly have strict naming rules.\n+    /// Currently, only NVPTX* targets need it.\n+    pub fn has_strict_asm_symbol_naming(&self) -> bool {\n+        self.gcx.sess.target.target.arch.contains(\"nvptx\")\n+    }\n }\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {"}, {"sha": "2a5ecf9a0593ff400a301a73c6e15371b8b1ee32", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -149,6 +149,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 LinkerFlavor::Ld => \"ld\",\n                 LinkerFlavor::Msvc => \"link.exe\",\n                 LinkerFlavor::Lld(_) => \"lld\",\n+                LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n             }), flavor)),\n             (Some(linker), None) => {\n                 let stem = if linker.extension().and_then(|ext| ext.to_str()) == Some(\"exe\") {"}, {"sha": "5e9aeed7107acbf2a208b3c878036702ab57e17b", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -83,6 +83,10 @@ impl LinkerInfo {\n             LinkerFlavor::Lld(LldFlavor::Wasm) => {\n                 Box::new(WasmLd::new(cmd, sess, self)) as Box<dyn Linker>\n             }\n+\n+            LinkerFlavor::PtxLinker => {\n+                Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>\n+            }\n         }\n     }\n }\n@@ -1080,3 +1084,124 @@ fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n \n     symbols\n }\n+\n+/// Much simplified and explicit CLI for the NVPTX linker. The linker operates\n+/// with bitcode and uses LLVM backend to generate a PTX assembly.\n+pub struct PtxLinker<'a> {\n+    cmd: Command,\n+    sess: &'a Session,\n+}\n+\n+impl<'a> Linker for PtxLinker<'a> {\n+    fn link_rlib(&mut self, path: &Path) {\n+        self.cmd.arg(\"--rlib\").arg(path);\n+    }\n+\n+    fn link_whole_rlib(&mut self, path: &Path) {\n+        self.cmd.arg(\"--rlib\").arg(path);\n+    }\n+\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+\n+    fn debuginfo(&mut self) {\n+        self.cmd.arg(\"--debug\");\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(\"--bitcode\").arg(path);\n+    }\n+\n+    fn args(&mut self, args: &[String]) {\n+        self.cmd.args(args);\n+    }\n+\n+    fn optimize(&mut self) {\n+        self.cmd.arg(match self.sess.opts.optimize {\n+            OptLevel::No => \"-O0\",\n+            OptLevel::Less => \"-O1\",\n+            OptLevel::Default => \"-O2\",\n+            OptLevel::Aggressive => \"-O3\",\n+            OptLevel::Size => \"-Os\",\n+            OptLevel::SizeMin => \"-Os\"\n+        });\n+    }\n+\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn finalize(&mut self) -> Command {\n+        ::std::mem::replace(&mut self.cmd, Command::new(\"\"))\n+    }\n+\n+    fn link_dylib(&mut self, _lib: &str) {\n+        panic!(\"external dylibs not supported\")\n+    }\n+\n+    fn link_rust_dylib(&mut self, _lib: &str, _path: &Path) {\n+        panic!(\"external dylibs not supported\")\n+    }\n+\n+    fn link_staticlib(&mut self, _lib: &str) {\n+        panic!(\"staticlibs not supported\")\n+    }\n+\n+    fn link_whole_staticlib(&mut self, _lib: &str, _search_path: &[PathBuf]) {\n+        panic!(\"staticlibs not supported\")\n+    }\n+\n+    fn framework_path(&mut self, _path: &Path) {\n+        panic!(\"frameworks not supported\")\n+    }\n+\n+    fn link_framework(&mut self, _framework: &str) {\n+        panic!(\"frameworks not supported\")\n+    }\n+\n+    fn position_independent_executable(&mut self) {\n+    }\n+\n+    fn full_relro(&mut self) {\n+    }\n+\n+    fn partial_relro(&mut self) {\n+    }\n+\n+    fn no_relro(&mut self) {\n+    }\n+\n+    fn build_static_executable(&mut self) {\n+    }\n+\n+    fn gc_sections(&mut self, _keep_metadata: bool) {\n+    }\n+\n+    fn pgo_gen(&mut self) {\n+    }\n+\n+    fn no_default_libraries(&mut self) {\n+    }\n+\n+    fn build_dylib(&mut self, _out_filename: &Path) {\n+    }\n+\n+    fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType) {\n+    }\n+\n+    fn subsystem(&mut self, _subsystem: &str) {\n+    }\n+\n+    fn no_position_independent_executable(&mut self) {\n+    }\n+\n+    fn group_start(&mut self) {\n+    }\n+\n+    fn group_end(&mut self) {\n+    }\n+\n+    fn cross_lang_lto(&mut self) {\n+    }\n+}"}, {"sha": "8e96f98540117cfd0dc7eeead57b0ff34e8c753f", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -12,6 +12,7 @@\n #![feature(nll)]\n #![allow(unused_attributes)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(in_band_lifetimes)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "f2014f7421289460ea18d7b0f708656ba25b4b41", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -103,7 +103,7 @@ use rustc_mir::monomorphize::Instance;\n \n use syntax_pos::symbol::Symbol;\n \n-use std::fmt::Write;\n+use std::fmt::{self, Write};\n use std::mem::discriminant;\n \n pub fn provide(providers: &mut Providers) {\n@@ -221,7 +221,7 @@ fn get_symbol_hash<'a, 'tcx>(\n }\n \n fn def_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::SymbolName {\n-    let mut buffer = SymbolPathBuffer::new();\n+    let mut buffer = SymbolPathBuffer::new(tcx);\n     item_path::with_forced_absolute_paths(|| {\n         tcx.push_item_path(&mut buffer, def_id, false);\n     });\n@@ -317,7 +317,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n \n     let hash = get_symbol_hash(tcx, def_id, instance, instance_ty, substs);\n \n-    let mut buf = SymbolPathBuffer::from_interned(tcx.def_symbol_name(def_id));\n+    let mut buf = SymbolPathBuffer::from_interned(tcx.def_symbol_name(def_id), tcx);\n \n     if instance.is_vtable_shim() {\n         buf.push(\"{{vtable-shim}}\");\n@@ -339,26 +339,28 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n //\n // To be able to work on all platforms and get *some* reasonable output, we\n // use C++ name-mangling.\n-#[derive(Debug)]\n-struct SymbolPathBuffer {\n+struct SymbolPathBuffer<'a, 'tcx> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     result: String,\n     temp_buf: String,\n }\n \n-impl SymbolPathBuffer {\n-    fn new() -> Self {\n+impl SymbolPathBuffer<'a, 'tcx> {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n         let mut result = SymbolPathBuffer {\n             result: String::with_capacity(64),\n             temp_buf: String::with_capacity(16),\n+            tcx,\n         };\n         result.result.push_str(\"_ZN\"); // _Z == Begin name-sequence, N == nested\n         result\n     }\n \n-    fn from_interned(symbol: ty::SymbolName) -> Self {\n+    fn from_interned(symbol: ty::SymbolName, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n         let mut result = SymbolPathBuffer {\n             result: String::with_capacity(64),\n             temp_buf: String::with_capacity(16),\n+            tcx,\n         };\n         result.result.push_str(&symbol.as_str());\n         result\n@@ -377,15 +379,15 @@ impl SymbolPathBuffer {\n     }\n }\n \n-impl ItemPathBuffer for SymbolPathBuffer {\n+impl ItemPathBuffer for SymbolPathBuffer<'a, 'tcx> {\n     fn root_mode(&self) -> &RootMode {\n         const ABSOLUTE: &RootMode = &RootMode::Absolute;\n         ABSOLUTE\n     }\n \n     fn push(&mut self, text: &str) {\n         self.temp_buf.clear();\n-        let need_underscore = sanitize(&mut self.temp_buf, text);\n+        let need_underscore = sanitize(&mut self.temp_buf, text, self.tcx);\n         let _ = write!(\n             self.result,\n             \"{}\",\n@@ -398,12 +400,24 @@ impl ItemPathBuffer for SymbolPathBuffer {\n     }\n }\n \n+// Manual Debug implementation to omit non-Debug `tcx` field.\n+impl fmt::Debug for SymbolPathBuffer<'_, '_> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt.debug_struct(\"SymbolPathBuffer\")\n+            .field(\"result\", &self.result)\n+            .field(\"temp_buf\", &self.temp_buf)\n+            .finish()\n+    }\n+}\n+\n // Name sanitation. LLVM will happily accept identifiers with weird names, but\n // gas doesn't!\n // gas accepts the following characters in symbols: a-z, A-Z, 0-9, ., _, $\n+// NVPTX assembly has more strict naming rules than gas, so additionally, dots\n+// are replaced with '$' there.\n //\n // returns true if an underscore must be added at the start\n-pub fn sanitize(result: &mut String, s: &str) -> bool {\n+pub fn sanitize(result: &mut String, s: &str, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n     for c in s.chars() {\n         match c {\n             // Escape these with $ sequences\n@@ -416,12 +430,25 @@ pub fn sanitize(result: &mut String, s: &str) -> bool {\n             ')' => result.push_str(\"$RP$\"),\n             ',' => result.push_str(\"$C$\"),\n \n-            // '.' doesn't occur in types and functions, so reuse it\n-            // for ':' and '-'\n-            '-' | ':' => result.push('.'),\n+            '-' | ':' => if tcx.has_strict_asm_symbol_naming() {\n+                // NVPTX doesn't support these characters in symbol names.\n+                result.push('$')\n+            }\n+            else {\n+                // '.' doesn't occur in types and functions, so reuse it\n+                // for ':' and '-'\n+                result.push('.')\n+            },\n+\n+            '.' => if tcx.has_strict_asm_symbol_naming() {\n+                result.push('$')\n+            }\n+            else {\n+                result.push('.')\n+            },\n \n             // These are legal symbols\n-            'a'..='z' | 'A'..='Z' | '0'..='9' | '_' | '.' | '$' => result.push(c),\n+            'a'..='z' | 'A'..='Z' | '0'..='9' | '_' | '$' => result.push(c),\n \n             _ => {\n                 result.push('$');"}, {"sha": "aeecce49b0c67689c1e07638e288581ebc4d04fa", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -75,6 +75,7 @@ pub enum LinkerFlavor {\n     Ld,\n     Msvc,\n     Lld(LldFlavor),\n+    PtxLinker,\n }\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n@@ -143,6 +144,7 @@ flavor_mappings! {\n     ((LinkerFlavor::Gcc), \"gcc\"),\n     ((LinkerFlavor::Ld), \"ld\"),\n     ((LinkerFlavor::Msvc), \"msvc\"),\n+    ((LinkerFlavor::PtxLinker), \"ptx-linker\"),\n     ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n     ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n     ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n@@ -455,6 +457,8 @@ supported_targets! {\n     (\"x86_64-fortanix-unknown-sgx\", x86_64_fortanix_unknown_sgx),\n \n     (\"x86_64-unknown-uefi\", x86_64_unknown_uefi),\n+\n+    (\"nvptx64-nvidia-cuda\", nvptx64_nvidia_cuda),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "ed5d0f2450623a3cb8197c55057343c822eb7ec0", "filename": "src/librustc_target/spec/nvptx64_nvidia_cuda.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -0,0 +1,73 @@\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult, PanicStrategy, MergeFunctions};\n+use spec::abi::Abi;\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        arch: \"nvptx64\".to_string(),\n+        data_layout: \"e-i64:64-i128:128-v16:16-v32:32-n16:32:64\".to_string(),\n+        llvm_target: \"nvptx64-nvidia-cuda\".to_string(),\n+\n+        target_os: \"cuda\".to_string(),\n+        target_vendor: \"nvidia\".to_string(),\n+        target_env: String::new(),\n+\n+        linker_flavor: LinkerFlavor::PtxLinker,\n+\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+\n+        options: TargetOptions {\n+            // The linker can be installed from `crates.io`.\n+            linker: Some(\"rust-ptx-linker\".to_string()),\n+\n+            // With `ptx-linker` approach, it can be later overriden via link flags.\n+            cpu: \"sm_20\".to_string(),\n+\n+            // TODO(denzp): create tests for the atomics.\n+            max_atomic_width: Some(64),\n+\n+            // Unwinding on CUDA is neither feasible nor useful.\n+            panic_strategy: PanicStrategy::Abort,\n+\n+            // Needed to use `dylib` and `bin` crate types and the linker.\n+            dynamic_linking: true,\n+            executables: true,\n+\n+            // Avoid using dylib because it contain metadata not supported\n+            // by LLVM NVPTX backend.\n+            only_cdylib: true,\n+\n+            // Let the `ptx-linker` to handle LLVM lowering into MC / assembly.\n+            obj_is_bitcode: true,\n+\n+            // Convinient and predicable naming scheme.\n+            dll_prefix: \"\".to_string(),\n+            dll_suffix: \".ptx\".to_string(),\n+            exe_suffix: \".ptx\".to_string(),\n+\n+            // Disable MergeFunctions LLVM optimisation pass because it can\n+            // produce kernel functions that call other kernel functions.\n+            // This behavior is not supported by PTX ISA.\n+            merge_functions: MergeFunctions::Disabled,\n+\n+            // TODO(denzp): enable compilation tests for the target and\n+            // create the tests for this.\n+            abi_blacklist: vec![\n+                Abi::Cdecl,\n+                Abi::Stdcall,\n+                Abi::Fastcall,\n+                Abi::Vectorcall,\n+                Abi::Thiscall,\n+                Abi::Aapcs,\n+                Abi::Win64,\n+                Abi::SysV64,\n+                Abi::Msp430Interrupt,\n+                Abi::X86Interrupt,\n+                Abi::AmdGpuKernel,\n+            ],\n+\n+            .. Default::default()\n+        },\n+    })\n+}"}, {"sha": "4c22dae265c141f72b3f12a1f0bc8c9231e6575d", "filename": "src/test/run-make/nvptx-binary-crate/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2FMakefile?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -0,0 +1,9 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(TARGET),nvptx64-nvidia-cuda)\n+all:\n+\t$(RUSTC) main.rs -Clink-arg=--arch=sm_60 --crate-type=\"bin\" -O --target $(TARGET)\n+\tFileCheck main.rs --input-file $(TMPDIR)/main.ptx\n+else\n+all:\n+endif"}, {"sha": "826bc3a47bbd633df852443dcb2d5adf7cc7c6ad", "filename": "src/test/run-make/nvptx-binary-crate/main.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-binary-crate%2Fmain.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -0,0 +1,28 @@\n+#![no_std]\n+#![no_main]\n+#![deny(warnings)]\n+#![feature(abi_ptx, core_intrinsics)]\n+\n+// Check the overriden CUDA arch.\n+// CHECK: .target sm_60\n+// CHECK: .address_size 64\n+\n+// Verify that no extra function declarations are present.\n+// CHECK-NOT: .func\n+\n+// CHECK-LABEL: .visible .entry top_kernel(\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn top_kernel(a: *const u32, b: *mut u32) {\n+    // CHECK: add.s32 %{{r[0-9]+}}, %{{r[0-9]+}}, 5;\n+    *b = *a + 5;\n+}\n+\n+// Verify that no extra function definitions are there.\n+// CHECK-NOT: .func\n+// CHECK-NOT: .entry\n+\n+#[panic_handler]\n+unsafe fn breakpoint_panic_handler(_: &::core::panic::PanicInfo) -> ! {\n+    core::intrinsics::breakpoint();\n+    core::hint::unreachable_unchecked();\n+}"}, {"sha": "7284e9d1a7c9968ca6b64fbeb29cb04d75c404a3", "filename": "src/test/run-make/nvptx-dylib-crate/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2FMakefile?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -0,0 +1,10 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(TARGET),nvptx64-nvidia-cuda)\n+all:\n+\t$(RUSTC) dep.rs --crate-type=\"rlib\" --target $(TARGET)\n+\t$(RUSTC) kernel.rs --crate-type=\"cdylib\" -O --target $(TARGET)\n+\tFileCheck kernel.rs --input-file $(TMPDIR)/kernel.ptx\n+else\n+all:\n+endif"}, {"sha": "57f3ee87cdb9d7bad8e324ca310503ee023c8dbd", "filename": "src/test/run-make/nvptx-dylib-crate/dep.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fdep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fdep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fdep.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -0,0 +1,14 @@\n+#![no_std]\n+#![deny(warnings)]\n+\n+#[inline(never)]\n+#[no_mangle]\n+pub fn wrapping_external_fn(a: u32) -> u32 {\n+    a.wrapping_mul(a)\n+}\n+\n+#[inline(never)]\n+#[no_mangle]\n+pub fn panicking_external_fn(a: u32) -> u32 {\n+    a * a\n+}"}, {"sha": "a889e23018d81c3685aa3609c080b665372c10c6", "filename": "src/test/run-make/nvptx-dylib-crate/kernel.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-dylib-crate%2Fkernel.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -0,0 +1,67 @@\n+#![no_std]\n+#![deny(warnings)]\n+#![feature(abi_ptx, core_intrinsics)]\n+\n+extern crate dep;\n+\n+// Verify the default CUDA arch.\n+// CHECK: .target sm_20\n+// CHECK: .address_size 64\n+\n+// Make sure declarations are there.\n+// CHECK: .func (.param .b32 func_retval0) wrapping_external_fn\n+// CHECK: .func (.param .b32 func_retval0) panicking_external_fn\n+// CHECK: .func [[PANIC_HANDLER:_ZN4core9panicking5panic[a-zA-Z0-9]+]]\n+// CHECK: .func [[PANIC_FMT:_ZN4core9panicking9panic_fmt[a-zA-Z0-9]+]]\n+\n+// CHECK-LABEL: .visible .entry top_kernel(\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn top_kernel(a: *const u32, b: *mut u32) {\n+    // CHECK:      call.uni (retval0),\n+    // CHECK-NEXT: wrapping_external_fn\n+    // CHECK:      ld.param.b32 %[[LHS:r[0-9]+]], [retval0+0];\n+    let lhs = dep::wrapping_external_fn(*a);\n+\n+    // CHECK:      call.uni (retval0),\n+    // CHECK-NEXT: panicking_external_fn\n+    // CHECK:      ld.param.b32 %[[RHS:r[0-9]+]], [retval0+0];\n+    let rhs = dep::panicking_external_fn(*a);\n+\n+    // CHECK: add.s32 %[[RES:r[0-9]+]], %[[RHS]], %[[LHS]];\n+    // CHECK: st.global.u32 [%{{rd[0-9]+}}], %[[RES]];\n+    *b = lhs + rhs;\n+}\n+\n+// Verify that external function bodies are available.\n+// CHECK-LABEL: .func (.param .b32 func_retval0) wrapping_external_fn\n+// CHECK: {\n+// CHECK:   st.param.b32 [func_retval0+0], %{{r[0-9]+}};\n+// CHECK: }\n+\n+// Also verify panic behavior.\n+// CHECK-LABEL: .func (.param .b32 func_retval0) panicking_external_fn\n+// CHECK: {\n+// CHECK:   %{{p[0-9]+}} bra [[PANIC_LABEL:[a-zA-Z0-9_]+]];\n+// CHECK: [[PANIC_LABEL]]:\n+// CHECK:   call.uni\n+// CHECK:   [[PANIC_HANDLER]]\n+// CHECK: }\n+\n+// Verify whether panic handler is present.\n+// CHECK: .func [[PANIC_HANDLER]]()\n+// CHECK: {\n+// CHECK:   call.uni\n+// CHECK:   [[PANIC_FMT]]\n+// CHECK: }\n+\n+// And finally, check the dummy panic formatter.\n+// CHECK: .func [[PANIC_FMT]]()\n+// CHECK: {\n+// CHECK:   trap;\n+// CHECK: }\n+\n+#[panic_handler]\n+unsafe fn breakpoint_panic_handler(_: &::core::panic::PanicInfo) -> ! {\n+    core::intrinsics::breakpoint();\n+    core::hint::unreachable_unchecked();\n+}"}, {"sha": "e03601878bdee32d02385270bac1230380bbb798", "filename": "src/test/run-make/nvptx-emit-asm/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2FMakefile?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -0,0 +1,9 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(TARGET),nvptx64-nvidia-cuda)\n+all:\n+\t$(RUSTC) kernel.rs --crate-type=\"rlib\" --emit asm,llvm-ir -O --target $(TARGET)\n+\tFileCheck kernel.rs --input-file $(TMPDIR)/kernel.s\n+else\n+all:\n+endif"}, {"sha": "070a6efd2d5478a54bbaf6fad84c5efdc092612e", "filename": "src/test/run-make/nvptx-emit-asm/kernel.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2Fkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3903d5f9c4e58cc3fa256ec5be52717b84e6308/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2Fkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnvptx-emit-asm%2Fkernel.rs?ref=d3903d5f9c4e58cc3fa256ec5be52717b84e6308", "patch": "@@ -0,0 +1,41 @@\n+#![no_std]\n+#![deny(warnings)]\n+#![feature(abi_ptx)]\n+\n+// Verify the default CUDA arch.\n+// CHECK: .target sm_20\n+// CHECK: .address_size 64\n+\n+// Verify function name doesn't contain unacceaptable characters.\n+// CHECK: .func (.param .b32 func_retval0) [[IMPL_FN:_ZN[a-zA-Z0-9$_]+square[a-zA-Z0-9$_]+]]\n+\n+// CHECK-LABEL: .visible .entry top_kernel(\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn top_kernel(a: *const u32, b: *mut u32) {\n+    // CHECK:      call.uni (retval0),\n+    // CHECK-NEXT: [[IMPL_FN]]\n+    *b = deep::private::MyStruct::new(*a).square();\n+}\n+\n+pub mod deep {\n+    pub mod private {\n+        pub struct MyStruct<T>(T);\n+\n+        impl MyStruct<u32> {\n+            pub fn new(a: u32) -> Self {\n+                MyStruct(a)\n+            }\n+\n+            #[inline(never)]\n+            pub fn square(&self) -> u32 {\n+                self.0.wrapping_mul(self.0)\n+            }\n+        }\n+    }\n+}\n+\n+// Verify that external function bodies are available.\n+// CHECK: .func (.param .b32 func_retval0) [[IMPL_FN]]\n+// CHECK: {\n+// CHECK:   mul.lo.s32 %{{r[0-9]+}}, %{{r[0-9]+}}, %{{r[0-9]+}}\n+// CHECK: }"}]}