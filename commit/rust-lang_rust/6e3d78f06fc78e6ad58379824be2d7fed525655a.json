{"sha": "6e3d78f06fc78e6ad58379824be2d7fed525655a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlM2Q3OGYwNmZjNzhlNmFkNTgzNzk4MjRiZTJkN2ZlZDUyNTY1NWE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T06:07:16Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T09:00:10Z"}, "message": "Ungate default type parameters.\n\nThese are in scope for 1.0, and this is good to e.g. find as many bugs\nas possible.", "tree": {"sha": "77148c9688f45256076856648a7499daa3f48bfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77148c9688f45256076856648a7499daa3f48bfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3d78f06fc78e6ad58379824be2d7fed525655a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d78f06fc78e6ad58379824be2d7fed525655a", "html_url": "https://github.com/rust-lang/rust/commit/6e3d78f06fc78e6ad58379824be2d7fed525655a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d78f06fc78e6ad58379824be2d7fed525655a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679514816974f23eff367b37e9082599a25900f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/679514816974f23eff367b37e9082599a25900f0", "html_url": "https://github.com/rust-lang/rust/commit/679514816974f23eff367b37e9082599a25900f0"}], "stats": {"total": 52, "additions": 10, "deletions": 42}, "files": [{"sha": "1a4856333bf1797bb2c3d02ef880029e0efa55fa", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6e3d78f06fc78e6ad58379824be2d7fed525655a", "patch": "@@ -272,7 +272,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             }\n             let cfg = syntax::ext::expand::ExpansionConfig {\n                 crate_name: crate_name.to_string(),\n-                deriving_hash_type_parameter: sess.features.borrow().default_type_params,\n                 enable_quotes: sess.features.borrow().quote,\n                 recursion_limit: sess.recursion_limit.get(),\n             };"}, {"sha": "0445404f8e622e0ca2f387f8e101dda24f0cda93", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=6e3d78f06fc78e6ad58379824be2d7fed525655a", "patch": "@@ -24,6 +24,7 @@\n #![feature(globs)]\n #![feature(link_args)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate libc;\n "}, {"sha": "5573b675214273a1daf8880c08ba4209ce1758a4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6e3d78f06fc78e6ad58379824be2d7fed525655a", "patch": "@@ -19,6 +19,7 @@\n #![feature(globs, phase, slicing_syntax)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(associated_types)]\n+#![feature(old_orphan_check)]\n \n #[phase(plugin, link)] extern crate log;\n #[phase(plugin, link)] extern crate syntax;"}, {"sha": "bf01d5e38e71e2258de1f830009c44f12ab6c786", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6e3d78f06fc78e6ad58379824be2d7fed525655a", "patch": "@@ -360,14 +360,6 @@ fn create_substs_for_ast_path<'tcx,AC,RS>(\n                                            supplied_ty_param_count)[]);\n     }\n \n-    if supplied_ty_param_count > required_ty_param_count\n-        && !this.tcx().sess.features.borrow().default_type_params {\n-        span_err!(this.tcx().sess, span, E0108,\n-            \"default type parameters are experimental and possibly buggy\");\n-        span_help!(this.tcx().sess, span,\n-            \"add #![feature(default_type_params)] to the crate attributes to enable\");\n-    }\n-\n     let mut substs = Substs::new_type(types, regions);\n \n     match self_ty {"}, {"sha": "553b8af172fec2c24f6b995454b5b4d720d637a3", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=6e3d78f06fc78e6ad58379824be2d7fed525655a", "patch": "@@ -25,20 +25,14 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n     F: FnOnce(P<Item>),\n {\n \n-    let (path, generics, args) = if cx.ecfg.deriving_hash_type_parameter {\n-        (Path::new_(vec!(\"std\", \"hash\", \"Hash\"), None,\n-                    vec!(box Literal(Path::new_local(\"__S\"))), true),\n-         LifetimeBounds {\n-             lifetimes: Vec::new(),\n-             bounds: vec!((\"__S\",\n-                           vec!(Path::new(vec!(\"std\", \"hash\", \"Writer\"))))),\n-         },\n-         Path::new_local(\"__S\"))\n-    } else {\n-        (Path::new(vec!(\"std\", \"hash\", \"Hash\")),\n-         LifetimeBounds::empty(),\n-         Path::new(vec!(\"std\", \"hash\", \"sip\", \"SipState\")))\n+    let path = Path::new_(vec!(\"std\", \"hash\", \"Hash\"), None,\n+                          vec!(box Literal(Path::new_local(\"__S\"))), true);\n+    let generics = LifetimeBounds {\n+        lifetimes: Vec::new(),\n+        bounds: vec!((\"__S\",\n+                      vec!(Path::new(vec!(\"std\", \"hash\", \"Writer\"))))),\n     };\n+    let args = Path::new_local(\"__S\");\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n     let attrs = vec!(cx.attribute(span, inline));\n     let hash_trait_def = TraitDef {"}, {"sha": "b3e839b4fb648710ec4defcfd311779decccc2ca", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6e3d78f06fc78e6ad58379824be2d7fed525655a", "patch": "@@ -1161,7 +1161,6 @@ fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n \n pub struct ExpansionConfig {\n     pub crate_name: String,\n-    pub deriving_hash_type_parameter: bool,\n     pub enable_quotes: bool,\n     pub recursion_limit: uint,\n }\n@@ -1170,7 +1169,6 @@ impl ExpansionConfig {\n     pub fn default(crate_name: String) -> ExpansionConfig {\n         ExpansionConfig {\n             crate_name: crate_name,\n-            deriving_hash_type_parameter: false,\n             enable_quotes: false,\n             recursion_limit: 64,\n         }"}, {"sha": "584558638b7833d224432d296dfd3a34db0f4475", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d78f06fc78e6ad58379824be2d7fed525655a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=6e3d78f06fc78e6ad58379824be2d7fed525655a", "patch": "@@ -54,7 +54,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"lang_items\", Active),\n \n     (\"simd\", Active),\n-    (\"default_type_params\", Active),\n+    (\"default_type_params\", Accepted),\n     (\"quote\", Active),\n     (\"link_llvm_intrinsics\", Active),\n     (\"linkage\", Active),\n@@ -112,7 +112,6 @@ enum Status {\n /// A set of features to be used by later passes.\n #[derive(Copy)]\n pub struct Features {\n-    pub default_type_params: bool,\n     pub unboxed_closures: bool,\n     pub rustc_diagnostic_macros: bool,\n     pub import_shadowing: bool,\n@@ -125,7 +124,6 @@ pub struct Features {\n impl Features {\n     pub fn new() -> Features {\n         Features {\n-            default_type_params: false,\n             unboxed_closures: false,\n             rustc_diagnostic_macros: false,\n             import_shadowing: false,\n@@ -356,20 +354,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_expr(self, e);\n     }\n \n-    fn visit_generics(&mut self, generics: &ast::Generics) {\n-        for type_parameter in generics.ty_params.iter() {\n-            match type_parameter.default {\n-                Some(ref ty) => {\n-                    self.gate_feature(\"default_type_params\", ty.span,\n-                                      \"default type parameters are \\\n-                                       experimental and possibly buggy\");\n-                }\n-                None => {}\n-            }\n-        }\n-        visit::walk_generics(self, generics);\n-    }\n-\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         if attr::contains_name(slice::ref_slice(attr), \"lang\") {\n             self.gate_feature(\"lang_items\",\n@@ -475,7 +459,6 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n     check(&mut cx, krate);\n \n     (Features {\n-        default_type_params: cx.has_feature(\"default_type_params\"),\n         unboxed_closures: cx.has_feature(\"unboxed_closures\"),\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         import_shadowing: cx.has_feature(\"import_shadowing\"),"}]}