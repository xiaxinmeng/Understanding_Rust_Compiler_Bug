{"sha": "1f4117f5182249d91c52cc3e384e4577356e1634", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNDExN2Y1MTgyMjQ5ZDkxYzUyY2MzZTM4NGU0NTc3MzU2ZTE2MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-11T04:55:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-11T04:55:41Z"}, "message": "auto merge of #17110 : thestinger/rust/dst, r=cmr\n\nThe pointer in the slice must not be null, because enum representations\r\nmake that assumption. The `exchange_malloc` function returns a non-null\r\nsentinel for the zero size case, and it must not be passed to the\r\n`exchange_free` lang item.\r\n\r\nSince the length is always equal to the true capacity, a branch on the\r\nlength is enough for most types. Slices of zero size types are\r\nstatically special cased to never attempt deallocation. This is the same\r\nimplementation as `Vec<T>`.\r\n\r\nCloses #14395", "tree": {"sha": "cfa16e82923ad5048b2bc770296e8b0be6585945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa16e82923ad5048b2bc770296e8b0be6585945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4117f5182249d91c52cc3e384e4577356e1634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4117f5182249d91c52cc3e384e4577356e1634", "html_url": "https://github.com/rust-lang/rust/commit/1f4117f5182249d91c52cc3e384e4577356e1634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4117f5182249d91c52cc3e384e4577356e1634/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea660e678434dc1eea2a3b60bf3bc92c8404745", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea660e678434dc1eea2a3b60bf3bc92c8404745", "html_url": "https://github.com/rust-lang/rust/commit/7ea660e678434dc1eea2a3b60bf3bc92c8404745"}, {"sha": "9639cafd3625429ea558d3202cffdfc851fcf9cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9639cafd3625429ea558d3202cffdfc851fcf9cf", "html_url": "https://github.com/rust-lang/rust/commit/9639cafd3625429ea558d3202cffdfc851fcf9cf"}], "stats": {"total": 61, "additions": 24, "deletions": 37}, "files": [{"sha": "c7bc1bb973330f87653d7d06c734f97bf90b4d5f", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f4117f5182249d91c52cc3e384e4577356e1634/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4117f5182249d91c52cc3e384e4577356e1634/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=1f4117f5182249d91c52cc3e384e4577356e1634", "patch": "@@ -12,7 +12,6 @@\n // FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`\n //                and `nonnull`\n \n-use core::ptr::RawPtr;\n #[cfg(not(test))] use core::raw;\n #[cfg(stage0, not(test))] use util;\n \n@@ -70,11 +69,6 @@ pub unsafe fn reallocate_inplace(ptr: *mut u8, size: uint, align: uint,\n /// the value returned by `usable_size` for the requested size.\n #[inline]\n pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n-    // FIXME(14395) This is only required for DST ~[T], it should be removed once\n-    // we fix that representation to not use null pointers.\n-    if ptr.is_null() {\n-        return;\n-    }\n     imp::deallocate(ptr, size, align)\n }\n "}, {"sha": "bfcf4a11bc207bdf630d33457a317426dc529cc8", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f4117f5182249d91c52cc3e384e4577356e1634/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4117f5182249d91c52cc3e384e4577356e1634/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=1f4117f5182249d91c52cc3e384e4577356e1634", "patch": "@@ -412,29 +412,11 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let vec_ty = ty::mk_uniq(tcx, ty::mk_vec(tcx, unit_ty, None));\n         let scratch = rvalue_scratch_datum(bcx, vec_ty, \"__unsize_unique\");\n \n-        if len == 0 {\n-            Store(bcx,\n-                  C_null(type_of::type_of(bcx.ccx(), unit_ty).ptr_to()),\n-                  get_dataptr(bcx, scratch.val));\n-        } else {\n-            // Box<[(), ..n]> will not allocate, but ~[()] expects an\n-            // allocation of n bytes, so we must allocate here (yuck).\n-            let llty = type_of::type_of(bcx.ccx(), unit_ty);\n-            if llsize_of_alloc(bcx.ccx(), llty) == 0 {\n-                let ptr_unit_ty = type_of::type_of(bcx.ccx(), unit_ty).ptr_to();\n-                let align = C_uint(bcx.ccx(), 8);\n-                let alloc_result = malloc_raw_dyn(bcx, ptr_unit_ty, vec_ty, ll_len, align);\n-                bcx = alloc_result.bcx;\n-                let base = get_dataptr(bcx, scratch.val);\n-                Store(bcx, alloc_result.val, base);\n-            } else {\n-                let base = get_dataptr(bcx, scratch.val);\n-                let base = PointerCast(bcx,\n-                                       base,\n-                                       type_of::type_of(bcx.ccx(), datum_ty).ptr_to());\n-                bcx = lval.store_to(bcx, base);\n-            }\n-        }\n+        let base = get_dataptr(bcx, scratch.val);\n+        let base = PointerCast(bcx,\n+                               base,\n+                               type_of::type_of(bcx.ccx(), datum_ty).ptr_to());\n+        bcx = lval.store_to(bcx, base);\n \n         Store(bcx, ll_len, get_len(bcx, scratch.val));\n         DatumBlock::new(bcx, scratch.to_expr_datum())"}, {"sha": "c0d19b31cb8ede9d3d1d428f0bfbf04caeef34b2", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f4117f5182249d91c52cc3e384e4577356e1634/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4117f5182249d91c52cc3e384e4577356e1634/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=1f4117f5182249d91c52cc3e384e4577356e1634", "patch": "@@ -72,14 +72,19 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         };\n \n         if should_deallocate {\n-            let not_null = IsNotNull(bcx, dataptr);\n-            with_cond(bcx, not_null, |bcx| {\n-                let llty = type_of::type_of(ccx, unit_ty);\n-                let llsize = machine::llsize_of(ccx, llty);\n-                let llalign = C_uint(ccx, machine::llalign_of_min(ccx, llty) as uint);\n-                let size = Mul(bcx, llsize, get_len(bcx, vptr));\n-                glue::trans_exchange_free_dyn(bcx, dataptr, size, llalign)\n-            })\n+            let llty = type_of::type_of(ccx, unit_ty);\n+            let unit_size = llsize_of_alloc(ccx, llty);\n+            if unit_size != 0 {\n+                let len = get_len(bcx, vptr);\n+                let not_empty = ICmp(bcx, llvm::IntNE, len, C_uint(ccx, 0));\n+                with_cond(bcx, not_empty, |bcx| {\n+                    let llalign = C_uint(ccx, machine::llalign_of_min(ccx, llty) as uint);\n+                    let size = Mul(bcx, C_uint(ccx, unit_size as uint), len);\n+                    glue::trans_exchange_free_dyn(bcx, dataptr, size, llalign)\n+                })\n+            } else {\n+                bcx\n+            }\n         } else {\n             bcx\n         }"}, {"sha": "56eb340ef59acc922235790df8b2dc2b5ea882bd", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f4117f5182249d91c52cc3e384e4577356e1634/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4117f5182249d91c52cc3e384e4577356e1634/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=1f4117f5182249d91c52cc3e384e4577356e1634", "patch": "@@ -11,6 +11,12 @@\n pub fn main() {\n     assert!(Some(box() ()).is_some());\n \n+    let xs: Box<[()]> = box [];\n+    assert!(Some(xs).is_some());\n+\n     struct Foo;\n     assert!(Some(box Foo).is_some());\n+\n+    let ys: Box<[Foo]> = box [];\n+    assert!(Some(ys).is_some());\n }"}]}