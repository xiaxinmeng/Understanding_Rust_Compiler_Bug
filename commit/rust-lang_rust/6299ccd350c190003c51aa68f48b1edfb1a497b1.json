{"sha": "6299ccd350c190003c51aa68f48b1edfb1a497b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOTljY2QzNTBjMTkwMDAzYzUxYWE2OGY0OGIxZWRmYjFhNDk3YjE=", "commit": {"author": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2019-03-17T19:05:10Z"}, "committer": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2019-03-17T19:08:51Z"}, "message": "Split test case and use tested_by!.", "tree": {"sha": "c09090f2ab77807b6ea4a74fb7b97a6194709d5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09090f2ab77807b6ea4a74fb7b97a6194709d5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6299ccd350c190003c51aa68f48b1edfb1a497b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6299ccd350c190003c51aa68f48b1edfb1a497b1", "html_url": "https://github.com/rust-lang/rust/commit/6299ccd350c190003c51aa68f48b1edfb1a497b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6299ccd350c190003c51aa68f48b1edfb1a497b1/comments", "author": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33add0ee30ed9deb715d15e07b16568d4deb56b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/33add0ee30ed9deb715d15e07b16568d4deb56b3", "html_url": "https://github.com/rust-lang/rust/commit/33add0ee30ed9deb715d15e07b16568d4deb56b3"}], "stats": {"total": 179, "additions": 103, "deletions": 76}, "files": [{"sha": "6f3e5f09da112d5e4a09ca7cc366b45a47ac3782", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6299ccd350c190003c51aa68f48b1edfb1a497b1/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6299ccd350c190003c51aa68f48b1edfb1a497b1/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=6299ccd350c190003c51aa68f48b1edfb1a497b1", "patch": "@@ -7,4 +7,5 @@ test_utils::marks!(\n     glob_enum\n     glob_across_crates\n     std_prelude\n+    match_ergonomics_ref\n );"}, {"sha": "0a698988cb8b5cba0ab37351669bd3b0f5f95640", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6299ccd350c190003c51aa68f48b1edfb1a497b1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6299ccd350c190003c51aa68f48b1edfb1a497b1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6299ccd350c190003c51aa68f48b1edfb1a497b1", "patch": "@@ -619,6 +619,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n             }\n         } else if let Pat::Ref { .. } = &body[pat] {\n+            tested_by!(match_ergonomics_ref);\n+            // When you encounter a `&pat` pattern, reset to Move.\n+            // This is so that `w` is by value: `let (_, &w) = &(1, &2);`\n             default_bm = BindingMode::Move;\n         }\n "}, {"sha": "0f8551a9d9681ed9e06e3d2e303aca0b2511d059", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 99, "deletions": 76, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/6299ccd350c190003c51aa68f48b1edfb1a497b1/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6299ccd350c190003c51aa68f48b1edfb1a497b1/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=6299ccd350c190003c51aa68f48b1edfb1a497b1", "patch": "@@ -756,8 +756,6 @@ fn test(x: &str, y: isize) {\n fn infer_pattern() {\n     assert_snapshot_matches!(\n         infer(r#\"\n-struct A<T>(T);\n-\n fn test(x: &i32) {\n     let y = x;\n     let &z = x;\n@@ -774,89 +772,114 @@ fn test(x: &i32) {\n \n     let lambda = |a: u64, b, c: i32| { a + b; c };\n \n-    let A(n) = &A(1);\n-    let A(n) = &mut A(1);\n-\n-    let v = &(1, &2);\n-    let (_, &w) = v;\n-\n     let ref ref_to_x = x;\n     let mut mut_x = x;\n     let ref mut mut_ref_to_x = x;\n     let k = mut_ref_to_x;\n }\n \"#),\n         @r###\"\n-[26; 27) 'x': &i32\n-[35; 479) '{     ...o_x; }': ()\n-[45; 46) 'y': &i32\n-[49; 50) 'x': &i32\n-[60; 62) '&z': &i32\n-[61; 62) 'z': i32\n-[65; 66) 'x': &i32\n-[76; 77) 'a': i32\n-[80; 81) 'z': i32\n-[91; 97) '(c, d)': (i32, &str)\n-[92; 93) 'c': i32\n-[95; 96) 'd': &str\n-[100; 112) '(1, \"hello\")': (i32, &str)\n-[101; 102) '1': i32\n-[104; 111) '\"hello\"': &str\n-[119; 169) 'for (e...     }': ()\n-[123; 129) '(e, f)': ({unknown}, {unknown})\n-[124; 125) 'e': {unknown}\n-[127; 128) 'f': {unknown}\n-[133; 142) 'some_iter': {unknown}\n-[143; 169) '{     ...     }': ()\n-[157; 158) 'g': {unknown}\n-[161; 162) 'e': {unknown}\n-[175; 222) 'if let...     }': ()\n-[182; 187) '[val]': {unknown}\n-[190; 193) 'opt': {unknown}\n-[194; 222) '{     ...     }': ()\n-[208; 209) 'h': {unknown}\n-[212; 215) 'val': {unknown}\n-[232; 238) 'lambda': {unknown}\n-[241; 273) '|a: u6...b; c }': {unknown}\n-[242; 243) 'a': u64\n+[9; 10) 'x': &i32\n+[18; 369) '{     ...o_x; }': ()\n+[28; 29) 'y': &i32\n+[32; 33) 'x': &i32\n+[43; 45) '&z': &i32\n+[44; 45) 'z': i32\n+[48; 49) 'x': &i32\n+[59; 60) 'a': i32\n+[63; 64) 'z': i32\n+[74; 80) '(c, d)': (i32, &str)\n+[75; 76) 'c': i32\n+[78; 79) 'd': &str\n+[83; 95) '(1, \"hello\")': (i32, &str)\n+[84; 85) '1': i32\n+[87; 94) '\"hello\"': &str\n+[102; 152) 'for (e...     }': ()\n+[106; 112) '(e, f)': ({unknown}, {unknown})\n+[107; 108) 'e': {unknown}\n+[110; 111) 'f': {unknown}\n+[116; 125) 'some_iter': {unknown}\n+[126; 152) '{     ...     }': ()\n+[140; 141) 'g': {unknown}\n+[144; 145) 'e': {unknown}\n+[158; 205) 'if let...     }': ()\n+[165; 170) '[val]': {unknown}\n+[173; 176) 'opt': {unknown}\n+[177; 205) '{     ...     }': ()\n+[191; 192) 'h': {unknown}\n+[195; 198) 'val': {unknown}\n+[215; 221) 'lambda': {unknown}\n+[224; 256) '|a: u6...b; c }': {unknown}\n+[225; 226) 'a': u64\n+[233; 234) 'b': u64\n+[236; 237) 'c': i32\n+[244; 256) '{ a + b; c }': i32\n+[246; 247) 'a': u64\n+[246; 251) 'a + b': u64\n [250; 251) 'b': u64\n [253; 254) 'c': i32\n-[261; 273) '{ a + b; c }': i32\n-[263; 264) 'a': u64\n-[263; 268) 'a + b': u64\n-[267; 268) 'b': u64\n-[270; 271) 'c': i32\n-[284; 288) 'A(n)': A<i32>\n-[286; 287) 'n': &i32\n-[291; 296) '&A(1)': &A<i32>\n-[292; 293) 'A': A<i32>(T) -> A<T>\n-[292; 296) 'A(1)': A<i32>\n-[294; 295) '1': i32\n-[306; 310) 'A(n)': A<i32>\n-[308; 309) 'n': &mut i32\n-[313; 322) '&mut A(1)': &mut A<i32>\n-[318; 319) 'A': A<i32>(T) -> A<T>\n-[318; 322) 'A(1)': A<i32>\n-[320; 321) '1': i32\n-[333; 334) 'v': &(i32, &i32)\n-[337; 345) '&(1, &2)': &(i32, &i32)\n-[338; 345) '(1, &2)': (i32, &i32)\n-[339; 340) '1': i32\n-[342; 344) '&2': &i32\n-[343; 344) '2': i32\n-[355; 362) '(_, &w)': (i32, &i32)\n-[356; 357) '_': i32\n-[359; 361) '&w': &i32\n-[360; 361) 'w': i32\n-[365; 366) 'v': &(i32, &i32)\n-[377; 389) 'ref ref_to_x': &&i32\n-[392; 393) 'x': &i32\n-[403; 412) 'mut mut_x': &i32\n-[415; 416) 'x': &i32\n-[426; 446) 'ref mu...f_to_x': &mut &i32\n-[449; 450) 'x': &i32\n-[460; 461) 'k': &mut &i32\n-[464; 476) 'mut_ref_to_x': &mut &i32\"###\n+[267; 279) 'ref ref_to_x': &&i32\n+[282; 283) 'x': &i32\n+[293; 302) 'mut mut_x': &i32\n+[305; 306) 'x': &i32\n+[316; 336) 'ref mu...f_to_x': &mut &i32\n+[339; 340) 'x': &i32\n+[350; 351) 'k': &mut &i32\n+[354; 366) 'mut_ref_to_x': &mut &i32\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_pattern_match_ergonomics() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+struct A<T>(T);\n+\n+fn test() {\n+    let A(n) = &A(1);\n+    let A(n) = &mut A(1);\n+}\n+\"#),\n+    @r###\"\n+[28; 79) '{     ...(1); }': ()\n+[38; 42) 'A(n)': A<i32>\n+[40; 41) 'n': &i32\n+[45; 50) '&A(1)': &A<i32>\n+[46; 47) 'A': A<i32>(T) -> A<T>\n+[46; 50) 'A(1)': A<i32>\n+[48; 49) '1': i32\n+[60; 64) 'A(n)': A<i32>\n+[62; 63) 'n': &mut i32\n+[67; 76) '&mut A(1)': &mut A<i32>\n+[72; 73) 'A': A<i32>(T) -> A<T>\n+[72; 76) 'A(1)': A<i32>\n+[74; 75) '1': i32\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_pattern_match_ergonomics_ref() {\n+    covers!(match_ergonomics_ref);\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+fn test() {\n+    let v = &(1, &2);\n+    let (_, &w) = v;\n+}\n+\"#),\n+    @r###\"\n+[11; 57) '{     ...= v; }': ()\n+[21; 22) 'v': &(i32, &i32)\n+[25; 33) '&(1, &2)': &(i32, &i32)\n+[26; 33) '(1, &2)': (i32, &i32)\n+[27; 28) '1': i32\n+[30; 32) '&2': &i32\n+[31; 32) '2': i32\n+[43; 50) '(_, &w)': (i32, &i32)\n+[44; 45) '_': i32\n+[47; 49) '&w': &i32\n+[48; 49) 'w': i32\n+[53; 54) 'v': &(i32, &i32)\"###\n     );\n }\n "}]}