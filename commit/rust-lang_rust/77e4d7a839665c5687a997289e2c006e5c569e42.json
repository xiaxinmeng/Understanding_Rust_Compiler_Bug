{"sha": "77e4d7a839665c5687a997289e2c006e5c569e42", "node_id": "C_kwDOAAsO6NoAKDc3ZTRkN2E4Mzk2NjVjNTY4N2E5OTcyODllMmMwMDZlNWM1NjllNDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T13:46:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T13:46:18Z"}, "message": "Auto merge of #10727 - john-h-k:lint/dup-auto-traits, r=Manishearth\n\nExtend `trait_duplication_in_bounds` to cover trait objects\n\nThis PR extends `trait_duplication_in_bounds` to cover trait objects.\n\nCurrently,\n```rs\nfn foo(_a: &(dyn Any + Send + Send)) {}\n```\n\ngenerates no warnings. With this PR, it will complain about a duplicate trait and can remove it\n\nMoved from rust-lang/rust#110991\n\nchangelog: [`trait_duplication_in_bounds`]: warn on duplicate trait object constraints", "tree": {"sha": "9d522b3380f144e190f24778b5bedc3da0d721c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d522b3380f144e190f24778b5bedc3da0d721c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77e4d7a839665c5687a997289e2c006e5c569e42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77e4d7a839665c5687a997289e2c006e5c569e42", "html_url": "https://github.com/rust-lang/rust/commit/77e4d7a839665c5687a997289e2c006e5c569e42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77e4d7a839665c5687a997289e2c006e5c569e42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4075e87bb0456035e1facd9c6da9c788f669fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4075e87bb0456035e1facd9c6da9c788f669fad", "html_url": "https://github.com/rust-lang/rust/commit/b4075e87bb0456035e1facd9c6da9c788f669fad"}, {"sha": "b169bdb732c1a0751a32c4ede1c16a3bba3ffb09", "url": "https://api.github.com/repos/rust-lang/rust/commits/b169bdb732c1a0751a32c4ede1c16a3bba3ffb09", "html_url": "https://github.com/rust-lang/rust/commit/b169bdb732c1a0751a32c4ede1c16a3bba3ffb09"}], "stats": {"total": 103, "additions": 92, "deletions": 11}, "files": [{"sha": "4ccda15068bbbb5c7cceabb0d8db1b9a5f73d8f4", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/77e4d7a839665c5687a997289e2c006e5c569e42/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e4d7a839665c5687a997289e2c006e5c569e42/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=77e4d7a839665c5687a997289e2c006e5c569e42", "patch": "@@ -37,12 +37,12 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.38.0\"]\n     pub TYPE_REPETITION_IN_BOUNDS,\n     nursery,\n-    \"types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n+    \"types are repeated unnecessarily in trait bounds, use `+` instead of using `T: _, T: _`\"\n }\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for cases where generics are being used and multiple\n+    /// Checks for cases where generics or trait objects are being used and multiple\n     /// syntax specifications for trait bounds are used simultaneously.\n     ///\n     /// ### Why is this bad?\n@@ -167,6 +167,61 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n             }\n         }\n     }\n+\n+    fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n+        if_chain! {\n+            if let TyKind::Ref(.., mut_ty) = &ty.kind;\n+            if let TyKind::TraitObject(bounds, ..) = mut_ty.ty.kind;\n+            if bounds.len() > 2;\n+            then {\n+\n+                // Build up a hash of every trait we've seen\n+                // When we see a trait for the first time, add it to unique_traits\n+                // so we can later use it to build a string of all traits exactly once, without duplicates\n+\n+                let mut seen_def_ids = FxHashSet::default();\n+                let mut unique_traits = Vec::new();\n+\n+                // Iterate the bounds and add them to our seen hash\n+                // If we haven't yet seen it, add it to the fixed traits\n+                for bound in bounds.iter() {\n+                    let Some(def_id) = bound.trait_ref.trait_def_id() else { continue; };\n+\n+                    let new_trait = seen_def_ids.insert(def_id);\n+\n+                    if new_trait {\n+                        unique_traits.push(bound);\n+                    }\n+                }\n+\n+                // If the number of unique traits isn't the same as the number of traits in the bounds,\n+                // there must be 1 or more duplicates\n+                if bounds.len() != unique_traits.len() {\n+                    let mut bounds_span = bounds[0].span;\n+\n+                    for bound in bounds.iter().skip(1) {\n+                        bounds_span = bounds_span.to(bound.span);\n+                    }\n+\n+                    let fixed_trait_snippet = unique_traits\n+                        .iter()\n+                        .filter_map(|b| snippet_opt(cx, b.span))\n+                        .collect::<Vec<_>>()\n+                        .join(\" + \");\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        TRAIT_DUPLICATION_IN_BOUNDS,\n+                        bounds_span,\n+                        \"this trait bound is already specified in trait declaration\",\n+                        \"try\",\n+                        fixed_trait_snippet,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+        }\n+    }\n }\n \n impl TraitBounds {"}, {"sha": "fdac0e4cb1e83a19a5381add24d58d020d765309", "filename": "tests/ui/trait_duplication_in_bounds.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77e4d7a839665c5687a997289e2c006e5c569e42/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77e4d7a839665c5687a997289e2c006e5c569e42/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.fixed?ref=77e4d7a839665c5687a997289e2c006e5c569e42", "patch": "@@ -2,6 +2,8 @@\n #![deny(clippy::trait_duplication_in_bounds)]\n #![allow(unused)]\n \n+use std::any::Any;\n+\n fn bad_foo<T: Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n     unimplemented!();\n }\n@@ -109,4 +111,12 @@ fn qualified_path<T: std::clone::Clone + foo::Clone>(arg0: T) {\n     unimplemented!();\n }\n \n+fn good_trait_object(arg0: &(dyn Any + Send)) {\n+    unimplemented!();\n+}\n+\n+fn bad_trait_object(arg0: &(dyn Any + Send)) {\n+    unimplemented!();\n+}\n+\n fn main() {}"}, {"sha": "a0300da555588d110fe8f77388acd1f10a01a303", "filename": "tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77e4d7a839665c5687a997289e2c006e5c569e42/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e4d7a839665c5687a997289e2c006e5c569e42/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=77e4d7a839665c5687a997289e2c006e5c569e42", "patch": "@@ -2,6 +2,8 @@\n #![deny(clippy::trait_duplication_in_bounds)]\n #![allow(unused)]\n \n+use std::any::Any;\n+\n fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n     unimplemented!();\n }\n@@ -109,4 +111,12 @@ fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n     unimplemented!();\n }\n \n+fn good_trait_object(arg0: &(dyn Any + Send)) {\n+    unimplemented!();\n+}\n+\n+fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {\n+    unimplemented!();\n+}\n+\n fn main() {}"}, {"sha": "539b6114ca3aea8bb925fa78854902b6fd21e9a2", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77e4d7a839665c5687a997289e2c006e5c569e42/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77e4d7a839665c5687a997289e2c006e5c569e42/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=77e4d7a839665c5687a997289e2c006e5c569e42", "patch": "@@ -1,5 +1,5 @@\n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:5:15\n+  --> $DIR/trait_duplication_in_bounds.rs:7:15\n    |\n LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n@@ -11,46 +11,52 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:11:8\n+  --> $DIR/trait_duplication_in_bounds.rs:13:8\n    |\n LL |     T: Clone + Clone + Clone + Copy,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:39:26\n+  --> $DIR/trait_duplication_in_bounds.rs:41:26\n    |\n LL | trait BadSelfTraitBound: Clone + Clone + Clone {\n    |                          ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:46:15\n+  --> $DIR/trait_duplication_in_bounds.rs:48:15\n    |\n LL |         Self: Clone + Clone + Clone;\n    |               ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:60:24\n+  --> $DIR/trait_duplication_in_bounds.rs:62:24\n    |\n LL | trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:67:12\n+  --> $DIR/trait_duplication_in_bounds.rs:69:12\n    |\n LL |         T: Clone + Clone + Clone + Copy,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:100:19\n+  --> $DIR/trait_duplication_in_bounds.rs:102:19\n    |\n LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u64> + GenericTrait<u32>`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:108:22\n+  --> $DIR/trait_duplication_in_bounds.rs:110:22\n    |\n LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::clone::Clone + foo::Clone`\n \n-error: aborting due to 8 previous errors\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds.rs:118:33\n+   |\n+LL | fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {\n+   |                                 ^^^^^^^^^^^^^^^^^ help: try: `Any + Send`\n+\n+error: aborting due to 9 previous errors\n "}]}