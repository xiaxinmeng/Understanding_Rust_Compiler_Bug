{"sha": "e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "node_id": "C_kwDOAAsO6NoAKGU1N2FjNzY0YjgwZTFmMGRkYjA2YmI0OWNiMWViMTJjNjk5MDIyYmI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T02:16:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T05:06:50Z"}, "message": "Box `thir::ExprKind::InlineAsm`.\n\nThis shrinks `thir::Expr`.", "tree": {"sha": "f4acc747142342ad23a0964a9d0f0be8fed1d0b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4acc747142342ad23a0964a9d0f0be8fed1d0b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "html_url": "https://github.com/rust-lang/rust/commit/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3245a8dffc1460db7a8e5fbc748156a68327fcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3245a8dffc1460db7a8e5fbc748156a68327fcf", "html_url": "https://github.com/rust-lang/rust/commit/b3245a8dffc1460db7a8e5fbc748156a68327fcf"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "17dadecfae0b4184e504072ed469c540ec3916a1", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "patch": "@@ -133,6 +133,14 @@ pub struct ClosureExpr<'tcx> {\n     pub fake_reads: Vec<(ExprId, FakeReadCause, hir::HirId)>,\n }\n \n+#[derive(Clone, Debug, HashStable)]\n+pub struct InlineAsmExpr<'tcx> {\n+    pub template: &'tcx [InlineAsmTemplatePiece],\n+    pub operands: Box<[InlineAsmOperand<'tcx>]>,\n+    pub options: InlineAsmOptions,\n+    pub line_spans: &'tcx [Span],\n+}\n+\n #[derive(Copy, Clone, Debug, HashStable)]\n pub enum BlockSafety {\n     Safe,\n@@ -432,12 +440,7 @@ pub enum ExprKind<'tcx> {\n         def_id: DefId,\n     },\n     /// Inline assembly, i.e. `asm!()`.\n-    InlineAsm {\n-        template: &'tcx [InlineAsmTemplatePiece],\n-        operands: Box<[InlineAsmOperand<'tcx>]>,\n-        options: InlineAsmOptions,\n-        line_spans: &'tcx [Span],\n-    },\n+    InlineAsm(Box<InlineAsmExpr<'tcx>>),\n     /// An expression taking a reference to a thread local.\n     ThreadLocalRef(DefId),\n     /// A `yield` expression.\n@@ -804,7 +807,7 @@ mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Block, 56);\n-    static_assert_size!(Expr<'_>, 80);\n+    static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(Pat<'_>, 24);\n     static_assert_size!(Stmt<'_>, 72);\n }"}, {"sha": "68100f037d9362b9264610b091718d9316e5ed64", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "patch": "@@ -1,5 +1,5 @@\n use super::{\n-    Arm, Block, ClosureExpr, Expr, ExprKind, Guard, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind,\n+    Arm, Block, ClosureExpr, Expr, ExprKind, Guard, InlineAsmExpr, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind,\n     Thir,\n };\n \n@@ -140,7 +140,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         NamedConst { def_id: _, substs: _, user_ty: _ } => {}\n         ConstParam { param: _, def_id: _ } => {}\n         StaticRef { alloc_id: _, ty: _, def_id: _ } => {}\n-        InlineAsm { ref operands, template: _, options: _, line_spans: _ } => {\n+        InlineAsm(box InlineAsmExpr { ref operands, template: _, options: _, line_spans: _ }) => {\n             for op in &**operands {\n                 use InlineAsmOperand::*;\n                 match op {"}, {"sha": "dd6162300c34cd566d35c1a163c717196ce68c4c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "patch": "@@ -400,7 +400,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 );\n                 block.unit()\n             }\n-            ExprKind::InlineAsm { template, ref operands, options, line_spans } => {\n+            ExprKind::InlineAsm(box InlineAsmExpr { template, ref operands, options, line_spans }) => {\n                 use rustc_middle::{mir, thir};\n                 let operands = operands\n                     .into_iter()"}, {"sha": "0012de45b9e9e48fc8a28aea1d35716fe841e53e", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ac764b80e1f0ddb06bb49cb1eb12c699022bb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=e57ac764b80e1f0ddb06bb49cb1eb12c699022bb", "patch": "@@ -562,7 +562,7 @@ impl<'tcx> Cx<'tcx> {\n                 self.convert_path_expr(expr, res)\n             }\n \n-            hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {\n+            hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm(Box::new(InlineAsmExpr {\n                 template: asm.template,\n                 operands: asm\n                     .operands\n@@ -621,7 +621,7 @@ impl<'tcx> Cx<'tcx> {\n                     .collect(),\n                 options: asm.options,\n                 line_spans: asm.line_spans,\n-            },\n+            })),\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let ty = self.typeck_results().node_type(anon_const.hir_id);"}]}