{"sha": "57d822a904e440b6020d39274ac40a0ed68d55c9", "node_id": "C_kwDOAAsO6NoAKDU3ZDgyMmE5MDRlNDQwYjYwMjBkMzkyNzRhYzQwYTBlZDY4ZDU1Yzk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-12T19:40:22Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-13T09:18:36Z"}, "message": "Recover labels written as identifiers", "tree": {"sha": "450966c0d37dac38263b94dc0caece923aab751f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/450966c0d37dac38263b94dc0caece923aab751f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57d822a904e440b6020d39274ac40a0ed68d55c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57d822a904e440b6020d39274ac40a0ed68d55c9", "html_url": "https://github.com/rust-lang/rust/commit/57d822a904e440b6020d39274ac40a0ed68d55c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57d822a904e440b6020d39274ac40a0ed68d55c9/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0609889d7ca7f11dcb90880caf97fdf411a9374", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0609889d7ca7f11dcb90880caf97fdf411a9374", "html_url": "https://github.com/rust-lang/rust/commit/b0609889d7ca7f11dcb90880caf97fdf411a9374"}], "stats": {"total": 92, "additions": 74, "deletions": 18}, "files": [{"sha": "84c049efc5014294af6568e05b5e7344dc3239a8", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/57d822a904e440b6020d39274ac40a0ed68d55c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d822a904e440b6020d39274ac40a0ed68d55c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=57d822a904e440b6020d39274ac40a0ed68d55c9", "patch": "@@ -1346,9 +1346,6 @@ impl<'a> Parser<'a> {\n                 err.span_label(sp, \"while parsing this `loop` expression\");\n                 err\n             })\n-        } else if self.eat_keyword(kw::Continue) {\n-            let kind = ExprKind::Continue(self.eat_label());\n-            Ok(self.mk_expr(lo.to(self.prev_token.span), kind))\n         } else if self.eat_keyword(kw::Match) {\n             let match_sp = self.prev_token.span;\n             self.parse_match_expr().map_err(|mut err| {\n@@ -1372,6 +1369,8 @@ impl<'a> Parser<'a> {\n             self.parse_try_block(lo)\n         } else if self.eat_keyword(kw::Return) {\n             self.parse_return_expr()\n+        } else if self.eat_keyword(kw::Continue) {\n+            self.parse_continue_expr(lo)\n         } else if self.eat_keyword(kw::Break) {\n             self.parse_break_expr()\n         } else if self.eat_keyword(kw::Yield) {\n@@ -1724,8 +1723,8 @@ impl<'a> Parser<'a> {\n         } else if self.token != token::OpenDelim(Delimiter::Brace)\n             || !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n         {\n-            let expr = self.parse_expr_opt()?;\n-            if let Some(expr) = &expr {\n+            let mut expr = self.parse_expr_opt()?;\n+            if let Some(expr) = &mut expr {\n                 if label.is_some()\n                     && matches!(\n                         expr.kind,\n@@ -1743,7 +1742,19 @@ impl<'a> Parser<'a> {\n                         BuiltinLintDiagnostics::BreakWithLabelAndLoop(expr.span),\n                     );\n                 }\n+\n+                // Recover `break label aaaaa`\n+                if self.may_recover()\n+                    && let ExprKind::Path(None, p) = &expr.kind\n+                    && let [segment] = &*p.segments\n+                    && let &ast::PathSegment { ident, args: None, .. } = segment\n+                    && let Some(next) = self.parse_expr_opt()?\n+                {\n+                    label = Some(self.recover_ident_into_label(ident));\n+                    *expr = next;\n+                }\n             }\n+\n             expr\n         } else {\n             None\n@@ -1752,6 +1763,23 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr)\n     }\n \n+    /// Parse `\"continue\" label?`.\n+    fn parse_continue_expr(&mut self, lo: Span) -> PResult<'a, P<Expr>> {\n+        let mut label = self.eat_label();\n+\n+        // Recover `continue label` -> `continue 'label`\n+        if self.may_recover()\n+            && label.is_none()\n+            && let Some((ident, _)) = self.token.ident()\n+        {\n+            self.bump();\n+            label = Some(self.recover_ident_into_label(ident));\n+        }\n+\n+        let kind = ExprKind::Continue(label);\n+        Ok(self.mk_expr(lo.to(self.prev_token.span), kind))\n+    }\n+\n     /// Parse `\"yield\" expr?`.\n     fn parse_yield_expr(&mut self) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n@@ -3037,6 +3065,25 @@ impl<'a> Parser<'a> {\n         false\n     }\n \n+    /// Converts an ident into 'label and emits an \"expected a label, found an identifier\" error.\n+    fn recover_ident_into_label(&mut self, ident: Ident) -> Label {\n+        // Convert `label` -> `'label`,\n+        // so that nameres doesn't complain about non-existing label\n+        let label = format!(\"'{}\", ident.name);\n+        let ident = Ident { name: Symbol::intern(&label), span: ident.span };\n+\n+        self.struct_span_err(ident.span, \"expected a label, found an identifier\")\n+            .span_suggestion(\n+                ident.span,\n+                \"labels start with a tick\",\n+                label,\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+\n+        Label { ident }\n+    }\n+\n     /// Parses `ident (COLON expr)?`.\n     fn parse_expr_field(&mut self) -> PResult<'a, ExprField> {\n         let attrs = self.parse_outer_attributes()?;"}, {"sha": "159d995b8dad303c1c8e0b0c9d79b12b2fd8929f", "filename": "tests/ui/parser/recover-unticked-labels.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57d822a904e440b6020d39274ac40a0ed68d55c9/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/57d822a904e440b6020d39274ac40a0ed68d55c9/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed?ref=57d822a904e440b6020d39274ac40a0ed68d55c9", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    'label: loop { break 'label };    //~ error: cannot find value `label` in this scope\n+    'label: loop { break 'label 0 };  //~ error: expected a label, found an identifier\n+    'label: loop { continue 'label }; //~ error: expected a label, found an identifier\n+}"}, {"sha": "56034de68449fdda7695545035c3cd7b8c979b89", "filename": "tests/ui/parser/recover-unticked-labels.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57d822a904e440b6020d39274ac40a0ed68d55c9/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d822a904e440b6020d39274ac40a0ed68d55c9/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs?ref=57d822a904e440b6020d39274ac40a0ed68d55c9", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n+\n fn main() {\n-    'label: loop { break label }    //~ error: cannot find value `label` in this scope\n-    'label: loop { break label 0 }  //~ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `0`\n-    'label: loop { continue label } //~ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `label`\n+    'label: loop { break label };    //~ error: cannot find value `label` in this scope\n+    'label: loop { break label 0 };  //~ error: expected a label, found an identifier\n+    'label: loop { continue label }; //~ error: expected a label, found an identifier\n }"}, {"sha": "c115dffb10e9c6e476bf9eddd7e214cb2b2b0e23", "filename": "tests/ui/parser/recover-unticked-labels.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57d822a904e440b6020d39274ac40a0ed68d55c9/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57d822a904e440b6020d39274ac40a0ed68d55c9/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr?ref=57d822a904e440b6020d39274ac40a0ed68d55c9", "patch": "@@ -1,19 +1,19 @@\n-error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `0`\n-  --> $DIR/recover-unticked-labels.rs:3:32\n+error: expected a label, found an identifier\n+  --> $DIR/recover-unticked-labels.rs:5:26\n    |\n-LL |     'label: loop { break label 0 }\n-   |                                ^ expected one of 8 possible tokens\n+LL |     'label: loop { break label 0 };\n+   |                          ^^^^^ help: labels start with a tick: `'label`\n \n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `label`\n-  --> $DIR/recover-unticked-labels.rs:4:29\n+error: expected a label, found an identifier\n+  --> $DIR/recover-unticked-labels.rs:6:29\n    |\n-LL |     'label: loop { continue label }\n-   |                             ^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+LL |     'label: loop { continue label };\n+   |                             ^^^^^ help: labels start with a tick: `'label`\n \n error[E0425]: cannot find value `label` in this scope\n-  --> $DIR/recover-unticked-labels.rs:2:26\n+  --> $DIR/recover-unticked-labels.rs:4:26\n    |\n-LL |     'label: loop { break label }\n+LL |     'label: loop { break label };\n    |     ------               ^^^^^\n    |     |                    |\n    |     |                    not found in this scope"}]}