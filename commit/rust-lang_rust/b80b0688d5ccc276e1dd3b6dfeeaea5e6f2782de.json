{"sha": "b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MGIwNjg4ZDVjY2MyNzZlMWRkM2I2ZGZlZWFlYTVlNmYyNzgyZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-06T01:51:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-06T01:53:04Z"}, "message": "rustc: Add a new method_self method call origin. Part of default methods.", "tree": {"sha": "283d012bdf0cf44a4ac38a5bea247cfe7b8392e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283d012bdf0cf44a4ac38a5bea247cfe7b8392e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "html_url": "https://github.com/rust-lang/rust/commit/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c33f8d316cca760b380e5d9fc4762629a9f968", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c33f8d316cca760b380e5d9fc4762629a9f968", "html_url": "https://github.com/rust-lang/rust/commit/02c33f8d316cca760b380e5d9fc4762629a9f968"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "a364c1d75d430729fb33b5e8bbfc4fa43f1bfe2c", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "patch": "@@ -493,6 +493,9 @@ impl method_origin: tr {\n           typeck::method_trait(did, m, vstore) => {\n             typeck::method_trait(did.tr(xcx), m, vstore)\n           }\n+          typeck::method_self(did, m) => {\n+            typeck::method_self(did.tr(xcx), m)\n+          }\n         }\n     }\n }"}, {"sha": "98260a0d0819b75f1b718dca4e9c5b494ed313e6", "filename": "src/rustc/middle/privacy.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fprivacy.rs?ref=b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "patch": "@@ -8,8 +8,8 @@ use syntax::ast::{item_trait, local_crate, node_id, pat_struct, private};\n use syntax::ast::{provided, required};\n use syntax::ast_map::{node_item, node_method};\n use ty::ty_class;\n-use typeck::{method_map, method_origin, method_param, method_static};\n-use typeck::{method_trait};\n+use typeck::{method_map, method_origin, method_param, method_self};\n+use typeck::{method_static, method_trait};\n \n use core::util::ignore;\n use dvec::DVec;\n@@ -81,7 +81,8 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                 }\n             }\n             method_param({trait_id: trait_id, method_num: method_num, _}) |\n-            method_trait(trait_id, method_num, _) => {\n+            method_trait(trait_id, method_num, _) |\n+            method_self(trait_id, method_num) => {\n                 if trait_id.crate == local_crate {\n                     match tcx.items.find(trait_id.node) {\n                         Some(node_item(item, _)) => {"}, {"sha": "afa008fdbb77bcf75f4a94adf1354779617bf5c6", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "patch": "@@ -1847,7 +1847,7 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n             }\n         }\n       }\n-      ast::item_impl(tps, trait_refs, _, ms) => {\n+      ast::item_impl(tps, trait_refs, self_ast_ty, ms) => {\n         meth::trans_impl(ccx, *path, item.ident, ms, tps, None);\n \n         // Translate any methods that have provided implementations.\n@@ -1860,13 +1860,22 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n                 loop;\n             }\n \n+            // Get the self type.\n+            let self_ty;\n+            match ccx.tcx.ast_ty_to_ty_cache.get(self_ast_ty) {\n+                ty::atttce_resolved(self_type) => self_ty = self_type,\n+                ty::atttce_unresolved => {\n+                    ccx.tcx.sess.impossible_case(item.span,\n+                                                 ~\"didn't cache self ast ty\");\n+                }\n+            }\n+\n             match ccx.tcx.items.get(trait_id.node) {\n                 ast_map::node_item(trait_item, _) => {\n                     match trait_item.node {\n                         ast::item_trait(tps, _, trait_methods) => {\n-                            // XXX: ty_self is wrong here. Get the real type.\n                             trans_trait(ccx, tps, trait_methods, path,\n-                                        item.ident, ty::mk_self(ccx.tcx));\n+                                        item.ident, self_ty);\n                         }\n                         _ => {\n                             ccx.tcx.sess.impossible_case(item.span,"}, {"sha": "b4a64abeed7e753ef312cd4a2d1e1f171ba6f456", "filename": "src/rustc/middle/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "patch": "@@ -154,6 +154,9 @@ fn trans_method_callee(bcx: block, callee_id: ast::node_id,\n         typeck::method_trait(_, off, vstore) => {\n             trans_trait_callee(bcx, callee_id, off, self, vstore)\n         }\n+        typeck::method_self(_, off) => {\n+            bcx.tcx().sess.span_bug(self.span, ~\"self method call\");\n+        }\n     }\n }\n "}, {"sha": "8eabf26e21786714b5f8b85a326f60974b111f45", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "patch": "@@ -247,7 +247,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n               typeck::method_param({param_num: param, _}) => {\n                 cx.uses[param] |= use_tydesc;\n               }\n-              typeck::method_trait(*) => (),\n+              typeck::method_trait(*) | typeck::method_self(*) => (),\n             }\n         }\n       }"}, {"sha": "f2f7b32b670626a303eaf2882837ca8ae78c3af7", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "patch": "@@ -2826,7 +2826,8 @@ fn method_call_bounds(tcx: ctxt, method_map: typeck::method_map,\n           }\n           typeck::method_param({trait_id:trt_id,\n                                 method_num:n_mth, _}) |\n-          typeck::method_trait(trt_id, n_mth, _) => {\n+          typeck::method_trait(trt_id, n_mth, _) |\n+          typeck::method_self(trt_id, n_mth) => {\n             // ...trait methods bounds, in contrast, include only the\n             // method bounds, so we must preprend the tps from the\n             // trait itself.  This ought to be harmonized."}, {"sha": "514fc2cfbb32ca548ad3283ca8b239ae6dc1d521", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "patch": "@@ -73,7 +73,7 @@ export deserialize_method_map_entry;\n export vtable_map;\n export vtable_res;\n export vtable_origin;\n-export method_static, method_param, method_trait;\n+export method_static, method_param, method_trait, method_self;\n export vtable_static, vtable_param, vtable_trait;\n export provided_methods_map;\n \n@@ -87,6 +87,9 @@ enum method_origin {\n \n     // method invoked on a trait instance\n     method_trait(ast::def_id, uint, ty::vstore),\n+\n+    // method invoked on \"self\" inside a default method\n+    method_self(ast::def_id, uint),\n }\n \n // details for a method invoked with a receiver whose type is a type parameter"}, {"sha": "f3b2c8f1b7ed55bbf1fae2d8cbb6d2f82e567f99", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=b80b0688d5ccc276e1dd3b6dfeeaea5e6f2782de", "patch": "@@ -232,9 +232,8 @@ impl LookupContext {\n                     let self_did = self.fcx.self_impl_def_id.expect(\n                         ~\"unexpected `none` for self_impl_def_id\");\n                     let substs = {self_r: None, self_ty: None, tps: ~[]};\n-                    self.push_inherent_candidates_from_trait(\n-                        self_ty, self_did, &substs,\n-                        ty::vstore_slice(ty::re_static));   // XXX: Wrong!\n+                    self.push_inherent_candidates_from_self(\n+                        self_ty, self_did, &substs);\n                 }\n                 ty_enum(did, _) | ty_class(did, _) => {\n                     self.push_inherent_impl_candidates_for_type(did);\n@@ -397,6 +396,33 @@ impl LookupContext {\n         });\n     }\n \n+    fn push_inherent_candidates_from_self(&self,\n+                                          self_ty: ty::t,\n+                                          did: def_id,\n+                                          substs: &ty::substs) {\n+        let tcx = self.tcx();\n+        let methods = ty::trait_methods(tcx, did);  // XXX: Inherited methods.\n+        let index;\n+        match vec::position(*methods, |m| m.ident == self.m_name) {\n+            Some(i) => index = i,\n+            None => return\n+        }\n+        let method = &methods[index];\n+\n+        let rcvr_substs = { self_ty: Some(self_ty), ..*substs };\n+        let (rcvr_ty, rcvr_substs) =\n+            self.create_rcvr_ty_and_substs_for_method(\n+                method.self_ty, self_ty, move rcvr_substs);\n+\n+        self.inherent_candidates.push(Candidate {\n+            rcvr_ty: rcvr_ty,\n+            rcvr_substs: move rcvr_substs,\n+            num_method_tps: method.tps.len(),\n+            self_mode: get_mode_from_self_type(method.self_ty),\n+            origin: method_self(did, index)\n+        });\n+    }\n+\n     fn push_inherent_impl_candidates_for_type(did: def_id)\n     {\n         let opt_impl_infos =\n@@ -737,7 +763,7 @@ impl LookupContext {\n          * vtable and hence cannot be monomorphized. */\n \n         match candidate.origin {\n-            method_static(*) | method_param(*) => {\n+            method_static(*) | method_param(*) | method_self(*) => {\n                 return; // not a call to a trait instance\n             }\n             method_trait(*) => {}\n@@ -772,7 +798,7 @@ impl LookupContext {\n             method_param(ref mp) => {\n                 type_of_trait_method(self.tcx(), mp.trait_id, mp.method_num)\n             }\n-            method_trait(did, idx, _) => {\n+            method_trait(did, idx, _) | method_self(did, idx) => {\n                 type_of_trait_method(self.tcx(), did, idx)\n             }\n         };\n@@ -793,7 +819,7 @@ impl LookupContext {\n             method_param(mp) => {\n                 self.report_param_candidate(idx, mp.trait_id)\n             }\n-            method_trait(trait_did, _, _) => {\n+            method_trait(trait_did, _, _) | method_self(trait_did, _) => {\n                 self.report_param_candidate(idx, trait_did)\n             }\n         }"}]}