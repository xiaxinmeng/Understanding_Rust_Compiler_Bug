{"sha": "ff2940a9f426375ce36c7c14712494c0c1493285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMjk0MGE5ZjQyNjM3NWNlMzZjN2MxNDcxMjQ5NGMwYzE0OTMyODU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-05T18:37:10Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-19T08:55:12Z"}, "message": "update `discriminant_value` usage in tests", "tree": {"sha": "35d2141f878bbd934fc5612653b6927d1061b7ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35d2141f878bbd934fc5612653b6927d1061b7ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2940a9f426375ce36c7c14712494c0c1493285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2940a9f426375ce36c7c14712494c0c1493285", "html_url": "https://github.com/rust-lang/rust/commit/ff2940a9f426375ce36c7c14712494c0c1493285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2940a9f426375ce36c7c14712494c0c1493285/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3188ca7dd9896c4033b074da455867c10d7612b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3188ca7dd9896c4033b074da455867c10d7612b4", "html_url": "https://github.com/rust-lang/rust/commit/3188ca7dd9896c4033b074da455867c10d7612b4"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "eb60aaf4b2d04156abc899b205a47ce2c8c18959", "filename": "src/test/ui/enum-discriminant/discriminant_value.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff2940a9f426375ce36c7c14712494c0c1493285/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2940a9f426375ce36c7c14712494c0c1493285/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs?ref=ff2940a9f426375ce36c7c14712494c0c1493285", "patch": "@@ -51,31 +51,31 @@ enum Mixed {\n }\n \n pub fn main() {\n-    assert_eq!(discriminant_value(&CLike1::A), 0);\n+    assert_eq!(discriminant_value(&CLike1::A), 0isize);\n     assert_eq!(discriminant_value(&CLike1::B), 1);\n     assert_eq!(discriminant_value(&CLike1::C), 2);\n     assert_eq!(discriminant_value(&CLike1::D), 3);\n \n-    assert_eq!(discriminant_value(&CLike2::A), 5);\n+    assert_eq!(discriminant_value(&CLike2::A), 5isize);\n     assert_eq!(discriminant_value(&CLike2::B), 2);\n     assert_eq!(discriminant_value(&CLike2::C), 19);\n     assert_eq!(discriminant_value(&CLike2::D), 20);\n \n-    assert_eq!(discriminant_value(&CLike3::A), 5);\n+    assert_eq!(discriminant_value(&CLike3::A), 5i8);\n     assert_eq!(discriminant_value(&CLike3::B), 6);\n-    assert_eq!(discriminant_value(&CLike3::C), -1_i8 as u64);\n+    assert_eq!(discriminant_value(&CLike3::C), -1);\n     assert_eq!(discriminant_value(&CLike3::D), 0);\n \n-    assert_eq!(discriminant_value(&ADT::First(0,0)), 0);\n+    assert_eq!(discriminant_value(&ADT::First(0,0)), 0isize);\n     assert_eq!(discriminant_value(&ADT::Second(5)), 1);\n \n-    assert_eq!(discriminant_value(&NullablePointer::Nothing), 1);\n+    assert_eq!(discriminant_value(&NullablePointer::Nothing), 1isize);\n     assert_eq!(discriminant_value(&NullablePointer::Something(&CONST)), 0);\n \n-    assert_eq!(discriminant_value(&10), 0);\n-    assert_eq!(discriminant_value(&\"test\"), 0);\n+    assert_eq!(discriminant_value(&10), 0u8);\n+    assert_eq!(discriminant_value(&\"test\"), 0u8);\n \n-    assert_eq!(3, discriminant_value(&Mixed::Unit));\n-    assert_eq!(2, discriminant_value(&Mixed::Tuple(5)));\n-    assert_eq!(1, discriminant_value(&Mixed::Struct{a: 7, b: 11}));\n+    assert_eq!(discriminant_value(&Mixed::Unit), 3isize);\n+    assert_eq!(discriminant_value(&Mixed::Tuple(5)), 2);\n+    assert_eq!(discriminant_value(&Mixed::Struct{a: 7, b: 11}), 1);\n }"}, {"sha": "5a528379b0414c5f4fee8bb166477c147d48b18c", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2940a9f426375ce36c7c14712494c0c1493285/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2940a9f426375ce36c7c14712494c0c1493285/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=ff2940a9f426375ce36c7c14712494c0c1493285", "patch": "@@ -13,5 +13,5 @@ enum MyWeirdOption<T> {\n \n fn main() {\n     assert_eq!(discriminant_value(&MyWeirdOption::<()>::None), 0);\n-    assert_eq!(discriminant_value(&MyWeirdOption::Some(())), core::mem::size_of::<usize>() as u64);\n+    assert_eq!(discriminant_value(&MyWeirdOption::Some(())), core::mem::size_of::<usize>());\n }"}, {"sha": "3d0930da422432793e19ee60134b905bf1f858ae", "filename": "src/test/ui/generator/discriminant.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff2940a9f426375ce36c7c14712494c0c1493285/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2940a9f426375ce36c7c14712494c0c1493285/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs?ref=ff2940a9f426375ce36c7c14712494c0c1493285", "patch": "@@ -3,10 +3,10 @@\n \n // run-pass\n \n-#![feature(generators, generator_trait, core_intrinsics)]\n+#![feature(generators, generator_trait, core_intrinsics, discriminant_kind)]\n \n use std::intrinsics::discriminant_value;\n-use std::marker::Unpin;\n+use std::marker::{Unpin, DiscriminantKind};\n use std::mem::size_of_val;\n use std::{cmp, ops::*};\n \n@@ -65,7 +65,10 @@ macro_rules! yield250 {\n     };\n }\n \n-fn cycle(gen: impl Generator<()> + Unpin, expected_max_discr: u64) {\n+fn cycle(\n+    gen: impl Generator<()> + Unpin + DiscriminantKind<Discriminant = i32>,\n+    expected_max_discr: i32\n+) {\n     let mut gen = Box::pin(gen);\n     let mut max_discr = 0;\n     loop {"}]}