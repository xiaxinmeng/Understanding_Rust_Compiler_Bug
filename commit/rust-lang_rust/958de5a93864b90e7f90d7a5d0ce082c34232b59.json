{"sha": "958de5a93864b90e7f90d7a5d0ce082c34232b59", "node_id": "C_kwDOAAsO6NoAKDk1OGRlNWE5Mzg2NGI5MGU3ZjkwZDdhNWQwY2UwODJjMzQyMzJiNTk", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-10-06T20:19:39Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-11-08T22:38:41Z"}, "message": "warn on must_use use on async fn's", "tree": {"sha": "fc6842f8a5327c30c2feeb844c46598d161b6b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc6842f8a5327c30c2feeb844c46598d161b6b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/958de5a93864b90e7f90d7a5d0ce082c34232b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/958de5a93864b90e7f90d7a5d0ce082c34232b59", "html_url": "https://github.com/rust-lang/rust/commit/958de5a93864b90e7f90d7a5d0ce082c34232b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/958de5a93864b90e7f90d7a5d0ce082c34232b59/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "495322d776fd6f679cd8cd4ca02b8fa834da654b", "url": "https://api.github.com/repos/rust-lang/rust/commits/495322d776fd6f679cd8cd4ca02b8fa834da654b", "html_url": "https://github.com/rust-lang/rust/commit/495322d776fd6f679cd8cd4ca02b8fa834da654b"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "633a90dd0ec7ce8cbd73eacd45a83f500cf07ce9", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/958de5a93864b90e7f90d7a5d0ce082c34232b59/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958de5a93864b90e7f90d7a5d0ce082c34232b59/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=958de5a93864b90e7f90d7a5d0ce082c34232b59", "patch": "@@ -112,6 +112,7 @@ impl CheckAttrVisitor<'tcx> {\n                     self.check_default_method_body_is_const(attr, span, target)\n                 }\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n+                sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1046,6 +1047,37 @@ impl CheckAttrVisitor<'tcx> {\n         is_valid\n     }\n \n+    /// Warns against some misuses of `#[must_use]`\n+    fn check_must_use(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: &Span,\n+        _target: Target,\n+    ) -> bool {\n+        let node = self.tcx.hir().get(hir_id);\n+        if let Some(fn_node) = node.fn_kind() {\n+            if let rustc_hir::IsAsync::Async = fn_node.asyncness() {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\n+                        \"`must_use` attribute on `async` functions \\\n+                              applies to the anonymous `Future` returned by the \\\n+                              function, not the value within.\",\n+                    )\n+                    .span_label(\n+                        *span,\n+                        \"this attribute does nothing, the `Future`s \\\n+                                returned by async functions are already `must_use`\",\n+                    )\n+                    .emit();\n+                });\n+            }\n+        }\n+\n+        // For now, its always valid\n+        true\n+    }\n+\n     /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n     fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {"}, {"sha": "7d17af11573796bbf61e7c8cd5e61dbc05fbd0c3", "filename": "src/test/ui/lint/unused/unused-async.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/958de5a93864b90e7f90d7a5d0ce082c34232b59/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958de5a93864b90e7f90d7a5d0ce082c34232b59/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs?ref=958de5a93864b90e7f90d7a5d0ce082c34232b59", "patch": "@@ -0,0 +1,43 @@\n+// edition:2018\n+// run-pass\n+#![allow(dead_code)]\n+\n+#[must_use]\n+//~^ WARNING `must_use`\n+async fn test() -> i32 {\n+    1\n+}\n+\n+\n+struct Wowee {}\n+\n+impl Wowee {\n+    #[must_use]\n+    //~^ WARNING `must_use`\n+    async fn test_method() -> i32 {\n+        1\n+    }\n+}\n+\n+/* FIXME(guswynn) update this test when async-fn-in-traits works\n+trait Doer {\n+    #[must_use]\n+    async fn test_trait_method() -> i32;\n+    WARNING must_use\n+    async fn test_other_trait() -> i32;\n+}\n+\n+impl Doer for Wowee {\n+    async fn test_trait_method() -> i32 {\n+        1\n+    }\n+    #[must_use]\n+    async fn test_other_trait() -> i32 {\n+        WARNING must_use\n+        1\n+    }\n+}\n+*/\n+\n+fn main() {\n+}"}, {"sha": "e470b6dac9473b6d21d31fbd69e4b29c104cbcee", "filename": "src/test/ui/lint/unused/unused-async.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/958de5a93864b90e7f90d7a5d0ce082c34232b59/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/958de5a93864b90e7f90d7a5d0ce082c34232b59/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr?ref=958de5a93864b90e7f90d7a5d0ce082c34232b59", "patch": "@@ -0,0 +1,26 @@\n+warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within.\n+  --> $DIR/unused-async.rs:5:1\n+   |\n+LL |   #[must_use]\n+   |   ^^^^^^^^^^^\n+LL |\n+LL | / async fn test() -> i32 {\n+LL | |     1\n+LL | | }\n+   | |_- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n+   |\n+   = note: `#[warn(unused_attributes)]` on by default\n+\n+warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within.\n+  --> $DIR/unused-async.rs:15:5\n+   |\n+LL |       #[must_use]\n+   |       ^^^^^^^^^^^\n+LL |\n+LL | /     async fn test_method() -> i32 {\n+LL | |         1\n+LL | |     }\n+   | |_____- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n+\n+warning: 2 warnings emitted\n+"}]}