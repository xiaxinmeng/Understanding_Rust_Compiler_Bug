{"sha": "1d37ed661a6922e7a167609b8cd7eb31e972b19b", "node_id": "C_kwDOAAsO6NoAKDFkMzdlZDY2MWE2OTIyZTdhMTY3NjA5YjhjZDdlYjMxZTk3MmIxOWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T20:43:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T20:43:13Z"}, "message": "Auto merge of #101611 - GuillaumeGomez:rollup-yw3qtug, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #101475 (Use futex-based locks and thread parker on Hermit)\n - #101492 (Suggest adding array lengths to references to arrays if possible)\n - #101495 (Compile spin_loop_hint as pause on x86 even without sse2 enabled)\n - #101529 (Fix the example code and doctest for Formatter::sign_plus)\n - #101600 (rustdoc: simplify the codeblock tooltip)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d05693f2376caa5a9725b030558f246f5edf995a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05693f2376caa5a9725b030558f246f5edf995a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d37ed661a6922e7a167609b8cd7eb31e972b19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d37ed661a6922e7a167609b8cd7eb31e972b19b", "html_url": "https://github.com/rust-lang/rust/commit/1d37ed661a6922e7a167609b8cd7eb31e972b19b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d37ed661a6922e7a167609b8cd7eb31e972b19b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f3001eecbe4cbd091c10ffab45b4c164bb507b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f3001eecbe4cbd091c10ffab45b4c164bb507b", "html_url": "https://github.com/rust-lang/rust/commit/98f3001eecbe4cbd091c10ffab45b4c164bb507b"}, {"sha": "2e258cec0505f58ffc2d1997acb5f4ea2e279500", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e258cec0505f58ffc2d1997acb5f4ea2e279500", "html_url": "https://github.com/rust-lang/rust/commit/2e258cec0505f58ffc2d1997acb5f4ea2e279500"}], "stats": {"total": 824, "additions": 244, "deletions": 580}, "files": [{"sha": "4e0e72d34153f0a84c173b2194f8f07846ea0f0c", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1656,12 +1656,13 @@ dependencies = [\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.2.0\"\n+version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1ab7905ea95c6d9af62940f9d7dd9596d54c334ae2c15300c482051292d5637f\"\n+checksum = \"ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\",\n+ \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n ]\n \n@@ -4608,7 +4609,7 @@ dependencies = [\n  \"dlmalloc\",\n  \"fortanix-sgx-abi\",\n  \"hashbrown\",\n- \"hermit-abi 0.2.0\",\n+ \"hermit-abi 0.2.6\",\n  \"libc\",\n  \"miniz_oxide 0.4.0\",\n  \"object 0.26.2\","}, {"sha": "0de99f7a3dbbdc9aef7fa146ddb6248312b1305e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -2401,6 +2401,14 @@ impl<'hir> Ty<'hir> {\n             _ => None,\n         }\n     }\n+\n+    pub fn peel_refs(&self) -> &Self {\n+        let mut final_ty = self;\n+        while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n+            final_ty = &ty;\n+        }\n+        final_ty\n+    }\n }\n \n /// Not represented directly in the AST; referred to by name through a `ty_path`."}, {"sha": "21392001364138f601c5c42b30aa6a8c9a4a7c1b", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1305,31 +1305,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn suggest_array_len(&self, expr: &'tcx hir::Expr<'tcx>, array_len: u64) {\n-        if let Some(parent_hir_id) = self.tcx.hir().find_parent_node(expr.hir_id) {\n-            let ty = match self.tcx.hir().find(parent_hir_id) {\n-                Some(\n-                    hir::Node::Local(hir::Local { ty: Some(ty), .. })\n-                    | hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(ty, _), .. }),\n-                ) => Some(ty),\n-                _ => None,\n-            };\n-            if let Some(ty) = ty\n-                && let hir::TyKind::Array(_, length) = ty.kind\n-                && let hir::ArrayLen::Body(hir::AnonConst { hir_id, .. }) = length\n-                && let Some(span) = self.tcx.hir().opt_span(hir_id)\n-            {\n-                match self.tcx.sess.diagnostic().steal_diagnostic(span, StashKey::UnderscoreForArrayLengths) {\n-                    Some(mut err) => {\n-                        err.span_suggestion(\n-                            span,\n-                            \"consider specifying the array length\",\n-                            array_len,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        err.emit();\n-                    }\n-                    None => ()\n+        let parent_node = self.tcx.hir().parent_iter(expr.hir_id).find(|(_, node)| {\n+            !matches!(node, hir::Node::Expr(hir::Expr { kind: hir::ExprKind::AddrOf(..), .. }))\n+        });\n+        let Some((_,\n+            hir::Node::Local(hir::Local { ty: Some(ty), .. })\n+            | hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(ty, _), .. }))\n+        ) = parent_node else {\n+            return\n+        };\n+        if let hir::TyKind::Array(_, length) = ty.peel_refs().kind\n+            && let hir::ArrayLen::Body(hir::AnonConst { hir_id, .. }) = length\n+            && let Some(span) = self.tcx.hir().opt_span(hir_id)\n+        {\n+            match self.tcx.sess.diagnostic().steal_diagnostic(span, StashKey::UnderscoreForArrayLengths) {\n+                Some(mut err) => {\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider specifying the array length\",\n+                        array_len,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.emit();\n                 }\n+                None => ()\n             }\n         }\n     }"}, {"sha": "905212eb372b12f8dfe185691abd435563c6deb1", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1819,14 +1819,15 @@ impl<'a> Formatter<'a> {\n     ///             write!(formatter,\n     ///                    \"Foo({}{})\",\n     ///                    if self.0 < 0 { '-' } else { '+' },\n-    ///                    self.0)\n+    ///                    self.0.abs())\n     ///         } else {\n     ///             write!(formatter, \"Foo({})\", self.0)\n     ///         }\n     ///     }\n     /// }\n     ///\n     /// assert_eq!(&format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n+    /// assert_eq!(&format!(\"{:+}\", Foo(-23)), \"Foo(-23)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[must_use]"}, {"sha": "764e2796202c9ef72626e8cdda1a9ccdfc2b14e0", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -160,19 +160,16 @@ pub const unsafe fn unreachable_unchecked() -> ! {\n #[inline]\n #[stable(feature = \"renamed_spin_loop\", since = \"1.49.0\")]\n pub fn spin_loop() {\n-    #[cfg(all(any(target_arch = \"x86\", target_arch = \"x86_64\"), target_feature = \"sse2\"))]\n+    #[cfg(target_arch = \"x86\")]\n     {\n-        #[cfg(target_arch = \"x86\")]\n-        {\n-            // SAFETY: the `cfg` attr ensures that we only execute this on x86 targets.\n-            unsafe { crate::arch::x86::_mm_pause() };\n-        }\n+        // SAFETY: the `cfg` attr ensures that we only execute this on x86 targets.\n+        unsafe { crate::arch::x86::_mm_pause() };\n+    }\n \n-        #[cfg(target_arch = \"x86_64\")]\n-        {\n-            // SAFETY: the `cfg` attr ensures that we only execute this on x86_64 targets.\n-            unsafe { crate::arch::x86_64::_mm_pause() };\n-        }\n+    #[cfg(target_arch = \"x86_64\")]\n+    {\n+        // SAFETY: the `cfg` attr ensures that we only execute this on x86_64 targets.\n+        unsafe { crate::arch::x86_64::_mm_pause() };\n     }\n \n     // RISC-V platform spin loop hint implementation"}, {"sha": "324ecc8047730df5ed4407ba2f5488a726c850c5", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -42,7 +42,7 @@ dlmalloc = { version = \"0.2.3\", features = ['rustc-dep-of-std'] }\n fortanix-sgx-abi = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n \n [target.'cfg(target_os = \"hermit\")'.dependencies]\n-hermit-abi = { version = \"0.2.0\", features = ['rustc-dep-of-std'] }\n+hermit-abi = { version = \"0.2.6\", features = ['rustc-dep-of-std'] }\n \n [target.wasm32-wasi.dependencies]\n wasi = { version = \"0.11.0\", features = ['rustc-dep-of-std'], default-features = false }"}, {"sha": "22059ca0dbe107ec24b6f64c3bf5c6f60f6d1bec", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/98f3001eecbe4cbd091c10ffab45b4c164bb507b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f3001eecbe4cbd091c10ffab45b4c164bb507b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=98f3001eecbe4cbd091c10ffab45b4c164bb507b", "patch": "@@ -1,90 +0,0 @@\n-use crate::ffi::c_void;\n-use crate::ptr;\n-use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n-use crate::sys::hermit::abi;\n-use crate::sys::locks::Mutex;\n-use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n-use crate::time::Duration;\n-\n-// The implementation is inspired by Andrew D. Birrell's paper\n-// \"Implementing Condition Variables with Semaphores\"\n-\n-pub struct Condvar {\n-    counter: AtomicUsize,\n-    sem1: *const c_void,\n-    sem2: *const c_void,\n-}\n-\n-pub(crate) type MovableCondvar = LazyBox<Condvar>;\n-\n-impl LazyInit for Condvar {\n-    fn init() -> Box<Self> {\n-        Box::new(Self::new())\n-    }\n-}\n-\n-unsafe impl Send for Condvar {}\n-unsafe impl Sync for Condvar {}\n-\n-impl Condvar {\n-    pub fn new() -> Self {\n-        let mut condvar =\n-            Self { counter: AtomicUsize::new(0), sem1: ptr::null(), sem2: ptr::null() };\n-        unsafe {\n-            let _ = abi::sem_init(&mut condvar.sem1, 0);\n-            let _ = abi::sem_init(&mut condvar.sem2, 0);\n-        }\n-        condvar\n-    }\n-\n-    pub unsafe fn notify_one(&self) {\n-        if self.counter.load(SeqCst) > 0 {\n-            self.counter.fetch_sub(1, SeqCst);\n-            abi::sem_post(self.sem1);\n-            abi::sem_timedwait(self.sem2, 0);\n-        }\n-    }\n-\n-    pub unsafe fn notify_all(&self) {\n-        let counter = self.counter.swap(0, SeqCst);\n-        for _ in 0..counter {\n-            abi::sem_post(self.sem1);\n-        }\n-        for _ in 0..counter {\n-            abi::sem_timedwait(self.sem2, 0);\n-        }\n-    }\n-\n-    pub unsafe fn wait(&self, mutex: &Mutex) {\n-        self.counter.fetch_add(1, SeqCst);\n-        mutex.unlock();\n-        abi::sem_timedwait(self.sem1, 0);\n-        abi::sem_post(self.sem2);\n-        mutex.lock();\n-    }\n-\n-    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n-        self.counter.fetch_add(1, SeqCst);\n-        mutex.unlock();\n-        let millis = dur.as_millis().min(u32::MAX as u128) as u32;\n-\n-        let res = if millis > 0 {\n-            abi::sem_timedwait(self.sem1, millis)\n-        } else {\n-            abi::sem_trywait(self.sem1)\n-        };\n-\n-        abi::sem_post(self.sem2);\n-        mutex.lock();\n-        res == 0\n-    }\n-}\n-\n-impl Drop for Condvar {\n-    fn drop(&mut self) {\n-        unsafe {\n-            let _ = abi::sem_destroy(self.sem1);\n-            let _ = abi::sem_destroy(self.sem2);\n-        }\n-    }\n-}"}, {"sha": "b64c174b06c6df2ddda458f2742988a1010374b5", "filename": "library/std/src/sys/hermit/futex.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffutex.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -0,0 +1,39 @@\n+use super::abi;\n+use crate::ptr::null;\n+use crate::sync::atomic::AtomicU32;\n+use crate::time::Duration;\n+\n+pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n+    // Calculate the timeout as a relative timespec.\n+    //\n+    // Overflows are rounded up to an infinite timeout (None).\n+    let timespec = timeout.and_then(|dur| {\n+        Some(abi::timespec {\n+            tv_sec: dur.as_secs().try_into().ok()?,\n+            tv_nsec: dur.subsec_nanos().into(),\n+        })\n+    });\n+\n+    let r = unsafe {\n+        abi::futex_wait(\n+            futex.as_mut_ptr(),\n+            expected,\n+            timespec.as_ref().map_or(null(), |t| t as *const abi::timespec),\n+            abi::FUTEX_RELATIVE_TIMEOUT,\n+        )\n+    };\n+\n+    r != -abi::errno::ETIMEDOUT\n+}\n+\n+#[inline]\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n+    unsafe { abi::futex_wake(futex.as_mut_ptr(), 1) > 0 }\n+}\n+\n+#[inline]\n+pub fn futex_wake_all(futex: &AtomicU32) {\n+    unsafe {\n+        abi::futex_wake(futex.as_mut_ptr(), i32::MAX);\n+    }\n+}"}, {"sha": "827d82900eae41d0b2f4972fd4727a2da30237a8", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -25,6 +25,7 @@ pub mod cmath;\n pub mod env;\n pub mod fd;\n pub mod fs;\n+pub mod futex;\n #[path = \"../unsupported/io.rs\"]\n pub mod io;\n pub mod memchr;\n@@ -45,14 +46,14 @@ pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod time;\n \n-mod condvar;\n-mod mutex;\n-mod rwlock;\n-\n+#[path = \"../unix/locks\"]\n pub mod locks {\n-    pub use super::condvar::*;\n-    pub use super::mutex::*;\n-    pub use super::rwlock::*;\n+    mod futex_condvar;\n+    mod futex_mutex;\n+    mod futex_rwlock;\n+    pub(crate) use futex_condvar::MovableCondvar;\n+    pub(crate) use futex_mutex::{MovableMutex, Mutex};\n+    pub(crate) use futex_rwlock::{MovableRwLock, RwLock};\n }\n \n use crate::io::ErrorKind;"}, {"sha": "30c8fc4562d52dd4ce2affa0dad5459ebda821cb", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "removed", "additions": 0, "deletions": 212, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/98f3001eecbe4cbd091c10ffab45b4c164bb507b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f3001eecbe4cbd091c10ffab45b4c164bb507b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=98f3001eecbe4cbd091c10ffab45b4c164bb507b", "patch": "@@ -1,212 +0,0 @@\n-use crate::cell::UnsafeCell;\n-use crate::collections::VecDeque;\n-use crate::hint;\n-use crate::ops::{Deref, DerefMut, Drop};\n-use crate::sync::atomic::{AtomicUsize, Ordering};\n-use crate::sys::hermit::abi;\n-\n-/// This type provides a lock based on busy waiting to realize mutual exclusion\n-///\n-/// # Description\n-///\n-/// This structure behaves a lot like a common mutex. There are some differences:\n-///\n-/// - By using busy waiting, it can be used outside the runtime.\n-/// - It is a so called ticket lock and is completely fair.\n-#[cfg_attr(target_arch = \"x86_64\", repr(align(128)))]\n-#[cfg_attr(not(target_arch = \"x86_64\"), repr(align(64)))]\n-struct Spinlock<T: ?Sized> {\n-    queue: AtomicUsize,\n-    dequeue: AtomicUsize,\n-    data: UnsafeCell<T>,\n-}\n-\n-unsafe impl<T: ?Sized + Send> Sync for Spinlock<T> {}\n-unsafe impl<T: ?Sized + Send> Send for Spinlock<T> {}\n-\n-/// A guard to which the protected data can be accessed\n-///\n-/// When the guard falls out of scope it will release the lock.\n-struct SpinlockGuard<'a, T: ?Sized + 'a> {\n-    dequeue: &'a AtomicUsize,\n-    data: &'a mut T,\n-}\n-\n-impl<T> Spinlock<T> {\n-    pub const fn new(user_data: T) -> Spinlock<T> {\n-        Spinlock {\n-            queue: AtomicUsize::new(0),\n-            dequeue: AtomicUsize::new(1),\n-            data: UnsafeCell::new(user_data),\n-        }\n-    }\n-\n-    #[inline]\n-    fn obtain_lock(&self) {\n-        let ticket = self.queue.fetch_add(1, Ordering::SeqCst) + 1;\n-        let mut counter: u16 = 0;\n-        while self.dequeue.load(Ordering::SeqCst) != ticket {\n-            counter += 1;\n-            if counter < 100 {\n-                hint::spin_loop();\n-            } else {\n-                counter = 0;\n-                unsafe {\n-                    abi::yield_now();\n-                }\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    pub unsafe fn lock(&self) -> SpinlockGuard<'_, T> {\n-        self.obtain_lock();\n-        SpinlockGuard { dequeue: &self.dequeue, data: &mut *self.data.get() }\n-    }\n-}\n-\n-impl<T: ?Sized + Default> Default for Spinlock<T> {\n-    fn default() -> Spinlock<T> {\n-        Spinlock::new(Default::default())\n-    }\n-}\n-\n-impl<'a, T: ?Sized> Deref for SpinlockGuard<'a, T> {\n-    type Target = T;\n-    fn deref(&self) -> &T {\n-        &*self.data\n-    }\n-}\n-\n-impl<'a, T: ?Sized> DerefMut for SpinlockGuard<'a, T> {\n-    fn deref_mut(&mut self) -> &mut T {\n-        &mut *self.data\n-    }\n-}\n-\n-impl<'a, T: ?Sized> Drop for SpinlockGuard<'a, T> {\n-    /// The dropping of the SpinlockGuard will release the lock it was created from.\n-    fn drop(&mut self) {\n-        self.dequeue.fetch_add(1, Ordering::SeqCst);\n-    }\n-}\n-\n-/// Realize a priority queue for tasks\n-struct PriorityQueue {\n-    queues: [Option<VecDeque<abi::Tid>>; abi::NO_PRIORITIES],\n-    prio_bitmap: u64,\n-}\n-\n-impl PriorityQueue {\n-    pub const fn new() -> PriorityQueue {\n-        PriorityQueue {\n-            queues: [\n-                None, None, None, None, None, None, None, None, None, None, None, None, None, None,\n-                None, None, None, None, None, None, None, None, None, None, None, None, None, None,\n-                None, None, None,\n-            ],\n-            prio_bitmap: 0,\n-        }\n-    }\n-\n-    /// Add a task id by its priority to the queue\n-    pub fn push(&mut self, prio: abi::Priority, id: abi::Tid) {\n-        let i: usize = prio.into().into();\n-        self.prio_bitmap |= (1 << i) as u64;\n-        if let Some(queue) = &mut self.queues[i] {\n-            queue.push_back(id);\n-        } else {\n-            let mut queue = VecDeque::new();\n-            queue.push_back(id);\n-            self.queues[i] = Some(queue);\n-        }\n-    }\n-\n-    fn pop_from_queue(&mut self, queue_index: usize) -> Option<abi::Tid> {\n-        if let Some(queue) = &mut self.queues[queue_index] {\n-            let id = queue.pop_front();\n-\n-            if queue.is_empty() {\n-                self.prio_bitmap &= !(1 << queue_index as u64);\n-            }\n-\n-            id\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Pop the task handle with the highest priority from the queue\n-    pub fn pop(&mut self) -> Option<abi::Tid> {\n-        for i in 0..abi::NO_PRIORITIES {\n-            if self.prio_bitmap & (1 << i) != 0 {\n-                return self.pop_from_queue(i);\n-            }\n-        }\n-\n-        None\n-    }\n-}\n-\n-struct MutexInner {\n-    locked: bool,\n-    blocked_task: PriorityQueue,\n-}\n-\n-impl MutexInner {\n-    pub const fn new() -> MutexInner {\n-        MutexInner { locked: false, blocked_task: PriorityQueue::new() }\n-    }\n-}\n-\n-pub struct Mutex {\n-    inner: Spinlock<MutexInner>,\n-}\n-\n-pub type MovableMutex = Mutex;\n-\n-unsafe impl Send for Mutex {}\n-unsafe impl Sync for Mutex {}\n-\n-impl Mutex {\n-    pub const fn new() -> Mutex {\n-        Mutex { inner: Spinlock::new(MutexInner::new()) }\n-    }\n-\n-    #[inline]\n-    pub unsafe fn lock(&self) {\n-        loop {\n-            let mut guard = self.inner.lock();\n-            if guard.locked == false {\n-                guard.locked = true;\n-                return;\n-            } else {\n-                let prio = abi::get_priority();\n-                let id = abi::getpid();\n-\n-                guard.blocked_task.push(prio, id);\n-                abi::block_current_task();\n-                drop(guard);\n-                abi::yield_now();\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    pub unsafe fn unlock(&self) {\n-        let mut guard = self.inner.lock();\n-        guard.locked = false;\n-        if let Some(tid) = guard.blocked_task.pop() {\n-            abi::wakeup_task(tid);\n-        }\n-    }\n-\n-    #[inline]\n-    pub unsafe fn try_lock(&self) -> bool {\n-        let mut guard = self.inner.lock();\n-        if guard.locked == false {\n-            guard.locked = true;\n-        }\n-        guard.locked\n-    }\n-}"}, {"sha": "1adf0b2be6b7342d3e5d0bfec3a234a43b3e5308", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "removed", "additions": 0, "deletions": 143, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/98f3001eecbe4cbd091c10ffab45b4c164bb507b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f3001eecbe4cbd091c10ffab45b4c164bb507b/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=98f3001eecbe4cbd091c10ffab45b4c164bb507b", "patch": "@@ -1,143 +0,0 @@\n-use crate::cell::UnsafeCell;\n-use crate::sys::locks::{MovableCondvar, Mutex};\n-\n-pub struct RwLock {\n-    lock: Mutex,\n-    cond: MovableCondvar,\n-    state: UnsafeCell<State>,\n-}\n-\n-pub type MovableRwLock = RwLock;\n-\n-enum State {\n-    Unlocked,\n-    Reading(usize),\n-    Writing,\n-}\n-\n-unsafe impl Send for RwLock {}\n-unsafe impl Sync for RwLock {}\n-\n-// This rwlock implementation is a relatively simple implementation which has a\n-// condition variable for readers/writers as well as a mutex protecting the\n-// internal state of the lock. A current downside of the implementation is that\n-// unlocking the lock will notify *all* waiters rather than just readers or just\n-// writers. This can cause lots of \"thundering stampede\" problems. While\n-// hopefully correct this implementation is very likely to want to be changed in\n-// the future.\n-\n-impl RwLock {\n-    pub const fn new() -> RwLock {\n-        RwLock {\n-            lock: Mutex::new(),\n-            cond: MovableCondvar::new(),\n-            state: UnsafeCell::new(State::Unlocked),\n-        }\n-    }\n-\n-    #[inline]\n-    pub unsafe fn read(&self) {\n-        self.lock.lock();\n-        while !(*self.state.get()).inc_readers() {\n-            self.cond.wait(&self.lock);\n-        }\n-        self.lock.unlock();\n-    }\n-\n-    #[inline]\n-    pub unsafe fn try_read(&self) -> bool {\n-        self.lock.lock();\n-        let ok = (*self.state.get()).inc_readers();\n-        self.lock.unlock();\n-        return ok;\n-    }\n-\n-    #[inline]\n-    pub unsafe fn write(&self) {\n-        self.lock.lock();\n-        while !(*self.state.get()).inc_writers() {\n-            self.cond.wait(&self.lock);\n-        }\n-        self.lock.unlock();\n-    }\n-\n-    #[inline]\n-    pub unsafe fn try_write(&self) -> bool {\n-        self.lock.lock();\n-        let ok = (*self.state.get()).inc_writers();\n-        self.lock.unlock();\n-        return ok;\n-    }\n-\n-    #[inline]\n-    pub unsafe fn read_unlock(&self) {\n-        self.lock.lock();\n-        let notify = (*self.state.get()).dec_readers();\n-        self.lock.unlock();\n-        if notify {\n-            // FIXME: should only wake up one of these some of the time\n-            self.cond.notify_all();\n-        }\n-    }\n-\n-    #[inline]\n-    pub unsafe fn write_unlock(&self) {\n-        self.lock.lock();\n-        (*self.state.get()).dec_writers();\n-        self.lock.unlock();\n-        // FIXME: should only wake up one of these some of the time\n-        self.cond.notify_all();\n-    }\n-}\n-\n-impl State {\n-    fn inc_readers(&mut self) -> bool {\n-        match *self {\n-            State::Unlocked => {\n-                *self = State::Reading(1);\n-                true\n-            }\n-            State::Reading(ref mut cnt) => {\n-                *cnt += 1;\n-                true\n-            }\n-            State::Writing => false,\n-        }\n-    }\n-\n-    fn inc_writers(&mut self) -> bool {\n-        match *self {\n-            State::Unlocked => {\n-                *self = State::Writing;\n-                true\n-            }\n-            State::Reading(_) | State::Writing => false,\n-        }\n-    }\n-\n-    fn dec_readers(&mut self) -> bool {\n-        let zero = match *self {\n-            State::Reading(ref mut cnt) => {\n-                *cnt -= 1;\n-                *cnt == 0\n-            }\n-            State::Unlocked | State::Writing => invalid(),\n-        };\n-        if zero {\n-            *self = State::Unlocked;\n-        }\n-        zero\n-    }\n-\n-    fn dec_writers(&mut self) {\n-        match *self {\n-            State::Writing => {}\n-            State::Unlocked | State::Reading(_) => invalid(),\n-        }\n-        *self = State::Unlocked;\n-    }\n-}\n-\n-fn invalid() -> ! {\n-    panic!(\"inconsistent rwlock\");\n-}"}, {"sha": "f86a9a555d322e02c08c885aadcd4af194795921", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -7,6 +7,7 @@ cfg_if::cfg_if! {\n         target_os = \"openbsd\",\n         target_os = \"dragonfly\",\n         target_os = \"fuchsia\",\n+        target_os = \"hermit\",\n     ))] {\n         mod futex;\n         pub use futex::Parker;"}, {"sha": "84781d898385921d1da249da9eb39eae1177a4fa", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -52,35 +52,14 @@ pub(crate) fn render_example_with_highlighting(\n     tooltip: Tooltip,\n     playground_button: Option<&str>,\n ) {\n-    let class = match tooltip {\n-        Tooltip::Ignore => \" ignore\",\n-        Tooltip::CompileFail => \" compile_fail\",\n-        Tooltip::ShouldPanic => \" should_panic\",\n-        Tooltip::Edition(_) => \" edition\",\n-        Tooltip::None => \"\",\n-    };\n-\n-    if tooltip != Tooltip::None {\n-        write!(\n-            out,\n-            \"<div class='information'><div class='tooltip{}'{}>\u24d8</div></div>\",\n-            class,\n-            if let Tooltip::Edition(edition_info) = tooltip {\n-                format!(\" data-edition=\\\"{}\\\"\", edition_info)\n-            } else {\n-                String::new()\n-            },\n-        );\n-    }\n-\n-    write_header(out, &format!(\"rust-example-rendered{}\", class), None);\n+    write_header(out, \"rust-example-rendered\", None, tooltip);\n     write_code(out, src, None, None);\n     write_footer(out, playground_button);\n }\n \n /// Highlights `src` as a macro, returning the HTML output.\n pub(crate) fn render_macro_with_highlighting(src: &str, out: &mut Buffer) {\n-    write_header(out, \"macro\", None);\n+    write_header(out, \"macro\", None, Tooltip::None);\n     write_code(out, src, None, None);\n     write_footer(out, None);\n }\n@@ -93,20 +72,42 @@ pub(crate) fn render_source_with_highlighting(\n     href_context: HrefContext<'_, '_, '_>,\n     decoration_info: DecorationInfo,\n ) {\n-    write_header(out, \"\", Some(line_numbers));\n+    write_header(out, \"\", Some(line_numbers), Tooltip::None);\n     write_code(out, src, Some(href_context), Some(decoration_info));\n     write_footer(out, None);\n }\n \n-fn write_header(out: &mut Buffer, class: &str, extra_content: Option<Buffer>) {\n+fn write_header(out: &mut Buffer, class: &str, extra_content: Option<Buffer>, tooltip: Tooltip) {\n     write!(out, \"<div class=\\\"example-wrap\\\">\");\n+\n+    let tooltip_class = match tooltip {\n+        Tooltip::Ignore => \" ignore\",\n+        Tooltip::CompileFail => \" compile_fail\",\n+        Tooltip::ShouldPanic => \" should_panic\",\n+        Tooltip::Edition(_) => \" edition\",\n+        Tooltip::None => \"\",\n+    };\n+\n+    if tooltip != Tooltip::None {\n+        write!(\n+            out,\n+            \"<div class='information'><div class='tooltip{}'{}>\u24d8</div></div>\",\n+            tooltip_class,\n+            if let Tooltip::Edition(edition_info) = tooltip {\n+                format!(\" data-edition=\\\"{}\\\"\", edition_info)\n+            } else {\n+                String::new()\n+            },\n+        );\n+    }\n+\n     if let Some(extra) = extra_content {\n         out.push_buffer(extra);\n     }\n-    if class.is_empty() {\n+    if class.is_empty() && tooltip_class.is_empty() {\n         write!(out, \"<pre class=\\\"rust\\\">\");\n     } else {\n-        write!(out, \"<pre class=\\\"rust {}\\\">\", class);\n+        write!(out, \"<pre class=\\\"rust {class}{tooltip_class}\\\">\");\n     }\n     write!(out, \"<code>\");\n }"}, {"sha": "ec9e3b1ecd17b90e1f5bd961ded753528cc87d15", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -347,10 +347,6 @@ img {\n \tmax-width: 100%;\n }\n \n-li {\n-\tposition: relative;\n-}\n-\n .source .content {\n \tmax-width: none;\n \toverflow: visible;\n@@ -652,7 +648,7 @@ h2.location a {\n \tposition: relative;\n }\n \n-.docblock > :not(.information):not(.more-examples-toggle) {\n+.docblock > :not(.more-examples-toggle):not(.example-wrap) {\n \tmax-width: 100%;\n \toverflow-x: auto;\n }\n@@ -1169,12 +1165,12 @@ pre.ignore {\n \tborder-left: 2px solid var(--codeblock-ignore-color);\n }\n \n-pre.compile_fail:hover, .information:hover + .example-wrap pre.compile_fail,\n-pre.should_panic:hover, .information:hover + .example-wrap pre.should_panic {\n+.example-wrap:hover pre.compile_fail,\n+.example-wrap:hover pre.should_panic {\n \tborder-left: 2px solid var(--codeblock-error-hover-color);\n }\n \n-pre.ignore:hover, .information:hover + .example-wrap pre.ignore {\n+.example-wrap:hover pre.ignore {\n \tborder-left: 2px solid var(--codeblock-ignore-hover-color);\n }\n \n@@ -1187,12 +1183,12 @@ pre.ignore:hover, .information:hover + .example-wrap pre.ignore {\n \tcolor:  var(--codeblock-ignore-color);\n }\n \n-.information > .compile_fail:hover,\n-.information > .should_panic:hover {\n+.example-wrap:hover .tooltip.compile_fail,\n+.example-wrap:hover .tooltip.should_panic {\n \tcolor: var(--codeblock-error-hover-color);\n }\n \n-.information > .ignore:hover {\n+.example-wrap:hover .tooltip.ignore {\n \tcolor: var(--codeblock-ignore-hover-color);\n }\n \n@@ -1727,7 +1723,7 @@ in storage.js plus the media query with (max-width: 700px)\n \tto prevent an overlay between the \"collapse toggle\" and the information tooltip.\n \tHowever, it's not needed with smaller screen width because the doc/code block is always put\n \t\"one line\" below. */\n-\t.docblock > .information:first-child > .tooltip {\n+\t.docblock > .example-wrap:first-child > .information > .tooltip {\n \t\tmargin-top: 16px;\n \t}\n "}, {"sha": "6e9660ddcc96a651f24ac02c5aa9197503c523b9", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -699,9 +699,8 @@ function loadCss(cssFileName) {\n \n     (function() {\n         // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n-        let lineNumbersFunc = () => {};\n         if (getSettingValue(\"line-numbers\") === \"true\") {\n-            lineNumbersFunc = x => {\n+            onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), x => {\n                 const count = x.textContent.split(\"\\n\").length;\n                 const elems = [];\n                 for (let i = 0; i < count; ++i) {\n@@ -711,26 +710,8 @@ function loadCss(cssFileName) {\n                 addClass(node, \"line-number\");\n                 node.innerHTML = elems.join(\"\\n\");\n                 x.parentNode.insertBefore(node, x);\n-            };\n+            });\n         }\n-        onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), e => {\n-            if (hasClass(e, \"compile_fail\")) {\n-                e.addEventListener(\"mouseover\", function() {\n-                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"#f00\";\n-                });\n-                e.addEventListener(\"mouseout\", function() {\n-                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n-                });\n-            } else if (hasClass(e, \"ignore\")) {\n-                e.addEventListener(\"mouseover\", function() {\n-                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"#ff9200\";\n-                });\n-                e.addEventListener(\"mouseout\", function() {\n-                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n-                });\n-            }\n-            lineNumbersFunc(e);\n-        });\n     }());\n \n     let oldSidebarScrollPosition = null;"}, {"sha": "c249895503a91cc2af533991b09a7e4894498793", "filename": "src/test/rustdoc-gui/check_info_sign_position.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -4,8 +4,8 @@ goto: file://|DOC_PATH|/test_docs/index.html\n goto: ./fn.check_list_code_block.html\n // If the codeblock is the first element of the docblock, the information tooltip must have\n // have some top margin to avoid going over the toggle (the \"[+]\").\n-assert-css: (\".docblock > .information > .compile_fail\", { \"margin-top\": \"16px\" })\n+assert-css: (\".docblock > .example-wrap > .information > .compile_fail\", { \"margin-top\": \"16px\" })\n // Checks that the other codeblocks don't have this top margin.\n-assert-css: (\"ol > li > .information > .compile_fail\", { \"margin-top\": \"0px\" })\n-assert-css: (\"ol > li > .information > .ignore\", { \"margin-top\": \"0px\" })\n-assert-css: (\".docblock > .information > .ignore\", { \"margin-top\": \"0px\" })\n+assert-css: (\"ol > li > .example-wrap > .information > .compile_fail\", { \"margin-top\": \"0px\" })\n+assert-css: (\"ol > li > .example-wrap > .information > .ignore\", { \"margin-top\": \"0px\" })\n+assert-css: (\".docblock > .example-wrap > .information > .ignore\", { \"margin-top\": \"0px\" })"}, {"sha": "4e85c33c8944ebade6eaec40986689733ee85f88", "filename": "src/test/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -8,89 +8,89 @@ reload:\n \n // compile_fail block\n assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n-assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap pre.compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n \n move-cursor-to: \".docblock .information .compile_fail\"\n \n assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgb(255, 0, 0)\"})\n-assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n \n // should_panic block\n assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n-assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap pre.should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n \n move-cursor-to: \".docblock .information .should_panic\"\n \n assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgb(255, 0, 0)\"})\n-assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n \n // ignore block\n assert-css: (\".docblock .information .ignore\", {\"color\": \"rgba(255, 142, 0, 0.6)\"})\n-assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n+assert-css: (\".docblock .example-wrap pre.ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n \n move-cursor-to: \".docblock .information .ignore\"\n \n assert-css: (\".docblock .information .ignore\", {\"color\": \"rgb(255, 142, 0)\"})\n-assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})\n \n \n // Light theme.\n local-storage: {\"rustdoc-theme\": \"light\"}\n reload:\n \n assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n-assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap pre.compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n \n move-cursor-to: \".docblock .information .compile_fail\"\n \n assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgb(255, 0, 0)\"})\n-assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n \n // should_panic block\n assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n-assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap pre.should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n \n move-cursor-to: \".docblock .information .should_panic\"\n \n assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgb(255, 0, 0)\"})\n-assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n \n // ignore block\n assert-css: (\".docblock .information .ignore\", {\"color\": \"rgba(255, 142, 0, 0.6)\"})\n-assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n+assert-css: (\".docblock .example-wrap pre.ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n \n move-cursor-to: \".docblock .information .ignore\"\n \n assert-css: (\".docblock .information .ignore\", {\"color\": \"rgb(255, 142, 0)\"})\n-assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})\n \n \n // Ayu theme.\n local-storage: {\"rustdoc-theme\": \"ayu\"}\n reload:\n \n assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n-assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap pre.compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n \n move-cursor-to: \".docblock .information .compile_fail\"\n \n assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgb(255, 0, 0)\"})\n-assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n \n // should_panic block\n assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n-assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap pre.should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n \n move-cursor-to: \".docblock .information .should_panic\"\n \n assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgb(255, 0, 0)\"})\n-assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n \n // ignore block\n assert-css: (\".docblock .information .ignore\", {\"color\": \"rgba(255, 142, 0, 0.6)\"})\n-assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n+assert-css: (\".docblock .example-wrap pre.ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n \n move-cursor-to: \".docblock .information .ignore\"\n \n assert-css: (\".docblock .information .ignore\", {\"color\": \"rgb(255, 142, 0)\"})\n-assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})\n+assert-css: (\".docblock .example-wrap pre.ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})"}, {"sha": "5be1aff8d3bce7bbf2e08f128a95ae7edfdaee32", "filename": "src/test/rustdoc-gui/overflow-tooltip-information.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Frustdoc-gui%2Foverflow-tooltip-information.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Frustdoc-gui%2Foverflow-tooltip-information.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Foverflow-tooltip-information.goml?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -2,7 +2,7 @@\n // have overflow and max-width CSS rules set because they create a bug in firefox on\n // mac. For more information: https://github.com/rust-lang/rust/issues/89185\n goto: file://|DOC_PATH|/test_docs/fn.foo.html\n-assert-css: (\".docblock > .information\", {\n+assert-css: (\".docblock > .example-wrap > .information\", {\n     \"overflow-x\": \"visible\",\n     \"max-width\": \"none\"\n }, ALL)"}, {"sha": "867c18a7d5e6b2acee746b91e0740e30a7e1bd68", "filename": "src/test/ui/array-slice-vec/suggest-array-length.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -5,10 +5,22 @@ fn main() {\n     const Foo: [i32; 3] = [1, 2, 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n+    const REF_FOO: &[u8; 1] = &[1];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n     let foo: [i32; 3] = [1, 2, 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n     let bar: [i32; 3] = [0; 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n+    let ref_foo: &[i32; 3] = &[1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let ref_bar: &[i32; 3] = &[0; 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let multiple_ref_foo: &&[i32; 3] = &&[1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n }"}, {"sha": "f66b3d4a899912376be45458fcb781a3c292bf55", "filename": "src/test/ui/array-slice-vec/suggest-array-length.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -5,10 +5,22 @@ fn main() {\n     const Foo: [i32; _] = [1, 2, 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n+    const REF_FOO: &[u8; _] = &[1];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n     let foo: [i32; _] = [1, 2, 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n     let bar: [i32; _] = [0; 3];\n     //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n     //~| ERROR using `_` for array lengths is unstable\n+    let ref_foo: &[i32; _] = &[1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let ref_bar: &[i32; _] = &[0; 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let multiple_ref_foo: &&[i32; _] = &&[1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n }"}, {"sha": "16c90a04784d0e674565e6ef86f10dbc50b9211c", "filename": "src/test/ui/array-slice-vec/suggest-array-length.stderr", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d37ed661a6922e7a167609b8cd7eb31e972b19b/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr?ref=1d37ed661a6922e7a167609b8cd7eb31e972b19b", "patch": "@@ -1,21 +1,45 @@\n error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/suggest-array-length.rs:8:20\n+  --> $DIR/suggest-array-length.rs:11:20\n    |\n LL |     let foo: [i32; _] = [1, 2, 3];\n    |                    ^ `_` not allowed here\n \n error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/suggest-array-length.rs:11:20\n+  --> $DIR/suggest-array-length.rs:14:20\n    |\n LL |     let bar: [i32; _] = [0; 3];\n    |                    ^ `_` not allowed here\n \n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:17:25\n+   |\n+LL |     let ref_foo: &[i32; _] = &[1, 2, 3];\n+   |                         ^ `_` not allowed here\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:20:25\n+   |\n+LL |     let ref_bar: &[i32; _] = &[0; 3];\n+   |                         ^ `_` not allowed here\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:23:35\n+   |\n+LL |     let multiple_ref_foo: &&[i32; _] = &&[1, 2, 3];\n+   |                                   ^ `_` not allowed here\n+\n error: in expressions, `_` can only be used on the left-hand side of an assignment\n   --> $DIR/suggest-array-length.rs:5:22\n    |\n LL |     const Foo: [i32; _] = [1, 2, 3];\n    |                      ^ `_` not allowed here\n \n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:8:26\n+   |\n+LL |     const REF_FOO: &[u8; _] = &[1];\n+   |                          ^ `_` not allowed here\n+\n error[E0658]: using `_` for array lengths is unstable\n   --> $DIR/suggest-array-length.rs:5:22\n    |\n@@ -26,7 +50,16 @@ LL |     const Foo: [i32; _] = [1, 2, 3];\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n error[E0658]: using `_` for array lengths is unstable\n-  --> $DIR/suggest-array-length.rs:8:20\n+  --> $DIR/suggest-array-length.rs:8:26\n+   |\n+LL |     const REF_FOO: &[u8; _] = &[1];\n+   |                          ^ help: consider specifying the array length: `1`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:11:20\n    |\n LL |     let foo: [i32; _] = [1, 2, 3];\n    |                    ^ help: consider specifying the array length: `3`\n@@ -35,14 +68,41 @@ LL |     let foo: [i32; _] = [1, 2, 3];\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n error[E0658]: using `_` for array lengths is unstable\n-  --> $DIR/suggest-array-length.rs:11:20\n+  --> $DIR/suggest-array-length.rs:14:20\n    |\n LL |     let bar: [i32; _] = [0; 3];\n    |                    ^ help: consider specifying the array length: `3`\n    |\n    = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:17:25\n+   |\n+LL |     let ref_foo: &[i32; _] = &[1, 2, 3];\n+   |                         ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:20:25\n+   |\n+LL |     let ref_bar: &[i32; _] = &[0; 3];\n+   |                         ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:23:35\n+   |\n+LL |     let multiple_ref_foo: &&[i32; _] = &&[1, 2, 3];\n+   |                                   ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}