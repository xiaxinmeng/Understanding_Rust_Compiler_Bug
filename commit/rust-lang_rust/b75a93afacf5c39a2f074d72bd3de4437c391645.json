{"sha": "b75a93afacf5c39a2f074d72bd3de4437c391645", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NWE5M2FmYWNmNWMzOWEyZjA3NGQ3MmJkM2RlNDQzN2MzOTE2NDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T04:37:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:28Z"}, "message": "extract parse_sttmt_mac", "tree": {"sha": "4c8b9ab60f58b79f932b414fc75021929e299990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c8b9ab60f58b79f932b414fc75021929e299990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b75a93afacf5c39a2f074d72bd3de4437c391645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b75a93afacf5c39a2f074d72bd3de4437c391645", "html_url": "https://github.com/rust-lang/rust/commit/b75a93afacf5c39a2f074d72bd3de4437c391645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b75a93afacf5c39a2f074d72bd3de4437c391645/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666ff8fd00b41b86547ed053605a46892cff78fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/666ff8fd00b41b86547ed053605a46892cff78fe", "html_url": "https://github.com/rust-lang/rust/commit/666ff8fd00b41b86547ed053605a46892cff78fe"}], "stats": {"total": 136, "additions": 73, "deletions": 63}, "files": [{"sha": "c26ac5728cc1c84b9d13a97b23e2d74abaca209b", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 73, "deletions": 63, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/b75a93afacf5c39a2f074d72bd3de4437c391645/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75a93afacf5c39a2f074d72bd3de4437c391645/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=b75a93afacf5c39a2f074d72bd3de4437c391645", "patch": "@@ -44,8 +44,8 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n \n         Ok(Some(if self.eat_keyword(kw::Let) {\n-            let stmt = self.parse_local(attrs.into())?;\n-            self.mk_stmt(lo.to(self.prev_span), StmtKind::Local(stmt))\n+            let local = self.parse_local(attrs.into())?;\n+            self.mk_stmt(lo.to(self.prev_span), StmtKind::Local(local))\n         } else if let Some(macro_def) = self.eat_macro_def(\n             &attrs,\n             &respan(lo, VisibilityKind::Inherited),\n@@ -56,79 +56,31 @@ impl<'a> Parser<'a> {\n         // such as a union items, item with `crate` visibility or auto trait items.\n         // Our goal here is to parse an arbitrary path `a::b::c` but not something that starts\n         // like a path (1 token), but it fact not a path.\n-        // `union::b::c` - path, `union U { ... }` - not a path.\n-        // `crate::b::c` - path, `crate struct S;` - not a path.\n         } else if self.token.is_path_start()\n             && !self.token.is_qpath_start()\n-            && !self.is_union_item()\n-            && !self.is_crate_vis()\n+            && !self.is_union_item() // `union::b::c` - path, `union U { ... }` - not a path.\n+            && !self.is_crate_vis() // `crate::b::c` - path, `crate struct S;` - not a path.\n             && !self.is_auto_trait_item()\n             && !self.is_async_fn()\n         {\n             let path = self.parse_path(PathStyle::Expr)?;\n \n-            if !self.eat(&token::Not) {\n-                let expr = if self.check(&token::OpenDelim(token::Brace)) {\n-                    self.parse_struct_expr(lo, path, ThinVec::new())?\n-                } else {\n-                    let hi = self.prev_span;\n-                    self.mk_expr(lo.to(hi), ExprKind::Path(None, path), ThinVec::new())\n-                };\n-\n-                let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n-                    let expr = this.parse_dot_or_call_expr_with(expr, lo, attrs.into())?;\n-                    this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr))\n-                })?;\n-                return Ok(Some(self.mk_stmt(lo.to(self.prev_span), StmtKind::Expr(expr))));\n+            if self.eat(&token::Not) {\n+                return self.parse_stmt_mac(lo, attrs.into(), path, macro_legacy_warnings);\n             }\n \n-            let args = self.parse_mac_args()?;\n-            let delim = args.delim();\n-            let hi = self.prev_span;\n-\n-            let style = if delim == token::Brace {\n-                MacStmtStyle::Braces\n+            let expr = if self.check(&token::OpenDelim(token::Brace)) {\n+                self.parse_struct_expr(lo, path, ThinVec::new())?\n             } else {\n-                MacStmtStyle::NoBraces\n-            };\n-\n-            let mac = Mac {\n-                path,\n-                args,\n-                prior_type_ascription: self.last_type_ascription,\n+                let hi = self.prev_span;\n+                self.mk_expr(lo.to(hi), ExprKind::Path(None, path), ThinVec::new())\n             };\n \n-            let kind = if delim == token::Brace\n-                || self.token == token::Semi\n-                || self.token == token::Eof\n-            {\n-                StmtKind::Mac(P((mac, style, attrs.into())))\n-            }\n-            // We used to incorrectly stop parsing macro-expanded statements here.\n-            // If the next token will be an error anyway but could have parsed with the\n-            // earlier behavior, stop parsing here and emit a warning to avoid breakage.\n-            else if macro_legacy_warnings\n-                && self.token.can_begin_expr()\n-                && match self.token.kind {\n-                    // These can continue an expression, so we can't stop parsing and warn.\n-                    token::OpenDelim(token::Paren) | token::OpenDelim(token::Bracket) |\n-                    token::BinOp(token::Minus) | token::BinOp(token::Star) |\n-                    token::BinOp(token::And) | token::BinOp(token::Or) |\n-                    token::AndAnd | token::OrOr |\n-                    token::DotDot | token::DotDotDot | token::DotDotEq => false,\n-                    _ => true,\n-                }\n-            {\n-                self.warn_missing_semicolon();\n-                StmtKind::Mac(P((mac, style, attrs.into())))\n-            } else {\n-                let e = self.mk_expr(lo.to(hi), ExprKind::Mac(mac), ThinVec::new());\n-                let e = self.maybe_recover_from_bad_qpath(e, true)?;\n-                let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n-                let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n-                StmtKind::Expr(e)\n-            };\n-            self.mk_stmt(lo.to(hi), kind)\n+            let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n+                let expr = this.parse_dot_or_call_expr_with(expr, lo, attrs.into())?;\n+                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr))\n+            })?;\n+            return Ok(Some(self.mk_stmt(lo.to(self.prev_span), StmtKind::Expr(expr))));\n         } else {\n             // FIXME: Bad copy of attrs\n             let old_directory_ownership =\n@@ -184,6 +136,64 @@ impl<'a> Parser<'a> {\n         }))\n     }\n \n+    /// Parses a statement macro `mac!(args)` provided a `path` representing `mac`.\n+    /// At this point, the `!` token after the path has already been eaten.\n+    fn parse_stmt_mac(\n+        &mut self,\n+        lo: Span,\n+        attrs: ThinVec<Attribute>,\n+        path: ast::Path,\n+        legacy_warnings: bool,\n+    ) -> PResult<'a, Option<Stmt>> {\n+        let args = self.parse_mac_args()?;\n+        let delim = args.delim();\n+        let hi = self.prev_span;\n+\n+        let style = if delim == token::Brace {\n+            MacStmtStyle::Braces\n+        } else {\n+            MacStmtStyle::NoBraces\n+        };\n+\n+        let mac = Mac {\n+            path,\n+            args,\n+            prior_type_ascription: self.last_type_ascription,\n+        };\n+\n+        let kind = if delim == token::Brace\n+            || self.token == token::Semi\n+            || self.token == token::Eof\n+        {\n+            StmtKind::Mac(P((mac, style, attrs.into())))\n+        }\n+        // We used to incorrectly stop parsing macro-expanded statements here.\n+        // If the next token will be an error anyway but could have parsed with the\n+        // earlier behavior, stop parsing here and emit a warning to avoid breakage.\n+        else if legacy_warnings\n+            && self.token.can_begin_expr()\n+            && match self.token.kind {\n+                // These can continue an expression, so we can't stop parsing and warn.\n+                token::OpenDelim(token::Paren) | token::OpenDelim(token::Bracket) |\n+                token::BinOp(token::Minus) | token::BinOp(token::Star) |\n+                token::BinOp(token::And) | token::BinOp(token::Or) |\n+                token::AndAnd | token::OrOr |\n+                token::DotDot | token::DotDotDot | token::DotDotEq => false,\n+                _ => true,\n+            }\n+        {\n+            self.warn_missing_semicolon();\n+            StmtKind::Mac(P((mac, style, attrs)))\n+        } else {\n+            let e = self.mk_expr(lo.to(hi), ExprKind::Mac(mac), ThinVec::new());\n+            let e = self.maybe_recover_from_bad_qpath(e, true)?;\n+            let e = self.parse_dot_or_call_expr_with(e, lo, attrs)?;\n+            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n+            StmtKind::Expr(e)\n+        };\n+        Ok(Some(self.mk_stmt(lo.to(hi), kind)))\n+    }\n+\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Local>> {\n         let lo = self.prev_span;"}]}