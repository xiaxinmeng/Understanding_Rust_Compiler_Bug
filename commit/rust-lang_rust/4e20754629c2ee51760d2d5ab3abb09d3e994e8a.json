{"sha": "4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMjA3NTQ2MjljMmVlNTE3NjBkMmQ1YWIzYWJiMDlkM2U5OTRlOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-05T06:17:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-05T06:17:17Z"}, "message": "Auto merge of #85919 - workingjubilee:simd-ptrs-are-valid, r=petrochenkov\n\nAllow raw pointers in SIMD types\n\nCloses #85915 by loosening the strictness in typechecking and adding a test to guarantee it passes.\n\nThis still might be too strict, as references currently do pass monomorphization, but my understanding is that they are not guaranteed to be \"scalar\" in the same way.", "tree": {"sha": "b7548624e125ab9b5f2b0aaf41d7f5c4abd4a2b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7548624e125ab9b5f2b0aaf41d7f5c4abd4a2b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "html_url": "https://github.com/rust-lang/rust/commit/4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c106885d5763250d3c5d5ca19b8491af816581d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c106885d5763250d3c5d5ca19b8491af816581d", "html_url": "https://github.com/rust-lang/rust/commit/2c106885d5763250d3c5d5ca19b8491af816581d"}, {"sha": "d9a5df669c45204daa5e10f5221ff82026fef9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a5df669c45204daa5e10f5221ff82026fef9e6", "html_url": "https://github.com/rust-lang/rust/commit/d9a5df669c45204daa5e10f5221ff82026fef9e6"}], "stats": {"total": 142, "additions": 134, "deletions": 8}, "files": [{"sha": "c1f71fbbfa41ad485012b9942faf2ebf766f6779", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "patch": "@@ -1890,11 +1890,6 @@ impl<'tcx> TyS<'tcx> {\n         matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))\n     }\n \n-    #[inline]\n-    pub fn is_machine(&self) -> bool {\n-        matches!(self.kind(), Int(..) | Uint(..) | Float(..))\n-    }\n-\n     #[inline]\n     pub fn has_concrete_skeleton(&self) -> bool {\n         !matches!(self.kind(), Param(_) | Infer(_) | Error(_))"}, {"sha": "166410731d29161ad6071bd090466c7adaeba31f", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "patch": "@@ -1214,10 +1214,19 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n                 }\n             }\n \n+            // Check that we use types valid for use in the lanes of a SIMD \"vector register\"\n+            // These are scalar types which directly match a \"machine\" type\n+            // Yes: Integers, floats, \"thin\" pointers\n+            // No: char, \"fat\" pointers, compound types\n             match e.kind() {\n-                ty::Param(_) => { /* struct<T>(T, T, T, T) is ok */ }\n-                _ if e.is_machine() => { /* struct(u8, u8, u8, u8) is ok */ }\n-                ty::Array(ty, _c) if ty.is_machine() => { /* struct([f32; 4]) */ }\n+                ty::Param(_) => (), // pass struct<T>(T, T, T, T) through, let monomorphization catch errors\n+                ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::RawPtr(_) => (), // struct(u8, u8, u8, u8) is ok\n+                ty::Array(t, _clen)\n+                    if matches!(\n+                        t.kind(),\n+                        ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::RawPtr(_)\n+                    ) =>\n+                { /* struct([f32; 4]) is ok */ }\n                 _ => {\n                     struct_span_err!(\n                         tcx.sess,"}, {"sha": "6fe415545f809b3615ebfe4f47e38cc604cf623f", "filename": "src/test/ui/simd/issue-85915-simd-ptrs.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fissue-85915-simd-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fissue-85915-simd-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fissue-85915-simd-ptrs.rs?ref=4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "patch": "@@ -0,0 +1,67 @@\n+// run-pass\n+// ignore-emscripten\n+\n+// Short form of the generic gather/scatter tests,\n+// verifying simd([*const T; N]) and simd([*mut T; N]) pass typeck and work.\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct cptrx4<T>([*const T; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct mptrx4<T>([*mut T; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct f32x4([f32; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct i32x4([i32; 4]);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_gather<T, U, V>(x: T, y: U, z: V) -> T;\n+    fn simd_scatter<T, U, V>(x: T, y: U, z: V) -> ();\n+}\n+\n+fn main() {\n+    let mut x = [0_f32, 1., 2., 3., 4., 5., 6., 7.];\n+\n+    let default = f32x4([-3_f32, -3., -3., -3.]);\n+    let s_strided = f32x4([0_f32, 2., -3., 6.]);\n+    let mask = i32x4([-1_i32, -1, 0, -1]);\n+\n+    // reading from *const\n+    unsafe {\n+        let pointer = &x as *const f32;\n+        let pointers =  cptrx4([\n+            pointer.offset(0) as *const f32,\n+            pointer.offset(2),\n+            pointer.offset(4),\n+            pointer.offset(6)\n+        ]);\n+\n+        let r_strided = simd_gather(default, pointers, mask);\n+\n+        assert_eq!(r_strided, s_strided);\n+    }\n+\n+    // writing to *mut\n+    unsafe {\n+        let pointer = &mut x as *mut f32;\n+        let pointers = mptrx4([\n+            pointer.offset(0) as *mut f32,\n+            pointer.offset(2),\n+            pointer.offset(4),\n+            pointer.offset(6)\n+        ]);\n+\n+        let values = f32x4([42_f32, 43_f32, 44_f32, 45_f32]);\n+        simd_scatter(values, pointers, mask);\n+\n+        assert_eq!(x, [42., 1., 43., 3., 4., 5., 45., 7.]);\n+    }\n+}"}, {"sha": "ae321c974b9d950b22759b5d94e7bb5e948b3317", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-extern-nonnull-ptr.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-extern-nonnull-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-extern-nonnull-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-extern-nonnull-ptr.rs?ref=4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+// ignore-emscripten\n+\n+#![feature(extern_types)]\n+#![feature(repr_simd)]\n+\n+use std::ptr::NonNull;\n+\n+extern {\n+    type Extern;\n+}\n+\n+#[repr(simd)]\n+struct S<T>(T);\n+\n+#[inline(never)]\n+fn identity<T>(v: T) -> T {\n+    v\n+}\n+\n+fn main() {\n+    let _v: S<[Option<NonNull<Extern>>; 4]> = identity(S([None; 4]));\n+}"}, {"sha": "3e02b08ce5da2c844e54d2ff6dc02aa36fcb13b8", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-wide-ptr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-wide-ptr.rs?ref=4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "patch": "@@ -0,0 +1,12 @@\n+// build-fail\n+\n+#![feature(repr_simd)]\n+\n+// error-pattern:monomorphising SIMD type `S<[*mut [u8]; 4]>` with a non-primitive-scalar (integer/float/pointer) element type `*mut [u8]`\n+\n+#[repr(simd)]\n+struct S<T>(T);\n+\n+fn main() {\n+    let _v: Option<S<[*mut [u8]; 4]>> = None;\n+}"}, {"sha": "3888e7a0f38f5b877ce6b2e0af171c89c3529599", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-wide-ptr.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-wide-ptr.stderr?ref=4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "patch": "@@ -0,0 +1,4 @@\n+error: monomorphising SIMD type `S<[*mut [u8]; 4]>` with a non-primitive-scalar (integer/float/pointer) element type `*mut [u8]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "88f62a07ea0d8be2a0a0dee74bc034bb15d9313d", "filename": "src/test/ui/simd/simd-type-wide-ptr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-wide-ptr.rs?ref=4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "patch": "@@ -0,0 +1,12 @@\n+// build-fail\n+\n+#![feature(repr_simd)]\n+\n+// error-pattern:monomorphising SIMD type `S` with a non-primitive-scalar (integer/float/pointer) element type `*mut [u8]`\n+\n+#[repr(simd)]\n+struct S([*mut [u8]; 4]);\n+\n+fn main() {\n+    let _v: Option<S> = None;\n+}"}, {"sha": "51d3c005072053dd8e85c19d2d788f1e1ccd8122", "filename": "src/test/ui/simd/simd-type-wide-ptr.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e20754629c2ee51760d2d5ab3abb09d3e994e8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-wide-ptr.stderr?ref=4e20754629c2ee51760d2d5ab3abb09d3e994e8a", "patch": "@@ -0,0 +1,4 @@\n+error: monomorphising SIMD type `S` with a non-primitive-scalar (integer/float/pointer) element type `*mut [u8]`\n+\n+error: aborting due to previous error\n+"}]}