{"sha": "975ac55b3de5ead2aa841f9e9e62cb79b408d66c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NWFjNTViM2RlNWVhZDJhYTg0MWY5ZTllNjJjYjc5YjQwOGQ2NmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-05T08:41:30Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-05T08:41:30Z"}, "message": "Lose the by_ref destination style\n\nIt's not needed.\n\nIssue #667", "tree": {"sha": "2b4474c6e00d9ddedec362846afe6bbc73d5e49a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b4474c6e00d9ddedec362846afe6bbc73d5e49a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/975ac55b3de5ead2aa841f9e9e62cb79b408d66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/975ac55b3de5ead2aa841f9e9e62cb79b408d66c", "html_url": "https://github.com/rust-lang/rust/commit/975ac55b3de5ead2aa841f9e9e62cb79b408d66c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/975ac55b3de5ead2aa841f9e9e62cb79b408d66c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "babd1ff3c740407e861b3c008f0e672976d8da26", "url": "https://api.github.com/repos/rust-lang/rust/commits/babd1ff3c740407e861b3c008f0e672976d8da26", "html_url": "https://github.com/rust-lang/rust/commit/babd1ff3c740407e861b3c008f0e672976d8da26"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "37a968a04f4880d4590c13d5c3a9a94c91ec7849", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/975ac55b3de5ead2aa841f9e9e62cb79b408d66c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975ac55b3de5ead2aa841f9e9e62cb79b408d66c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=975ac55b3de5ead2aa841f9e9e62cb79b408d66c", "patch": "@@ -2481,7 +2481,6 @@ fn join_branches(parent_cx: @block_ctxt, ins: [result]) -> @block_ctxt {\n \n tag dest {\n     by_val(@mutable ValueRef);\n-    by_ref(@mutable ValueRef);\n     save_in(ValueRef);\n     ignore;\n }\n@@ -2493,7 +2492,6 @@ fn empty_dest_cell() -> @mutable ValueRef {\n fn dup_for_join(dest: dest) -> dest {\n     alt dest {\n       by_val(_) { by_val(empty_dest_cell()) }\n-      by_ref(_) { by_ref(empty_dest_cell()) }\n       _ { dest }\n     }\n }\n@@ -2507,7 +2505,7 @@ fn join_returns(parent_cx: @block_ctxt, in_cxs: [@block_ctxt],\n             Br(cx, out.llbb);\n             reachable = true;\n             alt in_ds[i] {\n-              by_val(cell) | by_ref(cell) {\n+              by_val(cell) {\n                 if option::is_none(phi) {\n                     phi = some(EmptyPhi(out, val_ty(*cell)));\n                 }\n@@ -2522,7 +2520,7 @@ fn join_returns(parent_cx: @block_ctxt, in_cxs: [@block_ctxt],\n         Unreachable(out);\n     } else {\n         alt out_dest {\n-          by_val(cell) | by_ref(cell) { *cell = option::get(phi); }\n+          by_val(cell) { *cell = option::get(phi); }\n           _ {}\n         }\n     }\n@@ -3333,7 +3331,7 @@ fn trans_lval(cx: @block_ctxt, e: @ast::expr) -> lval_result {\n         // A by-ref returning function\n         if expr_is_lval(bcx_tcx(cx), e) {\n             let cell = empty_dest_cell();\n-            let bcx = trans_call(cx, f, none, args, e.id, by_ref(cell));\n+            let bcx = trans_call(cx, f, none, args, e.id, by_val(cell));\n             ret lval_mem(bcx, *cell);\n         } else { // By-value return\n             let {bcx, val} = dps_to_result(cx, {|bcx, dest|\n@@ -3799,7 +3797,8 @@ fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n        args: [ValueRef],\n        retslot: ValueRef,\n        to_zero: [{v: ValueRef, t: ty::t}],\n-       to_revoke: [{v: ValueRef, t: ty::t}]} {\n+       to_revoke: [{v: ValueRef, t: ty::t}],\n+       ret_ref: bool} {\n \n     let args: [ty::arg] = ty::ty_fn_args(bcx_tcx(cx), fn_ty);\n     let llargs: [ValueRef] = [];\n@@ -3825,19 +3824,20 @@ fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n     }\n     // Arg 0: Output pointer.\n     let llretty = type_of_or_i8(bcx, full_retty);\n-    let dest_ref = false;\n-    let llretslot = alt dest {\n-      ignore. {\n-        if ty::type_is_nil(tcx, full_retty) || !option::is_none(lliterbody) {\n-            llvm::LLVMGetUndef(T_ptr(llretty))\n-        } else { alloca(cx, llretty) }\n-      }\n-      save_in(dst) { dst }\n-      by_val(_) { alloca(cx, llretty) }\n-      by_ref(_) { dest_ref = true; alloca(cx, T_ptr(llretty)) }\n+    let llretslot = if ret_ref {\n+        alloca(cx, T_ptr(llretty))\n+    } else {\n+        alt dest {\n+          ignore. {\n+            if ty::type_is_nil(tcx, full_retty) ||\n+               !option::is_none(lliterbody) {\n+                llvm::LLVMGetUndef(T_ptr(llretty))\n+            } else { alloca(cx, llretty) }\n+          }\n+          save_in(dst) { dst }\n+          by_val(_) { alloca(cx, llretty) }\n+        }\n     };\n-    // FIXME[DSP] does this always hold?\n-    assert dest_ref == ret_ref;\n \n     if ty::type_contains_params(tcx, retty) {\n         // It's possible that the callee has some generic-ness somewhere in\n@@ -3898,7 +3898,8 @@ fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n          args: llargs,\n          retslot: llretslot,\n          to_zero: to_zero,\n-         to_revoke: to_revoke};\n+         to_revoke: to_revoke,\n+         ret_ref: ret_ref};\n }\n \n fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n@@ -3953,12 +3954,13 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n                       args_res.to_revoke);\n     alt dest {\n       ignore. {\n-        if llvm::LLVMIsUndef(llretslot) != lib::llvm::True {\n+        if llvm::LLVMIsUndef(llretslot) != lib::llvm::True &&\n+           !args_res.ret_ref {\n             bcx = drop_ty(bcx, llretslot, ret_ty);\n         }\n       }\n       save_in(_) { } // Already saved by callee\n-      by_ref(cell) | by_val(cell) {\n+      by_val(cell) {\n         *cell = Load(bcx, llretslot);\n       }\n     }\n@@ -4278,13 +4280,6 @@ fn trans_temp_expr(bcx: @block_ctxt, e: @ast::expr) -> lval_result {\n     }\n }\n \n-// FIXME[DPS] supersede by trans_temp_expr, get rid of by_ref dests\n-fn trans_expr_by_ref(bcx: @block_ctxt, e: @ast::expr) -> result {\n-    let cell = empty_dest_cell();\n-    bcx = trans_expr_dps(bcx, e, by_ref(cell));\n-    ret rslt(bcx, *cell);\n-}\n-\n // Invariants:\n // - things returning nil get dest=ignore\n // - any lvalue expr may be given dest=by_ref\n@@ -4476,10 +4471,6 @@ fn lval_to_dps(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n             *cell = Load(bcx, val);\n         }\n       }\n-      by_ref(cell) {\n-        assert is_mem;\n-        *cell = val;\n-      }\n       save_in(loc) { bcx = move_val_if_temp(bcx, INIT, loc, lv, ty); }\n       ignore. {}\n     }\n@@ -4728,7 +4719,8 @@ fn trans_ret(bcx: @block_ctxt, e: option::t<@ast::expr>) -> @block_ctxt {\n     alt e {\n       some(x) {\n         if ast_util::ret_by_ref(bcx.fcx.ret_style) {\n-            let {bcx: cx, val} = trans_expr_by_ref(bcx, x);\n+            let {bcx: cx, val, is_mem} = trans_lval(bcx, x);\n+            assert is_mem;\n             Store(cx, val, bcx.fcx.llretptr);\n             bcx = cx;\n         } else {"}]}