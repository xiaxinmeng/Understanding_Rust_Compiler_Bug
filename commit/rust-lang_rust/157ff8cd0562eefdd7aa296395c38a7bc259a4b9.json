{"sha": "157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1N2ZmOGNkMDU2MmVlZmRkN2FhMjk2Mzk1YzM4YTdiYzI1OWE0Yjk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-03T14:00:04Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:13Z"}, "message": "Remove the now-unit-struct AllocErr parameter of oom()", "tree": {"sha": "162a8b87c71c590b4ae1a594c4087819fb719b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162a8b87c71c590b4ae1a594c4087819fb719b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "html_url": "https://github.com/rust-lang/rust/commit/157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86753ce1cc520bfe50ae89f09ec47f313ce900eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/86753ce1cc520bfe50ae89f09ec47f313ce900eb", "html_url": "https://github.com/rust-lang/rust/commit/86753ce1cc520bfe50ae89f09ec47f313ce900eb"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "a7b5864016c2b8363197f3fec00cc6c032185128", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -136,8 +136,8 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n         align as *mut u8\n     } else {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        Global.alloc(layout).unwrap_or_else(|err| {\n-            Global.oom(err)\n+        Global.alloc(layout).unwrap_or_else(|_| {\n+            Global.oom()\n         })\n     }\n }\n@@ -166,7 +166,7 @@ mod tests {\n         unsafe {\n             let layout = Layout::from_size_align(1024, 1).unwrap();\n             let ptr = Global.alloc_zeroed(layout.clone())\n-                .unwrap_or_else(|e| Global.oom(e));\n+                .unwrap_or_else(|_| Global.oom());\n \n             let end = ptr.offset(layout.size() as isize);\n             let mut i = ptr;"}, {"sha": "f0a325530ba1eb81721bfae6eb5a68ce63b5e331", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -555,7 +555,7 @@ impl<T: ?Sized> Arc<T> {\n         let layout = Layout::for_value(&*fake_ptr);\n \n         let mem = Global.alloc(layout)\n-            .unwrap_or_else(|e| Global.oom(e));\n+            .unwrap_or_else(|_| Global.oom());\n \n         // Initialize the real ArcInner\n         let inner = set_data_ptr(ptr as *mut T, mem) as *mut ArcInner<T>;"}, {"sha": "765fb8458d11d0a0eaaa686d59afc05c05628a49", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -52,8 +52,8 @@ unsafe impl<T> Alloc for T where T: CoreAlloc {\n         CoreAlloc::dealloc(self, ptr, layout)\n     }\n \n-    fn oom(&mut self, err: AllocErr) -> ! {\n-        CoreAlloc::oom(self, err)\n+    fn oom(&mut self, _: AllocErr) -> ! {\n+        CoreAlloc::oom(self)\n     }\n \n     fn usable_size(&self, layout: &Layout) -> (usize, usize) {"}, {"sha": "25d759764a5a684e787a00f29f083425c601f6fa", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -100,7 +100,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                 };\n                 match result {\n                     Ok(ptr) => ptr,\n-                    Err(err) => a.oom(err),\n+                    Err(_) => a.oom(),\n                 }\n             };\n \n@@ -316,7 +316,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                                                  new_layout);\n                     match ptr_res {\n                         Ok(ptr) => (new_cap, Unique::new_unchecked(ptr as *mut T)),\n-                        Err(e) => self.a.oom(e),\n+                        Err(_) => self.a.oom(),\n                     }\n                 }\n                 None => {\n@@ -325,7 +325,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                     let new_cap = if elem_size > (!0) / 8 { 1 } else { 4 };\n                     match self.a.alloc_array::<T>(new_cap) {\n                         Ok(ptr) => (new_cap, ptr.into()),\n-                        Err(e) => self.a.oom(e),\n+                        Err(_) => self.a.oom(),\n                     }\n                 }\n             };\n@@ -444,7 +444,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve_exact(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve_exact(used_cap, needed_extra_cap) {\n             Err(CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(AllocErr(e)) => self.a.oom(e),\n+            Err(AllocErr(_)) => self.a.oom(),\n             Ok(()) => { /* yay */ }\n          }\n      }\n@@ -554,7 +554,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve(used_cap, needed_extra_cap) {\n             Err(CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(AllocErr(e)) => self.a.oom(e),\n+            Err(AllocErr(_)) => self.a.oom(),\n             Ok(()) => { /* yay */ }\n          }\n      }\n@@ -669,7 +669,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                                      old_layout,\n                                      new_layout) {\n                     Ok(p) => self.ptr = Unique::new_unchecked(p as *mut T),\n-                    Err(err) => self.a.oom(err),\n+                    Err(_) => self.a.oom(),\n                 }\n             }\n             self.cap = amount;"}, {"sha": "3c0b11bfe747f49f9bed40b366f03d75758b4f96", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -668,7 +668,7 @@ impl<T: ?Sized> Rc<T> {\n         let layout = Layout::for_value(&*fake_ptr);\n \n         let mem = Global.alloc(layout)\n-            .unwrap_or_else(|e| Global.oom(e));\n+            .unwrap_or_else(|_| Global.oom());\n \n         // Initialize the real RcBox\n         let inner = set_data_ptr(ptr as *mut T, mem) as *mut RcBox<T>;"}, {"sha": "5e6b3b5ca1129ff58d8591ed816379871d15c468", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -73,8 +73,8 @@ unsafe impl Alloc for System {\n         Alloc::realloc(&mut &*self, ptr, old_layout, new_layout)\n     }\n \n-    fn oom(&mut self, err: AllocErr) -> ! {\n-        Alloc::oom(&mut &*self, err)\n+    fn oom(&mut self) -> ! {\n+        Alloc::oom(&mut &*self)\n     }\n \n     #[inline]\n@@ -242,15 +242,15 @@ mod platform {\n     unsafe impl<'a> Alloc for &'a System {\n         alloc_methods_based_on_global_alloc!();\n \n-        fn oom(&mut self, err: AllocErr) -> ! {\n+        fn oom(&mut self) -> ! {\n             use core::fmt::{self, Write};\n \n             // Print a message to stderr before aborting to assist with\n             // debugging. It is critical that this code does not allocate any\n             // memory since we are in an OOM situation. Any errors are ignored\n             // while printing since there's nothing we can do about them and we\n             // are about to exit anyways.\n-            drop(writeln!(Stderr, \"fatal runtime error: {}\", err));\n+            drop(writeln!(Stderr, \"fatal runtime error: {}\", AllocErr));\n             unsafe {\n                 ::core::intrinsics::abort();\n             }\n@@ -459,11 +459,11 @@ mod platform {\n             }\n         }\n \n-        fn oom(&mut self, err: AllocErr) -> ! {\n+        fn oom(&mut self) -> ! {\n             use core::fmt::{self, Write};\n \n             // Same as with unix we ignore all errors here\n-            drop(writeln!(Stderr, \"fatal runtime error: {}\", err));\n+            drop(writeln!(Stderr, \"fatal runtime error: {}\", AllocErr));\n             unsafe {\n                 ::core::intrinsics::abort();\n             }"}, {"sha": "1ba4c641065ff3afe4355ad966cf4487f2d3d481", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -572,7 +572,7 @@ pub unsafe trait Alloc {\n     /// instead they should return an appropriate error from the\n     /// invoked method, and let the client decide whether to invoke\n     /// this `oom` method in response.\n-    fn oom(&mut self, _: AllocErr) -> ! {\n+    fn oom(&mut self) -> ! {\n         unsafe { ::intrinsics::abort() }\n     }\n "}, {"sha": "2a00241afc603d03d0931957359f4d3de458a0cb", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -784,7 +784,7 @@ impl<K, V, S> HashMap<K, V, S>\n     pub fn reserve(&mut self, additional: usize) {\n         match self.try_reserve(additional) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr(e)) => Global.oom(e),\n+            Err(CollectionAllocErr::AllocErr(_)) => Global.oom(),\n             Ok(()) => { /* yay */ }\n          }\n     }"}, {"sha": "fcc2eb8fef2bba2e0201184ba221c54bdb985e5e", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -772,7 +772,7 @@ impl<K, V> RawTable<K, V> {\n     unsafe fn new_uninitialized(capacity: usize) -> RawTable<K, V> {\n         match Self::try_new_uninitialized(capacity) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr(e)) => Global.oom(e),\n+            Err(CollectionAllocErr::AllocErr(_)) => Global.oom(),\n             Ok(table) => { table }\n         }\n     }\n@@ -811,7 +811,7 @@ impl<K, V> RawTable<K, V> {\n     pub fn new(capacity: usize) -> RawTable<K, V> {\n         match Self::try_new(capacity) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr(e)) => Global.oom(e),\n+            Err(CollectionAllocErr::AllocErr(_)) => Global.oom(),\n             Ok(table) => { table }\n         }\n     }"}, {"sha": "38b8ab50cc7130a45bea58d347da28c44cfa5164", "filename": "src/test/run-pass/allocator-alloc-one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -14,8 +14,8 @@ use std::heap::{Heap, Alloc};\n \n fn main() {\n     unsafe {\n-        let ptr = Heap.alloc_one::<i32>().unwrap_or_else(|e| {\n-            Heap.oom(e)\n+        let ptr = Heap.alloc_one::<i32>().unwrap_or_else(|_| {\n+            Heap.oom()\n         });\n         *ptr.as_ptr() = 4;\n         assert_eq!(*ptr.as_ptr(), 4);"}, {"sha": "a562165d21b7d523c60263b042103668b7912655", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -50,7 +50,7 @@ unsafe fn test_triangle() -> bool {\n             println!(\"allocate({:?})\", layout);\n         }\n \n-        let ret = Heap.alloc(layout.clone()).unwrap_or_else(|e| Heap.oom(e));\n+        let ret = Heap.alloc(layout.clone()).unwrap_or_else(|_| Heap.oom());\n \n         if PRINT {\n             println!(\"allocate({:?}) = {:?}\", layout, ret);\n@@ -73,7 +73,7 @@ unsafe fn test_triangle() -> bool {\n         }\n \n         let ret = Heap.realloc(ptr, old.clone(), new.clone())\n-            .unwrap_or_else(|e| Heap.oom(e));\n+            .unwrap_or_else(|_| Heap.oom());\n \n         if PRINT {\n             println!(\"reallocate({:?}, old={:?}, new={:?}) = {:?}\","}, {"sha": "7d34b8fd00fc828486a6fad044f92cc818f5fdd4", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157ff8cd0562eefdd7aa296395c38a7bc259a4b9/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=157ff8cd0562eefdd7aa296395c38a7bc259a4b9", "patch": "@@ -32,7 +32,7 @@ struct Ccx {\n fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n         let ptr = Heap.alloc(Layout::new::<Bcx>())\n-            .unwrap_or_else(|e| Heap.oom(e));\n+            .unwrap_or_else(|_| Heap.oom());\n         &*(ptr as *const _)\n     }\n }"}]}