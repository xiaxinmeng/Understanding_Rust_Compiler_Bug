{"sha": "8297edd54976d06f4753bc18684614516d156243", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTdlZGQ1NDk3NmQwNmY0NzUzYmMxODY4NDYxNDUxNmQxNTYyNDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-02T20:27:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-03T19:54:51Z"}, "message": "librustc: Have the kind checker check sub-bounds in trait casts.\n\nThis can break code that looked like:\n\n    struct S<T> {\n        val: T,\n    }\n    trait Gettable<T> {\n        ...\n    }\n    impl<T: Copy> Gettable<T> for S<T> {\n        ...\n    }\n    let t: Box<S<String>> = box S {\n        val: \"one\".to_string(),\n    };\n    let a = t as Box<Gettable<String>>;\n    //                        ^ note no `Copy` bound\n\nChange this code to:\n\n    impl<T> Gettable<T> for S<T> {\n    //   ^ remove `Copy` bound\n        ...\n    }\n\nCloses #14061.\n\n[breaking-change]", "tree": {"sha": "5ff34ecfe75c64afb258f4df78e1b5d64abd5b12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ff34ecfe75c64afb258f4df78e1b5d64abd5b12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8297edd54976d06f4753bc18684614516d156243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8297edd54976d06f4753bc18684614516d156243", "html_url": "https://github.com/rust-lang/rust/commit/8297edd54976d06f4753bc18684614516d156243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8297edd54976d06f4753bc18684614516d156243/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704f11d3d8a066eb5e8bb869af07fa33de530cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/704f11d3d8a066eb5e8bb869af07fa33de530cc8", "html_url": "https://github.com/rust-lang/rust/commit/704f11d3d8a066eb5e8bb869af07fa33de530cc8"}], "stats": {"total": 126, "additions": 116, "deletions": 10}, "files": [{"sha": "a7154e78bc58612d7243430bd2aa3a106be75ac1", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 72, "deletions": 8, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8297edd54976d06f4753bc18684614516d156243/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8297edd54976d06f4753bc18684614516d156243/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=8297edd54976d06f4753bc18684614516d156243", "patch": "@@ -13,6 +13,7 @@ use middle::freevars::freevar_entry;\n use middle::freevars;\n use middle::subst;\n use middle::ty;\n+use middle::typeck::{MethodCall, NoAdjustment};\n use middle::typeck;\n use util::ppaux::{Repr, ty_to_str};\n use util::ppaux::UserString;\n@@ -261,7 +262,15 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n         ExprCast(ref source, _) => {\n             let source_ty = ty::expr_ty(cx.tcx, &**source);\n             let target_ty = ty::expr_ty(cx.tcx, e);\n-            check_trait_cast(cx, source_ty, target_ty, source.span);\n+            let method_call = MethodCall {\n+                expr_id: e.id,\n+                adjustment: NoAdjustment,\n+            };\n+            check_trait_cast(cx,\n+                             source_ty,\n+                             target_ty,\n+                             source.span,\n+                             method_call);\n         }\n         ExprRepeat(ref element, ref count_expr) => {\n             let count = ty::eval_repeat_count(cx.tcx, &**count_expr);\n@@ -281,7 +290,15 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n                 ty::AutoObject(..) => {\n                     let source_ty = ty::expr_ty(cx.tcx, e);\n                     let target_ty = ty::expr_ty_adjusted(cx.tcx, e);\n-                    check_trait_cast(cx, source_ty, target_ty, e.span);\n+                    let method_call = MethodCall {\n+                        expr_id: e.id,\n+                        adjustment: typeck::AutoObject,\n+                    };\n+                    check_trait_cast(cx,\n+                                     source_ty,\n+                                     target_ty,\n+                                     e.span,\n+                                     method_call);\n                 }\n                 ty::AutoAddEnv(..) |\n                 ty::AutoDerefRef(..) => {}\n@@ -364,15 +381,62 @@ fn check_bounds_on_type_parameters(cx: &mut Context, e: &Expr) {\n     }\n }\n \n-fn check_trait_cast(cx: &mut Context, source_ty: ty::t, target_ty: ty::t, span: Span) {\n+fn check_type_parameter_bounds_in_vtable_result(\n+        cx: &mut Context,\n+        span: Span,\n+        vtable_res: &typeck::vtable_res) {\n+    for origins in vtable_res.iter() {\n+        for origin in origins.iter() {\n+            let (type_param_defs, substs) = match *origin {\n+                typeck::vtable_static(def_id, ref tys, _) => {\n+                    let type_param_defs =\n+                        ty::lookup_item_type(cx.tcx, def_id).generics\n+                                                            .types\n+                                                            .clone();\n+                    (type_param_defs, (*tys).clone())\n+                }\n+                _ => {\n+                    // Nothing to do here.\n+                    continue\n+                }\n+            };\n+            for type_param_def in type_param_defs.iter() {\n+                let typ = substs.types.get(type_param_def.space,\n+                                           type_param_def.index);\n+                check_typaram_bounds(cx, span, *typ, type_param_def)\n+            }\n+        }\n+    }\n+}\n+\n+fn check_trait_cast(cx: &mut Context,\n+                    source_ty: ty::t,\n+                    target_ty: ty::t,\n+                    span: Span,\n+                    method_call: MethodCall) {\n     check_cast_for_escaping_regions(cx, source_ty, target_ty, span);\n     match ty::get(target_ty).sty {\n-        ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ ty, .. }) => match ty::get(ty).sty {\n-            ty::ty_trait(box ty::TyTrait { bounds, .. }) => {\n-                check_trait_cast_bounds(cx, span, source_ty, bounds);\n+        ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ ty, .. }) => {\n+            match ty::get(ty).sty {\n+                ty::ty_trait(box ty::TyTrait { bounds, .. }) => {\n+                     match cx.tcx.vtable_map.borrow().find(&method_call) {\n+                        None => {\n+                            cx.tcx.sess.span_bug(span,\n+                                                 \"trait cast not in vtable \\\n+                                                  map?!\")\n+                        }\n+                        Some(vtable_res) => {\n+                            check_type_parameter_bounds_in_vtable_result(\n+                                cx,\n+                                span,\n+                                vtable_res)\n+                        }\n+                    };\n+                    check_trait_cast_bounds(cx, span, source_ty, bounds);\n+                }\n+                _ => {}\n             }\n-            _ => {}\n-        },\n+        }\n         _ => {}\n     }\n }"}, {"sha": "bda47d99ed7146d0ec7b12ab9dd292a8d19df9ae", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8297edd54976d06f4753bc18684614516d156243/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8297edd54976d06f4753bc18684614516d156243/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=8297edd54976d06f4753bc18684614516d156243", "patch": "@@ -398,6 +398,9 @@ fn search_for_vtable(vcx: &VtableContext,\n         // Resolve any sub bounds. Note that there still may be free\n         // type variables in substs. This might still be OK: the\n         // process of looking up bounds might constrain some of them.\n+        //\n+        // This does not check built-in traits because those are handled\n+        // later in the kind checking pass.\n         let im_generics =\n             ty::lookup_item_type(tcx, impl_did).generics;\n         let subres = lookup_vtables(vcx,"}, {"sha": "7b6935df42079a561fd0e8a12006937679511f71", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8297edd54976d06f4753bc18684614516d156243/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8297edd54976d06f4753bc18684614516d156243/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=8297edd54976d06f4753bc18684614516d156243", "patch": "@@ -216,9 +216,9 @@ pub type vtable_res = VecPerParamSpace<vtable_param_res>;\n #[deriving(Clone)]\n pub enum vtable_origin {\n     /*\n-      Statically known vtable. def_id gives the class or impl item\n+      Statically known vtable. def_id gives the impl item\n       from whence comes the vtable, and tys are the type substs.\n-      vtable_res is the vtable itself\n+      vtable_res is the vtable itself.\n      */\n     vtable_static(ast::DefId, subst::Substs, vtable_res),\n "}, {"sha": "48e1bdd671a117d80a4222b5c92bfce208a73e69", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8297edd54976d06f4753bc18684614516d156243/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8297edd54976d06f4753bc18684614516d156243/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=8297edd54976d06f4753bc18684614516d156243", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #14061: tests the interaction between generic implementation\n+// parameter bounds and trait objects.\n+\n+struct S<T>;\n+\n+trait Gettable<T> {}\n+\n+impl<T: Send + Copy> Gettable<T> for S<T> {}\n+\n+fn f<T>(val: T) {\n+    let t: S<T> = S;\n+    let a = &t as &Gettable<T>;\n+    //~^ ERROR instantiating a type parameter with an incompatible type `T`\n+    let a: &Gettable<T> = &t;\n+    //~^ ERROR instantiating a type parameter with an incompatible type `T`\n+}\n+\n+fn main() {\n+    let t: S<&int> = S;\n+    let a = &t as &Gettable<&int>;\n+    //~^ ERROR instantiating a type parameter with an incompatible type `&int`\n+    let t: Box<S<String>> = box S;\n+    let a = t as Box<Gettable<String>>;\n+    //~^ ERROR instantiating a type parameter with an incompatible type\n+    let t: Box<S<String>> = box S;\n+    let a: Box<Gettable<String>> = t;\n+    //~^ ERROR instantiating a type parameter with an incompatible type\n+}\n+"}]}