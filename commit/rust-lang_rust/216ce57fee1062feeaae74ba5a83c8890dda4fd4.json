{"sha": "216ce57fee1062feeaae74ba5a83c8890dda4fd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNmNlNTdmZWUxMDYyZmVlYWFlNzRiYTVhODNjODg5MGRkYTRmZDQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-24T11:35:14Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-24T11:35:14Z"}, "message": "Update for changes in rustc", "tree": {"sha": "ecb91184da16cf718821cce19d12ba94afbb8a5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb91184da16cf718821cce19d12ba94afbb8a5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/216ce57fee1062feeaae74ba5a83c8890dda4fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/216ce57fee1062feeaae74ba5a83c8890dda4fd4", "html_url": "https://github.com/rust-lang/rust/commit/216ce57fee1062feeaae74ba5a83c8890dda4fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/216ce57fee1062feeaae74ba5a83c8890dda4fd4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613bde6e407c8e4162ceacadf13987bdebbc9597", "url": "https://api.github.com/repos/rust-lang/rust/commits/613bde6e407c8e4162ceacadf13987bdebbc9597", "html_url": "https://github.com/rust-lang/rust/commit/613bde6e407c8e4162ceacadf13987bdebbc9597"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "c1207095140eda46c015e80d0a0c9a950497f185", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/216ce57fee1062feeaae74ba5a83c8890dda4fd4/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216ce57fee1062feeaae74ba5a83c8890dda4fd4/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=216ce57fee1062feeaae74ba5a83c8890dda4fd4", "patch": "@@ -1,9 +1,10 @@\n use rustc::hir::*;\n use rustc::hir::def::Def;\n use rustc::lint::*;\n+use rustc::ty;\n use rustc_const_eval::lookup_const_by_id;\n use syntax::ast::LitKind;\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, DUMMY_SP};\n use utils::span_lint;\n \n /// **What it does:** Checks for incompatible bit masks in comparisons.\n@@ -249,7 +250,15 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n         ExprPath(ref qpath) => {\n             let def = cx.tables.qpath_def(qpath, lit.id);\n             if let Def::Const(def_id) = def {\n-                lookup_const_by_id(cx.tcx, def_id, Substs::empty()).and_then(|(l, _ty)| fetch_int_literal(cx, l))\n+                lookup_const_by_id(cx.tcx, def_id, Substs::empty()).and_then(|(l, _ty)| {\n+                    let body = if let Some(id) = cx.tcx.hir.as_local_node_id(l) {\n+                        ty::queries::mir_const_qualif::get(cx.tcx, DUMMY_SP, def_id);\n+                        cx.tcx.hir.body(cx.tcx.hir.body_owned_by(id))\n+                    } else {\n+                        cx.tcx.sess.cstore.item_body(cx.tcx, def_id)\n+                    };\n+                    fetch_int_literal(cx, &body.value)\n+                })\n             } else {\n                 None\n             }"}, {"sha": "3e2cbff3d82b5e8e8f0a566cb4c7befe0f9a438c", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/216ce57fee1062feeaae74ba5a83c8890dda4fd4/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216ce57fee1062feeaae74ba5a83c8890dda4fd4/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=216ce57fee1062feeaae74ba5a83c8890dda4fd4", "patch": "@@ -13,6 +13,7 @@ use std::mem;\n use std::rc::Rc;\n use syntax::ast::{FloatTy, LitKind, StrStyle, NodeId};\n use syntax::ptr::P;\n+use syntax::codemap::DUMMY_SP;\n \n #[derive(Debug, Copy, Clone)]\n pub enum FloatWidth {\n@@ -286,13 +287,19 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 let substs = self.tables\n                     .node_id_item_substs(id)\n                     .unwrap_or_else(|| self.tcx.intern_substs(&[]));\n-                if let Some((const_expr, tables)) = lookup_const_by_id(self.tcx, def_id, substs) {\n+                if let Some((const_expr, _)) = lookup_const_by_id(self.tcx, def_id, substs) {\n                     let mut cx = ConstEvalLateContext {\n                         tcx: self.tcx,\n-                        tables: tables,\n+                        tables: self.tcx.item_tables(const_expr),\n                         needed_resolution: false,\n                     };\n-                    let ret = cx.expr(const_expr);\n+                    let body = if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n+                        ty::queries::mir_const_qualif::get(self.tcx, DUMMY_SP, def_id);\n+                        self.tcx.hir.body(self.tcx.hir.body_owned_by(id))\n+                    } else {\n+                        self.tcx.sess.cstore.item_body(self.tcx, def_id)\n+                    };\n+                    let ret = cx.expr(&body.value);\n                     if ret.is_some() {\n                         self.needed_resolution = true;\n                     }"}]}