{"sha": "1a05f956f8c34fadfcb3389e70196c93230db5ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMDVmOTU2ZjhjMzRmYWRmY2IzMzg5ZTcwMTk2YzkzMjMwZGI1ZWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:35:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:28Z"}, "message": "rollup merge of #19887: alexcrichton/serialize-fn-mut\n\nRelax some of the bounds on the decoder methods back to FnMut to help accomodate\nsome more flavorful variants of decoders which may need to run the closure more\nthan once when it, for example, attempts to find the first successful enum to\ndecode.", "tree": {"sha": "ec01c7602d18c0a09ed3bd78163d38f1a8d5a27c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec01c7602d18c0a09ed3bd78163d38f1a8d5a27c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a05f956f8c34fadfcb3389e70196c93230db5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a05f956f8c34fadfcb3389e70196c93230db5ec", "html_url": "https://github.com/rust-lang/rust/commit/1a05f956f8c34fadfcb3389e70196c93230db5ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a05f956f8c34fadfcb3389e70196c93230db5ec/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e21613eefcf30e6b7a10954bbbfc873d30ad88", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e21613eefcf30e6b7a10954bbbfc873d30ad88", "html_url": "https://github.com/rust-lang/rust/commit/31e21613eefcf30e6b7a10954bbbfc873d30ad88"}, {"sha": "c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "html_url": "https://github.com/rust-lang/rust/commit/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "bbedbc75395d63151ae0eeb95094d6c232ec1dab", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a05f956f8c34fadfcb3389e70196c93230db5ec/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a05f956f8c34fadfcb3389e70196c93230db5ec/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=1a05f956f8c34fadfcb3389e70196c93230db5ec", "patch": "@@ -499,8 +499,9 @@ pub mod reader {\n             Ok(result)\n         }\n \n-        fn read_enum_variant<T, F>(&mut self, _: &[&str], f: F) -> DecodeResult<T> where\n-            F: FnOnce(&mut Decoder<'doc>, uint) -> DecodeResult<T>,\n+        fn read_enum_variant<T, F>(&mut self, _: &[&str],\n+                                   mut f: F) -> DecodeResult<T>\n+            where F: FnMut(&mut Decoder<'doc>, uint) -> DecodeResult<T>,\n         {\n             debug!(\"read_enum_variant()\");\n             let idx = try!(self._next_uint(EsEnumVid));\n@@ -526,8 +527,9 @@ pub mod reader {\n             f(self)\n         }\n \n-        fn read_enum_struct_variant<T, F>(&mut self, _: &[&str], f: F) -> DecodeResult<T> where\n-            F: FnOnce(&mut Decoder<'doc>, uint) -> DecodeResult<T>,\n+        fn read_enum_struct_variant<T, F>(&mut self, _: &[&str],\n+                                          mut f: F) -> DecodeResult<T>\n+            where F: FnMut(&mut Decoder<'doc>, uint) -> DecodeResult<T>,\n         {\n             debug!(\"read_enum_struct_variant()\");\n             let idx = try!(self._next_uint(EsEnumVid));\n@@ -610,8 +612,8 @@ pub mod reader {\n             self.read_tuple_arg(idx, f)\n         }\n \n-        fn read_option<T, F>(&mut self, f: F) -> DecodeResult<T> where\n-            F: FnOnce(&mut Decoder<'doc>, bool) -> DecodeResult<T>,\n+        fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T> where\n+            F: FnMut(&mut Decoder<'doc>, bool) -> DecodeResult<T>,\n         {\n             debug!(\"read_option()\");\n             self.read_enum(\"Option\", move |this| {"}, {"sha": "c811a16e2b160c031faf507b1d15ea7bf01b8ac8", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a05f956f8c34fadfcb3389e70196c93230db5ec/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a05f956f8c34fadfcb3389e70196c93230db5ec/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=1a05f956f8c34fadfcb3389e70196c93230db5ec", "patch": "@@ -2082,8 +2082,9 @@ impl ::Decoder<DecoderError> for Decoder {\n         f(self)\n     }\n \n-    fn read_enum_variant<T, F>(&mut self, names: &[&str], f: F) -> DecodeResult<T> where\n-        F: FnOnce(&mut Decoder, uint) -> DecodeResult<T>,\n+    fn read_enum_variant<T, F>(&mut self, names: &[&str],\n+                               mut f: F) -> DecodeResult<T>\n+        where F: FnMut(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n         debug!(\"read_enum_variant(names={})\", names);\n         let name = match self.pop() {\n@@ -2133,7 +2134,7 @@ impl ::Decoder<DecoderError> for Decoder {\n     }\n \n     fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F) -> DecodeResult<T> where\n-        F: FnOnce(&mut Decoder, uint) -> DecodeResult<T>,\n+        F: FnMut(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n         debug!(\"read_enum_struct_variant(names={})\", names);\n         self.read_enum_variant(names, f)\n@@ -2230,8 +2231,8 @@ impl ::Decoder<DecoderError> for Decoder {\n         self.read_tuple_arg(idx, f)\n     }\n \n-    fn read_option<T, F>(&mut self, f: F) -> DecodeResult<T> where\n-        F: FnOnce(&mut Decoder, bool) -> DecodeResult<T>,\n+    fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T> where\n+        F: FnMut(&mut Decoder, bool) -> DecodeResult<T>,\n     {\n         debug!(\"read_option()\");\n         match self.pop() {"}, {"sha": "0e0d3b4115bd76e52fc11b16b46f9554f935c94c", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a05f956f8c34fadfcb3389e70196c93230db5ec/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a05f956f8c34fadfcb3389e70196c93230db5ec/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=1a05f956f8c34fadfcb3389e70196c93230db5ec", "patch": "@@ -120,12 +120,12 @@ pub trait Decoder<E> {\n         F: FnOnce(&mut Self) -> Result<T, E>;\n \n     fn read_enum_variant<T, F>(&mut self, names: &[&str], f: F) -> Result<T, E> where\n-        F: FnOnce(&mut Self, uint) -> Result<T, E>;\n+        F: FnMut(&mut Self, uint) -> Result<T, E>;\n     fn read_enum_variant_arg<T, F>(&mut self, a_idx: uint, f: F) -> Result<T, E> where\n         F: FnOnce(&mut Self) -> Result<T, E>;\n \n     fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F) -> Result<T, E> where\n-        F: FnOnce(&mut Self, uint) -> Result<T, E>;\n+        F: FnMut(&mut Self, uint) -> Result<T, E>;\n     fn read_enum_struct_variant_field<T, F>(&mut self,\n                                             &f_name: &str,\n                                             f_idx: uint,\n@@ -154,7 +154,7 @@ pub trait Decoder<E> {\n \n     // Specialized types:\n     fn read_option<T, F>(&mut self, f: F) -> Result<T, E> where\n-        F: FnOnce(&mut Self, bool) -> Result<T, E>;\n+        F: FnMut(&mut Self, bool) -> Result<T, E>;\n \n     fn read_seq<T, F>(&mut self, f: F) -> Result<T, E> where\n         F: FnOnce(&mut Self, uint) -> Result<T, E>;"}]}