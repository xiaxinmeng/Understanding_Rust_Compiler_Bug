{"sha": "2cff12e0d6d846c1c2a4c4449ecf7473658573ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZmYxMmUwZDZkODQ2YzFjMmE0YzQ0NDllY2Y3NDczNjU4NTczZWY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-12-28T20:28:46Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-12-30T17:06:28Z"}, "message": "Small refactoring to make this code more clear\n\nThis hairy conditional doesn't need to be so. It _does_ need to be a\nthin pointer, otherwise, it will fail to compile, so let's pull that out\ninto a temporary for future readers of the source.\n\nAlso, after a discussion with @pnkfelix and @gankro, we don't need these\nnull checks anymore, as zero-on-drop has been gone for a while now.", "tree": {"sha": "5d6ff7aecd329d81b33febfb6884d67e5fa7762d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d6ff7aecd329d81b33febfb6884d67e5fa7762d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cff12e0d6d846c1c2a4c4449ecf7473658573ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cff12e0d6d846c1c2a4c4449ecf7473658573ef", "html_url": "https://github.com/rust-lang/rust/commit/2cff12e0d6d846c1c2a4c4449ecf7473658573ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cff12e0d6d846c1c2a4c4449ecf7473658573ef/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a1834ce522e3ec7fe4726b1661de16ee30c503", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a1834ce522e3ec7fe4726b1661de16ee30c503", "html_url": "https://github.com/rust-lang/rust/commit/27a1834ce522e3ec7fe4726b1661de16ee30c503"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "33712bc54263b17651b79cd3b3fdcb24fd3afc7b", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cff12e0d6d846c1c2a4c4449ecf7473658573ef/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cff12e0d6d846c1c2a4c4449ecf7473658573ef/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=2cff12e0d6d846c1c2a4c4449ecf7473658573ef", "patch": "@@ -554,9 +554,9 @@ impl<T: ?Sized> Drop for Arc<T> {\n         // This structure has #[unsafe_no_drop_flag], so this drop glue may run\n         // more than once (but it is guaranteed to be zeroed after the first if\n         // it's run more than once)\n-        let ptr = *self._ptr;\n-        // if ptr.is_null() { return }\n-        if ptr as *mut u8 as usize == 0 || ptr as *mut u8 as usize == mem::POST_DROP_USIZE {\n+        let thin = *self._ptr as *const ();\n+\n+        if thin as usize == mem::POST_DROP_USIZE {\n             return;\n         }\n \n@@ -709,9 +709,10 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// ```\n     fn drop(&mut self) {\n         let ptr = *self._ptr;\n+        let thin = ptr as *const ();\n \n         // see comments above for why this check is here\n-        if ptr as *mut u8 as usize == 0 || ptr as *mut u8 as usize == mem::POST_DROP_USIZE {\n+        if thin as usize == mem::POST_DROP_USIZE {\n             return;\n         }\n "}, {"sha": "b86ddaa167bab905225e4944fe302ba407a0a3b2", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cff12e0d6d846c1c2a4c4449ecf7473658573ef/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cff12e0d6d846c1c2a4c4449ecf7473658573ef/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=2cff12e0d6d846c1c2a4c4449ecf7473658573ef", "patch": "@@ -449,8 +449,9 @@ impl<T: ?Sized> Drop for Rc<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let ptr = *self._ptr;\n-            if !(*(&ptr as *const _ as *const *const ())).is_null() &&\n-               ptr as *const () as usize != mem::POST_DROP_USIZE {\n+            let thin = ptr as *const ();\n+\n+            if thin as usize != mem::POST_DROP_USIZE {\n                 self.dec_strong();\n                 if self.strong() == 0 {\n                     // destroy the contained object\n@@ -782,8 +783,9 @@ impl<T: ?Sized> Drop for Weak<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let ptr = *self._ptr;\n-            if !(*(&ptr as *const _ as *const *const ())).is_null() &&\n-               ptr as *const () as usize != mem::POST_DROP_USIZE {\n+            let thin = ptr as *const ();\n+\n+            if thin as usize != mem::POST_DROP_USIZE {\n                 self.dec_weak();\n                 // the weak count starts at 1, and will only go to zero if all\n                 // the strong pointers have disappeared."}]}