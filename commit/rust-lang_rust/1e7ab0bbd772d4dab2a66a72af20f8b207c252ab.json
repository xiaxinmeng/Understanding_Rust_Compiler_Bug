{"sha": "1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "node_id": "C_kwDOAAsO6NoAKDFlN2FiMGJiZDc3MmQ0ZGFiMmE2NmE3MmFmMjBmOGIyMDdjMjUyYWI", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-20T07:29:05Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-20T07:29:05Z"}, "message": "point at private fields in struct literal", "tree": {"sha": "268838053874c12066f8386629a257ed2c848787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/268838053874c12066f8386629a257ed2c848787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "html_url": "https://github.com/rust-lang/rust/commit/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "349bda2051e94b7aefb33d6541f48f561bf06dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/349bda2051e94b7aefb33d6541f48f561bf06dbc", "html_url": "https://github.com/rust-lang/rust/commit/349bda2051e94b7aefb33d6541f48f561bf06dbc"}], "stats": {"total": 153, "additions": 134, "deletions": 19}, "files": [{"sha": "cc0f4cc53e656a036f81aaf494d49d164a7180a9", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -4590,6 +4590,7 @@ dependencies = [\n name = \"rustc_typeck\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools\",\n  \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_attr\","}, {"sha": "b3dd6955080943668ddc153c500020d771fa300e", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -10,6 +10,7 @@ doctest = false\n [dependencies]\n rustc_arena = { path = \"../rustc_arena\" }\n tracing = \"0.1\"\n+itertools = \"0.10.1\"\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_attr = { path = \"../rustc_attr\" }"}, {"sha": "0a017de80f24898e88149e792a8d9de0effbd3e1", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -23,13 +23,14 @@ use crate::type_error_struct;\n \n use super::suggest_call_constructor;\n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n+use itertools::{Either, Itertools};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::Diagnostic;\n-use rustc_errors::EmissionGuarantee;\n-use rustc_errors::ErrorGuaranteed;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n+    EmissionGuarantee, ErrorGuaranteed, MultiSpan,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -1672,12 +1673,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             self.typeck_results.borrow_mut().fru_field_types_mut().insert(expr_id, fru_tys);\n         } else if adt_kind != AdtKind::Union && !remaining_fields.is_empty() {\n-            let inaccessible_remaining_fields = remaining_fields.iter().any(|(_, (_, field))| {\n-                !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n-            });\n+            debug!(?remaining_fields);\n+            let private_fields: Vec<&ty::FieldDef> = variant\n+                .fields\n+                .iter()\n+                .filter(|field| {\n+                    !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n+                })\n+                .collect();\n \n-            if inaccessible_remaining_fields {\n-                self.report_inaccessible_fields(adt_ty, span);\n+            if !private_fields.is_empty()\n+                && tcx\n+                    .visibility(variant.def_id)\n+                    .is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n+            {\n+                self.report_private_fields(adt_ty, span, private_fields, ast_fields);\n             } else {\n                 self.report_missing_fields(\n                     adt_ty,\n@@ -1801,21 +1811,65 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Report an error for a struct field expression when there are invisible fields.\n     ///\n     /// ```text\n-    /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    /// error: cannot construct `Foo` with struct literal syntax due to private fields\n     ///  --> src/main.rs:8:5\n     ///   |\n     /// 8 |     foo::Foo {};\n     ///   |     ^^^^^^^^\n     ///\n     /// error: aborting due to previous error\n     /// ```\n-    fn report_inaccessible_fields(&self, adt_ty: Ty<'tcx>, span: Span) {\n-        self.tcx.sess.span_err(\n+    fn report_private_fields(\n+        &self,\n+        adt_ty: Ty<'tcx>,\n+        span: Span,\n+        private_fields: Vec<&ty::FieldDef>,\n+        used_fields: &'tcx [hir::ExprField<'tcx>],\n+    ) {\n+        let field_names = |fields: Vec<Symbol>, len: usize| match &fields\n+            .iter()\n+            .map(|field| field.to_string())\n+            .collect::<Vec<_>>()[..]\n+        {\n+            _ if len > 6 => String::new(),\n+            [name] => format!(\"`{name}` \"),\n+            [names @ .., last] => {\n+                let names = names.iter().map(|name| format!(\"`{name}`\")).collect::<Vec<_>>();\n+                format!(\"{} and `{last}` \", names.join(\", \"))\n+            }\n+            [] => unreachable!(),\n+        };\n+\n+        let mut err = self.tcx.sess.struct_span_err(\n             span,\n             &format!(\n-                \"cannot construct `{adt_ty}` with struct literal syntax due to inaccessible fields\",\n+                \"cannot construct `{adt_ty}` with struct literal syntax due to private fields\",\n             ),\n         );\n+        let (used_private_fields, remaining_private_fields): (\n+            Vec<(Symbol, Span)>,\n+            Vec<(Symbol, Span)>,\n+        ) = private_fields.iter().partition_map(|field| {\n+            match used_fields.iter().find(|used_field| field.name == used_field.ident.name) {\n+                Some(used_field) => Either::Left((field.name, used_field.span)),\n+                None => Either::Right((field.name, self.tcx.def_span(field.did))),\n+            }\n+        });\n+        let remaining_private_fields_len = remaining_private_fields.len();\n+        err.span_labels(used_private_fields.iter().map(|(_, span)| *span), \"private field\");\n+        err.span_note(\n+            MultiSpan::from_spans(remaining_private_fields.iter().map(|(_, span)| *span).collect()),\n+            format!(\n+                \"missing field{s} {names}{are} private\",\n+                s = pluralize!(remaining_private_fields_len),\n+                are = pluralize!(\"is\", remaining_private_fields_len),\n+                names = field_names(\n+                    remaining_private_fields.iter().map(|(name, _)| *name).collect(),\n+                    remaining_private_fields_len\n+                )\n+            ),\n+        );\n+        err.emit();\n     }\n \n     fn report_unknown_field("}, {"sha": "2d29093b01b02e5b6635f70d6c662e183235d81c", "filename": "src/test/ui/issues/issue-76077.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -6,5 +6,5 @@ pub mod foo {\n \n fn main() {\n     foo::Foo {};\n-    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to private fields\n }"}, {"sha": "c70a928f6475a9277e2900064fc989e9465cf43b", "filename": "src/test/ui/issues/issue-76077.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -1,8 +1,14 @@\n-error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Foo` with struct literal syntax due to private fields\n   --> $DIR/issue-76077.rs:8:5\n    |\n LL |     foo::Foo {};\n    |     ^^^^^^^^\n+   |\n+note: missing field `you_cant_use_this_field` is private\n+  --> $DIR/issue-76077.rs:3:9\n+   |\n+LL |         you_cant_use_this_field: bool,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "39c222f7c3414c052fab7b5ecb4d55c93cd53a23", "filename": "src/test/ui/privacy/issue-79593.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -16,7 +16,7 @@ mod foo {\n \n fn correct() {\n     foo::Pub {};\n-    //~^ ERROR cannot construct `Pub` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Pub` with struct literal syntax due to private fields\n }\n \n fn wrong() {"}, {"sha": "435d4cbf735958f56a0922a6dd5608cabea64742", "filename": "src/test/ui/privacy/issue-79593.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -10,11 +10,17 @@ error[E0063]: missing field `y` in initializer of `Enum`\n LL |         Enum::Variant { x: () };\n    |         ^^^^^^^^^^^^^ missing `y`\n \n-error: cannot construct `Pub` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Pub` with struct literal syntax due to private fields\n   --> $DIR/issue-79593.rs:18:5\n    |\n LL |     foo::Pub {};\n    |     ^^^^^^^^\n+   |\n+note: missing field `private` is private\n+  --> $DIR/issue-79593.rs:2:22\n+   |\n+LL |     pub struct Pub { private: () }\n+   |                      ^^^^^^^^^^^\n \n error[E0063]: missing field `y` in initializer of `Enum`\n   --> $DIR/issue-79593.rs:23:5"}, {"sha": "326e958aaa94f55fe83226c3b636ceb0814f0c9a", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -7,5 +7,5 @@ pub mod foo {\n \n fn main() {\n     foo::Foo {};\n-    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to private fields\n }"}, {"sha": "2ade7aea57b3d56b351726f81c3f82838d71b096", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -1,8 +1,14 @@\n-error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Foo` with struct literal syntax due to private fields\n   --> $DIR/issue-87872-missing-inaccessible-field-literal.rs:9:5\n    |\n LL |     foo::Foo {};\n    |     ^^^^^^^^\n+   |\n+note: missing field `you_cant_use_this_field` is private\n+  --> $DIR/issue-87872-missing-inaccessible-field-literal.rs:4:9\n+   |\n+LL |         you_cant_use_this_field: bool,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9f1560bfb8dfeebfad9e75b6ba2cc459d40fbdad", "filename": "src/test/ui/typeck/missing-private-fields-in-struct-literal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -0,0 +1,18 @@\n+pub mod m {\n+    pub struct S {\n+        pub visible: bool,\n+        a: (),\n+        b: (),\n+        c: (),\n+        d: (),\n+        e: (),\n+    }\n+}\n+\n+fn main() {\n+    let _ = m::S { //~ ERROR cannot construct `S` with struct literal syntax due to private fields\n+        visible: true,\n+        a: (),\n+        b: (),\n+    };\n+}"}, {"sha": "eb5f460f868e1b070df12936f3e9dfaad31df126", "filename": "src/test/ui/typeck/missing-private-fields-in-struct-literal.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e7ab0bbd772d4dab2a66a72af20f8b207c252ab/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr?ref=1e7ab0bbd772d4dab2a66a72af20f8b207c252ab", "patch": "@@ -0,0 +1,23 @@\n+error: cannot construct `S` with struct literal syntax due to private fields\n+  --> $DIR/missing-private-fields-in-struct-literal.rs:13:13\n+   |\n+LL |     let _ = m::S {\n+   |             ^^^^\n+LL |         visible: true,\n+LL |         a: (),\n+   |         ----- private field\n+LL |         b: (),\n+   |         ----- private field\n+   |\n+note: missing fields `c`, `d` and `e` are private\n+  --> $DIR/missing-private-fields-in-struct-literal.rs:6:9\n+   |\n+LL |         c: (),\n+   |         ^^^^^\n+LL |         d: (),\n+   |         ^^^^^\n+LL |         e: (),\n+   |         ^^^^^\n+\n+error: aborting due to previous error\n+"}]}