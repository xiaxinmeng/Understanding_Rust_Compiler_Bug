{"sha": "5d950bd37d9f4ef46798b79d38d9d91927bb0cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOTUwYmQzN2Q5ZjRlZjQ2Nzk4Yjc5ZDM4ZDlkOTE5MjdiYjBjZjQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-22T15:35:11Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:10:58Z"}, "message": "Switch to `eval_const_expr_partial` when `check_match.rs` checks for `NaN`.", "tree": {"sha": "f32916ce266ff3b4270561bab29cb1385739988b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f32916ce266ff3b4270561bab29cb1385739988b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d950bd37d9f4ef46798b79d38d9d91927bb0cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d950bd37d9f4ef46798b79d38d9d91927bb0cf4", "html_url": "https://github.com/rust-lang/rust/commit/5d950bd37d9f4ef46798b79d38d9d91927bb0cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d950bd37d9f4ef46798b79d38d9d91927bb0cf4/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e919f82da1fb9fa0409f8febede311de4a8f1703", "url": "https://api.github.com/repos/rust-lang/rust/commits/e919f82da1fb9fa0409f8febede311de4a8f1703", "html_url": "https://github.com/rust-lang/rust/commit/e919f82da1fb9fa0409f8febede311de4a8f1703"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "f8a2c507e4204edbc0b80e0de2ba390288f7daa6", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5d950bd37d9f4ef46798b79d38d9d91927bb0cf4/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d950bd37d9f4ef46798b79d38d9d91927bb0cf4/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=5d950bd37d9f4ef46798b79d38d9d91927bb0cf4", "patch": "@@ -13,7 +13,8 @@ use self::Usefulness::*;\n use self::WitnessPreference::*;\n \n use middle::const_eval::{compare_const_vals, const_bool, const_float, const_val};\n-use middle::const_eval::{const_expr_to_pat, eval_const_expr, lookup_const_by_id};\n+use middle::const_eval::{eval_const_expr, eval_const_expr_partial};\n+use middle::const_eval::{const_expr_to_pat, lookup_const_by_id};\n use middle::def::*;\n use middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Init};\n use middle::expr_use_visitor::{JustWrite, LoanCause, MutateMode};\n@@ -229,13 +230,6 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &ast::Expr) {\n     }\n }\n \n-fn is_expr_const_nan(tcx: &ty::ctxt, expr: &ast::Expr) -> bool {\n-    match eval_const_expr(tcx, expr) {\n-        const_float(f) => f.is_nan(),\n-        _ => false\n-    }\n-}\n-\n fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat) {\n     ast_util::walk_pat(pat, |p| {\n         match p.node {\n@@ -269,13 +263,26 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n // Check that we do not match against a static NaN (#6804)\n fn check_for_static_nan(cx: &MatchCheckCtxt, pat: &Pat) {\n     ast_util::walk_pat(pat, |p| {\n-        match p.node {\n-            ast::PatLit(ref expr) if is_expr_const_nan(cx.tcx, &**expr) => {\n-                span_warn!(cx.tcx.sess, p.span, E0003,\n-                    \"unmatchable NaN in pattern, \\\n-                        use the is_nan method in a guard instead\");\n+        if let ast::PatLit(ref expr) = p.node {\n+            match eval_const_expr_partial(cx.tcx, &**expr, None) {\n+                Ok(const_float(f)) if f.is_nan() => {\n+                    span_warn!(cx.tcx.sess, p.span, E0003,\n+                               \"unmatchable NaN in pattern, \\\n+                                use the is_nan method in a guard instead\");\n+                }\n+                Ok(_) => {}\n+\n+                Err(err) => {\n+                    let subspan = p.span.lo <= err.span.lo && err.span.hi <= p.span.hi;\n+                    cx.tcx.sess.span_err(err.span,\n+                                         &format!(\"constant evaluation error: {}\",\n+                                                  err.description().as_slice()));\n+                    if !subspan {\n+                        cx.tcx.sess.span_note(p.span,\n+                                              \"in pattern here\")\n+                    }\n+                }\n             }\n-            _ => ()\n         }\n         true\n     });"}]}