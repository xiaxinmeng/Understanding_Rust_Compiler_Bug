{"sha": "668f0d3495101d547602249785dc175fc11e5fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OGYwZDM0OTUxMDFkNTQ3NjAyMjQ5Nzg1ZGMxNzVmYzExZTVmZTc=", "commit": {"author": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-05-27T15:15:27Z"}, "committer": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-07-25T19:30:08Z"}, "message": "std: win: Don't use console APIs on UWP", "tree": {"sha": "ed61356906d409da914b69f3131dc96be29b9caf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed61356906d409da914b69f3131dc96be29b9caf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668f0d3495101d547602249785dc175fc11e5fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668f0d3495101d547602249785dc175fc11e5fe7", "html_url": "https://github.com/rust-lang/rust/commit/668f0d3495101d547602249785dc175fc11e5fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668f0d3495101d547602249785dc175fc11e5fe7/comments", "author": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c05073d1d64b82ad10478324b87816cec16d74c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c05073d1d64b82ad10478324b87816cec16d74c", "html_url": "https://github.com/rust-lang/rust/commit/4c05073d1d64b82ad10478324b87816cec16d74c"}], "stats": {"total": 145, "additions": 119, "deletions": 26}, "files": [{"sha": "9d7f3a89d6fdcfd8797e142561917dc09984ca84", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/668f0d3495101d547602249785dc175fc11e5fe7/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f0d3495101d547602249785dc175fc11e5fe7/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=668f0d3495101d547602249785dc175fc11e5fe7", "patch": "@@ -35,7 +35,6 @@ pub type ULONG = c_ulong;\n pub type LPBOOL = *mut BOOL;\n pub type LPBYTE = *mut BYTE;\n pub type LPCSTR = *const CHAR;\n-pub type LPCVOID = *const c_void;\n pub type LPCWSTR = *const WCHAR;\n pub type LPDWORD = *mut DWORD;\n pub type LPHANDLE = *mut HANDLE;\n@@ -609,16 +608,6 @@ pub enum EXCEPTION_DISPOSITION {\n     ExceptionCollidedUnwind\n }\n \n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct CONSOLE_READCONSOLE_CONTROL {\n-    pub nLength: ULONG,\n-    pub nInitialChars: ULONG,\n-    pub dwCtrlWakeupMask: ULONG,\n-    pub dwControlKeyState: ULONG,\n-}\n-pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n-\n #[repr(C)]\n #[derive(Copy)]\n pub struct fd_set {\n@@ -642,6 +631,17 @@ pub struct timeval {\n // Functions forbidden when targeting UWP\n cfg_if::cfg_if! {\n if #[cfg(not(target_vendor = \"uwp\"))] {\n+    #[repr(C)]\n+    #[derive(Copy, Clone)]\n+    pub struct CONSOLE_READCONSOLE_CONTROL {\n+        pub nLength: ULONG,\n+        pub nInitialChars: ULONG,\n+        pub dwCtrlWakeupMask: ULONG,\n+        pub dwControlKeyState: ULONG,\n+    }\n+\n+    pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n+\n     #[repr(C)]\n     pub struct BY_HANDLE_FILE_INFORMATION {\n         pub dwFileAttributes: DWORD,\n@@ -657,6 +657,7 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n     }\n \n     pub type LPBY_HANDLE_FILE_INFORMATION = *mut BY_HANDLE_FILE_INFORMATION;\n+    pub type LPCVOID = *const c_void;\n \n     pub const HANDLE_FLAG_INHERIT: DWORD = 0x00000001;\n \n@@ -666,6 +667,20 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n         #[link_name = \"SystemFunction036\"]\n         pub fn RtlGenRandom(RandomBuffer: *mut u8, RandomBufferLength: ULONG) -> BOOLEAN;\n \n+        pub fn ReadConsoleW(hConsoleInput: HANDLE,\n+                            lpBuffer: LPVOID,\n+                            nNumberOfCharsToRead: DWORD,\n+                            lpNumberOfCharsRead: LPDWORD,\n+                            pInputControl: PCONSOLE_READCONSOLE_CONTROL) -> BOOL;\n+\n+        pub fn WriteConsoleW(hConsoleOutput: HANDLE,\n+                             lpBuffer: LPCVOID,\n+                             nNumberOfCharsToWrite: DWORD,\n+                             lpNumberOfCharsWritten: LPDWORD,\n+                             lpReserved: LPVOID) -> BOOL;\n+\n+        pub fn GetConsoleMode(hConsoleHandle: HANDLE,\n+                              lpMode: LPDWORD) -> BOOL;\n         // Allowed but unused by UWP\n         pub fn OpenProcessToken(ProcessHandle: HANDLE,\n                                 DesiredAccess: DWORD,\n@@ -752,20 +767,6 @@ extern \"system\" {\n     pub fn LeaveCriticalSection(CriticalSection: *mut CRITICAL_SECTION);\n     pub fn DeleteCriticalSection(CriticalSection: *mut CRITICAL_SECTION);\n \n-    pub fn ReadConsoleW(hConsoleInput: HANDLE,\n-                        lpBuffer: LPVOID,\n-                        nNumberOfCharsToRead: DWORD,\n-                        lpNumberOfCharsRead: LPDWORD,\n-                        pInputControl: PCONSOLE_READCONSOLE_CONTROL) -> BOOL;\n-\n-    pub fn WriteConsoleW(hConsoleOutput: HANDLE,\n-                         lpBuffer: LPCVOID,\n-                         nNumberOfCharsToWrite: DWORD,\n-                         lpNumberOfCharsWritten: LPDWORD,\n-                         lpReserved: LPVOID) -> BOOL;\n-\n-    pub fn GetConsoleMode(hConsoleHandle: HANDLE,\n-                          lpMode: LPDWORD) -> BOOL;\n     pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn SetFileAttributesW(lpFileName: LPCWSTR,\n                               dwFileAttributes: DWORD) -> BOOL;"}, {"sha": "95465db089fab84989615c3ff94d1dba96c9f192", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/668f0d3495101d547602249785dc175fc11e5fe7/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f0d3495101d547602249785dc175fc11e5fe7/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=668f0d3495101d547602249785dc175fc11e5fe7", "patch": "@@ -37,7 +37,14 @@ pub mod stack_overflow;\n pub mod thread;\n pub mod thread_local;\n pub mod time;\n-pub mod stdio;\n+cfg_if::cfg_if! {\n+    if #[cfg(not(target_vendor = \"uwp\"))] {\n+        pub mod stdio;\n+    } else {\n+        pub mod stdio_uwp;\n+        pub use self::stdio_uwp as stdio;\n+    }\n+}\n \n #[cfg(not(test))]\n pub fn init() {"}, {"sha": "489d3df28600b72b8690c788d8569450d60da69a", "filename": "src/libstd/sys/windows/stdio_uwp.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/668f0d3495101d547602249785dc175fc11e5fe7/src%2Flibstd%2Fsys%2Fwindows%2Fstdio_uwp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f0d3495101d547602249785dc175fc11e5fe7/src%2Flibstd%2Fsys%2Fwindows%2Fstdio_uwp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio_uwp.rs?ref=668f0d3495101d547602249785dc175fc11e5fe7", "patch": "@@ -0,0 +1,85 @@\n+#![unstable(issue = \"0\", feature = \"windows_stdio\")]\n+\n+use crate::io;\n+use crate::sys::c;\n+use crate::sys::handle::Handle;\n+use crate::mem::ManuallyDrop;\n+\n+pub struct Stdin {\n+}\n+pub struct Stdout;\n+pub struct Stderr;\n+\n+const MAX_BUFFER_SIZE: usize = 8192;\n+pub const STDIN_BUF_SIZE: usize = MAX_BUFFER_SIZE / 2 * 3;\n+\n+pub fn get_handle(handle_id: c::DWORD) -> io::Result<c::HANDLE> {\n+    let handle = unsafe { c::GetStdHandle(handle_id) };\n+    if handle == c::INVALID_HANDLE_VALUE {\n+        Err(io::Error::last_os_error())\n+    } else if handle.is_null() {\n+        Err(io::Error::from_raw_os_error(c::ERROR_INVALID_HANDLE as i32))\n+    } else {\n+        Ok(handle)\n+    }\n+}\n+\n+fn write(handle_id: c::DWORD, data: &[u8]) -> io::Result<usize> {\n+    let handle = get_handle(handle_id)?;\n+    let handle = Handle::new(handle);\n+    ManuallyDrop::new(handle).write(data)\n+}\n+\n+impl Stdin {\n+    pub fn new() -> io::Result<Stdin> {\n+        Ok(Stdin { })\n+    }\n+}\n+\n+impl io::Read for Stdin {\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        let handle = get_handle(c::STD_INPUT_HANDLE)?;\n+        let handle = Handle::new(handle);\n+        ManuallyDrop::new(handle).read(buf)\n+    }\n+}\n+\n+impl Stdout {\n+    pub fn new() -> io::Result<Stdout> {\n+        Ok(Stdout)\n+    }\n+}\n+\n+impl io::Write for Stdout {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        write(c::STD_OUTPUT_HANDLE, buf)\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}\n+\n+impl Stderr {\n+    pub fn new() -> io::Result<Stderr> {\n+        Ok(Stderr)\n+    }\n+}\n+\n+impl io::Write for Stderr {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        write(c::STD_ERROR_HANDLE, buf)\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}\n+\n+pub fn is_ebadf(err: &io::Error) -> bool {\n+    err.raw_os_error() == Some(c::ERROR_INVALID_HANDLE as i32)\n+}\n+\n+pub fn panic_output() -> Option<impl io::Write> {\n+    Stderr::new().ok()\n+}"}]}